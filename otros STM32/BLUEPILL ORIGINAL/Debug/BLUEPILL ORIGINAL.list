
BLUEPILL ORIGINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1b4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800b2c8  0800b2c8  0000c2c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b824  0800b824  0000d1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b824  0800b824  0000c824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b82c  0800b82c  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b82c  0800b82c  0000c82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b830  0800b830  0000c830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800b834  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  200001f0  0800ba24  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  0800ba24  0000d57c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cff  00000000  00000000  0000d219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003486  00000000  00000000  00020f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  000243a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed6  00000000  00000000  000256a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b606  00000000  00000000  0002657e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191ec  00000000  00000000  00041b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094893  00000000  00000000  0005ad70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef603  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000639c  00000000  00000000  000ef648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f59e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b2ac 	.word	0x0800b2ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800b2ac 	.word	0x0800b2ac

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be4:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000be6:	4a21      	ldr	r2, [pc, #132]	@ (8000c6c <MX_ADC1_Init+0x98>)
 8000be8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c00:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c0e:	2202      	movs	r2, #2
 8000c10:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c12:	4815      	ldr	r0, [pc, #84]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c14:	f001 fa3c 	bl	8002090 <HAL_ADC_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c1e:	f000 fe09 	bl	8001834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c34:	f001 fcbc 	bl	80025b0 <HAL_ADC_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f000 fdf9 	bl	8001834 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c50:	f001 fcae 	bl	80025b0 <HAL_ADC_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c5a:	f000 fdeb 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000020c 	.word	0x2000020c
 8000c6c:	40012400 	.word	0x40012400

08000c70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d3c <HAL_ADC_MspInit+0xcc>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d151      	bne.n	8000d34 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a2a      	ldr	r2, [pc, #168]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b25      	ldr	r3, [pc, #148]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a24      	ldr	r2, [pc, #144]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VCellMas_Pin|VCellMenos_Pin;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481d      	ldr	r0, [pc, #116]	@ (8000d44 <HAL_ADC_MspInit+0xd4>)
 8000cd0:	f002 f96c 	bl	8002fac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8000d4c <HAL_ADC_MspInit+0xdc>)
 8000cd8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000ce8:	2280      	movs	r2, #128	@ 0x80
 8000cea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cf2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cfa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cfe:	2220      	movs	r2, #32
 8000d00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d08:	480f      	ldr	r0, [pc, #60]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d0a:	f001 ff61 	bl	8002bd0 <HAL_DMA_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000d14:	f000 fd8e 	bl	8001834 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d1c:	621a      	str	r2, [r3, #32]
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2101      	movs	r1, #1
 8000d28:	2012      	movs	r0, #18
 8000d2a:	f001 ff1a 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d2e:	2012      	movs	r0, #18
 8000d30:	f001 ff33 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40012400 	.word	0x40012400
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	2000023c 	.word	0x2000023c
 8000d4c:	40020008 	.word	0x40020008

08000d50 <BQ29330_ReadFunctionControl>:



// Lee el valor actual del registro FUNCTION_CONTROL (0x03) del BQ29330
HAL_StatusTypeDef BQ29330_ReadFunctionControl(BQ29330_Registers reg, uint8_t *valor_leido)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[1];
    buffer[0] = reg; 		// Dirección del registro
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	733b      	strb	r3, [r7, #12]
    // Paso 1: Enviar la dirección del registro que queremos leer (0x03)
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 1, HAL_MAX_DELAY);
 8000d60:	f107 020c 	add.w	r2, r7, #12
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2140      	movs	r1, #64	@ 0x40
 8000d6e:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <BQ29330_ReadFunctionControl+0x50>)
 8000d70:	f002 fc16 	bl	80035a0 <HAL_I2C_Master_Transmit>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;  // Si falla al enviar la dirección del registro, retornamos el error
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <BQ29330_ReadFunctionControl+0x32>
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	e009      	b.n	8000d96 <BQ29330_ReadFunctionControl+0x46>
    // Paso 2: Leer un byte desde el dispositivo (valor del registro FUNCTION_CONTROL)
    return HAL_I2C_Master_Receive(&hi2c1, BMS_I2C_ADDRESS, valor_leido, 1, HAL_MAX_DELAY);  // Devolver el estado de la operación y el valor leído en *valor_leido
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	2140      	movs	r1, #64	@ 0x40
 8000d8e:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <BQ29330_ReadFunctionControl+0x50>)
 8000d90:	f002 fd04 	bl	800379c <HAL_I2C_Master_Receive>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000280 	.word	0x20000280

08000da4 <BQ29330_WriteRegister>:



// Función para escribir en un registro del BQ29330
HAL_StatusTypeDef BQ29330_WriteRegister(BQ29330_Registers reg, uint8_t data)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = reg; 		// Dirección del registro
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;        // Dato a escribir
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8000dbc:	f107 020c 	add.w	r2, r7, #12
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	2140      	movs	r1, #64	@ 0x40
 8000dca:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <BQ29330_WriteRegister+0x38>)
 8000dcc:	f002 fbe8 	bl	80035a0 <HAL_I2C_Master_Transmit>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000280 	.word	0x20000280

08000de0 <BQ29330_config>:

void BQ29330_config(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, 3); 	//CHG =1 DCH =1 LTCLR=1
 8000de4:	2103      	movs	r1, #3
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff ffdc 	bl	8000da4 <BQ29330_WriteRegister>
	BQ29330_WriteRegister(BQ29330_STATE_CONTROL, 4);   		// WDDIS = 1, all else = 0
 8000dec:	2104      	movs	r1, #4
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff ffd8 	bl	8000da4 <BQ29330_WriteRegister>
	BQ29330_WriteRegister(BQ29330_FUNCTION_CONTROL, 7); 	// PACK = 1 y vmem 1
 8000df4:	2107      	movs	r1, #7
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff ffd4 	bl	8000da4 <BQ29330_WriteRegister>
	BQ29330_WriteRegister(BQ29330_CELL, 0x01); 			   	// midiendo cell 1
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	2004      	movs	r0, #4
 8000e00:	f7ff ffd0 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLV, 0x1F);              	// 50 mV 0x00
 8000e04:	211f      	movs	r1, #31
 8000e06:	2005      	movs	r0, #5
 8000e08:	f7ff ffcc 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLD, 0x0F);              	// 31 ms
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	2006      	movs	r0, #6
 8000e10:	f7ff ffc8 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCC, 0xFF);              	// 475 mV y 915 μs
 8000e14:	21ff      	movs	r1, #255	@ 0xff
 8000e16:	2007      	movs	r0, #7
 8000e18:	f7ff ffc4 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCD, 0xFF);              	// idem for discharge
 8000e1c:	21ff      	movs	r1, #255	@ 0xff
 8000e1e:	2008      	movs	r0, #8
 8000e20:	f7ff ffc0 	bl	8000da4 <BQ29330_WriteRegister>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_DMA_Init+0x38>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4a0b      	ldr	r2, [pc, #44]	@ (8000e60 <MX_DMA_Init+0x38>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6153      	str	r3, [r2, #20]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_DMA_Init+0x38>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2101      	movs	r1, #1
 8000e4a:	200b      	movs	r0, #11
 8000e4c:	f001 fe89 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e50:	200b      	movs	r0, #11
 8000e52:	f001 fea2 	bl	8002b9a <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e78:	4b24      	ldr	r3, [pc, #144]	@ (8000f0c <MX_GPIO_Init+0xa8>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a23      	ldr	r2, [pc, #140]	@ (8000f0c <MX_GPIO_Init+0xa8>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <MX_GPIO_Init+0xa8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0310 	and.w	r3, r3, #16
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e90:	4b1e      	ldr	r3, [pc, #120]	@ (8000f0c <MX_GPIO_Init+0xa8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a1d      	ldr	r2, [pc, #116]	@ (8000f0c <MX_GPIO_Init+0xa8>)
 8000e96:	f043 0320 	orr.w	r3, r3, #32
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <MX_GPIO_Init+0xa8>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0320 	and.w	r3, r3, #32
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <MX_GPIO_Init+0xa8>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a17      	ldr	r2, [pc, #92]	@ (8000f0c <MX_GPIO_Init+0xa8>)
 8000eae:	f043 0304 	orr.w	r3, r3, #4
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <MX_GPIO_Init+0xa8>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <MX_GPIO_Init+0xa8>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a11      	ldr	r2, [pc, #68]	@ (8000f0c <MX_GPIO_Init+0xa8>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <MX_GPIO_Init+0xa8>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activador_GPIO_Port, activador_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ede:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <MX_GPIO_Init+0xac>)
 8000ee0:	f002 f9e8 	bl	80032b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activador_Pin;
 8000ee4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(activador_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4619      	mov	r1, r3
 8000efc:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <MX_GPIO_Init+0xac>)
 8000efe:	f002 f855 	bl	8002fac <HAL_GPIO_Init>

}
 8000f02:	bf00      	nop
 8000f04:	3720      	adds	r7, #32
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40011000 	.word	0x40011000

08000f14 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f1a:	4a13      	ldr	r2, [pc, #76]	@ (8000f68 <MX_I2C1_Init+0x54>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f20:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <MX_I2C1_Init+0x58>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <MX_I2C1_Init+0x50>)
 8000f52:	f002 f9e1 	bl	8003318 <HAL_I2C_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f5c:	f000 fc6a 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000280 	.word	0x20000280
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	000186a0 	.word	0x000186a0

08000f70 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <MX_I2C2_Init+0x50>)
 8000f76:	4a13      	ldr	r2, [pc, #76]	@ (8000fc4 <MX_I2C2_Init+0x54>)
 8000f78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_I2C2_Init+0x50>)
 8000f7c:	4a12      	ldr	r2, [pc, #72]	@ (8000fc8 <MX_I2C2_Init+0x58>)
 8000f7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <MX_I2C2_Init+0x50>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <MX_I2C2_Init+0x50>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <MX_I2C2_Init+0x50>)
 8000f8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f92:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <MX_I2C2_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <MX_I2C2_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <MX_I2C2_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <MX_I2C2_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <MX_I2C2_Init+0x50>)
 8000fae:	f002 f9b3 	bl	8003318 <HAL_I2C_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fb8:	f000 fc3c 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200002d4 	.word	0x200002d4
 8000fc4:	40005800 	.word	0x40005800
 8000fc8:	000186a0 	.word	0x000186a0

08000fcc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a2b      	ldr	r2, [pc, #172]	@ (8001094 <HAL_I2C_MspInit+0xc8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d124      	bne.n	8001036 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	4b2a      	ldr	r3, [pc, #168]	@ (8001098 <HAL_I2C_MspInit+0xcc>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a29      	ldr	r2, [pc, #164]	@ (8001098 <HAL_I2C_MspInit+0xcc>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <HAL_I2C_MspInit+0xcc>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001004:	23c0      	movs	r3, #192	@ 0xc0
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001008:	2312      	movs	r3, #18
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 0318 	add.w	r3, r7, #24
 8001014:	4619      	mov	r1, r3
 8001016:	4821      	ldr	r0, [pc, #132]	@ (800109c <HAL_I2C_MspInit+0xd0>)
 8001018:	f001 ffc8 	bl	8002fac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800101c:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <HAL_I2C_MspInit+0xcc>)
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	4a1d      	ldr	r2, [pc, #116]	@ (8001098 <HAL_I2C_MspInit+0xcc>)
 8001022:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001026:	61d3      	str	r3, [r2, #28]
 8001028:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <HAL_I2C_MspInit+0xcc>)
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001034:	e029      	b.n	800108a <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a19      	ldr	r2, [pc, #100]	@ (80010a0 <HAL_I2C_MspInit+0xd4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d124      	bne.n	800108a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_I2C_MspInit+0xcc>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <HAL_I2C_MspInit+0xcc>)
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <HAL_I2C_MspInit+0xcc>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001058:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105e:	2312      	movs	r3, #18
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	4619      	mov	r1, r3
 800106c:	480b      	ldr	r0, [pc, #44]	@ (800109c <HAL_I2C_MspInit+0xd0>)
 800106e:	f001 ff9d 	bl	8002fac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_I2C_MspInit+0xcc>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_I2C_MspInit+0xcc>)
 8001078:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_I2C_MspInit+0xcc>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	@ 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40005400 	.word	0x40005400
 8001098:	40021000 	.word	0x40021000
 800109c:	40010c00 	.word	0x40010c00
 80010a0:	40005800 	.word	0x40005800

080010a4 <Read16>:
uint16_t ina219_calibrationValue;
int16_t  ina219_currentDivider_mA;
int16_t  ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af04      	add	r7, sp, #16
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	2302      	movs	r3, #2
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2180      	movs	r1, #128	@ 0x80
 80010cc:	f002 fecc 	bl	8003e68 <HAL_I2C_Mem_Read>
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
	if(status){
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00b      	beq.n	80010f2 <Read16+0x4e>
		// si hay error de i2c mando unos
		sendUsartMsg("", 						2);
 80010da:	2102      	movs	r1, #2
 80010dc:	480b      	ldr	r0, [pc, #44]	@ (800110c <Read16+0x68>)
 80010de:	f000 ff05 	bl	8001eec <sendUsartMsg>
		sendUsartMsg("", 						2);
 80010e2:	2102      	movs	r1, #2
 80010e4:	4809      	ldr	r0, [pc, #36]	@ (800110c <Read16+0x68>)
 80010e6:	f000 ff01 	bl	8001eec <sendUsartMsg>
		sendUsartMsg("", 						2);
 80010ea:	2102      	movs	r1, #2
 80010ec:	4807      	ldr	r0, [pc, #28]	@ (800110c <Read16+0x68>)
 80010ee:	f000 fefd 	bl	8001eec <sendUsartMsg>
		//sendUsartMsg("status I2c INA219", 						status);
	}

	return ((Value[0] << 8) | Value[1]);
 80010f2:	7b3b      	ldrb	r3, [r7, #12]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	7b7b      	ldrb	r3, [r7, #13]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b21b      	sxth	r3, r3
 8001100:	b29b      	uxth	r3, r3
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	0800b2c8 	.word	0x0800b2c8

08001110 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af04      	add	r7, sp, #16
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
 800111c:	4613      	mov	r3, r2
 800111e:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8001120:	883b      	ldrh	r3, [r7, #0]
 8001122:	0a1b      	lsrs	r3, r3, #8
 8001124:	b29b      	uxth	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 800112a:	883b      	ldrh	r3, [r7, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	b29a      	uxth	r2, r3
 8001138:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113c:	9302      	str	r3, [sp, #8]
 800113e:	2302      	movs	r3, #2
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2301      	movs	r3, #1
 800114a:	2180      	movs	r1, #128	@ 0x80
 800114c:	f002 fd92 	bl	8003c74 <HAL_I2C_Mem_Write>
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <INA219_ReadCurrent_raw>:
	return ((result >> 3  ) * 4);

}

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001160:	2104      	movs	r1, #4
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff9e 	bl	80010a4 <Read16>
 8001168:	4603      	mov	r3, r0
 800116a:	81fb      	strh	r3, [r7, #14]

	return (result );
 800116c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <INA219_Reset>:

	return (result * 0.01);
}

void INA219_Reset(INA219_t *ina219)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001180:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001184:	2100      	movs	r1, #0
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffc2 	bl	8001110 <Write16>
	HAL_Delay(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f000 ff5b 	bl	8002048 <HAL_Delay>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	461a      	mov	r2, r3
 80011aa:	2105      	movs	r1, #5
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffaf 	bl	8001110 <Write16>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	461a      	mov	r2, r3
 80011ca:	2100      	movs	r1, #0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff9f 	bl	8001110 <Write16>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <INA219_setCalibration_32V_1A>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_32V_1A(INA219_t *ina219)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 80011e4:	f643 139f 	movw	r3, #14751	@ 0x399f
 80011e8:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 10240;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <INA219_setCalibration_32V_1A+0x40>)
 80011ec:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80011f0:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 25;    // Current LSB = 40uA per bit (1000/40 = 25)
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <INA219_setCalibration_32V_1A+0x44>)
 80011f4:	2219      	movs	r2, #25
 80011f6:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0.8f; // Power LSB = 800uW per bit
 80011f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <INA219_setCalibration_32V_1A+0x48>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <INA219_setCalibration_32V_1A+0x40>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ffc8 	bl	800119a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	4619      	mov	r1, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffd3 	bl	80011ba <INA219_setConfig>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000328 	.word	0x20000328
 8001220:	2000032a 	.word	0x2000032a
 8001224:	2000032c 	.word	0x2000032c

08001228 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	4613      	mov	r3, r2
 8001234:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <INA219_Init+0x5c>)
 8001244:	2200      	movs	r2, #0
 8001246:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <INA219_Init+0x60>)
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	b29b      	uxth	r3, r3
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	b299      	uxth	r1, r3
 8001256:	2302      	movs	r3, #2
 8001258:	2203      	movs	r2, #3
 800125a:	68b8      	ldr	r0, [r7, #8]
 800125c:	f003 f878 	bl	8004350 <HAL_I2C_IsDeviceReady>
 8001260:	4603      	mov	r3, r0
 8001262:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d107      	bne.n	800127a <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff ff84 	bl	8001178 <INA219_Reset>
		INA219_setCalibration_32V_1A(ina219);
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff ffb3 	bl	80011dc <INA219_setCalibration_32V_1A>

		return 1;
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <INA219_Init+0x54>
	}

	else
	{
		return 0;
 800127a:	2300      	movs	r3, #0
	}
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000032a 	.word	0x2000032a
 8001288:	2000032c 	.word	0x2000032c

0800128c <HAL_ADC_ConvCpltCallback>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


uint8_t conv_complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){ conv_complete=1; }
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <HAL_ADC_ConvCpltCallback+0x18>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	2000034e 	.word	0x2000034e

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f000 fe69 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f897 	bl	80013e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f7ff fdd5 	bl	8000e64 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ba:	f7ff fdb5 	bl	8000e28 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80012be:	f000 fd55 	bl	8001d6c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80012c2:	f7ff fc87 	bl	8000bd4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80012c6:	f000 fc7b 	bl	8001bc0 <MX_TIM3_Init>
  MX_I2C1_Init();
 80012ca:	f7ff fe23 	bl	8000f14 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012ce:	f7ff fe4f 	bl	8000f70 <MX_I2C2_Init>
  MX_TIM2_Init();
 80012d2:	f000 fc27 	bl	8001b24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//timer
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80012d6:	210c      	movs	r1, #12
 80012d8:	4836      	ldr	r0, [pc, #216]	@ (80013b4 <main+0x10c>)
 80012da:	f004 fbcf 	bl	8005a7c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, htim3.Init.Period/2);
 80012de:	4b35      	ldr	r3, [pc, #212]	@ (80013b4 <main+0x10c>)
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	4b34      	ldr	r3, [pc, #208]	@ (80013b4 <main+0x10c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	0852      	lsrs	r2, r2, #1
 80012e8:	641a      	str	r2, [r3, #64]	@ 0x40
 // HAL_TIM_BASE_START_IT(&htim2);


  //adc
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 80012ea:	2202      	movs	r2, #2
 80012ec:	4932      	ldr	r1, [pc, #200]	@ (80013b8 <main+0x110>)
 80012ee:	4833      	ldr	r0, [pc, #204]	@ (80013bc <main+0x114>)
 80012f0:	f000 ffa6 	bl	8002240 <HAL_ADC_Start_DMA>

// INA219
  while(!INA219_Init(&ina219, &hi2c2, INA219_ADDRESS));
 80012f4:	bf00      	nop
 80012f6:	2240      	movs	r2, #64	@ 0x40
 80012f8:	4931      	ldr	r1, [pc, #196]	@ (80013c0 <main+0x118>)
 80012fa:	4832      	ldr	r0, [pc, #200]	@ (80013c4 <main+0x11c>)
 80012fc:	f7ff ff94 	bl	8001228 <INA219_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f7      	beq.n	80012f6 <main+0x4e>


  //INA219_Init(&ina219, &hi2c2, INA219_ADDRESS);
  //INA219_setCalibration_32V_2A(&ina219);
  INA219_setCalibration_32V_1A(&ina219);
 8001306:	482f      	ldr	r0, [pc, #188]	@ (80013c4 <main+0x11c>)
 8001308:	f7ff ff68 	bl	80011dc <INA219_setCalibration_32V_1A>
  //INA219_setCalibration_16V_400mA(&ina219);
  HAL_StatusTypeDef statusI2c = 0x00;
 800130c:	2300      	movs	r3, #0
 800130e:	71fb      	strb	r3, [r7, #7]

  //escribo al bq
  BMSlogic();
 8001310:	f000 fa24 	bl	800175c <BMSlogic>

  /* USER CODE END 2 */
	BQ29330_config();
 8001314:	f7ff fd64 	bl	8000de0 <BQ29330_config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1) {

	// --- proceso a medir ---
	leer_promediado(&cell_mas, &cell_menos, &current);
 8001318:	4a2b      	ldr	r2, [pc, #172]	@ (80013c8 <main+0x120>)
 800131a:	492c      	ldr	r1, [pc, #176]	@ (80013cc <main+0x124>)
 800131c:	482c      	ldr	r0, [pc, #176]	@ (80013d0 <main+0x128>)
 800131e:	f000 f8bd 	bl	800149c <leer_promediado>
    celdas = escalar_tension_adc(cell_mas, cell_menos);
 8001322:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <main+0x128>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	4a29      	ldr	r2, [pc, #164]	@ (80013cc <main+0x124>)
 8001328:	8812      	ldrh	r2, [r2, #0]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f91b 	bl	8001568 <escalar_tension_adc>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <main+0x12c>)
 8001338:	801a      	strh	r2, [r3, #0]
	totalizadoCoulomb = totalizadoCoulomb + current;
 800133a:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <main+0x120>)
 800133c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001340:	461a      	mov	r2, r3
 8001342:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <main+0x130>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	4a23      	ldr	r2, [pc, #140]	@ (80013d8 <main+0x130>)
 800134a:	6013      	str	r3, [r2, #0]

    statusI2c = BMSreadAll();
 800134c:	f000 f998 	bl	8001680 <BMSreadAll>
 8001350:	4603      	mov	r3, r0
 8001352:	71fb      	strb	r3, [r7, #7]
    //sendMSGS(statusI2c);


	if(statusI2c == 0){
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d113      	bne.n	8001382 <main+0xda>
		sendUsartMsg("", 						celdas);
 800135a:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <main+0x12c>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	481e      	ldr	r0, [pc, #120]	@ (80013dc <main+0x134>)
 8001362:	f000 fdc3 	bl	8001eec <sendUsartMsg>
		sendUsartMsgInt("", 					current);
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <main+0x120>)
 8001368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136c:	4619      	mov	r1, r3
 800136e:	481b      	ldr	r0, [pc, #108]	@ (80013dc <main+0x134>)
 8001370:	f000 fd96 	bl	8001ea0 <sendUsartMsgInt>
		sendUsartMsgLongUint("", 				totalizadoCoulomb);
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <main+0x130>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	4818      	ldr	r0, [pc, #96]	@ (80013dc <main+0x134>)
 800137c:	f000 fd6c 	bl	8001e58 <sendUsartMsgLongUint>
 8001380:	e00b      	b.n	800139a <main+0xf2>
	} else{
		// si hay error de i2c del bq mando unos
		sendUsartMsg("", 						1);
 8001382:	2101      	movs	r1, #1
 8001384:	4815      	ldr	r0, [pc, #84]	@ (80013dc <main+0x134>)
 8001386:	f000 fdb1 	bl	8001eec <sendUsartMsg>
		sendUsartMsg("", 						1);
 800138a:	2101      	movs	r1, #1
 800138c:	4813      	ldr	r0, [pc, #76]	@ (80013dc <main+0x134>)
 800138e:	f000 fdad 	bl	8001eec <sendUsartMsg>
		sendUsartMsg("", 						1);
 8001392:	2101      	movs	r1, #1
 8001394:	4811      	ldr	r0, [pc, #68]	@ (80013dc <main+0x134>)
 8001396:	f000 fda9 	bl	8001eec <sendUsartMsg>
	}

	BMSlogic();
 800139a:	f000 f9df 	bl	800175c <BMSlogic>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800139e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a2:	480f      	ldr	r0, [pc, #60]	@ (80013e0 <main+0x138>)
 80013a4:	f001 ff9e 	bl	80032e4 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 80013a8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013ac:	f000 fe4c 	bl	8002048 <HAL_Delay>
	leer_promediado(&cell_mas, &cell_menos, &current);
 80013b0:	e7b2      	b.n	8001318 <main+0x70>
 80013b2:	bf00      	nop
 80013b4:	2000039c 	.word	0x2000039c
 80013b8:	20000330 	.word	0x20000330
 80013bc:	2000020c 	.word	0x2000020c
 80013c0:	200002d4 	.word	0x200002d4
 80013c4:	20000344 	.word	0x20000344
 80013c8:	2000034c 	.word	0x2000034c
 80013cc:	20000336 	.word	0x20000336
 80013d0:	20000334 	.word	0x20000334
 80013d4:	20000338 	.word	0x20000338
 80013d8:	2000033c 	.word	0x2000033c
 80013dc:	0800b2cc 	.word	0x0800b2cc
 80013e0:	40011000 	.word	0x40011000

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b094      	sub	sp, #80	@ 0x50
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ee:	2228      	movs	r2, #40	@ 0x28
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f007 f9de 	bl	80087b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001414:	2301      	movs	r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001418:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001422:	2301      	movs	r3, #1
 8001424:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001426:	2302      	movs	r3, #2
 8001428:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800142e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001430:	2300      	movs	r3, #0
 8001432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fdbb 	bl	8004fb4 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001444:	f000 f9f6 	bl	8001834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144c:	2302      	movs	r3, #2
 800144e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001454:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001458:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800145a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f004 f826 	bl	80054b8 <HAL_RCC_ClockConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001472:	f000 f9df 	bl	8001834 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001476:	2302      	movs	r3, #2
 8001478:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800147a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800147e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4618      	mov	r0, r3
 8001484:	f004 f9a6 	bl	80057d4 <HAL_RCCEx_PeriphCLKConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800148e:	f000 f9d1 	bl	8001834 <Error_Handler>
  }
}
 8001492:	bf00      	nop
 8001494:	3750      	adds	r7, #80	@ 0x50
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <leer_promediado>:

/* USER CODE BEGIN 4 */

void leer_promediado(uint16_t *cell_mas,uint16_t *cell_menos, int16_t *current) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
	uint32_t cell_mas_total = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
	uint32_t cell_menos_total = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
	int32_t current_total = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]


	for(uint8_t i = 0; i < NUM_SAMPLES ; i++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	74fb      	strb	r3, [r7, #19]
 80014b8:	e02c      	b.n	8001514 <leer_promediado+0x78>
	    while(!conv_complete);
 80014ba:	bf00      	nop
 80014bc:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <leer_promediado+0xbc>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0fb      	beq.n	80014bc <leer_promediado+0x20>
	    *cell_mas = (uint16_t) rawValues[0];
 80014c4:	4b25      	ldr	r3, [pc, #148]	@ (800155c <leer_promediado+0xc0>)
 80014c6:	881a      	ldrh	r2, [r3, #0]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	801a      	strh	r2, [r3, #0]
	    *cell_menos = (uint16_t) rawValues[1];
 80014cc:	4b23      	ldr	r3, [pc, #140]	@ (800155c <leer_promediado+0xc0>)
 80014ce:	885a      	ldrh	r2, [r3, #2]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	801a      	strh	r2, [r3, #0]
	    *current = INA219_ReadCurrent_raw(&ina219);
 80014d4:	4822      	ldr	r0, [pc, #136]	@ (8001560 <leer_promediado+0xc4>)
 80014d6:	f7ff fe3f 	bl	8001158 <INA219_ReadCurrent_raw>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	801a      	strh	r2, [r3, #0]

	    cell_mas_total += *cell_mas;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	4413      	add	r3, r2
 80014ec:	61fb      	str	r3, [r7, #28]
	    cell_menos_total += *cell_menos;
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	4413      	add	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
	    current_total += *current;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001500:	461a      	mov	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	4413      	add	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
	    conv_complete = 0;
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <leer_promediado+0xbc>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_SAMPLES ; i++) {
 800150e:	7cfb      	ldrb	r3, [r7, #19]
 8001510:	3301      	adds	r3, #1
 8001512:	74fb      	strb	r3, [r7, #19]
 8001514:	7cfb      	ldrb	r3, [r7, #19]
 8001516:	2bc7      	cmp	r3, #199	@ 0xc7
 8001518:	d9cf      	bls.n	80014ba <leer_promediado+0x1e>
	}

	// Promedio final
	*cell_mas = cell_mas_total / NUM_SAMPLES;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	4a11      	ldr	r2, [pc, #68]	@ (8001564 <leer_promediado+0xc8>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	099b      	lsrs	r3, r3, #6
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	801a      	strh	r2, [r3, #0]
	*cell_menos = cell_menos_total / NUM_SAMPLES;
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <leer_promediado+0xc8>)
 800152e:	fba2 2303 	umull	r2, r3, r2, r3
 8001532:	099b      	lsrs	r3, r3, #6
 8001534:	b29a      	uxth	r2, r3
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	801a      	strh	r2, [r3, #0]
	*current = current_total / NUM_SAMPLES;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	4a09      	ldr	r2, [pc, #36]	@ (8001564 <leer_promediado+0xc8>)
 800153e:	fb82 1203 	smull	r1, r2, r2, r3
 8001542:	1192      	asrs	r2, r2, #6
 8001544:	17db      	asrs	r3, r3, #31
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	b21a      	sxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	801a      	strh	r2, [r3, #0]
}
 800154e:	bf00      	nop
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000034e 	.word	0x2000034e
 800155c:	20000330 	.word	0x20000330
 8001560:	20000344 	.word	0x20000344
 8001564:	51eb851f 	.word	0x51eb851f

08001568 <escalar_tension_adc>:


uint16_t escalar_tension_adc(uint16_t cell_mas,uint16_t cell_menos){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	460a      	mov	r2, r1
 8001572:	80fb      	strh	r3, [r7, #6]
 8001574:	4613      	mov	r3, r2
 8001576:	80bb      	strh	r3, [r7, #4]
	cell_menos = cell_menos * 3.3 / 4.096; //* 1.67;
 8001578:	88bb      	ldrh	r3, [r7, #4]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff42 	bl	8000404 <__aeabi_i2d>
 8001580:	a335      	add	r3, pc, #212	@ (adr r3, 8001658 <escalar_tension_adc+0xf0>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7fe ffa7 	bl	80004d8 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	a333      	add	r3, pc, #204	@ (adr r3, 8001660 <escalar_tension_adc+0xf8>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7ff f8c8 	bl	800072c <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7ff fa70 	bl	8000a88 <__aeabi_d2uiz>
 80015a8:	4603      	mov	r3, r0
 80015aa:	80bb      	strh	r3, [r7, #4]
	cell_mas = cell_mas * 3.3 / 4.096 * 1.147;
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff28 	bl	8000404 <__aeabi_i2d>
 80015b4:	a328      	add	r3, pc, #160	@ (adr r3, 8001658 <escalar_tension_adc+0xf0>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7fe ff8d 	bl	80004d8 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	a326      	add	r3, pc, #152	@ (adr r3, 8001660 <escalar_tension_adc+0xf8>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7ff f8ae 	bl	800072c <__aeabi_ddiv>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	a323      	add	r3, pc, #140	@ (adr r3, 8001668 <escalar_tension_adc+0x100>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7fe ff7b 	bl	80004d8 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fa4d 	bl	8000a88 <__aeabi_d2uiz>
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
    celdas = (cell_mas - cell_menos);
 80015f2:	88fa      	ldrh	r2, [r7, #6]
 80015f4:	88bb      	ldrh	r3, [r7, #4]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <escalar_tension_adc+0x110>)
 80015fc:	801a      	strh	r2, [r3, #0]
	if(bq.BQ29330_function_control == 3 || bq.BQ29330_function_control == 5 || bq.BQ29330_function_control == 7){
 80015fe:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <escalar_tension_adc+0x114>)
 8001600:	7cdb      	ldrb	r3, [r3, #19]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d007      	beq.n	8001616 <escalar_tension_adc+0xae>
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <escalar_tension_adc+0x114>)
 8001608:	7cdb      	ldrb	r3, [r3, #19]
 800160a:	2b05      	cmp	r3, #5
 800160c:	d003      	beq.n	8001616 <escalar_tension_adc+0xae>
 800160e:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <escalar_tension_adc+0x114>)
 8001610:	7cdb      	ldrb	r3, [r3, #19]
 8001612:	2b07      	cmp	r3, #7
 8001614:	d107      	bne.n	8001626 <escalar_tension_adc+0xbe>
		return celdas * 18;
 8001616:	4b18      	ldr	r3, [pc, #96]	@ (8001678 <escalar_tension_adc+0x110>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	00d2      	lsls	r2, r2, #3
 800161e:	4413      	add	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	b29b      	uxth	r3, r3
 8001624:	e014      	b.n	8001650 <escalar_tension_adc+0xe8>
	}
	return (975 - celdas)/0.15;
 8001626:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <escalar_tension_adc+0x110>)
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	f5c3 7373 	rsb	r3, r3, #972	@ 0x3cc
 800162e:	3303      	adds	r3, #3
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fee7 	bl	8000404 <__aeabi_i2d>
 8001636:	a30e      	add	r3, pc, #56	@ (adr r3, 8001670 <escalar_tension_adc+0x108>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7ff f876 	bl	800072c <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff fa1e 	bl	8000a88 <__aeabi_d2uiz>
 800164c:	4603      	mov	r3, r0
 800164e:	b29b      	uxth	r3, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	66666666 	.word	0x66666666
 800165c:	400a6666 	.word	0x400a6666
 8001660:	d2f1a9fc 	.word	0xd2f1a9fc
 8001664:	4010624d 	.word	0x4010624d
 8001668:	ac083127 	.word	0xac083127
 800166c:	3ff25a1c 	.word	0x3ff25a1c
 8001670:	33333333 	.word	0x33333333
 8001674:	3fc33333 	.word	0x3fc33333
 8001678:	20000338 	.word	0x20000338
 800167c:	20000000 	.word	0x20000000

08001680 <BMSreadAll>:


HAL_StatusTypeDef BMSreadAll(){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef statusI2c = 0x00;
 8001686:	2300      	movs	r3, #0
 8001688:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_STATUS, 					&bq.BQ29330_status);
 800168a:	492b      	ldr	r1, [pc, #172]	@ (8001738 <BMSreadAll+0xb8>)
 800168c:	2000      	movs	r0, #0
 800168e:	f7ff fb5f 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4313      	orrs	r3, r2
 800169a:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_OUTPUT_CONTROL, 			&bq.BQ29330_output_control);
 800169c:	4927      	ldr	r1, [pc, #156]	@ (800173c <BMSreadAll+0xbc>)
 800169e:	2001      	movs	r0, #1
 80016a0:	f7ff fb56 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_STATE_CONTROL, 			&bq.BQ29330_state_control);
 80016ae:	4924      	ldr	r1, [pc, #144]	@ (8001740 <BMSreadAll+0xc0>)
 80016b0:	2002      	movs	r0, #2
 80016b2:	f7ff fb4d 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	4313      	orrs	r3, r2
 80016be:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_FUNCTION_CONTROL, 		&bq.BQ29330_function_control);
 80016c0:	4920      	ldr	r1, [pc, #128]	@ (8001744 <BMSreadAll+0xc4>)
 80016c2:	2003      	movs	r0, #3
 80016c4:	f7ff fb44 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_CELL, 					&bq.BQ29330_cell);
 80016d2:	491d      	ldr	r1, [pc, #116]	@ (8001748 <BMSreadAll+0xc8>)
 80016d4:	2004      	movs	r0, #4
 80016d6:	f7ff fb3b 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_OLV, 						&bq.BQ29330_OLV);
 80016e4:	4919      	ldr	r1, [pc, #100]	@ (800174c <BMSreadAll+0xcc>)
 80016e6:	2005      	movs	r0, #5
 80016e8:	f7ff fb32 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_OLD, 						&bq.BQ29330_OLD);
 80016f6:	4916      	ldr	r1, [pc, #88]	@ (8001750 <BMSreadAll+0xd0>)
 80016f8:	2006      	movs	r0, #6
 80016fa:	f7ff fb29 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	4313      	orrs	r3, r2
 8001706:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_SCC, 						&bq.BQ29330_SCC);
 8001708:	4912      	ldr	r1, [pc, #72]	@ (8001754 <BMSreadAll+0xd4>)
 800170a:	2007      	movs	r0, #7
 800170c:	f7ff fb20 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4313      	orrs	r3, r2
 8001718:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_SCD, 						&bq.BQ29330_SCD);
 800171a:	490f      	ldr	r1, [pc, #60]	@ (8001758 <BMSreadAll+0xd8>)
 800171c:	2008      	movs	r0, #8
 800171e:	f7ff fb17 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	4313      	orrs	r3, r2
 800172a:	71fb      	strb	r3, [r7, #7]
	return statusI2c;
 800172c:	79fb      	ldrb	r3, [r7, #7]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000010 	.word	0x20000010
 800173c:	20000011 	.word	0x20000011
 8001740:	20000012 	.word	0x20000012
 8001744:	20000013 	.word	0x20000013
 8001748:	20000014 	.word	0x20000014
 800174c:	20000015 	.word	0x20000015
 8001750:	20000016 	.word	0x20000016
 8001754:	20000017 	.word	0x20000017
 8001758:	20000018 	.word	0x20000018

0800175c <BMSlogic>:
	sendUsartMsg("CELL : ", 							bq.BQ29330_cell);
	*/

}

void BMSlogic(){
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	status_reset();
 8001760:	f000 f830 	bl	80017c4 <status_reset>
	batteryProtection(celdas);
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <BMSlogic+0x18>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f805 	bl	8001778 <batteryProtection>
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000338 	.word	0x20000338

08001778 <batteryProtection>:

//cierro las llaves por OV o UV
void batteryProtection(uint16_t Vbat_mV){
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
	//corto la descarga
    if( celdas < 6000){
 8001782:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <batteryProtection+0x40>)
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	f241 726f 	movw	r2, #5999	@ 0x176f
 800178a:	4293      	cmp	r3, r2
 800178c:	d80f      	bhi.n	80017ae <batteryProtection+0x36>
    //if( celdas < 6000 && cortoEnclavamientoDSG == false){
    	bq.BQ29330_output_control  &= ~(1U << DSG_BIT);
 800178e:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <batteryProtection+0x44>)
 8001790:	7c5b      	ldrb	r3, [r3, #17]
 8001792:	f023 0302 	bic.w	r3, r3, #2
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <batteryProtection+0x44>)
 800179a:	745a      	strb	r2, [r3, #17]
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, bq.BQ29330_output_control);
 800179c:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <batteryProtection+0x44>)
 800179e:	7c5b      	ldrb	r3, [r3, #17]
 80017a0:	4619      	mov	r1, r3
 80017a2:	2001      	movs	r0, #1
 80017a4:	f7ff fafe 	bl	8000da4 <BQ29330_WriteRegister>
        cortoEnclavamientoDSG = true;
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <batteryProtection+0x48>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, bq.BQ29330_output_control);
        cortoEnclavamientoCHG = false;
    }
*/

}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000338 	.word	0x20000338
 80017bc:	20000000 	.word	0x20000000
 80017c0:	20000340 	.word	0x20000340

080017c4 <status_reset>:

//reseteo el estatus register
void status_reset(){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	if(bq.BQ29330_status != 0){
 80017c8:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <status_reset+0x6c>)
 80017ca:	7c1b      	ldrb	r3, [r3, #16]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d02c      	beq.n	800182a <status_reset+0x66>
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, bq.BQ29330_output_control &= 0b11111110);
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <status_reset+0x6c>)
 80017d2:	7c5b      	ldrb	r3, [r3, #17]
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <status_reset+0x6c>)
 80017dc:	745a      	strb	r2, [r3, #17]
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <status_reset+0x6c>)
 80017e0:	7c5b      	ldrb	r3, [r3, #17]
 80017e2:	4619      	mov	r1, r3
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff fadd 	bl	8000da4 <BQ29330_WriteRegister>
        HAL_Delay(10);
 80017ea:	200a      	movs	r0, #10
 80017ec:	f000 fc2c 	bl	8002048 <HAL_Delay>
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, bq.BQ29330_output_control |= 0b00000001);
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <status_reset+0x6c>)
 80017f2:	7c5b      	ldrb	r3, [r3, #17]
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <status_reset+0x6c>)
 80017fc:	745a      	strb	r2, [r3, #17]
 80017fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <status_reset+0x6c>)
 8001800:	7c5b      	ldrb	r3, [r3, #17]
 8001802:	4619      	mov	r1, r3
 8001804:	2001      	movs	r0, #1
 8001806:	f7ff facd 	bl	8000da4 <BQ29330_WriteRegister>
        HAL_Delay(10);
 800180a:	200a      	movs	r0, #10
 800180c:	f000 fc1c 	bl	8002048 <HAL_Delay>
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, bq.BQ29330_output_control &= 0b11111110);
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <status_reset+0x6c>)
 8001812:	7c5b      	ldrb	r3, [r3, #17]
 8001814:	f023 0301 	bic.w	r3, r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <status_reset+0x6c>)
 800181c:	745a      	strb	r2, [r3, #17]
 800181e:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <status_reset+0x6c>)
 8001820:	7c5b      	ldrb	r3, [r3, #17]
 8001822:	4619      	mov	r1, r3
 8001824:	2001      	movs	r0, #1
 8001826:	f7ff fabd 	bl	8000da4 <BQ29330_WriteRegister>
	}
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000000 	.word	0x20000000

08001834 <Error_Handler>:


/* USER CODE END 4 */

void Error_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <Error_Handler+0x8>

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001846:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <HAL_MspInit+0xa4>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	4a26      	ldr	r2, [pc, #152]	@ (80018e4 <HAL_MspInit+0xa4>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6193      	str	r3, [r2, #24]
 8001852:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <HAL_MspInit+0xa4>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <HAL_MspInit+0xa4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a20      	ldr	r2, [pc, #128]	@ (80018e4 <HAL_MspInit+0xa4>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <HAL_MspInit+0xa4>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 2, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2102      	movs	r1, #2
 800187a:	f06f 000b 	mvn.w	r0, #11
 800187e:	f001 f970 	bl	8002b62 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2102      	movs	r1, #2
 8001886:	f06f 000a 	mvn.w	r0, #10
 800188a:	f001 f96a 	bl	8002b62 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 2, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2102      	movs	r1, #2
 8001892:	f06f 0009 	mvn.w	r0, #9
 8001896:	f001 f964 	bl	8002b62 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2102      	movs	r1, #2
 800189e:	f06f 0004 	mvn.w	r0, #4
 80018a2:	f001 f95e 	bl	8002b62 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2102      	movs	r1, #2
 80018aa:	f06f 0003 	mvn.w	r0, #3
 80018ae:	f001 f958 	bl	8002b62 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2102      	movs	r1, #2
 80018b6:	f06f 0001 	mvn.w	r0, #1
 80018ba:	f001 f952 	bl	8002b62 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_MspInit+0xa8>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <HAL_MspInit+0xa8>)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010000 	.word	0x40010000

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <NMI_Handler+0x4>

080018f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <MemManage_Handler+0x4>

08001904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <UsageFault_Handler+0x4>

08001914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193c:	f000 fb68 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <DMA1_Channel1_IRQHandler+0x10>)
 800194a:	f001 f9fb 	bl	8002d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000023c 	.word	0x2000023c

08001958 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <ADC1_2_IRQHandler+0x10>)
 800195e:	f000 fd4d 	bl	80023fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000020c 	.word	0x2000020c

0800196c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <TIM2_IRQHandler+0x10>)
 8001972:	f004 f925 	bl	8005bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000354 	.word	0x20000354

08001980 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <TIM3_IRQHandler+0x10>)
 8001986:	f004 f91b 	bl	8005bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000039c 	.word	0x2000039c

08001994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return 1;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <_kill>:

int _kill(int pid, int sig)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ac:	f006 ff0e 	bl	80087cc <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2216      	movs	r2, #22
 80019b4:	601a      	str	r2, [r3, #0]
  return -1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_exit>:

void _exit (int status)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffe7 	bl	80019a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <_exit+0x12>

080019d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e00a      	b.n	8001a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ea:	f3af 8000 	nop.w
 80019ee:	4601      	mov	r1, r0
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbf0      	blt.n	80019ea <_read+0x12>
  }

  return len;
 8001a08:	687b      	ldr	r3, [r7, #4]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e009      	b.n	8001a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf1      	blt.n	8001a24 <_write+0x12>
  }
  return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_close>:

int _close(int file)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a70:	605a      	str	r2, [r3, #4]
  return 0;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <_isatty>:

int _isatty(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
	...

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab4:	4a14      	ldr	r2, [pc, #80]	@ (8001b08 <_sbrk+0x5c>)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <_sbrk+0x60>)
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <_sbrk+0x64>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <_sbrk+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d207      	bcs.n	8001aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001adc:	f006 fe76 	bl	80087cc <__errno>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aea:	e009      	b.n	8001b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af2:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <_sbrk+0x64>)
 8001afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20005000 	.word	0x20005000
 8001b0c:	00000400 	.word	0x00000400
 8001b10:	20000350 	.word	0x20000350
 8001b14:	20000580 	.word	0x20000580

08001b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b40:	4b1e      	ldr	r3, [pc, #120]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b4a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001b4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001b56:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b58:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001b5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	4b17      	ldr	r3, [pc, #92]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	4b15      	ldr	r3, [pc, #84]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b6a:	4814      	ldr	r0, [pc, #80]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b6c:	f003 fee8 	bl	8005940 <HAL_TIM_Base_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b76:	f7ff fe5d 	bl	8001834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	4619      	mov	r1, r3
 8001b86:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001b88:	f004 f9cc 	bl	8005f24 <HAL_TIM_ConfigClockSource>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b92:	f7ff fe4f 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b9e:	463b      	mov	r3, r7
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	@ (8001bbc <MX_TIM2_Init+0x98>)
 8001ba4:	f004 fd62 	bl	800666c <HAL_TIMEx_MasterConfigSynchronization>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bae:	f7ff fe41 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000354 	.word	0x20000354

08001bc0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc6:	f107 0320 	add.w	r3, r7, #32
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	615a      	str	r2, [r3, #20]
 8001be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be2:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <MX_TIM3_Init+0xac>)
 8001be4:	4a22      	ldr	r2, [pc, #136]	@ (8001c70 <MX_TIM3_Init+0xb0>)
 8001be6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001be8:	4b20      	ldr	r3, [pc, #128]	@ (8001c6c <MX_TIM3_Init+0xac>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bee:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <MX_TIM3_Init+0xac>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 490;
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c6c <MX_TIM3_Init+0xac>)
 8001bf6:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8001bfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <MX_TIM3_Init+0xac>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <MX_TIM3_Init+0xac>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c08:	4818      	ldr	r0, [pc, #96]	@ (8001c6c <MX_TIM3_Init+0xac>)
 8001c0a:	f003 fee8 	bl	80059de <HAL_TIM_PWM_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c14:	f7ff fe0e 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	4619      	mov	r1, r3
 8001c26:	4811      	ldr	r0, [pc, #68]	@ (8001c6c <MX_TIM3_Init+0xac>)
 8001c28:	f004 fd20 	bl	800666c <HAL_TIMEx_MasterConfigSynchronization>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c32:	f7ff fdff 	bl	8001834 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c36:	2360      	movs	r3, #96	@ 0x60
 8001c38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	220c      	movs	r2, #12
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4807      	ldr	r0, [pc, #28]	@ (8001c6c <MX_TIM3_Init+0xac>)
 8001c4e:	f004 f8a7 	bl	8005da0 <HAL_TIM_PWM_ConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c58:	f7ff fdec 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c5c:	4803      	ldr	r0, [pc, #12]	@ (8001c6c <MX_TIM3_Init+0xac>)
 8001c5e:	f000 f853 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 8001c62:	bf00      	nop
 8001c64:	3728      	adds	r7, #40	@ 0x28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000039c 	.word	0x2000039c
 8001c70:	40000400 	.word	0x40000400

08001c74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c84:	d113      	bne.n	8001cae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c86:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x44>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x44>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	61d3      	str	r3, [r2, #28]
 8001c92:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x44>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	201c      	movs	r0, #28
 8001ca4:	f000 ff5d 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ca8:	201c      	movs	r0, #28
 8001caa:	f000 ff76 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000

08001cbc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d00 <HAL_TIM_PWM_MspInit+0x44>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d113      	bne.n	8001cf6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cce:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <HAL_TIM_PWM_MspInit+0x48>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8001d04 <HAL_TIM_PWM_MspInit+0x48>)
 8001cd4:	f043 0302 	orr.w	r3, r3, #2
 8001cd8:	61d3      	str	r3, [r2, #28]
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <HAL_TIM_PWM_MspInit+0x48>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2100      	movs	r1, #0
 8001cea:	201d      	movs	r0, #29
 8001cec:	f000 ff39 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cf0:	201d      	movs	r0, #29
 8001cf2:	f000 ff52 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a0f      	ldr	r2, [pc, #60]	@ (8001d60 <HAL_TIM_MspPostInit+0x58>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d117      	bne.n	8001d58 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d28:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <HAL_TIM_MspPostInit+0x5c>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d64 <HAL_TIM_MspPostInit+0x5c>)
 8001d2e:	f043 0308 	orr.w	r3, r3, #8
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <HAL_TIM_MspPostInit+0x5c>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d40:	2302      	movs	r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	4619      	mov	r1, r3
 8001d52:	4805      	ldr	r0, [pc, #20]	@ (8001d68 <HAL_TIM_MspPostInit+0x60>)
 8001d54:	f001 f92a 	bl	8002fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010c00 	.word	0x40010c00

08001d6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d70:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <MX_USART1_UART_Init+0x50>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d78:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_USART1_UART_Init+0x4c>)
 8001da4:	f004 fcd2 	bl	800674c <HAL_UART_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dae:	f7ff fd41 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200003e4 	.word	0x200003e4
 8001dbc:	40013800 	.word	0x40013800

08001dc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1c      	ldr	r2, [pc, #112]	@ (8001e4c <HAL_UART_MspInit+0x8c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d131      	bne.n	8001e44 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001de0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <HAL_UART_MspInit+0x90>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e50 <HAL_UART_MspInit+0x90>)
 8001de6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <HAL_UART_MspInit+0x90>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df8:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <HAL_UART_MspInit+0x90>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <HAL_UART_MspInit+0x90>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_UART_MspInit+0x90>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 0310 	add.w	r3, r7, #16
 8001e22:	4619      	mov	r1, r3
 8001e24:	480b      	ldr	r0, [pc, #44]	@ (8001e54 <HAL_UART_MspInit+0x94>)
 8001e26:	f001 f8c1 	bl	8002fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <HAL_UART_MspInit+0x94>)
 8001e40:	f001 f8b4 	bl	8002fac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010800 	.word	0x40010800

08001e58 <sendUsartMsgLongUint>:
  }
}

/* USER CODE BEGIN 1 */

void sendUsartMsgLongUint(const char* label, int32_t value) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b094      	sub	sp, #80	@ 0x50
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
	char buffer[BUFFER_SIZE];
	snprintf(buffer, BUFFER_SIZE, "%s %li \n", label, value);
 8001e62:	f107 0008 	add.w	r0, r7, #8
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <sendUsartMsgLongUint+0x40>)
 8001e6e:	2140      	movs	r1, #64	@ 0x40
 8001e70:	f005 fcfc 	bl	800786c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe f969 	bl	8000150 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	f107 0108 	add.w	r1, r7, #8
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e8a:	4804      	ldr	r0, [pc, #16]	@ (8001e9c <sendUsartMsgLongUint+0x44>)
 8001e8c:	f004 fcae 	bl	80067ec <HAL_UART_Transmit>
}
 8001e90:	bf00      	nop
 8001e92:	3748      	adds	r7, #72	@ 0x48
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	0800b3b4 	.word	0x0800b3b4
 8001e9c:	200003e4 	.word	0x200003e4

08001ea0 <sendUsartMsgInt>:

void sendUsartMsgInt(const char* label, int16_t value) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b094      	sub	sp, #80	@ 0x50
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
    char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "%s %i \n", label, value);
 8001eac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001eb0:	f107 0008 	add.w	r0, r7, #8
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee4 <sendUsartMsgInt+0x44>)
 8001eba:	2140      	movs	r1, #64	@ 0x40
 8001ebc:	f005 fcd6 	bl	800786c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe f943 	bl	8000150 <strlen>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	f107 0108 	add.w	r1, r7, #8
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ed6:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <sendUsartMsgInt+0x48>)
 8001ed8:	f004 fc88 	bl	80067ec <HAL_UART_Transmit>
}
 8001edc:	bf00      	nop
 8001ede:	3748      	adds	r7, #72	@ 0x48
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	0800b3c0 	.word	0x0800b3c0
 8001ee8:	200003e4 	.word	0x200003e4

08001eec <sendUsartMsg>:

void sendUsartMsg(const char* label, uint16_t value) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b094      	sub	sp, #80	@ 0x50
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
    char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "%s %u \n", label, value);
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	f107 0008 	add.w	r0, r7, #8
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a0b      	ldr	r2, [pc, #44]	@ (8001f30 <sendUsartMsg+0x44>)
 8001f04:	2140      	movs	r1, #64	@ 0x40
 8001f06:	f005 fcb1 	bl	800786c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe f91e 	bl	8000150 <strlen>
 8001f14:	4603      	mov	r3, r0
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	f107 0108 	add.w	r1, r7, #8
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f20:	4804      	ldr	r0, [pc, #16]	@ (8001f34 <sendUsartMsg+0x48>)
 8001f22:	f004 fc63 	bl	80067ec <HAL_UART_Transmit>
}
 8001f26:	bf00      	nop
 8001f28:	3748      	adds	r7, #72	@ 0x48
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	0800b3c8 	.word	0x0800b3c8
 8001f34:	200003e4 	.word	0x200003e4

08001f38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f38:	f7ff fdee 	bl	8001b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f3c:	480b      	ldr	r0, [pc, #44]	@ (8001f6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f3e:	490c      	ldr	r1, [pc, #48]	@ (8001f70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f40:	4a0c      	ldr	r2, [pc, #48]	@ (8001f74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f44:	e002      	b.n	8001f4c <LoopCopyDataInit>

08001f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4a:	3304      	adds	r3, #4

08001f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f50:	d3f9      	bcc.n	8001f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f52:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f54:	4c09      	ldr	r4, [pc, #36]	@ (8001f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f58:	e001      	b.n	8001f5e <LoopFillZerobss>

08001f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f5c:	3204      	adds	r2, #4

08001f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f60:	d3fb      	bcc.n	8001f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f62:	f006 fc39 	bl	80087d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f66:	f7ff f99f 	bl	80012a8 <main>
  bx lr
 8001f6a:	4770      	bx	lr
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001f74:	0800b834 	.word	0x0800b834
  ldr r2, =_sbss
 8001f78:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001f7c:	2000057c 	.word	0x2000057c

08001f80 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <CAN1_RX1_IRQHandler>
	...

08001f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <HAL_Init+0x28>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	@ (8001fac <HAL_Init+0x28>)
 8001f8e:	f043 0310 	orr.w	r3, r3, #16
 8001f92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f94:	2003      	movs	r0, #3
 8001f96:	f000 fdd9 	bl	8002b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9a:	200f      	movs	r0, #15
 8001f9c:	f000 f808 	bl	8001fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa0:	f7ff fc4e 	bl	8001840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40022000 	.word	0x40022000

08001fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <HAL_InitTick+0x54>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_InitTick+0x58>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fdf1 	bl	8002bb6 <HAL_SYSTICK_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00e      	b.n	8001ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d80a      	bhi.n	8001ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fec:	f000 fdb9 	bl	8002b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff0:	4a06      	ldr	r2, [pc, #24]	@ (800200c <HAL_InitTick+0x5c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	2000001c 	.word	0x2000001c
 8002008:	20000024 	.word	0x20000024
 800200c:	20000020 	.word	0x20000020

08002010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_IncTick+0x1c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <HAL_IncTick+0x20>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a03      	ldr	r2, [pc, #12]	@ (8002030 <HAL_IncTick+0x20>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	20000024 	.word	0x20000024
 8002030:	2000042c 	.word	0x2000042c

08002034 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b02      	ldr	r3, [pc, #8]	@ (8002044 <HAL_GetTick+0x10>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	2000042c 	.word	0x2000042c

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff fff0 	bl	8002034 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffe0 	bl	8002034 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000024 	.word	0x20000024

08002090 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0be      	b.n	8002230 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fdce 	bl	8000c70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fbbd 	bl	8002854 <ADC_ConversionStop_Disable>
 80020da:	4603      	mov	r3, r0
 80020dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f040 8099 	bne.w	800221e <HAL_ADC_Init+0x18e>
 80020ec:	7dfb      	ldrb	r3, [r7, #23]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8095 	bne.w	800221e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020fc:	f023 0302 	bic.w	r3, r3, #2
 8002100:	f043 0202 	orr.w	r2, r3, #2
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002110:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7b1b      	ldrb	r3, [r3, #12]
 8002116:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002118:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4313      	orrs	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002128:	d003      	beq.n	8002132 <HAL_ADC_Init+0xa2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_ADC_Init+0xa8>
 8002132:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002136:	e000      	b.n	800213a <HAL_ADC_Init+0xaa>
 8002138:	2300      	movs	r3, #0
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7d1b      	ldrb	r3, [r3, #20]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d119      	bne.n	800217c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7b1b      	ldrb	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	3b01      	subs	r3, #1
 8002156:	035a      	lsls	r2, r3, #13
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	e00b      	b.n	800217c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	4b28      	ldr	r3, [pc, #160]	@ (8002238 <HAL_ADC_Init+0x1a8>)
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ac:	d003      	beq.n	80021b6 <HAL_ADC_Init+0x126>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d104      	bne.n	80021c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	051b      	lsls	r3, r3, #20
 80021be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <HAL_ADC_Init+0x1ac>)
 80021dc:	4013      	ands	r3, r2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d10b      	bne.n	80021fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ee:	f023 0303 	bic.w	r3, r3, #3
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021fa:	e018      	b.n	800222e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	f023 0312 	bic.w	r3, r3, #18
 8002204:	f043 0210 	orr.w	r2, r3, #16
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800221c:	e007      	b.n	800222e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800222e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	ffe1f7fd 	.word	0xffe1f7fd
 800223c:	ff1f0efe 	.word	0xff1f0efe

08002240 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a64      	ldr	r2, [pc, #400]	@ (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d004      	beq.n	8002264 <HAL_ADC_Start_DMA+0x24>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a63      	ldr	r2, [pc, #396]	@ (80023ec <HAL_ADC_Start_DMA+0x1ac>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d106      	bne.n	8002272 <HAL_ADC_Start_DMA+0x32>
 8002264:	4b60      	ldr	r3, [pc, #384]	@ (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 80b3 	bne.w	80023d8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_ADC_Start_DMA+0x40>
 800227c:	2302      	movs	r3, #2
 800227e:	e0ae      	b.n	80023de <HAL_ADC_Start_DMA+0x19e>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fa89 	bl	80027a0 <ADC_Enable>
 800228e:	4603      	mov	r3, r0
 8002290:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	2b00      	cmp	r3, #0
 8002296:	f040 809a 	bne.w	80023ce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a4e      	ldr	r2, [pc, #312]	@ (80023ec <HAL_ADC_Start_DMA+0x1ac>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d105      	bne.n	80022c4 <HAL_ADC_Start_DMA+0x84>
 80022b8:	4b4b      	ldr	r3, [pc, #300]	@ (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d115      	bne.n	80022f0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d026      	beq.n	800232c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ee:	e01d      	b.n	800232c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a39      	ldr	r2, [pc, #228]	@ (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d004      	beq.n	8002310 <HAL_ADC_Start_DMA+0xd0>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a38      	ldr	r2, [pc, #224]	@ (80023ec <HAL_ADC_Start_DMA+0x1ac>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d10d      	bne.n	800232c <HAL_ADC_Start_DMA+0xec>
 8002310:	4b35      	ldr	r3, [pc, #212]	@ (80023e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002324:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233c:	f023 0206 	bic.w	r2, r3, #6
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002344:	e002      	b.n	800234c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a25      	ldr	r2, [pc, #148]	@ (80023f0 <HAL_ADC_Start_DMA+0x1b0>)
 800235a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a24      	ldr	r2, [pc, #144]	@ (80023f4 <HAL_ADC_Start_DMA+0x1b4>)
 8002362:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a23      	ldr	r2, [pc, #140]	@ (80023f8 <HAL_ADC_Start_DMA+0x1b8>)
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0202 	mvn.w	r2, #2
 8002374:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002384:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a18      	ldr	r0, [r3, #32]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	334c      	adds	r3, #76	@ 0x4c
 8002390:	4619      	mov	r1, r3
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f000 fc75 	bl	8002c84 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80023a4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80023a8:	d108      	bne.n	80023bc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80023b8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023ba:	e00f      	b.n	80023dc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80023ca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80023cc:	e006      	b.n	80023dc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80023d6:	e001      	b.n	80023dc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40012400 	.word	0x40012400
 80023ec:	40012800 	.word	0x40012800
 80023f0:	080028d7 	.word	0x080028d7
 80023f4:	08002953 	.word	0x08002953
 80023f8:	0800296f 	.word	0x0800296f

080023fc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b00      	cmp	r3, #0
 800241c:	d03e      	beq.n	800249c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d039      	beq.n	800249c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800244a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800244e:	d11d      	bne.n	800248c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002454:	2b00      	cmp	r3, #0
 8002456:	d119      	bne.n	800248c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0220 	bic.w	r2, r2, #32
 8002466:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002484:	f043 0201 	orr.w	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7fe fefd 	bl	800128c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f06f 0212 	mvn.w	r2, #18
 800249a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d04d      	beq.n	8002542 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d048      	beq.n	8002542 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80024d2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80024d6:	d012      	beq.n	80024fe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d125      	bne.n	8002532 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80024f0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80024f4:	d11d      	bne.n	8002532 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d119      	bne.n	8002532 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800250c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002512:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	f043 0201 	orr.w	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa35 	bl	80029a2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 020c 	mvn.w	r2, #12
 8002540:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002548:	2b00      	cmp	r3, #0
 800254a:	d012      	beq.n	8002572 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00d      	beq.n	8002572 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f812 	bl	800258c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0201 	mvn.w	r2, #1
 8002570:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x20>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e0dc      	b.n	800278a <HAL_ADC_ConfigChannel+0x1da>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b06      	cmp	r3, #6
 80025de:	d81c      	bhi.n	800261a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	3b05      	subs	r3, #5
 80025f2:	221f      	movs	r2, #31
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	4019      	ands	r1, r3
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	3b05      	subs	r3, #5
 800260c:	fa00 f203 	lsl.w	r2, r0, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	635a      	str	r2, [r3, #52]	@ 0x34
 8002618:	e03c      	b.n	8002694 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d81c      	bhi.n	800265c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	3b23      	subs	r3, #35	@ 0x23
 8002634:	221f      	movs	r2, #31
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	4019      	ands	r1, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	3b23      	subs	r3, #35	@ 0x23
 800264e:	fa00 f203 	lsl.w	r2, r0, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	631a      	str	r2, [r3, #48]	@ 0x30
 800265a:	e01b      	b.n	8002694 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	3b41      	subs	r3, #65	@ 0x41
 800266e:	221f      	movs	r2, #31
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	4019      	ands	r1, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	3b41      	subs	r3, #65	@ 0x41
 8002688:	fa00 f203 	lsl.w	r2, r0, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b09      	cmp	r3, #9
 800269a:	d91c      	bls.n	80026d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68d9      	ldr	r1, [r3, #12]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	3b1e      	subs	r3, #30
 80026ae:	2207      	movs	r2, #7
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	4019      	ands	r1, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6898      	ldr	r0, [r3, #8]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	3b1e      	subs	r3, #30
 80026c8:	fa00 f203 	lsl.w	r2, r0, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	60da      	str	r2, [r3, #12]
 80026d4:	e019      	b.n	800270a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6919      	ldr	r1, [r3, #16]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	2207      	movs	r2, #7
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	4019      	ands	r1, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6898      	ldr	r0, [r3, #8]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b10      	cmp	r3, #16
 8002710:	d003      	beq.n	800271a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002716:	2b11      	cmp	r3, #17
 8002718:	d132      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1d      	ldr	r2, [pc, #116]	@ (8002794 <HAL_ADC_ConfigChannel+0x1e4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d125      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d126      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002740:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b10      	cmp	r3, #16
 8002748:	d11a      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800274a:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <HAL_ADC_ConfigChannel+0x1e8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a13      	ldr	r2, [pc, #76]	@ (800279c <HAL_ADC_ConfigChannel+0x1ec>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	0c9a      	lsrs	r2, r3, #18
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002760:	e002      	b.n	8002768 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	3b01      	subs	r3, #1
 8002766:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f9      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x1b2>
 800276e:	e007      	b.n	8002780 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002774:	f043 0220 	orr.w	r2, r3, #32
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	40012400 	.word	0x40012400
 8002798:	2000001c 	.word	0x2000001c
 800279c:	431bde83 	.word	0x431bde83

080027a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d040      	beq.n	8002840 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0201 	orr.w	r2, r2, #1
 80027cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027ce:	4b1f      	ldr	r3, [pc, #124]	@ (800284c <ADC_Enable+0xac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002850 <ADC_Enable+0xb0>)
 80027d4:	fba2 2303 	umull	r2, r3, r2, r3
 80027d8:	0c9b      	lsrs	r3, r3, #18
 80027da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027dc:	e002      	b.n	80027e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f9      	bne.n	80027de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027ea:	f7ff fc23 	bl	8002034 <HAL_GetTick>
 80027ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027f0:	e01f      	b.n	8002832 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027f2:	f7ff fc1f 	bl	8002034 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d918      	bls.n	8002832 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d011      	beq.n	8002832 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002812:	f043 0210 	orr.w	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281e:	f043 0201 	orr.w	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e007      	b.n	8002842 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d1d8      	bne.n	80027f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	2000001c 	.word	0x2000001c
 8002850:	431bde83 	.word	0x431bde83

08002854 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b01      	cmp	r3, #1
 800286c:	d12e      	bne.n	80028cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0201 	bic.w	r2, r2, #1
 800287c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800287e:	f7ff fbd9 	bl	8002034 <HAL_GetTick>
 8002882:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002884:	e01b      	b.n	80028be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002886:	f7ff fbd5 	bl	8002034 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d914      	bls.n	80028be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d10d      	bne.n	80028be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a6:	f043 0210 	orr.w	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e007      	b.n	80028ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d0dc      	beq.n	8002886 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d127      	bne.n	8002940 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002906:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800290a:	d115      	bne.n	8002938 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002910:	2b00      	cmp	r3, #0
 8002912:	d111      	bne.n	8002938 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002918:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d105      	bne.n	8002938 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7fe fca7 	bl	800128c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800293e:	e004      	b.n	800294a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff fe0a 	bl	800257a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002966:	bf00      	nop
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002980:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	f043 0204 	orr.w	r2, r3, #4
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f7ff fe02 	bl	800259e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr

080029b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d0:	4013      	ands	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e6:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	60d3      	str	r3, [r2, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a00:	4b04      	ldr	r3, [pc, #16]	@ (8002a14 <__NVIC_GetPriorityGrouping+0x18>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	f003 0307 	and.w	r3, r3, #7
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	db0b      	blt.n	8002a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	4906      	ldr	r1, [pc, #24]	@ (8002a4c <__NVIC_EnableIRQ+0x34>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2001      	movs	r0, #1
 8002a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	e000e100 	.word	0xe000e100

08002a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	db0a      	blt.n	8002a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	490c      	ldr	r1, [pc, #48]	@ (8002a9c <__NVIC_SetPriority+0x4c>)
 8002a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	440b      	add	r3, r1
 8002a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a78:	e00a      	b.n	8002a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4908      	ldr	r1, [pc, #32]	@ (8002aa0 <__NVIC_SetPriority+0x50>)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	3b04      	subs	r3, #4
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	761a      	strb	r2, [r3, #24]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000e100 	.word	0xe000e100
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	@ 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f1c3 0307 	rsb	r3, r3, #7
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	bf28      	it	cs
 8002ac2:	2304      	movcs	r3, #4
 8002ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d902      	bls.n	8002ad4 <NVIC_EncodePriority+0x30>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3b03      	subs	r3, #3
 8002ad2:	e000      	b.n	8002ad6 <NVIC_EncodePriority+0x32>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43d9      	mvns	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	4313      	orrs	r3, r2
         );
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3724      	adds	r7, #36	@ 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b18:	d301      	bcc.n	8002b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00f      	b.n	8002b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b48 <SysTick_Config+0x40>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b26:	210f      	movs	r1, #15
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b2c:	f7ff ff90 	bl	8002a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <SysTick_Config+0x40>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b36:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <SysTick_Config+0x40>)
 8002b38:	2207      	movs	r2, #7
 8002b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	e000e010 	.word	0xe000e010

08002b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff2d 	bl	80029b4 <__NVIC_SetPriorityGrouping>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	4603      	mov	r3, r0
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b74:	f7ff ff42 	bl	80029fc <__NVIC_GetPriorityGrouping>
 8002b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	6978      	ldr	r0, [r7, #20]
 8002b80:	f7ff ff90 	bl	8002aa4 <NVIC_EncodePriority>
 8002b84:	4602      	mov	r2, r0
 8002b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff5f 	bl	8002a50 <__NVIC_SetPriority>
}
 8002b92:	bf00      	nop
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff35 	bl	8002a18 <__NVIC_EnableIRQ>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ffa2 	bl	8002b08 <SysTick_Config>
 8002bc4:	4603      	mov	r3, r0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e043      	b.n	8002c6e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b22      	ldr	r3, [pc, #136]	@ (8002c78 <HAL_DMA_Init+0xa8>)
 8002bee:	4413      	add	r3, r2
 8002bf0:	4a22      	ldr	r2, [pc, #136]	@ (8002c7c <HAL_DMA_Init+0xac>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	009a      	lsls	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a1f      	ldr	r2, [pc, #124]	@ (8002c80 <HAL_DMA_Init+0xb0>)
 8002c02:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c1a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002c1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	bffdfff8 	.word	0xbffdfff8
 8002c7c:	cccccccd 	.word	0xcccccccd
 8002c80:	40020000 	.word	0x40020000

08002c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
 8002c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_DMA_Start_IT+0x20>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e04b      	b.n	8002d3c <HAL_DMA_Start_IT+0xb8>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d13a      	bne.n	8002d2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0201 	bic.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f937 	bl	8002f50 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 020e 	orr.w	r2, r2, #14
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e00f      	b.n	8002d1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0204 	bic.w	r2, r2, #4
 8002d0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 020a 	orr.w	r2, r2, #10
 8002d1a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e005      	b.n	8002d3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
 8002d38:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	2204      	movs	r2, #4
 8002d62:	409a      	lsls	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d04f      	beq.n	8002e0c <HAL_DMA_IRQHandler+0xc8>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d04a      	beq.n	8002e0c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d107      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0204 	bic.w	r2, r2, #4
 8002d92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a66      	ldr	r2, [pc, #408]	@ (8002f34 <HAL_DMA_IRQHandler+0x1f0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d029      	beq.n	8002df2 <HAL_DMA_IRQHandler+0xae>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a65      	ldr	r2, [pc, #404]	@ (8002f38 <HAL_DMA_IRQHandler+0x1f4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d022      	beq.n	8002dee <HAL_DMA_IRQHandler+0xaa>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a63      	ldr	r2, [pc, #396]	@ (8002f3c <HAL_DMA_IRQHandler+0x1f8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01a      	beq.n	8002de8 <HAL_DMA_IRQHandler+0xa4>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a62      	ldr	r2, [pc, #392]	@ (8002f40 <HAL_DMA_IRQHandler+0x1fc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d012      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x9e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a60      	ldr	r2, [pc, #384]	@ (8002f44 <HAL_DMA_IRQHandler+0x200>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00a      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x98>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a5f      	ldr	r2, [pc, #380]	@ (8002f48 <HAL_DMA_IRQHandler+0x204>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d102      	bne.n	8002dd6 <HAL_DMA_IRQHandler+0x92>
 8002dd0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dd4:	e00e      	b.n	8002df4 <HAL_DMA_IRQHandler+0xb0>
 8002dd6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002dda:	e00b      	b.n	8002df4 <HAL_DMA_IRQHandler+0xb0>
 8002ddc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002de0:	e008      	b.n	8002df4 <HAL_DMA_IRQHandler+0xb0>
 8002de2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002de6:	e005      	b.n	8002df4 <HAL_DMA_IRQHandler+0xb0>
 8002de8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dec:	e002      	b.n	8002df4 <HAL_DMA_IRQHandler+0xb0>
 8002dee:	2340      	movs	r3, #64	@ 0x40
 8002df0:	e000      	b.n	8002df4 <HAL_DMA_IRQHandler+0xb0>
 8002df2:	2304      	movs	r3, #4
 8002df4:	4a55      	ldr	r2, [pc, #340]	@ (8002f4c <HAL_DMA_IRQHandler+0x208>)
 8002df6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8094 	beq.w	8002f2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e0a:	e08e      	b.n	8002f2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	2202      	movs	r2, #2
 8002e12:	409a      	lsls	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d056      	beq.n	8002eca <HAL_DMA_IRQHandler+0x186>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d051      	beq.n	8002eca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10b      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 020a 	bic.w	r2, r2, #10
 8002e42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a38      	ldr	r2, [pc, #224]	@ (8002f34 <HAL_DMA_IRQHandler+0x1f0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d029      	beq.n	8002eaa <HAL_DMA_IRQHandler+0x166>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a37      	ldr	r2, [pc, #220]	@ (8002f38 <HAL_DMA_IRQHandler+0x1f4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d022      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x162>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a35      	ldr	r2, [pc, #212]	@ (8002f3c <HAL_DMA_IRQHandler+0x1f8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01a      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x15c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a34      	ldr	r2, [pc, #208]	@ (8002f40 <HAL_DMA_IRQHandler+0x1fc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d012      	beq.n	8002e9a <HAL_DMA_IRQHandler+0x156>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a32      	ldr	r2, [pc, #200]	@ (8002f44 <HAL_DMA_IRQHandler+0x200>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00a      	beq.n	8002e94 <HAL_DMA_IRQHandler+0x150>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a31      	ldr	r2, [pc, #196]	@ (8002f48 <HAL_DMA_IRQHandler+0x204>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d102      	bne.n	8002e8e <HAL_DMA_IRQHandler+0x14a>
 8002e88:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002e8c:	e00e      	b.n	8002eac <HAL_DMA_IRQHandler+0x168>
 8002e8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e92:	e00b      	b.n	8002eac <HAL_DMA_IRQHandler+0x168>
 8002e94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e98:	e008      	b.n	8002eac <HAL_DMA_IRQHandler+0x168>
 8002e9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e9e:	e005      	b.n	8002eac <HAL_DMA_IRQHandler+0x168>
 8002ea0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ea4:	e002      	b.n	8002eac <HAL_DMA_IRQHandler+0x168>
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	e000      	b.n	8002eac <HAL_DMA_IRQHandler+0x168>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	4a27      	ldr	r2, [pc, #156]	@ (8002f4c <HAL_DMA_IRQHandler+0x208>)
 8002eae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d034      	beq.n	8002f2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ec8:	e02f      	b.n	8002f2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	2208      	movs	r2, #8
 8002ed0:	409a      	lsls	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d028      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x1e8>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d023      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 020e 	bic.w	r2, r2, #14
 8002ef2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efc:	2101      	movs	r1, #1
 8002efe:	fa01 f202 	lsl.w	r2, r1, r2
 8002f02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d004      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
    }
  }
  return;
 8002f2a:	bf00      	nop
 8002f2c:	bf00      	nop
}
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40020008 	.word	0x40020008
 8002f38:	4002001c 	.word	0x4002001c
 8002f3c:	40020030 	.word	0x40020030
 8002f40:	40020044 	.word	0x40020044
 8002f44:	40020058 	.word	0x40020058
 8002f48:	4002006c 	.word	0x4002006c
 8002f4c:	40020000 	.word	0x40020000

08002f50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d108      	bne.n	8002f90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f8e:	e007      	b.n	8002fa0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	60da      	str	r2, [r3, #12]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b08b      	sub	sp, #44	@ 0x2c
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fbe:	e169      	b.n	8003294 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f040 8158 	bne.w	800328e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4a9a      	ldr	r2, [pc, #616]	@ (800324c <HAL_GPIO_Init+0x2a0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d05e      	beq.n	80030a6 <HAL_GPIO_Init+0xfa>
 8002fe8:	4a98      	ldr	r2, [pc, #608]	@ (800324c <HAL_GPIO_Init+0x2a0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d875      	bhi.n	80030da <HAL_GPIO_Init+0x12e>
 8002fee:	4a98      	ldr	r2, [pc, #608]	@ (8003250 <HAL_GPIO_Init+0x2a4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d058      	beq.n	80030a6 <HAL_GPIO_Init+0xfa>
 8002ff4:	4a96      	ldr	r2, [pc, #600]	@ (8003250 <HAL_GPIO_Init+0x2a4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d86f      	bhi.n	80030da <HAL_GPIO_Init+0x12e>
 8002ffa:	4a96      	ldr	r2, [pc, #600]	@ (8003254 <HAL_GPIO_Init+0x2a8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d052      	beq.n	80030a6 <HAL_GPIO_Init+0xfa>
 8003000:	4a94      	ldr	r2, [pc, #592]	@ (8003254 <HAL_GPIO_Init+0x2a8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d869      	bhi.n	80030da <HAL_GPIO_Init+0x12e>
 8003006:	4a94      	ldr	r2, [pc, #592]	@ (8003258 <HAL_GPIO_Init+0x2ac>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d04c      	beq.n	80030a6 <HAL_GPIO_Init+0xfa>
 800300c:	4a92      	ldr	r2, [pc, #584]	@ (8003258 <HAL_GPIO_Init+0x2ac>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d863      	bhi.n	80030da <HAL_GPIO_Init+0x12e>
 8003012:	4a92      	ldr	r2, [pc, #584]	@ (800325c <HAL_GPIO_Init+0x2b0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d046      	beq.n	80030a6 <HAL_GPIO_Init+0xfa>
 8003018:	4a90      	ldr	r2, [pc, #576]	@ (800325c <HAL_GPIO_Init+0x2b0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d85d      	bhi.n	80030da <HAL_GPIO_Init+0x12e>
 800301e:	2b12      	cmp	r3, #18
 8003020:	d82a      	bhi.n	8003078 <HAL_GPIO_Init+0xcc>
 8003022:	2b12      	cmp	r3, #18
 8003024:	d859      	bhi.n	80030da <HAL_GPIO_Init+0x12e>
 8003026:	a201      	add	r2, pc, #4	@ (adr r2, 800302c <HAL_GPIO_Init+0x80>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	080030a7 	.word	0x080030a7
 8003030:	08003081 	.word	0x08003081
 8003034:	08003093 	.word	0x08003093
 8003038:	080030d5 	.word	0x080030d5
 800303c:	080030db 	.word	0x080030db
 8003040:	080030db 	.word	0x080030db
 8003044:	080030db 	.word	0x080030db
 8003048:	080030db 	.word	0x080030db
 800304c:	080030db 	.word	0x080030db
 8003050:	080030db 	.word	0x080030db
 8003054:	080030db 	.word	0x080030db
 8003058:	080030db 	.word	0x080030db
 800305c:	080030db 	.word	0x080030db
 8003060:	080030db 	.word	0x080030db
 8003064:	080030db 	.word	0x080030db
 8003068:	080030db 	.word	0x080030db
 800306c:	080030db 	.word	0x080030db
 8003070:	08003089 	.word	0x08003089
 8003074:	0800309d 	.word	0x0800309d
 8003078:	4a79      	ldr	r2, [pc, #484]	@ (8003260 <HAL_GPIO_Init+0x2b4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800307e:	e02c      	b.n	80030da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	623b      	str	r3, [r7, #32]
          break;
 8003086:	e029      	b.n	80030dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	3304      	adds	r3, #4
 800308e:	623b      	str	r3, [r7, #32]
          break;
 8003090:	e024      	b.n	80030dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	3308      	adds	r3, #8
 8003098:	623b      	str	r3, [r7, #32]
          break;
 800309a:	e01f      	b.n	80030dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	330c      	adds	r3, #12
 80030a2:	623b      	str	r3, [r7, #32]
          break;
 80030a4:	e01a      	b.n	80030dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ae:	2304      	movs	r3, #4
 80030b0:	623b      	str	r3, [r7, #32]
          break;
 80030b2:	e013      	b.n	80030dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030bc:	2308      	movs	r3, #8
 80030be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	611a      	str	r2, [r3, #16]
          break;
 80030c6:	e009      	b.n	80030dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c8:	2308      	movs	r3, #8
 80030ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	615a      	str	r2, [r3, #20]
          break;
 80030d2:	e003      	b.n	80030dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030d4:	2300      	movs	r3, #0
 80030d6:	623b      	str	r3, [r7, #32]
          break;
 80030d8:	e000      	b.n	80030dc <HAL_GPIO_Init+0x130>
          break;
 80030da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2bff      	cmp	r3, #255	@ 0xff
 80030e0:	d801      	bhi.n	80030e6 <HAL_GPIO_Init+0x13a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	e001      	b.n	80030ea <HAL_GPIO_Init+0x13e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3304      	adds	r3, #4
 80030ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2bff      	cmp	r3, #255	@ 0xff
 80030f0:	d802      	bhi.n	80030f8 <HAL_GPIO_Init+0x14c>
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	e002      	b.n	80030fe <HAL_GPIO_Init+0x152>
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	3b08      	subs	r3, #8
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	210f      	movs	r1, #15
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	401a      	ands	r2, r3
 8003110:	6a39      	ldr	r1, [r7, #32]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	fa01 f303 	lsl.w	r3, r1, r3
 8003118:	431a      	orrs	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80b1 	beq.w	800328e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800312c:	4b4d      	ldr	r3, [pc, #308]	@ (8003264 <HAL_GPIO_Init+0x2b8>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	4a4c      	ldr	r2, [pc, #304]	@ (8003264 <HAL_GPIO_Init+0x2b8>)
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	6193      	str	r3, [r2, #24]
 8003138:	4b4a      	ldr	r3, [pc, #296]	@ (8003264 <HAL_GPIO_Init+0x2b8>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003144:	4a48      	ldr	r2, [pc, #288]	@ (8003268 <HAL_GPIO_Init+0x2bc>)
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	089b      	lsrs	r3, r3, #2
 800314a:	3302      	adds	r3, #2
 800314c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003150:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	220f      	movs	r2, #15
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a40      	ldr	r2, [pc, #256]	@ (800326c <HAL_GPIO_Init+0x2c0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <HAL_GPIO_Init+0x1ec>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a3f      	ldr	r2, [pc, #252]	@ (8003270 <HAL_GPIO_Init+0x2c4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00d      	beq.n	8003194 <HAL_GPIO_Init+0x1e8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a3e      	ldr	r2, [pc, #248]	@ (8003274 <HAL_GPIO_Init+0x2c8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d007      	beq.n	8003190 <HAL_GPIO_Init+0x1e4>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a3d      	ldr	r2, [pc, #244]	@ (8003278 <HAL_GPIO_Init+0x2cc>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d101      	bne.n	800318c <HAL_GPIO_Init+0x1e0>
 8003188:	2303      	movs	r3, #3
 800318a:	e006      	b.n	800319a <HAL_GPIO_Init+0x1ee>
 800318c:	2304      	movs	r3, #4
 800318e:	e004      	b.n	800319a <HAL_GPIO_Init+0x1ee>
 8003190:	2302      	movs	r3, #2
 8003192:	e002      	b.n	800319a <HAL_GPIO_Init+0x1ee>
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_GPIO_Init+0x1ee>
 8003198:	2300      	movs	r3, #0
 800319a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319c:	f002 0203 	and.w	r2, r2, #3
 80031a0:	0092      	lsls	r2, r2, #2
 80031a2:	4093      	lsls	r3, r2
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031aa:	492f      	ldr	r1, [pc, #188]	@ (8003268 <HAL_GPIO_Init+0x2bc>)
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d006      	beq.n	80031d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031c4:	4b2d      	ldr	r3, [pc, #180]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	492c      	ldr	r1, [pc, #176]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031d2:	4b2a      	ldr	r3, [pc, #168]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	43db      	mvns	r3, r3
 80031da:	4928      	ldr	r1, [pc, #160]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 80031dc:	4013      	ands	r3, r2
 80031de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d006      	beq.n	80031fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031ec:	4b23      	ldr	r3, [pc, #140]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	4922      	ldr	r1, [pc, #136]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60cb      	str	r3, [r1, #12]
 80031f8:	e006      	b.n	8003208 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031fa:	4b20      	ldr	r3, [pc, #128]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	43db      	mvns	r3, r3
 8003202:	491e      	ldr	r1, [pc, #120]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 8003204:	4013      	ands	r3, r2
 8003206:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d006      	beq.n	8003222 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003214:	4b19      	ldr	r3, [pc, #100]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	4918      	ldr	r1, [pc, #96]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003222:	4b16      	ldr	r3, [pc, #88]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	43db      	mvns	r3, r3
 800322a:	4914      	ldr	r1, [pc, #80]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 800322c:	4013      	ands	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d021      	beq.n	8003280 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800323c:	4b0f      	ldr	r3, [pc, #60]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	490e      	ldr	r1, [pc, #56]	@ (800327c <HAL_GPIO_Init+0x2d0>)
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e021      	b.n	800328e <HAL_GPIO_Init+0x2e2>
 800324a:	bf00      	nop
 800324c:	10320000 	.word	0x10320000
 8003250:	10310000 	.word	0x10310000
 8003254:	10220000 	.word	0x10220000
 8003258:	10210000 	.word	0x10210000
 800325c:	10120000 	.word	0x10120000
 8003260:	10110000 	.word	0x10110000
 8003264:	40021000 	.word	0x40021000
 8003268:	40010000 	.word	0x40010000
 800326c:	40010800 	.word	0x40010800
 8003270:	40010c00 	.word	0x40010c00
 8003274:	40011000 	.word	0x40011000
 8003278:	40011400 	.word	0x40011400
 800327c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003280:	4b0b      	ldr	r3, [pc, #44]	@ (80032b0 <HAL_GPIO_Init+0x304>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	43db      	mvns	r3, r3
 8003288:	4909      	ldr	r1, [pc, #36]	@ (80032b0 <HAL_GPIO_Init+0x304>)
 800328a:	4013      	ands	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	3301      	adds	r3, #1
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f47f ae8e 	bne.w	8002fc0 <HAL_GPIO_Init+0x14>
  }
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	372c      	adds	r7, #44	@ 0x2c
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	40010400 	.word	0x40010400

080032b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032c4:	787b      	ldrb	r3, [r7, #1]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ca:	887a      	ldrh	r2, [r7, #2]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032d0:	e003      	b.n	80032da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032d2:	887b      	ldrh	r3, [r7, #2]
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	611a      	str	r2, [r3, #16]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	041a      	lsls	r2, r3, #16
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43d9      	mvns	r1, r3
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	400b      	ands	r3, r1
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
	...

08003318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e12b      	b.n	8003582 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fd fe44 	bl	8000fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	@ 0x24
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800336a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800337a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800337c:	f002 f9e4 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8003380:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4a81      	ldr	r2, [pc, #516]	@ (800358c <HAL_I2C_Init+0x274>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d807      	bhi.n	800339c <HAL_I2C_Init+0x84>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a80      	ldr	r2, [pc, #512]	@ (8003590 <HAL_I2C_Init+0x278>)
 8003390:	4293      	cmp	r3, r2
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	e006      	b.n	80033aa <HAL_I2C_Init+0x92>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a7d      	ldr	r2, [pc, #500]	@ (8003594 <HAL_I2C_Init+0x27c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bf94      	ite	ls
 80033a4:	2301      	movls	r3, #1
 80033a6:	2300      	movhi	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0e7      	b.n	8003582 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4a78      	ldr	r2, [pc, #480]	@ (8003598 <HAL_I2C_Init+0x280>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0c9b      	lsrs	r3, r3, #18
 80033bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a6a      	ldr	r2, [pc, #424]	@ (800358c <HAL_I2C_Init+0x274>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d802      	bhi.n	80033ec <HAL_I2C_Init+0xd4>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	3301      	adds	r3, #1
 80033ea:	e009      	b.n	8003400 <HAL_I2C_Init+0xe8>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	4a69      	ldr	r2, [pc, #420]	@ (800359c <HAL_I2C_Init+0x284>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	099b      	lsrs	r3, r3, #6
 80033fe:	3301      	adds	r3, #1
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	430b      	orrs	r3, r1
 8003406:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003412:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	495c      	ldr	r1, [pc, #368]	@ (800358c <HAL_I2C_Init+0x274>)
 800341c:	428b      	cmp	r3, r1
 800341e:	d819      	bhi.n	8003454 <HAL_I2C_Init+0x13c>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1e59      	subs	r1, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	fbb1 f3f3 	udiv	r3, r1, r3
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003434:	400b      	ands	r3, r1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_I2C_Init+0x138>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e59      	subs	r1, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fbb1 f3f3 	udiv	r3, r1, r3
 8003448:	3301      	adds	r3, #1
 800344a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344e:	e051      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 8003450:	2304      	movs	r3, #4
 8003452:	e04f      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d111      	bne.n	8003480 <HAL_I2C_Init+0x168>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e58      	subs	r0, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e012      	b.n	80034a6 <HAL_I2C_Init+0x18e>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1e58      	subs	r0, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	0099      	lsls	r1, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	fbb0 f3f3 	udiv	r3, r0, r3
 8003496:	3301      	adds	r3, #1
 8003498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_Init+0x196>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e022      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10e      	bne.n	80034d4 <HAL_I2C_Init+0x1bc>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1e58      	subs	r0, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	440b      	add	r3, r1
 80034c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034d2:	e00f      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1e58      	subs	r0, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	0099      	lsls	r1, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	6809      	ldr	r1, [r1, #0]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003522:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6911      	ldr	r1, [r2, #16]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68d2      	ldr	r2, [r2, #12]
 800352e:	4311      	orrs	r1, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	430b      	orrs	r3, r1
 8003536:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	000186a0 	.word	0x000186a0
 8003590:	001e847f 	.word	0x001e847f
 8003594:	003d08ff 	.word	0x003d08ff
 8003598:	431bde83 	.word	0x431bde83
 800359c:	10624dd3 	.word	0x10624dd3

080035a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	461a      	mov	r2, r3
 80035ac:	460b      	mov	r3, r1
 80035ae:	817b      	strh	r3, [r7, #10]
 80035b0:	4613      	mov	r3, r2
 80035b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7fe fd3e 	bl	8002034 <HAL_GetTick>
 80035b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	f040 80e0 	bne.w	8003788 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2319      	movs	r3, #25
 80035ce:	2201      	movs	r2, #1
 80035d0:	4970      	ldr	r1, [pc, #448]	@ (8003794 <HAL_I2C_Master_Transmit+0x1f4>)
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f001 fab8 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
 80035e0:	e0d3      	b.n	800378a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_I2C_Master_Transmit+0x50>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e0cc      	b.n	800378a <HAL_I2C_Master_Transmit+0x1ea>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b01      	cmp	r3, #1
 8003604:	d007      	beq.n	8003616 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003624:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2221      	movs	r2, #33	@ 0x21
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2210      	movs	r2, #16
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	893a      	ldrh	r2, [r7, #8]
 8003646:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a50      	ldr	r2, [pc, #320]	@ (8003798 <HAL_I2C_Master_Transmit+0x1f8>)
 8003656:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003658:	8979      	ldrh	r1, [r7, #10]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	6a3a      	ldr	r2, [r7, #32]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 ffa4 	bl	80045ac <I2C_MasterRequestWrite>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e08d      	b.n	800378a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003684:	e066      	b.n	8003754 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	6a39      	ldr	r1, [r7, #32]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f001 fb76 	bl	8004d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	2b04      	cmp	r3, #4
 800369c:	d107      	bne.n	80036ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e06b      	b.n	800378a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	781a      	ldrb	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d11b      	bne.n	8003728 <HAL_I2C_Master_Transmit+0x188>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d017      	beq.n	8003728 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	6a39      	ldr	r1, [r7, #32]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f001 fb6d 	bl	8004e0c <I2C_WaitOnBTFFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00d      	beq.n	8003754 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	2b04      	cmp	r3, #4
 800373e:	d107      	bne.n	8003750 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800374e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e01a      	b.n	800378a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003758:	2b00      	cmp	r3, #0
 800375a:	d194      	bne.n	8003686 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	00100002 	.word	0x00100002
 8003798:	ffff0000 	.word	0xffff0000

0800379c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08c      	sub	sp, #48	@ 0x30
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	461a      	mov	r2, r3
 80037a8:	460b      	mov	r3, r1
 80037aa:	817b      	strh	r3, [r7, #10]
 80037ac:	4613      	mov	r3, r2
 80037ae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037b4:	f7fe fc3e 	bl	8002034 <HAL_GetTick>
 80037b8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	f040 824b 	bne.w	8003c5e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	2319      	movs	r3, #25
 80037ce:	2201      	movs	r2, #1
 80037d0:	497f      	ldr	r1, [pc, #508]	@ (80039d0 <HAL_I2C_Master_Receive+0x234>)
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f001 f9b8 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
 80037e0:	e23e      	b.n	8003c60 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_I2C_Master_Receive+0x54>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e237      	b.n	8003c60 <HAL_I2C_Master_Receive+0x4c4>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d007      	beq.n	8003816 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003824:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2222      	movs	r2, #34	@ 0x22
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2210      	movs	r2, #16
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	893a      	ldrh	r2, [r7, #8]
 8003846:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4a5f      	ldr	r2, [pc, #380]	@ (80039d4 <HAL_I2C_Master_Receive+0x238>)
 8003856:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003858:	8979      	ldrh	r1, [r7, #10]
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 ff26 	bl	80046b0 <I2C_MasterRequestRead>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e1f8      	b.n	8003c60 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003872:	2b00      	cmp	r3, #0
 8003874:	d113      	bne.n	800389e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	61fb      	str	r3, [r7, #28]
 800388a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e1cc      	b.n	8003c38 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d11e      	bne.n	80038e4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038b6:	b672      	cpsid	i
}
 80038b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038e0:	b662      	cpsie	i
}
 80038e2:	e035      	b.n	8003950 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d11e      	bne.n	800392a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038fc:	b672      	cpsid	i
}
 80038fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003924:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003926:	b662      	cpsie	i
}
 8003928:	e012      	b.n	8003950 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003950:	e172      	b.n	8003c38 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003956:	2b03      	cmp	r3, #3
 8003958:	f200 811f 	bhi.w	8003b9a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003960:	2b01      	cmp	r3, #1
 8003962:	d123      	bne.n	80039ac <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003966:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f001 fa97 	bl	8004e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e173      	b.n	8003c60 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039aa:	e145      	b.n	8003c38 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d152      	bne.n	8003a5a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ba:	2200      	movs	r2, #0
 80039bc:	4906      	ldr	r1, [pc, #24]	@ (80039d8 <HAL_I2C_Master_Receive+0x23c>)
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f001 f8c2 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e148      	b.n	8003c60 <HAL_I2C_Master_Receive+0x4c4>
 80039ce:	bf00      	nop
 80039d0:	00100002 	.word	0x00100002
 80039d4:	ffff0000 	.word	0xffff0000
 80039d8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80039dc:	b672      	cpsid	i
}
 80039de:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a22:	b662      	cpsie	i
}
 8003a24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a58:	e0ee      	b.n	8003c38 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a60:	2200      	movs	r2, #0
 8003a62:	4981      	ldr	r1, [pc, #516]	@ (8003c68 <HAL_I2C_Master_Receive+0x4cc>)
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f001 f86f 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0f5      	b.n	8003c60 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a84:	b672      	cpsid	i
}
 8003a86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003aba:	4b6c      	ldr	r3, [pc, #432]	@ (8003c6c <HAL_I2C_Master_Receive+0x4d0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	08db      	lsrs	r3, r3, #3
 8003ac0:	4a6b      	ldr	r2, [pc, #428]	@ (8003c70 <HAL_I2C_Master_Receive+0x4d4>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	0a1a      	lsrs	r2, r3, #8
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	00da      	lsls	r2, r3, #3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d118      	bne.n	8003b12 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	f043 0220 	orr.w	r2, r3, #32
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b02:	b662      	cpsie	i
}
 8003b04:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0a6      	b.n	8003c60 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d1d9      	bne.n	8003ad4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b62:	b662      	cpsie	i
}
 8003b64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b98:	e04e      	b.n	8003c38 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f001 f97c 	bl	8004e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e058      	b.n	8003c60 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d124      	bne.n	8003c38 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d107      	bne.n	8003c06 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c04:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f47f ae88 	bne.w	8003952 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e000      	b.n	8003c60 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003c5e:	2302      	movs	r3, #2
  }
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3728      	adds	r7, #40	@ 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	00010004 	.word	0x00010004
 8003c6c:	2000001c 	.word	0x2000001c
 8003c70:	14f8b589 	.word	0x14f8b589

08003c74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	4608      	mov	r0, r1
 8003c7e:	4611      	mov	r1, r2
 8003c80:	461a      	mov	r2, r3
 8003c82:	4603      	mov	r3, r0
 8003c84:	817b      	strh	r3, [r7, #10]
 8003c86:	460b      	mov	r3, r1
 8003c88:	813b      	strh	r3, [r7, #8]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c8e:	f7fe f9d1 	bl	8002034 <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b20      	cmp	r3, #32
 8003c9e:	f040 80d9 	bne.w	8003e54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2319      	movs	r3, #25
 8003ca8:	2201      	movs	r2, #1
 8003caa:	496d      	ldr	r1, [pc, #436]	@ (8003e60 <HAL_I2C_Mem_Write+0x1ec>)
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 ff4b 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0cc      	b.n	8003e56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_I2C_Mem_Write+0x56>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e0c5      	b.n	8003e56 <HAL_I2C_Mem_Write+0x1e2>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d007      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2221      	movs	r2, #33	@ 0x21
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2240      	movs	r2, #64	@ 0x40
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a3a      	ldr	r2, [r7, #32]
 8003d1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a4d      	ldr	r2, [pc, #308]	@ (8003e64 <HAL_I2C_Mem_Write+0x1f0>)
 8003d30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d32:	88f8      	ldrh	r0, [r7, #6]
 8003d34:	893a      	ldrh	r2, [r7, #8]
 8003d36:	8979      	ldrh	r1, [r7, #10]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	9301      	str	r3, [sp, #4]
 8003d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	4603      	mov	r3, r0
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fd82 	bl	800484c <I2C_RequestMemoryWrite>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d052      	beq.n	8003df4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e081      	b.n	8003e56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f001 f810 	bl	8004d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d107      	bne.n	8003d7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e06b      	b.n	8003e56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d11b      	bne.n	8003df4 <HAL_I2C_Mem_Write+0x180>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d017      	beq.n	8003df4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1aa      	bne.n	8003d52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f001 f803 	bl	8004e0c <I2C_WaitOnBTFFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00d      	beq.n	8003e28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d107      	bne.n	8003e24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e016      	b.n	8003e56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e000      	b.n	8003e56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
  }
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	00100002 	.word	0x00100002
 8003e64:	ffff0000 	.word	0xffff0000

08003e68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08c      	sub	sp, #48	@ 0x30
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	4608      	mov	r0, r1
 8003e72:	4611      	mov	r1, r2
 8003e74:	461a      	mov	r2, r3
 8003e76:	4603      	mov	r3, r0
 8003e78:	817b      	strh	r3, [r7, #10]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	813b      	strh	r3, [r7, #8]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e86:	f7fe f8d5 	bl	8002034 <HAL_GetTick>
 8003e8a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	f040 8250 	bne.w	800433a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	2319      	movs	r3, #25
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	4982      	ldr	r1, [pc, #520]	@ (80040ac <HAL_I2C_Mem_Read+0x244>)
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fe4f 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e243      	b.n	800433c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2C_Mem_Read+0x5a>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e23c      	b.n	800433c <HAL_I2C_Mem_Read+0x4d4>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d007      	beq.n	8003ee8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ef6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2222      	movs	r2, #34	@ 0x22
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2240      	movs	r2, #64	@ 0x40
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a62      	ldr	r2, [pc, #392]	@ (80040b0 <HAL_I2C_Mem_Read+0x248>)
 8003f28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f2a:	88f8      	ldrh	r0, [r7, #6]
 8003f2c:	893a      	ldrh	r2, [r7, #8]
 8003f2e:	8979      	ldrh	r1, [r7, #10]
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	9301      	str	r3, [sp, #4]
 8003f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f36:	9300      	str	r3, [sp, #0]
 8003f38:	4603      	mov	r3, r0
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fd1c 	bl	8004978 <I2C_RequestMemoryRead>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e1f8      	b.n	800433c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d113      	bne.n	8003f7a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	e1cc      	b.n	8004314 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d11e      	bne.n	8003fc0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f92:	b672      	cpsid	i
}
 8003f94:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	61bb      	str	r3, [r7, #24]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003fbc:	b662      	cpsie	i
}
 8003fbe:	e035      	b.n	800402c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d11e      	bne.n	8004006 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fd8:	b672      	cpsid	i
}
 8003fda:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004000:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004002:	b662      	cpsie	i
}
 8004004:	e012      	b.n	800402c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004014:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800402c:	e172      	b.n	8004314 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004032:	2b03      	cmp	r3, #3
 8004034:	f200 811f 	bhi.w	8004276 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403c:	2b01      	cmp	r3, #1
 800403e:	d123      	bne.n	8004088 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004042:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 ff29 	bl	8004e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e173      	b.n	800433c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004086:	e145      	b.n	8004314 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408c:	2b02      	cmp	r3, #2
 800408e:	d152      	bne.n	8004136 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004096:	2200      	movs	r2, #0
 8004098:	4906      	ldr	r1, [pc, #24]	@ (80040b4 <HAL_I2C_Mem_Read+0x24c>)
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fd54 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e148      	b.n	800433c <HAL_I2C_Mem_Read+0x4d4>
 80040aa:	bf00      	nop
 80040ac:	00100002 	.word	0x00100002
 80040b0:	ffff0000 	.word	0xffff0000
 80040b4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80040b8:	b672      	cpsid	i
}
 80040ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040fe:	b662      	cpsie	i
}
 8004100:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411e:	3b01      	subs	r3, #1
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004134:	e0ee      	b.n	8004314 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800413c:	2200      	movs	r2, #0
 800413e:	4981      	ldr	r1, [pc, #516]	@ (8004344 <HAL_I2C_Mem_Read+0x4dc>)
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 fd01 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0f5      	b.n	800433c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800415e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004160:	b672      	cpsid	i
}
 8004162:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004196:	4b6c      	ldr	r3, [pc, #432]	@ (8004348 <HAL_I2C_Mem_Read+0x4e0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	08db      	lsrs	r3, r3, #3
 800419c:	4a6b      	ldr	r2, [pc, #428]	@ (800434c <HAL_I2C_Mem_Read+0x4e4>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	0a1a      	lsrs	r2, r3, #8
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	00da      	lsls	r2, r3, #3
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d118      	bne.n	80041ee <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	f043 0220 	orr.w	r2, r3, #32
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80041de:	b662      	cpsie	i
}
 80041e0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e0a6      	b.n	800433c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d1d9      	bne.n	80041b0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800420a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800423e:	b662      	cpsie	i
}
 8004240:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004274:	e04e      	b.n	8004314 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004278:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fe0e 	bl	8004e9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e058      	b.n	800433c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d124      	bne.n	8004314 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d107      	bne.n	80042e2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	f47f ae88 	bne.w	800402e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e000      	b.n	800433c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800433a:	2302      	movs	r3, #2
  }
}
 800433c:	4618      	mov	r0, r3
 800433e:	3728      	adds	r7, #40	@ 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	00010004 	.word	0x00010004
 8004348:	2000001c 	.word	0x2000001c
 800434c:	14f8b589 	.word	0x14f8b589

08004350 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	@ 0x28
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	607a      	str	r2, [r7, #4]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	460b      	mov	r3, r1
 800435e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004360:	f7fd fe68 	bl	8002034 <HAL_GetTick>
 8004364:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b20      	cmp	r3, #32
 8004374:	f040 8111 	bne.w	800459a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	2319      	movs	r3, #25
 800437e:	2201      	movs	r2, #1
 8004380:	4988      	ldr	r1, [pc, #544]	@ (80045a4 <HAL_I2C_IsDeviceReady+0x254>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fbe0 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
 8004390:	e104      	b.n	800459c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_I2C_IsDeviceReady+0x50>
 800439c:	2302      	movs	r3, #2
 800439e:	e0fd      	b.n	800459c <HAL_I2C_IsDeviceReady+0x24c>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d007      	beq.n	80043c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2224      	movs	r2, #36	@ 0x24
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a70      	ldr	r2, [pc, #448]	@ (80045a8 <HAL_I2C_IsDeviceReady+0x258>)
 80043e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2200      	movs	r2, #0
 8004402:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fb9e 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00d      	beq.n	800442e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800441c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004420:	d103      	bne.n	800442a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004428:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e0b6      	b.n	800459c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800442e:	897b      	ldrh	r3, [r7, #10]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800443c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800443e:	f7fd fdf9 	bl	8002034 <HAL_GetTick>
 8004442:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b02      	cmp	r3, #2
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004472:	e025      	b.n	80044c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004474:	f7fd fdde 	bl	8002034 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d302      	bcc.n	800448a <HAL_I2C_IsDeviceReady+0x13a>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	22a0      	movs	r2, #160	@ 0xa0
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b02      	cmp	r3, #2
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b6:	bf0c      	ite	eq
 80044b8:	2301      	moveq	r3, #1
 80044ba:	2300      	movne	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80044ca:	d005      	beq.n	80044d8 <HAL_I2C_IsDeviceReady+0x188>
 80044cc:	7dfb      	ldrb	r3, [r7, #23]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <HAL_I2C_IsDeviceReady+0x188>
 80044d2:	7dbb      	ldrb	r3, [r7, #22]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0cd      	beq.n	8004474 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d129      	bne.n	8004542 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fe:	2300      	movs	r3, #0
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	613b      	str	r3, [r7, #16]
 8004512:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	2319      	movs	r3, #25
 800451a:	2201      	movs	r2, #1
 800451c:	4921      	ldr	r1, [pc, #132]	@ (80045a4 <HAL_I2C_IsDeviceReady+0x254>)
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 fb12 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e036      	b.n	800459c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e02c      	b.n	800459c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004550:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800455a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2319      	movs	r3, #25
 8004562:	2201      	movs	r2, #1
 8004564:	490f      	ldr	r1, [pc, #60]	@ (80045a4 <HAL_I2C_IsDeviceReady+0x254>)
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 faee 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e012      	b.n	800459c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	3301      	adds	r3, #1
 800457a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	429a      	cmp	r2, r3
 8004582:	f4ff af32 	bcc.w	80043ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
  }
}
 800459c:	4618      	mov	r0, r3
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	00100002 	.word	0x00100002
 80045a8:	ffff0000 	.word	0xffff0000

080045ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af02      	add	r7, sp, #8
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	460b      	mov	r3, r1
 80045ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d006      	beq.n	80045d6 <I2C_MasterRequestWrite+0x2a>
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d003      	beq.n	80045d6 <I2C_MasterRequestWrite+0x2a>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045d4:	d108      	bne.n	80045e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	e00b      	b.n	8004600 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ec:	2b12      	cmp	r3, #18
 80045ee:	d107      	bne.n	8004600 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fa9b 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00d      	beq.n	8004634 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004626:	d103      	bne.n	8004630 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800462e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e035      	b.n	80046a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800463c:	d108      	bne.n	8004650 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800463e:	897b      	ldrh	r3, [r7, #10]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	461a      	mov	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800464c:	611a      	str	r2, [r3, #16]
 800464e:	e01b      	b.n	8004688 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004650:	897b      	ldrh	r3, [r7, #10]
 8004652:	11db      	asrs	r3, r3, #7
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f003 0306 	and.w	r3, r3, #6
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f063 030f 	orn	r3, r3, #15
 8004660:	b2da      	uxtb	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	490e      	ldr	r1, [pc, #56]	@ (80046a8 <I2C_MasterRequestWrite+0xfc>)
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fae4 	bl	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e010      	b.n	80046a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800467e:	897b      	ldrh	r3, [r7, #10]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	4907      	ldr	r1, [pc, #28]	@ (80046ac <I2C_MasterRequestWrite+0x100>)
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 fad4 	bl	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	00010008 	.word	0x00010008
 80046ac:	00010002 	.word	0x00010002

080046b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	460b      	mov	r3, r1
 80046be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d006      	beq.n	80046ea <I2C_MasterRequestRead+0x3a>
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d003      	beq.n	80046ea <I2C_MasterRequestRead+0x3a>
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046e8:	d108      	bne.n	80046fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e00b      	b.n	8004714 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	2b11      	cmp	r3, #17
 8004702:	d107      	bne.n	8004714 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004712:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 fa11 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00d      	beq.n	8004748 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800473a:	d103      	bne.n	8004744 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004742:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e079      	b.n	800483c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004750:	d108      	bne.n	8004764 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004752:	897b      	ldrh	r3, [r7, #10]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	b2da      	uxtb	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	611a      	str	r2, [r3, #16]
 8004762:	e05f      	b.n	8004824 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004764:	897b      	ldrh	r3, [r7, #10]
 8004766:	11db      	asrs	r3, r3, #7
 8004768:	b2db      	uxtb	r3, r3
 800476a:	f003 0306 	and.w	r3, r3, #6
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f063 030f 	orn	r3, r3, #15
 8004774:	b2da      	uxtb	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4930      	ldr	r1, [pc, #192]	@ (8004844 <I2C_MasterRequestRead+0x194>)
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fa5a 	bl	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e054      	b.n	800483c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004792:	897b      	ldrh	r3, [r7, #10]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4929      	ldr	r1, [pc, #164]	@ (8004848 <I2C_MasterRequestRead+0x198>)
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fa4a 	bl	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e044      	b.n	800483c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 f9af 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00d      	beq.n	800480c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047fe:	d103      	bne.n	8004808 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e017      	b.n	800483c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800480c:	897b      	ldrh	r3, [r7, #10]
 800480e:	11db      	asrs	r3, r3, #7
 8004810:	b2db      	uxtb	r3, r3
 8004812:	f003 0306 	and.w	r3, r3, #6
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f063 030e 	orn	r3, r3, #14
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	4907      	ldr	r1, [pc, #28]	@ (8004848 <I2C_MasterRequestRead+0x198>)
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fa06 	bl	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	00010008 	.word	0x00010008
 8004848:	00010002 	.word	0x00010002

0800484c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	4608      	mov	r0, r1
 8004856:	4611      	mov	r1, r2
 8004858:	461a      	mov	r2, r3
 800485a:	4603      	mov	r3, r0
 800485c:	817b      	strh	r3, [r7, #10]
 800485e:	460b      	mov	r3, r1
 8004860:	813b      	strh	r3, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004874:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	2200      	movs	r2, #0
 800487e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f960 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00d      	beq.n	80048aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800489c:	d103      	bne.n	80048a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e05f      	b.n	800496a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048aa:	897b      	ldrh	r3, [r7, #10]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	6a3a      	ldr	r2, [r7, #32]
 80048be:	492d      	ldr	r1, [pc, #180]	@ (8004974 <I2C_RequestMemoryWrite+0x128>)
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f9bb 	bl	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e04c      	b.n	800496a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e8:	6a39      	ldr	r1, [r7, #32]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 fa46 	bl	8004d7c <I2C_WaitOnTXEFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d107      	bne.n	800490e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800490c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e02b      	b.n	800496a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004912:	88fb      	ldrh	r3, [r7, #6]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d105      	bne.n	8004924 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004918:	893b      	ldrh	r3, [r7, #8]
 800491a:	b2da      	uxtb	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	611a      	str	r2, [r3, #16]
 8004922:	e021      	b.n	8004968 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004924:	893b      	ldrh	r3, [r7, #8]
 8004926:	0a1b      	lsrs	r3, r3, #8
 8004928:	b29b      	uxth	r3, r3
 800492a:	b2da      	uxtb	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004934:	6a39      	ldr	r1, [r7, #32]
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f000 fa20 	bl	8004d7c <I2C_WaitOnTXEFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00d      	beq.n	800495e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	2b04      	cmp	r3, #4
 8004948:	d107      	bne.n	800495a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004958:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e005      	b.n	800496a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800495e:	893b      	ldrh	r3, [r7, #8]
 8004960:	b2da      	uxtb	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	00010002 	.word	0x00010002

08004978 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	4608      	mov	r0, r1
 8004982:	4611      	mov	r1, r2
 8004984:	461a      	mov	r2, r3
 8004986:	4603      	mov	r3, r0
 8004988:	817b      	strh	r3, [r7, #10]
 800498a:	460b      	mov	r3, r1
 800498c:	813b      	strh	r3, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f8c2 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00d      	beq.n	80049e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049d8:	d103      	bne.n	80049e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e0aa      	b.n	8004b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049e6:	897b      	ldrh	r3, [r7, #10]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	6a3a      	ldr	r2, [r7, #32]
 80049fa:	4952      	ldr	r1, [pc, #328]	@ (8004b44 <I2C_RequestMemoryRead+0x1cc>)
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f91d 	bl	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e097      	b.n	8004b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a24:	6a39      	ldr	r1, [r7, #32]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f9a8 	bl	8004d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00d      	beq.n	8004a4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d107      	bne.n	8004a4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e076      	b.n	8004b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d105      	bne.n	8004a60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a54:	893b      	ldrh	r3, [r7, #8]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	611a      	str	r2, [r3, #16]
 8004a5e:	e021      	b.n	8004aa4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a60:	893b      	ldrh	r3, [r7, #8]
 8004a62:	0a1b      	lsrs	r3, r3, #8
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a70:	6a39      	ldr	r1, [r7, #32]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f982 	bl	8004d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00d      	beq.n	8004a9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d107      	bne.n	8004a96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e050      	b.n	8004b3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a9a:	893b      	ldrh	r3, [r7, #8]
 8004a9c:	b2da      	uxtb	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa6:	6a39      	ldr	r1, [r7, #32]
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 f967 	bl	8004d7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00d      	beq.n	8004ad0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d107      	bne.n	8004acc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e035      	b.n	8004b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ade:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f82b 	bl	8004b48 <I2C_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00d      	beq.n	8004b14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b06:	d103      	bne.n	8004b10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e013      	b.n	8004b3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b14:	897b      	ldrh	r3, [r7, #10]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	6a3a      	ldr	r2, [r7, #32]
 8004b28:	4906      	ldr	r1, [pc, #24]	@ (8004b44 <I2C_RequestMemoryRead+0x1cc>)
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f886 	bl	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	00010002 	.word	0x00010002

08004b48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b58:	e048      	b.n	8004bec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b60:	d044      	beq.n	8004bec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b62:	f7fd fa67 	bl	8002034 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d302      	bcc.n	8004b78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d139      	bne.n	8004bec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	0c1b      	lsrs	r3, r3, #16
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d10d      	bne.n	8004b9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	43da      	mvns	r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	e00c      	b.n	8004bb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	43da      	mvns	r2, r3
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d116      	bne.n	8004bec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd8:	f043 0220 	orr.w	r2, r3, #32
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e023      	b.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	0c1b      	lsrs	r3, r3, #16
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d10d      	bne.n	8004c12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	e00c      	b.n	8004c2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	43da      	mvns	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	bf0c      	ite	eq
 8004c24:	2301      	moveq	r3, #1
 8004c26:	2300      	movne	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d093      	beq.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c4a:	e071      	b.n	8004d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c5a:	d123      	bne.n	8004ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	f043 0204 	orr.w	r2, r3, #4
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e067      	b.n	8004d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004caa:	d041      	beq.n	8004d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cac:	f7fd f9c2 	bl	8002034 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d302      	bcc.n	8004cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d136      	bne.n	8004d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d10c      	bne.n	8004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bf14      	ite	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	2300      	moveq	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	e00b      	b.n	8004cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	43da      	mvns	r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bf14      	ite	ne
 8004cf8:	2301      	movne	r3, #1
 8004cfa:	2300      	moveq	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d016      	beq.n	8004d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e021      	b.n	8004d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	0c1b      	lsrs	r3, r3, #16
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d10c      	bne.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	43da      	mvns	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4013      	ands	r3, r2
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf14      	ite	ne
 8004d4c:	2301      	movne	r3, #1
 8004d4e:	2300      	moveq	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e00b      	b.n	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f47f af6d 	bne.w	8004c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d88:	e034      	b.n	8004df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f8e3 	bl	8004f56 <I2C_IsAcknowledgeFailed>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e034      	b.n	8004e04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004da0:	d028      	beq.n	8004df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da2:	f7fd f947 	bl	8002034 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d302      	bcc.n	8004db8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d11d      	bne.n	8004df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc2:	2b80      	cmp	r3, #128	@ 0x80
 8004dc4:	d016      	beq.n	8004df4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de0:	f043 0220 	orr.w	r2, r3, #32
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e007      	b.n	8004e04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfe:	2b80      	cmp	r3, #128	@ 0x80
 8004e00:	d1c3      	bne.n	8004d8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e18:	e034      	b.n	8004e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f89b 	bl	8004f56 <I2C_IsAcknowledgeFailed>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e034      	b.n	8004e94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e30:	d028      	beq.n	8004e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e32:	f7fd f8ff 	bl	8002034 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d302      	bcc.n	8004e48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d11d      	bne.n	8004e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d016      	beq.n	8004e84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e70:	f043 0220 	orr.w	r2, r3, #32
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e007      	b.n	8004e94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d1c3      	bne.n	8004e1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ea8:	e049      	b.n	8004f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d119      	bne.n	8004eec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0210 	mvn.w	r2, #16
 8004ec0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e030      	b.n	8004f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eec:	f7fd f8a2 	bl	8002034 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d302      	bcc.n	8004f02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d11d      	bne.n	8004f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0c:	2b40      	cmp	r3, #64	@ 0x40
 8004f0e:	d016      	beq.n	8004f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	f043 0220 	orr.w	r2, r3, #32
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e007      	b.n	8004f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f48:	2b40      	cmp	r3, #64	@ 0x40
 8004f4a:	d1ae      	bne.n	8004eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6c:	d11b      	bne.n	8004fa6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f92:	f043 0204 	orr.w	r2, r3, #4
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr
	...

08004fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e272      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8087 	beq.w	80050e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fd4:	4b92      	ldr	r3, [pc, #584]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d00c      	beq.n	8004ffa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fe0:	4b8f      	ldr	r3, [pc, #572]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 030c 	and.w	r3, r3, #12
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d112      	bne.n	8005012 <HAL_RCC_OscConfig+0x5e>
 8004fec:	4b8c      	ldr	r3, [pc, #560]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff8:	d10b      	bne.n	8005012 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ffa:	4b89      	ldr	r3, [pc, #548]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d06c      	beq.n	80050e0 <HAL_RCC_OscConfig+0x12c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d168      	bne.n	80050e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e24c      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800501a:	d106      	bne.n	800502a <HAL_RCC_OscConfig+0x76>
 800501c:	4b80      	ldr	r3, [pc, #512]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a7f      	ldr	r2, [pc, #508]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005026:	6013      	str	r3, [r2, #0]
 8005028:	e02e      	b.n	8005088 <HAL_RCC_OscConfig+0xd4>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10c      	bne.n	800504c <HAL_RCC_OscConfig+0x98>
 8005032:	4b7b      	ldr	r3, [pc, #492]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a7a      	ldr	r2, [pc, #488]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005038:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800503c:	6013      	str	r3, [r2, #0]
 800503e:	4b78      	ldr	r3, [pc, #480]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a77      	ldr	r2, [pc, #476]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005044:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e01d      	b.n	8005088 <HAL_RCC_OscConfig+0xd4>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005054:	d10c      	bne.n	8005070 <HAL_RCC_OscConfig+0xbc>
 8005056:	4b72      	ldr	r3, [pc, #456]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a71      	ldr	r2, [pc, #452]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 800505c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	4b6f      	ldr	r3, [pc, #444]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a6e      	ldr	r2, [pc, #440]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e00b      	b.n	8005088 <HAL_RCC_OscConfig+0xd4>
 8005070:	4b6b      	ldr	r3, [pc, #428]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a6a      	ldr	r2, [pc, #424]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	4b68      	ldr	r3, [pc, #416]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a67      	ldr	r2, [pc, #412]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005086:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d013      	beq.n	80050b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005090:	f7fc ffd0 	bl	8002034 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005098:	f7fc ffcc 	bl	8002034 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	@ 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e200      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f0      	beq.n	8005098 <HAL_RCC_OscConfig+0xe4>
 80050b6:	e014      	b.n	80050e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7fc ffbc 	bl	8002034 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c0:	f7fc ffb8 	bl	8002034 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	@ 0x64
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e1ec      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050d2:	4b53      	ldr	r3, [pc, #332]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x10c>
 80050de:	e000      	b.n	80050e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d063      	beq.n	80051b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050fa:	4b49      	ldr	r3, [pc, #292]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b08      	cmp	r3, #8
 8005104:	d11c      	bne.n	8005140 <HAL_RCC_OscConfig+0x18c>
 8005106:	4b46      	ldr	r3, [pc, #280]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d116      	bne.n	8005140 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005112:	4b43      	ldr	r3, [pc, #268]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d005      	beq.n	800512a <HAL_RCC_OscConfig+0x176>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d001      	beq.n	800512a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e1c0      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512a:	4b3d      	ldr	r3, [pc, #244]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4939      	ldr	r1, [pc, #228]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800513e:	e03a      	b.n	80051b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d020      	beq.n	800518a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005148:	4b36      	ldr	r3, [pc, #216]	@ (8005224 <HAL_RCC_OscConfig+0x270>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514e:	f7fc ff71 	bl	8002034 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005156:	f7fc ff6d 	bl	8002034 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e1a1      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005168:	4b2d      	ldr	r3, [pc, #180]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005174:	4b2a      	ldr	r3, [pc, #168]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4927      	ldr	r1, [pc, #156]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 8005184:	4313      	orrs	r3, r2
 8005186:	600b      	str	r3, [r1, #0]
 8005188:	e015      	b.n	80051b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800518a:	4b26      	ldr	r3, [pc, #152]	@ (8005224 <HAL_RCC_OscConfig+0x270>)
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005190:	f7fc ff50 	bl	8002034 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005198:	f7fc ff4c 	bl	8002034 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e180      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d03a      	beq.n	8005238 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d019      	beq.n	80051fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ca:	4b17      	ldr	r3, [pc, #92]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 80051cc:	2201      	movs	r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d0:	f7fc ff30 	bl	8002034 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d8:	f7fc ff2c 	bl	8002034 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e160      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <HAL_RCC_OscConfig+0x26c>)
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f0      	beq.n	80051d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051f6:	2001      	movs	r0, #1
 80051f8:	f000 face 	bl	8005798 <RCC_Delay>
 80051fc:	e01c      	b.n	8005238 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <HAL_RCC_OscConfig+0x274>)
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005204:	f7fc ff16 	bl	8002034 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800520a:	e00f      	b.n	800522c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800520c:	f7fc ff12 	bl	8002034 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d908      	bls.n	800522c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e146      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
 800521e:	bf00      	nop
 8005220:	40021000 	.word	0x40021000
 8005224:	42420000 	.word	0x42420000
 8005228:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800522c:	4b92      	ldr	r3, [pc, #584]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e9      	bne.n	800520c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80a6 	beq.w	8005392 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800524a:	4b8b      	ldr	r3, [pc, #556]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10d      	bne.n	8005272 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005256:	4b88      	ldr	r3, [pc, #544]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	4a87      	ldr	r2, [pc, #540]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 800525c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005260:	61d3      	str	r3, [r2, #28]
 8005262:	4b85      	ldr	r3, [pc, #532]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800526e:	2301      	movs	r3, #1
 8005270:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005272:	4b82      	ldr	r3, [pc, #520]	@ (800547c <HAL_RCC_OscConfig+0x4c8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527a:	2b00      	cmp	r3, #0
 800527c:	d118      	bne.n	80052b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800527e:	4b7f      	ldr	r3, [pc, #508]	@ (800547c <HAL_RCC_OscConfig+0x4c8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a7e      	ldr	r2, [pc, #504]	@ (800547c <HAL_RCC_OscConfig+0x4c8>)
 8005284:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800528a:	f7fc fed3 	bl	8002034 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005292:	f7fc fecf 	bl	8002034 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b64      	cmp	r3, #100	@ 0x64
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e103      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a4:	4b75      	ldr	r3, [pc, #468]	@ (800547c <HAL_RCC_OscConfig+0x4c8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0f0      	beq.n	8005292 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d106      	bne.n	80052c6 <HAL_RCC_OscConfig+0x312>
 80052b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	4a6e      	ldr	r2, [pc, #440]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	6213      	str	r3, [r2, #32]
 80052c4:	e02d      	b.n	8005322 <HAL_RCC_OscConfig+0x36e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x334>
 80052ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	4a69      	ldr	r2, [pc, #420]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80052d4:	f023 0301 	bic.w	r3, r3, #1
 80052d8:	6213      	str	r3, [r2, #32]
 80052da:	4b67      	ldr	r3, [pc, #412]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	4a66      	ldr	r2, [pc, #408]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80052e0:	f023 0304 	bic.w	r3, r3, #4
 80052e4:	6213      	str	r3, [r2, #32]
 80052e6:	e01c      	b.n	8005322 <HAL_RCC_OscConfig+0x36e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b05      	cmp	r3, #5
 80052ee:	d10c      	bne.n	800530a <HAL_RCC_OscConfig+0x356>
 80052f0:	4b61      	ldr	r3, [pc, #388]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	4a60      	ldr	r2, [pc, #384]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80052f6:	f043 0304 	orr.w	r3, r3, #4
 80052fa:	6213      	str	r3, [r2, #32]
 80052fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	4a5d      	ldr	r2, [pc, #372]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	6213      	str	r3, [r2, #32]
 8005308:	e00b      	b.n	8005322 <HAL_RCC_OscConfig+0x36e>
 800530a:	4b5b      	ldr	r3, [pc, #364]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	4a5a      	ldr	r2, [pc, #360]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	6213      	str	r3, [r2, #32]
 8005316:	4b58      	ldr	r3, [pc, #352]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	4a57      	ldr	r2, [pc, #348]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 800531c:	f023 0304 	bic.w	r3, r3, #4
 8005320:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d015      	beq.n	8005356 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800532a:	f7fc fe83 	bl	8002034 <HAL_GetTick>
 800532e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005330:	e00a      	b.n	8005348 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005332:	f7fc fe7f 	bl	8002034 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005340:	4293      	cmp	r3, r2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e0b1      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005348:	4b4b      	ldr	r3, [pc, #300]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0ee      	beq.n	8005332 <HAL_RCC_OscConfig+0x37e>
 8005354:	e014      	b.n	8005380 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005356:	f7fc fe6d 	bl	8002034 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535c:	e00a      	b.n	8005374 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535e:	f7fc fe69 	bl	8002034 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536c:	4293      	cmp	r3, r2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e09b      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005374:	4b40      	ldr	r3, [pc, #256]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ee      	bne.n	800535e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005380:	7dfb      	ldrb	r3, [r7, #23]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d105      	bne.n	8005392 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005386:	4b3c      	ldr	r3, [pc, #240]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	4a3b      	ldr	r2, [pc, #236]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 800538c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005390:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 8087 	beq.w	80054aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800539c:	4b36      	ldr	r3, [pc, #216]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 030c 	and.w	r3, r3, #12
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d061      	beq.n	800546c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d146      	bne.n	800543e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b0:	4b33      	ldr	r3, [pc, #204]	@ (8005480 <HAL_RCC_OscConfig+0x4cc>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b6:	f7fc fe3d 	bl	8002034 <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053be:	f7fc fe39 	bl	8002034 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e06d      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053d0:	4b29      	ldr	r3, [pc, #164]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f0      	bne.n	80053be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e4:	d108      	bne.n	80053f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80053e6:	4b24      	ldr	r3, [pc, #144]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	4921      	ldr	r1, [pc, #132]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a19      	ldr	r1, [r3, #32]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	430b      	orrs	r3, r1
 800540a:	491b      	ldr	r1, [pc, #108]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005410:	4b1b      	ldr	r3, [pc, #108]	@ (8005480 <HAL_RCC_OscConfig+0x4cc>)
 8005412:	2201      	movs	r2, #1
 8005414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005416:	f7fc fe0d 	bl	8002034 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800541e:	f7fc fe09 	bl	8002034 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e03d      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005430:	4b11      	ldr	r3, [pc, #68]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0f0      	beq.n	800541e <HAL_RCC_OscConfig+0x46a>
 800543c:	e035      	b.n	80054aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543e:	4b10      	ldr	r3, [pc, #64]	@ (8005480 <HAL_RCC_OscConfig+0x4cc>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005444:	f7fc fdf6 	bl	8002034 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544c:	f7fc fdf2 	bl	8002034 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e026      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800545e:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <HAL_RCC_OscConfig+0x4c4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x498>
 800546a:	e01e      	b.n	80054aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d107      	bne.n	8005484 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e019      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
 8005478:	40021000 	.word	0x40021000
 800547c:	40007000 	.word	0x40007000
 8005480:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005484:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <HAL_RCC_OscConfig+0x500>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	429a      	cmp	r2, r3
 8005496:	d106      	bne.n	80054a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d001      	beq.n	80054aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40021000 	.word	0x40021000

080054b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0d0      	b.n	800566e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005678 <HAL_RCC_ClockConfig+0x1c0>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d910      	bls.n	80054fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054da:	4b67      	ldr	r3, [pc, #412]	@ (8005678 <HAL_RCC_ClockConfig+0x1c0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f023 0207 	bic.w	r2, r3, #7
 80054e2:	4965      	ldr	r1, [pc, #404]	@ (8005678 <HAL_RCC_ClockConfig+0x1c0>)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ea:	4b63      	ldr	r3, [pc, #396]	@ (8005678 <HAL_RCC_ClockConfig+0x1c0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d001      	beq.n	80054fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0b8      	b.n	800566e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d020      	beq.n	800554a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005514:	4b59      	ldr	r3, [pc, #356]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	4a58      	ldr	r2, [pc, #352]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 800551a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800551e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800552c:	4b53      	ldr	r3, [pc, #332]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4a52      	ldr	r2, [pc, #328]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005532:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005536:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005538:	4b50      	ldr	r3, [pc, #320]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	494d      	ldr	r1, [pc, #308]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005546:	4313      	orrs	r3, r2
 8005548:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d040      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d107      	bne.n	800556e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555e:	4b47      	ldr	r3, [pc, #284]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d115      	bne.n	8005596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e07f      	b.n	800566e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d107      	bne.n	8005586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005576:	4b41      	ldr	r3, [pc, #260]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e073      	b.n	800566e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005586:	4b3d      	ldr	r3, [pc, #244]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e06b      	b.n	800566e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005596:	4b39      	ldr	r3, [pc, #228]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f023 0203 	bic.w	r2, r3, #3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	4936      	ldr	r1, [pc, #216]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055a8:	f7fc fd44 	bl	8002034 <HAL_GetTick>
 80055ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ae:	e00a      	b.n	80055c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055b0:	f7fc fd40 	bl	8002034 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e053      	b.n	800566e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c6:	4b2d      	ldr	r3, [pc, #180]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f003 020c 	and.w	r2, r3, #12
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d1eb      	bne.n	80055b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055d8:	4b27      	ldr	r3, [pc, #156]	@ (8005678 <HAL_RCC_ClockConfig+0x1c0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d210      	bcs.n	8005608 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055e6:	4b24      	ldr	r3, [pc, #144]	@ (8005678 <HAL_RCC_ClockConfig+0x1c0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f023 0207 	bic.w	r2, r3, #7
 80055ee:	4922      	ldr	r1, [pc, #136]	@ (8005678 <HAL_RCC_ClockConfig+0x1c0>)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f6:	4b20      	ldr	r3, [pc, #128]	@ (8005678 <HAL_RCC_ClockConfig+0x1c0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d001      	beq.n	8005608 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e032      	b.n	800566e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005614:	4b19      	ldr	r3, [pc, #100]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4916      	ldr	r1, [pc, #88]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005622:	4313      	orrs	r3, r2
 8005624:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005632:	4b12      	ldr	r3, [pc, #72]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	490e      	ldr	r1, [pc, #56]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005642:	4313      	orrs	r3, r2
 8005644:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005646:	f000 f821 	bl	800568c <HAL_RCC_GetSysClockFreq>
 800564a:	4602      	mov	r2, r0
 800564c:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <HAL_RCC_ClockConfig+0x1c4>)
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	490a      	ldr	r1, [pc, #40]	@ (8005680 <HAL_RCC_ClockConfig+0x1c8>)
 8005658:	5ccb      	ldrb	r3, [r1, r3]
 800565a:	fa22 f303 	lsr.w	r3, r2, r3
 800565e:	4a09      	ldr	r2, [pc, #36]	@ (8005684 <HAL_RCC_ClockConfig+0x1cc>)
 8005660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005662:	4b09      	ldr	r3, [pc, #36]	@ (8005688 <HAL_RCC_ClockConfig+0x1d0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f7fc fca2 	bl	8001fb0 <HAL_InitTick>

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40022000 	.word	0x40022000
 800567c:	40021000 	.word	0x40021000
 8005680:	0800b3d0 	.word	0x0800b3d0
 8005684:	2000001c 	.word	0x2000001c
 8005688:	20000020 	.word	0x20000020

0800568c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	2300      	movs	r3, #0
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	2300      	movs	r3, #0
 80056a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005720 <HAL_RCC_GetSysClockFreq+0x94>)
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 030c 	and.w	r3, r3, #12
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d002      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0x30>
 80056b6:	2b08      	cmp	r3, #8
 80056b8:	d003      	beq.n	80056c2 <HAL_RCC_GetSysClockFreq+0x36>
 80056ba:	e027      	b.n	800570c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056bc:	4b19      	ldr	r3, [pc, #100]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x98>)
 80056be:	613b      	str	r3, [r7, #16]
      break;
 80056c0:	e027      	b.n	8005712 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	0c9b      	lsrs	r3, r3, #18
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	4a17      	ldr	r2, [pc, #92]	@ (8005728 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056cc:	5cd3      	ldrb	r3, [r2, r3]
 80056ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056da:	4b11      	ldr	r3, [pc, #68]	@ (8005720 <HAL_RCC_GetSysClockFreq+0x94>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	0c5b      	lsrs	r3, r3, #17
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	4a11      	ldr	r2, [pc, #68]	@ (800572c <HAL_RCC_GetSysClockFreq+0xa0>)
 80056e6:	5cd3      	ldrb	r3, [r2, r3]
 80056e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x98>)
 80056ee:	fb03 f202 	mul.w	r2, r3, r2
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	e004      	b.n	8005706 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005730 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005700:	fb02 f303 	mul.w	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	613b      	str	r3, [r7, #16]
      break;
 800570a:	e002      	b.n	8005712 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800570c:	4b05      	ldr	r3, [pc, #20]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x98>)
 800570e:	613b      	str	r3, [r7, #16]
      break;
 8005710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005712:	693b      	ldr	r3, [r7, #16]
}
 8005714:	4618      	mov	r0, r3
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	bc80      	pop	{r7}
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40021000 	.word	0x40021000
 8005724:	007a1200 	.word	0x007a1200
 8005728:	0800b3e8 	.word	0x0800b3e8
 800572c:	0800b3f8 	.word	0x0800b3f8
 8005730:	003d0900 	.word	0x003d0900

08005734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005738:	4b02      	ldr	r3, [pc, #8]	@ (8005744 <HAL_RCC_GetHCLKFreq+0x10>)
 800573a:	681b      	ldr	r3, [r3, #0]
}
 800573c:	4618      	mov	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr
 8005744:	2000001c 	.word	0x2000001c

08005748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800574c:	f7ff fff2 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8005750:	4602      	mov	r2, r0
 8005752:	4b05      	ldr	r3, [pc, #20]	@ (8005768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	0a1b      	lsrs	r3, r3, #8
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	4903      	ldr	r1, [pc, #12]	@ (800576c <HAL_RCC_GetPCLK1Freq+0x24>)
 800575e:	5ccb      	ldrb	r3, [r1, r3]
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005764:	4618      	mov	r0, r3
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40021000 	.word	0x40021000
 800576c:	0800b3e0 	.word	0x0800b3e0

08005770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005774:	f7ff ffde 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8005778:	4602      	mov	r2, r0
 800577a:	4b05      	ldr	r3, [pc, #20]	@ (8005790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	0adb      	lsrs	r3, r3, #11
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	4903      	ldr	r1, [pc, #12]	@ (8005794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005786:	5ccb      	ldrb	r3, [r1, r3]
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800578c:	4618      	mov	r0, r3
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40021000 	.word	0x40021000
 8005794:	0800b3e0 	.word	0x0800b3e0

08005798 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057a0:	4b0a      	ldr	r3, [pc, #40]	@ (80057cc <RCC_Delay+0x34>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a0a      	ldr	r2, [pc, #40]	@ (80057d0 <RCC_Delay+0x38>)
 80057a6:	fba2 2303 	umull	r2, r3, r2, r3
 80057aa:	0a5b      	lsrs	r3, r3, #9
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057b4:	bf00      	nop
  }
  while (Delay --);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	1e5a      	subs	r2, r3, #1
 80057ba:	60fa      	str	r2, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1f9      	bne.n	80057b4 <RCC_Delay+0x1c>
}
 80057c0:	bf00      	nop
 80057c2:	bf00      	nop
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr
 80057cc:	2000001c 	.word	0x2000001c
 80057d0:	10624dd3 	.word	0x10624dd3

080057d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d07d      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80057f0:	2300      	movs	r3, #0
 80057f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057f4:	4b4f      	ldr	r3, [pc, #316]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10d      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005800:	4b4c      	ldr	r3, [pc, #304]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	4a4b      	ldr	r2, [pc, #300]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800580a:	61d3      	str	r3, [r2, #28]
 800580c:	4b49      	ldr	r3, [pc, #292]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005818:	2301      	movs	r3, #1
 800581a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800581c:	4b46      	ldr	r3, [pc, #280]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d118      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005828:	4b43      	ldr	r3, [pc, #268]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a42      	ldr	r2, [pc, #264]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800582e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005832:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005834:	f7fc fbfe 	bl	8002034 <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583a:	e008      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800583c:	f7fc fbfa 	bl	8002034 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b64      	cmp	r3, #100	@ 0x64
 8005848:	d901      	bls.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e06d      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584e:	4b3a      	ldr	r3, [pc, #232]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f0      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800585a:	4b36      	ldr	r3, [pc, #216]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005862:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d02e      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	429a      	cmp	r2, r3
 8005876:	d027      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005878:	4b2e      	ldr	r3, [pc, #184]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005880:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005882:	4b2e      	ldr	r3, [pc, #184]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005884:	2201      	movs	r2, #1
 8005886:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005888:	4b2c      	ldr	r3, [pc, #176]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800588e:	4a29      	ldr	r2, [pc, #164]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d014      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589e:	f7fc fbc9 	bl	8002034 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a4:	e00a      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a6:	f7fc fbc5 	bl	8002034 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d901      	bls.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e036      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ee      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4917      	ldr	r1, [pc, #92]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d105      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e0:	4b14      	ldr	r3, [pc, #80]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	4a13      	ldr	r2, [pc, #76]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	490b      	ldr	r1, [pc, #44]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005906:	4313      	orrs	r3, r2
 8005908:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0310 	and.w	r3, r3, #16
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005916:	4b07      	ldr	r3, [pc, #28]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	4904      	ldr	r1, [pc, #16]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005924:	4313      	orrs	r3, r2
 8005926:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40021000 	.word	0x40021000
 8005938:	40007000 	.word	0x40007000
 800593c:	42420440 	.word	0x42420440

08005940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e041      	b.n	80059d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fc f984 	bl	8001c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3304      	adds	r3, #4
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f000 fbc4 	bl	800610c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e041      	b.n	8005a74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fc f959 	bl	8001cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	f000 fb75 	bl	800610c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d109      	bne.n	8005aa0 <HAL_TIM_PWM_Start+0x24>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e022      	b.n	8005ae6 <HAL_TIM_PWM_Start+0x6a>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d109      	bne.n	8005aba <HAL_TIM_PWM_Start+0x3e>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	bf14      	ite	ne
 8005ab2:	2301      	movne	r3, #1
 8005ab4:	2300      	moveq	r3, #0
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	e015      	b.n	8005ae6 <HAL_TIM_PWM_Start+0x6a>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d109      	bne.n	8005ad4 <HAL_TIM_PWM_Start+0x58>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	bf14      	ite	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	2300      	moveq	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	e008      	b.n	8005ae6 <HAL_TIM_PWM_Start+0x6a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	bf14      	ite	ne
 8005ae0:	2301      	movne	r3, #1
 8005ae2:	2300      	moveq	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e05e      	b.n	8005bac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d104      	bne.n	8005afe <HAL_TIM_PWM_Start+0x82>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005afc:	e013      	b.n	8005b26 <HAL_TIM_PWM_Start+0xaa>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d104      	bne.n	8005b0e <HAL_TIM_PWM_Start+0x92>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b0c:	e00b      	b.n	8005b26 <HAL_TIM_PWM_Start+0xaa>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b08      	cmp	r3, #8
 8005b12:	d104      	bne.n	8005b1e <HAL_TIM_PWM_Start+0xa2>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b1c:	e003      	b.n	8005b26 <HAL_TIM_PWM_Start+0xaa>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2202      	movs	r2, #2
 8005b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fd78 	bl	8006624 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb4 <HAL_TIM_PWM_Start+0x138>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d107      	bne.n	8005b4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a18      	ldr	r2, [pc, #96]	@ (8005bb4 <HAL_TIM_PWM_Start+0x138>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_TIM_PWM_Start+0xfa>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b60:	d009      	beq.n	8005b76 <HAL_TIM_PWM_Start+0xfa>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a14      	ldr	r2, [pc, #80]	@ (8005bb8 <HAL_TIM_PWM_Start+0x13c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_TIM_PWM_Start+0xfa>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a12      	ldr	r2, [pc, #72]	@ (8005bbc <HAL_TIM_PWM_Start+0x140>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d111      	bne.n	8005b9a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b06      	cmp	r3, #6
 8005b86:	d010      	beq.n	8005baa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b98:	e007      	b.n	8005baa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40000400 	.word	0x40000400
 8005bbc:	40000800 	.word	0x40000800

08005bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d020      	beq.n	8005c24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01b      	beq.n	8005c24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0202 	mvn.w	r2, #2
 8005bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa63 	bl	80060d6 <HAL_TIM_IC_CaptureCallback>
 8005c10:	e005      	b.n	8005c1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa56 	bl	80060c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fa65 	bl	80060e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d020      	beq.n	8005c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01b      	beq.n	8005c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0204 	mvn.w	r2, #4
 8005c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2202      	movs	r2, #2
 8005c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fa3d 	bl	80060d6 <HAL_TIM_IC_CaptureCallback>
 8005c5c:	e005      	b.n	8005c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa30 	bl	80060c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fa3f 	bl	80060e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d020      	beq.n	8005cbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01b      	beq.n	8005cbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f06f 0208 	mvn.w	r2, #8
 8005c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2204      	movs	r2, #4
 8005c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fa17 	bl	80060d6 <HAL_TIM_IC_CaptureCallback>
 8005ca8:	e005      	b.n	8005cb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fa0a 	bl	80060c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fa19 	bl	80060e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d020      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d01b      	beq.n	8005d08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0210 	mvn.w	r2, #16
 8005cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2208      	movs	r2, #8
 8005cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f9f1 	bl	80060d6 <HAL_TIM_IC_CaptureCallback>
 8005cf4:	e005      	b.n	8005d02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f9e4 	bl	80060c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f9f3 	bl	80060e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00c      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d007      	beq.n	8005d2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0201 	mvn.w	r2, #1
 8005d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f9c3 	bl	80060b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00c      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fcf5 	bl	800673a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00c      	beq.n	8005d74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f9c3 	bl	80060fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00c      	beq.n	8005d98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0220 	mvn.w	r2, #32
 8005d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fcc8 	bl	8006728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d101      	bne.n	8005dbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dba:	2302      	movs	r3, #2
 8005dbc:	e0ae      	b.n	8005f1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b0c      	cmp	r3, #12
 8005dca:	f200 809f 	bhi.w	8005f0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dce:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005f0d 	.word	0x08005f0d
 8005ddc:	08005f0d 	.word	0x08005f0d
 8005de0:	08005f0d 	.word	0x08005f0d
 8005de4:	08005e49 	.word	0x08005e49
 8005de8:	08005f0d 	.word	0x08005f0d
 8005dec:	08005f0d 	.word	0x08005f0d
 8005df0:	08005f0d 	.word	0x08005f0d
 8005df4:	08005e8b 	.word	0x08005e8b
 8005df8:	08005f0d 	.word	0x08005f0d
 8005dfc:	08005f0d 	.word	0x08005f0d
 8005e00:	08005f0d 	.word	0x08005f0d
 8005e04:	08005ecb 	.word	0x08005ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 f9ea 	bl	80061e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699a      	ldr	r2, [r3, #24]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0208 	orr.w	r2, r2, #8
 8005e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0204 	bic.w	r2, r2, #4
 8005e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6999      	ldr	r1, [r3, #24]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	619a      	str	r2, [r3, #24]
      break;
 8005e46:	e064      	b.n	8005f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68b9      	ldr	r1, [r7, #8]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 fa30 	bl	80062b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699a      	ldr	r2, [r3, #24]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6999      	ldr	r1, [r3, #24]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	021a      	lsls	r2, r3, #8
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	619a      	str	r2, [r3, #24]
      break;
 8005e88:	e043      	b.n	8005f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fa79 	bl	8006388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69da      	ldr	r2, [r3, #28]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f042 0208 	orr.w	r2, r2, #8
 8005ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0204 	bic.w	r2, r2, #4
 8005eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69d9      	ldr	r1, [r3, #28]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	61da      	str	r2, [r3, #28]
      break;
 8005ec8:	e023      	b.n	8005f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fac3 	bl	800645c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69d9      	ldr	r1, [r3, #28]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	021a      	lsls	r2, r3, #8
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	61da      	str	r2, [r3, #28]
      break;
 8005f0a:	e002      	b.n	8005f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3718      	adds	r7, #24
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIM_ConfigClockSource+0x1c>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e0b4      	b.n	80060aa <HAL_TIM_ConfigClockSource+0x186>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f78:	d03e      	beq.n	8005ff8 <HAL_TIM_ConfigClockSource+0xd4>
 8005f7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7e:	f200 8087 	bhi.w	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f86:	f000 8086 	beq.w	8006096 <HAL_TIM_ConfigClockSource+0x172>
 8005f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8e:	d87f      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005f90:	2b70      	cmp	r3, #112	@ 0x70
 8005f92:	d01a      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0xa6>
 8005f94:	2b70      	cmp	r3, #112	@ 0x70
 8005f96:	d87b      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005f98:	2b60      	cmp	r3, #96	@ 0x60
 8005f9a:	d050      	beq.n	800603e <HAL_TIM_ConfigClockSource+0x11a>
 8005f9c:	2b60      	cmp	r3, #96	@ 0x60
 8005f9e:	d877      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa0:	2b50      	cmp	r3, #80	@ 0x50
 8005fa2:	d03c      	beq.n	800601e <HAL_TIM_ConfigClockSource+0xfa>
 8005fa4:	2b50      	cmp	r3, #80	@ 0x50
 8005fa6:	d873      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa8:	2b40      	cmp	r3, #64	@ 0x40
 8005faa:	d058      	beq.n	800605e <HAL_TIM_ConfigClockSource+0x13a>
 8005fac:	2b40      	cmp	r3, #64	@ 0x40
 8005fae:	d86f      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb0:	2b30      	cmp	r3, #48	@ 0x30
 8005fb2:	d064      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x15a>
 8005fb4:	2b30      	cmp	r3, #48	@ 0x30
 8005fb6:	d86b      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d060      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x15a>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d867      	bhi.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d05c      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x15a>
 8005fc4:	2b10      	cmp	r3, #16
 8005fc6:	d05a      	beq.n	800607e <HAL_TIM_ConfigClockSource+0x15a>
 8005fc8:	e062      	b.n	8006090 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fda:	f000 fb04 	bl	80065e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	609a      	str	r2, [r3, #8]
      break;
 8005ff6:	e04f      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006008:	f000 faed 	bl	80065e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689a      	ldr	r2, [r3, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800601a:	609a      	str	r2, [r3, #8]
      break;
 800601c:	e03c      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800602a:	461a      	mov	r2, r3
 800602c:	f000 fa64 	bl	80064f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2150      	movs	r1, #80	@ 0x50
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fabb 	bl	80065b2 <TIM_ITRx_SetConfig>
      break;
 800603c:	e02c      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800604a:	461a      	mov	r2, r3
 800604c:	f000 fa82 	bl	8006554 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2160      	movs	r1, #96	@ 0x60
 8006056:	4618      	mov	r0, r3
 8006058:	f000 faab 	bl	80065b2 <TIM_ITRx_SetConfig>
      break;
 800605c:	e01c      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800606a:	461a      	mov	r2, r3
 800606c:	f000 fa44 	bl	80064f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2140      	movs	r1, #64	@ 0x40
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fa9b 	bl	80065b2 <TIM_ITRx_SetConfig>
      break;
 800607c:	e00c      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f000 fa92 	bl	80065b2 <TIM_ITRx_SetConfig>
      break;
 800608e:	e003      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	73fb      	strb	r3, [r7, #15]
      break;
 8006094:	e000      	b.n	8006098 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr

080060c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr

080060d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr

080060fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a2f      	ldr	r2, [pc, #188]	@ (80061dc <TIM_Base_SetConfig+0xd0>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00b      	beq.n	800613c <TIM_Base_SetConfig+0x30>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800612a:	d007      	beq.n	800613c <TIM_Base_SetConfig+0x30>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a2c      	ldr	r2, [pc, #176]	@ (80061e0 <TIM_Base_SetConfig+0xd4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d003      	beq.n	800613c <TIM_Base_SetConfig+0x30>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a2b      	ldr	r2, [pc, #172]	@ (80061e4 <TIM_Base_SetConfig+0xd8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d108      	bne.n	800614e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a22      	ldr	r2, [pc, #136]	@ (80061dc <TIM_Base_SetConfig+0xd0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00b      	beq.n	800616e <TIM_Base_SetConfig+0x62>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800615c:	d007      	beq.n	800616e <TIM_Base_SetConfig+0x62>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a1f      	ldr	r2, [pc, #124]	@ (80061e0 <TIM_Base_SetConfig+0xd4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d003      	beq.n	800616e <TIM_Base_SetConfig+0x62>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a1e      	ldr	r2, [pc, #120]	@ (80061e4 <TIM_Base_SetConfig+0xd8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d108      	bne.n	8006180 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a0d      	ldr	r2, [pc, #52]	@ (80061dc <TIM_Base_SetConfig+0xd0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d103      	bne.n	80061b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f023 0201 	bic.w	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	611a      	str	r2, [r3, #16]
  }
}
 80061d2:	bf00      	nop
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr
 80061dc:	40012c00 	.word	0x40012c00
 80061e0:	40000400 	.word	0x40000400
 80061e4:	40000800 	.word	0x40000800

080061e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f023 0201 	bic.w	r2, r3, #1
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f023 0302 	bic.w	r3, r3, #2
 8006230:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a1c      	ldr	r2, [pc, #112]	@ (80062b0 <TIM_OC1_SetConfig+0xc8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10c      	bne.n	800625e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0308 	bic.w	r3, r3, #8
 800624a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f023 0304 	bic.w	r3, r3, #4
 800625c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a13      	ldr	r2, [pc, #76]	@ (80062b0 <TIM_OC1_SetConfig+0xc8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d111      	bne.n	800628a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800626c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40012c00 	.word	0x40012c00

080062b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	f023 0210 	bic.w	r2, r3, #16
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f023 0320 	bic.w	r3, r3, #32
 80062fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a1d      	ldr	r2, [pc, #116]	@ (8006384 <TIM_OC2_SetConfig+0xd0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d10d      	bne.n	8006330 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800631a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800632e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a14      	ldr	r2, [pc, #80]	@ (8006384 <TIM_OC2_SetConfig+0xd0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d113      	bne.n	8006360 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800633e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006346:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr
 8006384:	40012c00 	.word	0x40012c00

08006388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	021b      	lsls	r3, r3, #8
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006458 <TIM_OC3_SetConfig+0xd0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d10d      	bne.n	8006402 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006400:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a14      	ldr	r2, [pc, #80]	@ (8006458 <TIM_OC3_SetConfig+0xd0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d113      	bne.n	8006432 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	011b      	lsls	r3, r3, #4
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	621a      	str	r2, [r3, #32]
}
 800644c:	bf00      	nop
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	bc80      	pop	{r7}
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40012c00 	.word	0x40012c00

0800645c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800648a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	031b      	lsls	r3, r3, #12
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a0f      	ldr	r2, [pc, #60]	@ (80064f4 <TIM_OC4_SetConfig+0x98>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d109      	bne.n	80064d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	019b      	lsls	r3, r3, #6
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr
 80064f4:	40012c00 	.word	0x40012c00

080064f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f023 0201 	bic.w	r2, r3, #1
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 030a 	bic.w	r3, r3, #10
 8006534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	bc80      	pop	{r7}
 8006552:	4770      	bx	lr

08006554 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f023 0210 	bic.w	r2, r3, #16
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800657e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	031b      	lsls	r3, r3, #12
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006590:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	621a      	str	r2, [r3, #32]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr

080065b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f043 0307 	orr.w	r3, r3, #7
 80065d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	609a      	str	r2, [r3, #8]
}
 80065dc:	bf00      	nop
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr

080065e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b087      	sub	sp, #28
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	60f8      	str	r0, [r7, #12]
 80065ee:	60b9      	str	r1, [r7, #8]
 80065f0:	607a      	str	r2, [r7, #4]
 80065f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006600:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	021a      	lsls	r2, r3, #8
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	431a      	orrs	r2, r3
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	4313      	orrs	r3, r2
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	609a      	str	r2, [r3, #8]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr

08006624 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2201      	movs	r2, #1
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a1a      	ldr	r2, [r3, #32]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	43db      	mvns	r3, r3
 8006646:	401a      	ands	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a1a      	ldr	r2, [r3, #32]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	fa01 f303 	lsl.w	r3, r1, r3
 800665c:	431a      	orrs	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	621a      	str	r2, [r3, #32]
}
 8006662:	bf00      	nop
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	bc80      	pop	{r7}
 800666a:	4770      	bx	lr

0800666c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800666c:	b480      	push	{r7}
 800666e:	b085      	sub	sp, #20
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006680:	2302      	movs	r3, #2
 8006682:	e046      	b.n	8006712 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a16      	ldr	r2, [pc, #88]	@ (800671c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00e      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d0:	d009      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a12      	ldr	r2, [pc, #72]	@ (8006720 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d004      	beq.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a10      	ldr	r2, [pc, #64]	@ (8006724 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d10c      	bne.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr
 800671c:	40012c00 	.word	0x40012c00
 8006720:	40000400 	.word	0x40000400
 8006724:	40000800 	.word	0x40000800

08006728 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	bc80      	pop	{r7}
 800674a:	4770      	bx	lr

0800674c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e042      	b.n	80067e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fb fb24 	bl	8001dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2224      	movs	r2, #36	@ 0x24
 800677c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800678e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 f971 	bl	8006a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695a      	ldr	r2, [r3, #20]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08a      	sub	sp, #40	@ 0x28
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	603b      	str	r3, [r7, #0]
 80067f8:	4613      	mov	r3, r2
 80067fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b20      	cmp	r3, #32
 800680a:	d175      	bne.n	80068f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <HAL_UART_Transmit+0x2c>
 8006812:	88fb      	ldrh	r3, [r7, #6]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e06e      	b.n	80068fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2221      	movs	r2, #33	@ 0x21
 8006826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800682a:	f7fb fc03 	bl	8002034 <HAL_GetTick>
 800682e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	88fa      	ldrh	r2, [r7, #6]
 8006834:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	88fa      	ldrh	r2, [r7, #6]
 800683a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006844:	d108      	bne.n	8006858 <HAL_UART_Transmit+0x6c>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d104      	bne.n	8006858 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	e003      	b.n	8006860 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006860:	e02e      	b.n	80068c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2200      	movs	r2, #0
 800686a:	2180      	movs	r1, #128	@ 0x80
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f848 	bl	8006902 <UART_WaitOnFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e03a      	b.n	80068fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	3302      	adds	r3, #2
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	e007      	b.n	80068b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	781a      	ldrb	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	3301      	adds	r3, #1
 80068b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1cb      	bne.n	8006862 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2200      	movs	r2, #0
 80068d2:	2140      	movs	r1, #64	@ 0x40
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f814 	bl	8006902 <UART_WaitOnFlagUntilTimeout>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e006      	b.n	80068fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	e000      	b.n	80068fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80068f8:	2302      	movs	r3, #2
  }
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3720      	adds	r7, #32
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b086      	sub	sp, #24
 8006906:	af00      	add	r7, sp, #0
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	603b      	str	r3, [r7, #0]
 800690e:	4613      	mov	r3, r2
 8006910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006912:	e03b      	b.n	800698c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800691a:	d037      	beq.n	800698c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800691c:	f7fb fb8a 	bl	8002034 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	6a3a      	ldr	r2, [r7, #32]
 8006928:	429a      	cmp	r2, r3
 800692a:	d302      	bcc.n	8006932 <UART_WaitOnFlagUntilTimeout+0x30>
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e03a      	b.n	80069ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d023      	beq.n	800698c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b80      	cmp	r3, #128	@ 0x80
 8006948:	d020      	beq.n	800698c <UART_WaitOnFlagUntilTimeout+0x8a>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b40      	cmp	r3, #64	@ 0x40
 800694e:	d01d      	beq.n	800698c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b08      	cmp	r3, #8
 800695c:	d116      	bne.n	800698c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800695e:	2300      	movs	r3, #0
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 f81d 	bl	80069b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2208      	movs	r2, #8
 800697e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e00f      	b.n	80069ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4013      	ands	r3, r2
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	429a      	cmp	r2, r3
 800699a:	bf0c      	ite	eq
 800699c:	2301      	moveq	r3, #1
 800699e:	2300      	movne	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d0b4      	beq.n	8006914 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b095      	sub	sp, #84	@ 0x54
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	330c      	adds	r3, #12
 80069c2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	330c      	adds	r3, #12
 80069da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80069de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069e4:	e841 2300 	strex	r3, r2, [r1]
 80069e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e5      	bne.n	80069bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3314      	adds	r3, #20
 80069f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	f023 0301 	bic.w	r3, r3, #1
 8006a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3314      	adds	r3, #20
 8006a0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a18:	e841 2300 	strex	r3, r2, [r1]
 8006a1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e5      	bne.n	80069f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d119      	bne.n	8006a60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	330c      	adds	r3, #12
 8006a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f023 0310 	bic.w	r3, r3, #16
 8006a42:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	330c      	adds	r3, #12
 8006a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a4c:	61ba      	str	r2, [r7, #24]
 8006a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	6979      	ldr	r1, [r7, #20]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	613b      	str	r3, [r7, #16]
   return(result);
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e5      	bne.n	8006a2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2220      	movs	r2, #32
 8006a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006a6e:	bf00      	nop
 8006a70:	3754      	adds	r7, #84	@ 0x54
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr

08006a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689a      	ldr	r2, [r3, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006ab2:	f023 030c 	bic.w	r3, r3, #12
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	430b      	orrs	r3, r1
 8006abe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a2c      	ldr	r2, [pc, #176]	@ (8006b8c <UART_SetConfig+0x114>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d103      	bne.n	8006ae8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006ae0:	f7fe fe46 	bl	8005770 <HAL_RCC_GetPCLK2Freq>
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	e002      	b.n	8006aee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ae8:	f7fe fe2e 	bl	8005748 <HAL_RCC_GetPCLK1Freq>
 8006aec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009a      	lsls	r2, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b04:	4a22      	ldr	r2, [pc, #136]	@ (8006b90 <UART_SetConfig+0x118>)
 8006b06:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	0119      	lsls	r1, r3, #4
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	009a      	lsls	r2, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b24:	4b1a      	ldr	r3, [pc, #104]	@ (8006b90 <UART_SetConfig+0x118>)
 8006b26:	fba3 0302 	umull	r0, r3, r3, r2
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	2064      	movs	r0, #100	@ 0x64
 8006b2e:	fb00 f303 	mul.w	r3, r0, r3
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	3332      	adds	r3, #50	@ 0x32
 8006b38:	4a15      	ldr	r2, [pc, #84]	@ (8006b90 <UART_SetConfig+0x118>)
 8006b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b44:	4419      	add	r1, r3
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	009a      	lsls	r2, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006b90 <UART_SetConfig+0x118>)
 8006b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8006b62:	095b      	lsrs	r3, r3, #5
 8006b64:	2064      	movs	r0, #100	@ 0x64
 8006b66:	fb00 f303 	mul.w	r3, r0, r3
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	3332      	adds	r3, #50	@ 0x32
 8006b70:	4a07      	ldr	r2, [pc, #28]	@ (8006b90 <UART_SetConfig+0x118>)
 8006b72:	fba2 2303 	umull	r2, r3, r2, r3
 8006b76:	095b      	lsrs	r3, r3, #5
 8006b78:	f003 020f 	and.w	r2, r3, #15
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	440a      	add	r2, r1
 8006b82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b84:	bf00      	nop
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40013800 	.word	0x40013800
 8006b90:	51eb851f 	.word	0x51eb851f

08006b94 <__cvt>:
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b9a:	461d      	mov	r5, r3
 8006b9c:	bfbb      	ittet	lt
 8006b9e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006ba2:	461d      	movlt	r5, r3
 8006ba4:	2300      	movge	r3, #0
 8006ba6:	232d      	movlt	r3, #45	@ 0x2d
 8006ba8:	b088      	sub	sp, #32
 8006baa:	4614      	mov	r4, r2
 8006bac:	bfb8      	it	lt
 8006bae:	4614      	movlt	r4, r2
 8006bb0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006bb2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006bb4:	7013      	strb	r3, [r2, #0]
 8006bb6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006bb8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006bbc:	f023 0820 	bic.w	r8, r3, #32
 8006bc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006bc4:	d005      	beq.n	8006bd2 <__cvt+0x3e>
 8006bc6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006bca:	d100      	bne.n	8006bce <__cvt+0x3a>
 8006bcc:	3601      	adds	r6, #1
 8006bce:	2302      	movs	r3, #2
 8006bd0:	e000      	b.n	8006bd4 <__cvt+0x40>
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	aa07      	add	r2, sp, #28
 8006bd6:	9204      	str	r2, [sp, #16]
 8006bd8:	aa06      	add	r2, sp, #24
 8006bda:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006bde:	e9cd 3600 	strd	r3, r6, [sp]
 8006be2:	4622      	mov	r2, r4
 8006be4:	462b      	mov	r3, r5
 8006be6:	f001 fecf 	bl	8008988 <_dtoa_r>
 8006bea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006bee:	4607      	mov	r7, r0
 8006bf0:	d119      	bne.n	8006c26 <__cvt+0x92>
 8006bf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006bf4:	07db      	lsls	r3, r3, #31
 8006bf6:	d50e      	bpl.n	8006c16 <__cvt+0x82>
 8006bf8:	eb00 0906 	add.w	r9, r0, r6
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2300      	movs	r3, #0
 8006c00:	4620      	mov	r0, r4
 8006c02:	4629      	mov	r1, r5
 8006c04:	f7f9 fed0 	bl	80009a8 <__aeabi_dcmpeq>
 8006c08:	b108      	cbz	r0, 8006c0e <__cvt+0x7a>
 8006c0a:	f8cd 901c 	str.w	r9, [sp, #28]
 8006c0e:	2230      	movs	r2, #48	@ 0x30
 8006c10:	9b07      	ldr	r3, [sp, #28]
 8006c12:	454b      	cmp	r3, r9
 8006c14:	d31e      	bcc.n	8006c54 <__cvt+0xc0>
 8006c16:	4638      	mov	r0, r7
 8006c18:	9b07      	ldr	r3, [sp, #28]
 8006c1a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006c1c:	1bdb      	subs	r3, r3, r7
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	b008      	add	sp, #32
 8006c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c26:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c2a:	eb00 0906 	add.w	r9, r0, r6
 8006c2e:	d1e5      	bne.n	8006bfc <__cvt+0x68>
 8006c30:	7803      	ldrb	r3, [r0, #0]
 8006c32:	2b30      	cmp	r3, #48	@ 0x30
 8006c34:	d10a      	bne.n	8006c4c <__cvt+0xb8>
 8006c36:	2200      	movs	r2, #0
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	f7f9 feb3 	bl	80009a8 <__aeabi_dcmpeq>
 8006c42:	b918      	cbnz	r0, 8006c4c <__cvt+0xb8>
 8006c44:	f1c6 0601 	rsb	r6, r6, #1
 8006c48:	f8ca 6000 	str.w	r6, [sl]
 8006c4c:	f8da 3000 	ldr.w	r3, [sl]
 8006c50:	4499      	add	r9, r3
 8006c52:	e7d3      	b.n	8006bfc <__cvt+0x68>
 8006c54:	1c59      	adds	r1, r3, #1
 8006c56:	9107      	str	r1, [sp, #28]
 8006c58:	701a      	strb	r2, [r3, #0]
 8006c5a:	e7d9      	b.n	8006c10 <__cvt+0x7c>

08006c5c <__exponent>:
 8006c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c5e:	2900      	cmp	r1, #0
 8006c60:	bfb6      	itet	lt
 8006c62:	232d      	movlt	r3, #45	@ 0x2d
 8006c64:	232b      	movge	r3, #43	@ 0x2b
 8006c66:	4249      	neglt	r1, r1
 8006c68:	2909      	cmp	r1, #9
 8006c6a:	7002      	strb	r2, [r0, #0]
 8006c6c:	7043      	strb	r3, [r0, #1]
 8006c6e:	dd29      	ble.n	8006cc4 <__exponent+0x68>
 8006c70:	f10d 0307 	add.w	r3, sp, #7
 8006c74:	461d      	mov	r5, r3
 8006c76:	270a      	movs	r7, #10
 8006c78:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	fb07 1416 	mls	r4, r7, r6, r1
 8006c82:	3430      	adds	r4, #48	@ 0x30
 8006c84:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c88:	460c      	mov	r4, r1
 8006c8a:	2c63      	cmp	r4, #99	@ 0x63
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006c92:	dcf1      	bgt.n	8006c78 <__exponent+0x1c>
 8006c94:	3130      	adds	r1, #48	@ 0x30
 8006c96:	1e94      	subs	r4, r2, #2
 8006c98:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c9c:	4623      	mov	r3, r4
 8006c9e:	1c41      	adds	r1, r0, #1
 8006ca0:	42ab      	cmp	r3, r5
 8006ca2:	d30a      	bcc.n	8006cba <__exponent+0x5e>
 8006ca4:	f10d 0309 	add.w	r3, sp, #9
 8006ca8:	1a9b      	subs	r3, r3, r2
 8006caa:	42ac      	cmp	r4, r5
 8006cac:	bf88      	it	hi
 8006cae:	2300      	movhi	r3, #0
 8006cb0:	3302      	adds	r3, #2
 8006cb2:	4403      	add	r3, r0
 8006cb4:	1a18      	subs	r0, r3, r0
 8006cb6:	b003      	add	sp, #12
 8006cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cba:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006cbe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006cc2:	e7ed      	b.n	8006ca0 <__exponent+0x44>
 8006cc4:	2330      	movs	r3, #48	@ 0x30
 8006cc6:	3130      	adds	r1, #48	@ 0x30
 8006cc8:	7083      	strb	r3, [r0, #2]
 8006cca:	70c1      	strb	r1, [r0, #3]
 8006ccc:	1d03      	adds	r3, r0, #4
 8006cce:	e7f1      	b.n	8006cb4 <__exponent+0x58>

08006cd0 <_printf_float>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	b091      	sub	sp, #68	@ 0x44
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006cdc:	4616      	mov	r6, r2
 8006cde:	461f      	mov	r7, r3
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	f001 fd6f 	bl	80087c4 <_localeconv_r>
 8006ce6:	6803      	ldr	r3, [r0, #0]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	9308      	str	r3, [sp, #32]
 8006cec:	f7f9 fa30 	bl	8000150 <strlen>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	930e      	str	r3, [sp, #56]	@ 0x38
 8006cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8006cf8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006cfa:	3307      	adds	r3, #7
 8006cfc:	f023 0307 	bic.w	r3, r3, #7
 8006d00:	f103 0208 	add.w	r2, r3, #8
 8006d04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d08:	f8d4 b000 	ldr.w	fp, [r4]
 8006d0c:	f8c8 2000 	str.w	r2, [r8]
 8006d10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d14:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006d18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d1a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006d1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006d2a:	4b9c      	ldr	r3, [pc, #624]	@ (8006f9c <_printf_float+0x2cc>)
 8006d2c:	f7f9 fe6e 	bl	8000a0c <__aeabi_dcmpun>
 8006d30:	bb70      	cbnz	r0, 8006d90 <_printf_float+0xc0>
 8006d32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d3a:	4b98      	ldr	r3, [pc, #608]	@ (8006f9c <_printf_float+0x2cc>)
 8006d3c:	f7f9 fe48 	bl	80009d0 <__aeabi_dcmple>
 8006d40:	bb30      	cbnz	r0, 8006d90 <_printf_float+0xc0>
 8006d42:	2200      	movs	r2, #0
 8006d44:	2300      	movs	r3, #0
 8006d46:	4640      	mov	r0, r8
 8006d48:	4649      	mov	r1, r9
 8006d4a:	f7f9 fe37 	bl	80009bc <__aeabi_dcmplt>
 8006d4e:	b110      	cbz	r0, 8006d56 <_printf_float+0x86>
 8006d50:	232d      	movs	r3, #45	@ 0x2d
 8006d52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d56:	4a92      	ldr	r2, [pc, #584]	@ (8006fa0 <_printf_float+0x2d0>)
 8006d58:	4b92      	ldr	r3, [pc, #584]	@ (8006fa4 <_printf_float+0x2d4>)
 8006d5a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d5e:	bf94      	ite	ls
 8006d60:	4690      	movls	r8, r2
 8006d62:	4698      	movhi	r8, r3
 8006d64:	2303      	movs	r3, #3
 8006d66:	f04f 0900 	mov.w	r9, #0
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	f02b 0304 	bic.w	r3, fp, #4
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	4633      	mov	r3, r6
 8006d74:	4621      	mov	r1, r4
 8006d76:	4628      	mov	r0, r5
 8006d78:	9700      	str	r7, [sp, #0]
 8006d7a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006d7c:	f000 f9d4 	bl	8007128 <_printf_common>
 8006d80:	3001      	adds	r0, #1
 8006d82:	f040 8090 	bne.w	8006ea6 <_printf_float+0x1d6>
 8006d86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d8a:	b011      	add	sp, #68	@ 0x44
 8006d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d90:	4642      	mov	r2, r8
 8006d92:	464b      	mov	r3, r9
 8006d94:	4640      	mov	r0, r8
 8006d96:	4649      	mov	r1, r9
 8006d98:	f7f9 fe38 	bl	8000a0c <__aeabi_dcmpun>
 8006d9c:	b148      	cbz	r0, 8006db2 <_printf_float+0xe2>
 8006d9e:	464b      	mov	r3, r9
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	bfb8      	it	lt
 8006da4:	232d      	movlt	r3, #45	@ 0x2d
 8006da6:	4a80      	ldr	r2, [pc, #512]	@ (8006fa8 <_printf_float+0x2d8>)
 8006da8:	bfb8      	it	lt
 8006daa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006dae:	4b7f      	ldr	r3, [pc, #508]	@ (8006fac <_printf_float+0x2dc>)
 8006db0:	e7d3      	b.n	8006d5a <_printf_float+0x8a>
 8006db2:	6863      	ldr	r3, [r4, #4]
 8006db4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	d13f      	bne.n	8006e3c <_printf_float+0x16c>
 8006dbc:	2306      	movs	r3, #6
 8006dbe:	6063      	str	r3, [r4, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006dc6:	6023      	str	r3, [r4, #0]
 8006dc8:	9206      	str	r2, [sp, #24]
 8006dca:	aa0e      	add	r2, sp, #56	@ 0x38
 8006dcc:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006dd0:	aa0d      	add	r2, sp, #52	@ 0x34
 8006dd2:	9203      	str	r2, [sp, #12]
 8006dd4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006dd8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ddc:	6863      	ldr	r3, [r4, #4]
 8006dde:	4642      	mov	r2, r8
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	4628      	mov	r0, r5
 8006de4:	464b      	mov	r3, r9
 8006de6:	910a      	str	r1, [sp, #40]	@ 0x28
 8006de8:	f7ff fed4 	bl	8006b94 <__cvt>
 8006dec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006dee:	4680      	mov	r8, r0
 8006df0:	2947      	cmp	r1, #71	@ 0x47
 8006df2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006df4:	d128      	bne.n	8006e48 <_printf_float+0x178>
 8006df6:	1cc8      	adds	r0, r1, #3
 8006df8:	db02      	blt.n	8006e00 <_printf_float+0x130>
 8006dfa:	6863      	ldr	r3, [r4, #4]
 8006dfc:	4299      	cmp	r1, r3
 8006dfe:	dd40      	ble.n	8006e82 <_printf_float+0x1b2>
 8006e00:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e04:	fa5f fa8a 	uxtb.w	sl, sl
 8006e08:	4652      	mov	r2, sl
 8006e0a:	3901      	subs	r1, #1
 8006e0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e10:	910d      	str	r1, [sp, #52]	@ 0x34
 8006e12:	f7ff ff23 	bl	8006c5c <__exponent>
 8006e16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e18:	4681      	mov	r9, r0
 8006e1a:	1813      	adds	r3, r2, r0
 8006e1c:	2a01      	cmp	r2, #1
 8006e1e:	6123      	str	r3, [r4, #16]
 8006e20:	dc02      	bgt.n	8006e28 <_printf_float+0x158>
 8006e22:	6822      	ldr	r2, [r4, #0]
 8006e24:	07d2      	lsls	r2, r2, #31
 8006e26:	d501      	bpl.n	8006e2c <_printf_float+0x15c>
 8006e28:	3301      	adds	r3, #1
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d09e      	beq.n	8006d72 <_printf_float+0xa2>
 8006e34:	232d      	movs	r3, #45	@ 0x2d
 8006e36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e3a:	e79a      	b.n	8006d72 <_printf_float+0xa2>
 8006e3c:	2947      	cmp	r1, #71	@ 0x47
 8006e3e:	d1bf      	bne.n	8006dc0 <_printf_float+0xf0>
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1bd      	bne.n	8006dc0 <_printf_float+0xf0>
 8006e44:	2301      	movs	r3, #1
 8006e46:	e7ba      	b.n	8006dbe <_printf_float+0xee>
 8006e48:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e4c:	d9dc      	bls.n	8006e08 <_printf_float+0x138>
 8006e4e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006e52:	d118      	bne.n	8006e86 <_printf_float+0x1b6>
 8006e54:	2900      	cmp	r1, #0
 8006e56:	6863      	ldr	r3, [r4, #4]
 8006e58:	dd0b      	ble.n	8006e72 <_printf_float+0x1a2>
 8006e5a:	6121      	str	r1, [r4, #16]
 8006e5c:	b913      	cbnz	r3, 8006e64 <_printf_float+0x194>
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	07d0      	lsls	r0, r2, #31
 8006e62:	d502      	bpl.n	8006e6a <_printf_float+0x19a>
 8006e64:	3301      	adds	r3, #1
 8006e66:	440b      	add	r3, r1
 8006e68:	6123      	str	r3, [r4, #16]
 8006e6a:	f04f 0900 	mov.w	r9, #0
 8006e6e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006e70:	e7dc      	b.n	8006e2c <_printf_float+0x15c>
 8006e72:	b913      	cbnz	r3, 8006e7a <_printf_float+0x1aa>
 8006e74:	6822      	ldr	r2, [r4, #0]
 8006e76:	07d2      	lsls	r2, r2, #31
 8006e78:	d501      	bpl.n	8006e7e <_printf_float+0x1ae>
 8006e7a:	3302      	adds	r3, #2
 8006e7c:	e7f4      	b.n	8006e68 <_printf_float+0x198>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e7f2      	b.n	8006e68 <_printf_float+0x198>
 8006e82:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e88:	4299      	cmp	r1, r3
 8006e8a:	db05      	blt.n	8006e98 <_printf_float+0x1c8>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	6121      	str	r1, [r4, #16]
 8006e90:	07d8      	lsls	r0, r3, #31
 8006e92:	d5ea      	bpl.n	8006e6a <_printf_float+0x19a>
 8006e94:	1c4b      	adds	r3, r1, #1
 8006e96:	e7e7      	b.n	8006e68 <_printf_float+0x198>
 8006e98:	2900      	cmp	r1, #0
 8006e9a:	bfcc      	ite	gt
 8006e9c:	2201      	movgt	r2, #1
 8006e9e:	f1c1 0202 	rsble	r2, r1, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	e7e0      	b.n	8006e68 <_printf_float+0x198>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	055a      	lsls	r2, r3, #21
 8006eaa:	d407      	bmi.n	8006ebc <_printf_float+0x1ec>
 8006eac:	6923      	ldr	r3, [r4, #16]
 8006eae:	4642      	mov	r2, r8
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	47b8      	blx	r7
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	d12b      	bne.n	8006f12 <_printf_float+0x242>
 8006eba:	e764      	b.n	8006d86 <_printf_float+0xb6>
 8006ebc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ec0:	f240 80dc 	bls.w	800707c <_printf_float+0x3ac>
 8006ec4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f7f9 fd6c 	bl	80009a8 <__aeabi_dcmpeq>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d033      	beq.n	8006f3c <_printf_float+0x26c>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	4a35      	ldr	r2, [pc, #212]	@ (8006fb0 <_printf_float+0x2e0>)
 8006edc:	47b8      	blx	r7
 8006ede:	3001      	adds	r0, #1
 8006ee0:	f43f af51 	beq.w	8006d86 <_printf_float+0xb6>
 8006ee4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006ee8:	4543      	cmp	r3, r8
 8006eea:	db02      	blt.n	8006ef2 <_printf_float+0x222>
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	07d8      	lsls	r0, r3, #31
 8006ef0:	d50f      	bpl.n	8006f12 <_printf_float+0x242>
 8006ef2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	4628      	mov	r0, r5
 8006efa:	47b8      	blx	r7
 8006efc:	3001      	adds	r0, #1
 8006efe:	f43f af42 	beq.w	8006d86 <_printf_float+0xb6>
 8006f02:	f04f 0900 	mov.w	r9, #0
 8006f06:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006f0a:	f104 0a1a 	add.w	sl, r4, #26
 8006f0e:	45c8      	cmp	r8, r9
 8006f10:	dc09      	bgt.n	8006f26 <_printf_float+0x256>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	079b      	lsls	r3, r3, #30
 8006f16:	f100 8102 	bmi.w	800711e <_printf_float+0x44e>
 8006f1a:	68e0      	ldr	r0, [r4, #12]
 8006f1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f1e:	4298      	cmp	r0, r3
 8006f20:	bfb8      	it	lt
 8006f22:	4618      	movlt	r0, r3
 8006f24:	e731      	b.n	8006d8a <_printf_float+0xba>
 8006f26:	2301      	movs	r3, #1
 8006f28:	4652      	mov	r2, sl
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	47b8      	blx	r7
 8006f30:	3001      	adds	r0, #1
 8006f32:	f43f af28 	beq.w	8006d86 <_printf_float+0xb6>
 8006f36:	f109 0901 	add.w	r9, r9, #1
 8006f3a:	e7e8      	b.n	8006f0e <_printf_float+0x23e>
 8006f3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	dc38      	bgt.n	8006fb4 <_printf_float+0x2e4>
 8006f42:	2301      	movs	r3, #1
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	4a19      	ldr	r2, [pc, #100]	@ (8006fb0 <_printf_float+0x2e0>)
 8006f4a:	47b8      	blx	r7
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	f43f af1a 	beq.w	8006d86 <_printf_float+0xb6>
 8006f52:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006f56:	ea59 0303 	orrs.w	r3, r9, r3
 8006f5a:	d102      	bne.n	8006f62 <_printf_float+0x292>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	07d9      	lsls	r1, r3, #31
 8006f60:	d5d7      	bpl.n	8006f12 <_printf_float+0x242>
 8006f62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f66:	4631      	mov	r1, r6
 8006f68:	4628      	mov	r0, r5
 8006f6a:	47b8      	blx	r7
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f43f af0a 	beq.w	8006d86 <_printf_float+0xb6>
 8006f72:	f04f 0a00 	mov.w	sl, #0
 8006f76:	f104 0b1a 	add.w	fp, r4, #26
 8006f7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f7c:	425b      	negs	r3, r3
 8006f7e:	4553      	cmp	r3, sl
 8006f80:	dc01      	bgt.n	8006f86 <_printf_float+0x2b6>
 8006f82:	464b      	mov	r3, r9
 8006f84:	e793      	b.n	8006eae <_printf_float+0x1de>
 8006f86:	2301      	movs	r3, #1
 8006f88:	465a      	mov	r2, fp
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	f43f aef8 	beq.w	8006d86 <_printf_float+0xb6>
 8006f96:	f10a 0a01 	add.w	sl, sl, #1
 8006f9a:	e7ee      	b.n	8006f7a <_printf_float+0x2aa>
 8006f9c:	7fefffff 	.word	0x7fefffff
 8006fa0:	0800b3fa 	.word	0x0800b3fa
 8006fa4:	0800b3fe 	.word	0x0800b3fe
 8006fa8:	0800b402 	.word	0x0800b402
 8006fac:	0800b406 	.word	0x0800b406
 8006fb0:	0800b40a 	.word	0x0800b40a
 8006fb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fb6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006fba:	4553      	cmp	r3, sl
 8006fbc:	bfa8      	it	ge
 8006fbe:	4653      	movge	r3, sl
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	4699      	mov	r9, r3
 8006fc4:	dc36      	bgt.n	8007034 <_printf_float+0x364>
 8006fc6:	f04f 0b00 	mov.w	fp, #0
 8006fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fce:	f104 021a 	add.w	r2, r4, #26
 8006fd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fd6:	eba3 0309 	sub.w	r3, r3, r9
 8006fda:	455b      	cmp	r3, fp
 8006fdc:	dc31      	bgt.n	8007042 <_printf_float+0x372>
 8006fde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fe0:	459a      	cmp	sl, r3
 8006fe2:	dc3a      	bgt.n	800705a <_printf_float+0x38a>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	07da      	lsls	r2, r3, #31
 8006fe8:	d437      	bmi.n	800705a <_printf_float+0x38a>
 8006fea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fec:	ebaa 0903 	sub.w	r9, sl, r3
 8006ff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ff2:	ebaa 0303 	sub.w	r3, sl, r3
 8006ff6:	4599      	cmp	r9, r3
 8006ff8:	bfa8      	it	ge
 8006ffa:	4699      	movge	r9, r3
 8006ffc:	f1b9 0f00 	cmp.w	r9, #0
 8007000:	dc33      	bgt.n	800706a <_printf_float+0x39a>
 8007002:	f04f 0800 	mov.w	r8, #0
 8007006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800700a:	f104 0b1a 	add.w	fp, r4, #26
 800700e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007010:	ebaa 0303 	sub.w	r3, sl, r3
 8007014:	eba3 0309 	sub.w	r3, r3, r9
 8007018:	4543      	cmp	r3, r8
 800701a:	f77f af7a 	ble.w	8006f12 <_printf_float+0x242>
 800701e:	2301      	movs	r3, #1
 8007020:	465a      	mov	r2, fp
 8007022:	4631      	mov	r1, r6
 8007024:	4628      	mov	r0, r5
 8007026:	47b8      	blx	r7
 8007028:	3001      	adds	r0, #1
 800702a:	f43f aeac 	beq.w	8006d86 <_printf_float+0xb6>
 800702e:	f108 0801 	add.w	r8, r8, #1
 8007032:	e7ec      	b.n	800700e <_printf_float+0x33e>
 8007034:	4642      	mov	r2, r8
 8007036:	4631      	mov	r1, r6
 8007038:	4628      	mov	r0, r5
 800703a:	47b8      	blx	r7
 800703c:	3001      	adds	r0, #1
 800703e:	d1c2      	bne.n	8006fc6 <_printf_float+0x2f6>
 8007040:	e6a1      	b.n	8006d86 <_printf_float+0xb6>
 8007042:	2301      	movs	r3, #1
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	920a      	str	r2, [sp, #40]	@ 0x28
 800704a:	47b8      	blx	r7
 800704c:	3001      	adds	r0, #1
 800704e:	f43f ae9a 	beq.w	8006d86 <_printf_float+0xb6>
 8007052:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007054:	f10b 0b01 	add.w	fp, fp, #1
 8007058:	e7bb      	b.n	8006fd2 <_printf_float+0x302>
 800705a:	4631      	mov	r1, r6
 800705c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007060:	4628      	mov	r0, r5
 8007062:	47b8      	blx	r7
 8007064:	3001      	adds	r0, #1
 8007066:	d1c0      	bne.n	8006fea <_printf_float+0x31a>
 8007068:	e68d      	b.n	8006d86 <_printf_float+0xb6>
 800706a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800706c:	464b      	mov	r3, r9
 800706e:	4631      	mov	r1, r6
 8007070:	4628      	mov	r0, r5
 8007072:	4442      	add	r2, r8
 8007074:	47b8      	blx	r7
 8007076:	3001      	adds	r0, #1
 8007078:	d1c3      	bne.n	8007002 <_printf_float+0x332>
 800707a:	e684      	b.n	8006d86 <_printf_float+0xb6>
 800707c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007080:	f1ba 0f01 	cmp.w	sl, #1
 8007084:	dc01      	bgt.n	800708a <_printf_float+0x3ba>
 8007086:	07db      	lsls	r3, r3, #31
 8007088:	d536      	bpl.n	80070f8 <_printf_float+0x428>
 800708a:	2301      	movs	r3, #1
 800708c:	4642      	mov	r2, r8
 800708e:	4631      	mov	r1, r6
 8007090:	4628      	mov	r0, r5
 8007092:	47b8      	blx	r7
 8007094:	3001      	adds	r0, #1
 8007096:	f43f ae76 	beq.w	8006d86 <_printf_float+0xb6>
 800709a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b8      	blx	r7
 80070a4:	3001      	adds	r0, #1
 80070a6:	f43f ae6e 	beq.w	8006d86 <_printf_float+0xb6>
 80070aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070ae:	2200      	movs	r2, #0
 80070b0:	2300      	movs	r3, #0
 80070b2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80070b6:	f7f9 fc77 	bl	80009a8 <__aeabi_dcmpeq>
 80070ba:	b9c0      	cbnz	r0, 80070ee <_printf_float+0x41e>
 80070bc:	4653      	mov	r3, sl
 80070be:	f108 0201 	add.w	r2, r8, #1
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	d10c      	bne.n	80070e6 <_printf_float+0x416>
 80070cc:	e65b      	b.n	8006d86 <_printf_float+0xb6>
 80070ce:	2301      	movs	r3, #1
 80070d0:	465a      	mov	r2, fp
 80070d2:	4631      	mov	r1, r6
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b8      	blx	r7
 80070d8:	3001      	adds	r0, #1
 80070da:	f43f ae54 	beq.w	8006d86 <_printf_float+0xb6>
 80070de:	f108 0801 	add.w	r8, r8, #1
 80070e2:	45d0      	cmp	r8, sl
 80070e4:	dbf3      	blt.n	80070ce <_printf_float+0x3fe>
 80070e6:	464b      	mov	r3, r9
 80070e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80070ec:	e6e0      	b.n	8006eb0 <_printf_float+0x1e0>
 80070ee:	f04f 0800 	mov.w	r8, #0
 80070f2:	f104 0b1a 	add.w	fp, r4, #26
 80070f6:	e7f4      	b.n	80070e2 <_printf_float+0x412>
 80070f8:	2301      	movs	r3, #1
 80070fa:	4642      	mov	r2, r8
 80070fc:	e7e1      	b.n	80070c2 <_printf_float+0x3f2>
 80070fe:	2301      	movs	r3, #1
 8007100:	464a      	mov	r2, r9
 8007102:	4631      	mov	r1, r6
 8007104:	4628      	mov	r0, r5
 8007106:	47b8      	blx	r7
 8007108:	3001      	adds	r0, #1
 800710a:	f43f ae3c 	beq.w	8006d86 <_printf_float+0xb6>
 800710e:	f108 0801 	add.w	r8, r8, #1
 8007112:	68e3      	ldr	r3, [r4, #12]
 8007114:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007116:	1a5b      	subs	r3, r3, r1
 8007118:	4543      	cmp	r3, r8
 800711a:	dcf0      	bgt.n	80070fe <_printf_float+0x42e>
 800711c:	e6fd      	b.n	8006f1a <_printf_float+0x24a>
 800711e:	f04f 0800 	mov.w	r8, #0
 8007122:	f104 0919 	add.w	r9, r4, #25
 8007126:	e7f4      	b.n	8007112 <_printf_float+0x442>

08007128 <_printf_common>:
 8007128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800712c:	4616      	mov	r6, r2
 800712e:	4698      	mov	r8, r3
 8007130:	688a      	ldr	r2, [r1, #8]
 8007132:	690b      	ldr	r3, [r1, #16]
 8007134:	4607      	mov	r7, r0
 8007136:	4293      	cmp	r3, r2
 8007138:	bfb8      	it	lt
 800713a:	4613      	movlt	r3, r2
 800713c:	6033      	str	r3, [r6, #0]
 800713e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007142:	460c      	mov	r4, r1
 8007144:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007148:	b10a      	cbz	r2, 800714e <_printf_common+0x26>
 800714a:	3301      	adds	r3, #1
 800714c:	6033      	str	r3, [r6, #0]
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	0699      	lsls	r1, r3, #26
 8007152:	bf42      	ittt	mi
 8007154:	6833      	ldrmi	r3, [r6, #0]
 8007156:	3302      	addmi	r3, #2
 8007158:	6033      	strmi	r3, [r6, #0]
 800715a:	6825      	ldr	r5, [r4, #0]
 800715c:	f015 0506 	ands.w	r5, r5, #6
 8007160:	d106      	bne.n	8007170 <_printf_common+0x48>
 8007162:	f104 0a19 	add.w	sl, r4, #25
 8007166:	68e3      	ldr	r3, [r4, #12]
 8007168:	6832      	ldr	r2, [r6, #0]
 800716a:	1a9b      	subs	r3, r3, r2
 800716c:	42ab      	cmp	r3, r5
 800716e:	dc2b      	bgt.n	80071c8 <_printf_common+0xa0>
 8007170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007174:	6822      	ldr	r2, [r4, #0]
 8007176:	3b00      	subs	r3, #0
 8007178:	bf18      	it	ne
 800717a:	2301      	movne	r3, #1
 800717c:	0692      	lsls	r2, r2, #26
 800717e:	d430      	bmi.n	80071e2 <_printf_common+0xba>
 8007180:	4641      	mov	r1, r8
 8007182:	4638      	mov	r0, r7
 8007184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007188:	47c8      	blx	r9
 800718a:	3001      	adds	r0, #1
 800718c:	d023      	beq.n	80071d6 <_printf_common+0xae>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	6922      	ldr	r2, [r4, #16]
 8007192:	f003 0306 	and.w	r3, r3, #6
 8007196:	2b04      	cmp	r3, #4
 8007198:	bf14      	ite	ne
 800719a:	2500      	movne	r5, #0
 800719c:	6833      	ldreq	r3, [r6, #0]
 800719e:	f04f 0600 	mov.w	r6, #0
 80071a2:	bf08      	it	eq
 80071a4:	68e5      	ldreq	r5, [r4, #12]
 80071a6:	f104 041a 	add.w	r4, r4, #26
 80071aa:	bf08      	it	eq
 80071ac:	1aed      	subeq	r5, r5, r3
 80071ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80071b2:	bf08      	it	eq
 80071b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071b8:	4293      	cmp	r3, r2
 80071ba:	bfc4      	itt	gt
 80071bc:	1a9b      	subgt	r3, r3, r2
 80071be:	18ed      	addgt	r5, r5, r3
 80071c0:	42b5      	cmp	r5, r6
 80071c2:	d11a      	bne.n	80071fa <_printf_common+0xd2>
 80071c4:	2000      	movs	r0, #0
 80071c6:	e008      	b.n	80071da <_printf_common+0xb2>
 80071c8:	2301      	movs	r3, #1
 80071ca:	4652      	mov	r2, sl
 80071cc:	4641      	mov	r1, r8
 80071ce:	4638      	mov	r0, r7
 80071d0:	47c8      	blx	r9
 80071d2:	3001      	adds	r0, #1
 80071d4:	d103      	bne.n	80071de <_printf_common+0xb6>
 80071d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071de:	3501      	adds	r5, #1
 80071e0:	e7c1      	b.n	8007166 <_printf_common+0x3e>
 80071e2:	2030      	movs	r0, #48	@ 0x30
 80071e4:	18e1      	adds	r1, r4, r3
 80071e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80071f0:	4422      	add	r2, r4
 80071f2:	3302      	adds	r3, #2
 80071f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80071f8:	e7c2      	b.n	8007180 <_printf_common+0x58>
 80071fa:	2301      	movs	r3, #1
 80071fc:	4622      	mov	r2, r4
 80071fe:	4641      	mov	r1, r8
 8007200:	4638      	mov	r0, r7
 8007202:	47c8      	blx	r9
 8007204:	3001      	adds	r0, #1
 8007206:	d0e6      	beq.n	80071d6 <_printf_common+0xae>
 8007208:	3601      	adds	r6, #1
 800720a:	e7d9      	b.n	80071c0 <_printf_common+0x98>

0800720c <_printf_i>:
 800720c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007210:	7e0f      	ldrb	r7, [r1, #24]
 8007212:	4691      	mov	r9, r2
 8007214:	2f78      	cmp	r7, #120	@ 0x78
 8007216:	4680      	mov	r8, r0
 8007218:	460c      	mov	r4, r1
 800721a:	469a      	mov	sl, r3
 800721c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800721e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007222:	d807      	bhi.n	8007234 <_printf_i+0x28>
 8007224:	2f62      	cmp	r7, #98	@ 0x62
 8007226:	d80a      	bhi.n	800723e <_printf_i+0x32>
 8007228:	2f00      	cmp	r7, #0
 800722a:	f000 80d3 	beq.w	80073d4 <_printf_i+0x1c8>
 800722e:	2f58      	cmp	r7, #88	@ 0x58
 8007230:	f000 80ba 	beq.w	80073a8 <_printf_i+0x19c>
 8007234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007238:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800723c:	e03a      	b.n	80072b4 <_printf_i+0xa8>
 800723e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007242:	2b15      	cmp	r3, #21
 8007244:	d8f6      	bhi.n	8007234 <_printf_i+0x28>
 8007246:	a101      	add	r1, pc, #4	@ (adr r1, 800724c <_printf_i+0x40>)
 8007248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800724c:	080072a5 	.word	0x080072a5
 8007250:	080072b9 	.word	0x080072b9
 8007254:	08007235 	.word	0x08007235
 8007258:	08007235 	.word	0x08007235
 800725c:	08007235 	.word	0x08007235
 8007260:	08007235 	.word	0x08007235
 8007264:	080072b9 	.word	0x080072b9
 8007268:	08007235 	.word	0x08007235
 800726c:	08007235 	.word	0x08007235
 8007270:	08007235 	.word	0x08007235
 8007274:	08007235 	.word	0x08007235
 8007278:	080073bb 	.word	0x080073bb
 800727c:	080072e3 	.word	0x080072e3
 8007280:	08007375 	.word	0x08007375
 8007284:	08007235 	.word	0x08007235
 8007288:	08007235 	.word	0x08007235
 800728c:	080073dd 	.word	0x080073dd
 8007290:	08007235 	.word	0x08007235
 8007294:	080072e3 	.word	0x080072e3
 8007298:	08007235 	.word	0x08007235
 800729c:	08007235 	.word	0x08007235
 80072a0:	0800737d 	.word	0x0800737d
 80072a4:	6833      	ldr	r3, [r6, #0]
 80072a6:	1d1a      	adds	r2, r3, #4
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6032      	str	r2, [r6, #0]
 80072ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072b4:	2301      	movs	r3, #1
 80072b6:	e09e      	b.n	80073f6 <_printf_i+0x1ea>
 80072b8:	6833      	ldr	r3, [r6, #0]
 80072ba:	6820      	ldr	r0, [r4, #0]
 80072bc:	1d19      	adds	r1, r3, #4
 80072be:	6031      	str	r1, [r6, #0]
 80072c0:	0606      	lsls	r6, r0, #24
 80072c2:	d501      	bpl.n	80072c8 <_printf_i+0xbc>
 80072c4:	681d      	ldr	r5, [r3, #0]
 80072c6:	e003      	b.n	80072d0 <_printf_i+0xc4>
 80072c8:	0645      	lsls	r5, r0, #25
 80072ca:	d5fb      	bpl.n	80072c4 <_printf_i+0xb8>
 80072cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80072d0:	2d00      	cmp	r5, #0
 80072d2:	da03      	bge.n	80072dc <_printf_i+0xd0>
 80072d4:	232d      	movs	r3, #45	@ 0x2d
 80072d6:	426d      	negs	r5, r5
 80072d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072dc:	230a      	movs	r3, #10
 80072de:	4859      	ldr	r0, [pc, #356]	@ (8007444 <_printf_i+0x238>)
 80072e0:	e011      	b.n	8007306 <_printf_i+0xfa>
 80072e2:	6821      	ldr	r1, [r4, #0]
 80072e4:	6833      	ldr	r3, [r6, #0]
 80072e6:	0608      	lsls	r0, r1, #24
 80072e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80072ec:	d402      	bmi.n	80072f4 <_printf_i+0xe8>
 80072ee:	0649      	lsls	r1, r1, #25
 80072f0:	bf48      	it	mi
 80072f2:	b2ad      	uxthmi	r5, r5
 80072f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80072f6:	6033      	str	r3, [r6, #0]
 80072f8:	bf14      	ite	ne
 80072fa:	230a      	movne	r3, #10
 80072fc:	2308      	moveq	r3, #8
 80072fe:	4851      	ldr	r0, [pc, #324]	@ (8007444 <_printf_i+0x238>)
 8007300:	2100      	movs	r1, #0
 8007302:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007306:	6866      	ldr	r6, [r4, #4]
 8007308:	2e00      	cmp	r6, #0
 800730a:	bfa8      	it	ge
 800730c:	6821      	ldrge	r1, [r4, #0]
 800730e:	60a6      	str	r6, [r4, #8]
 8007310:	bfa4      	itt	ge
 8007312:	f021 0104 	bicge.w	r1, r1, #4
 8007316:	6021      	strge	r1, [r4, #0]
 8007318:	b90d      	cbnz	r5, 800731e <_printf_i+0x112>
 800731a:	2e00      	cmp	r6, #0
 800731c:	d04b      	beq.n	80073b6 <_printf_i+0x1aa>
 800731e:	4616      	mov	r6, r2
 8007320:	fbb5 f1f3 	udiv	r1, r5, r3
 8007324:	fb03 5711 	mls	r7, r3, r1, r5
 8007328:	5dc7      	ldrb	r7, [r0, r7]
 800732a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800732e:	462f      	mov	r7, r5
 8007330:	42bb      	cmp	r3, r7
 8007332:	460d      	mov	r5, r1
 8007334:	d9f4      	bls.n	8007320 <_printf_i+0x114>
 8007336:	2b08      	cmp	r3, #8
 8007338:	d10b      	bne.n	8007352 <_printf_i+0x146>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	07df      	lsls	r7, r3, #31
 800733e:	d508      	bpl.n	8007352 <_printf_i+0x146>
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	6861      	ldr	r1, [r4, #4]
 8007344:	4299      	cmp	r1, r3
 8007346:	bfde      	ittt	le
 8007348:	2330      	movle	r3, #48	@ 0x30
 800734a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800734e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007352:	1b92      	subs	r2, r2, r6
 8007354:	6122      	str	r2, [r4, #16]
 8007356:	464b      	mov	r3, r9
 8007358:	4621      	mov	r1, r4
 800735a:	4640      	mov	r0, r8
 800735c:	f8cd a000 	str.w	sl, [sp]
 8007360:	aa03      	add	r2, sp, #12
 8007362:	f7ff fee1 	bl	8007128 <_printf_common>
 8007366:	3001      	adds	r0, #1
 8007368:	d14a      	bne.n	8007400 <_printf_i+0x1f4>
 800736a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800736e:	b004      	add	sp, #16
 8007370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	f043 0320 	orr.w	r3, r3, #32
 800737a:	6023      	str	r3, [r4, #0]
 800737c:	2778      	movs	r7, #120	@ 0x78
 800737e:	4832      	ldr	r0, [pc, #200]	@ (8007448 <_printf_i+0x23c>)
 8007380:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	6831      	ldr	r1, [r6, #0]
 8007388:	061f      	lsls	r7, r3, #24
 800738a:	f851 5b04 	ldr.w	r5, [r1], #4
 800738e:	d402      	bmi.n	8007396 <_printf_i+0x18a>
 8007390:	065f      	lsls	r7, r3, #25
 8007392:	bf48      	it	mi
 8007394:	b2ad      	uxthmi	r5, r5
 8007396:	6031      	str	r1, [r6, #0]
 8007398:	07d9      	lsls	r1, r3, #31
 800739a:	bf44      	itt	mi
 800739c:	f043 0320 	orrmi.w	r3, r3, #32
 80073a0:	6023      	strmi	r3, [r4, #0]
 80073a2:	b11d      	cbz	r5, 80073ac <_printf_i+0x1a0>
 80073a4:	2310      	movs	r3, #16
 80073a6:	e7ab      	b.n	8007300 <_printf_i+0xf4>
 80073a8:	4826      	ldr	r0, [pc, #152]	@ (8007444 <_printf_i+0x238>)
 80073aa:	e7e9      	b.n	8007380 <_printf_i+0x174>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	f023 0320 	bic.w	r3, r3, #32
 80073b2:	6023      	str	r3, [r4, #0]
 80073b4:	e7f6      	b.n	80073a4 <_printf_i+0x198>
 80073b6:	4616      	mov	r6, r2
 80073b8:	e7bd      	b.n	8007336 <_printf_i+0x12a>
 80073ba:	6833      	ldr	r3, [r6, #0]
 80073bc:	6825      	ldr	r5, [r4, #0]
 80073be:	1d18      	adds	r0, r3, #4
 80073c0:	6961      	ldr	r1, [r4, #20]
 80073c2:	6030      	str	r0, [r6, #0]
 80073c4:	062e      	lsls	r6, r5, #24
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	d501      	bpl.n	80073ce <_printf_i+0x1c2>
 80073ca:	6019      	str	r1, [r3, #0]
 80073cc:	e002      	b.n	80073d4 <_printf_i+0x1c8>
 80073ce:	0668      	lsls	r0, r5, #25
 80073d0:	d5fb      	bpl.n	80073ca <_printf_i+0x1be>
 80073d2:	8019      	strh	r1, [r3, #0]
 80073d4:	2300      	movs	r3, #0
 80073d6:	4616      	mov	r6, r2
 80073d8:	6123      	str	r3, [r4, #16]
 80073da:	e7bc      	b.n	8007356 <_printf_i+0x14a>
 80073dc:	6833      	ldr	r3, [r6, #0]
 80073de:	2100      	movs	r1, #0
 80073e0:	1d1a      	adds	r2, r3, #4
 80073e2:	6032      	str	r2, [r6, #0]
 80073e4:	681e      	ldr	r6, [r3, #0]
 80073e6:	6862      	ldr	r2, [r4, #4]
 80073e8:	4630      	mov	r0, r6
 80073ea:	f001 fa1c 	bl	8008826 <memchr>
 80073ee:	b108      	cbz	r0, 80073f4 <_printf_i+0x1e8>
 80073f0:	1b80      	subs	r0, r0, r6
 80073f2:	6060      	str	r0, [r4, #4]
 80073f4:	6863      	ldr	r3, [r4, #4]
 80073f6:	6123      	str	r3, [r4, #16]
 80073f8:	2300      	movs	r3, #0
 80073fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073fe:	e7aa      	b.n	8007356 <_printf_i+0x14a>
 8007400:	4632      	mov	r2, r6
 8007402:	4649      	mov	r1, r9
 8007404:	4640      	mov	r0, r8
 8007406:	6923      	ldr	r3, [r4, #16]
 8007408:	47d0      	blx	sl
 800740a:	3001      	adds	r0, #1
 800740c:	d0ad      	beq.n	800736a <_printf_i+0x15e>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	079b      	lsls	r3, r3, #30
 8007412:	d413      	bmi.n	800743c <_printf_i+0x230>
 8007414:	68e0      	ldr	r0, [r4, #12]
 8007416:	9b03      	ldr	r3, [sp, #12]
 8007418:	4298      	cmp	r0, r3
 800741a:	bfb8      	it	lt
 800741c:	4618      	movlt	r0, r3
 800741e:	e7a6      	b.n	800736e <_printf_i+0x162>
 8007420:	2301      	movs	r3, #1
 8007422:	4632      	mov	r2, r6
 8007424:	4649      	mov	r1, r9
 8007426:	4640      	mov	r0, r8
 8007428:	47d0      	blx	sl
 800742a:	3001      	adds	r0, #1
 800742c:	d09d      	beq.n	800736a <_printf_i+0x15e>
 800742e:	3501      	adds	r5, #1
 8007430:	68e3      	ldr	r3, [r4, #12]
 8007432:	9903      	ldr	r1, [sp, #12]
 8007434:	1a5b      	subs	r3, r3, r1
 8007436:	42ab      	cmp	r3, r5
 8007438:	dcf2      	bgt.n	8007420 <_printf_i+0x214>
 800743a:	e7eb      	b.n	8007414 <_printf_i+0x208>
 800743c:	2500      	movs	r5, #0
 800743e:	f104 0619 	add.w	r6, r4, #25
 8007442:	e7f5      	b.n	8007430 <_printf_i+0x224>
 8007444:	0800b40c 	.word	0x0800b40c
 8007448:	0800b41d 	.word	0x0800b41d

0800744c <_scanf_float>:
 800744c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007450:	b087      	sub	sp, #28
 8007452:	9303      	str	r3, [sp, #12]
 8007454:	688b      	ldr	r3, [r1, #8]
 8007456:	4617      	mov	r7, r2
 8007458:	1e5a      	subs	r2, r3, #1
 800745a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800745e:	bf82      	ittt	hi
 8007460:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007464:	eb03 0b05 	addhi.w	fp, r3, r5
 8007468:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800746c:	460a      	mov	r2, r1
 800746e:	f04f 0500 	mov.w	r5, #0
 8007472:	bf88      	it	hi
 8007474:	608b      	strhi	r3, [r1, #8]
 8007476:	680b      	ldr	r3, [r1, #0]
 8007478:	4680      	mov	r8, r0
 800747a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800747e:	f842 3b1c 	str.w	r3, [r2], #28
 8007482:	460c      	mov	r4, r1
 8007484:	bf98      	it	ls
 8007486:	f04f 0b00 	movls.w	fp, #0
 800748a:	4616      	mov	r6, r2
 800748c:	46aa      	mov	sl, r5
 800748e:	46a9      	mov	r9, r5
 8007490:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007494:	9201      	str	r2, [sp, #4]
 8007496:	9502      	str	r5, [sp, #8]
 8007498:	68a2      	ldr	r2, [r4, #8]
 800749a:	b152      	cbz	r2, 80074b2 <_scanf_float+0x66>
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	2b4e      	cmp	r3, #78	@ 0x4e
 80074a2:	d865      	bhi.n	8007570 <_scanf_float+0x124>
 80074a4:	2b40      	cmp	r3, #64	@ 0x40
 80074a6:	d83d      	bhi.n	8007524 <_scanf_float+0xd8>
 80074a8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80074ac:	b2c8      	uxtb	r0, r1
 80074ae:	280e      	cmp	r0, #14
 80074b0:	d93b      	bls.n	800752a <_scanf_float+0xde>
 80074b2:	f1b9 0f00 	cmp.w	r9, #0
 80074b6:	d003      	beq.n	80074c0 <_scanf_float+0x74>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074be:	6023      	str	r3, [r4, #0]
 80074c0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80074c4:	f1ba 0f01 	cmp.w	sl, #1
 80074c8:	f200 8118 	bhi.w	80076fc <_scanf_float+0x2b0>
 80074cc:	9b01      	ldr	r3, [sp, #4]
 80074ce:	429e      	cmp	r6, r3
 80074d0:	f200 8109 	bhi.w	80076e6 <_scanf_float+0x29a>
 80074d4:	2001      	movs	r0, #1
 80074d6:	b007      	add	sp, #28
 80074d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074dc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80074e0:	2a0d      	cmp	r2, #13
 80074e2:	d8e6      	bhi.n	80074b2 <_scanf_float+0x66>
 80074e4:	a101      	add	r1, pc, #4	@ (adr r1, 80074ec <_scanf_float+0xa0>)
 80074e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80074ea:	bf00      	nop
 80074ec:	08007633 	.word	0x08007633
 80074f0:	080074b3 	.word	0x080074b3
 80074f4:	080074b3 	.word	0x080074b3
 80074f8:	080074b3 	.word	0x080074b3
 80074fc:	08007693 	.word	0x08007693
 8007500:	0800766b 	.word	0x0800766b
 8007504:	080074b3 	.word	0x080074b3
 8007508:	080074b3 	.word	0x080074b3
 800750c:	08007641 	.word	0x08007641
 8007510:	080074b3 	.word	0x080074b3
 8007514:	080074b3 	.word	0x080074b3
 8007518:	080074b3 	.word	0x080074b3
 800751c:	080074b3 	.word	0x080074b3
 8007520:	080075f9 	.word	0x080075f9
 8007524:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007528:	e7da      	b.n	80074e0 <_scanf_float+0x94>
 800752a:	290e      	cmp	r1, #14
 800752c:	d8c1      	bhi.n	80074b2 <_scanf_float+0x66>
 800752e:	a001      	add	r0, pc, #4	@ (adr r0, 8007534 <_scanf_float+0xe8>)
 8007530:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007534:	080075e9 	.word	0x080075e9
 8007538:	080074b3 	.word	0x080074b3
 800753c:	080075e9 	.word	0x080075e9
 8007540:	0800767f 	.word	0x0800767f
 8007544:	080074b3 	.word	0x080074b3
 8007548:	08007591 	.word	0x08007591
 800754c:	080075cf 	.word	0x080075cf
 8007550:	080075cf 	.word	0x080075cf
 8007554:	080075cf 	.word	0x080075cf
 8007558:	080075cf 	.word	0x080075cf
 800755c:	080075cf 	.word	0x080075cf
 8007560:	080075cf 	.word	0x080075cf
 8007564:	080075cf 	.word	0x080075cf
 8007568:	080075cf 	.word	0x080075cf
 800756c:	080075cf 	.word	0x080075cf
 8007570:	2b6e      	cmp	r3, #110	@ 0x6e
 8007572:	d809      	bhi.n	8007588 <_scanf_float+0x13c>
 8007574:	2b60      	cmp	r3, #96	@ 0x60
 8007576:	d8b1      	bhi.n	80074dc <_scanf_float+0x90>
 8007578:	2b54      	cmp	r3, #84	@ 0x54
 800757a:	d07b      	beq.n	8007674 <_scanf_float+0x228>
 800757c:	2b59      	cmp	r3, #89	@ 0x59
 800757e:	d198      	bne.n	80074b2 <_scanf_float+0x66>
 8007580:	2d07      	cmp	r5, #7
 8007582:	d196      	bne.n	80074b2 <_scanf_float+0x66>
 8007584:	2508      	movs	r5, #8
 8007586:	e02c      	b.n	80075e2 <_scanf_float+0x196>
 8007588:	2b74      	cmp	r3, #116	@ 0x74
 800758a:	d073      	beq.n	8007674 <_scanf_float+0x228>
 800758c:	2b79      	cmp	r3, #121	@ 0x79
 800758e:	e7f6      	b.n	800757e <_scanf_float+0x132>
 8007590:	6821      	ldr	r1, [r4, #0]
 8007592:	05c8      	lsls	r0, r1, #23
 8007594:	d51b      	bpl.n	80075ce <_scanf_float+0x182>
 8007596:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800759a:	6021      	str	r1, [r4, #0]
 800759c:	f109 0901 	add.w	r9, r9, #1
 80075a0:	f1bb 0f00 	cmp.w	fp, #0
 80075a4:	d003      	beq.n	80075ae <_scanf_float+0x162>
 80075a6:	3201      	adds	r2, #1
 80075a8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80075ac:	60a2      	str	r2, [r4, #8]
 80075ae:	68a3      	ldr	r3, [r4, #8]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	60a3      	str	r3, [r4, #8]
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	3301      	adds	r3, #1
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3b01      	subs	r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	607b      	str	r3, [r7, #4]
 80075c2:	f340 8087 	ble.w	80076d4 <_scanf_float+0x288>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	3301      	adds	r3, #1
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	e764      	b.n	8007498 <_scanf_float+0x4c>
 80075ce:	eb1a 0105 	adds.w	r1, sl, r5
 80075d2:	f47f af6e 	bne.w	80074b2 <_scanf_float+0x66>
 80075d6:	460d      	mov	r5, r1
 80075d8:	468a      	mov	sl, r1
 80075da:	6822      	ldr	r2, [r4, #0]
 80075dc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80075e0:	6022      	str	r2, [r4, #0]
 80075e2:	f806 3b01 	strb.w	r3, [r6], #1
 80075e6:	e7e2      	b.n	80075ae <_scanf_float+0x162>
 80075e8:	6822      	ldr	r2, [r4, #0]
 80075ea:	0610      	lsls	r0, r2, #24
 80075ec:	f57f af61 	bpl.w	80074b2 <_scanf_float+0x66>
 80075f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075f4:	6022      	str	r2, [r4, #0]
 80075f6:	e7f4      	b.n	80075e2 <_scanf_float+0x196>
 80075f8:	f1ba 0f00 	cmp.w	sl, #0
 80075fc:	d10e      	bne.n	800761c <_scanf_float+0x1d0>
 80075fe:	f1b9 0f00 	cmp.w	r9, #0
 8007602:	d10e      	bne.n	8007622 <_scanf_float+0x1d6>
 8007604:	6822      	ldr	r2, [r4, #0]
 8007606:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800760a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800760e:	d108      	bne.n	8007622 <_scanf_float+0x1d6>
 8007610:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007614:	f04f 0a01 	mov.w	sl, #1
 8007618:	6022      	str	r2, [r4, #0]
 800761a:	e7e2      	b.n	80075e2 <_scanf_float+0x196>
 800761c:	f1ba 0f02 	cmp.w	sl, #2
 8007620:	d055      	beq.n	80076ce <_scanf_float+0x282>
 8007622:	2d01      	cmp	r5, #1
 8007624:	d002      	beq.n	800762c <_scanf_float+0x1e0>
 8007626:	2d04      	cmp	r5, #4
 8007628:	f47f af43 	bne.w	80074b2 <_scanf_float+0x66>
 800762c:	3501      	adds	r5, #1
 800762e:	b2ed      	uxtb	r5, r5
 8007630:	e7d7      	b.n	80075e2 <_scanf_float+0x196>
 8007632:	f1ba 0f01 	cmp.w	sl, #1
 8007636:	f47f af3c 	bne.w	80074b2 <_scanf_float+0x66>
 800763a:	f04f 0a02 	mov.w	sl, #2
 800763e:	e7d0      	b.n	80075e2 <_scanf_float+0x196>
 8007640:	b97d      	cbnz	r5, 8007662 <_scanf_float+0x216>
 8007642:	f1b9 0f00 	cmp.w	r9, #0
 8007646:	f47f af37 	bne.w	80074b8 <_scanf_float+0x6c>
 800764a:	6822      	ldr	r2, [r4, #0]
 800764c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007650:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007654:	f040 8103 	bne.w	800785e <_scanf_float+0x412>
 8007658:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800765c:	2501      	movs	r5, #1
 800765e:	6022      	str	r2, [r4, #0]
 8007660:	e7bf      	b.n	80075e2 <_scanf_float+0x196>
 8007662:	2d03      	cmp	r5, #3
 8007664:	d0e2      	beq.n	800762c <_scanf_float+0x1e0>
 8007666:	2d05      	cmp	r5, #5
 8007668:	e7de      	b.n	8007628 <_scanf_float+0x1dc>
 800766a:	2d02      	cmp	r5, #2
 800766c:	f47f af21 	bne.w	80074b2 <_scanf_float+0x66>
 8007670:	2503      	movs	r5, #3
 8007672:	e7b6      	b.n	80075e2 <_scanf_float+0x196>
 8007674:	2d06      	cmp	r5, #6
 8007676:	f47f af1c 	bne.w	80074b2 <_scanf_float+0x66>
 800767a:	2507      	movs	r5, #7
 800767c:	e7b1      	b.n	80075e2 <_scanf_float+0x196>
 800767e:	6822      	ldr	r2, [r4, #0]
 8007680:	0591      	lsls	r1, r2, #22
 8007682:	f57f af16 	bpl.w	80074b2 <_scanf_float+0x66>
 8007686:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800768a:	6022      	str	r2, [r4, #0]
 800768c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007690:	e7a7      	b.n	80075e2 <_scanf_float+0x196>
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007698:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800769c:	d006      	beq.n	80076ac <_scanf_float+0x260>
 800769e:	0550      	lsls	r0, r2, #21
 80076a0:	f57f af07 	bpl.w	80074b2 <_scanf_float+0x66>
 80076a4:	f1b9 0f00 	cmp.w	r9, #0
 80076a8:	f000 80d9 	beq.w	800785e <_scanf_float+0x412>
 80076ac:	0591      	lsls	r1, r2, #22
 80076ae:	bf58      	it	pl
 80076b0:	9902      	ldrpl	r1, [sp, #8]
 80076b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80076b6:	bf58      	it	pl
 80076b8:	eba9 0101 	subpl.w	r1, r9, r1
 80076bc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80076c0:	f04f 0900 	mov.w	r9, #0
 80076c4:	bf58      	it	pl
 80076c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80076ca:	6022      	str	r2, [r4, #0]
 80076cc:	e789      	b.n	80075e2 <_scanf_float+0x196>
 80076ce:	f04f 0a03 	mov.w	sl, #3
 80076d2:	e786      	b.n	80075e2 <_scanf_float+0x196>
 80076d4:	4639      	mov	r1, r7
 80076d6:	4640      	mov	r0, r8
 80076d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80076dc:	4798      	blx	r3
 80076de:	2800      	cmp	r0, #0
 80076e0:	f43f aeda 	beq.w	8007498 <_scanf_float+0x4c>
 80076e4:	e6e5      	b.n	80074b2 <_scanf_float+0x66>
 80076e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076ea:	463a      	mov	r2, r7
 80076ec:	4640      	mov	r0, r8
 80076ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076f2:	4798      	blx	r3
 80076f4:	6923      	ldr	r3, [r4, #16]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	6123      	str	r3, [r4, #16]
 80076fa:	e6e7      	b.n	80074cc <_scanf_float+0x80>
 80076fc:	1e6b      	subs	r3, r5, #1
 80076fe:	2b06      	cmp	r3, #6
 8007700:	d824      	bhi.n	800774c <_scanf_float+0x300>
 8007702:	2d02      	cmp	r5, #2
 8007704:	d836      	bhi.n	8007774 <_scanf_float+0x328>
 8007706:	9b01      	ldr	r3, [sp, #4]
 8007708:	429e      	cmp	r6, r3
 800770a:	f67f aee3 	bls.w	80074d4 <_scanf_float+0x88>
 800770e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007712:	463a      	mov	r2, r7
 8007714:	4640      	mov	r0, r8
 8007716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800771a:	4798      	blx	r3
 800771c:	6923      	ldr	r3, [r4, #16]
 800771e:	3b01      	subs	r3, #1
 8007720:	6123      	str	r3, [r4, #16]
 8007722:	e7f0      	b.n	8007706 <_scanf_float+0x2ba>
 8007724:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007728:	463a      	mov	r2, r7
 800772a:	4640      	mov	r0, r8
 800772c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007730:	4798      	blx	r3
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	3b01      	subs	r3, #1
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800773c:	fa5f fa8a 	uxtb.w	sl, sl
 8007740:	f1ba 0f02 	cmp.w	sl, #2
 8007744:	d1ee      	bne.n	8007724 <_scanf_float+0x2d8>
 8007746:	3d03      	subs	r5, #3
 8007748:	b2ed      	uxtb	r5, r5
 800774a:	1b76      	subs	r6, r6, r5
 800774c:	6823      	ldr	r3, [r4, #0]
 800774e:	05da      	lsls	r2, r3, #23
 8007750:	d530      	bpl.n	80077b4 <_scanf_float+0x368>
 8007752:	055b      	lsls	r3, r3, #21
 8007754:	d511      	bpl.n	800777a <_scanf_float+0x32e>
 8007756:	9b01      	ldr	r3, [sp, #4]
 8007758:	429e      	cmp	r6, r3
 800775a:	f67f aebb 	bls.w	80074d4 <_scanf_float+0x88>
 800775e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007762:	463a      	mov	r2, r7
 8007764:	4640      	mov	r0, r8
 8007766:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800776a:	4798      	blx	r3
 800776c:	6923      	ldr	r3, [r4, #16]
 800776e:	3b01      	subs	r3, #1
 8007770:	6123      	str	r3, [r4, #16]
 8007772:	e7f0      	b.n	8007756 <_scanf_float+0x30a>
 8007774:	46aa      	mov	sl, r5
 8007776:	46b3      	mov	fp, r6
 8007778:	e7de      	b.n	8007738 <_scanf_float+0x2ec>
 800777a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800777e:	6923      	ldr	r3, [r4, #16]
 8007780:	2965      	cmp	r1, #101	@ 0x65
 8007782:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007786:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800778a:	6123      	str	r3, [r4, #16]
 800778c:	d00c      	beq.n	80077a8 <_scanf_float+0x35c>
 800778e:	2945      	cmp	r1, #69	@ 0x45
 8007790:	d00a      	beq.n	80077a8 <_scanf_float+0x35c>
 8007792:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007796:	463a      	mov	r2, r7
 8007798:	4640      	mov	r0, r8
 800779a:	4798      	blx	r3
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	1eb5      	subs	r5, r6, #2
 80077a6:	6123      	str	r3, [r4, #16]
 80077a8:	463a      	mov	r2, r7
 80077aa:	4640      	mov	r0, r8
 80077ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077b0:	4798      	blx	r3
 80077b2:	462e      	mov	r6, r5
 80077b4:	6822      	ldr	r2, [r4, #0]
 80077b6:	f012 0210 	ands.w	r2, r2, #16
 80077ba:	d001      	beq.n	80077c0 <_scanf_float+0x374>
 80077bc:	2000      	movs	r0, #0
 80077be:	e68a      	b.n	80074d6 <_scanf_float+0x8a>
 80077c0:	7032      	strb	r2, [r6, #0]
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80077c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077cc:	d11c      	bne.n	8007808 <_scanf_float+0x3bc>
 80077ce:	9b02      	ldr	r3, [sp, #8]
 80077d0:	454b      	cmp	r3, r9
 80077d2:	eba3 0209 	sub.w	r2, r3, r9
 80077d6:	d123      	bne.n	8007820 <_scanf_float+0x3d4>
 80077d8:	2200      	movs	r2, #0
 80077da:	4640      	mov	r0, r8
 80077dc:	9901      	ldr	r1, [sp, #4]
 80077de:	f000 ff37 	bl	8008650 <_strtod_r>
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	6825      	ldr	r5, [r4, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f015 0f02 	tst.w	r5, #2
 80077ec:	4606      	mov	r6, r0
 80077ee:	460f      	mov	r7, r1
 80077f0:	f103 0204 	add.w	r2, r3, #4
 80077f4:	d01f      	beq.n	8007836 <_scanf_float+0x3ea>
 80077f6:	9903      	ldr	r1, [sp, #12]
 80077f8:	600a      	str	r2, [r1, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	e9c3 6700 	strd	r6, r7, [r3]
 8007800:	68e3      	ldr	r3, [r4, #12]
 8007802:	3301      	adds	r3, #1
 8007804:	60e3      	str	r3, [r4, #12]
 8007806:	e7d9      	b.n	80077bc <_scanf_float+0x370>
 8007808:	9b04      	ldr	r3, [sp, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0e4      	beq.n	80077d8 <_scanf_float+0x38c>
 800780e:	9905      	ldr	r1, [sp, #20]
 8007810:	230a      	movs	r3, #10
 8007812:	4640      	mov	r0, r8
 8007814:	3101      	adds	r1, #1
 8007816:	f000 ff9b 	bl	8008750 <_strtol_r>
 800781a:	9b04      	ldr	r3, [sp, #16]
 800781c:	9e05      	ldr	r6, [sp, #20]
 800781e:	1ac2      	subs	r2, r0, r3
 8007820:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007824:	429e      	cmp	r6, r3
 8007826:	bf28      	it	cs
 8007828:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800782c:	4630      	mov	r0, r6
 800782e:	490d      	ldr	r1, [pc, #52]	@ (8007864 <_scanf_float+0x418>)
 8007830:	f000 f850 	bl	80078d4 <siprintf>
 8007834:	e7d0      	b.n	80077d8 <_scanf_float+0x38c>
 8007836:	076d      	lsls	r5, r5, #29
 8007838:	d4dd      	bmi.n	80077f6 <_scanf_float+0x3aa>
 800783a:	9d03      	ldr	r5, [sp, #12]
 800783c:	602a      	str	r2, [r5, #0]
 800783e:	681d      	ldr	r5, [r3, #0]
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	f7f9 f8e2 	bl	8000a0c <__aeabi_dcmpun>
 8007848:	b120      	cbz	r0, 8007854 <_scanf_float+0x408>
 800784a:	4807      	ldr	r0, [pc, #28]	@ (8007868 <_scanf_float+0x41c>)
 800784c:	f001 f80e 	bl	800886c <nanf>
 8007850:	6028      	str	r0, [r5, #0]
 8007852:	e7d5      	b.n	8007800 <_scanf_float+0x3b4>
 8007854:	4630      	mov	r0, r6
 8007856:	4639      	mov	r1, r7
 8007858:	f7f9 f936 	bl	8000ac8 <__aeabi_d2f>
 800785c:	e7f8      	b.n	8007850 <_scanf_float+0x404>
 800785e:	f04f 0900 	mov.w	r9, #0
 8007862:	e62d      	b.n	80074c0 <_scanf_float+0x74>
 8007864:	0800b42e 	.word	0x0800b42e
 8007868:	0800b823 	.word	0x0800b823

0800786c <sniprintf>:
 800786c:	b40c      	push	{r2, r3}
 800786e:	b530      	push	{r4, r5, lr}
 8007870:	4b17      	ldr	r3, [pc, #92]	@ (80078d0 <sniprintf+0x64>)
 8007872:	1e0c      	subs	r4, r1, #0
 8007874:	681d      	ldr	r5, [r3, #0]
 8007876:	b09d      	sub	sp, #116	@ 0x74
 8007878:	da08      	bge.n	800788c <sniprintf+0x20>
 800787a:	238b      	movs	r3, #139	@ 0x8b
 800787c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007880:	602b      	str	r3, [r5, #0]
 8007882:	b01d      	add	sp, #116	@ 0x74
 8007884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007888:	b002      	add	sp, #8
 800788a:	4770      	bx	lr
 800788c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007890:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007894:	bf0c      	ite	eq
 8007896:	4623      	moveq	r3, r4
 8007898:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800789c:	9304      	str	r3, [sp, #16]
 800789e:	9307      	str	r3, [sp, #28]
 80078a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80078a4:	9002      	str	r0, [sp, #8]
 80078a6:	9006      	str	r0, [sp, #24]
 80078a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078ac:	4628      	mov	r0, r5
 80078ae:	ab21      	add	r3, sp, #132	@ 0x84
 80078b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80078b2:	a902      	add	r1, sp, #8
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	f002 f9c3 	bl	8009c40 <_svfiprintf_r>
 80078ba:	1c43      	adds	r3, r0, #1
 80078bc:	bfbc      	itt	lt
 80078be:	238b      	movlt	r3, #139	@ 0x8b
 80078c0:	602b      	strlt	r3, [r5, #0]
 80078c2:	2c00      	cmp	r4, #0
 80078c4:	d0dd      	beq.n	8007882 <sniprintf+0x16>
 80078c6:	2200      	movs	r2, #0
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	701a      	strb	r2, [r3, #0]
 80078cc:	e7d9      	b.n	8007882 <sniprintf+0x16>
 80078ce:	bf00      	nop
 80078d0:	200001a0 	.word	0x200001a0

080078d4 <siprintf>:
 80078d4:	b40e      	push	{r1, r2, r3}
 80078d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078da:	b500      	push	{lr}
 80078dc:	b09c      	sub	sp, #112	@ 0x70
 80078de:	ab1d      	add	r3, sp, #116	@ 0x74
 80078e0:	9002      	str	r0, [sp, #8]
 80078e2:	9006      	str	r0, [sp, #24]
 80078e4:	9107      	str	r1, [sp, #28]
 80078e6:	9104      	str	r1, [sp, #16]
 80078e8:	4808      	ldr	r0, [pc, #32]	@ (800790c <siprintf+0x38>)
 80078ea:	4909      	ldr	r1, [pc, #36]	@ (8007910 <siprintf+0x3c>)
 80078ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80078f0:	9105      	str	r1, [sp, #20]
 80078f2:	6800      	ldr	r0, [r0, #0]
 80078f4:	a902      	add	r1, sp, #8
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	f002 f9a2 	bl	8009c40 <_svfiprintf_r>
 80078fc:	2200      	movs	r2, #0
 80078fe:	9b02      	ldr	r3, [sp, #8]
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	b01c      	add	sp, #112	@ 0x70
 8007904:	f85d eb04 	ldr.w	lr, [sp], #4
 8007908:	b003      	add	sp, #12
 800790a:	4770      	bx	lr
 800790c:	200001a0 	.word	0x200001a0
 8007910:	ffff0208 	.word	0xffff0208

08007914 <std>:
 8007914:	2300      	movs	r3, #0
 8007916:	b510      	push	{r4, lr}
 8007918:	4604      	mov	r4, r0
 800791a:	e9c0 3300 	strd	r3, r3, [r0]
 800791e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007922:	6083      	str	r3, [r0, #8]
 8007924:	8181      	strh	r1, [r0, #12]
 8007926:	6643      	str	r3, [r0, #100]	@ 0x64
 8007928:	81c2      	strh	r2, [r0, #14]
 800792a:	6183      	str	r3, [r0, #24]
 800792c:	4619      	mov	r1, r3
 800792e:	2208      	movs	r2, #8
 8007930:	305c      	adds	r0, #92	@ 0x5c
 8007932:	f000 ff3f 	bl	80087b4 <memset>
 8007936:	4b0d      	ldr	r3, [pc, #52]	@ (800796c <std+0x58>)
 8007938:	6224      	str	r4, [r4, #32]
 800793a:	6263      	str	r3, [r4, #36]	@ 0x24
 800793c:	4b0c      	ldr	r3, [pc, #48]	@ (8007970 <std+0x5c>)
 800793e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007940:	4b0c      	ldr	r3, [pc, #48]	@ (8007974 <std+0x60>)
 8007942:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007944:	4b0c      	ldr	r3, [pc, #48]	@ (8007978 <std+0x64>)
 8007946:	6323      	str	r3, [r4, #48]	@ 0x30
 8007948:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <std+0x68>)
 800794a:	429c      	cmp	r4, r3
 800794c:	d006      	beq.n	800795c <std+0x48>
 800794e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007952:	4294      	cmp	r4, r2
 8007954:	d002      	beq.n	800795c <std+0x48>
 8007956:	33d0      	adds	r3, #208	@ 0xd0
 8007958:	429c      	cmp	r4, r3
 800795a:	d105      	bne.n	8007968 <std+0x54>
 800795c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007964:	f000 bf5c 	b.w	8008820 <__retarget_lock_init_recursive>
 8007968:	bd10      	pop	{r4, pc}
 800796a:	bf00      	nop
 800796c:	0800aa65 	.word	0x0800aa65
 8007970:	0800aa87 	.word	0x0800aa87
 8007974:	0800aabf 	.word	0x0800aabf
 8007978:	0800aae3 	.word	0x0800aae3
 800797c:	20000430 	.word	0x20000430

08007980 <stdio_exit_handler>:
 8007980:	4a02      	ldr	r2, [pc, #8]	@ (800798c <stdio_exit_handler+0xc>)
 8007982:	4903      	ldr	r1, [pc, #12]	@ (8007990 <stdio_exit_handler+0x10>)
 8007984:	4803      	ldr	r0, [pc, #12]	@ (8007994 <stdio_exit_handler+0x14>)
 8007986:	f000 bee5 	b.w	8008754 <_fwalk_sglue>
 800798a:	bf00      	nop
 800798c:	20000028 	.word	0x20000028
 8007990:	0800a0b1 	.word	0x0800a0b1
 8007994:	200001a4 	.word	0x200001a4

08007998 <cleanup_stdio>:
 8007998:	6841      	ldr	r1, [r0, #4]
 800799a:	4b0c      	ldr	r3, [pc, #48]	@ (80079cc <cleanup_stdio+0x34>)
 800799c:	b510      	push	{r4, lr}
 800799e:	4299      	cmp	r1, r3
 80079a0:	4604      	mov	r4, r0
 80079a2:	d001      	beq.n	80079a8 <cleanup_stdio+0x10>
 80079a4:	f002 fb84 	bl	800a0b0 <_fflush_r>
 80079a8:	68a1      	ldr	r1, [r4, #8]
 80079aa:	4b09      	ldr	r3, [pc, #36]	@ (80079d0 <cleanup_stdio+0x38>)
 80079ac:	4299      	cmp	r1, r3
 80079ae:	d002      	beq.n	80079b6 <cleanup_stdio+0x1e>
 80079b0:	4620      	mov	r0, r4
 80079b2:	f002 fb7d 	bl	800a0b0 <_fflush_r>
 80079b6:	68e1      	ldr	r1, [r4, #12]
 80079b8:	4b06      	ldr	r3, [pc, #24]	@ (80079d4 <cleanup_stdio+0x3c>)
 80079ba:	4299      	cmp	r1, r3
 80079bc:	d004      	beq.n	80079c8 <cleanup_stdio+0x30>
 80079be:	4620      	mov	r0, r4
 80079c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c4:	f002 bb74 	b.w	800a0b0 <_fflush_r>
 80079c8:	bd10      	pop	{r4, pc}
 80079ca:	bf00      	nop
 80079cc:	20000430 	.word	0x20000430
 80079d0:	20000498 	.word	0x20000498
 80079d4:	20000500 	.word	0x20000500

080079d8 <global_stdio_init.part.0>:
 80079d8:	b510      	push	{r4, lr}
 80079da:	4b0b      	ldr	r3, [pc, #44]	@ (8007a08 <global_stdio_init.part.0+0x30>)
 80079dc:	4c0b      	ldr	r4, [pc, #44]	@ (8007a0c <global_stdio_init.part.0+0x34>)
 80079de:	4a0c      	ldr	r2, [pc, #48]	@ (8007a10 <global_stdio_init.part.0+0x38>)
 80079e0:	4620      	mov	r0, r4
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	2104      	movs	r1, #4
 80079e6:	2200      	movs	r2, #0
 80079e8:	f7ff ff94 	bl	8007914 <std>
 80079ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079f0:	2201      	movs	r2, #1
 80079f2:	2109      	movs	r1, #9
 80079f4:	f7ff ff8e 	bl	8007914 <std>
 80079f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80079fc:	2202      	movs	r2, #2
 80079fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a02:	2112      	movs	r1, #18
 8007a04:	f7ff bf86 	b.w	8007914 <std>
 8007a08:	20000568 	.word	0x20000568
 8007a0c:	20000430 	.word	0x20000430
 8007a10:	08007981 	.word	0x08007981

08007a14 <__sfp_lock_acquire>:
 8007a14:	4801      	ldr	r0, [pc, #4]	@ (8007a1c <__sfp_lock_acquire+0x8>)
 8007a16:	f000 bf04 	b.w	8008822 <__retarget_lock_acquire_recursive>
 8007a1a:	bf00      	nop
 8007a1c:	2000056d 	.word	0x2000056d

08007a20 <__sfp_lock_release>:
 8007a20:	4801      	ldr	r0, [pc, #4]	@ (8007a28 <__sfp_lock_release+0x8>)
 8007a22:	f000 beff 	b.w	8008824 <__retarget_lock_release_recursive>
 8007a26:	bf00      	nop
 8007a28:	2000056d 	.word	0x2000056d

08007a2c <__sinit>:
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	4604      	mov	r4, r0
 8007a30:	f7ff fff0 	bl	8007a14 <__sfp_lock_acquire>
 8007a34:	6a23      	ldr	r3, [r4, #32]
 8007a36:	b11b      	cbz	r3, 8007a40 <__sinit+0x14>
 8007a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a3c:	f7ff bff0 	b.w	8007a20 <__sfp_lock_release>
 8007a40:	4b04      	ldr	r3, [pc, #16]	@ (8007a54 <__sinit+0x28>)
 8007a42:	6223      	str	r3, [r4, #32]
 8007a44:	4b04      	ldr	r3, [pc, #16]	@ (8007a58 <__sinit+0x2c>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1f5      	bne.n	8007a38 <__sinit+0xc>
 8007a4c:	f7ff ffc4 	bl	80079d8 <global_stdio_init.part.0>
 8007a50:	e7f2      	b.n	8007a38 <__sinit+0xc>
 8007a52:	bf00      	nop
 8007a54:	08007999 	.word	0x08007999
 8007a58:	20000568 	.word	0x20000568

08007a5c <sulp>:
 8007a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a60:	460f      	mov	r7, r1
 8007a62:	4690      	mov	r8, r2
 8007a64:	f002 feca 	bl	800a7fc <__ulp>
 8007a68:	4604      	mov	r4, r0
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	f1b8 0f00 	cmp.w	r8, #0
 8007a70:	d011      	beq.n	8007a96 <sulp+0x3a>
 8007a72:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007a76:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	dd0b      	ble.n	8007a96 <sulp+0x3a>
 8007a7e:	2400      	movs	r4, #0
 8007a80:	051b      	lsls	r3, r3, #20
 8007a82:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007a86:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007a8a:	4622      	mov	r2, r4
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	f7f8 fd23 	bl	80004d8 <__aeabi_dmul>
 8007a92:	4604      	mov	r4, r0
 8007a94:	460d      	mov	r5, r1
 8007a96:	4620      	mov	r0, r4
 8007a98:	4629      	mov	r1, r5
 8007a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007aa0 <_strtod_l>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	b09f      	sub	sp, #124	@ 0x7c
 8007aa6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	921a      	str	r2, [sp, #104]	@ 0x68
 8007aae:	f04f 0a00 	mov.w	sl, #0
 8007ab2:	f04f 0b00 	mov.w	fp, #0
 8007ab6:	460a      	mov	r2, r1
 8007ab8:	9005      	str	r0, [sp, #20]
 8007aba:	9219      	str	r2, [sp, #100]	@ 0x64
 8007abc:	7811      	ldrb	r1, [r2, #0]
 8007abe:	292b      	cmp	r1, #43	@ 0x2b
 8007ac0:	d048      	beq.n	8007b54 <_strtod_l+0xb4>
 8007ac2:	d836      	bhi.n	8007b32 <_strtod_l+0x92>
 8007ac4:	290d      	cmp	r1, #13
 8007ac6:	d830      	bhi.n	8007b2a <_strtod_l+0x8a>
 8007ac8:	2908      	cmp	r1, #8
 8007aca:	d830      	bhi.n	8007b2e <_strtod_l+0x8e>
 8007acc:	2900      	cmp	r1, #0
 8007ace:	d039      	beq.n	8007b44 <_strtod_l+0xa4>
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007ad4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007ad6:	782a      	ldrb	r2, [r5, #0]
 8007ad8:	2a30      	cmp	r2, #48	@ 0x30
 8007ada:	f040 80b1 	bne.w	8007c40 <_strtod_l+0x1a0>
 8007ade:	786a      	ldrb	r2, [r5, #1]
 8007ae0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ae4:	2a58      	cmp	r2, #88	@ 0x58
 8007ae6:	d16c      	bne.n	8007bc2 <_strtod_l+0x122>
 8007ae8:	9302      	str	r3, [sp, #8]
 8007aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aec:	4a8e      	ldr	r2, [pc, #568]	@ (8007d28 <_strtod_l+0x288>)
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	ab1a      	add	r3, sp, #104	@ 0x68
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	9805      	ldr	r0, [sp, #20]
 8007af6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007af8:	a919      	add	r1, sp, #100	@ 0x64
 8007afa:	f001 fd75 	bl	80095e8 <__gethex>
 8007afe:	f010 060f 	ands.w	r6, r0, #15
 8007b02:	4604      	mov	r4, r0
 8007b04:	d005      	beq.n	8007b12 <_strtod_l+0x72>
 8007b06:	2e06      	cmp	r6, #6
 8007b08:	d126      	bne.n	8007b58 <_strtod_l+0xb8>
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f040 8584 	bne.w	8008622 <_strtod_l+0xb82>
 8007b1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b1c:	b1bb      	cbz	r3, 8007b4e <_strtod_l+0xae>
 8007b1e:	4650      	mov	r0, sl
 8007b20:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007b24:	b01f      	add	sp, #124	@ 0x7c
 8007b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b2a:	2920      	cmp	r1, #32
 8007b2c:	d1d0      	bne.n	8007ad0 <_strtod_l+0x30>
 8007b2e:	3201      	adds	r2, #1
 8007b30:	e7c3      	b.n	8007aba <_strtod_l+0x1a>
 8007b32:	292d      	cmp	r1, #45	@ 0x2d
 8007b34:	d1cc      	bne.n	8007ad0 <_strtod_l+0x30>
 8007b36:	2101      	movs	r1, #1
 8007b38:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007b3a:	1c51      	adds	r1, r2, #1
 8007b3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b3e:	7852      	ldrb	r2, [r2, #1]
 8007b40:	2a00      	cmp	r2, #0
 8007b42:	d1c7      	bne.n	8007ad4 <_strtod_l+0x34>
 8007b44:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b46:	9419      	str	r4, [sp, #100]	@ 0x64
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f040 8568 	bne.w	800861e <_strtod_l+0xb7e>
 8007b4e:	4650      	mov	r0, sl
 8007b50:	4659      	mov	r1, fp
 8007b52:	e7e7      	b.n	8007b24 <_strtod_l+0x84>
 8007b54:	2100      	movs	r1, #0
 8007b56:	e7ef      	b.n	8007b38 <_strtod_l+0x98>
 8007b58:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b5a:	b13a      	cbz	r2, 8007b6c <_strtod_l+0xcc>
 8007b5c:	2135      	movs	r1, #53	@ 0x35
 8007b5e:	a81c      	add	r0, sp, #112	@ 0x70
 8007b60:	f002 ff3c 	bl	800a9dc <__copybits>
 8007b64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b66:	9805      	ldr	r0, [sp, #20]
 8007b68:	f002 fb16 	bl	800a198 <_Bfree>
 8007b6c:	3e01      	subs	r6, #1
 8007b6e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007b70:	2e04      	cmp	r6, #4
 8007b72:	d806      	bhi.n	8007b82 <_strtod_l+0xe2>
 8007b74:	e8df f006 	tbb	[pc, r6]
 8007b78:	201d0314 	.word	0x201d0314
 8007b7c:	14          	.byte	0x14
 8007b7d:	00          	.byte	0x00
 8007b7e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007b82:	05e1      	lsls	r1, r4, #23
 8007b84:	bf48      	it	mi
 8007b86:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007b8a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b8e:	0d1b      	lsrs	r3, r3, #20
 8007b90:	051b      	lsls	r3, r3, #20
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1bd      	bne.n	8007b12 <_strtod_l+0x72>
 8007b96:	f000 fe19 	bl	80087cc <__errno>
 8007b9a:	2322      	movs	r3, #34	@ 0x22
 8007b9c:	6003      	str	r3, [r0, #0]
 8007b9e:	e7b8      	b.n	8007b12 <_strtod_l+0x72>
 8007ba0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007ba4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007ba8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007bac:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007bb0:	e7e7      	b.n	8007b82 <_strtod_l+0xe2>
 8007bb2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007d2c <_strtod_l+0x28c>
 8007bb6:	e7e4      	b.n	8007b82 <_strtod_l+0xe2>
 8007bb8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007bbc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007bc0:	e7df      	b.n	8007b82 <_strtod_l+0xe2>
 8007bc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	2b30      	cmp	r3, #48	@ 0x30
 8007bcc:	d0f9      	beq.n	8007bc2 <_strtod_l+0x122>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d09f      	beq.n	8007b12 <_strtod_l+0x72>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bd8:	220a      	movs	r2, #10
 8007bda:	930c      	str	r3, [sp, #48]	@ 0x30
 8007bdc:	2300      	movs	r3, #0
 8007bde:	461f      	mov	r7, r3
 8007be0:	9308      	str	r3, [sp, #32]
 8007be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007be4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007be6:	7805      	ldrb	r5, [r0, #0]
 8007be8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007bec:	b2d9      	uxtb	r1, r3
 8007bee:	2909      	cmp	r1, #9
 8007bf0:	d928      	bls.n	8007c44 <_strtod_l+0x1a4>
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	494e      	ldr	r1, [pc, #312]	@ (8007d30 <_strtod_l+0x290>)
 8007bf6:	f000 fdcb 	bl	8008790 <strncmp>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d032      	beq.n	8007c64 <_strtod_l+0x1c4>
 8007bfe:	2000      	movs	r0, #0
 8007c00:	462a      	mov	r2, r5
 8007c02:	4681      	mov	r9, r0
 8007c04:	463d      	mov	r5, r7
 8007c06:	4603      	mov	r3, r0
 8007c08:	2a65      	cmp	r2, #101	@ 0x65
 8007c0a:	d001      	beq.n	8007c10 <_strtod_l+0x170>
 8007c0c:	2a45      	cmp	r2, #69	@ 0x45
 8007c0e:	d114      	bne.n	8007c3a <_strtod_l+0x19a>
 8007c10:	b91d      	cbnz	r5, 8007c1a <_strtod_l+0x17a>
 8007c12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c14:	4302      	orrs	r2, r0
 8007c16:	d095      	beq.n	8007b44 <_strtod_l+0xa4>
 8007c18:	2500      	movs	r5, #0
 8007c1a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007c1c:	1c62      	adds	r2, r4, #1
 8007c1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c20:	7862      	ldrb	r2, [r4, #1]
 8007c22:	2a2b      	cmp	r2, #43	@ 0x2b
 8007c24:	d077      	beq.n	8007d16 <_strtod_l+0x276>
 8007c26:	2a2d      	cmp	r2, #45	@ 0x2d
 8007c28:	d07b      	beq.n	8007d22 <_strtod_l+0x282>
 8007c2a:	f04f 0c00 	mov.w	ip, #0
 8007c2e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007c32:	2909      	cmp	r1, #9
 8007c34:	f240 8082 	bls.w	8007d3c <_strtod_l+0x29c>
 8007c38:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c3a:	f04f 0800 	mov.w	r8, #0
 8007c3e:	e0a2      	b.n	8007d86 <_strtod_l+0x2e6>
 8007c40:	2300      	movs	r3, #0
 8007c42:	e7c7      	b.n	8007bd4 <_strtod_l+0x134>
 8007c44:	2f08      	cmp	r7, #8
 8007c46:	bfd5      	itete	le
 8007c48:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007c4a:	9908      	ldrgt	r1, [sp, #32]
 8007c4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c50:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007c54:	f100 0001 	add.w	r0, r0, #1
 8007c58:	bfd4      	ite	le
 8007c5a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007c5c:	9308      	strgt	r3, [sp, #32]
 8007c5e:	3701      	adds	r7, #1
 8007c60:	9019      	str	r0, [sp, #100]	@ 0x64
 8007c62:	e7bf      	b.n	8007be4 <_strtod_l+0x144>
 8007c64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c6a:	785a      	ldrb	r2, [r3, #1]
 8007c6c:	b37f      	cbz	r7, 8007cce <_strtod_l+0x22e>
 8007c6e:	4681      	mov	r9, r0
 8007c70:	463d      	mov	r5, r7
 8007c72:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007c76:	2b09      	cmp	r3, #9
 8007c78:	d912      	bls.n	8007ca0 <_strtod_l+0x200>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e7c4      	b.n	8007c08 <_strtod_l+0x168>
 8007c7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c80:	3001      	adds	r0, #1
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c86:	785a      	ldrb	r2, [r3, #1]
 8007c88:	2a30      	cmp	r2, #48	@ 0x30
 8007c8a:	d0f8      	beq.n	8007c7e <_strtod_l+0x1de>
 8007c8c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	f200 84cb 	bhi.w	800862c <_strtod_l+0xb8c>
 8007c96:	4681      	mov	r9, r0
 8007c98:	2000      	movs	r0, #0
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ca0:	3a30      	subs	r2, #48	@ 0x30
 8007ca2:	f100 0301 	add.w	r3, r0, #1
 8007ca6:	d02a      	beq.n	8007cfe <_strtod_l+0x25e>
 8007ca8:	4499      	add	r9, r3
 8007caa:	210a      	movs	r1, #10
 8007cac:	462b      	mov	r3, r5
 8007cae:	eb00 0c05 	add.w	ip, r0, r5
 8007cb2:	4563      	cmp	r3, ip
 8007cb4:	d10d      	bne.n	8007cd2 <_strtod_l+0x232>
 8007cb6:	1c69      	adds	r1, r5, #1
 8007cb8:	4401      	add	r1, r0
 8007cba:	4428      	add	r0, r5
 8007cbc:	2808      	cmp	r0, #8
 8007cbe:	dc16      	bgt.n	8007cee <_strtod_l+0x24e>
 8007cc0:	230a      	movs	r3, #10
 8007cc2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007cc4:	fb03 2300 	mla	r3, r3, r0, r2
 8007cc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cca:	2300      	movs	r3, #0
 8007ccc:	e018      	b.n	8007d00 <_strtod_l+0x260>
 8007cce:	4638      	mov	r0, r7
 8007cd0:	e7da      	b.n	8007c88 <_strtod_l+0x1e8>
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	f103 0301 	add.w	r3, r3, #1
 8007cd8:	dc03      	bgt.n	8007ce2 <_strtod_l+0x242>
 8007cda:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007cdc:	434e      	muls	r6, r1
 8007cde:	960a      	str	r6, [sp, #40]	@ 0x28
 8007ce0:	e7e7      	b.n	8007cb2 <_strtod_l+0x212>
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	bfde      	ittt	le
 8007ce6:	9e08      	ldrle	r6, [sp, #32]
 8007ce8:	434e      	mulle	r6, r1
 8007cea:	9608      	strle	r6, [sp, #32]
 8007cec:	e7e1      	b.n	8007cb2 <_strtod_l+0x212>
 8007cee:	280f      	cmp	r0, #15
 8007cf0:	dceb      	bgt.n	8007cca <_strtod_l+0x22a>
 8007cf2:	230a      	movs	r3, #10
 8007cf4:	9808      	ldr	r0, [sp, #32]
 8007cf6:	fb03 2300 	mla	r3, r3, r0, r2
 8007cfa:	9308      	str	r3, [sp, #32]
 8007cfc:	e7e5      	b.n	8007cca <_strtod_l+0x22a>
 8007cfe:	4629      	mov	r1, r5
 8007d00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d02:	460d      	mov	r5, r1
 8007d04:	1c50      	adds	r0, r2, #1
 8007d06:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d08:	7852      	ldrb	r2, [r2, #1]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	e7b1      	b.n	8007c72 <_strtod_l+0x1d2>
 8007d0e:	f04f 0900 	mov.w	r9, #0
 8007d12:	2301      	movs	r3, #1
 8007d14:	e77d      	b.n	8007c12 <_strtod_l+0x172>
 8007d16:	f04f 0c00 	mov.w	ip, #0
 8007d1a:	1ca2      	adds	r2, r4, #2
 8007d1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d1e:	78a2      	ldrb	r2, [r4, #2]
 8007d20:	e785      	b.n	8007c2e <_strtod_l+0x18e>
 8007d22:	f04f 0c01 	mov.w	ip, #1
 8007d26:	e7f8      	b.n	8007d1a <_strtod_l+0x27a>
 8007d28:	0800b44c 	.word	0x0800b44c
 8007d2c:	7ff00000 	.word	0x7ff00000
 8007d30:	0800b433 	.word	0x0800b433
 8007d34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d36:	1c51      	adds	r1, r2, #1
 8007d38:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d3a:	7852      	ldrb	r2, [r2, #1]
 8007d3c:	2a30      	cmp	r2, #48	@ 0x30
 8007d3e:	d0f9      	beq.n	8007d34 <_strtod_l+0x294>
 8007d40:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007d44:	2908      	cmp	r1, #8
 8007d46:	f63f af78 	bhi.w	8007c3a <_strtod_l+0x19a>
 8007d4a:	f04f 080a 	mov.w	r8, #10
 8007d4e:	3a30      	subs	r2, #48	@ 0x30
 8007d50:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d54:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007d56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d58:	1c56      	adds	r6, r2, #1
 8007d5a:	9619      	str	r6, [sp, #100]	@ 0x64
 8007d5c:	7852      	ldrb	r2, [r2, #1]
 8007d5e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007d62:	f1be 0f09 	cmp.w	lr, #9
 8007d66:	d939      	bls.n	8007ddc <_strtod_l+0x33c>
 8007d68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007d6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007d6e:	1a76      	subs	r6, r6, r1
 8007d70:	2e08      	cmp	r6, #8
 8007d72:	dc03      	bgt.n	8007d7c <_strtod_l+0x2dc>
 8007d74:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007d76:	4588      	cmp	r8, r1
 8007d78:	bfa8      	it	ge
 8007d7a:	4688      	movge	r8, r1
 8007d7c:	f1bc 0f00 	cmp.w	ip, #0
 8007d80:	d001      	beq.n	8007d86 <_strtod_l+0x2e6>
 8007d82:	f1c8 0800 	rsb	r8, r8, #0
 8007d86:	2d00      	cmp	r5, #0
 8007d88:	d14e      	bne.n	8007e28 <_strtod_l+0x388>
 8007d8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d8c:	4308      	orrs	r0, r1
 8007d8e:	f47f aec0 	bne.w	8007b12 <_strtod_l+0x72>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f47f aed6 	bne.w	8007b44 <_strtod_l+0xa4>
 8007d98:	2a69      	cmp	r2, #105	@ 0x69
 8007d9a:	d028      	beq.n	8007dee <_strtod_l+0x34e>
 8007d9c:	dc25      	bgt.n	8007dea <_strtod_l+0x34a>
 8007d9e:	2a49      	cmp	r2, #73	@ 0x49
 8007da0:	d025      	beq.n	8007dee <_strtod_l+0x34e>
 8007da2:	2a4e      	cmp	r2, #78	@ 0x4e
 8007da4:	f47f aece 	bne.w	8007b44 <_strtod_l+0xa4>
 8007da8:	499a      	ldr	r1, [pc, #616]	@ (8008014 <_strtod_l+0x574>)
 8007daa:	a819      	add	r0, sp, #100	@ 0x64
 8007dac:	f001 fe3e 	bl	8009a2c <__match>
 8007db0:	2800      	cmp	r0, #0
 8007db2:	f43f aec7 	beq.w	8007b44 <_strtod_l+0xa4>
 8007db6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b28      	cmp	r3, #40	@ 0x28
 8007dbc:	d12e      	bne.n	8007e1c <_strtod_l+0x37c>
 8007dbe:	4996      	ldr	r1, [pc, #600]	@ (8008018 <_strtod_l+0x578>)
 8007dc0:	aa1c      	add	r2, sp, #112	@ 0x70
 8007dc2:	a819      	add	r0, sp, #100	@ 0x64
 8007dc4:	f001 fe46 	bl	8009a54 <__hexnan>
 8007dc8:	2805      	cmp	r0, #5
 8007dca:	d127      	bne.n	8007e1c <_strtod_l+0x37c>
 8007dcc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007dce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007dd2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007dd6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007dda:	e69a      	b.n	8007b12 <_strtod_l+0x72>
 8007ddc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007dde:	fb08 2101 	mla	r1, r8, r1, r2
 8007de2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007de6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007de8:	e7b5      	b.n	8007d56 <_strtod_l+0x2b6>
 8007dea:	2a6e      	cmp	r2, #110	@ 0x6e
 8007dec:	e7da      	b.n	8007da4 <_strtod_l+0x304>
 8007dee:	498b      	ldr	r1, [pc, #556]	@ (800801c <_strtod_l+0x57c>)
 8007df0:	a819      	add	r0, sp, #100	@ 0x64
 8007df2:	f001 fe1b 	bl	8009a2c <__match>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	f43f aea4 	beq.w	8007b44 <_strtod_l+0xa4>
 8007dfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dfe:	4988      	ldr	r1, [pc, #544]	@ (8008020 <_strtod_l+0x580>)
 8007e00:	3b01      	subs	r3, #1
 8007e02:	a819      	add	r0, sp, #100	@ 0x64
 8007e04:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e06:	f001 fe11 	bl	8009a2c <__match>
 8007e0a:	b910      	cbnz	r0, 8007e12 <_strtod_l+0x372>
 8007e0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e0e:	3301      	adds	r3, #1
 8007e10:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e12:	f04f 0a00 	mov.w	sl, #0
 8007e16:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008024 <_strtod_l+0x584>
 8007e1a:	e67a      	b.n	8007b12 <_strtod_l+0x72>
 8007e1c:	4882      	ldr	r0, [pc, #520]	@ (8008028 <_strtod_l+0x588>)
 8007e1e:	f000 fd1f 	bl	8008860 <nan>
 8007e22:	4682      	mov	sl, r0
 8007e24:	468b      	mov	fp, r1
 8007e26:	e674      	b.n	8007b12 <_strtod_l+0x72>
 8007e28:	eba8 0309 	sub.w	r3, r8, r9
 8007e2c:	2f00      	cmp	r7, #0
 8007e2e:	bf08      	it	eq
 8007e30:	462f      	moveq	r7, r5
 8007e32:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e34:	2d10      	cmp	r5, #16
 8007e36:	462c      	mov	r4, r5
 8007e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e3a:	bfa8      	it	ge
 8007e3c:	2410      	movge	r4, #16
 8007e3e:	f7f8 fad1 	bl	80003e4 <__aeabi_ui2d>
 8007e42:	2d09      	cmp	r5, #9
 8007e44:	4682      	mov	sl, r0
 8007e46:	468b      	mov	fp, r1
 8007e48:	dc11      	bgt.n	8007e6e <_strtod_l+0x3ce>
 8007e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f43f ae60 	beq.w	8007b12 <_strtod_l+0x72>
 8007e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e54:	dd76      	ble.n	8007f44 <_strtod_l+0x4a4>
 8007e56:	2b16      	cmp	r3, #22
 8007e58:	dc5d      	bgt.n	8007f16 <_strtod_l+0x476>
 8007e5a:	4974      	ldr	r1, [pc, #464]	@ (800802c <_strtod_l+0x58c>)
 8007e5c:	4652      	mov	r2, sl
 8007e5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e62:	465b      	mov	r3, fp
 8007e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e68:	f7f8 fb36 	bl	80004d8 <__aeabi_dmul>
 8007e6c:	e7d9      	b.n	8007e22 <_strtod_l+0x382>
 8007e6e:	4b6f      	ldr	r3, [pc, #444]	@ (800802c <_strtod_l+0x58c>)
 8007e70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007e78:	f7f8 fb2e 	bl	80004d8 <__aeabi_dmul>
 8007e7c:	4682      	mov	sl, r0
 8007e7e:	9808      	ldr	r0, [sp, #32]
 8007e80:	468b      	mov	fp, r1
 8007e82:	f7f8 faaf 	bl	80003e4 <__aeabi_ui2d>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	4659      	mov	r1, fp
 8007e8e:	f7f8 f96d 	bl	800016c <__adddf3>
 8007e92:	2d0f      	cmp	r5, #15
 8007e94:	4682      	mov	sl, r0
 8007e96:	468b      	mov	fp, r1
 8007e98:	ddd7      	ble.n	8007e4a <_strtod_l+0x3aa>
 8007e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e9c:	1b2c      	subs	r4, r5, r4
 8007e9e:	441c      	add	r4, r3
 8007ea0:	2c00      	cmp	r4, #0
 8007ea2:	f340 8096 	ble.w	8007fd2 <_strtod_l+0x532>
 8007ea6:	f014 030f 	ands.w	r3, r4, #15
 8007eaa:	d00a      	beq.n	8007ec2 <_strtod_l+0x422>
 8007eac:	495f      	ldr	r1, [pc, #380]	@ (800802c <_strtod_l+0x58c>)
 8007eae:	4652      	mov	r2, sl
 8007eb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eb8:	465b      	mov	r3, fp
 8007eba:	f7f8 fb0d 	bl	80004d8 <__aeabi_dmul>
 8007ebe:	4682      	mov	sl, r0
 8007ec0:	468b      	mov	fp, r1
 8007ec2:	f034 040f 	bics.w	r4, r4, #15
 8007ec6:	d073      	beq.n	8007fb0 <_strtod_l+0x510>
 8007ec8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007ecc:	dd48      	ble.n	8007f60 <_strtod_l+0x4c0>
 8007ece:	2400      	movs	r4, #0
 8007ed0:	46a0      	mov	r8, r4
 8007ed2:	46a1      	mov	r9, r4
 8007ed4:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ed6:	2322      	movs	r3, #34	@ 0x22
 8007ed8:	f04f 0a00 	mov.w	sl, #0
 8007edc:	9a05      	ldr	r2, [sp, #20]
 8007ede:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008024 <_strtod_l+0x584>
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f43f ae13 	beq.w	8007b12 <_strtod_l+0x72>
 8007eec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007eee:	9805      	ldr	r0, [sp, #20]
 8007ef0:	f002 f952 	bl	800a198 <_Bfree>
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	9805      	ldr	r0, [sp, #20]
 8007ef8:	f002 f94e 	bl	800a198 <_Bfree>
 8007efc:	4641      	mov	r1, r8
 8007efe:	9805      	ldr	r0, [sp, #20]
 8007f00:	f002 f94a 	bl	800a198 <_Bfree>
 8007f04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f06:	9805      	ldr	r0, [sp, #20]
 8007f08:	f002 f946 	bl	800a198 <_Bfree>
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	9805      	ldr	r0, [sp, #20]
 8007f10:	f002 f942 	bl	800a198 <_Bfree>
 8007f14:	e5fd      	b.n	8007b12 <_strtod_l+0x72>
 8007f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	dbbc      	blt.n	8007e9a <_strtod_l+0x3fa>
 8007f20:	4c42      	ldr	r4, [pc, #264]	@ (800802c <_strtod_l+0x58c>)
 8007f22:	f1c5 050f 	rsb	r5, r5, #15
 8007f26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f2a:	4652      	mov	r2, sl
 8007f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f30:	465b      	mov	r3, fp
 8007f32:	f7f8 fad1 	bl	80004d8 <__aeabi_dmul>
 8007f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f38:	1b5d      	subs	r5, r3, r5
 8007f3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f42:	e791      	b.n	8007e68 <_strtod_l+0x3c8>
 8007f44:	3316      	adds	r3, #22
 8007f46:	dba8      	blt.n	8007e9a <_strtod_l+0x3fa>
 8007f48:	4b38      	ldr	r3, [pc, #224]	@ (800802c <_strtod_l+0x58c>)
 8007f4a:	eba9 0808 	sub.w	r8, r9, r8
 8007f4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007f52:	4650      	mov	r0, sl
 8007f54:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007f58:	4659      	mov	r1, fp
 8007f5a:	f7f8 fbe7 	bl	800072c <__aeabi_ddiv>
 8007f5e:	e760      	b.n	8007e22 <_strtod_l+0x382>
 8007f60:	4b33      	ldr	r3, [pc, #204]	@ (8008030 <_strtod_l+0x590>)
 8007f62:	4650      	mov	r0, sl
 8007f64:	9308      	str	r3, [sp, #32]
 8007f66:	2300      	movs	r3, #0
 8007f68:	4659      	mov	r1, fp
 8007f6a:	461e      	mov	r6, r3
 8007f6c:	1124      	asrs	r4, r4, #4
 8007f6e:	2c01      	cmp	r4, #1
 8007f70:	dc21      	bgt.n	8007fb6 <_strtod_l+0x516>
 8007f72:	b10b      	cbz	r3, 8007f78 <_strtod_l+0x4d8>
 8007f74:	4682      	mov	sl, r0
 8007f76:	468b      	mov	fp, r1
 8007f78:	492d      	ldr	r1, [pc, #180]	@ (8008030 <_strtod_l+0x590>)
 8007f7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007f7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007f82:	4652      	mov	r2, sl
 8007f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f88:	465b      	mov	r3, fp
 8007f8a:	f7f8 faa5 	bl	80004d8 <__aeabi_dmul>
 8007f8e:	4b25      	ldr	r3, [pc, #148]	@ (8008024 <_strtod_l+0x584>)
 8007f90:	460a      	mov	r2, r1
 8007f92:	400b      	ands	r3, r1
 8007f94:	4927      	ldr	r1, [pc, #156]	@ (8008034 <_strtod_l+0x594>)
 8007f96:	4682      	mov	sl, r0
 8007f98:	428b      	cmp	r3, r1
 8007f9a:	d898      	bhi.n	8007ece <_strtod_l+0x42e>
 8007f9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007fa0:	428b      	cmp	r3, r1
 8007fa2:	bf86      	itte	hi
 8007fa4:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007fa8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008038 <_strtod_l+0x598>
 8007fac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9308      	str	r3, [sp, #32]
 8007fb4:	e07a      	b.n	80080ac <_strtod_l+0x60c>
 8007fb6:	07e2      	lsls	r2, r4, #31
 8007fb8:	d505      	bpl.n	8007fc6 <_strtod_l+0x526>
 8007fba:	9b08      	ldr	r3, [sp, #32]
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f7f8 fa8a 	bl	80004d8 <__aeabi_dmul>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	9a08      	ldr	r2, [sp, #32]
 8007fc8:	3601      	adds	r6, #1
 8007fca:	3208      	adds	r2, #8
 8007fcc:	1064      	asrs	r4, r4, #1
 8007fce:	9208      	str	r2, [sp, #32]
 8007fd0:	e7cd      	b.n	8007f6e <_strtod_l+0x4ce>
 8007fd2:	d0ed      	beq.n	8007fb0 <_strtod_l+0x510>
 8007fd4:	4264      	negs	r4, r4
 8007fd6:	f014 020f 	ands.w	r2, r4, #15
 8007fda:	d00a      	beq.n	8007ff2 <_strtod_l+0x552>
 8007fdc:	4b13      	ldr	r3, [pc, #76]	@ (800802c <_strtod_l+0x58c>)
 8007fde:	4650      	mov	r0, sl
 8007fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fe4:	4659      	mov	r1, fp
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f7f8 fb9f 	bl	800072c <__aeabi_ddiv>
 8007fee:	4682      	mov	sl, r0
 8007ff0:	468b      	mov	fp, r1
 8007ff2:	1124      	asrs	r4, r4, #4
 8007ff4:	d0dc      	beq.n	8007fb0 <_strtod_l+0x510>
 8007ff6:	2c1f      	cmp	r4, #31
 8007ff8:	dd20      	ble.n	800803c <_strtod_l+0x59c>
 8007ffa:	2400      	movs	r4, #0
 8007ffc:	46a0      	mov	r8, r4
 8007ffe:	46a1      	mov	r9, r4
 8008000:	940a      	str	r4, [sp, #40]	@ 0x28
 8008002:	2322      	movs	r3, #34	@ 0x22
 8008004:	9a05      	ldr	r2, [sp, #20]
 8008006:	f04f 0a00 	mov.w	sl, #0
 800800a:	f04f 0b00 	mov.w	fp, #0
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	e768      	b.n	8007ee4 <_strtod_l+0x444>
 8008012:	bf00      	nop
 8008014:	0800b407 	.word	0x0800b407
 8008018:	0800b438 	.word	0x0800b438
 800801c:	0800b3ff 	.word	0x0800b3ff
 8008020:	0800b594 	.word	0x0800b594
 8008024:	7ff00000 	.word	0x7ff00000
 8008028:	0800b823 	.word	0x0800b823
 800802c:	0800b720 	.word	0x0800b720
 8008030:	0800b6f8 	.word	0x0800b6f8
 8008034:	7ca00000 	.word	0x7ca00000
 8008038:	7fefffff 	.word	0x7fefffff
 800803c:	f014 0310 	ands.w	r3, r4, #16
 8008040:	bf18      	it	ne
 8008042:	236a      	movne	r3, #106	@ 0x6a
 8008044:	4650      	mov	r0, sl
 8008046:	9308      	str	r3, [sp, #32]
 8008048:	4659      	mov	r1, fp
 800804a:	2300      	movs	r3, #0
 800804c:	4ea9      	ldr	r6, [pc, #676]	@ (80082f4 <_strtod_l+0x854>)
 800804e:	07e2      	lsls	r2, r4, #31
 8008050:	d504      	bpl.n	800805c <_strtod_l+0x5bc>
 8008052:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008056:	f7f8 fa3f 	bl	80004d8 <__aeabi_dmul>
 800805a:	2301      	movs	r3, #1
 800805c:	1064      	asrs	r4, r4, #1
 800805e:	f106 0608 	add.w	r6, r6, #8
 8008062:	d1f4      	bne.n	800804e <_strtod_l+0x5ae>
 8008064:	b10b      	cbz	r3, 800806a <_strtod_l+0x5ca>
 8008066:	4682      	mov	sl, r0
 8008068:	468b      	mov	fp, r1
 800806a:	9b08      	ldr	r3, [sp, #32]
 800806c:	b1b3      	cbz	r3, 800809c <_strtod_l+0x5fc>
 800806e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008072:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008076:	2b00      	cmp	r3, #0
 8008078:	4659      	mov	r1, fp
 800807a:	dd0f      	ble.n	800809c <_strtod_l+0x5fc>
 800807c:	2b1f      	cmp	r3, #31
 800807e:	dd57      	ble.n	8008130 <_strtod_l+0x690>
 8008080:	2b34      	cmp	r3, #52	@ 0x34
 8008082:	bfd8      	it	le
 8008084:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008088:	f04f 0a00 	mov.w	sl, #0
 800808c:	bfcf      	iteee	gt
 800808e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008092:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008096:	4093      	lslle	r3, r2
 8008098:	ea03 0b01 	andle.w	fp, r3, r1
 800809c:	2200      	movs	r2, #0
 800809e:	2300      	movs	r3, #0
 80080a0:	4650      	mov	r0, sl
 80080a2:	4659      	mov	r1, fp
 80080a4:	f7f8 fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d1a6      	bne.n	8007ffa <_strtod_l+0x55a>
 80080ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ae:	463a      	mov	r2, r7
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80080b4:	462b      	mov	r3, r5
 80080b6:	9805      	ldr	r0, [sp, #20]
 80080b8:	f002 f8d6 	bl	800a268 <__s2b>
 80080bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80080be:	2800      	cmp	r0, #0
 80080c0:	f43f af05 	beq.w	8007ece <_strtod_l+0x42e>
 80080c4:	2400      	movs	r4, #0
 80080c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080c8:	eba9 0308 	sub.w	r3, r9, r8
 80080cc:	2a00      	cmp	r2, #0
 80080ce:	bfa8      	it	ge
 80080d0:	2300      	movge	r3, #0
 80080d2:	46a0      	mov	r8, r4
 80080d4:	9312      	str	r3, [sp, #72]	@ 0x48
 80080d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80080da:	9316      	str	r3, [sp, #88]	@ 0x58
 80080dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080de:	9805      	ldr	r0, [sp, #20]
 80080e0:	6859      	ldr	r1, [r3, #4]
 80080e2:	f002 f819 	bl	800a118 <_Balloc>
 80080e6:	4681      	mov	r9, r0
 80080e8:	2800      	cmp	r0, #0
 80080ea:	f43f aef4 	beq.w	8007ed6 <_strtod_l+0x436>
 80080ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080f0:	300c      	adds	r0, #12
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	f103 010c 	add.w	r1, r3, #12
 80080f8:	3202      	adds	r2, #2
 80080fa:	0092      	lsls	r2, r2, #2
 80080fc:	f000 fba1 	bl	8008842 <memcpy>
 8008100:	ab1c      	add	r3, sp, #112	@ 0x70
 8008102:	9301      	str	r3, [sp, #4]
 8008104:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	4652      	mov	r2, sl
 800810a:	465b      	mov	r3, fp
 800810c:	9805      	ldr	r0, [sp, #20]
 800810e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008112:	f002 fbdb 	bl	800a8cc <__d2b>
 8008116:	901a      	str	r0, [sp, #104]	@ 0x68
 8008118:	2800      	cmp	r0, #0
 800811a:	f43f aedc 	beq.w	8007ed6 <_strtod_l+0x436>
 800811e:	2101      	movs	r1, #1
 8008120:	9805      	ldr	r0, [sp, #20]
 8008122:	f002 f937 	bl	800a394 <__i2b>
 8008126:	4680      	mov	r8, r0
 8008128:	b948      	cbnz	r0, 800813e <_strtod_l+0x69e>
 800812a:	f04f 0800 	mov.w	r8, #0
 800812e:	e6d2      	b.n	8007ed6 <_strtod_l+0x436>
 8008130:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008134:	fa02 f303 	lsl.w	r3, r2, r3
 8008138:	ea03 0a0a 	and.w	sl, r3, sl
 800813c:	e7ae      	b.n	800809c <_strtod_l+0x5fc>
 800813e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008140:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008142:	2d00      	cmp	r5, #0
 8008144:	bfab      	itete	ge
 8008146:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008148:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800814a:	18ef      	addge	r7, r5, r3
 800814c:	1b5e      	sublt	r6, r3, r5
 800814e:	9b08      	ldr	r3, [sp, #32]
 8008150:	bfa8      	it	ge
 8008152:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008154:	eba5 0503 	sub.w	r5, r5, r3
 8008158:	4415      	add	r5, r2
 800815a:	4b67      	ldr	r3, [pc, #412]	@ (80082f8 <_strtod_l+0x858>)
 800815c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8008160:	bfb8      	it	lt
 8008162:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008164:	429d      	cmp	r5, r3
 8008166:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800816a:	da50      	bge.n	800820e <_strtod_l+0x76e>
 800816c:	1b5b      	subs	r3, r3, r5
 800816e:	2b1f      	cmp	r3, #31
 8008170:	f04f 0101 	mov.w	r1, #1
 8008174:	eba2 0203 	sub.w	r2, r2, r3
 8008178:	dc3d      	bgt.n	80081f6 <_strtod_l+0x756>
 800817a:	fa01 f303 	lsl.w	r3, r1, r3
 800817e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008180:	2300      	movs	r3, #0
 8008182:	9310      	str	r3, [sp, #64]	@ 0x40
 8008184:	18bd      	adds	r5, r7, r2
 8008186:	9b08      	ldr	r3, [sp, #32]
 8008188:	42af      	cmp	r7, r5
 800818a:	4416      	add	r6, r2
 800818c:	441e      	add	r6, r3
 800818e:	463b      	mov	r3, r7
 8008190:	bfa8      	it	ge
 8008192:	462b      	movge	r3, r5
 8008194:	42b3      	cmp	r3, r6
 8008196:	bfa8      	it	ge
 8008198:	4633      	movge	r3, r6
 800819a:	2b00      	cmp	r3, #0
 800819c:	bfc2      	ittt	gt
 800819e:	1aed      	subgt	r5, r5, r3
 80081a0:	1af6      	subgt	r6, r6, r3
 80081a2:	1aff      	subgt	r7, r7, r3
 80081a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	dd16      	ble.n	80081d8 <_strtod_l+0x738>
 80081aa:	4641      	mov	r1, r8
 80081ac:	461a      	mov	r2, r3
 80081ae:	9805      	ldr	r0, [sp, #20]
 80081b0:	f002 f9ae 	bl	800a510 <__pow5mult>
 80081b4:	4680      	mov	r8, r0
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d0b7      	beq.n	800812a <_strtod_l+0x68a>
 80081ba:	4601      	mov	r1, r0
 80081bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081be:	9805      	ldr	r0, [sp, #20]
 80081c0:	f002 f8fe 	bl	800a3c0 <__multiply>
 80081c4:	900e      	str	r0, [sp, #56]	@ 0x38
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f43f ae85 	beq.w	8007ed6 <_strtod_l+0x436>
 80081cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081ce:	9805      	ldr	r0, [sp, #20]
 80081d0:	f001 ffe2 	bl	800a198 <_Bfree>
 80081d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80081d8:	2d00      	cmp	r5, #0
 80081da:	dc1d      	bgt.n	8008218 <_strtod_l+0x778>
 80081dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081de:	2b00      	cmp	r3, #0
 80081e0:	dd23      	ble.n	800822a <_strtod_l+0x78a>
 80081e2:	4649      	mov	r1, r9
 80081e4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80081e6:	9805      	ldr	r0, [sp, #20]
 80081e8:	f002 f992 	bl	800a510 <__pow5mult>
 80081ec:	4681      	mov	r9, r0
 80081ee:	b9e0      	cbnz	r0, 800822a <_strtod_l+0x78a>
 80081f0:	f04f 0900 	mov.w	r9, #0
 80081f4:	e66f      	b.n	8007ed6 <_strtod_l+0x436>
 80081f6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80081fa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80081fe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008202:	35e2      	adds	r5, #226	@ 0xe2
 8008204:	fa01 f305 	lsl.w	r3, r1, r5
 8008208:	9310      	str	r3, [sp, #64]	@ 0x40
 800820a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800820c:	e7ba      	b.n	8008184 <_strtod_l+0x6e4>
 800820e:	2300      	movs	r3, #0
 8008210:	9310      	str	r3, [sp, #64]	@ 0x40
 8008212:	2301      	movs	r3, #1
 8008214:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008216:	e7b5      	b.n	8008184 <_strtod_l+0x6e4>
 8008218:	462a      	mov	r2, r5
 800821a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800821c:	9805      	ldr	r0, [sp, #20]
 800821e:	f002 f9d1 	bl	800a5c4 <__lshift>
 8008222:	901a      	str	r0, [sp, #104]	@ 0x68
 8008224:	2800      	cmp	r0, #0
 8008226:	d1d9      	bne.n	80081dc <_strtod_l+0x73c>
 8008228:	e655      	b.n	8007ed6 <_strtod_l+0x436>
 800822a:	2e00      	cmp	r6, #0
 800822c:	dd07      	ble.n	800823e <_strtod_l+0x79e>
 800822e:	4649      	mov	r1, r9
 8008230:	4632      	mov	r2, r6
 8008232:	9805      	ldr	r0, [sp, #20]
 8008234:	f002 f9c6 	bl	800a5c4 <__lshift>
 8008238:	4681      	mov	r9, r0
 800823a:	2800      	cmp	r0, #0
 800823c:	d0d8      	beq.n	80081f0 <_strtod_l+0x750>
 800823e:	2f00      	cmp	r7, #0
 8008240:	dd08      	ble.n	8008254 <_strtod_l+0x7b4>
 8008242:	4641      	mov	r1, r8
 8008244:	463a      	mov	r2, r7
 8008246:	9805      	ldr	r0, [sp, #20]
 8008248:	f002 f9bc 	bl	800a5c4 <__lshift>
 800824c:	4680      	mov	r8, r0
 800824e:	2800      	cmp	r0, #0
 8008250:	f43f ae41 	beq.w	8007ed6 <_strtod_l+0x436>
 8008254:	464a      	mov	r2, r9
 8008256:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008258:	9805      	ldr	r0, [sp, #20]
 800825a:	f002 fa3b 	bl	800a6d4 <__mdiff>
 800825e:	4604      	mov	r4, r0
 8008260:	2800      	cmp	r0, #0
 8008262:	f43f ae38 	beq.w	8007ed6 <_strtod_l+0x436>
 8008266:	68c3      	ldr	r3, [r0, #12]
 8008268:	4641      	mov	r1, r8
 800826a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800826c:	2300      	movs	r3, #0
 800826e:	60c3      	str	r3, [r0, #12]
 8008270:	f002 fa14 	bl	800a69c <__mcmp>
 8008274:	2800      	cmp	r0, #0
 8008276:	da45      	bge.n	8008304 <_strtod_l+0x864>
 8008278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800827a:	ea53 030a 	orrs.w	r3, r3, sl
 800827e:	d16b      	bne.n	8008358 <_strtod_l+0x8b8>
 8008280:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008284:	2b00      	cmp	r3, #0
 8008286:	d167      	bne.n	8008358 <_strtod_l+0x8b8>
 8008288:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800828c:	0d1b      	lsrs	r3, r3, #20
 800828e:	051b      	lsls	r3, r3, #20
 8008290:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008294:	d960      	bls.n	8008358 <_strtod_l+0x8b8>
 8008296:	6963      	ldr	r3, [r4, #20]
 8008298:	b913      	cbnz	r3, 80082a0 <_strtod_l+0x800>
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	2b01      	cmp	r3, #1
 800829e:	dd5b      	ble.n	8008358 <_strtod_l+0x8b8>
 80082a0:	4621      	mov	r1, r4
 80082a2:	2201      	movs	r2, #1
 80082a4:	9805      	ldr	r0, [sp, #20]
 80082a6:	f002 f98d 	bl	800a5c4 <__lshift>
 80082aa:	4641      	mov	r1, r8
 80082ac:	4604      	mov	r4, r0
 80082ae:	f002 f9f5 	bl	800a69c <__mcmp>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	dd50      	ble.n	8008358 <_strtod_l+0x8b8>
 80082b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082ba:	9a08      	ldr	r2, [sp, #32]
 80082bc:	0d1b      	lsrs	r3, r3, #20
 80082be:	051b      	lsls	r3, r3, #20
 80082c0:	2a00      	cmp	r2, #0
 80082c2:	d06a      	beq.n	800839a <_strtod_l+0x8fa>
 80082c4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80082c8:	d867      	bhi.n	800839a <_strtod_l+0x8fa>
 80082ca:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80082ce:	f67f ae98 	bls.w	8008002 <_strtod_l+0x562>
 80082d2:	4650      	mov	r0, sl
 80082d4:	4659      	mov	r1, fp
 80082d6:	4b09      	ldr	r3, [pc, #36]	@ (80082fc <_strtod_l+0x85c>)
 80082d8:	2200      	movs	r2, #0
 80082da:	f7f8 f8fd 	bl	80004d8 <__aeabi_dmul>
 80082de:	4b08      	ldr	r3, [pc, #32]	@ (8008300 <_strtod_l+0x860>)
 80082e0:	4682      	mov	sl, r0
 80082e2:	400b      	ands	r3, r1
 80082e4:	468b      	mov	fp, r1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f47f ae00 	bne.w	8007eec <_strtod_l+0x44c>
 80082ec:	2322      	movs	r3, #34	@ 0x22
 80082ee:	9a05      	ldr	r2, [sp, #20]
 80082f0:	6013      	str	r3, [r2, #0]
 80082f2:	e5fb      	b.n	8007eec <_strtod_l+0x44c>
 80082f4:	0800b460 	.word	0x0800b460
 80082f8:	fffffc02 	.word	0xfffffc02
 80082fc:	39500000 	.word	0x39500000
 8008300:	7ff00000 	.word	0x7ff00000
 8008304:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008308:	d165      	bne.n	80083d6 <_strtod_l+0x936>
 800830a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800830c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008310:	b35a      	cbz	r2, 800836a <_strtod_l+0x8ca>
 8008312:	4a99      	ldr	r2, [pc, #612]	@ (8008578 <_strtod_l+0xad8>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d12b      	bne.n	8008370 <_strtod_l+0x8d0>
 8008318:	9b08      	ldr	r3, [sp, #32]
 800831a:	4651      	mov	r1, sl
 800831c:	b303      	cbz	r3, 8008360 <_strtod_l+0x8c0>
 800831e:	465a      	mov	r2, fp
 8008320:	4b96      	ldr	r3, [pc, #600]	@ (800857c <_strtod_l+0xadc>)
 8008322:	4013      	ands	r3, r2
 8008324:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800832c:	d81b      	bhi.n	8008366 <_strtod_l+0x8c6>
 800832e:	0d1b      	lsrs	r3, r3, #20
 8008330:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008334:	fa02 f303 	lsl.w	r3, r2, r3
 8008338:	4299      	cmp	r1, r3
 800833a:	d119      	bne.n	8008370 <_strtod_l+0x8d0>
 800833c:	4b90      	ldr	r3, [pc, #576]	@ (8008580 <_strtod_l+0xae0>)
 800833e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008340:	429a      	cmp	r2, r3
 8008342:	d102      	bne.n	800834a <_strtod_l+0x8aa>
 8008344:	3101      	adds	r1, #1
 8008346:	f43f adc6 	beq.w	8007ed6 <_strtod_l+0x436>
 800834a:	f04f 0a00 	mov.w	sl, #0
 800834e:	4b8b      	ldr	r3, [pc, #556]	@ (800857c <_strtod_l+0xadc>)
 8008350:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008352:	401a      	ands	r2, r3
 8008354:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008358:	9b08      	ldr	r3, [sp, #32]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1b9      	bne.n	80082d2 <_strtod_l+0x832>
 800835e:	e5c5      	b.n	8007eec <_strtod_l+0x44c>
 8008360:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008364:	e7e8      	b.n	8008338 <_strtod_l+0x898>
 8008366:	4613      	mov	r3, r2
 8008368:	e7e6      	b.n	8008338 <_strtod_l+0x898>
 800836a:	ea53 030a 	orrs.w	r3, r3, sl
 800836e:	d0a2      	beq.n	80082b6 <_strtod_l+0x816>
 8008370:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008372:	b1db      	cbz	r3, 80083ac <_strtod_l+0x90c>
 8008374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008376:	4213      	tst	r3, r2
 8008378:	d0ee      	beq.n	8008358 <_strtod_l+0x8b8>
 800837a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800837c:	4650      	mov	r0, sl
 800837e:	4659      	mov	r1, fp
 8008380:	9a08      	ldr	r2, [sp, #32]
 8008382:	b1bb      	cbz	r3, 80083b4 <_strtod_l+0x914>
 8008384:	f7ff fb6a 	bl	8007a5c <sulp>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008390:	f7f7 feec 	bl	800016c <__adddf3>
 8008394:	4682      	mov	sl, r0
 8008396:	468b      	mov	fp, r1
 8008398:	e7de      	b.n	8008358 <_strtod_l+0x8b8>
 800839a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800839e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083a2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80083a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083aa:	e7d5      	b.n	8008358 <_strtod_l+0x8b8>
 80083ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083ae:	ea13 0f0a 	tst.w	r3, sl
 80083b2:	e7e1      	b.n	8008378 <_strtod_l+0x8d8>
 80083b4:	f7ff fb52 	bl	8007a5c <sulp>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083c0:	f7f7 fed2 	bl	8000168 <__aeabi_dsub>
 80083c4:	2200      	movs	r2, #0
 80083c6:	2300      	movs	r3, #0
 80083c8:	4682      	mov	sl, r0
 80083ca:	468b      	mov	fp, r1
 80083cc:	f7f8 faec 	bl	80009a8 <__aeabi_dcmpeq>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d0c1      	beq.n	8008358 <_strtod_l+0x8b8>
 80083d4:	e615      	b.n	8008002 <_strtod_l+0x562>
 80083d6:	4641      	mov	r1, r8
 80083d8:	4620      	mov	r0, r4
 80083da:	f002 facf 	bl	800a97c <__ratio>
 80083de:	2200      	movs	r2, #0
 80083e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80083e4:	4606      	mov	r6, r0
 80083e6:	460f      	mov	r7, r1
 80083e8:	f7f8 faf2 	bl	80009d0 <__aeabi_dcmple>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d06d      	beq.n	80084cc <_strtod_l+0xa2c>
 80083f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d178      	bne.n	80084e8 <_strtod_l+0xa48>
 80083f6:	f1ba 0f00 	cmp.w	sl, #0
 80083fa:	d156      	bne.n	80084aa <_strtod_l+0xa0a>
 80083fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008402:	2b00      	cmp	r3, #0
 8008404:	d158      	bne.n	80084b8 <_strtod_l+0xa18>
 8008406:	2200      	movs	r2, #0
 8008408:	4630      	mov	r0, r6
 800840a:	4639      	mov	r1, r7
 800840c:	4b5d      	ldr	r3, [pc, #372]	@ (8008584 <_strtod_l+0xae4>)
 800840e:	f7f8 fad5 	bl	80009bc <__aeabi_dcmplt>
 8008412:	2800      	cmp	r0, #0
 8008414:	d157      	bne.n	80084c6 <_strtod_l+0xa26>
 8008416:	4630      	mov	r0, r6
 8008418:	4639      	mov	r1, r7
 800841a:	2200      	movs	r2, #0
 800841c:	4b5a      	ldr	r3, [pc, #360]	@ (8008588 <_strtod_l+0xae8>)
 800841e:	f7f8 f85b 	bl	80004d8 <__aeabi_dmul>
 8008422:	4606      	mov	r6, r0
 8008424:	460f      	mov	r7, r1
 8008426:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800842a:	9606      	str	r6, [sp, #24]
 800842c:	9307      	str	r3, [sp, #28]
 800842e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008432:	4d52      	ldr	r5, [pc, #328]	@ (800857c <_strtod_l+0xadc>)
 8008434:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800843a:	401d      	ands	r5, r3
 800843c:	4b53      	ldr	r3, [pc, #332]	@ (800858c <_strtod_l+0xaec>)
 800843e:	429d      	cmp	r5, r3
 8008440:	f040 80aa 	bne.w	8008598 <_strtod_l+0xaf8>
 8008444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008446:	4650      	mov	r0, sl
 8008448:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800844c:	4659      	mov	r1, fp
 800844e:	f002 f9d5 	bl	800a7fc <__ulp>
 8008452:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008456:	f7f8 f83f 	bl	80004d8 <__aeabi_dmul>
 800845a:	4652      	mov	r2, sl
 800845c:	465b      	mov	r3, fp
 800845e:	f7f7 fe85 	bl	800016c <__adddf3>
 8008462:	460b      	mov	r3, r1
 8008464:	4945      	ldr	r1, [pc, #276]	@ (800857c <_strtod_l+0xadc>)
 8008466:	4a4a      	ldr	r2, [pc, #296]	@ (8008590 <_strtod_l+0xaf0>)
 8008468:	4019      	ands	r1, r3
 800846a:	4291      	cmp	r1, r2
 800846c:	4682      	mov	sl, r0
 800846e:	d942      	bls.n	80084f6 <_strtod_l+0xa56>
 8008470:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008472:	4b43      	ldr	r3, [pc, #268]	@ (8008580 <_strtod_l+0xae0>)
 8008474:	429a      	cmp	r2, r3
 8008476:	d103      	bne.n	8008480 <_strtod_l+0x9e0>
 8008478:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800847a:	3301      	adds	r3, #1
 800847c:	f43f ad2b 	beq.w	8007ed6 <_strtod_l+0x436>
 8008480:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008484:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008580 <_strtod_l+0xae0>
 8008488:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800848a:	9805      	ldr	r0, [sp, #20]
 800848c:	f001 fe84 	bl	800a198 <_Bfree>
 8008490:	4649      	mov	r1, r9
 8008492:	9805      	ldr	r0, [sp, #20]
 8008494:	f001 fe80 	bl	800a198 <_Bfree>
 8008498:	4641      	mov	r1, r8
 800849a:	9805      	ldr	r0, [sp, #20]
 800849c:	f001 fe7c 	bl	800a198 <_Bfree>
 80084a0:	4621      	mov	r1, r4
 80084a2:	9805      	ldr	r0, [sp, #20]
 80084a4:	f001 fe78 	bl	800a198 <_Bfree>
 80084a8:	e618      	b.n	80080dc <_strtod_l+0x63c>
 80084aa:	f1ba 0f01 	cmp.w	sl, #1
 80084ae:	d103      	bne.n	80084b8 <_strtod_l+0xa18>
 80084b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f43f ada5 	beq.w	8008002 <_strtod_l+0x562>
 80084b8:	2200      	movs	r2, #0
 80084ba:	4b36      	ldr	r3, [pc, #216]	@ (8008594 <_strtod_l+0xaf4>)
 80084bc:	2600      	movs	r6, #0
 80084be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084c2:	4f30      	ldr	r7, [pc, #192]	@ (8008584 <_strtod_l+0xae4>)
 80084c4:	e7b3      	b.n	800842e <_strtod_l+0x98e>
 80084c6:	2600      	movs	r6, #0
 80084c8:	4f2f      	ldr	r7, [pc, #188]	@ (8008588 <_strtod_l+0xae8>)
 80084ca:	e7ac      	b.n	8008426 <_strtod_l+0x986>
 80084cc:	4630      	mov	r0, r6
 80084ce:	4639      	mov	r1, r7
 80084d0:	4b2d      	ldr	r3, [pc, #180]	@ (8008588 <_strtod_l+0xae8>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	f7f8 f800 	bl	80004d8 <__aeabi_dmul>
 80084d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084da:	4606      	mov	r6, r0
 80084dc:	460f      	mov	r7, r1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0a1      	beq.n	8008426 <_strtod_l+0x986>
 80084e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80084e6:	e7a2      	b.n	800842e <_strtod_l+0x98e>
 80084e8:	2200      	movs	r2, #0
 80084ea:	4b26      	ldr	r3, [pc, #152]	@ (8008584 <_strtod_l+0xae4>)
 80084ec:	4616      	mov	r6, r2
 80084ee:	461f      	mov	r7, r3
 80084f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084f4:	e79b      	b.n	800842e <_strtod_l+0x98e>
 80084f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80084fa:	9b08      	ldr	r3, [sp, #32]
 80084fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1c1      	bne.n	8008488 <_strtod_l+0x9e8>
 8008504:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008508:	0d1b      	lsrs	r3, r3, #20
 800850a:	051b      	lsls	r3, r3, #20
 800850c:	429d      	cmp	r5, r3
 800850e:	d1bb      	bne.n	8008488 <_strtod_l+0x9e8>
 8008510:	4630      	mov	r0, r6
 8008512:	4639      	mov	r1, r7
 8008514:	f7f8 fb28 	bl	8000b68 <__aeabi_d2lz>
 8008518:	f7f7 ffb0 	bl	800047c <__aeabi_l2d>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4630      	mov	r0, r6
 8008522:	4639      	mov	r1, r7
 8008524:	f7f7 fe20 	bl	8000168 <__aeabi_dsub>
 8008528:	460b      	mov	r3, r1
 800852a:	4602      	mov	r2, r0
 800852c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008530:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008536:	ea46 060a 	orr.w	r6, r6, sl
 800853a:	431e      	orrs	r6, r3
 800853c:	d069      	beq.n	8008612 <_strtod_l+0xb72>
 800853e:	a30a      	add	r3, pc, #40	@ (adr r3, 8008568 <_strtod_l+0xac8>)
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	f7f8 fa3a 	bl	80009bc <__aeabi_dcmplt>
 8008548:	2800      	cmp	r0, #0
 800854a:	f47f accf 	bne.w	8007eec <_strtod_l+0x44c>
 800854e:	a308      	add	r3, pc, #32	@ (adr r3, 8008570 <_strtod_l+0xad0>)
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008558:	f7f8 fa4e 	bl	80009f8 <__aeabi_dcmpgt>
 800855c:	2800      	cmp	r0, #0
 800855e:	d093      	beq.n	8008488 <_strtod_l+0x9e8>
 8008560:	e4c4      	b.n	8007eec <_strtod_l+0x44c>
 8008562:	bf00      	nop
 8008564:	f3af 8000 	nop.w
 8008568:	94a03595 	.word	0x94a03595
 800856c:	3fdfffff 	.word	0x3fdfffff
 8008570:	35afe535 	.word	0x35afe535
 8008574:	3fe00000 	.word	0x3fe00000
 8008578:	000fffff 	.word	0x000fffff
 800857c:	7ff00000 	.word	0x7ff00000
 8008580:	7fefffff 	.word	0x7fefffff
 8008584:	3ff00000 	.word	0x3ff00000
 8008588:	3fe00000 	.word	0x3fe00000
 800858c:	7fe00000 	.word	0x7fe00000
 8008590:	7c9fffff 	.word	0x7c9fffff
 8008594:	bff00000 	.word	0xbff00000
 8008598:	9b08      	ldr	r3, [sp, #32]
 800859a:	b323      	cbz	r3, 80085e6 <_strtod_l+0xb46>
 800859c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80085a0:	d821      	bhi.n	80085e6 <_strtod_l+0xb46>
 80085a2:	a327      	add	r3, pc, #156	@ (adr r3, 8008640 <_strtod_l+0xba0>)
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	4630      	mov	r0, r6
 80085aa:	4639      	mov	r1, r7
 80085ac:	f7f8 fa10 	bl	80009d0 <__aeabi_dcmple>
 80085b0:	b1a0      	cbz	r0, 80085dc <_strtod_l+0xb3c>
 80085b2:	4639      	mov	r1, r7
 80085b4:	4630      	mov	r0, r6
 80085b6:	f7f8 fa67 	bl	8000a88 <__aeabi_d2uiz>
 80085ba:	2801      	cmp	r0, #1
 80085bc:	bf38      	it	cc
 80085be:	2001      	movcc	r0, #1
 80085c0:	f7f7 ff10 	bl	80003e4 <__aeabi_ui2d>
 80085c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085c6:	4606      	mov	r6, r0
 80085c8:	460f      	mov	r7, r1
 80085ca:	b9fb      	cbnz	r3, 800860c <_strtod_l+0xb6c>
 80085cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085d0:	9014      	str	r0, [sp, #80]	@ 0x50
 80085d2:	9315      	str	r3, [sp, #84]	@ 0x54
 80085d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80085d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80085dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80085de:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80085e2:	1b5b      	subs	r3, r3, r5
 80085e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80085e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085ea:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80085ee:	f002 f905 	bl	800a7fc <__ulp>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4650      	mov	r0, sl
 80085f8:	4659      	mov	r1, fp
 80085fa:	f7f7 ff6d 	bl	80004d8 <__aeabi_dmul>
 80085fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008602:	f7f7 fdb3 	bl	800016c <__adddf3>
 8008606:	4682      	mov	sl, r0
 8008608:	468b      	mov	fp, r1
 800860a:	e776      	b.n	80084fa <_strtod_l+0xa5a>
 800860c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008610:	e7e0      	b.n	80085d4 <_strtod_l+0xb34>
 8008612:	a30d      	add	r3, pc, #52	@ (adr r3, 8008648 <_strtod_l+0xba8>)
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	f7f8 f9d0 	bl	80009bc <__aeabi_dcmplt>
 800861c:	e79e      	b.n	800855c <_strtod_l+0xabc>
 800861e:	2300      	movs	r3, #0
 8008620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008622:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008624:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	f7ff ba77 	b.w	8007b1a <_strtod_l+0x7a>
 800862c:	2a65      	cmp	r2, #101	@ 0x65
 800862e:	f43f ab6e 	beq.w	8007d0e <_strtod_l+0x26e>
 8008632:	2a45      	cmp	r2, #69	@ 0x45
 8008634:	f43f ab6b 	beq.w	8007d0e <_strtod_l+0x26e>
 8008638:	2301      	movs	r3, #1
 800863a:	f7ff bba6 	b.w	8007d8a <_strtod_l+0x2ea>
 800863e:	bf00      	nop
 8008640:	ffc00000 	.word	0xffc00000
 8008644:	41dfffff 	.word	0x41dfffff
 8008648:	94a03595 	.word	0x94a03595
 800864c:	3fcfffff 	.word	0x3fcfffff

08008650 <_strtod_r>:
 8008650:	4b01      	ldr	r3, [pc, #4]	@ (8008658 <_strtod_r+0x8>)
 8008652:	f7ff ba25 	b.w	8007aa0 <_strtod_l>
 8008656:	bf00      	nop
 8008658:	20000034 	.word	0x20000034

0800865c <_strtol_l.constprop.0>:
 800865c:	2b24      	cmp	r3, #36	@ 0x24
 800865e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008662:	4686      	mov	lr, r0
 8008664:	4690      	mov	r8, r2
 8008666:	d801      	bhi.n	800866c <_strtol_l.constprop.0+0x10>
 8008668:	2b01      	cmp	r3, #1
 800866a:	d106      	bne.n	800867a <_strtol_l.constprop.0+0x1e>
 800866c:	f000 f8ae 	bl	80087cc <__errno>
 8008670:	2316      	movs	r3, #22
 8008672:	6003      	str	r3, [r0, #0]
 8008674:	2000      	movs	r0, #0
 8008676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867a:	460d      	mov	r5, r1
 800867c:	4833      	ldr	r0, [pc, #204]	@ (800874c <_strtol_l.constprop.0+0xf0>)
 800867e:	462a      	mov	r2, r5
 8008680:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008684:	5d06      	ldrb	r6, [r0, r4]
 8008686:	f016 0608 	ands.w	r6, r6, #8
 800868a:	d1f8      	bne.n	800867e <_strtol_l.constprop.0+0x22>
 800868c:	2c2d      	cmp	r4, #45	@ 0x2d
 800868e:	d12d      	bne.n	80086ec <_strtol_l.constprop.0+0x90>
 8008690:	2601      	movs	r6, #1
 8008692:	782c      	ldrb	r4, [r5, #0]
 8008694:	1c95      	adds	r5, r2, #2
 8008696:	f033 0210 	bics.w	r2, r3, #16
 800869a:	d109      	bne.n	80086b0 <_strtol_l.constprop.0+0x54>
 800869c:	2c30      	cmp	r4, #48	@ 0x30
 800869e:	d12a      	bne.n	80086f6 <_strtol_l.constprop.0+0x9a>
 80086a0:	782a      	ldrb	r2, [r5, #0]
 80086a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80086a6:	2a58      	cmp	r2, #88	@ 0x58
 80086a8:	d125      	bne.n	80086f6 <_strtol_l.constprop.0+0x9a>
 80086aa:	2310      	movs	r3, #16
 80086ac:	786c      	ldrb	r4, [r5, #1]
 80086ae:	3502      	adds	r5, #2
 80086b0:	2200      	movs	r2, #0
 80086b2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80086b6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80086ba:	fbbc f9f3 	udiv	r9, ip, r3
 80086be:	4610      	mov	r0, r2
 80086c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80086c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80086c8:	2f09      	cmp	r7, #9
 80086ca:	d81b      	bhi.n	8008704 <_strtol_l.constprop.0+0xa8>
 80086cc:	463c      	mov	r4, r7
 80086ce:	42a3      	cmp	r3, r4
 80086d0:	dd27      	ble.n	8008722 <_strtol_l.constprop.0+0xc6>
 80086d2:	1c57      	adds	r7, r2, #1
 80086d4:	d007      	beq.n	80086e6 <_strtol_l.constprop.0+0x8a>
 80086d6:	4581      	cmp	r9, r0
 80086d8:	d320      	bcc.n	800871c <_strtol_l.constprop.0+0xc0>
 80086da:	d101      	bne.n	80086e0 <_strtol_l.constprop.0+0x84>
 80086dc:	45a2      	cmp	sl, r4
 80086de:	db1d      	blt.n	800871c <_strtol_l.constprop.0+0xc0>
 80086e0:	2201      	movs	r2, #1
 80086e2:	fb00 4003 	mla	r0, r0, r3, r4
 80086e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086ea:	e7eb      	b.n	80086c4 <_strtol_l.constprop.0+0x68>
 80086ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80086ee:	bf04      	itt	eq
 80086f0:	782c      	ldrbeq	r4, [r5, #0]
 80086f2:	1c95      	addeq	r5, r2, #2
 80086f4:	e7cf      	b.n	8008696 <_strtol_l.constprop.0+0x3a>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1da      	bne.n	80086b0 <_strtol_l.constprop.0+0x54>
 80086fa:	2c30      	cmp	r4, #48	@ 0x30
 80086fc:	bf0c      	ite	eq
 80086fe:	2308      	moveq	r3, #8
 8008700:	230a      	movne	r3, #10
 8008702:	e7d5      	b.n	80086b0 <_strtol_l.constprop.0+0x54>
 8008704:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008708:	2f19      	cmp	r7, #25
 800870a:	d801      	bhi.n	8008710 <_strtol_l.constprop.0+0xb4>
 800870c:	3c37      	subs	r4, #55	@ 0x37
 800870e:	e7de      	b.n	80086ce <_strtol_l.constprop.0+0x72>
 8008710:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008714:	2f19      	cmp	r7, #25
 8008716:	d804      	bhi.n	8008722 <_strtol_l.constprop.0+0xc6>
 8008718:	3c57      	subs	r4, #87	@ 0x57
 800871a:	e7d8      	b.n	80086ce <_strtol_l.constprop.0+0x72>
 800871c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008720:	e7e1      	b.n	80086e6 <_strtol_l.constprop.0+0x8a>
 8008722:	1c53      	adds	r3, r2, #1
 8008724:	d108      	bne.n	8008738 <_strtol_l.constprop.0+0xdc>
 8008726:	2322      	movs	r3, #34	@ 0x22
 8008728:	4660      	mov	r0, ip
 800872a:	f8ce 3000 	str.w	r3, [lr]
 800872e:	f1b8 0f00 	cmp.w	r8, #0
 8008732:	d0a0      	beq.n	8008676 <_strtol_l.constprop.0+0x1a>
 8008734:	1e69      	subs	r1, r5, #1
 8008736:	e006      	b.n	8008746 <_strtol_l.constprop.0+0xea>
 8008738:	b106      	cbz	r6, 800873c <_strtol_l.constprop.0+0xe0>
 800873a:	4240      	negs	r0, r0
 800873c:	f1b8 0f00 	cmp.w	r8, #0
 8008740:	d099      	beq.n	8008676 <_strtol_l.constprop.0+0x1a>
 8008742:	2a00      	cmp	r2, #0
 8008744:	d1f6      	bne.n	8008734 <_strtol_l.constprop.0+0xd8>
 8008746:	f8c8 1000 	str.w	r1, [r8]
 800874a:	e794      	b.n	8008676 <_strtol_l.constprop.0+0x1a>
 800874c:	0800b491 	.word	0x0800b491

08008750 <_strtol_r>:
 8008750:	f7ff bf84 	b.w	800865c <_strtol_l.constprop.0>

08008754 <_fwalk_sglue>:
 8008754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008758:	4607      	mov	r7, r0
 800875a:	4688      	mov	r8, r1
 800875c:	4614      	mov	r4, r2
 800875e:	2600      	movs	r6, #0
 8008760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008764:	f1b9 0901 	subs.w	r9, r9, #1
 8008768:	d505      	bpl.n	8008776 <_fwalk_sglue+0x22>
 800876a:	6824      	ldr	r4, [r4, #0]
 800876c:	2c00      	cmp	r4, #0
 800876e:	d1f7      	bne.n	8008760 <_fwalk_sglue+0xc>
 8008770:	4630      	mov	r0, r6
 8008772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008776:	89ab      	ldrh	r3, [r5, #12]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d907      	bls.n	800878c <_fwalk_sglue+0x38>
 800877c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008780:	3301      	adds	r3, #1
 8008782:	d003      	beq.n	800878c <_fwalk_sglue+0x38>
 8008784:	4629      	mov	r1, r5
 8008786:	4638      	mov	r0, r7
 8008788:	47c0      	blx	r8
 800878a:	4306      	orrs	r6, r0
 800878c:	3568      	adds	r5, #104	@ 0x68
 800878e:	e7e9      	b.n	8008764 <_fwalk_sglue+0x10>

08008790 <strncmp>:
 8008790:	b510      	push	{r4, lr}
 8008792:	b16a      	cbz	r2, 80087b0 <strncmp+0x20>
 8008794:	3901      	subs	r1, #1
 8008796:	1884      	adds	r4, r0, r2
 8008798:	f810 2b01 	ldrb.w	r2, [r0], #1
 800879c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d103      	bne.n	80087ac <strncmp+0x1c>
 80087a4:	42a0      	cmp	r0, r4
 80087a6:	d001      	beq.n	80087ac <strncmp+0x1c>
 80087a8:	2a00      	cmp	r2, #0
 80087aa:	d1f5      	bne.n	8008798 <strncmp+0x8>
 80087ac:	1ad0      	subs	r0, r2, r3
 80087ae:	bd10      	pop	{r4, pc}
 80087b0:	4610      	mov	r0, r2
 80087b2:	e7fc      	b.n	80087ae <strncmp+0x1e>

080087b4 <memset>:
 80087b4:	4603      	mov	r3, r0
 80087b6:	4402      	add	r2, r0
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d100      	bne.n	80087be <memset+0xa>
 80087bc:	4770      	bx	lr
 80087be:	f803 1b01 	strb.w	r1, [r3], #1
 80087c2:	e7f9      	b.n	80087b8 <memset+0x4>

080087c4 <_localeconv_r>:
 80087c4:	4800      	ldr	r0, [pc, #0]	@ (80087c8 <_localeconv_r+0x4>)
 80087c6:	4770      	bx	lr
 80087c8:	20000124 	.word	0x20000124

080087cc <__errno>:
 80087cc:	4b01      	ldr	r3, [pc, #4]	@ (80087d4 <__errno+0x8>)
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	200001a0 	.word	0x200001a0

080087d8 <__libc_init_array>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	2600      	movs	r6, #0
 80087dc:	4d0c      	ldr	r5, [pc, #48]	@ (8008810 <__libc_init_array+0x38>)
 80087de:	4c0d      	ldr	r4, [pc, #52]	@ (8008814 <__libc_init_array+0x3c>)
 80087e0:	1b64      	subs	r4, r4, r5
 80087e2:	10a4      	asrs	r4, r4, #2
 80087e4:	42a6      	cmp	r6, r4
 80087e6:	d109      	bne.n	80087fc <__libc_init_array+0x24>
 80087e8:	f002 fd60 	bl	800b2ac <_init>
 80087ec:	2600      	movs	r6, #0
 80087ee:	4d0a      	ldr	r5, [pc, #40]	@ (8008818 <__libc_init_array+0x40>)
 80087f0:	4c0a      	ldr	r4, [pc, #40]	@ (800881c <__libc_init_array+0x44>)
 80087f2:	1b64      	subs	r4, r4, r5
 80087f4:	10a4      	asrs	r4, r4, #2
 80087f6:	42a6      	cmp	r6, r4
 80087f8:	d105      	bne.n	8008806 <__libc_init_array+0x2e>
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008800:	4798      	blx	r3
 8008802:	3601      	adds	r6, #1
 8008804:	e7ee      	b.n	80087e4 <__libc_init_array+0xc>
 8008806:	f855 3b04 	ldr.w	r3, [r5], #4
 800880a:	4798      	blx	r3
 800880c:	3601      	adds	r6, #1
 800880e:	e7f2      	b.n	80087f6 <__libc_init_array+0x1e>
 8008810:	0800b82c 	.word	0x0800b82c
 8008814:	0800b82c 	.word	0x0800b82c
 8008818:	0800b82c 	.word	0x0800b82c
 800881c:	0800b830 	.word	0x0800b830

08008820 <__retarget_lock_init_recursive>:
 8008820:	4770      	bx	lr

08008822 <__retarget_lock_acquire_recursive>:
 8008822:	4770      	bx	lr

08008824 <__retarget_lock_release_recursive>:
 8008824:	4770      	bx	lr

08008826 <memchr>:
 8008826:	4603      	mov	r3, r0
 8008828:	b510      	push	{r4, lr}
 800882a:	b2c9      	uxtb	r1, r1
 800882c:	4402      	add	r2, r0
 800882e:	4293      	cmp	r3, r2
 8008830:	4618      	mov	r0, r3
 8008832:	d101      	bne.n	8008838 <memchr+0x12>
 8008834:	2000      	movs	r0, #0
 8008836:	e003      	b.n	8008840 <memchr+0x1a>
 8008838:	7804      	ldrb	r4, [r0, #0]
 800883a:	3301      	adds	r3, #1
 800883c:	428c      	cmp	r4, r1
 800883e:	d1f6      	bne.n	800882e <memchr+0x8>
 8008840:	bd10      	pop	{r4, pc}

08008842 <memcpy>:
 8008842:	440a      	add	r2, r1
 8008844:	4291      	cmp	r1, r2
 8008846:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800884a:	d100      	bne.n	800884e <memcpy+0xc>
 800884c:	4770      	bx	lr
 800884e:	b510      	push	{r4, lr}
 8008850:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008854:	4291      	cmp	r1, r2
 8008856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800885a:	d1f9      	bne.n	8008850 <memcpy+0xe>
 800885c:	bd10      	pop	{r4, pc}
	...

08008860 <nan>:
 8008860:	2000      	movs	r0, #0
 8008862:	4901      	ldr	r1, [pc, #4]	@ (8008868 <nan+0x8>)
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	7ff80000 	.word	0x7ff80000

0800886c <nanf>:
 800886c:	4800      	ldr	r0, [pc, #0]	@ (8008870 <nanf+0x4>)
 800886e:	4770      	bx	lr
 8008870:	7fc00000 	.word	0x7fc00000

08008874 <quorem>:
 8008874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008878:	6903      	ldr	r3, [r0, #16]
 800887a:	690c      	ldr	r4, [r1, #16]
 800887c:	4607      	mov	r7, r0
 800887e:	42a3      	cmp	r3, r4
 8008880:	db7e      	blt.n	8008980 <quorem+0x10c>
 8008882:	3c01      	subs	r4, #1
 8008884:	00a3      	lsls	r3, r4, #2
 8008886:	f100 0514 	add.w	r5, r0, #20
 800888a:	f101 0814 	add.w	r8, r1, #20
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008894:	9301      	str	r3, [sp, #4]
 8008896:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800889a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800889e:	3301      	adds	r3, #1
 80088a0:	429a      	cmp	r2, r3
 80088a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80088a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088aa:	d32e      	bcc.n	800890a <quorem+0x96>
 80088ac:	f04f 0a00 	mov.w	sl, #0
 80088b0:	46c4      	mov	ip, r8
 80088b2:	46ae      	mov	lr, r5
 80088b4:	46d3      	mov	fp, sl
 80088b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088ba:	b298      	uxth	r0, r3
 80088bc:	fb06 a000 	mla	r0, r6, r0, sl
 80088c0:	0c1b      	lsrs	r3, r3, #16
 80088c2:	0c02      	lsrs	r2, r0, #16
 80088c4:	fb06 2303 	mla	r3, r6, r3, r2
 80088c8:	f8de 2000 	ldr.w	r2, [lr]
 80088cc:	b280      	uxth	r0, r0
 80088ce:	b292      	uxth	r2, r2
 80088d0:	1a12      	subs	r2, r2, r0
 80088d2:	445a      	add	r2, fp
 80088d4:	f8de 0000 	ldr.w	r0, [lr]
 80088d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088dc:	b29b      	uxth	r3, r3
 80088de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80088e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80088e6:	b292      	uxth	r2, r2
 80088e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80088ec:	45e1      	cmp	r9, ip
 80088ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80088f2:	f84e 2b04 	str.w	r2, [lr], #4
 80088f6:	d2de      	bcs.n	80088b6 <quorem+0x42>
 80088f8:	9b00      	ldr	r3, [sp, #0]
 80088fa:	58eb      	ldr	r3, [r5, r3]
 80088fc:	b92b      	cbnz	r3, 800890a <quorem+0x96>
 80088fe:	9b01      	ldr	r3, [sp, #4]
 8008900:	3b04      	subs	r3, #4
 8008902:	429d      	cmp	r5, r3
 8008904:	461a      	mov	r2, r3
 8008906:	d32f      	bcc.n	8008968 <quorem+0xf4>
 8008908:	613c      	str	r4, [r7, #16]
 800890a:	4638      	mov	r0, r7
 800890c:	f001 fec6 	bl	800a69c <__mcmp>
 8008910:	2800      	cmp	r0, #0
 8008912:	db25      	blt.n	8008960 <quorem+0xec>
 8008914:	4629      	mov	r1, r5
 8008916:	2000      	movs	r0, #0
 8008918:	f858 2b04 	ldr.w	r2, [r8], #4
 800891c:	f8d1 c000 	ldr.w	ip, [r1]
 8008920:	fa1f fe82 	uxth.w	lr, r2
 8008924:	fa1f f38c 	uxth.w	r3, ip
 8008928:	eba3 030e 	sub.w	r3, r3, lr
 800892c:	4403      	add	r3, r0
 800892e:	0c12      	lsrs	r2, r2, #16
 8008930:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008934:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008938:	b29b      	uxth	r3, r3
 800893a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800893e:	45c1      	cmp	r9, r8
 8008940:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008944:	f841 3b04 	str.w	r3, [r1], #4
 8008948:	d2e6      	bcs.n	8008918 <quorem+0xa4>
 800894a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800894e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008952:	b922      	cbnz	r2, 800895e <quorem+0xea>
 8008954:	3b04      	subs	r3, #4
 8008956:	429d      	cmp	r5, r3
 8008958:	461a      	mov	r2, r3
 800895a:	d30b      	bcc.n	8008974 <quorem+0x100>
 800895c:	613c      	str	r4, [r7, #16]
 800895e:	3601      	adds	r6, #1
 8008960:	4630      	mov	r0, r6
 8008962:	b003      	add	sp, #12
 8008964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008968:	6812      	ldr	r2, [r2, #0]
 800896a:	3b04      	subs	r3, #4
 800896c:	2a00      	cmp	r2, #0
 800896e:	d1cb      	bne.n	8008908 <quorem+0x94>
 8008970:	3c01      	subs	r4, #1
 8008972:	e7c6      	b.n	8008902 <quorem+0x8e>
 8008974:	6812      	ldr	r2, [r2, #0]
 8008976:	3b04      	subs	r3, #4
 8008978:	2a00      	cmp	r2, #0
 800897a:	d1ef      	bne.n	800895c <quorem+0xe8>
 800897c:	3c01      	subs	r4, #1
 800897e:	e7ea      	b.n	8008956 <quorem+0xe2>
 8008980:	2000      	movs	r0, #0
 8008982:	e7ee      	b.n	8008962 <quorem+0xee>
 8008984:	0000      	movs	r0, r0
	...

08008988 <_dtoa_r>:
 8008988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898c:	4614      	mov	r4, r2
 800898e:	461d      	mov	r5, r3
 8008990:	69c7      	ldr	r7, [r0, #28]
 8008992:	b097      	sub	sp, #92	@ 0x5c
 8008994:	4683      	mov	fp, r0
 8008996:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800899a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800899c:	b97f      	cbnz	r7, 80089be <_dtoa_r+0x36>
 800899e:	2010      	movs	r0, #16
 80089a0:	f001 fa4a 	bl	8009e38 <malloc>
 80089a4:	4602      	mov	r2, r0
 80089a6:	f8cb 001c 	str.w	r0, [fp, #28]
 80089aa:	b920      	cbnz	r0, 80089b6 <_dtoa_r+0x2e>
 80089ac:	21ef      	movs	r1, #239	@ 0xef
 80089ae:	4ba8      	ldr	r3, [pc, #672]	@ (8008c50 <_dtoa_r+0x2c8>)
 80089b0:	48a8      	ldr	r0, [pc, #672]	@ (8008c54 <_dtoa_r+0x2cc>)
 80089b2:	f002 f945 	bl	800ac40 <__assert_func>
 80089b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80089ba:	6007      	str	r7, [r0, #0]
 80089bc:	60c7      	str	r7, [r0, #12]
 80089be:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089c2:	6819      	ldr	r1, [r3, #0]
 80089c4:	b159      	cbz	r1, 80089de <_dtoa_r+0x56>
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	2301      	movs	r3, #1
 80089ca:	4093      	lsls	r3, r2
 80089cc:	604a      	str	r2, [r1, #4]
 80089ce:	608b      	str	r3, [r1, #8]
 80089d0:	4658      	mov	r0, fp
 80089d2:	f001 fbe1 	bl	800a198 <_Bfree>
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	1e2b      	subs	r3, r5, #0
 80089e0:	bfaf      	iteee	ge
 80089e2:	2300      	movge	r3, #0
 80089e4:	2201      	movlt	r2, #1
 80089e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80089ea:	9303      	strlt	r3, [sp, #12]
 80089ec:	bfa8      	it	ge
 80089ee:	6033      	strge	r3, [r6, #0]
 80089f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80089f4:	4b98      	ldr	r3, [pc, #608]	@ (8008c58 <_dtoa_r+0x2d0>)
 80089f6:	bfb8      	it	lt
 80089f8:	6032      	strlt	r2, [r6, #0]
 80089fa:	ea33 0308 	bics.w	r3, r3, r8
 80089fe:	d112      	bne.n	8008a26 <_dtoa_r+0x9e>
 8008a00:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a04:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008a06:	6013      	str	r3, [r2, #0]
 8008a08:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008a0c:	4323      	orrs	r3, r4
 8008a0e:	f000 8550 	beq.w	80094b2 <_dtoa_r+0xb2a>
 8008a12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a14:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008c5c <_dtoa_r+0x2d4>
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 8552 	beq.w	80094c2 <_dtoa_r+0xb3a>
 8008a1e:	f10a 0303 	add.w	r3, sl, #3
 8008a22:	f000 bd4c 	b.w	80094be <_dtoa_r+0xb36>
 8008a26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a2a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a32:	2200      	movs	r2, #0
 8008a34:	2300      	movs	r3, #0
 8008a36:	f7f7 ffb7 	bl	80009a8 <__aeabi_dcmpeq>
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	b158      	cbz	r0, 8008a56 <_dtoa_r+0xce>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008a42:	6013      	str	r3, [r2, #0]
 8008a44:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a46:	b113      	cbz	r3, 8008a4e <_dtoa_r+0xc6>
 8008a48:	4b85      	ldr	r3, [pc, #532]	@ (8008c60 <_dtoa_r+0x2d8>)
 8008a4a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008c64 <_dtoa_r+0x2dc>
 8008a52:	f000 bd36 	b.w	80094c2 <_dtoa_r+0xb3a>
 8008a56:	ab14      	add	r3, sp, #80	@ 0x50
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	ab15      	add	r3, sp, #84	@ 0x54
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	4658      	mov	r0, fp
 8008a60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a64:	f001 ff32 	bl	800a8cc <__d2b>
 8008a68:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008a6c:	4681      	mov	r9, r0
 8008a6e:	2e00      	cmp	r6, #0
 8008a70:	d077      	beq.n	8008b62 <_dtoa_r+0x1da>
 8008a72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a78:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a80:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008a84:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008a88:	9712      	str	r7, [sp, #72]	@ 0x48
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	4b76      	ldr	r3, [pc, #472]	@ (8008c68 <_dtoa_r+0x2e0>)
 8008a90:	f7f7 fb6a 	bl	8000168 <__aeabi_dsub>
 8008a94:	a368      	add	r3, pc, #416	@ (adr r3, 8008c38 <_dtoa_r+0x2b0>)
 8008a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9a:	f7f7 fd1d 	bl	80004d8 <__aeabi_dmul>
 8008a9e:	a368      	add	r3, pc, #416	@ (adr r3, 8008c40 <_dtoa_r+0x2b8>)
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	f7f7 fb62 	bl	800016c <__adddf3>
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	4630      	mov	r0, r6
 8008aac:	460d      	mov	r5, r1
 8008aae:	f7f7 fca9 	bl	8000404 <__aeabi_i2d>
 8008ab2:	a365      	add	r3, pc, #404	@ (adr r3, 8008c48 <_dtoa_r+0x2c0>)
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	f7f7 fd0e 	bl	80004d8 <__aeabi_dmul>
 8008abc:	4602      	mov	r2, r0
 8008abe:	460b      	mov	r3, r1
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	f7f7 fb52 	bl	800016c <__adddf3>
 8008ac8:	4604      	mov	r4, r0
 8008aca:	460d      	mov	r5, r1
 8008acc:	f7f7 ffb4 	bl	8000a38 <__aeabi_d2iz>
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	f7f7 ff6f 	bl	80009bc <__aeabi_dcmplt>
 8008ade:	b140      	cbz	r0, 8008af2 <_dtoa_r+0x16a>
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f7f7 fc8f 	bl	8000404 <__aeabi_i2d>
 8008ae6:	4622      	mov	r2, r4
 8008ae8:	462b      	mov	r3, r5
 8008aea:	f7f7 ff5d 	bl	80009a8 <__aeabi_dcmpeq>
 8008aee:	b900      	cbnz	r0, 8008af2 <_dtoa_r+0x16a>
 8008af0:	3f01      	subs	r7, #1
 8008af2:	2f16      	cmp	r7, #22
 8008af4:	d853      	bhi.n	8008b9e <_dtoa_r+0x216>
 8008af6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008afa:	4b5c      	ldr	r3, [pc, #368]	@ (8008c6c <_dtoa_r+0x2e4>)
 8008afc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	f7f7 ff5a 	bl	80009bc <__aeabi_dcmplt>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d04a      	beq.n	8008ba2 <_dtoa_r+0x21a>
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	3f01      	subs	r7, #1
 8008b10:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b14:	1b9b      	subs	r3, r3, r6
 8008b16:	1e5a      	subs	r2, r3, #1
 8008b18:	bf46      	itte	mi
 8008b1a:	f1c3 0801 	rsbmi	r8, r3, #1
 8008b1e:	2300      	movmi	r3, #0
 8008b20:	f04f 0800 	movpl.w	r8, #0
 8008b24:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b26:	bf48      	it	mi
 8008b28:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008b2a:	2f00      	cmp	r7, #0
 8008b2c:	db3b      	blt.n	8008ba6 <_dtoa_r+0x21e>
 8008b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b30:	970e      	str	r7, [sp, #56]	@ 0x38
 8008b32:	443b      	add	r3, r7
 8008b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b36:	2300      	movs	r3, #0
 8008b38:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b3c:	2b09      	cmp	r3, #9
 8008b3e:	d866      	bhi.n	8008c0e <_dtoa_r+0x286>
 8008b40:	2b05      	cmp	r3, #5
 8008b42:	bfc4      	itt	gt
 8008b44:	3b04      	subgt	r3, #4
 8008b46:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008b48:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b4a:	bfc8      	it	gt
 8008b4c:	2400      	movgt	r4, #0
 8008b4e:	f1a3 0302 	sub.w	r3, r3, #2
 8008b52:	bfd8      	it	le
 8008b54:	2401      	movle	r4, #1
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d864      	bhi.n	8008c24 <_dtoa_r+0x29c>
 8008b5a:	e8df f003 	tbb	[pc, r3]
 8008b5e:	382b      	.short	0x382b
 8008b60:	5636      	.short	0x5636
 8008b62:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008b66:	441e      	add	r6, r3
 8008b68:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	bfc1      	itttt	gt
 8008b70:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b74:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b78:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008b7c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008b80:	bfd6      	itet	le
 8008b82:	f1c3 0320 	rsble	r3, r3, #32
 8008b86:	ea48 0003 	orrgt.w	r0, r8, r3
 8008b8a:	fa04 f003 	lslle.w	r0, r4, r3
 8008b8e:	f7f7 fc29 	bl	80003e4 <__aeabi_ui2d>
 8008b92:	2201      	movs	r2, #1
 8008b94:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b98:	3e01      	subs	r6, #1
 8008b9a:	9212      	str	r2, [sp, #72]	@ 0x48
 8008b9c:	e775      	b.n	8008a8a <_dtoa_r+0x102>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e7b6      	b.n	8008b10 <_dtoa_r+0x188>
 8008ba2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008ba4:	e7b5      	b.n	8008b12 <_dtoa_r+0x18a>
 8008ba6:	427b      	negs	r3, r7
 8008ba8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008baa:	2300      	movs	r3, #0
 8008bac:	eba8 0807 	sub.w	r8, r8, r7
 8008bb0:	930e      	str	r3, [sp, #56]	@ 0x38
 8008bb2:	e7c2      	b.n	8008b3a <_dtoa_r+0x1b2>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bb8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	dc35      	bgt.n	8008c2a <_dtoa_r+0x2a2>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008bc6:	9221      	str	r2, [sp, #132]	@ 0x84
 8008bc8:	e00b      	b.n	8008be2 <_dtoa_r+0x25a>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e7f3      	b.n	8008bb6 <_dtoa_r+0x22e>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bd4:	18fb      	adds	r3, r7, r3
 8008bd6:	9308      	str	r3, [sp, #32]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	9307      	str	r3, [sp, #28]
 8008bde:	bfb8      	it	lt
 8008be0:	2301      	movlt	r3, #1
 8008be2:	2100      	movs	r1, #0
 8008be4:	2204      	movs	r2, #4
 8008be6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008bea:	f102 0514 	add.w	r5, r2, #20
 8008bee:	429d      	cmp	r5, r3
 8008bf0:	d91f      	bls.n	8008c32 <_dtoa_r+0x2aa>
 8008bf2:	6041      	str	r1, [r0, #4]
 8008bf4:	4658      	mov	r0, fp
 8008bf6:	f001 fa8f 	bl	800a118 <_Balloc>
 8008bfa:	4682      	mov	sl, r0
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d139      	bne.n	8008c74 <_dtoa_r+0x2ec>
 8008c00:	4602      	mov	r2, r0
 8008c02:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c06:	4b1a      	ldr	r3, [pc, #104]	@ (8008c70 <_dtoa_r+0x2e8>)
 8008c08:	e6d2      	b.n	80089b0 <_dtoa_r+0x28>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e7e0      	b.n	8008bd0 <_dtoa_r+0x248>
 8008c0e:	2401      	movs	r4, #1
 8008c10:	2300      	movs	r3, #0
 8008c12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c14:	9320      	str	r3, [sp, #128]	@ 0x80
 8008c16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008c20:	2312      	movs	r3, #18
 8008c22:	e7d0      	b.n	8008bc6 <_dtoa_r+0x23e>
 8008c24:	2301      	movs	r3, #1
 8008c26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c28:	e7f5      	b.n	8008c16 <_dtoa_r+0x28e>
 8008c2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c2c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008c30:	e7d7      	b.n	8008be2 <_dtoa_r+0x25a>
 8008c32:	3101      	adds	r1, #1
 8008c34:	0052      	lsls	r2, r2, #1
 8008c36:	e7d8      	b.n	8008bea <_dtoa_r+0x262>
 8008c38:	636f4361 	.word	0x636f4361
 8008c3c:	3fd287a7 	.word	0x3fd287a7
 8008c40:	8b60c8b3 	.word	0x8b60c8b3
 8008c44:	3fc68a28 	.word	0x3fc68a28
 8008c48:	509f79fb 	.word	0x509f79fb
 8008c4c:	3fd34413 	.word	0x3fd34413
 8008c50:	0800b59e 	.word	0x0800b59e
 8008c54:	0800b5b5 	.word	0x0800b5b5
 8008c58:	7ff00000 	.word	0x7ff00000
 8008c5c:	0800b59a 	.word	0x0800b59a
 8008c60:	0800b40b 	.word	0x0800b40b
 8008c64:	0800b40a 	.word	0x0800b40a
 8008c68:	3ff80000 	.word	0x3ff80000
 8008c6c:	0800b720 	.word	0x0800b720
 8008c70:	0800b60d 	.word	0x0800b60d
 8008c74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c78:	6018      	str	r0, [r3, #0]
 8008c7a:	9b07      	ldr	r3, [sp, #28]
 8008c7c:	2b0e      	cmp	r3, #14
 8008c7e:	f200 80a4 	bhi.w	8008dca <_dtoa_r+0x442>
 8008c82:	2c00      	cmp	r4, #0
 8008c84:	f000 80a1 	beq.w	8008dca <_dtoa_r+0x442>
 8008c88:	2f00      	cmp	r7, #0
 8008c8a:	dd33      	ble.n	8008cf4 <_dtoa_r+0x36c>
 8008c8c:	4b86      	ldr	r3, [pc, #536]	@ (8008ea8 <_dtoa_r+0x520>)
 8008c8e:	f007 020f 	and.w	r2, r7, #15
 8008c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c96:	05f8      	lsls	r0, r7, #23
 8008c98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ca0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008ca4:	d516      	bpl.n	8008cd4 <_dtoa_r+0x34c>
 8008ca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008caa:	4b80      	ldr	r3, [pc, #512]	@ (8008eac <_dtoa_r+0x524>)
 8008cac:	2603      	movs	r6, #3
 8008cae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cb2:	f7f7 fd3b 	bl	800072c <__aeabi_ddiv>
 8008cb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cba:	f004 040f 	and.w	r4, r4, #15
 8008cbe:	4d7b      	ldr	r5, [pc, #492]	@ (8008eac <_dtoa_r+0x524>)
 8008cc0:	b954      	cbnz	r4, 8008cd8 <_dtoa_r+0x350>
 8008cc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cca:	f7f7 fd2f 	bl	800072c <__aeabi_ddiv>
 8008cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cd2:	e028      	b.n	8008d26 <_dtoa_r+0x39e>
 8008cd4:	2602      	movs	r6, #2
 8008cd6:	e7f2      	b.n	8008cbe <_dtoa_r+0x336>
 8008cd8:	07e1      	lsls	r1, r4, #31
 8008cda:	d508      	bpl.n	8008cee <_dtoa_r+0x366>
 8008cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ce0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ce4:	f7f7 fbf8 	bl	80004d8 <__aeabi_dmul>
 8008ce8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cec:	3601      	adds	r6, #1
 8008cee:	1064      	asrs	r4, r4, #1
 8008cf0:	3508      	adds	r5, #8
 8008cf2:	e7e5      	b.n	8008cc0 <_dtoa_r+0x338>
 8008cf4:	f000 80d2 	beq.w	8008e9c <_dtoa_r+0x514>
 8008cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cfc:	427c      	negs	r4, r7
 8008cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8008ea8 <_dtoa_r+0x520>)
 8008d00:	f004 020f 	and.w	r2, r4, #15
 8008d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	f7f7 fbe4 	bl	80004d8 <__aeabi_dmul>
 8008d10:	2602      	movs	r6, #2
 8008d12:	2300      	movs	r3, #0
 8008d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d18:	4d64      	ldr	r5, [pc, #400]	@ (8008eac <_dtoa_r+0x524>)
 8008d1a:	1124      	asrs	r4, r4, #4
 8008d1c:	2c00      	cmp	r4, #0
 8008d1e:	f040 80b2 	bne.w	8008e86 <_dtoa_r+0x4fe>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1d3      	bne.n	8008cce <_dtoa_r+0x346>
 8008d26:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 80b7 	beq.w	8008ea0 <_dtoa_r+0x518>
 8008d32:	2200      	movs	r2, #0
 8008d34:	4620      	mov	r0, r4
 8008d36:	4629      	mov	r1, r5
 8008d38:	4b5d      	ldr	r3, [pc, #372]	@ (8008eb0 <_dtoa_r+0x528>)
 8008d3a:	f7f7 fe3f 	bl	80009bc <__aeabi_dcmplt>
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	f000 80ae 	beq.w	8008ea0 <_dtoa_r+0x518>
 8008d44:	9b07      	ldr	r3, [sp, #28]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 80aa 	beq.w	8008ea0 <_dtoa_r+0x518>
 8008d4c:	9b08      	ldr	r3, [sp, #32]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	dd37      	ble.n	8008dc2 <_dtoa_r+0x43a>
 8008d52:	1e7b      	subs	r3, r7, #1
 8008d54:	4620      	mov	r0, r4
 8008d56:	9304      	str	r3, [sp, #16]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	4b55      	ldr	r3, [pc, #340]	@ (8008eb4 <_dtoa_r+0x52c>)
 8008d5e:	f7f7 fbbb 	bl	80004d8 <__aeabi_dmul>
 8008d62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d66:	9c08      	ldr	r4, [sp, #32]
 8008d68:	3601      	adds	r6, #1
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	f7f7 fb4a 	bl	8000404 <__aeabi_i2d>
 8008d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d74:	f7f7 fbb0 	bl	80004d8 <__aeabi_dmul>
 8008d78:	2200      	movs	r2, #0
 8008d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8008eb8 <_dtoa_r+0x530>)
 8008d7c:	f7f7 f9f6 	bl	800016c <__adddf3>
 8008d80:	4605      	mov	r5, r0
 8008d82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008d86:	2c00      	cmp	r4, #0
 8008d88:	f040 809a 	bne.w	8008ec0 <_dtoa_r+0x538>
 8008d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d90:	2200      	movs	r2, #0
 8008d92:	4b4a      	ldr	r3, [pc, #296]	@ (8008ebc <_dtoa_r+0x534>)
 8008d94:	f7f7 f9e8 	bl	8000168 <__aeabi_dsub>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008da0:	462a      	mov	r2, r5
 8008da2:	4633      	mov	r3, r6
 8008da4:	f7f7 fe28 	bl	80009f8 <__aeabi_dcmpgt>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	f040 828e 	bne.w	80092ca <_dtoa_r+0x942>
 8008dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008db2:	462a      	mov	r2, r5
 8008db4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008db8:	f7f7 fe00 	bl	80009bc <__aeabi_dcmplt>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	f040 8127 	bne.w	8009010 <_dtoa_r+0x688>
 8008dc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008dc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008dca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f2c0 8163 	blt.w	8009098 <_dtoa_r+0x710>
 8008dd2:	2f0e      	cmp	r7, #14
 8008dd4:	f300 8160 	bgt.w	8009098 <_dtoa_r+0x710>
 8008dd8:	4b33      	ldr	r3, [pc, #204]	@ (8008ea8 <_dtoa_r+0x520>)
 8008dda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008dde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008de2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008de6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	da03      	bge.n	8008df4 <_dtoa_r+0x46c>
 8008dec:	9b07      	ldr	r3, [sp, #28]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f340 8100 	ble.w	8008ff4 <_dtoa_r+0x66c>
 8008df4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008df8:	4656      	mov	r6, sl
 8008dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dfe:	4620      	mov	r0, r4
 8008e00:	4629      	mov	r1, r5
 8008e02:	f7f7 fc93 	bl	800072c <__aeabi_ddiv>
 8008e06:	f7f7 fe17 	bl	8000a38 <__aeabi_d2iz>
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	f7f7 fafa 	bl	8000404 <__aeabi_i2d>
 8008e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e14:	f7f7 fb60 	bl	80004d8 <__aeabi_dmul>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	4629      	mov	r1, r5
 8008e20:	f7f7 f9a2 	bl	8000168 <__aeabi_dsub>
 8008e24:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e28:	9d07      	ldr	r5, [sp, #28]
 8008e2a:	f806 4b01 	strb.w	r4, [r6], #1
 8008e2e:	eba6 040a 	sub.w	r4, r6, sl
 8008e32:	42a5      	cmp	r5, r4
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	f040 8116 	bne.w	8009068 <_dtoa_r+0x6e0>
 8008e3c:	f7f7 f996 	bl	800016c <__adddf3>
 8008e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e44:	4604      	mov	r4, r0
 8008e46:	460d      	mov	r5, r1
 8008e48:	f7f7 fdd6 	bl	80009f8 <__aeabi_dcmpgt>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	f040 80f8 	bne.w	8009042 <_dtoa_r+0x6ba>
 8008e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e56:	4620      	mov	r0, r4
 8008e58:	4629      	mov	r1, r5
 8008e5a:	f7f7 fda5 	bl	80009a8 <__aeabi_dcmpeq>
 8008e5e:	b118      	cbz	r0, 8008e68 <_dtoa_r+0x4e0>
 8008e60:	f018 0f01 	tst.w	r8, #1
 8008e64:	f040 80ed 	bne.w	8009042 <_dtoa_r+0x6ba>
 8008e68:	4649      	mov	r1, r9
 8008e6a:	4658      	mov	r0, fp
 8008e6c:	f001 f994 	bl	800a198 <_Bfree>
 8008e70:	2300      	movs	r3, #0
 8008e72:	7033      	strb	r3, [r6, #0]
 8008e74:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e76:	3701      	adds	r7, #1
 8008e78:	601f      	str	r7, [r3, #0]
 8008e7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 8320 	beq.w	80094c2 <_dtoa_r+0xb3a>
 8008e82:	601e      	str	r6, [r3, #0]
 8008e84:	e31d      	b.n	80094c2 <_dtoa_r+0xb3a>
 8008e86:	07e2      	lsls	r2, r4, #31
 8008e88:	d505      	bpl.n	8008e96 <_dtoa_r+0x50e>
 8008e8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e8e:	f7f7 fb23 	bl	80004d8 <__aeabi_dmul>
 8008e92:	2301      	movs	r3, #1
 8008e94:	3601      	adds	r6, #1
 8008e96:	1064      	asrs	r4, r4, #1
 8008e98:	3508      	adds	r5, #8
 8008e9a:	e73f      	b.n	8008d1c <_dtoa_r+0x394>
 8008e9c:	2602      	movs	r6, #2
 8008e9e:	e742      	b.n	8008d26 <_dtoa_r+0x39e>
 8008ea0:	9c07      	ldr	r4, [sp, #28]
 8008ea2:	9704      	str	r7, [sp, #16]
 8008ea4:	e761      	b.n	8008d6a <_dtoa_r+0x3e2>
 8008ea6:	bf00      	nop
 8008ea8:	0800b720 	.word	0x0800b720
 8008eac:	0800b6f8 	.word	0x0800b6f8
 8008eb0:	3ff00000 	.word	0x3ff00000
 8008eb4:	40240000 	.word	0x40240000
 8008eb8:	401c0000 	.word	0x401c0000
 8008ebc:	40140000 	.word	0x40140000
 8008ec0:	4b70      	ldr	r3, [pc, #448]	@ (8009084 <_dtoa_r+0x6fc>)
 8008ec2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ec4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ec8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ecc:	4454      	add	r4, sl
 8008ece:	2900      	cmp	r1, #0
 8008ed0:	d045      	beq.n	8008f5e <_dtoa_r+0x5d6>
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	496c      	ldr	r1, [pc, #432]	@ (8009088 <_dtoa_r+0x700>)
 8008ed6:	f7f7 fc29 	bl	800072c <__aeabi_ddiv>
 8008eda:	4633      	mov	r3, r6
 8008edc:	462a      	mov	r2, r5
 8008ede:	f7f7 f943 	bl	8000168 <__aeabi_dsub>
 8008ee2:	4656      	mov	r6, sl
 8008ee4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eec:	f7f7 fda4 	bl	8000a38 <__aeabi_d2iz>
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	f7f7 fa87 	bl	8000404 <__aeabi_i2d>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008efe:	f7f7 f933 	bl	8000168 <__aeabi_dsub>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	3530      	adds	r5, #48	@ 0x30
 8008f08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f10:	f806 5b01 	strb.w	r5, [r6], #1
 8008f14:	f7f7 fd52 	bl	80009bc <__aeabi_dcmplt>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d163      	bne.n	8008fe4 <_dtoa_r+0x65c>
 8008f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f20:	2000      	movs	r0, #0
 8008f22:	495a      	ldr	r1, [pc, #360]	@ (800908c <_dtoa_r+0x704>)
 8008f24:	f7f7 f920 	bl	8000168 <__aeabi_dsub>
 8008f28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f2c:	f7f7 fd46 	bl	80009bc <__aeabi_dcmplt>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	f040 8087 	bne.w	8009044 <_dtoa_r+0x6bc>
 8008f36:	42a6      	cmp	r6, r4
 8008f38:	f43f af43 	beq.w	8008dc2 <_dtoa_r+0x43a>
 8008f3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f40:	2200      	movs	r2, #0
 8008f42:	4b53      	ldr	r3, [pc, #332]	@ (8009090 <_dtoa_r+0x708>)
 8008f44:	f7f7 fac8 	bl	80004d8 <__aeabi_dmul>
 8008f48:	2200      	movs	r2, #0
 8008f4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f52:	4b4f      	ldr	r3, [pc, #316]	@ (8009090 <_dtoa_r+0x708>)
 8008f54:	f7f7 fac0 	bl	80004d8 <__aeabi_dmul>
 8008f58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f5c:	e7c4      	b.n	8008ee8 <_dtoa_r+0x560>
 8008f5e:	4631      	mov	r1, r6
 8008f60:	4628      	mov	r0, r5
 8008f62:	f7f7 fab9 	bl	80004d8 <__aeabi_dmul>
 8008f66:	4656      	mov	r6, sl
 8008f68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f6c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f72:	f7f7 fd61 	bl	8000a38 <__aeabi_d2iz>
 8008f76:	4605      	mov	r5, r0
 8008f78:	f7f7 fa44 	bl	8000404 <__aeabi_i2d>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f84:	f7f7 f8f0 	bl	8000168 <__aeabi_dsub>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	3530      	adds	r5, #48	@ 0x30
 8008f8e:	f806 5b01 	strb.w	r5, [r6], #1
 8008f92:	42a6      	cmp	r6, r4
 8008f94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f98:	f04f 0200 	mov.w	r2, #0
 8008f9c:	d124      	bne.n	8008fe8 <_dtoa_r+0x660>
 8008f9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008fa2:	4b39      	ldr	r3, [pc, #228]	@ (8009088 <_dtoa_r+0x700>)
 8008fa4:	f7f7 f8e2 	bl	800016c <__adddf3>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fb0:	f7f7 fd22 	bl	80009f8 <__aeabi_dcmpgt>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	d145      	bne.n	8009044 <_dtoa_r+0x6bc>
 8008fb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	4932      	ldr	r1, [pc, #200]	@ (8009088 <_dtoa_r+0x700>)
 8008fc0:	f7f7 f8d2 	bl	8000168 <__aeabi_dsub>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fcc:	f7f7 fcf6 	bl	80009bc <__aeabi_dcmplt>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	f43f aef6 	beq.w	8008dc2 <_dtoa_r+0x43a>
 8008fd6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008fd8:	1e73      	subs	r3, r6, #1
 8008fda:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fdc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fe0:	2b30      	cmp	r3, #48	@ 0x30
 8008fe2:	d0f8      	beq.n	8008fd6 <_dtoa_r+0x64e>
 8008fe4:	9f04      	ldr	r7, [sp, #16]
 8008fe6:	e73f      	b.n	8008e68 <_dtoa_r+0x4e0>
 8008fe8:	4b29      	ldr	r3, [pc, #164]	@ (8009090 <_dtoa_r+0x708>)
 8008fea:	f7f7 fa75 	bl	80004d8 <__aeabi_dmul>
 8008fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ff2:	e7bc      	b.n	8008f6e <_dtoa_r+0x5e6>
 8008ff4:	d10c      	bne.n	8009010 <_dtoa_r+0x688>
 8008ff6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	4b25      	ldr	r3, [pc, #148]	@ (8009094 <_dtoa_r+0x70c>)
 8008ffe:	f7f7 fa6b 	bl	80004d8 <__aeabi_dmul>
 8009002:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009006:	f7f7 fced 	bl	80009e4 <__aeabi_dcmpge>
 800900a:	2800      	cmp	r0, #0
 800900c:	f000 815b 	beq.w	80092c6 <_dtoa_r+0x93e>
 8009010:	2400      	movs	r4, #0
 8009012:	4625      	mov	r5, r4
 8009014:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009016:	4656      	mov	r6, sl
 8009018:	43db      	mvns	r3, r3
 800901a:	9304      	str	r3, [sp, #16]
 800901c:	2700      	movs	r7, #0
 800901e:	4621      	mov	r1, r4
 8009020:	4658      	mov	r0, fp
 8009022:	f001 f8b9 	bl	800a198 <_Bfree>
 8009026:	2d00      	cmp	r5, #0
 8009028:	d0dc      	beq.n	8008fe4 <_dtoa_r+0x65c>
 800902a:	b12f      	cbz	r7, 8009038 <_dtoa_r+0x6b0>
 800902c:	42af      	cmp	r7, r5
 800902e:	d003      	beq.n	8009038 <_dtoa_r+0x6b0>
 8009030:	4639      	mov	r1, r7
 8009032:	4658      	mov	r0, fp
 8009034:	f001 f8b0 	bl	800a198 <_Bfree>
 8009038:	4629      	mov	r1, r5
 800903a:	4658      	mov	r0, fp
 800903c:	f001 f8ac 	bl	800a198 <_Bfree>
 8009040:	e7d0      	b.n	8008fe4 <_dtoa_r+0x65c>
 8009042:	9704      	str	r7, [sp, #16]
 8009044:	4633      	mov	r3, r6
 8009046:	461e      	mov	r6, r3
 8009048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800904c:	2a39      	cmp	r2, #57	@ 0x39
 800904e:	d107      	bne.n	8009060 <_dtoa_r+0x6d8>
 8009050:	459a      	cmp	sl, r3
 8009052:	d1f8      	bne.n	8009046 <_dtoa_r+0x6be>
 8009054:	9a04      	ldr	r2, [sp, #16]
 8009056:	3201      	adds	r2, #1
 8009058:	9204      	str	r2, [sp, #16]
 800905a:	2230      	movs	r2, #48	@ 0x30
 800905c:	f88a 2000 	strb.w	r2, [sl]
 8009060:	781a      	ldrb	r2, [r3, #0]
 8009062:	3201      	adds	r2, #1
 8009064:	701a      	strb	r2, [r3, #0]
 8009066:	e7bd      	b.n	8008fe4 <_dtoa_r+0x65c>
 8009068:	2200      	movs	r2, #0
 800906a:	4b09      	ldr	r3, [pc, #36]	@ (8009090 <_dtoa_r+0x708>)
 800906c:	f7f7 fa34 	bl	80004d8 <__aeabi_dmul>
 8009070:	2200      	movs	r2, #0
 8009072:	2300      	movs	r3, #0
 8009074:	4604      	mov	r4, r0
 8009076:	460d      	mov	r5, r1
 8009078:	f7f7 fc96 	bl	80009a8 <__aeabi_dcmpeq>
 800907c:	2800      	cmp	r0, #0
 800907e:	f43f aebc 	beq.w	8008dfa <_dtoa_r+0x472>
 8009082:	e6f1      	b.n	8008e68 <_dtoa_r+0x4e0>
 8009084:	0800b720 	.word	0x0800b720
 8009088:	3fe00000 	.word	0x3fe00000
 800908c:	3ff00000 	.word	0x3ff00000
 8009090:	40240000 	.word	0x40240000
 8009094:	40140000 	.word	0x40140000
 8009098:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800909a:	2a00      	cmp	r2, #0
 800909c:	f000 80db 	beq.w	8009256 <_dtoa_r+0x8ce>
 80090a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80090a2:	2a01      	cmp	r2, #1
 80090a4:	f300 80bf 	bgt.w	8009226 <_dtoa_r+0x89e>
 80090a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80090aa:	2a00      	cmp	r2, #0
 80090ac:	f000 80b7 	beq.w	800921e <_dtoa_r+0x896>
 80090b0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80090b4:	4646      	mov	r6, r8
 80090b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090ba:	2101      	movs	r1, #1
 80090bc:	441a      	add	r2, r3
 80090be:	4658      	mov	r0, fp
 80090c0:	4498      	add	r8, r3
 80090c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80090c4:	f001 f966 	bl	800a394 <__i2b>
 80090c8:	4605      	mov	r5, r0
 80090ca:	b15e      	cbz	r6, 80090e4 <_dtoa_r+0x75c>
 80090cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	dd08      	ble.n	80090e4 <_dtoa_r+0x75c>
 80090d2:	42b3      	cmp	r3, r6
 80090d4:	bfa8      	it	ge
 80090d6:	4633      	movge	r3, r6
 80090d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090da:	eba8 0803 	sub.w	r8, r8, r3
 80090de:	1af6      	subs	r6, r6, r3
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80090e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090e6:	b1f3      	cbz	r3, 8009126 <_dtoa_r+0x79e>
 80090e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 80b7 	beq.w	800925e <_dtoa_r+0x8d6>
 80090f0:	b18c      	cbz	r4, 8009116 <_dtoa_r+0x78e>
 80090f2:	4629      	mov	r1, r5
 80090f4:	4622      	mov	r2, r4
 80090f6:	4658      	mov	r0, fp
 80090f8:	f001 fa0a 	bl	800a510 <__pow5mult>
 80090fc:	464a      	mov	r2, r9
 80090fe:	4601      	mov	r1, r0
 8009100:	4605      	mov	r5, r0
 8009102:	4658      	mov	r0, fp
 8009104:	f001 f95c 	bl	800a3c0 <__multiply>
 8009108:	4649      	mov	r1, r9
 800910a:	9004      	str	r0, [sp, #16]
 800910c:	4658      	mov	r0, fp
 800910e:	f001 f843 	bl	800a198 <_Bfree>
 8009112:	9b04      	ldr	r3, [sp, #16]
 8009114:	4699      	mov	r9, r3
 8009116:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009118:	1b1a      	subs	r2, r3, r4
 800911a:	d004      	beq.n	8009126 <_dtoa_r+0x79e>
 800911c:	4649      	mov	r1, r9
 800911e:	4658      	mov	r0, fp
 8009120:	f001 f9f6 	bl	800a510 <__pow5mult>
 8009124:	4681      	mov	r9, r0
 8009126:	2101      	movs	r1, #1
 8009128:	4658      	mov	r0, fp
 800912a:	f001 f933 	bl	800a394 <__i2b>
 800912e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009130:	4604      	mov	r4, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 81c9 	beq.w	80094ca <_dtoa_r+0xb42>
 8009138:	461a      	mov	r2, r3
 800913a:	4601      	mov	r1, r0
 800913c:	4658      	mov	r0, fp
 800913e:	f001 f9e7 	bl	800a510 <__pow5mult>
 8009142:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009144:	4604      	mov	r4, r0
 8009146:	2b01      	cmp	r3, #1
 8009148:	f300 808f 	bgt.w	800926a <_dtoa_r+0x8e2>
 800914c:	9b02      	ldr	r3, [sp, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	f040 8087 	bne.w	8009262 <_dtoa_r+0x8da>
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800915a:	2b00      	cmp	r3, #0
 800915c:	f040 8083 	bne.w	8009266 <_dtoa_r+0x8de>
 8009160:	9b03      	ldr	r3, [sp, #12]
 8009162:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009166:	0d1b      	lsrs	r3, r3, #20
 8009168:	051b      	lsls	r3, r3, #20
 800916a:	b12b      	cbz	r3, 8009178 <_dtoa_r+0x7f0>
 800916c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800916e:	f108 0801 	add.w	r8, r8, #1
 8009172:	3301      	adds	r3, #1
 8009174:	9309      	str	r3, [sp, #36]	@ 0x24
 8009176:	2301      	movs	r3, #1
 8009178:	930a      	str	r3, [sp, #40]	@ 0x28
 800917a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 81aa 	beq.w	80094d6 <_dtoa_r+0xb4e>
 8009182:	6923      	ldr	r3, [r4, #16]
 8009184:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009188:	6918      	ldr	r0, [r3, #16]
 800918a:	f001 f8b7 	bl	800a2fc <__hi0bits>
 800918e:	f1c0 0020 	rsb	r0, r0, #32
 8009192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009194:	4418      	add	r0, r3
 8009196:	f010 001f 	ands.w	r0, r0, #31
 800919a:	d071      	beq.n	8009280 <_dtoa_r+0x8f8>
 800919c:	f1c0 0320 	rsb	r3, r0, #32
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	dd65      	ble.n	8009270 <_dtoa_r+0x8e8>
 80091a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091a6:	f1c0 001c 	rsb	r0, r0, #28
 80091aa:	4403      	add	r3, r0
 80091ac:	4480      	add	r8, r0
 80091ae:	4406      	add	r6, r0
 80091b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80091b2:	f1b8 0f00 	cmp.w	r8, #0
 80091b6:	dd05      	ble.n	80091c4 <_dtoa_r+0x83c>
 80091b8:	4649      	mov	r1, r9
 80091ba:	4642      	mov	r2, r8
 80091bc:	4658      	mov	r0, fp
 80091be:	f001 fa01 	bl	800a5c4 <__lshift>
 80091c2:	4681      	mov	r9, r0
 80091c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	dd05      	ble.n	80091d6 <_dtoa_r+0x84e>
 80091ca:	4621      	mov	r1, r4
 80091cc:	461a      	mov	r2, r3
 80091ce:	4658      	mov	r0, fp
 80091d0:	f001 f9f8 	bl	800a5c4 <__lshift>
 80091d4:	4604      	mov	r4, r0
 80091d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d053      	beq.n	8009284 <_dtoa_r+0x8fc>
 80091dc:	4621      	mov	r1, r4
 80091de:	4648      	mov	r0, r9
 80091e0:	f001 fa5c 	bl	800a69c <__mcmp>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	da4d      	bge.n	8009284 <_dtoa_r+0x8fc>
 80091e8:	1e7b      	subs	r3, r7, #1
 80091ea:	4649      	mov	r1, r9
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	220a      	movs	r2, #10
 80091f0:	2300      	movs	r3, #0
 80091f2:	4658      	mov	r0, fp
 80091f4:	f000 fff2 	bl	800a1dc <__multadd>
 80091f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091fa:	4681      	mov	r9, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 816c 	beq.w	80094da <_dtoa_r+0xb52>
 8009202:	2300      	movs	r3, #0
 8009204:	4629      	mov	r1, r5
 8009206:	220a      	movs	r2, #10
 8009208:	4658      	mov	r0, fp
 800920a:	f000 ffe7 	bl	800a1dc <__multadd>
 800920e:	9b08      	ldr	r3, [sp, #32]
 8009210:	4605      	mov	r5, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	dc61      	bgt.n	80092da <_dtoa_r+0x952>
 8009216:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009218:	2b02      	cmp	r3, #2
 800921a:	dc3b      	bgt.n	8009294 <_dtoa_r+0x90c>
 800921c:	e05d      	b.n	80092da <_dtoa_r+0x952>
 800921e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009220:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009224:	e746      	b.n	80090b4 <_dtoa_r+0x72c>
 8009226:	9b07      	ldr	r3, [sp, #28]
 8009228:	1e5c      	subs	r4, r3, #1
 800922a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800922c:	42a3      	cmp	r3, r4
 800922e:	bfbf      	itttt	lt
 8009230:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009232:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009234:	1ae3      	sublt	r3, r4, r3
 8009236:	18d2      	addlt	r2, r2, r3
 8009238:	bfa8      	it	ge
 800923a:	1b1c      	subge	r4, r3, r4
 800923c:	9b07      	ldr	r3, [sp, #28]
 800923e:	bfbe      	ittt	lt
 8009240:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009242:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009244:	2400      	movlt	r4, #0
 8009246:	2b00      	cmp	r3, #0
 8009248:	bfb5      	itete	lt
 800924a:	eba8 0603 	sublt.w	r6, r8, r3
 800924e:	4646      	movge	r6, r8
 8009250:	2300      	movlt	r3, #0
 8009252:	9b07      	ldrge	r3, [sp, #28]
 8009254:	e730      	b.n	80090b8 <_dtoa_r+0x730>
 8009256:	4646      	mov	r6, r8
 8009258:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800925a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800925c:	e735      	b.n	80090ca <_dtoa_r+0x742>
 800925e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009260:	e75c      	b.n	800911c <_dtoa_r+0x794>
 8009262:	2300      	movs	r3, #0
 8009264:	e788      	b.n	8009178 <_dtoa_r+0x7f0>
 8009266:	9b02      	ldr	r3, [sp, #8]
 8009268:	e786      	b.n	8009178 <_dtoa_r+0x7f0>
 800926a:	2300      	movs	r3, #0
 800926c:	930a      	str	r3, [sp, #40]	@ 0x28
 800926e:	e788      	b.n	8009182 <_dtoa_r+0x7fa>
 8009270:	d09f      	beq.n	80091b2 <_dtoa_r+0x82a>
 8009272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009274:	331c      	adds	r3, #28
 8009276:	441a      	add	r2, r3
 8009278:	4498      	add	r8, r3
 800927a:	441e      	add	r6, r3
 800927c:	9209      	str	r2, [sp, #36]	@ 0x24
 800927e:	e798      	b.n	80091b2 <_dtoa_r+0x82a>
 8009280:	4603      	mov	r3, r0
 8009282:	e7f6      	b.n	8009272 <_dtoa_r+0x8ea>
 8009284:	9b07      	ldr	r3, [sp, #28]
 8009286:	9704      	str	r7, [sp, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	dc20      	bgt.n	80092ce <_dtoa_r+0x946>
 800928c:	9308      	str	r3, [sp, #32]
 800928e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009290:	2b02      	cmp	r3, #2
 8009292:	dd1e      	ble.n	80092d2 <_dtoa_r+0x94a>
 8009294:	9b08      	ldr	r3, [sp, #32]
 8009296:	2b00      	cmp	r3, #0
 8009298:	f47f aebc 	bne.w	8009014 <_dtoa_r+0x68c>
 800929c:	4621      	mov	r1, r4
 800929e:	2205      	movs	r2, #5
 80092a0:	4658      	mov	r0, fp
 80092a2:	f000 ff9b 	bl	800a1dc <__multadd>
 80092a6:	4601      	mov	r1, r0
 80092a8:	4604      	mov	r4, r0
 80092aa:	4648      	mov	r0, r9
 80092ac:	f001 f9f6 	bl	800a69c <__mcmp>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	f77f aeaf 	ble.w	8009014 <_dtoa_r+0x68c>
 80092b6:	2331      	movs	r3, #49	@ 0x31
 80092b8:	4656      	mov	r6, sl
 80092ba:	f806 3b01 	strb.w	r3, [r6], #1
 80092be:	9b04      	ldr	r3, [sp, #16]
 80092c0:	3301      	adds	r3, #1
 80092c2:	9304      	str	r3, [sp, #16]
 80092c4:	e6aa      	b.n	800901c <_dtoa_r+0x694>
 80092c6:	9c07      	ldr	r4, [sp, #28]
 80092c8:	9704      	str	r7, [sp, #16]
 80092ca:	4625      	mov	r5, r4
 80092cc:	e7f3      	b.n	80092b6 <_dtoa_r+0x92e>
 80092ce:	9b07      	ldr	r3, [sp, #28]
 80092d0:	9308      	str	r3, [sp, #32]
 80092d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 8104 	beq.w	80094e2 <_dtoa_r+0xb5a>
 80092da:	2e00      	cmp	r6, #0
 80092dc:	dd05      	ble.n	80092ea <_dtoa_r+0x962>
 80092de:	4629      	mov	r1, r5
 80092e0:	4632      	mov	r2, r6
 80092e2:	4658      	mov	r0, fp
 80092e4:	f001 f96e 	bl	800a5c4 <__lshift>
 80092e8:	4605      	mov	r5, r0
 80092ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d05a      	beq.n	80093a6 <_dtoa_r+0xa1e>
 80092f0:	4658      	mov	r0, fp
 80092f2:	6869      	ldr	r1, [r5, #4]
 80092f4:	f000 ff10 	bl	800a118 <_Balloc>
 80092f8:	4606      	mov	r6, r0
 80092fa:	b928      	cbnz	r0, 8009308 <_dtoa_r+0x980>
 80092fc:	4602      	mov	r2, r0
 80092fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009302:	4b83      	ldr	r3, [pc, #524]	@ (8009510 <_dtoa_r+0xb88>)
 8009304:	f7ff bb54 	b.w	80089b0 <_dtoa_r+0x28>
 8009308:	692a      	ldr	r2, [r5, #16]
 800930a:	f105 010c 	add.w	r1, r5, #12
 800930e:	3202      	adds	r2, #2
 8009310:	0092      	lsls	r2, r2, #2
 8009312:	300c      	adds	r0, #12
 8009314:	f7ff fa95 	bl	8008842 <memcpy>
 8009318:	2201      	movs	r2, #1
 800931a:	4631      	mov	r1, r6
 800931c:	4658      	mov	r0, fp
 800931e:	f001 f951 	bl	800a5c4 <__lshift>
 8009322:	462f      	mov	r7, r5
 8009324:	4605      	mov	r5, r0
 8009326:	f10a 0301 	add.w	r3, sl, #1
 800932a:	9307      	str	r3, [sp, #28]
 800932c:	9b08      	ldr	r3, [sp, #32]
 800932e:	4453      	add	r3, sl
 8009330:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009332:	9b02      	ldr	r3, [sp, #8]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	930a      	str	r3, [sp, #40]	@ 0x28
 800933a:	9b07      	ldr	r3, [sp, #28]
 800933c:	4621      	mov	r1, r4
 800933e:	3b01      	subs	r3, #1
 8009340:	4648      	mov	r0, r9
 8009342:	9302      	str	r3, [sp, #8]
 8009344:	f7ff fa96 	bl	8008874 <quorem>
 8009348:	4639      	mov	r1, r7
 800934a:	9008      	str	r0, [sp, #32]
 800934c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009350:	4648      	mov	r0, r9
 8009352:	f001 f9a3 	bl	800a69c <__mcmp>
 8009356:	462a      	mov	r2, r5
 8009358:	9009      	str	r0, [sp, #36]	@ 0x24
 800935a:	4621      	mov	r1, r4
 800935c:	4658      	mov	r0, fp
 800935e:	f001 f9b9 	bl	800a6d4 <__mdiff>
 8009362:	68c2      	ldr	r2, [r0, #12]
 8009364:	4606      	mov	r6, r0
 8009366:	bb02      	cbnz	r2, 80093aa <_dtoa_r+0xa22>
 8009368:	4601      	mov	r1, r0
 800936a:	4648      	mov	r0, r9
 800936c:	f001 f996 	bl	800a69c <__mcmp>
 8009370:	4602      	mov	r2, r0
 8009372:	4631      	mov	r1, r6
 8009374:	4658      	mov	r0, fp
 8009376:	920c      	str	r2, [sp, #48]	@ 0x30
 8009378:	f000 ff0e 	bl	800a198 <_Bfree>
 800937c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800937e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009380:	9e07      	ldr	r6, [sp, #28]
 8009382:	ea43 0102 	orr.w	r1, r3, r2
 8009386:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009388:	4319      	orrs	r1, r3
 800938a:	d110      	bne.n	80093ae <_dtoa_r+0xa26>
 800938c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009390:	d029      	beq.n	80093e6 <_dtoa_r+0xa5e>
 8009392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009394:	2b00      	cmp	r3, #0
 8009396:	dd02      	ble.n	800939e <_dtoa_r+0xa16>
 8009398:	9b08      	ldr	r3, [sp, #32]
 800939a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800939e:	9b02      	ldr	r3, [sp, #8]
 80093a0:	f883 8000 	strb.w	r8, [r3]
 80093a4:	e63b      	b.n	800901e <_dtoa_r+0x696>
 80093a6:	4628      	mov	r0, r5
 80093a8:	e7bb      	b.n	8009322 <_dtoa_r+0x99a>
 80093aa:	2201      	movs	r2, #1
 80093ac:	e7e1      	b.n	8009372 <_dtoa_r+0x9ea>
 80093ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	db04      	blt.n	80093be <_dtoa_r+0xa36>
 80093b4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80093b6:	430b      	orrs	r3, r1
 80093b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093ba:	430b      	orrs	r3, r1
 80093bc:	d120      	bne.n	8009400 <_dtoa_r+0xa78>
 80093be:	2a00      	cmp	r2, #0
 80093c0:	dded      	ble.n	800939e <_dtoa_r+0xa16>
 80093c2:	4649      	mov	r1, r9
 80093c4:	2201      	movs	r2, #1
 80093c6:	4658      	mov	r0, fp
 80093c8:	f001 f8fc 	bl	800a5c4 <__lshift>
 80093cc:	4621      	mov	r1, r4
 80093ce:	4681      	mov	r9, r0
 80093d0:	f001 f964 	bl	800a69c <__mcmp>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	dc03      	bgt.n	80093e0 <_dtoa_r+0xa58>
 80093d8:	d1e1      	bne.n	800939e <_dtoa_r+0xa16>
 80093da:	f018 0f01 	tst.w	r8, #1
 80093de:	d0de      	beq.n	800939e <_dtoa_r+0xa16>
 80093e0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093e4:	d1d8      	bne.n	8009398 <_dtoa_r+0xa10>
 80093e6:	2339      	movs	r3, #57	@ 0x39
 80093e8:	9a02      	ldr	r2, [sp, #8]
 80093ea:	7013      	strb	r3, [r2, #0]
 80093ec:	4633      	mov	r3, r6
 80093ee:	461e      	mov	r6, r3
 80093f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	2a39      	cmp	r2, #57	@ 0x39
 80093f8:	d052      	beq.n	80094a0 <_dtoa_r+0xb18>
 80093fa:	3201      	adds	r2, #1
 80093fc:	701a      	strb	r2, [r3, #0]
 80093fe:	e60e      	b.n	800901e <_dtoa_r+0x696>
 8009400:	2a00      	cmp	r2, #0
 8009402:	dd07      	ble.n	8009414 <_dtoa_r+0xa8c>
 8009404:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009408:	d0ed      	beq.n	80093e6 <_dtoa_r+0xa5e>
 800940a:	9a02      	ldr	r2, [sp, #8]
 800940c:	f108 0301 	add.w	r3, r8, #1
 8009410:	7013      	strb	r3, [r2, #0]
 8009412:	e604      	b.n	800901e <_dtoa_r+0x696>
 8009414:	9b07      	ldr	r3, [sp, #28]
 8009416:	9a07      	ldr	r2, [sp, #28]
 8009418:	f803 8c01 	strb.w	r8, [r3, #-1]
 800941c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800941e:	4293      	cmp	r3, r2
 8009420:	d028      	beq.n	8009474 <_dtoa_r+0xaec>
 8009422:	4649      	mov	r1, r9
 8009424:	2300      	movs	r3, #0
 8009426:	220a      	movs	r2, #10
 8009428:	4658      	mov	r0, fp
 800942a:	f000 fed7 	bl	800a1dc <__multadd>
 800942e:	42af      	cmp	r7, r5
 8009430:	4681      	mov	r9, r0
 8009432:	f04f 0300 	mov.w	r3, #0
 8009436:	f04f 020a 	mov.w	r2, #10
 800943a:	4639      	mov	r1, r7
 800943c:	4658      	mov	r0, fp
 800943e:	d107      	bne.n	8009450 <_dtoa_r+0xac8>
 8009440:	f000 fecc 	bl	800a1dc <__multadd>
 8009444:	4607      	mov	r7, r0
 8009446:	4605      	mov	r5, r0
 8009448:	9b07      	ldr	r3, [sp, #28]
 800944a:	3301      	adds	r3, #1
 800944c:	9307      	str	r3, [sp, #28]
 800944e:	e774      	b.n	800933a <_dtoa_r+0x9b2>
 8009450:	f000 fec4 	bl	800a1dc <__multadd>
 8009454:	4629      	mov	r1, r5
 8009456:	4607      	mov	r7, r0
 8009458:	2300      	movs	r3, #0
 800945a:	220a      	movs	r2, #10
 800945c:	4658      	mov	r0, fp
 800945e:	f000 febd 	bl	800a1dc <__multadd>
 8009462:	4605      	mov	r5, r0
 8009464:	e7f0      	b.n	8009448 <_dtoa_r+0xac0>
 8009466:	9b08      	ldr	r3, [sp, #32]
 8009468:	2700      	movs	r7, #0
 800946a:	2b00      	cmp	r3, #0
 800946c:	bfcc      	ite	gt
 800946e:	461e      	movgt	r6, r3
 8009470:	2601      	movle	r6, #1
 8009472:	4456      	add	r6, sl
 8009474:	4649      	mov	r1, r9
 8009476:	2201      	movs	r2, #1
 8009478:	4658      	mov	r0, fp
 800947a:	f001 f8a3 	bl	800a5c4 <__lshift>
 800947e:	4621      	mov	r1, r4
 8009480:	4681      	mov	r9, r0
 8009482:	f001 f90b 	bl	800a69c <__mcmp>
 8009486:	2800      	cmp	r0, #0
 8009488:	dcb0      	bgt.n	80093ec <_dtoa_r+0xa64>
 800948a:	d102      	bne.n	8009492 <_dtoa_r+0xb0a>
 800948c:	f018 0f01 	tst.w	r8, #1
 8009490:	d1ac      	bne.n	80093ec <_dtoa_r+0xa64>
 8009492:	4633      	mov	r3, r6
 8009494:	461e      	mov	r6, r3
 8009496:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800949a:	2a30      	cmp	r2, #48	@ 0x30
 800949c:	d0fa      	beq.n	8009494 <_dtoa_r+0xb0c>
 800949e:	e5be      	b.n	800901e <_dtoa_r+0x696>
 80094a0:	459a      	cmp	sl, r3
 80094a2:	d1a4      	bne.n	80093ee <_dtoa_r+0xa66>
 80094a4:	9b04      	ldr	r3, [sp, #16]
 80094a6:	3301      	adds	r3, #1
 80094a8:	9304      	str	r3, [sp, #16]
 80094aa:	2331      	movs	r3, #49	@ 0x31
 80094ac:	f88a 3000 	strb.w	r3, [sl]
 80094b0:	e5b5      	b.n	800901e <_dtoa_r+0x696>
 80094b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094b4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009514 <_dtoa_r+0xb8c>
 80094b8:	b11b      	cbz	r3, 80094c2 <_dtoa_r+0xb3a>
 80094ba:	f10a 0308 	add.w	r3, sl, #8
 80094be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80094c0:	6013      	str	r3, [r2, #0]
 80094c2:	4650      	mov	r0, sl
 80094c4:	b017      	add	sp, #92	@ 0x5c
 80094c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	f77f ae3d 	ble.w	800914c <_dtoa_r+0x7c4>
 80094d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80094d6:	2001      	movs	r0, #1
 80094d8:	e65b      	b.n	8009192 <_dtoa_r+0x80a>
 80094da:	9b08      	ldr	r3, [sp, #32]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f77f aed6 	ble.w	800928e <_dtoa_r+0x906>
 80094e2:	4656      	mov	r6, sl
 80094e4:	4621      	mov	r1, r4
 80094e6:	4648      	mov	r0, r9
 80094e8:	f7ff f9c4 	bl	8008874 <quorem>
 80094ec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80094f0:	9b08      	ldr	r3, [sp, #32]
 80094f2:	f806 8b01 	strb.w	r8, [r6], #1
 80094f6:	eba6 020a 	sub.w	r2, r6, sl
 80094fa:	4293      	cmp	r3, r2
 80094fc:	ddb3      	ble.n	8009466 <_dtoa_r+0xade>
 80094fe:	4649      	mov	r1, r9
 8009500:	2300      	movs	r3, #0
 8009502:	220a      	movs	r2, #10
 8009504:	4658      	mov	r0, fp
 8009506:	f000 fe69 	bl	800a1dc <__multadd>
 800950a:	4681      	mov	r9, r0
 800950c:	e7ea      	b.n	80094e4 <_dtoa_r+0xb5c>
 800950e:	bf00      	nop
 8009510:	0800b60d 	.word	0x0800b60d
 8009514:	0800b591 	.word	0x0800b591

08009518 <rshift>:
 8009518:	6903      	ldr	r3, [r0, #16]
 800951a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800951e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009522:	f100 0414 	add.w	r4, r0, #20
 8009526:	ea4f 1261 	mov.w	r2, r1, asr #5
 800952a:	dd46      	ble.n	80095ba <rshift+0xa2>
 800952c:	f011 011f 	ands.w	r1, r1, #31
 8009530:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009534:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009538:	d10c      	bne.n	8009554 <rshift+0x3c>
 800953a:	4629      	mov	r1, r5
 800953c:	f100 0710 	add.w	r7, r0, #16
 8009540:	42b1      	cmp	r1, r6
 8009542:	d335      	bcc.n	80095b0 <rshift+0x98>
 8009544:	1a9b      	subs	r3, r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	1eea      	subs	r2, r5, #3
 800954a:	4296      	cmp	r6, r2
 800954c:	bf38      	it	cc
 800954e:	2300      	movcc	r3, #0
 8009550:	4423      	add	r3, r4
 8009552:	e015      	b.n	8009580 <rshift+0x68>
 8009554:	46a1      	mov	r9, r4
 8009556:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800955a:	f1c1 0820 	rsb	r8, r1, #32
 800955e:	40cf      	lsrs	r7, r1
 8009560:	f105 0e04 	add.w	lr, r5, #4
 8009564:	4576      	cmp	r6, lr
 8009566:	46f4      	mov	ip, lr
 8009568:	d816      	bhi.n	8009598 <rshift+0x80>
 800956a:	1a9a      	subs	r2, r3, r2
 800956c:	0092      	lsls	r2, r2, #2
 800956e:	3a04      	subs	r2, #4
 8009570:	3501      	adds	r5, #1
 8009572:	42ae      	cmp	r6, r5
 8009574:	bf38      	it	cc
 8009576:	2200      	movcc	r2, #0
 8009578:	18a3      	adds	r3, r4, r2
 800957a:	50a7      	str	r7, [r4, r2]
 800957c:	b107      	cbz	r7, 8009580 <rshift+0x68>
 800957e:	3304      	adds	r3, #4
 8009580:	42a3      	cmp	r3, r4
 8009582:	eba3 0204 	sub.w	r2, r3, r4
 8009586:	bf08      	it	eq
 8009588:	2300      	moveq	r3, #0
 800958a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800958e:	6102      	str	r2, [r0, #16]
 8009590:	bf08      	it	eq
 8009592:	6143      	streq	r3, [r0, #20]
 8009594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009598:	f8dc c000 	ldr.w	ip, [ip]
 800959c:	fa0c fc08 	lsl.w	ip, ip, r8
 80095a0:	ea4c 0707 	orr.w	r7, ip, r7
 80095a4:	f849 7b04 	str.w	r7, [r9], #4
 80095a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80095ac:	40cf      	lsrs	r7, r1
 80095ae:	e7d9      	b.n	8009564 <rshift+0x4c>
 80095b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80095b4:	f847 cf04 	str.w	ip, [r7, #4]!
 80095b8:	e7c2      	b.n	8009540 <rshift+0x28>
 80095ba:	4623      	mov	r3, r4
 80095bc:	e7e0      	b.n	8009580 <rshift+0x68>

080095be <__hexdig_fun>:
 80095be:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80095c2:	2b09      	cmp	r3, #9
 80095c4:	d802      	bhi.n	80095cc <__hexdig_fun+0xe>
 80095c6:	3820      	subs	r0, #32
 80095c8:	b2c0      	uxtb	r0, r0
 80095ca:	4770      	bx	lr
 80095cc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80095d0:	2b05      	cmp	r3, #5
 80095d2:	d801      	bhi.n	80095d8 <__hexdig_fun+0x1a>
 80095d4:	3847      	subs	r0, #71	@ 0x47
 80095d6:	e7f7      	b.n	80095c8 <__hexdig_fun+0xa>
 80095d8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80095dc:	2b05      	cmp	r3, #5
 80095de:	d801      	bhi.n	80095e4 <__hexdig_fun+0x26>
 80095e0:	3827      	subs	r0, #39	@ 0x27
 80095e2:	e7f1      	b.n	80095c8 <__hexdig_fun+0xa>
 80095e4:	2000      	movs	r0, #0
 80095e6:	4770      	bx	lr

080095e8 <__gethex>:
 80095e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ec:	468a      	mov	sl, r1
 80095ee:	4690      	mov	r8, r2
 80095f0:	b085      	sub	sp, #20
 80095f2:	9302      	str	r3, [sp, #8]
 80095f4:	680b      	ldr	r3, [r1, #0]
 80095f6:	9001      	str	r0, [sp, #4]
 80095f8:	1c9c      	adds	r4, r3, #2
 80095fa:	46a1      	mov	r9, r4
 80095fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009600:	2830      	cmp	r0, #48	@ 0x30
 8009602:	d0fa      	beq.n	80095fa <__gethex+0x12>
 8009604:	eba9 0303 	sub.w	r3, r9, r3
 8009608:	f1a3 0b02 	sub.w	fp, r3, #2
 800960c:	f7ff ffd7 	bl	80095be <__hexdig_fun>
 8009610:	4605      	mov	r5, r0
 8009612:	2800      	cmp	r0, #0
 8009614:	d168      	bne.n	80096e8 <__gethex+0x100>
 8009616:	2201      	movs	r2, #1
 8009618:	4648      	mov	r0, r9
 800961a:	499f      	ldr	r1, [pc, #636]	@ (8009898 <__gethex+0x2b0>)
 800961c:	f7ff f8b8 	bl	8008790 <strncmp>
 8009620:	4607      	mov	r7, r0
 8009622:	2800      	cmp	r0, #0
 8009624:	d167      	bne.n	80096f6 <__gethex+0x10e>
 8009626:	f899 0001 	ldrb.w	r0, [r9, #1]
 800962a:	4626      	mov	r6, r4
 800962c:	f7ff ffc7 	bl	80095be <__hexdig_fun>
 8009630:	2800      	cmp	r0, #0
 8009632:	d062      	beq.n	80096fa <__gethex+0x112>
 8009634:	4623      	mov	r3, r4
 8009636:	7818      	ldrb	r0, [r3, #0]
 8009638:	4699      	mov	r9, r3
 800963a:	2830      	cmp	r0, #48	@ 0x30
 800963c:	f103 0301 	add.w	r3, r3, #1
 8009640:	d0f9      	beq.n	8009636 <__gethex+0x4e>
 8009642:	f7ff ffbc 	bl	80095be <__hexdig_fun>
 8009646:	fab0 f580 	clz	r5, r0
 800964a:	f04f 0b01 	mov.w	fp, #1
 800964e:	096d      	lsrs	r5, r5, #5
 8009650:	464a      	mov	r2, r9
 8009652:	4616      	mov	r6, r2
 8009654:	7830      	ldrb	r0, [r6, #0]
 8009656:	3201      	adds	r2, #1
 8009658:	f7ff ffb1 	bl	80095be <__hexdig_fun>
 800965c:	2800      	cmp	r0, #0
 800965e:	d1f8      	bne.n	8009652 <__gethex+0x6a>
 8009660:	2201      	movs	r2, #1
 8009662:	4630      	mov	r0, r6
 8009664:	498c      	ldr	r1, [pc, #560]	@ (8009898 <__gethex+0x2b0>)
 8009666:	f7ff f893 	bl	8008790 <strncmp>
 800966a:	2800      	cmp	r0, #0
 800966c:	d13f      	bne.n	80096ee <__gethex+0x106>
 800966e:	b944      	cbnz	r4, 8009682 <__gethex+0x9a>
 8009670:	1c74      	adds	r4, r6, #1
 8009672:	4622      	mov	r2, r4
 8009674:	4616      	mov	r6, r2
 8009676:	7830      	ldrb	r0, [r6, #0]
 8009678:	3201      	adds	r2, #1
 800967a:	f7ff ffa0 	bl	80095be <__hexdig_fun>
 800967e:	2800      	cmp	r0, #0
 8009680:	d1f8      	bne.n	8009674 <__gethex+0x8c>
 8009682:	1ba4      	subs	r4, r4, r6
 8009684:	00a7      	lsls	r7, r4, #2
 8009686:	7833      	ldrb	r3, [r6, #0]
 8009688:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800968c:	2b50      	cmp	r3, #80	@ 0x50
 800968e:	d13e      	bne.n	800970e <__gethex+0x126>
 8009690:	7873      	ldrb	r3, [r6, #1]
 8009692:	2b2b      	cmp	r3, #43	@ 0x2b
 8009694:	d033      	beq.n	80096fe <__gethex+0x116>
 8009696:	2b2d      	cmp	r3, #45	@ 0x2d
 8009698:	d034      	beq.n	8009704 <__gethex+0x11c>
 800969a:	2400      	movs	r4, #0
 800969c:	1c71      	adds	r1, r6, #1
 800969e:	7808      	ldrb	r0, [r1, #0]
 80096a0:	f7ff ff8d 	bl	80095be <__hexdig_fun>
 80096a4:	1e43      	subs	r3, r0, #1
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b18      	cmp	r3, #24
 80096aa:	d830      	bhi.n	800970e <__gethex+0x126>
 80096ac:	f1a0 0210 	sub.w	r2, r0, #16
 80096b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80096b4:	f7ff ff83 	bl	80095be <__hexdig_fun>
 80096b8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80096bc:	fa5f fc8c 	uxtb.w	ip, ip
 80096c0:	f1bc 0f18 	cmp.w	ip, #24
 80096c4:	f04f 030a 	mov.w	r3, #10
 80096c8:	d91e      	bls.n	8009708 <__gethex+0x120>
 80096ca:	b104      	cbz	r4, 80096ce <__gethex+0xe6>
 80096cc:	4252      	negs	r2, r2
 80096ce:	4417      	add	r7, r2
 80096d0:	f8ca 1000 	str.w	r1, [sl]
 80096d4:	b1ed      	cbz	r5, 8009712 <__gethex+0x12a>
 80096d6:	f1bb 0f00 	cmp.w	fp, #0
 80096da:	bf0c      	ite	eq
 80096dc:	2506      	moveq	r5, #6
 80096de:	2500      	movne	r5, #0
 80096e0:	4628      	mov	r0, r5
 80096e2:	b005      	add	sp, #20
 80096e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e8:	2500      	movs	r5, #0
 80096ea:	462c      	mov	r4, r5
 80096ec:	e7b0      	b.n	8009650 <__gethex+0x68>
 80096ee:	2c00      	cmp	r4, #0
 80096f0:	d1c7      	bne.n	8009682 <__gethex+0x9a>
 80096f2:	4627      	mov	r7, r4
 80096f4:	e7c7      	b.n	8009686 <__gethex+0x9e>
 80096f6:	464e      	mov	r6, r9
 80096f8:	462f      	mov	r7, r5
 80096fa:	2501      	movs	r5, #1
 80096fc:	e7c3      	b.n	8009686 <__gethex+0x9e>
 80096fe:	2400      	movs	r4, #0
 8009700:	1cb1      	adds	r1, r6, #2
 8009702:	e7cc      	b.n	800969e <__gethex+0xb6>
 8009704:	2401      	movs	r4, #1
 8009706:	e7fb      	b.n	8009700 <__gethex+0x118>
 8009708:	fb03 0002 	mla	r0, r3, r2, r0
 800970c:	e7ce      	b.n	80096ac <__gethex+0xc4>
 800970e:	4631      	mov	r1, r6
 8009710:	e7de      	b.n	80096d0 <__gethex+0xe8>
 8009712:	4629      	mov	r1, r5
 8009714:	eba6 0309 	sub.w	r3, r6, r9
 8009718:	3b01      	subs	r3, #1
 800971a:	2b07      	cmp	r3, #7
 800971c:	dc0a      	bgt.n	8009734 <__gethex+0x14c>
 800971e:	9801      	ldr	r0, [sp, #4]
 8009720:	f000 fcfa 	bl	800a118 <_Balloc>
 8009724:	4604      	mov	r4, r0
 8009726:	b940      	cbnz	r0, 800973a <__gethex+0x152>
 8009728:	4602      	mov	r2, r0
 800972a:	21e4      	movs	r1, #228	@ 0xe4
 800972c:	4b5b      	ldr	r3, [pc, #364]	@ (800989c <__gethex+0x2b4>)
 800972e:	485c      	ldr	r0, [pc, #368]	@ (80098a0 <__gethex+0x2b8>)
 8009730:	f001 fa86 	bl	800ac40 <__assert_func>
 8009734:	3101      	adds	r1, #1
 8009736:	105b      	asrs	r3, r3, #1
 8009738:	e7ef      	b.n	800971a <__gethex+0x132>
 800973a:	2300      	movs	r3, #0
 800973c:	f100 0a14 	add.w	sl, r0, #20
 8009740:	4655      	mov	r5, sl
 8009742:	469b      	mov	fp, r3
 8009744:	45b1      	cmp	r9, r6
 8009746:	d337      	bcc.n	80097b8 <__gethex+0x1d0>
 8009748:	f845 bb04 	str.w	fp, [r5], #4
 800974c:	eba5 050a 	sub.w	r5, r5, sl
 8009750:	10ad      	asrs	r5, r5, #2
 8009752:	6125      	str	r5, [r4, #16]
 8009754:	4658      	mov	r0, fp
 8009756:	f000 fdd1 	bl	800a2fc <__hi0bits>
 800975a:	016d      	lsls	r5, r5, #5
 800975c:	f8d8 6000 	ldr.w	r6, [r8]
 8009760:	1a2d      	subs	r5, r5, r0
 8009762:	42b5      	cmp	r5, r6
 8009764:	dd54      	ble.n	8009810 <__gethex+0x228>
 8009766:	1bad      	subs	r5, r5, r6
 8009768:	4629      	mov	r1, r5
 800976a:	4620      	mov	r0, r4
 800976c:	f001 f959 	bl	800aa22 <__any_on>
 8009770:	4681      	mov	r9, r0
 8009772:	b178      	cbz	r0, 8009794 <__gethex+0x1ac>
 8009774:	f04f 0901 	mov.w	r9, #1
 8009778:	1e6b      	subs	r3, r5, #1
 800977a:	1159      	asrs	r1, r3, #5
 800977c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009780:	f003 021f 	and.w	r2, r3, #31
 8009784:	fa09 f202 	lsl.w	r2, r9, r2
 8009788:	420a      	tst	r2, r1
 800978a:	d003      	beq.n	8009794 <__gethex+0x1ac>
 800978c:	454b      	cmp	r3, r9
 800978e:	dc36      	bgt.n	80097fe <__gethex+0x216>
 8009790:	f04f 0902 	mov.w	r9, #2
 8009794:	4629      	mov	r1, r5
 8009796:	4620      	mov	r0, r4
 8009798:	f7ff febe 	bl	8009518 <rshift>
 800979c:	442f      	add	r7, r5
 800979e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097a2:	42bb      	cmp	r3, r7
 80097a4:	da42      	bge.n	800982c <__gethex+0x244>
 80097a6:	4621      	mov	r1, r4
 80097a8:	9801      	ldr	r0, [sp, #4]
 80097aa:	f000 fcf5 	bl	800a198 <_Bfree>
 80097ae:	2300      	movs	r3, #0
 80097b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097b2:	25a3      	movs	r5, #163	@ 0xa3
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	e793      	b.n	80096e0 <__gethex+0xf8>
 80097b8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80097bc:	2a2e      	cmp	r2, #46	@ 0x2e
 80097be:	d012      	beq.n	80097e6 <__gethex+0x1fe>
 80097c0:	2b20      	cmp	r3, #32
 80097c2:	d104      	bne.n	80097ce <__gethex+0x1e6>
 80097c4:	f845 bb04 	str.w	fp, [r5], #4
 80097c8:	f04f 0b00 	mov.w	fp, #0
 80097cc:	465b      	mov	r3, fp
 80097ce:	7830      	ldrb	r0, [r6, #0]
 80097d0:	9303      	str	r3, [sp, #12]
 80097d2:	f7ff fef4 	bl	80095be <__hexdig_fun>
 80097d6:	9b03      	ldr	r3, [sp, #12]
 80097d8:	f000 000f 	and.w	r0, r0, #15
 80097dc:	4098      	lsls	r0, r3
 80097de:	ea4b 0b00 	orr.w	fp, fp, r0
 80097e2:	3304      	adds	r3, #4
 80097e4:	e7ae      	b.n	8009744 <__gethex+0x15c>
 80097e6:	45b1      	cmp	r9, r6
 80097e8:	d8ea      	bhi.n	80097c0 <__gethex+0x1d8>
 80097ea:	2201      	movs	r2, #1
 80097ec:	4630      	mov	r0, r6
 80097ee:	492a      	ldr	r1, [pc, #168]	@ (8009898 <__gethex+0x2b0>)
 80097f0:	9303      	str	r3, [sp, #12]
 80097f2:	f7fe ffcd 	bl	8008790 <strncmp>
 80097f6:	9b03      	ldr	r3, [sp, #12]
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d1e1      	bne.n	80097c0 <__gethex+0x1d8>
 80097fc:	e7a2      	b.n	8009744 <__gethex+0x15c>
 80097fe:	4620      	mov	r0, r4
 8009800:	1ea9      	subs	r1, r5, #2
 8009802:	f001 f90e 	bl	800aa22 <__any_on>
 8009806:	2800      	cmp	r0, #0
 8009808:	d0c2      	beq.n	8009790 <__gethex+0x1a8>
 800980a:	f04f 0903 	mov.w	r9, #3
 800980e:	e7c1      	b.n	8009794 <__gethex+0x1ac>
 8009810:	da09      	bge.n	8009826 <__gethex+0x23e>
 8009812:	1b75      	subs	r5, r6, r5
 8009814:	4621      	mov	r1, r4
 8009816:	462a      	mov	r2, r5
 8009818:	9801      	ldr	r0, [sp, #4]
 800981a:	f000 fed3 	bl	800a5c4 <__lshift>
 800981e:	4604      	mov	r4, r0
 8009820:	1b7f      	subs	r7, r7, r5
 8009822:	f100 0a14 	add.w	sl, r0, #20
 8009826:	f04f 0900 	mov.w	r9, #0
 800982a:	e7b8      	b.n	800979e <__gethex+0x1b6>
 800982c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009830:	42bd      	cmp	r5, r7
 8009832:	dd6f      	ble.n	8009914 <__gethex+0x32c>
 8009834:	1bed      	subs	r5, r5, r7
 8009836:	42ae      	cmp	r6, r5
 8009838:	dc34      	bgt.n	80098a4 <__gethex+0x2bc>
 800983a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800983e:	2b02      	cmp	r3, #2
 8009840:	d022      	beq.n	8009888 <__gethex+0x2a0>
 8009842:	2b03      	cmp	r3, #3
 8009844:	d024      	beq.n	8009890 <__gethex+0x2a8>
 8009846:	2b01      	cmp	r3, #1
 8009848:	d115      	bne.n	8009876 <__gethex+0x28e>
 800984a:	42ae      	cmp	r6, r5
 800984c:	d113      	bne.n	8009876 <__gethex+0x28e>
 800984e:	2e01      	cmp	r6, #1
 8009850:	d10b      	bne.n	800986a <__gethex+0x282>
 8009852:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009856:	9a02      	ldr	r2, [sp, #8]
 8009858:	2562      	movs	r5, #98	@ 0x62
 800985a:	6013      	str	r3, [r2, #0]
 800985c:	2301      	movs	r3, #1
 800985e:	6123      	str	r3, [r4, #16]
 8009860:	f8ca 3000 	str.w	r3, [sl]
 8009864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009866:	601c      	str	r4, [r3, #0]
 8009868:	e73a      	b.n	80096e0 <__gethex+0xf8>
 800986a:	4620      	mov	r0, r4
 800986c:	1e71      	subs	r1, r6, #1
 800986e:	f001 f8d8 	bl	800aa22 <__any_on>
 8009872:	2800      	cmp	r0, #0
 8009874:	d1ed      	bne.n	8009852 <__gethex+0x26a>
 8009876:	4621      	mov	r1, r4
 8009878:	9801      	ldr	r0, [sp, #4]
 800987a:	f000 fc8d 	bl	800a198 <_Bfree>
 800987e:	2300      	movs	r3, #0
 8009880:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009882:	2550      	movs	r5, #80	@ 0x50
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	e72b      	b.n	80096e0 <__gethex+0xf8>
 8009888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1f3      	bne.n	8009876 <__gethex+0x28e>
 800988e:	e7e0      	b.n	8009852 <__gethex+0x26a>
 8009890:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1dd      	bne.n	8009852 <__gethex+0x26a>
 8009896:	e7ee      	b.n	8009876 <__gethex+0x28e>
 8009898:	0800b433 	.word	0x0800b433
 800989c:	0800b60d 	.word	0x0800b60d
 80098a0:	0800b61e 	.word	0x0800b61e
 80098a4:	1e6f      	subs	r7, r5, #1
 80098a6:	f1b9 0f00 	cmp.w	r9, #0
 80098aa:	d130      	bne.n	800990e <__gethex+0x326>
 80098ac:	b127      	cbz	r7, 80098b8 <__gethex+0x2d0>
 80098ae:	4639      	mov	r1, r7
 80098b0:	4620      	mov	r0, r4
 80098b2:	f001 f8b6 	bl	800aa22 <__any_on>
 80098b6:	4681      	mov	r9, r0
 80098b8:	2301      	movs	r3, #1
 80098ba:	4629      	mov	r1, r5
 80098bc:	1b76      	subs	r6, r6, r5
 80098be:	2502      	movs	r5, #2
 80098c0:	117a      	asrs	r2, r7, #5
 80098c2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80098c6:	f007 071f 	and.w	r7, r7, #31
 80098ca:	40bb      	lsls	r3, r7
 80098cc:	4213      	tst	r3, r2
 80098ce:	4620      	mov	r0, r4
 80098d0:	bf18      	it	ne
 80098d2:	f049 0902 	orrne.w	r9, r9, #2
 80098d6:	f7ff fe1f 	bl	8009518 <rshift>
 80098da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80098de:	f1b9 0f00 	cmp.w	r9, #0
 80098e2:	d047      	beq.n	8009974 <__gethex+0x38c>
 80098e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d015      	beq.n	8009918 <__gethex+0x330>
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d017      	beq.n	8009920 <__gethex+0x338>
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d109      	bne.n	8009908 <__gethex+0x320>
 80098f4:	f019 0f02 	tst.w	r9, #2
 80098f8:	d006      	beq.n	8009908 <__gethex+0x320>
 80098fa:	f8da 3000 	ldr.w	r3, [sl]
 80098fe:	ea49 0903 	orr.w	r9, r9, r3
 8009902:	f019 0f01 	tst.w	r9, #1
 8009906:	d10e      	bne.n	8009926 <__gethex+0x33e>
 8009908:	f045 0510 	orr.w	r5, r5, #16
 800990c:	e032      	b.n	8009974 <__gethex+0x38c>
 800990e:	f04f 0901 	mov.w	r9, #1
 8009912:	e7d1      	b.n	80098b8 <__gethex+0x2d0>
 8009914:	2501      	movs	r5, #1
 8009916:	e7e2      	b.n	80098de <__gethex+0x2f6>
 8009918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800991a:	f1c3 0301 	rsb	r3, r3, #1
 800991e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0f0      	beq.n	8009908 <__gethex+0x320>
 8009926:	f04f 0c00 	mov.w	ip, #0
 800992a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800992e:	f104 0314 	add.w	r3, r4, #20
 8009932:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009936:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800993a:	4618      	mov	r0, r3
 800993c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009940:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009944:	d01b      	beq.n	800997e <__gethex+0x396>
 8009946:	3201      	adds	r2, #1
 8009948:	6002      	str	r2, [r0, #0]
 800994a:	2d02      	cmp	r5, #2
 800994c:	f104 0314 	add.w	r3, r4, #20
 8009950:	d13c      	bne.n	80099cc <__gethex+0x3e4>
 8009952:	f8d8 2000 	ldr.w	r2, [r8]
 8009956:	3a01      	subs	r2, #1
 8009958:	42b2      	cmp	r2, r6
 800995a:	d109      	bne.n	8009970 <__gethex+0x388>
 800995c:	2201      	movs	r2, #1
 800995e:	1171      	asrs	r1, r6, #5
 8009960:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009964:	f006 061f 	and.w	r6, r6, #31
 8009968:	fa02 f606 	lsl.w	r6, r2, r6
 800996c:	421e      	tst	r6, r3
 800996e:	d13a      	bne.n	80099e6 <__gethex+0x3fe>
 8009970:	f045 0520 	orr.w	r5, r5, #32
 8009974:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009976:	601c      	str	r4, [r3, #0]
 8009978:	9b02      	ldr	r3, [sp, #8]
 800997a:	601f      	str	r7, [r3, #0]
 800997c:	e6b0      	b.n	80096e0 <__gethex+0xf8>
 800997e:	4299      	cmp	r1, r3
 8009980:	f843 cc04 	str.w	ip, [r3, #-4]
 8009984:	d8d9      	bhi.n	800993a <__gethex+0x352>
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	459b      	cmp	fp, r3
 800998a:	db17      	blt.n	80099bc <__gethex+0x3d4>
 800998c:	6861      	ldr	r1, [r4, #4]
 800998e:	9801      	ldr	r0, [sp, #4]
 8009990:	3101      	adds	r1, #1
 8009992:	f000 fbc1 	bl	800a118 <_Balloc>
 8009996:	4681      	mov	r9, r0
 8009998:	b918      	cbnz	r0, 80099a2 <__gethex+0x3ba>
 800999a:	4602      	mov	r2, r0
 800999c:	2184      	movs	r1, #132	@ 0x84
 800999e:	4b19      	ldr	r3, [pc, #100]	@ (8009a04 <__gethex+0x41c>)
 80099a0:	e6c5      	b.n	800972e <__gethex+0x146>
 80099a2:	6922      	ldr	r2, [r4, #16]
 80099a4:	f104 010c 	add.w	r1, r4, #12
 80099a8:	3202      	adds	r2, #2
 80099aa:	0092      	lsls	r2, r2, #2
 80099ac:	300c      	adds	r0, #12
 80099ae:	f7fe ff48 	bl	8008842 <memcpy>
 80099b2:	4621      	mov	r1, r4
 80099b4:	9801      	ldr	r0, [sp, #4]
 80099b6:	f000 fbef 	bl	800a198 <_Bfree>
 80099ba:	464c      	mov	r4, r9
 80099bc:	6923      	ldr	r3, [r4, #16]
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	6122      	str	r2, [r4, #16]
 80099c2:	2201      	movs	r2, #1
 80099c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099c8:	615a      	str	r2, [r3, #20]
 80099ca:	e7be      	b.n	800994a <__gethex+0x362>
 80099cc:	6922      	ldr	r2, [r4, #16]
 80099ce:	455a      	cmp	r2, fp
 80099d0:	dd0b      	ble.n	80099ea <__gethex+0x402>
 80099d2:	2101      	movs	r1, #1
 80099d4:	4620      	mov	r0, r4
 80099d6:	f7ff fd9f 	bl	8009518 <rshift>
 80099da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099de:	3701      	adds	r7, #1
 80099e0:	42bb      	cmp	r3, r7
 80099e2:	f6ff aee0 	blt.w	80097a6 <__gethex+0x1be>
 80099e6:	2501      	movs	r5, #1
 80099e8:	e7c2      	b.n	8009970 <__gethex+0x388>
 80099ea:	f016 061f 	ands.w	r6, r6, #31
 80099ee:	d0fa      	beq.n	80099e6 <__gethex+0x3fe>
 80099f0:	4453      	add	r3, sl
 80099f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80099f6:	f000 fc81 	bl	800a2fc <__hi0bits>
 80099fa:	f1c6 0620 	rsb	r6, r6, #32
 80099fe:	42b0      	cmp	r0, r6
 8009a00:	dbe7      	blt.n	80099d2 <__gethex+0x3ea>
 8009a02:	e7f0      	b.n	80099e6 <__gethex+0x3fe>
 8009a04:	0800b60d 	.word	0x0800b60d

08009a08 <L_shift>:
 8009a08:	f1c2 0208 	rsb	r2, r2, #8
 8009a0c:	0092      	lsls	r2, r2, #2
 8009a0e:	b570      	push	{r4, r5, r6, lr}
 8009a10:	f1c2 0620 	rsb	r6, r2, #32
 8009a14:	6843      	ldr	r3, [r0, #4]
 8009a16:	6804      	ldr	r4, [r0, #0]
 8009a18:	fa03 f506 	lsl.w	r5, r3, r6
 8009a1c:	432c      	orrs	r4, r5
 8009a1e:	40d3      	lsrs	r3, r2
 8009a20:	6004      	str	r4, [r0, #0]
 8009a22:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a26:	4288      	cmp	r0, r1
 8009a28:	d3f4      	bcc.n	8009a14 <L_shift+0xc>
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}

08009a2c <__match>:
 8009a2c:	b530      	push	{r4, r5, lr}
 8009a2e:	6803      	ldr	r3, [r0, #0]
 8009a30:	3301      	adds	r3, #1
 8009a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a36:	b914      	cbnz	r4, 8009a3e <__match+0x12>
 8009a38:	6003      	str	r3, [r0, #0]
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	bd30      	pop	{r4, r5, pc}
 8009a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a42:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009a46:	2d19      	cmp	r5, #25
 8009a48:	bf98      	it	ls
 8009a4a:	3220      	addls	r2, #32
 8009a4c:	42a2      	cmp	r2, r4
 8009a4e:	d0f0      	beq.n	8009a32 <__match+0x6>
 8009a50:	2000      	movs	r0, #0
 8009a52:	e7f3      	b.n	8009a3c <__match+0x10>

08009a54 <__hexnan>:
 8009a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a58:	2500      	movs	r5, #0
 8009a5a:	680b      	ldr	r3, [r1, #0]
 8009a5c:	4682      	mov	sl, r0
 8009a5e:	115e      	asrs	r6, r3, #5
 8009a60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009a64:	f013 031f 	ands.w	r3, r3, #31
 8009a68:	bf18      	it	ne
 8009a6a:	3604      	addne	r6, #4
 8009a6c:	1f37      	subs	r7, r6, #4
 8009a6e:	4690      	mov	r8, r2
 8009a70:	46b9      	mov	r9, r7
 8009a72:	463c      	mov	r4, r7
 8009a74:	46ab      	mov	fp, r5
 8009a76:	b087      	sub	sp, #28
 8009a78:	6801      	ldr	r1, [r0, #0]
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a80:	9502      	str	r5, [sp, #8]
 8009a82:	784a      	ldrb	r2, [r1, #1]
 8009a84:	1c4b      	adds	r3, r1, #1
 8009a86:	9303      	str	r3, [sp, #12]
 8009a88:	b342      	cbz	r2, 8009adc <__hexnan+0x88>
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	9105      	str	r1, [sp, #20]
 8009a8e:	9204      	str	r2, [sp, #16]
 8009a90:	f7ff fd95 	bl	80095be <__hexdig_fun>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d151      	bne.n	8009b3c <__hexnan+0xe8>
 8009a98:	9a04      	ldr	r2, [sp, #16]
 8009a9a:	9905      	ldr	r1, [sp, #20]
 8009a9c:	2a20      	cmp	r2, #32
 8009a9e:	d818      	bhi.n	8009ad2 <__hexnan+0x7e>
 8009aa0:	9b02      	ldr	r3, [sp, #8]
 8009aa2:	459b      	cmp	fp, r3
 8009aa4:	dd13      	ble.n	8009ace <__hexnan+0x7a>
 8009aa6:	454c      	cmp	r4, r9
 8009aa8:	d206      	bcs.n	8009ab8 <__hexnan+0x64>
 8009aaa:	2d07      	cmp	r5, #7
 8009aac:	dc04      	bgt.n	8009ab8 <__hexnan+0x64>
 8009aae:	462a      	mov	r2, r5
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f7ff ffa8 	bl	8009a08 <L_shift>
 8009ab8:	4544      	cmp	r4, r8
 8009aba:	d952      	bls.n	8009b62 <__hexnan+0x10e>
 8009abc:	2300      	movs	r3, #0
 8009abe:	f1a4 0904 	sub.w	r9, r4, #4
 8009ac2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ac6:	461d      	mov	r5, r3
 8009ac8:	464c      	mov	r4, r9
 8009aca:	f8cd b008 	str.w	fp, [sp, #8]
 8009ace:	9903      	ldr	r1, [sp, #12]
 8009ad0:	e7d7      	b.n	8009a82 <__hexnan+0x2e>
 8009ad2:	2a29      	cmp	r2, #41	@ 0x29
 8009ad4:	d157      	bne.n	8009b86 <__hexnan+0x132>
 8009ad6:	3102      	adds	r1, #2
 8009ad8:	f8ca 1000 	str.w	r1, [sl]
 8009adc:	f1bb 0f00 	cmp.w	fp, #0
 8009ae0:	d051      	beq.n	8009b86 <__hexnan+0x132>
 8009ae2:	454c      	cmp	r4, r9
 8009ae4:	d206      	bcs.n	8009af4 <__hexnan+0xa0>
 8009ae6:	2d07      	cmp	r5, #7
 8009ae8:	dc04      	bgt.n	8009af4 <__hexnan+0xa0>
 8009aea:	462a      	mov	r2, r5
 8009aec:	4649      	mov	r1, r9
 8009aee:	4620      	mov	r0, r4
 8009af0:	f7ff ff8a 	bl	8009a08 <L_shift>
 8009af4:	4544      	cmp	r4, r8
 8009af6:	d936      	bls.n	8009b66 <__hexnan+0x112>
 8009af8:	4623      	mov	r3, r4
 8009afa:	f1a8 0204 	sub.w	r2, r8, #4
 8009afe:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b02:	429f      	cmp	r7, r3
 8009b04:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b08:	d2f9      	bcs.n	8009afe <__hexnan+0xaa>
 8009b0a:	1b3b      	subs	r3, r7, r4
 8009b0c:	f023 0303 	bic.w	r3, r3, #3
 8009b10:	3304      	adds	r3, #4
 8009b12:	3401      	adds	r4, #1
 8009b14:	3e03      	subs	r6, #3
 8009b16:	42b4      	cmp	r4, r6
 8009b18:	bf88      	it	hi
 8009b1a:	2304      	movhi	r3, #4
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4443      	add	r3, r8
 8009b20:	f843 2b04 	str.w	r2, [r3], #4
 8009b24:	429f      	cmp	r7, r3
 8009b26:	d2fb      	bcs.n	8009b20 <__hexnan+0xcc>
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	b91b      	cbnz	r3, 8009b34 <__hexnan+0xe0>
 8009b2c:	4547      	cmp	r7, r8
 8009b2e:	d128      	bne.n	8009b82 <__hexnan+0x12e>
 8009b30:	2301      	movs	r3, #1
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	2005      	movs	r0, #5
 8009b36:	b007      	add	sp, #28
 8009b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3c:	3501      	adds	r5, #1
 8009b3e:	2d08      	cmp	r5, #8
 8009b40:	f10b 0b01 	add.w	fp, fp, #1
 8009b44:	dd06      	ble.n	8009b54 <__hexnan+0x100>
 8009b46:	4544      	cmp	r4, r8
 8009b48:	d9c1      	bls.n	8009ace <__hexnan+0x7a>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	2501      	movs	r5, #1
 8009b4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b52:	3c04      	subs	r4, #4
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	f000 000f 	and.w	r0, r0, #15
 8009b5a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009b5e:	6020      	str	r0, [r4, #0]
 8009b60:	e7b5      	b.n	8009ace <__hexnan+0x7a>
 8009b62:	2508      	movs	r5, #8
 8009b64:	e7b3      	b.n	8009ace <__hexnan+0x7a>
 8009b66:	9b01      	ldr	r3, [sp, #4]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d0dd      	beq.n	8009b28 <__hexnan+0xd4>
 8009b6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b70:	f1c3 0320 	rsb	r3, r3, #32
 8009b74:	40da      	lsrs	r2, r3
 8009b76:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009b80:	e7d2      	b.n	8009b28 <__hexnan+0xd4>
 8009b82:	3f04      	subs	r7, #4
 8009b84:	e7d0      	b.n	8009b28 <__hexnan+0xd4>
 8009b86:	2004      	movs	r0, #4
 8009b88:	e7d5      	b.n	8009b36 <__hexnan+0xe2>

08009b8a <__ssputs_r>:
 8009b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b8e:	461f      	mov	r7, r3
 8009b90:	688e      	ldr	r6, [r1, #8]
 8009b92:	4682      	mov	sl, r0
 8009b94:	42be      	cmp	r6, r7
 8009b96:	460c      	mov	r4, r1
 8009b98:	4690      	mov	r8, r2
 8009b9a:	680b      	ldr	r3, [r1, #0]
 8009b9c:	d82d      	bhi.n	8009bfa <__ssputs_r+0x70>
 8009b9e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ba2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ba6:	d026      	beq.n	8009bf6 <__ssputs_r+0x6c>
 8009ba8:	6965      	ldr	r5, [r4, #20]
 8009baa:	6909      	ldr	r1, [r1, #16]
 8009bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bb0:	eba3 0901 	sub.w	r9, r3, r1
 8009bb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bb8:	1c7b      	adds	r3, r7, #1
 8009bba:	444b      	add	r3, r9
 8009bbc:	106d      	asrs	r5, r5, #1
 8009bbe:	429d      	cmp	r5, r3
 8009bc0:	bf38      	it	cc
 8009bc2:	461d      	movcc	r5, r3
 8009bc4:	0553      	lsls	r3, r2, #21
 8009bc6:	d527      	bpl.n	8009c18 <__ssputs_r+0x8e>
 8009bc8:	4629      	mov	r1, r5
 8009bca:	f000 f95f 	bl	8009e8c <_malloc_r>
 8009bce:	4606      	mov	r6, r0
 8009bd0:	b360      	cbz	r0, 8009c2c <__ssputs_r+0xa2>
 8009bd2:	464a      	mov	r2, r9
 8009bd4:	6921      	ldr	r1, [r4, #16]
 8009bd6:	f7fe fe34 	bl	8008842 <memcpy>
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009be4:	81a3      	strh	r3, [r4, #12]
 8009be6:	6126      	str	r6, [r4, #16]
 8009be8:	444e      	add	r6, r9
 8009bea:	6026      	str	r6, [r4, #0]
 8009bec:	463e      	mov	r6, r7
 8009bee:	6165      	str	r5, [r4, #20]
 8009bf0:	eba5 0509 	sub.w	r5, r5, r9
 8009bf4:	60a5      	str	r5, [r4, #8]
 8009bf6:	42be      	cmp	r6, r7
 8009bf8:	d900      	bls.n	8009bfc <__ssputs_r+0x72>
 8009bfa:	463e      	mov	r6, r7
 8009bfc:	4632      	mov	r2, r6
 8009bfe:	4641      	mov	r1, r8
 8009c00:	6820      	ldr	r0, [r4, #0]
 8009c02:	f000 ffad 	bl	800ab60 <memmove>
 8009c06:	2000      	movs	r0, #0
 8009c08:	68a3      	ldr	r3, [r4, #8]
 8009c0a:	1b9b      	subs	r3, r3, r6
 8009c0c:	60a3      	str	r3, [r4, #8]
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	4433      	add	r3, r6
 8009c12:	6023      	str	r3, [r4, #0]
 8009c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c18:	462a      	mov	r2, r5
 8009c1a:	f000 ff66 	bl	800aaea <_realloc_r>
 8009c1e:	4606      	mov	r6, r0
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d1e0      	bne.n	8009be6 <__ssputs_r+0x5c>
 8009c24:	4650      	mov	r0, sl
 8009c26:	6921      	ldr	r1, [r4, #16]
 8009c28:	f001 f83c 	bl	800aca4 <_free_r>
 8009c2c:	230c      	movs	r3, #12
 8009c2e:	f8ca 3000 	str.w	r3, [sl]
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c3c:	81a3      	strh	r3, [r4, #12]
 8009c3e:	e7e9      	b.n	8009c14 <__ssputs_r+0x8a>

08009c40 <_svfiprintf_r>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	4698      	mov	r8, r3
 8009c46:	898b      	ldrh	r3, [r1, #12]
 8009c48:	4607      	mov	r7, r0
 8009c4a:	061b      	lsls	r3, r3, #24
 8009c4c:	460d      	mov	r5, r1
 8009c4e:	4614      	mov	r4, r2
 8009c50:	b09d      	sub	sp, #116	@ 0x74
 8009c52:	d510      	bpl.n	8009c76 <_svfiprintf_r+0x36>
 8009c54:	690b      	ldr	r3, [r1, #16]
 8009c56:	b973      	cbnz	r3, 8009c76 <_svfiprintf_r+0x36>
 8009c58:	2140      	movs	r1, #64	@ 0x40
 8009c5a:	f000 f917 	bl	8009e8c <_malloc_r>
 8009c5e:	6028      	str	r0, [r5, #0]
 8009c60:	6128      	str	r0, [r5, #16]
 8009c62:	b930      	cbnz	r0, 8009c72 <_svfiprintf_r+0x32>
 8009c64:	230c      	movs	r3, #12
 8009c66:	603b      	str	r3, [r7, #0]
 8009c68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c6c:	b01d      	add	sp, #116	@ 0x74
 8009c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c72:	2340      	movs	r3, #64	@ 0x40
 8009c74:	616b      	str	r3, [r5, #20]
 8009c76:	2300      	movs	r3, #0
 8009c78:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c7a:	2320      	movs	r3, #32
 8009c7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c80:	2330      	movs	r3, #48	@ 0x30
 8009c82:	f04f 0901 	mov.w	r9, #1
 8009c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c8a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009e24 <_svfiprintf_r+0x1e4>
 8009c8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c92:	4623      	mov	r3, r4
 8009c94:	469a      	mov	sl, r3
 8009c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c9a:	b10a      	cbz	r2, 8009ca0 <_svfiprintf_r+0x60>
 8009c9c:	2a25      	cmp	r2, #37	@ 0x25
 8009c9e:	d1f9      	bne.n	8009c94 <_svfiprintf_r+0x54>
 8009ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ca4:	d00b      	beq.n	8009cbe <_svfiprintf_r+0x7e>
 8009ca6:	465b      	mov	r3, fp
 8009ca8:	4622      	mov	r2, r4
 8009caa:	4629      	mov	r1, r5
 8009cac:	4638      	mov	r0, r7
 8009cae:	f7ff ff6c 	bl	8009b8a <__ssputs_r>
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	f000 80a7 	beq.w	8009e06 <_svfiprintf_r+0x1c6>
 8009cb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cba:	445a      	add	r2, fp
 8009cbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f000 809f 	beq.w	8009e06 <_svfiprintf_r+0x1c6>
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cd2:	f10a 0a01 	add.w	sl, sl, #1
 8009cd6:	9304      	str	r3, [sp, #16]
 8009cd8:	9307      	str	r3, [sp, #28]
 8009cda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cde:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ce0:	4654      	mov	r4, sl
 8009ce2:	2205      	movs	r2, #5
 8009ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce8:	484e      	ldr	r0, [pc, #312]	@ (8009e24 <_svfiprintf_r+0x1e4>)
 8009cea:	f7fe fd9c 	bl	8008826 <memchr>
 8009cee:	9a04      	ldr	r2, [sp, #16]
 8009cf0:	b9d8      	cbnz	r0, 8009d2a <_svfiprintf_r+0xea>
 8009cf2:	06d0      	lsls	r0, r2, #27
 8009cf4:	bf44      	itt	mi
 8009cf6:	2320      	movmi	r3, #32
 8009cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cfc:	0711      	lsls	r1, r2, #28
 8009cfe:	bf44      	itt	mi
 8009d00:	232b      	movmi	r3, #43	@ 0x2b
 8009d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d06:	f89a 3000 	ldrb.w	r3, [sl]
 8009d0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d0c:	d015      	beq.n	8009d3a <_svfiprintf_r+0xfa>
 8009d0e:	4654      	mov	r4, sl
 8009d10:	2000      	movs	r0, #0
 8009d12:	f04f 0c0a 	mov.w	ip, #10
 8009d16:	9a07      	ldr	r2, [sp, #28]
 8009d18:	4621      	mov	r1, r4
 8009d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d1e:	3b30      	subs	r3, #48	@ 0x30
 8009d20:	2b09      	cmp	r3, #9
 8009d22:	d94b      	bls.n	8009dbc <_svfiprintf_r+0x17c>
 8009d24:	b1b0      	cbz	r0, 8009d54 <_svfiprintf_r+0x114>
 8009d26:	9207      	str	r2, [sp, #28]
 8009d28:	e014      	b.n	8009d54 <_svfiprintf_r+0x114>
 8009d2a:	eba0 0308 	sub.w	r3, r0, r8
 8009d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8009d32:	4313      	orrs	r3, r2
 8009d34:	46a2      	mov	sl, r4
 8009d36:	9304      	str	r3, [sp, #16]
 8009d38:	e7d2      	b.n	8009ce0 <_svfiprintf_r+0xa0>
 8009d3a:	9b03      	ldr	r3, [sp, #12]
 8009d3c:	1d19      	adds	r1, r3, #4
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	9103      	str	r1, [sp, #12]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	bfbb      	ittet	lt
 8009d46:	425b      	neglt	r3, r3
 8009d48:	f042 0202 	orrlt.w	r2, r2, #2
 8009d4c:	9307      	strge	r3, [sp, #28]
 8009d4e:	9307      	strlt	r3, [sp, #28]
 8009d50:	bfb8      	it	lt
 8009d52:	9204      	strlt	r2, [sp, #16]
 8009d54:	7823      	ldrb	r3, [r4, #0]
 8009d56:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d58:	d10a      	bne.n	8009d70 <_svfiprintf_r+0x130>
 8009d5a:	7863      	ldrb	r3, [r4, #1]
 8009d5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d5e:	d132      	bne.n	8009dc6 <_svfiprintf_r+0x186>
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	3402      	adds	r4, #2
 8009d64:	1d1a      	adds	r2, r3, #4
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	9203      	str	r2, [sp, #12]
 8009d6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d6e:	9305      	str	r3, [sp, #20]
 8009d70:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009e28 <_svfiprintf_r+0x1e8>
 8009d74:	2203      	movs	r2, #3
 8009d76:	4650      	mov	r0, sl
 8009d78:	7821      	ldrb	r1, [r4, #0]
 8009d7a:	f7fe fd54 	bl	8008826 <memchr>
 8009d7e:	b138      	cbz	r0, 8009d90 <_svfiprintf_r+0x150>
 8009d80:	2240      	movs	r2, #64	@ 0x40
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	eba0 000a 	sub.w	r0, r0, sl
 8009d88:	4082      	lsls	r2, r0
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	3401      	adds	r4, #1
 8009d8e:	9304      	str	r3, [sp, #16]
 8009d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d94:	2206      	movs	r2, #6
 8009d96:	4825      	ldr	r0, [pc, #148]	@ (8009e2c <_svfiprintf_r+0x1ec>)
 8009d98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d9c:	f7fe fd43 	bl	8008826 <memchr>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d036      	beq.n	8009e12 <_svfiprintf_r+0x1d2>
 8009da4:	4b22      	ldr	r3, [pc, #136]	@ (8009e30 <_svfiprintf_r+0x1f0>)
 8009da6:	bb1b      	cbnz	r3, 8009df0 <_svfiprintf_r+0x1b0>
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	3307      	adds	r3, #7
 8009dac:	f023 0307 	bic.w	r3, r3, #7
 8009db0:	3308      	adds	r3, #8
 8009db2:	9303      	str	r3, [sp, #12]
 8009db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db6:	4433      	add	r3, r6
 8009db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dba:	e76a      	b.n	8009c92 <_svfiprintf_r+0x52>
 8009dbc:	460c      	mov	r4, r1
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dc4:	e7a8      	b.n	8009d18 <_svfiprintf_r+0xd8>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	f04f 0c0a 	mov.w	ip, #10
 8009dcc:	4619      	mov	r1, r3
 8009dce:	3401      	adds	r4, #1
 8009dd0:	9305      	str	r3, [sp, #20]
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd8:	3a30      	subs	r2, #48	@ 0x30
 8009dda:	2a09      	cmp	r2, #9
 8009ddc:	d903      	bls.n	8009de6 <_svfiprintf_r+0x1a6>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0c6      	beq.n	8009d70 <_svfiprintf_r+0x130>
 8009de2:	9105      	str	r1, [sp, #20]
 8009de4:	e7c4      	b.n	8009d70 <_svfiprintf_r+0x130>
 8009de6:	4604      	mov	r4, r0
 8009de8:	2301      	movs	r3, #1
 8009dea:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dee:	e7f0      	b.n	8009dd2 <_svfiprintf_r+0x192>
 8009df0:	ab03      	add	r3, sp, #12
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	462a      	mov	r2, r5
 8009df6:	4638      	mov	r0, r7
 8009df8:	4b0e      	ldr	r3, [pc, #56]	@ (8009e34 <_svfiprintf_r+0x1f4>)
 8009dfa:	a904      	add	r1, sp, #16
 8009dfc:	f7fc ff68 	bl	8006cd0 <_printf_float>
 8009e00:	1c42      	adds	r2, r0, #1
 8009e02:	4606      	mov	r6, r0
 8009e04:	d1d6      	bne.n	8009db4 <_svfiprintf_r+0x174>
 8009e06:	89ab      	ldrh	r3, [r5, #12]
 8009e08:	065b      	lsls	r3, r3, #25
 8009e0a:	f53f af2d 	bmi.w	8009c68 <_svfiprintf_r+0x28>
 8009e0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e10:	e72c      	b.n	8009c6c <_svfiprintf_r+0x2c>
 8009e12:	ab03      	add	r3, sp, #12
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	462a      	mov	r2, r5
 8009e18:	4638      	mov	r0, r7
 8009e1a:	4b06      	ldr	r3, [pc, #24]	@ (8009e34 <_svfiprintf_r+0x1f4>)
 8009e1c:	a904      	add	r1, sp, #16
 8009e1e:	f7fd f9f5 	bl	800720c <_printf_i>
 8009e22:	e7ed      	b.n	8009e00 <_svfiprintf_r+0x1c0>
 8009e24:	0800b67e 	.word	0x0800b67e
 8009e28:	0800b684 	.word	0x0800b684
 8009e2c:	0800b688 	.word	0x0800b688
 8009e30:	08006cd1 	.word	0x08006cd1
 8009e34:	08009b8b 	.word	0x08009b8b

08009e38 <malloc>:
 8009e38:	4b02      	ldr	r3, [pc, #8]	@ (8009e44 <malloc+0xc>)
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	6818      	ldr	r0, [r3, #0]
 8009e3e:	f000 b825 	b.w	8009e8c <_malloc_r>
 8009e42:	bf00      	nop
 8009e44:	200001a0 	.word	0x200001a0

08009e48 <sbrk_aligned>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	4e0f      	ldr	r6, [pc, #60]	@ (8009e88 <sbrk_aligned+0x40>)
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	6831      	ldr	r1, [r6, #0]
 8009e50:	4605      	mov	r5, r0
 8009e52:	b911      	cbnz	r1, 8009e5a <sbrk_aligned+0x12>
 8009e54:	f000 fed2 	bl	800abfc <_sbrk_r>
 8009e58:	6030      	str	r0, [r6, #0]
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f000 fecd 	bl	800abfc <_sbrk_r>
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	d103      	bne.n	8009e6e <sbrk_aligned+0x26>
 8009e66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	bd70      	pop	{r4, r5, r6, pc}
 8009e6e:	1cc4      	adds	r4, r0, #3
 8009e70:	f024 0403 	bic.w	r4, r4, #3
 8009e74:	42a0      	cmp	r0, r4
 8009e76:	d0f8      	beq.n	8009e6a <sbrk_aligned+0x22>
 8009e78:	1a21      	subs	r1, r4, r0
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f000 febe 	bl	800abfc <_sbrk_r>
 8009e80:	3001      	adds	r0, #1
 8009e82:	d1f2      	bne.n	8009e6a <sbrk_aligned+0x22>
 8009e84:	e7ef      	b.n	8009e66 <sbrk_aligned+0x1e>
 8009e86:	bf00      	nop
 8009e88:	20000570 	.word	0x20000570

08009e8c <_malloc_r>:
 8009e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e90:	1ccd      	adds	r5, r1, #3
 8009e92:	f025 0503 	bic.w	r5, r5, #3
 8009e96:	3508      	adds	r5, #8
 8009e98:	2d0c      	cmp	r5, #12
 8009e9a:	bf38      	it	cc
 8009e9c:	250c      	movcc	r5, #12
 8009e9e:	2d00      	cmp	r5, #0
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	db01      	blt.n	8009ea8 <_malloc_r+0x1c>
 8009ea4:	42a9      	cmp	r1, r5
 8009ea6:	d904      	bls.n	8009eb2 <_malloc_r+0x26>
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	6033      	str	r3, [r6, #0]
 8009eac:	2000      	movs	r0, #0
 8009eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f88 <_malloc_r+0xfc>
 8009eb6:	f000 f923 	bl	800a100 <__malloc_lock>
 8009eba:	f8d8 3000 	ldr.w	r3, [r8]
 8009ebe:	461c      	mov	r4, r3
 8009ec0:	bb44      	cbnz	r4, 8009f14 <_malloc_r+0x88>
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f7ff ffbf 	bl	8009e48 <sbrk_aligned>
 8009eca:	1c43      	adds	r3, r0, #1
 8009ecc:	4604      	mov	r4, r0
 8009ece:	d158      	bne.n	8009f82 <_malloc_r+0xf6>
 8009ed0:	f8d8 4000 	ldr.w	r4, [r8]
 8009ed4:	4627      	mov	r7, r4
 8009ed6:	2f00      	cmp	r7, #0
 8009ed8:	d143      	bne.n	8009f62 <_malloc_r+0xd6>
 8009eda:	2c00      	cmp	r4, #0
 8009edc:	d04b      	beq.n	8009f76 <_malloc_r+0xea>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	eb04 0903 	add.w	r9, r4, r3
 8009ee8:	f000 fe88 	bl	800abfc <_sbrk_r>
 8009eec:	4581      	cmp	r9, r0
 8009eee:	d142      	bne.n	8009f76 <_malloc_r+0xea>
 8009ef0:	6821      	ldr	r1, [r4, #0]
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	1a6d      	subs	r5, r5, r1
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	f7ff ffa6 	bl	8009e48 <sbrk_aligned>
 8009efc:	3001      	adds	r0, #1
 8009efe:	d03a      	beq.n	8009f76 <_malloc_r+0xea>
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	442b      	add	r3, r5
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	f8d8 3000 	ldr.w	r3, [r8]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	bb62      	cbnz	r2, 8009f68 <_malloc_r+0xdc>
 8009f0e:	f8c8 7000 	str.w	r7, [r8]
 8009f12:	e00f      	b.n	8009f34 <_malloc_r+0xa8>
 8009f14:	6822      	ldr	r2, [r4, #0]
 8009f16:	1b52      	subs	r2, r2, r5
 8009f18:	d420      	bmi.n	8009f5c <_malloc_r+0xd0>
 8009f1a:	2a0b      	cmp	r2, #11
 8009f1c:	d917      	bls.n	8009f4e <_malloc_r+0xc2>
 8009f1e:	1961      	adds	r1, r4, r5
 8009f20:	42a3      	cmp	r3, r4
 8009f22:	6025      	str	r5, [r4, #0]
 8009f24:	bf18      	it	ne
 8009f26:	6059      	strne	r1, [r3, #4]
 8009f28:	6863      	ldr	r3, [r4, #4]
 8009f2a:	bf08      	it	eq
 8009f2c:	f8c8 1000 	streq.w	r1, [r8]
 8009f30:	5162      	str	r2, [r4, r5]
 8009f32:	604b      	str	r3, [r1, #4]
 8009f34:	4630      	mov	r0, r6
 8009f36:	f000 f8e9 	bl	800a10c <__malloc_unlock>
 8009f3a:	f104 000b 	add.w	r0, r4, #11
 8009f3e:	1d23      	adds	r3, r4, #4
 8009f40:	f020 0007 	bic.w	r0, r0, #7
 8009f44:	1ac2      	subs	r2, r0, r3
 8009f46:	bf1c      	itt	ne
 8009f48:	1a1b      	subne	r3, r3, r0
 8009f4a:	50a3      	strne	r3, [r4, r2]
 8009f4c:	e7af      	b.n	8009eae <_malloc_r+0x22>
 8009f4e:	6862      	ldr	r2, [r4, #4]
 8009f50:	42a3      	cmp	r3, r4
 8009f52:	bf0c      	ite	eq
 8009f54:	f8c8 2000 	streq.w	r2, [r8]
 8009f58:	605a      	strne	r2, [r3, #4]
 8009f5a:	e7eb      	b.n	8009f34 <_malloc_r+0xa8>
 8009f5c:	4623      	mov	r3, r4
 8009f5e:	6864      	ldr	r4, [r4, #4]
 8009f60:	e7ae      	b.n	8009ec0 <_malloc_r+0x34>
 8009f62:	463c      	mov	r4, r7
 8009f64:	687f      	ldr	r7, [r7, #4]
 8009f66:	e7b6      	b.n	8009ed6 <_malloc_r+0x4a>
 8009f68:	461a      	mov	r2, r3
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	42a3      	cmp	r3, r4
 8009f6e:	d1fb      	bne.n	8009f68 <_malloc_r+0xdc>
 8009f70:	2300      	movs	r3, #0
 8009f72:	6053      	str	r3, [r2, #4]
 8009f74:	e7de      	b.n	8009f34 <_malloc_r+0xa8>
 8009f76:	230c      	movs	r3, #12
 8009f78:	4630      	mov	r0, r6
 8009f7a:	6033      	str	r3, [r6, #0]
 8009f7c:	f000 f8c6 	bl	800a10c <__malloc_unlock>
 8009f80:	e794      	b.n	8009eac <_malloc_r+0x20>
 8009f82:	6005      	str	r5, [r0, #0]
 8009f84:	e7d6      	b.n	8009f34 <_malloc_r+0xa8>
 8009f86:	bf00      	nop
 8009f88:	20000574 	.word	0x20000574

08009f8c <__ascii_mbtowc>:
 8009f8c:	b082      	sub	sp, #8
 8009f8e:	b901      	cbnz	r1, 8009f92 <__ascii_mbtowc+0x6>
 8009f90:	a901      	add	r1, sp, #4
 8009f92:	b142      	cbz	r2, 8009fa6 <__ascii_mbtowc+0x1a>
 8009f94:	b14b      	cbz	r3, 8009faa <__ascii_mbtowc+0x1e>
 8009f96:	7813      	ldrb	r3, [r2, #0]
 8009f98:	600b      	str	r3, [r1, #0]
 8009f9a:	7812      	ldrb	r2, [r2, #0]
 8009f9c:	1e10      	subs	r0, r2, #0
 8009f9e:	bf18      	it	ne
 8009fa0:	2001      	movne	r0, #1
 8009fa2:	b002      	add	sp, #8
 8009fa4:	4770      	bx	lr
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	e7fb      	b.n	8009fa2 <__ascii_mbtowc+0x16>
 8009faa:	f06f 0001 	mvn.w	r0, #1
 8009fae:	e7f8      	b.n	8009fa2 <__ascii_mbtowc+0x16>

08009fb0 <__sflush_r>:
 8009fb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	0716      	lsls	r6, r2, #28
 8009fb8:	4605      	mov	r5, r0
 8009fba:	460c      	mov	r4, r1
 8009fbc:	d454      	bmi.n	800a068 <__sflush_r+0xb8>
 8009fbe:	684b      	ldr	r3, [r1, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	dc02      	bgt.n	8009fca <__sflush_r+0x1a>
 8009fc4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	dd48      	ble.n	800a05c <__sflush_r+0xac>
 8009fca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fcc:	2e00      	cmp	r6, #0
 8009fce:	d045      	beq.n	800a05c <__sflush_r+0xac>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009fd6:	682f      	ldr	r7, [r5, #0]
 8009fd8:	6a21      	ldr	r1, [r4, #32]
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	d030      	beq.n	800a040 <__sflush_r+0x90>
 8009fde:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	0759      	lsls	r1, r3, #29
 8009fe4:	d505      	bpl.n	8009ff2 <__sflush_r+0x42>
 8009fe6:	6863      	ldr	r3, [r4, #4]
 8009fe8:	1ad2      	subs	r2, r2, r3
 8009fea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fec:	b10b      	cbz	r3, 8009ff2 <__sflush_r+0x42>
 8009fee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ff0:	1ad2      	subs	r2, r2, r3
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ff8:	6a21      	ldr	r1, [r4, #32]
 8009ffa:	47b0      	blx	r6
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	d106      	bne.n	800a010 <__sflush_r+0x60>
 800a002:	6829      	ldr	r1, [r5, #0]
 800a004:	291d      	cmp	r1, #29
 800a006:	d82b      	bhi.n	800a060 <__sflush_r+0xb0>
 800a008:	4a28      	ldr	r2, [pc, #160]	@ (800a0ac <__sflush_r+0xfc>)
 800a00a:	410a      	asrs	r2, r1
 800a00c:	07d6      	lsls	r6, r2, #31
 800a00e:	d427      	bmi.n	800a060 <__sflush_r+0xb0>
 800a010:	2200      	movs	r2, #0
 800a012:	6062      	str	r2, [r4, #4]
 800a014:	6922      	ldr	r2, [r4, #16]
 800a016:	04d9      	lsls	r1, r3, #19
 800a018:	6022      	str	r2, [r4, #0]
 800a01a:	d504      	bpl.n	800a026 <__sflush_r+0x76>
 800a01c:	1c42      	adds	r2, r0, #1
 800a01e:	d101      	bne.n	800a024 <__sflush_r+0x74>
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	b903      	cbnz	r3, 800a026 <__sflush_r+0x76>
 800a024:	6560      	str	r0, [r4, #84]	@ 0x54
 800a026:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a028:	602f      	str	r7, [r5, #0]
 800a02a:	b1b9      	cbz	r1, 800a05c <__sflush_r+0xac>
 800a02c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a030:	4299      	cmp	r1, r3
 800a032:	d002      	beq.n	800a03a <__sflush_r+0x8a>
 800a034:	4628      	mov	r0, r5
 800a036:	f000 fe35 	bl	800aca4 <_free_r>
 800a03a:	2300      	movs	r3, #0
 800a03c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a03e:	e00d      	b.n	800a05c <__sflush_r+0xac>
 800a040:	2301      	movs	r3, #1
 800a042:	4628      	mov	r0, r5
 800a044:	47b0      	blx	r6
 800a046:	4602      	mov	r2, r0
 800a048:	1c50      	adds	r0, r2, #1
 800a04a:	d1c9      	bne.n	8009fe0 <__sflush_r+0x30>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0c6      	beq.n	8009fe0 <__sflush_r+0x30>
 800a052:	2b1d      	cmp	r3, #29
 800a054:	d001      	beq.n	800a05a <__sflush_r+0xaa>
 800a056:	2b16      	cmp	r3, #22
 800a058:	d11d      	bne.n	800a096 <__sflush_r+0xe6>
 800a05a:	602f      	str	r7, [r5, #0]
 800a05c:	2000      	movs	r0, #0
 800a05e:	e021      	b.n	800a0a4 <__sflush_r+0xf4>
 800a060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a064:	b21b      	sxth	r3, r3
 800a066:	e01a      	b.n	800a09e <__sflush_r+0xee>
 800a068:	690f      	ldr	r7, [r1, #16]
 800a06a:	2f00      	cmp	r7, #0
 800a06c:	d0f6      	beq.n	800a05c <__sflush_r+0xac>
 800a06e:	0793      	lsls	r3, r2, #30
 800a070:	bf18      	it	ne
 800a072:	2300      	movne	r3, #0
 800a074:	680e      	ldr	r6, [r1, #0]
 800a076:	bf08      	it	eq
 800a078:	694b      	ldreq	r3, [r1, #20]
 800a07a:	1bf6      	subs	r6, r6, r7
 800a07c:	600f      	str	r7, [r1, #0]
 800a07e:	608b      	str	r3, [r1, #8]
 800a080:	2e00      	cmp	r6, #0
 800a082:	ddeb      	ble.n	800a05c <__sflush_r+0xac>
 800a084:	4633      	mov	r3, r6
 800a086:	463a      	mov	r2, r7
 800a088:	4628      	mov	r0, r5
 800a08a:	6a21      	ldr	r1, [r4, #32]
 800a08c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a090:	47e0      	blx	ip
 800a092:	2800      	cmp	r0, #0
 800a094:	dc07      	bgt.n	800a0a6 <__sflush_r+0xf6>
 800a096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a09a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a09e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0a2:	81a3      	strh	r3, [r4, #12]
 800a0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0a6:	4407      	add	r7, r0
 800a0a8:	1a36      	subs	r6, r6, r0
 800a0aa:	e7e9      	b.n	800a080 <__sflush_r+0xd0>
 800a0ac:	dfbffffe 	.word	0xdfbffffe

0800a0b0 <_fflush_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	690b      	ldr	r3, [r1, #16]
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	b913      	cbnz	r3, 800a0c0 <_fflush_r+0x10>
 800a0ba:	2500      	movs	r5, #0
 800a0bc:	4628      	mov	r0, r5
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	b118      	cbz	r0, 800a0ca <_fflush_r+0x1a>
 800a0c2:	6a03      	ldr	r3, [r0, #32]
 800a0c4:	b90b      	cbnz	r3, 800a0ca <_fflush_r+0x1a>
 800a0c6:	f7fd fcb1 	bl	8007a2c <__sinit>
 800a0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0f3      	beq.n	800a0ba <_fflush_r+0xa>
 800a0d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0d4:	07d0      	lsls	r0, r2, #31
 800a0d6:	d404      	bmi.n	800a0e2 <_fflush_r+0x32>
 800a0d8:	0599      	lsls	r1, r3, #22
 800a0da:	d402      	bmi.n	800a0e2 <_fflush_r+0x32>
 800a0dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0de:	f7fe fba0 	bl	8008822 <__retarget_lock_acquire_recursive>
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	f7ff ff63 	bl	8009fb0 <__sflush_r>
 800a0ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	07da      	lsls	r2, r3, #31
 800a0f0:	d4e4      	bmi.n	800a0bc <_fflush_r+0xc>
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	059b      	lsls	r3, r3, #22
 800a0f6:	d4e1      	bmi.n	800a0bc <_fflush_r+0xc>
 800a0f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0fa:	f7fe fb93 	bl	8008824 <__retarget_lock_release_recursive>
 800a0fe:	e7dd      	b.n	800a0bc <_fflush_r+0xc>

0800a100 <__malloc_lock>:
 800a100:	4801      	ldr	r0, [pc, #4]	@ (800a108 <__malloc_lock+0x8>)
 800a102:	f7fe bb8e 	b.w	8008822 <__retarget_lock_acquire_recursive>
 800a106:	bf00      	nop
 800a108:	2000056c 	.word	0x2000056c

0800a10c <__malloc_unlock>:
 800a10c:	4801      	ldr	r0, [pc, #4]	@ (800a114 <__malloc_unlock+0x8>)
 800a10e:	f7fe bb89 	b.w	8008824 <__retarget_lock_release_recursive>
 800a112:	bf00      	nop
 800a114:	2000056c 	.word	0x2000056c

0800a118 <_Balloc>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	69c6      	ldr	r6, [r0, #28]
 800a11c:	4604      	mov	r4, r0
 800a11e:	460d      	mov	r5, r1
 800a120:	b976      	cbnz	r6, 800a140 <_Balloc+0x28>
 800a122:	2010      	movs	r0, #16
 800a124:	f7ff fe88 	bl	8009e38 <malloc>
 800a128:	4602      	mov	r2, r0
 800a12a:	61e0      	str	r0, [r4, #28]
 800a12c:	b920      	cbnz	r0, 800a138 <_Balloc+0x20>
 800a12e:	216b      	movs	r1, #107	@ 0x6b
 800a130:	4b17      	ldr	r3, [pc, #92]	@ (800a190 <_Balloc+0x78>)
 800a132:	4818      	ldr	r0, [pc, #96]	@ (800a194 <_Balloc+0x7c>)
 800a134:	f000 fd84 	bl	800ac40 <__assert_func>
 800a138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a13c:	6006      	str	r6, [r0, #0]
 800a13e:	60c6      	str	r6, [r0, #12]
 800a140:	69e6      	ldr	r6, [r4, #28]
 800a142:	68f3      	ldr	r3, [r6, #12]
 800a144:	b183      	cbz	r3, 800a168 <_Balloc+0x50>
 800a146:	69e3      	ldr	r3, [r4, #28]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a14e:	b9b8      	cbnz	r0, 800a180 <_Balloc+0x68>
 800a150:	2101      	movs	r1, #1
 800a152:	fa01 f605 	lsl.w	r6, r1, r5
 800a156:	1d72      	adds	r2, r6, #5
 800a158:	4620      	mov	r0, r4
 800a15a:	0092      	lsls	r2, r2, #2
 800a15c:	f000 fd8e 	bl	800ac7c <_calloc_r>
 800a160:	b160      	cbz	r0, 800a17c <_Balloc+0x64>
 800a162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a166:	e00e      	b.n	800a186 <_Balloc+0x6e>
 800a168:	2221      	movs	r2, #33	@ 0x21
 800a16a:	2104      	movs	r1, #4
 800a16c:	4620      	mov	r0, r4
 800a16e:	f000 fd85 	bl	800ac7c <_calloc_r>
 800a172:	69e3      	ldr	r3, [r4, #28]
 800a174:	60f0      	str	r0, [r6, #12]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1e4      	bne.n	800a146 <_Balloc+0x2e>
 800a17c:	2000      	movs	r0, #0
 800a17e:	bd70      	pop	{r4, r5, r6, pc}
 800a180:	6802      	ldr	r2, [r0, #0]
 800a182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a186:	2300      	movs	r3, #0
 800a188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a18c:	e7f7      	b.n	800a17e <_Balloc+0x66>
 800a18e:	bf00      	nop
 800a190:	0800b59e 	.word	0x0800b59e
 800a194:	0800b68f 	.word	0x0800b68f

0800a198 <_Bfree>:
 800a198:	b570      	push	{r4, r5, r6, lr}
 800a19a:	69c6      	ldr	r6, [r0, #28]
 800a19c:	4605      	mov	r5, r0
 800a19e:	460c      	mov	r4, r1
 800a1a0:	b976      	cbnz	r6, 800a1c0 <_Bfree+0x28>
 800a1a2:	2010      	movs	r0, #16
 800a1a4:	f7ff fe48 	bl	8009e38 <malloc>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	61e8      	str	r0, [r5, #28]
 800a1ac:	b920      	cbnz	r0, 800a1b8 <_Bfree+0x20>
 800a1ae:	218f      	movs	r1, #143	@ 0x8f
 800a1b0:	4b08      	ldr	r3, [pc, #32]	@ (800a1d4 <_Bfree+0x3c>)
 800a1b2:	4809      	ldr	r0, [pc, #36]	@ (800a1d8 <_Bfree+0x40>)
 800a1b4:	f000 fd44 	bl	800ac40 <__assert_func>
 800a1b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1bc:	6006      	str	r6, [r0, #0]
 800a1be:	60c6      	str	r6, [r0, #12]
 800a1c0:	b13c      	cbz	r4, 800a1d2 <_Bfree+0x3a>
 800a1c2:	69eb      	ldr	r3, [r5, #28]
 800a1c4:	6862      	ldr	r2, [r4, #4]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1cc:	6021      	str	r1, [r4, #0]
 800a1ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	0800b59e 	.word	0x0800b59e
 800a1d8:	0800b68f 	.word	0x0800b68f

0800a1dc <__multadd>:
 800a1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	461e      	mov	r6, r3
 800a1e6:	2000      	movs	r0, #0
 800a1e8:	690d      	ldr	r5, [r1, #16]
 800a1ea:	f101 0c14 	add.w	ip, r1, #20
 800a1ee:	f8dc 3000 	ldr.w	r3, [ip]
 800a1f2:	3001      	adds	r0, #1
 800a1f4:	b299      	uxth	r1, r3
 800a1f6:	fb02 6101 	mla	r1, r2, r1, r6
 800a1fa:	0c1e      	lsrs	r6, r3, #16
 800a1fc:	0c0b      	lsrs	r3, r1, #16
 800a1fe:	fb02 3306 	mla	r3, r2, r6, r3
 800a202:	b289      	uxth	r1, r1
 800a204:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a208:	4285      	cmp	r5, r0
 800a20a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a20e:	f84c 1b04 	str.w	r1, [ip], #4
 800a212:	dcec      	bgt.n	800a1ee <__multadd+0x12>
 800a214:	b30e      	cbz	r6, 800a25a <__multadd+0x7e>
 800a216:	68a3      	ldr	r3, [r4, #8]
 800a218:	42ab      	cmp	r3, r5
 800a21a:	dc19      	bgt.n	800a250 <__multadd+0x74>
 800a21c:	6861      	ldr	r1, [r4, #4]
 800a21e:	4638      	mov	r0, r7
 800a220:	3101      	adds	r1, #1
 800a222:	f7ff ff79 	bl	800a118 <_Balloc>
 800a226:	4680      	mov	r8, r0
 800a228:	b928      	cbnz	r0, 800a236 <__multadd+0x5a>
 800a22a:	4602      	mov	r2, r0
 800a22c:	21ba      	movs	r1, #186	@ 0xba
 800a22e:	4b0c      	ldr	r3, [pc, #48]	@ (800a260 <__multadd+0x84>)
 800a230:	480c      	ldr	r0, [pc, #48]	@ (800a264 <__multadd+0x88>)
 800a232:	f000 fd05 	bl	800ac40 <__assert_func>
 800a236:	6922      	ldr	r2, [r4, #16]
 800a238:	f104 010c 	add.w	r1, r4, #12
 800a23c:	3202      	adds	r2, #2
 800a23e:	0092      	lsls	r2, r2, #2
 800a240:	300c      	adds	r0, #12
 800a242:	f7fe fafe 	bl	8008842 <memcpy>
 800a246:	4621      	mov	r1, r4
 800a248:	4638      	mov	r0, r7
 800a24a:	f7ff ffa5 	bl	800a198 <_Bfree>
 800a24e:	4644      	mov	r4, r8
 800a250:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a254:	3501      	adds	r5, #1
 800a256:	615e      	str	r6, [r3, #20]
 800a258:	6125      	str	r5, [r4, #16]
 800a25a:	4620      	mov	r0, r4
 800a25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a260:	0800b60d 	.word	0x0800b60d
 800a264:	0800b68f 	.word	0x0800b68f

0800a268 <__s2b>:
 800a268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a26c:	4615      	mov	r5, r2
 800a26e:	2209      	movs	r2, #9
 800a270:	461f      	mov	r7, r3
 800a272:	3308      	adds	r3, #8
 800a274:	460c      	mov	r4, r1
 800a276:	fb93 f3f2 	sdiv	r3, r3, r2
 800a27a:	4606      	mov	r6, r0
 800a27c:	2201      	movs	r2, #1
 800a27e:	2100      	movs	r1, #0
 800a280:	429a      	cmp	r2, r3
 800a282:	db09      	blt.n	800a298 <__s2b+0x30>
 800a284:	4630      	mov	r0, r6
 800a286:	f7ff ff47 	bl	800a118 <_Balloc>
 800a28a:	b940      	cbnz	r0, 800a29e <__s2b+0x36>
 800a28c:	4602      	mov	r2, r0
 800a28e:	21d3      	movs	r1, #211	@ 0xd3
 800a290:	4b18      	ldr	r3, [pc, #96]	@ (800a2f4 <__s2b+0x8c>)
 800a292:	4819      	ldr	r0, [pc, #100]	@ (800a2f8 <__s2b+0x90>)
 800a294:	f000 fcd4 	bl	800ac40 <__assert_func>
 800a298:	0052      	lsls	r2, r2, #1
 800a29a:	3101      	adds	r1, #1
 800a29c:	e7f0      	b.n	800a280 <__s2b+0x18>
 800a29e:	9b08      	ldr	r3, [sp, #32]
 800a2a0:	2d09      	cmp	r5, #9
 800a2a2:	6143      	str	r3, [r0, #20]
 800a2a4:	f04f 0301 	mov.w	r3, #1
 800a2a8:	6103      	str	r3, [r0, #16]
 800a2aa:	dd16      	ble.n	800a2da <__s2b+0x72>
 800a2ac:	f104 0909 	add.w	r9, r4, #9
 800a2b0:	46c8      	mov	r8, r9
 800a2b2:	442c      	add	r4, r5
 800a2b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a2b8:	4601      	mov	r1, r0
 800a2ba:	220a      	movs	r2, #10
 800a2bc:	4630      	mov	r0, r6
 800a2be:	3b30      	subs	r3, #48	@ 0x30
 800a2c0:	f7ff ff8c 	bl	800a1dc <__multadd>
 800a2c4:	45a0      	cmp	r8, r4
 800a2c6:	d1f5      	bne.n	800a2b4 <__s2b+0x4c>
 800a2c8:	f1a5 0408 	sub.w	r4, r5, #8
 800a2cc:	444c      	add	r4, r9
 800a2ce:	1b2d      	subs	r5, r5, r4
 800a2d0:	1963      	adds	r3, r4, r5
 800a2d2:	42bb      	cmp	r3, r7
 800a2d4:	db04      	blt.n	800a2e0 <__s2b+0x78>
 800a2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2da:	2509      	movs	r5, #9
 800a2dc:	340a      	adds	r4, #10
 800a2de:	e7f6      	b.n	800a2ce <__s2b+0x66>
 800a2e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a2e4:	4601      	mov	r1, r0
 800a2e6:	220a      	movs	r2, #10
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	3b30      	subs	r3, #48	@ 0x30
 800a2ec:	f7ff ff76 	bl	800a1dc <__multadd>
 800a2f0:	e7ee      	b.n	800a2d0 <__s2b+0x68>
 800a2f2:	bf00      	nop
 800a2f4:	0800b60d 	.word	0x0800b60d
 800a2f8:	0800b68f 	.word	0x0800b68f

0800a2fc <__hi0bits>:
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a302:	bf3a      	itte	cc
 800a304:	0403      	lslcc	r3, r0, #16
 800a306:	2010      	movcc	r0, #16
 800a308:	2000      	movcs	r0, #0
 800a30a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a30e:	bf3c      	itt	cc
 800a310:	021b      	lslcc	r3, r3, #8
 800a312:	3008      	addcc	r0, #8
 800a314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a318:	bf3c      	itt	cc
 800a31a:	011b      	lslcc	r3, r3, #4
 800a31c:	3004      	addcc	r0, #4
 800a31e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a322:	bf3c      	itt	cc
 800a324:	009b      	lslcc	r3, r3, #2
 800a326:	3002      	addcc	r0, #2
 800a328:	2b00      	cmp	r3, #0
 800a32a:	db05      	blt.n	800a338 <__hi0bits+0x3c>
 800a32c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a330:	f100 0001 	add.w	r0, r0, #1
 800a334:	bf08      	it	eq
 800a336:	2020      	moveq	r0, #32
 800a338:	4770      	bx	lr

0800a33a <__lo0bits>:
 800a33a:	6803      	ldr	r3, [r0, #0]
 800a33c:	4602      	mov	r2, r0
 800a33e:	f013 0007 	ands.w	r0, r3, #7
 800a342:	d00b      	beq.n	800a35c <__lo0bits+0x22>
 800a344:	07d9      	lsls	r1, r3, #31
 800a346:	d421      	bmi.n	800a38c <__lo0bits+0x52>
 800a348:	0798      	lsls	r0, r3, #30
 800a34a:	bf49      	itett	mi
 800a34c:	085b      	lsrmi	r3, r3, #1
 800a34e:	089b      	lsrpl	r3, r3, #2
 800a350:	2001      	movmi	r0, #1
 800a352:	6013      	strmi	r3, [r2, #0]
 800a354:	bf5c      	itt	pl
 800a356:	2002      	movpl	r0, #2
 800a358:	6013      	strpl	r3, [r2, #0]
 800a35a:	4770      	bx	lr
 800a35c:	b299      	uxth	r1, r3
 800a35e:	b909      	cbnz	r1, 800a364 <__lo0bits+0x2a>
 800a360:	2010      	movs	r0, #16
 800a362:	0c1b      	lsrs	r3, r3, #16
 800a364:	b2d9      	uxtb	r1, r3
 800a366:	b909      	cbnz	r1, 800a36c <__lo0bits+0x32>
 800a368:	3008      	adds	r0, #8
 800a36a:	0a1b      	lsrs	r3, r3, #8
 800a36c:	0719      	lsls	r1, r3, #28
 800a36e:	bf04      	itt	eq
 800a370:	091b      	lsreq	r3, r3, #4
 800a372:	3004      	addeq	r0, #4
 800a374:	0799      	lsls	r1, r3, #30
 800a376:	bf04      	itt	eq
 800a378:	089b      	lsreq	r3, r3, #2
 800a37a:	3002      	addeq	r0, #2
 800a37c:	07d9      	lsls	r1, r3, #31
 800a37e:	d403      	bmi.n	800a388 <__lo0bits+0x4e>
 800a380:	085b      	lsrs	r3, r3, #1
 800a382:	f100 0001 	add.w	r0, r0, #1
 800a386:	d003      	beq.n	800a390 <__lo0bits+0x56>
 800a388:	6013      	str	r3, [r2, #0]
 800a38a:	4770      	bx	lr
 800a38c:	2000      	movs	r0, #0
 800a38e:	4770      	bx	lr
 800a390:	2020      	movs	r0, #32
 800a392:	4770      	bx	lr

0800a394 <__i2b>:
 800a394:	b510      	push	{r4, lr}
 800a396:	460c      	mov	r4, r1
 800a398:	2101      	movs	r1, #1
 800a39a:	f7ff febd 	bl	800a118 <_Balloc>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	b928      	cbnz	r0, 800a3ae <__i2b+0x1a>
 800a3a2:	f240 1145 	movw	r1, #325	@ 0x145
 800a3a6:	4b04      	ldr	r3, [pc, #16]	@ (800a3b8 <__i2b+0x24>)
 800a3a8:	4804      	ldr	r0, [pc, #16]	@ (800a3bc <__i2b+0x28>)
 800a3aa:	f000 fc49 	bl	800ac40 <__assert_func>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	6144      	str	r4, [r0, #20]
 800a3b2:	6103      	str	r3, [r0, #16]
 800a3b4:	bd10      	pop	{r4, pc}
 800a3b6:	bf00      	nop
 800a3b8:	0800b60d 	.word	0x0800b60d
 800a3bc:	0800b68f 	.word	0x0800b68f

0800a3c0 <__multiply>:
 800a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	4614      	mov	r4, r2
 800a3c6:	690a      	ldr	r2, [r1, #16]
 800a3c8:	6923      	ldr	r3, [r4, #16]
 800a3ca:	460f      	mov	r7, r1
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	bfa2      	ittt	ge
 800a3d0:	4623      	movge	r3, r4
 800a3d2:	460c      	movge	r4, r1
 800a3d4:	461f      	movge	r7, r3
 800a3d6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a3da:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a3de:	68a3      	ldr	r3, [r4, #8]
 800a3e0:	6861      	ldr	r1, [r4, #4]
 800a3e2:	eb0a 0609 	add.w	r6, sl, r9
 800a3e6:	42b3      	cmp	r3, r6
 800a3e8:	b085      	sub	sp, #20
 800a3ea:	bfb8      	it	lt
 800a3ec:	3101      	addlt	r1, #1
 800a3ee:	f7ff fe93 	bl	800a118 <_Balloc>
 800a3f2:	b930      	cbnz	r0, 800a402 <__multiply+0x42>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3fa:	4b43      	ldr	r3, [pc, #268]	@ (800a508 <__multiply+0x148>)
 800a3fc:	4843      	ldr	r0, [pc, #268]	@ (800a50c <__multiply+0x14c>)
 800a3fe:	f000 fc1f 	bl	800ac40 <__assert_func>
 800a402:	f100 0514 	add.w	r5, r0, #20
 800a406:	462b      	mov	r3, r5
 800a408:	2200      	movs	r2, #0
 800a40a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a40e:	4543      	cmp	r3, r8
 800a410:	d321      	bcc.n	800a456 <__multiply+0x96>
 800a412:	f107 0114 	add.w	r1, r7, #20
 800a416:	f104 0214 	add.w	r2, r4, #20
 800a41a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a41e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a422:	9302      	str	r3, [sp, #8]
 800a424:	1b13      	subs	r3, r2, r4
 800a426:	3b15      	subs	r3, #21
 800a428:	f023 0303 	bic.w	r3, r3, #3
 800a42c:	3304      	adds	r3, #4
 800a42e:	f104 0715 	add.w	r7, r4, #21
 800a432:	42ba      	cmp	r2, r7
 800a434:	bf38      	it	cc
 800a436:	2304      	movcc	r3, #4
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	9b02      	ldr	r3, [sp, #8]
 800a43c:	9103      	str	r1, [sp, #12]
 800a43e:	428b      	cmp	r3, r1
 800a440:	d80c      	bhi.n	800a45c <__multiply+0x9c>
 800a442:	2e00      	cmp	r6, #0
 800a444:	dd03      	ble.n	800a44e <__multiply+0x8e>
 800a446:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d05a      	beq.n	800a504 <__multiply+0x144>
 800a44e:	6106      	str	r6, [r0, #16]
 800a450:	b005      	add	sp, #20
 800a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a456:	f843 2b04 	str.w	r2, [r3], #4
 800a45a:	e7d8      	b.n	800a40e <__multiply+0x4e>
 800a45c:	f8b1 a000 	ldrh.w	sl, [r1]
 800a460:	f1ba 0f00 	cmp.w	sl, #0
 800a464:	d023      	beq.n	800a4ae <__multiply+0xee>
 800a466:	46a9      	mov	r9, r5
 800a468:	f04f 0c00 	mov.w	ip, #0
 800a46c:	f104 0e14 	add.w	lr, r4, #20
 800a470:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a474:	f8d9 3000 	ldr.w	r3, [r9]
 800a478:	fa1f fb87 	uxth.w	fp, r7
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	fb0a 330b 	mla	r3, sl, fp, r3
 800a482:	4463      	add	r3, ip
 800a484:	f8d9 c000 	ldr.w	ip, [r9]
 800a488:	0c3f      	lsrs	r7, r7, #16
 800a48a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a48e:	fb0a c707 	mla	r7, sl, r7, ip
 800a492:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a496:	b29b      	uxth	r3, r3
 800a498:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a49c:	4572      	cmp	r2, lr
 800a49e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a4a2:	f849 3b04 	str.w	r3, [r9], #4
 800a4a6:	d8e3      	bhi.n	800a470 <__multiply+0xb0>
 800a4a8:	9b01      	ldr	r3, [sp, #4]
 800a4aa:	f845 c003 	str.w	ip, [r5, r3]
 800a4ae:	9b03      	ldr	r3, [sp, #12]
 800a4b0:	3104      	adds	r1, #4
 800a4b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a4b6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ba:	d021      	beq.n	800a500 <__multiply+0x140>
 800a4bc:	46ae      	mov	lr, r5
 800a4be:	f04f 0a00 	mov.w	sl, #0
 800a4c2:	682b      	ldr	r3, [r5, #0]
 800a4c4:	f104 0c14 	add.w	ip, r4, #20
 800a4c8:	f8bc b000 	ldrh.w	fp, [ip]
 800a4cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	fb09 770b 	mla	r7, r9, fp, r7
 800a4d6:	4457      	add	r7, sl
 800a4d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a4dc:	f84e 3b04 	str.w	r3, [lr], #4
 800a4e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a4e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4e8:	f8be 3000 	ldrh.w	r3, [lr]
 800a4ec:	4562      	cmp	r2, ip
 800a4ee:	fb09 330a 	mla	r3, r9, sl, r3
 800a4f2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a4f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4fa:	d8e5      	bhi.n	800a4c8 <__multiply+0x108>
 800a4fc:	9f01      	ldr	r7, [sp, #4]
 800a4fe:	51eb      	str	r3, [r5, r7]
 800a500:	3504      	adds	r5, #4
 800a502:	e79a      	b.n	800a43a <__multiply+0x7a>
 800a504:	3e01      	subs	r6, #1
 800a506:	e79c      	b.n	800a442 <__multiply+0x82>
 800a508:	0800b60d 	.word	0x0800b60d
 800a50c:	0800b68f 	.word	0x0800b68f

0800a510 <__pow5mult>:
 800a510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a514:	4615      	mov	r5, r2
 800a516:	f012 0203 	ands.w	r2, r2, #3
 800a51a:	4607      	mov	r7, r0
 800a51c:	460e      	mov	r6, r1
 800a51e:	d007      	beq.n	800a530 <__pow5mult+0x20>
 800a520:	4c25      	ldr	r4, [pc, #148]	@ (800a5b8 <__pow5mult+0xa8>)
 800a522:	3a01      	subs	r2, #1
 800a524:	2300      	movs	r3, #0
 800a526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a52a:	f7ff fe57 	bl	800a1dc <__multadd>
 800a52e:	4606      	mov	r6, r0
 800a530:	10ad      	asrs	r5, r5, #2
 800a532:	d03d      	beq.n	800a5b0 <__pow5mult+0xa0>
 800a534:	69fc      	ldr	r4, [r7, #28]
 800a536:	b97c      	cbnz	r4, 800a558 <__pow5mult+0x48>
 800a538:	2010      	movs	r0, #16
 800a53a:	f7ff fc7d 	bl	8009e38 <malloc>
 800a53e:	4602      	mov	r2, r0
 800a540:	61f8      	str	r0, [r7, #28]
 800a542:	b928      	cbnz	r0, 800a550 <__pow5mult+0x40>
 800a544:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a548:	4b1c      	ldr	r3, [pc, #112]	@ (800a5bc <__pow5mult+0xac>)
 800a54a:	481d      	ldr	r0, [pc, #116]	@ (800a5c0 <__pow5mult+0xb0>)
 800a54c:	f000 fb78 	bl	800ac40 <__assert_func>
 800a550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a554:	6004      	str	r4, [r0, #0]
 800a556:	60c4      	str	r4, [r0, #12]
 800a558:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a55c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a560:	b94c      	cbnz	r4, 800a576 <__pow5mult+0x66>
 800a562:	f240 2171 	movw	r1, #625	@ 0x271
 800a566:	4638      	mov	r0, r7
 800a568:	f7ff ff14 	bl	800a394 <__i2b>
 800a56c:	2300      	movs	r3, #0
 800a56e:	4604      	mov	r4, r0
 800a570:	f8c8 0008 	str.w	r0, [r8, #8]
 800a574:	6003      	str	r3, [r0, #0]
 800a576:	f04f 0900 	mov.w	r9, #0
 800a57a:	07eb      	lsls	r3, r5, #31
 800a57c:	d50a      	bpl.n	800a594 <__pow5mult+0x84>
 800a57e:	4631      	mov	r1, r6
 800a580:	4622      	mov	r2, r4
 800a582:	4638      	mov	r0, r7
 800a584:	f7ff ff1c 	bl	800a3c0 <__multiply>
 800a588:	4680      	mov	r8, r0
 800a58a:	4631      	mov	r1, r6
 800a58c:	4638      	mov	r0, r7
 800a58e:	f7ff fe03 	bl	800a198 <_Bfree>
 800a592:	4646      	mov	r6, r8
 800a594:	106d      	asrs	r5, r5, #1
 800a596:	d00b      	beq.n	800a5b0 <__pow5mult+0xa0>
 800a598:	6820      	ldr	r0, [r4, #0]
 800a59a:	b938      	cbnz	r0, 800a5ac <__pow5mult+0x9c>
 800a59c:	4622      	mov	r2, r4
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	f7ff ff0d 	bl	800a3c0 <__multiply>
 800a5a6:	6020      	str	r0, [r4, #0]
 800a5a8:	f8c0 9000 	str.w	r9, [r0]
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	e7e4      	b.n	800a57a <__pow5mult+0x6a>
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b6:	bf00      	nop
 800a5b8:	0800b6e8 	.word	0x0800b6e8
 800a5bc:	0800b59e 	.word	0x0800b59e
 800a5c0:	0800b68f 	.word	0x0800b68f

0800a5c4 <__lshift>:
 800a5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	4607      	mov	r7, r0
 800a5cc:	4691      	mov	r9, r2
 800a5ce:	6923      	ldr	r3, [r4, #16]
 800a5d0:	6849      	ldr	r1, [r1, #4]
 800a5d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5d6:	68a3      	ldr	r3, [r4, #8]
 800a5d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5dc:	f108 0601 	add.w	r6, r8, #1
 800a5e0:	42b3      	cmp	r3, r6
 800a5e2:	db0b      	blt.n	800a5fc <__lshift+0x38>
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	f7ff fd97 	bl	800a118 <_Balloc>
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	b948      	cbnz	r0, 800a602 <__lshift+0x3e>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5f4:	4b27      	ldr	r3, [pc, #156]	@ (800a694 <__lshift+0xd0>)
 800a5f6:	4828      	ldr	r0, [pc, #160]	@ (800a698 <__lshift+0xd4>)
 800a5f8:	f000 fb22 	bl	800ac40 <__assert_func>
 800a5fc:	3101      	adds	r1, #1
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	e7ee      	b.n	800a5e0 <__lshift+0x1c>
 800a602:	2300      	movs	r3, #0
 800a604:	f100 0114 	add.w	r1, r0, #20
 800a608:	f100 0210 	add.w	r2, r0, #16
 800a60c:	4618      	mov	r0, r3
 800a60e:	4553      	cmp	r3, sl
 800a610:	db33      	blt.n	800a67a <__lshift+0xb6>
 800a612:	6920      	ldr	r0, [r4, #16]
 800a614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a618:	f104 0314 	add.w	r3, r4, #20
 800a61c:	f019 091f 	ands.w	r9, r9, #31
 800a620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a628:	d02b      	beq.n	800a682 <__lshift+0xbe>
 800a62a:	468a      	mov	sl, r1
 800a62c:	2200      	movs	r2, #0
 800a62e:	f1c9 0e20 	rsb	lr, r9, #32
 800a632:	6818      	ldr	r0, [r3, #0]
 800a634:	fa00 f009 	lsl.w	r0, r0, r9
 800a638:	4310      	orrs	r0, r2
 800a63a:	f84a 0b04 	str.w	r0, [sl], #4
 800a63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a642:	459c      	cmp	ip, r3
 800a644:	fa22 f20e 	lsr.w	r2, r2, lr
 800a648:	d8f3      	bhi.n	800a632 <__lshift+0x6e>
 800a64a:	ebac 0304 	sub.w	r3, ip, r4
 800a64e:	3b15      	subs	r3, #21
 800a650:	f023 0303 	bic.w	r3, r3, #3
 800a654:	3304      	adds	r3, #4
 800a656:	f104 0015 	add.w	r0, r4, #21
 800a65a:	4584      	cmp	ip, r0
 800a65c:	bf38      	it	cc
 800a65e:	2304      	movcc	r3, #4
 800a660:	50ca      	str	r2, [r1, r3]
 800a662:	b10a      	cbz	r2, 800a668 <__lshift+0xa4>
 800a664:	f108 0602 	add.w	r6, r8, #2
 800a668:	3e01      	subs	r6, #1
 800a66a:	4638      	mov	r0, r7
 800a66c:	4621      	mov	r1, r4
 800a66e:	612e      	str	r6, [r5, #16]
 800a670:	f7ff fd92 	bl	800a198 <_Bfree>
 800a674:	4628      	mov	r0, r5
 800a676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a67a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a67e:	3301      	adds	r3, #1
 800a680:	e7c5      	b.n	800a60e <__lshift+0x4a>
 800a682:	3904      	subs	r1, #4
 800a684:	f853 2b04 	ldr.w	r2, [r3], #4
 800a688:	459c      	cmp	ip, r3
 800a68a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a68e:	d8f9      	bhi.n	800a684 <__lshift+0xc0>
 800a690:	e7ea      	b.n	800a668 <__lshift+0xa4>
 800a692:	bf00      	nop
 800a694:	0800b60d 	.word	0x0800b60d
 800a698:	0800b68f 	.word	0x0800b68f

0800a69c <__mcmp>:
 800a69c:	4603      	mov	r3, r0
 800a69e:	690a      	ldr	r2, [r1, #16]
 800a6a0:	6900      	ldr	r0, [r0, #16]
 800a6a2:	b530      	push	{r4, r5, lr}
 800a6a4:	1a80      	subs	r0, r0, r2
 800a6a6:	d10e      	bne.n	800a6c6 <__mcmp+0x2a>
 800a6a8:	3314      	adds	r3, #20
 800a6aa:	3114      	adds	r1, #20
 800a6ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a6b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a6b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6bc:	4295      	cmp	r5, r2
 800a6be:	d003      	beq.n	800a6c8 <__mcmp+0x2c>
 800a6c0:	d205      	bcs.n	800a6ce <__mcmp+0x32>
 800a6c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6c6:	bd30      	pop	{r4, r5, pc}
 800a6c8:	42a3      	cmp	r3, r4
 800a6ca:	d3f3      	bcc.n	800a6b4 <__mcmp+0x18>
 800a6cc:	e7fb      	b.n	800a6c6 <__mcmp+0x2a>
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	e7f9      	b.n	800a6c6 <__mcmp+0x2a>
	...

0800a6d4 <__mdiff>:
 800a6d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d8:	4689      	mov	r9, r1
 800a6da:	4606      	mov	r6, r0
 800a6dc:	4611      	mov	r1, r2
 800a6de:	4648      	mov	r0, r9
 800a6e0:	4614      	mov	r4, r2
 800a6e2:	f7ff ffdb 	bl	800a69c <__mcmp>
 800a6e6:	1e05      	subs	r5, r0, #0
 800a6e8:	d112      	bne.n	800a710 <__mdiff+0x3c>
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7ff fd13 	bl	800a118 <_Balloc>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	b928      	cbnz	r0, 800a702 <__mdiff+0x2e>
 800a6f6:	f240 2137 	movw	r1, #567	@ 0x237
 800a6fa:	4b3e      	ldr	r3, [pc, #248]	@ (800a7f4 <__mdiff+0x120>)
 800a6fc:	483e      	ldr	r0, [pc, #248]	@ (800a7f8 <__mdiff+0x124>)
 800a6fe:	f000 fa9f 	bl	800ac40 <__assert_func>
 800a702:	2301      	movs	r3, #1
 800a704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a708:	4610      	mov	r0, r2
 800a70a:	b003      	add	sp, #12
 800a70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a710:	bfbc      	itt	lt
 800a712:	464b      	movlt	r3, r9
 800a714:	46a1      	movlt	r9, r4
 800a716:	4630      	mov	r0, r6
 800a718:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a71c:	bfba      	itte	lt
 800a71e:	461c      	movlt	r4, r3
 800a720:	2501      	movlt	r5, #1
 800a722:	2500      	movge	r5, #0
 800a724:	f7ff fcf8 	bl	800a118 <_Balloc>
 800a728:	4602      	mov	r2, r0
 800a72a:	b918      	cbnz	r0, 800a734 <__mdiff+0x60>
 800a72c:	f240 2145 	movw	r1, #581	@ 0x245
 800a730:	4b30      	ldr	r3, [pc, #192]	@ (800a7f4 <__mdiff+0x120>)
 800a732:	e7e3      	b.n	800a6fc <__mdiff+0x28>
 800a734:	f100 0b14 	add.w	fp, r0, #20
 800a738:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a73c:	f109 0310 	add.w	r3, r9, #16
 800a740:	60c5      	str	r5, [r0, #12]
 800a742:	f04f 0c00 	mov.w	ip, #0
 800a746:	f109 0514 	add.w	r5, r9, #20
 800a74a:	46d9      	mov	r9, fp
 800a74c:	6926      	ldr	r6, [r4, #16]
 800a74e:	f104 0e14 	add.w	lr, r4, #20
 800a752:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a756:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a75a:	9301      	str	r3, [sp, #4]
 800a75c:	9b01      	ldr	r3, [sp, #4]
 800a75e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a762:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a766:	b281      	uxth	r1, r0
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	fa1f f38a 	uxth.w	r3, sl
 800a76e:	1a5b      	subs	r3, r3, r1
 800a770:	0c00      	lsrs	r0, r0, #16
 800a772:	4463      	add	r3, ip
 800a774:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a778:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a782:	4576      	cmp	r6, lr
 800a784:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a788:	f849 3b04 	str.w	r3, [r9], #4
 800a78c:	d8e6      	bhi.n	800a75c <__mdiff+0x88>
 800a78e:	1b33      	subs	r3, r6, r4
 800a790:	3b15      	subs	r3, #21
 800a792:	f023 0303 	bic.w	r3, r3, #3
 800a796:	3415      	adds	r4, #21
 800a798:	3304      	adds	r3, #4
 800a79a:	42a6      	cmp	r6, r4
 800a79c:	bf38      	it	cc
 800a79e:	2304      	movcc	r3, #4
 800a7a0:	441d      	add	r5, r3
 800a7a2:	445b      	add	r3, fp
 800a7a4:	461e      	mov	r6, r3
 800a7a6:	462c      	mov	r4, r5
 800a7a8:	4544      	cmp	r4, r8
 800a7aa:	d30e      	bcc.n	800a7ca <__mdiff+0xf6>
 800a7ac:	f108 0103 	add.w	r1, r8, #3
 800a7b0:	1b49      	subs	r1, r1, r5
 800a7b2:	f021 0103 	bic.w	r1, r1, #3
 800a7b6:	3d03      	subs	r5, #3
 800a7b8:	45a8      	cmp	r8, r5
 800a7ba:	bf38      	it	cc
 800a7bc:	2100      	movcc	r1, #0
 800a7be:	440b      	add	r3, r1
 800a7c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7c4:	b199      	cbz	r1, 800a7ee <__mdiff+0x11a>
 800a7c6:	6117      	str	r7, [r2, #16]
 800a7c8:	e79e      	b.n	800a708 <__mdiff+0x34>
 800a7ca:	46e6      	mov	lr, ip
 800a7cc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7d0:	fa1f fc81 	uxth.w	ip, r1
 800a7d4:	44f4      	add	ip, lr
 800a7d6:	0c08      	lsrs	r0, r1, #16
 800a7d8:	4471      	add	r1, lr
 800a7da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7de:	b289      	uxth	r1, r1
 800a7e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7e8:	f846 1b04 	str.w	r1, [r6], #4
 800a7ec:	e7dc      	b.n	800a7a8 <__mdiff+0xd4>
 800a7ee:	3f01      	subs	r7, #1
 800a7f0:	e7e6      	b.n	800a7c0 <__mdiff+0xec>
 800a7f2:	bf00      	nop
 800a7f4:	0800b60d 	.word	0x0800b60d
 800a7f8:	0800b68f 	.word	0x0800b68f

0800a7fc <__ulp>:
 800a7fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a838 <__ulp+0x3c>)
 800a7fe:	400b      	ands	r3, r1
 800a800:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a804:	2b00      	cmp	r3, #0
 800a806:	dc08      	bgt.n	800a81a <__ulp+0x1e>
 800a808:	425b      	negs	r3, r3
 800a80a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a80e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a812:	da04      	bge.n	800a81e <__ulp+0x22>
 800a814:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a818:	4113      	asrs	r3, r2
 800a81a:	2200      	movs	r2, #0
 800a81c:	e008      	b.n	800a830 <__ulp+0x34>
 800a81e:	f1a2 0314 	sub.w	r3, r2, #20
 800a822:	2b1e      	cmp	r3, #30
 800a824:	bfd6      	itet	le
 800a826:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a82a:	2201      	movgt	r2, #1
 800a82c:	40da      	lsrle	r2, r3
 800a82e:	2300      	movs	r3, #0
 800a830:	4619      	mov	r1, r3
 800a832:	4610      	mov	r0, r2
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	7ff00000 	.word	0x7ff00000

0800a83c <__b2d>:
 800a83c:	6902      	ldr	r2, [r0, #16]
 800a83e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a840:	f100 0614 	add.w	r6, r0, #20
 800a844:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a848:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a84c:	4f1e      	ldr	r7, [pc, #120]	@ (800a8c8 <__b2d+0x8c>)
 800a84e:	4620      	mov	r0, r4
 800a850:	f7ff fd54 	bl	800a2fc <__hi0bits>
 800a854:	4603      	mov	r3, r0
 800a856:	f1c0 0020 	rsb	r0, r0, #32
 800a85a:	2b0a      	cmp	r3, #10
 800a85c:	f1a2 0504 	sub.w	r5, r2, #4
 800a860:	6008      	str	r0, [r1, #0]
 800a862:	dc12      	bgt.n	800a88a <__b2d+0x4e>
 800a864:	42ae      	cmp	r6, r5
 800a866:	bf2c      	ite	cs
 800a868:	2200      	movcs	r2, #0
 800a86a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a86e:	f1c3 0c0b 	rsb	ip, r3, #11
 800a872:	3315      	adds	r3, #21
 800a874:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a878:	fa04 f303 	lsl.w	r3, r4, r3
 800a87c:	fa22 f20c 	lsr.w	r2, r2, ip
 800a880:	ea4e 0107 	orr.w	r1, lr, r7
 800a884:	431a      	orrs	r2, r3
 800a886:	4610      	mov	r0, r2
 800a888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a88a:	42ae      	cmp	r6, r5
 800a88c:	bf36      	itet	cc
 800a88e:	f1a2 0508 	subcc.w	r5, r2, #8
 800a892:	2200      	movcs	r2, #0
 800a894:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a898:	3b0b      	subs	r3, #11
 800a89a:	d012      	beq.n	800a8c2 <__b2d+0x86>
 800a89c:	f1c3 0720 	rsb	r7, r3, #32
 800a8a0:	fa22 f107 	lsr.w	r1, r2, r7
 800a8a4:	409c      	lsls	r4, r3
 800a8a6:	430c      	orrs	r4, r1
 800a8a8:	42b5      	cmp	r5, r6
 800a8aa:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a8ae:	bf94      	ite	ls
 800a8b0:	2400      	movls	r4, #0
 800a8b2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a8b6:	409a      	lsls	r2, r3
 800a8b8:	40fc      	lsrs	r4, r7
 800a8ba:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a8be:	4322      	orrs	r2, r4
 800a8c0:	e7e1      	b.n	800a886 <__b2d+0x4a>
 800a8c2:	ea44 0107 	orr.w	r1, r4, r7
 800a8c6:	e7de      	b.n	800a886 <__b2d+0x4a>
 800a8c8:	3ff00000 	.word	0x3ff00000

0800a8cc <__d2b>:
 800a8cc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	4690      	mov	r8, r2
 800a8d4:	4699      	mov	r9, r3
 800a8d6:	9e08      	ldr	r6, [sp, #32]
 800a8d8:	f7ff fc1e 	bl	800a118 <_Balloc>
 800a8dc:	4604      	mov	r4, r0
 800a8de:	b930      	cbnz	r0, 800a8ee <__d2b+0x22>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8e6:	4b23      	ldr	r3, [pc, #140]	@ (800a974 <__d2b+0xa8>)
 800a8e8:	4823      	ldr	r0, [pc, #140]	@ (800a978 <__d2b+0xac>)
 800a8ea:	f000 f9a9 	bl	800ac40 <__assert_func>
 800a8ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8f6:	b10d      	cbz	r5, 800a8fc <__d2b+0x30>
 800a8f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8fc:	9301      	str	r3, [sp, #4]
 800a8fe:	f1b8 0300 	subs.w	r3, r8, #0
 800a902:	d024      	beq.n	800a94e <__d2b+0x82>
 800a904:	4668      	mov	r0, sp
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	f7ff fd17 	bl	800a33a <__lo0bits>
 800a90c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a910:	b1d8      	cbz	r0, 800a94a <__d2b+0x7e>
 800a912:	f1c0 0320 	rsb	r3, r0, #32
 800a916:	fa02 f303 	lsl.w	r3, r2, r3
 800a91a:	430b      	orrs	r3, r1
 800a91c:	40c2      	lsrs	r2, r0
 800a91e:	6163      	str	r3, [r4, #20]
 800a920:	9201      	str	r2, [sp, #4]
 800a922:	9b01      	ldr	r3, [sp, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	bf0c      	ite	eq
 800a928:	2201      	moveq	r2, #1
 800a92a:	2202      	movne	r2, #2
 800a92c:	61a3      	str	r3, [r4, #24]
 800a92e:	6122      	str	r2, [r4, #16]
 800a930:	b1ad      	cbz	r5, 800a95e <__d2b+0x92>
 800a932:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a936:	4405      	add	r5, r0
 800a938:	6035      	str	r5, [r6, #0]
 800a93a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a940:	6018      	str	r0, [r3, #0]
 800a942:	4620      	mov	r0, r4
 800a944:	b002      	add	sp, #8
 800a946:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a94a:	6161      	str	r1, [r4, #20]
 800a94c:	e7e9      	b.n	800a922 <__d2b+0x56>
 800a94e:	a801      	add	r0, sp, #4
 800a950:	f7ff fcf3 	bl	800a33a <__lo0bits>
 800a954:	9b01      	ldr	r3, [sp, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	6163      	str	r3, [r4, #20]
 800a95a:	3020      	adds	r0, #32
 800a95c:	e7e7      	b.n	800a92e <__d2b+0x62>
 800a95e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a962:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a966:	6030      	str	r0, [r6, #0]
 800a968:	6918      	ldr	r0, [r3, #16]
 800a96a:	f7ff fcc7 	bl	800a2fc <__hi0bits>
 800a96e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a972:	e7e4      	b.n	800a93e <__d2b+0x72>
 800a974:	0800b60d 	.word	0x0800b60d
 800a978:	0800b68f 	.word	0x0800b68f

0800a97c <__ratio>:
 800a97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a980:	b085      	sub	sp, #20
 800a982:	e9cd 1000 	strd	r1, r0, [sp]
 800a986:	a902      	add	r1, sp, #8
 800a988:	f7ff ff58 	bl	800a83c <__b2d>
 800a98c:	468b      	mov	fp, r1
 800a98e:	4606      	mov	r6, r0
 800a990:	460f      	mov	r7, r1
 800a992:	9800      	ldr	r0, [sp, #0]
 800a994:	a903      	add	r1, sp, #12
 800a996:	f7ff ff51 	bl	800a83c <__b2d>
 800a99a:	460d      	mov	r5, r1
 800a99c:	9b01      	ldr	r3, [sp, #4]
 800a99e:	4689      	mov	r9, r1
 800a9a0:	6919      	ldr	r1, [r3, #16]
 800a9a2:	9b00      	ldr	r3, [sp, #0]
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	1ac9      	subs	r1, r1, r3
 800a9ac:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a9b0:	1a9b      	subs	r3, r3, r2
 800a9b2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	bfcd      	iteet	gt
 800a9ba:	463a      	movgt	r2, r7
 800a9bc:	462a      	movle	r2, r5
 800a9be:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a9c2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a9c6:	bfd8      	it	le
 800a9c8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a9cc:	464b      	mov	r3, r9
 800a9ce:	4622      	mov	r2, r4
 800a9d0:	4659      	mov	r1, fp
 800a9d2:	f7f5 feab 	bl	800072c <__aeabi_ddiv>
 800a9d6:	b005      	add	sp, #20
 800a9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9dc <__copybits>:
 800a9dc:	3901      	subs	r1, #1
 800a9de:	b570      	push	{r4, r5, r6, lr}
 800a9e0:	1149      	asrs	r1, r1, #5
 800a9e2:	6914      	ldr	r4, [r2, #16]
 800a9e4:	3101      	adds	r1, #1
 800a9e6:	f102 0314 	add.w	r3, r2, #20
 800a9ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9f2:	1f05      	subs	r5, r0, #4
 800a9f4:	42a3      	cmp	r3, r4
 800a9f6:	d30c      	bcc.n	800aa12 <__copybits+0x36>
 800a9f8:	1aa3      	subs	r3, r4, r2
 800a9fa:	3b11      	subs	r3, #17
 800a9fc:	f023 0303 	bic.w	r3, r3, #3
 800aa00:	3211      	adds	r2, #17
 800aa02:	42a2      	cmp	r2, r4
 800aa04:	bf88      	it	hi
 800aa06:	2300      	movhi	r3, #0
 800aa08:	4418      	add	r0, r3
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	4288      	cmp	r0, r1
 800aa0e:	d305      	bcc.n	800aa1c <__copybits+0x40>
 800aa10:	bd70      	pop	{r4, r5, r6, pc}
 800aa12:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa16:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa1a:	e7eb      	b.n	800a9f4 <__copybits+0x18>
 800aa1c:	f840 3b04 	str.w	r3, [r0], #4
 800aa20:	e7f4      	b.n	800aa0c <__copybits+0x30>

0800aa22 <__any_on>:
 800aa22:	f100 0214 	add.w	r2, r0, #20
 800aa26:	6900      	ldr	r0, [r0, #16]
 800aa28:	114b      	asrs	r3, r1, #5
 800aa2a:	4298      	cmp	r0, r3
 800aa2c:	b510      	push	{r4, lr}
 800aa2e:	db11      	blt.n	800aa54 <__any_on+0x32>
 800aa30:	dd0a      	ble.n	800aa48 <__any_on+0x26>
 800aa32:	f011 011f 	ands.w	r1, r1, #31
 800aa36:	d007      	beq.n	800aa48 <__any_on+0x26>
 800aa38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa3c:	fa24 f001 	lsr.w	r0, r4, r1
 800aa40:	fa00 f101 	lsl.w	r1, r0, r1
 800aa44:	428c      	cmp	r4, r1
 800aa46:	d10b      	bne.n	800aa60 <__any_on+0x3e>
 800aa48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d803      	bhi.n	800aa58 <__any_on+0x36>
 800aa50:	2000      	movs	r0, #0
 800aa52:	bd10      	pop	{r4, pc}
 800aa54:	4603      	mov	r3, r0
 800aa56:	e7f7      	b.n	800aa48 <__any_on+0x26>
 800aa58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa5c:	2900      	cmp	r1, #0
 800aa5e:	d0f5      	beq.n	800aa4c <__any_on+0x2a>
 800aa60:	2001      	movs	r0, #1
 800aa62:	e7f6      	b.n	800aa52 <__any_on+0x30>

0800aa64 <__sread>:
 800aa64:	b510      	push	{r4, lr}
 800aa66:	460c      	mov	r4, r1
 800aa68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa6c:	f000 f8b4 	bl	800abd8 <_read_r>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	bfab      	itete	ge
 800aa74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa76:	89a3      	ldrhlt	r3, [r4, #12]
 800aa78:	181b      	addge	r3, r3, r0
 800aa7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa7e:	bfac      	ite	ge
 800aa80:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa82:	81a3      	strhlt	r3, [r4, #12]
 800aa84:	bd10      	pop	{r4, pc}

0800aa86 <__swrite>:
 800aa86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8a:	461f      	mov	r7, r3
 800aa8c:	898b      	ldrh	r3, [r1, #12]
 800aa8e:	4605      	mov	r5, r0
 800aa90:	05db      	lsls	r3, r3, #23
 800aa92:	460c      	mov	r4, r1
 800aa94:	4616      	mov	r6, r2
 800aa96:	d505      	bpl.n	800aaa4 <__swrite+0x1e>
 800aa98:	2302      	movs	r3, #2
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa0:	f000 f888 	bl	800abb4 <_lseek_r>
 800aaa4:	89a3      	ldrh	r3, [r4, #12]
 800aaa6:	4632      	mov	r2, r6
 800aaa8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aaac:	81a3      	strh	r3, [r4, #12]
 800aaae:	4628      	mov	r0, r5
 800aab0:	463b      	mov	r3, r7
 800aab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaba:	f000 b8af 	b.w	800ac1c <_write_r>

0800aabe <__sseek>:
 800aabe:	b510      	push	{r4, lr}
 800aac0:	460c      	mov	r4, r1
 800aac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac6:	f000 f875 	bl	800abb4 <_lseek_r>
 800aaca:	1c43      	adds	r3, r0, #1
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	bf15      	itete	ne
 800aad0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aad2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aad6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aada:	81a3      	strheq	r3, [r4, #12]
 800aadc:	bf18      	it	ne
 800aade:	81a3      	strhne	r3, [r4, #12]
 800aae0:	bd10      	pop	{r4, pc}

0800aae2 <__sclose>:
 800aae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae6:	f000 b855 	b.w	800ab94 <_close_r>

0800aaea <_realloc_r>:
 800aaea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaee:	4680      	mov	r8, r0
 800aaf0:	4615      	mov	r5, r2
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	b921      	cbnz	r1, 800ab00 <_realloc_r+0x16>
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aafc:	f7ff b9c6 	b.w	8009e8c <_malloc_r>
 800ab00:	b92a      	cbnz	r2, 800ab0e <_realloc_r+0x24>
 800ab02:	f000 f8cf 	bl	800aca4 <_free_r>
 800ab06:	2400      	movs	r4, #0
 800ab08:	4620      	mov	r0, r4
 800ab0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab0e:	f000 f911 	bl	800ad34 <_malloc_usable_size_r>
 800ab12:	4285      	cmp	r5, r0
 800ab14:	4606      	mov	r6, r0
 800ab16:	d802      	bhi.n	800ab1e <_realloc_r+0x34>
 800ab18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab1c:	d8f4      	bhi.n	800ab08 <_realloc_r+0x1e>
 800ab1e:	4629      	mov	r1, r5
 800ab20:	4640      	mov	r0, r8
 800ab22:	f7ff f9b3 	bl	8009e8c <_malloc_r>
 800ab26:	4607      	mov	r7, r0
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d0ec      	beq.n	800ab06 <_realloc_r+0x1c>
 800ab2c:	42b5      	cmp	r5, r6
 800ab2e:	462a      	mov	r2, r5
 800ab30:	4621      	mov	r1, r4
 800ab32:	bf28      	it	cs
 800ab34:	4632      	movcs	r2, r6
 800ab36:	f7fd fe84 	bl	8008842 <memcpy>
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	f000 f8b1 	bl	800aca4 <_free_r>
 800ab42:	463c      	mov	r4, r7
 800ab44:	e7e0      	b.n	800ab08 <_realloc_r+0x1e>

0800ab46 <__ascii_wctomb>:
 800ab46:	4603      	mov	r3, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	b141      	cbz	r1, 800ab5e <__ascii_wctomb+0x18>
 800ab4c:	2aff      	cmp	r2, #255	@ 0xff
 800ab4e:	d904      	bls.n	800ab5a <__ascii_wctomb+0x14>
 800ab50:	228a      	movs	r2, #138	@ 0x8a
 800ab52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	4770      	bx	lr
 800ab5a:	2001      	movs	r0, #1
 800ab5c:	700a      	strb	r2, [r1, #0]
 800ab5e:	4770      	bx	lr

0800ab60 <memmove>:
 800ab60:	4288      	cmp	r0, r1
 800ab62:	b510      	push	{r4, lr}
 800ab64:	eb01 0402 	add.w	r4, r1, r2
 800ab68:	d902      	bls.n	800ab70 <memmove+0x10>
 800ab6a:	4284      	cmp	r4, r0
 800ab6c:	4623      	mov	r3, r4
 800ab6e:	d807      	bhi.n	800ab80 <memmove+0x20>
 800ab70:	1e43      	subs	r3, r0, #1
 800ab72:	42a1      	cmp	r1, r4
 800ab74:	d008      	beq.n	800ab88 <memmove+0x28>
 800ab76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab7e:	e7f8      	b.n	800ab72 <memmove+0x12>
 800ab80:	4601      	mov	r1, r0
 800ab82:	4402      	add	r2, r0
 800ab84:	428a      	cmp	r2, r1
 800ab86:	d100      	bne.n	800ab8a <memmove+0x2a>
 800ab88:	bd10      	pop	{r4, pc}
 800ab8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab92:	e7f7      	b.n	800ab84 <memmove+0x24>

0800ab94 <_close_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	2300      	movs	r3, #0
 800ab98:	4d05      	ldr	r5, [pc, #20]	@ (800abb0 <_close_r+0x1c>)
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	602b      	str	r3, [r5, #0]
 800aba0:	f7f6 ff53 	bl	8001a4a <_close>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d102      	bne.n	800abae <_close_r+0x1a>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	b103      	cbz	r3, 800abae <_close_r+0x1a>
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	20000578 	.word	0x20000578

0800abb4 <_lseek_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4604      	mov	r4, r0
 800abb8:	4608      	mov	r0, r1
 800abba:	4611      	mov	r1, r2
 800abbc:	2200      	movs	r2, #0
 800abbe:	4d05      	ldr	r5, [pc, #20]	@ (800abd4 <_lseek_r+0x20>)
 800abc0:	602a      	str	r2, [r5, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	f7f6 ff65 	bl	8001a92 <_lseek>
 800abc8:	1c43      	adds	r3, r0, #1
 800abca:	d102      	bne.n	800abd2 <_lseek_r+0x1e>
 800abcc:	682b      	ldr	r3, [r5, #0]
 800abce:	b103      	cbz	r3, 800abd2 <_lseek_r+0x1e>
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	20000578 	.word	0x20000578

0800abd8 <_read_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4604      	mov	r4, r0
 800abdc:	4608      	mov	r0, r1
 800abde:	4611      	mov	r1, r2
 800abe0:	2200      	movs	r2, #0
 800abe2:	4d05      	ldr	r5, [pc, #20]	@ (800abf8 <_read_r+0x20>)
 800abe4:	602a      	str	r2, [r5, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	f7f6 fef6 	bl	80019d8 <_read>
 800abec:	1c43      	adds	r3, r0, #1
 800abee:	d102      	bne.n	800abf6 <_read_r+0x1e>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	b103      	cbz	r3, 800abf6 <_read_r+0x1e>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
 800abf8:	20000578 	.word	0x20000578

0800abfc <_sbrk_r>:
 800abfc:	b538      	push	{r3, r4, r5, lr}
 800abfe:	2300      	movs	r3, #0
 800ac00:	4d05      	ldr	r5, [pc, #20]	@ (800ac18 <_sbrk_r+0x1c>)
 800ac02:	4604      	mov	r4, r0
 800ac04:	4608      	mov	r0, r1
 800ac06:	602b      	str	r3, [r5, #0]
 800ac08:	f7f6 ff50 	bl	8001aac <_sbrk>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	d102      	bne.n	800ac16 <_sbrk_r+0x1a>
 800ac10:	682b      	ldr	r3, [r5, #0]
 800ac12:	b103      	cbz	r3, 800ac16 <_sbrk_r+0x1a>
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	bd38      	pop	{r3, r4, r5, pc}
 800ac18:	20000578 	.word	0x20000578

0800ac1c <_write_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4604      	mov	r4, r0
 800ac20:	4608      	mov	r0, r1
 800ac22:	4611      	mov	r1, r2
 800ac24:	2200      	movs	r2, #0
 800ac26:	4d05      	ldr	r5, [pc, #20]	@ (800ac3c <_write_r+0x20>)
 800ac28:	602a      	str	r2, [r5, #0]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	f7f6 fef1 	bl	8001a12 <_write>
 800ac30:	1c43      	adds	r3, r0, #1
 800ac32:	d102      	bne.n	800ac3a <_write_r+0x1e>
 800ac34:	682b      	ldr	r3, [r5, #0]
 800ac36:	b103      	cbz	r3, 800ac3a <_write_r+0x1e>
 800ac38:	6023      	str	r3, [r4, #0]
 800ac3a:	bd38      	pop	{r3, r4, r5, pc}
 800ac3c:	20000578 	.word	0x20000578

0800ac40 <__assert_func>:
 800ac40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac42:	4614      	mov	r4, r2
 800ac44:	461a      	mov	r2, r3
 800ac46:	4b09      	ldr	r3, [pc, #36]	@ (800ac6c <__assert_func+0x2c>)
 800ac48:	4605      	mov	r5, r0
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	68d8      	ldr	r0, [r3, #12]
 800ac4e:	b954      	cbnz	r4, 800ac66 <__assert_func+0x26>
 800ac50:	4b07      	ldr	r3, [pc, #28]	@ (800ac70 <__assert_func+0x30>)
 800ac52:	461c      	mov	r4, r3
 800ac54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac58:	9100      	str	r1, [sp, #0]
 800ac5a:	462b      	mov	r3, r5
 800ac5c:	4905      	ldr	r1, [pc, #20]	@ (800ac74 <__assert_func+0x34>)
 800ac5e:	f000 f871 	bl	800ad44 <fiprintf>
 800ac62:	f000 f881 	bl	800ad68 <abort>
 800ac66:	4b04      	ldr	r3, [pc, #16]	@ (800ac78 <__assert_func+0x38>)
 800ac68:	e7f4      	b.n	800ac54 <__assert_func+0x14>
 800ac6a:	bf00      	nop
 800ac6c:	200001a0 	.word	0x200001a0
 800ac70:	0800b823 	.word	0x0800b823
 800ac74:	0800b7f5 	.word	0x0800b7f5
 800ac78:	0800b7e8 	.word	0x0800b7e8

0800ac7c <_calloc_r>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	fba1 5402 	umull	r5, r4, r1, r2
 800ac82:	b93c      	cbnz	r4, 800ac94 <_calloc_r+0x18>
 800ac84:	4629      	mov	r1, r5
 800ac86:	f7ff f901 	bl	8009e8c <_malloc_r>
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	b928      	cbnz	r0, 800ac9a <_calloc_r+0x1e>
 800ac8e:	2600      	movs	r6, #0
 800ac90:	4630      	mov	r0, r6
 800ac92:	bd70      	pop	{r4, r5, r6, pc}
 800ac94:	220c      	movs	r2, #12
 800ac96:	6002      	str	r2, [r0, #0]
 800ac98:	e7f9      	b.n	800ac8e <_calloc_r+0x12>
 800ac9a:	462a      	mov	r2, r5
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	f7fd fd89 	bl	80087b4 <memset>
 800aca2:	e7f5      	b.n	800ac90 <_calloc_r+0x14>

0800aca4 <_free_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4605      	mov	r5, r0
 800aca8:	2900      	cmp	r1, #0
 800acaa:	d040      	beq.n	800ad2e <_free_r+0x8a>
 800acac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acb0:	1f0c      	subs	r4, r1, #4
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	bfb8      	it	lt
 800acb6:	18e4      	addlt	r4, r4, r3
 800acb8:	f7ff fa22 	bl	800a100 <__malloc_lock>
 800acbc:	4a1c      	ldr	r2, [pc, #112]	@ (800ad30 <_free_r+0x8c>)
 800acbe:	6813      	ldr	r3, [r2, #0]
 800acc0:	b933      	cbnz	r3, 800acd0 <_free_r+0x2c>
 800acc2:	6063      	str	r3, [r4, #4]
 800acc4:	6014      	str	r4, [r2, #0]
 800acc6:	4628      	mov	r0, r5
 800acc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800accc:	f7ff ba1e 	b.w	800a10c <__malloc_unlock>
 800acd0:	42a3      	cmp	r3, r4
 800acd2:	d908      	bls.n	800ace6 <_free_r+0x42>
 800acd4:	6820      	ldr	r0, [r4, #0]
 800acd6:	1821      	adds	r1, r4, r0
 800acd8:	428b      	cmp	r3, r1
 800acda:	bf01      	itttt	eq
 800acdc:	6819      	ldreq	r1, [r3, #0]
 800acde:	685b      	ldreq	r3, [r3, #4]
 800ace0:	1809      	addeq	r1, r1, r0
 800ace2:	6021      	streq	r1, [r4, #0]
 800ace4:	e7ed      	b.n	800acc2 <_free_r+0x1e>
 800ace6:	461a      	mov	r2, r3
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	b10b      	cbz	r3, 800acf0 <_free_r+0x4c>
 800acec:	42a3      	cmp	r3, r4
 800acee:	d9fa      	bls.n	800ace6 <_free_r+0x42>
 800acf0:	6811      	ldr	r1, [r2, #0]
 800acf2:	1850      	adds	r0, r2, r1
 800acf4:	42a0      	cmp	r0, r4
 800acf6:	d10b      	bne.n	800ad10 <_free_r+0x6c>
 800acf8:	6820      	ldr	r0, [r4, #0]
 800acfa:	4401      	add	r1, r0
 800acfc:	1850      	adds	r0, r2, r1
 800acfe:	4283      	cmp	r3, r0
 800ad00:	6011      	str	r1, [r2, #0]
 800ad02:	d1e0      	bne.n	800acc6 <_free_r+0x22>
 800ad04:	6818      	ldr	r0, [r3, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	4408      	add	r0, r1
 800ad0a:	6010      	str	r0, [r2, #0]
 800ad0c:	6053      	str	r3, [r2, #4]
 800ad0e:	e7da      	b.n	800acc6 <_free_r+0x22>
 800ad10:	d902      	bls.n	800ad18 <_free_r+0x74>
 800ad12:	230c      	movs	r3, #12
 800ad14:	602b      	str	r3, [r5, #0]
 800ad16:	e7d6      	b.n	800acc6 <_free_r+0x22>
 800ad18:	6820      	ldr	r0, [r4, #0]
 800ad1a:	1821      	adds	r1, r4, r0
 800ad1c:	428b      	cmp	r3, r1
 800ad1e:	bf01      	itttt	eq
 800ad20:	6819      	ldreq	r1, [r3, #0]
 800ad22:	685b      	ldreq	r3, [r3, #4]
 800ad24:	1809      	addeq	r1, r1, r0
 800ad26:	6021      	streq	r1, [r4, #0]
 800ad28:	6063      	str	r3, [r4, #4]
 800ad2a:	6054      	str	r4, [r2, #4]
 800ad2c:	e7cb      	b.n	800acc6 <_free_r+0x22>
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	20000574 	.word	0x20000574

0800ad34 <_malloc_usable_size_r>:
 800ad34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad38:	1f18      	subs	r0, r3, #4
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	bfbc      	itt	lt
 800ad3e:	580b      	ldrlt	r3, [r1, r0]
 800ad40:	18c0      	addlt	r0, r0, r3
 800ad42:	4770      	bx	lr

0800ad44 <fiprintf>:
 800ad44:	b40e      	push	{r1, r2, r3}
 800ad46:	b503      	push	{r0, r1, lr}
 800ad48:	4601      	mov	r1, r0
 800ad4a:	ab03      	add	r3, sp, #12
 800ad4c:	4805      	ldr	r0, [pc, #20]	@ (800ad64 <fiprintf+0x20>)
 800ad4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad52:	6800      	ldr	r0, [r0, #0]
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	f000 f835 	bl	800adc4 <_vfiprintf_r>
 800ad5a:	b002      	add	sp, #8
 800ad5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad60:	b003      	add	sp, #12
 800ad62:	4770      	bx	lr
 800ad64:	200001a0 	.word	0x200001a0

0800ad68 <abort>:
 800ad68:	2006      	movs	r0, #6
 800ad6a:	b508      	push	{r3, lr}
 800ad6c:	f000 fa82 	bl	800b274 <raise>
 800ad70:	2001      	movs	r0, #1
 800ad72:	f7f6 fe26 	bl	80019c2 <_exit>

0800ad76 <__sfputc_r>:
 800ad76:	6893      	ldr	r3, [r2, #8]
 800ad78:	b410      	push	{r4}
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	6093      	str	r3, [r2, #8]
 800ad80:	da07      	bge.n	800ad92 <__sfputc_r+0x1c>
 800ad82:	6994      	ldr	r4, [r2, #24]
 800ad84:	42a3      	cmp	r3, r4
 800ad86:	db01      	blt.n	800ad8c <__sfputc_r+0x16>
 800ad88:	290a      	cmp	r1, #10
 800ad8a:	d102      	bne.n	800ad92 <__sfputc_r+0x1c>
 800ad8c:	bc10      	pop	{r4}
 800ad8e:	f000 b931 	b.w	800aff4 <__swbuf_r>
 800ad92:	6813      	ldr	r3, [r2, #0]
 800ad94:	1c58      	adds	r0, r3, #1
 800ad96:	6010      	str	r0, [r2, #0]
 800ad98:	7019      	strb	r1, [r3, #0]
 800ad9a:	4608      	mov	r0, r1
 800ad9c:	bc10      	pop	{r4}
 800ad9e:	4770      	bx	lr

0800ada0 <__sfputs_r>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	4606      	mov	r6, r0
 800ada4:	460f      	mov	r7, r1
 800ada6:	4614      	mov	r4, r2
 800ada8:	18d5      	adds	r5, r2, r3
 800adaa:	42ac      	cmp	r4, r5
 800adac:	d101      	bne.n	800adb2 <__sfputs_r+0x12>
 800adae:	2000      	movs	r0, #0
 800adb0:	e007      	b.n	800adc2 <__sfputs_r+0x22>
 800adb2:	463a      	mov	r2, r7
 800adb4:	4630      	mov	r0, r6
 800adb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adba:	f7ff ffdc 	bl	800ad76 <__sfputc_r>
 800adbe:	1c43      	adds	r3, r0, #1
 800adc0:	d1f3      	bne.n	800adaa <__sfputs_r+0xa>
 800adc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adc4 <_vfiprintf_r>:
 800adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc8:	460d      	mov	r5, r1
 800adca:	4614      	mov	r4, r2
 800adcc:	4698      	mov	r8, r3
 800adce:	4606      	mov	r6, r0
 800add0:	b09d      	sub	sp, #116	@ 0x74
 800add2:	b118      	cbz	r0, 800addc <_vfiprintf_r+0x18>
 800add4:	6a03      	ldr	r3, [r0, #32]
 800add6:	b90b      	cbnz	r3, 800addc <_vfiprintf_r+0x18>
 800add8:	f7fc fe28 	bl	8007a2c <__sinit>
 800addc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adde:	07d9      	lsls	r1, r3, #31
 800ade0:	d405      	bmi.n	800adee <_vfiprintf_r+0x2a>
 800ade2:	89ab      	ldrh	r3, [r5, #12]
 800ade4:	059a      	lsls	r2, r3, #22
 800ade6:	d402      	bmi.n	800adee <_vfiprintf_r+0x2a>
 800ade8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adea:	f7fd fd1a 	bl	8008822 <__retarget_lock_acquire_recursive>
 800adee:	89ab      	ldrh	r3, [r5, #12]
 800adf0:	071b      	lsls	r3, r3, #28
 800adf2:	d501      	bpl.n	800adf8 <_vfiprintf_r+0x34>
 800adf4:	692b      	ldr	r3, [r5, #16]
 800adf6:	b99b      	cbnz	r3, 800ae20 <_vfiprintf_r+0x5c>
 800adf8:	4629      	mov	r1, r5
 800adfa:	4630      	mov	r0, r6
 800adfc:	f000 f938 	bl	800b070 <__swsetup_r>
 800ae00:	b170      	cbz	r0, 800ae20 <_vfiprintf_r+0x5c>
 800ae02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae04:	07dc      	lsls	r4, r3, #31
 800ae06:	d504      	bpl.n	800ae12 <_vfiprintf_r+0x4e>
 800ae08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae0c:	b01d      	add	sp, #116	@ 0x74
 800ae0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae12:	89ab      	ldrh	r3, [r5, #12]
 800ae14:	0598      	lsls	r0, r3, #22
 800ae16:	d4f7      	bmi.n	800ae08 <_vfiprintf_r+0x44>
 800ae18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae1a:	f7fd fd03 	bl	8008824 <__retarget_lock_release_recursive>
 800ae1e:	e7f3      	b.n	800ae08 <_vfiprintf_r+0x44>
 800ae20:	2300      	movs	r3, #0
 800ae22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae24:	2320      	movs	r3, #32
 800ae26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae2a:	2330      	movs	r3, #48	@ 0x30
 800ae2c:	f04f 0901 	mov.w	r9, #1
 800ae30:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae34:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800afe0 <_vfiprintf_r+0x21c>
 800ae38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae3c:	4623      	mov	r3, r4
 800ae3e:	469a      	mov	sl, r3
 800ae40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae44:	b10a      	cbz	r2, 800ae4a <_vfiprintf_r+0x86>
 800ae46:	2a25      	cmp	r2, #37	@ 0x25
 800ae48:	d1f9      	bne.n	800ae3e <_vfiprintf_r+0x7a>
 800ae4a:	ebba 0b04 	subs.w	fp, sl, r4
 800ae4e:	d00b      	beq.n	800ae68 <_vfiprintf_r+0xa4>
 800ae50:	465b      	mov	r3, fp
 800ae52:	4622      	mov	r2, r4
 800ae54:	4629      	mov	r1, r5
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7ff ffa2 	bl	800ada0 <__sfputs_r>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	f000 80a7 	beq.w	800afb0 <_vfiprintf_r+0x1ec>
 800ae62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae64:	445a      	add	r2, fp
 800ae66:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae68:	f89a 3000 	ldrb.w	r3, [sl]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 809f 	beq.w	800afb0 <_vfiprintf_r+0x1ec>
 800ae72:	2300      	movs	r3, #0
 800ae74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae7c:	f10a 0a01 	add.w	sl, sl, #1
 800ae80:	9304      	str	r3, [sp, #16]
 800ae82:	9307      	str	r3, [sp, #28]
 800ae84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae88:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae8a:	4654      	mov	r4, sl
 800ae8c:	2205      	movs	r2, #5
 800ae8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae92:	4853      	ldr	r0, [pc, #332]	@ (800afe0 <_vfiprintf_r+0x21c>)
 800ae94:	f7fd fcc7 	bl	8008826 <memchr>
 800ae98:	9a04      	ldr	r2, [sp, #16]
 800ae9a:	b9d8      	cbnz	r0, 800aed4 <_vfiprintf_r+0x110>
 800ae9c:	06d1      	lsls	r1, r2, #27
 800ae9e:	bf44      	itt	mi
 800aea0:	2320      	movmi	r3, #32
 800aea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aea6:	0713      	lsls	r3, r2, #28
 800aea8:	bf44      	itt	mi
 800aeaa:	232b      	movmi	r3, #43	@ 0x2b
 800aeac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeb0:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeb6:	d015      	beq.n	800aee4 <_vfiprintf_r+0x120>
 800aeb8:	4654      	mov	r4, sl
 800aeba:	2000      	movs	r0, #0
 800aebc:	f04f 0c0a 	mov.w	ip, #10
 800aec0:	9a07      	ldr	r2, [sp, #28]
 800aec2:	4621      	mov	r1, r4
 800aec4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aec8:	3b30      	subs	r3, #48	@ 0x30
 800aeca:	2b09      	cmp	r3, #9
 800aecc:	d94b      	bls.n	800af66 <_vfiprintf_r+0x1a2>
 800aece:	b1b0      	cbz	r0, 800aefe <_vfiprintf_r+0x13a>
 800aed0:	9207      	str	r2, [sp, #28]
 800aed2:	e014      	b.n	800aefe <_vfiprintf_r+0x13a>
 800aed4:	eba0 0308 	sub.w	r3, r0, r8
 800aed8:	fa09 f303 	lsl.w	r3, r9, r3
 800aedc:	4313      	orrs	r3, r2
 800aede:	46a2      	mov	sl, r4
 800aee0:	9304      	str	r3, [sp, #16]
 800aee2:	e7d2      	b.n	800ae8a <_vfiprintf_r+0xc6>
 800aee4:	9b03      	ldr	r3, [sp, #12]
 800aee6:	1d19      	adds	r1, r3, #4
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	9103      	str	r1, [sp, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	bfbb      	ittet	lt
 800aef0:	425b      	neglt	r3, r3
 800aef2:	f042 0202 	orrlt.w	r2, r2, #2
 800aef6:	9307      	strge	r3, [sp, #28]
 800aef8:	9307      	strlt	r3, [sp, #28]
 800aefa:	bfb8      	it	lt
 800aefc:	9204      	strlt	r2, [sp, #16]
 800aefe:	7823      	ldrb	r3, [r4, #0]
 800af00:	2b2e      	cmp	r3, #46	@ 0x2e
 800af02:	d10a      	bne.n	800af1a <_vfiprintf_r+0x156>
 800af04:	7863      	ldrb	r3, [r4, #1]
 800af06:	2b2a      	cmp	r3, #42	@ 0x2a
 800af08:	d132      	bne.n	800af70 <_vfiprintf_r+0x1ac>
 800af0a:	9b03      	ldr	r3, [sp, #12]
 800af0c:	3402      	adds	r4, #2
 800af0e:	1d1a      	adds	r2, r3, #4
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	9203      	str	r2, [sp, #12]
 800af14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af18:	9305      	str	r3, [sp, #20]
 800af1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800afe4 <_vfiprintf_r+0x220>
 800af1e:	2203      	movs	r2, #3
 800af20:	4650      	mov	r0, sl
 800af22:	7821      	ldrb	r1, [r4, #0]
 800af24:	f7fd fc7f 	bl	8008826 <memchr>
 800af28:	b138      	cbz	r0, 800af3a <_vfiprintf_r+0x176>
 800af2a:	2240      	movs	r2, #64	@ 0x40
 800af2c:	9b04      	ldr	r3, [sp, #16]
 800af2e:	eba0 000a 	sub.w	r0, r0, sl
 800af32:	4082      	lsls	r2, r0
 800af34:	4313      	orrs	r3, r2
 800af36:	3401      	adds	r4, #1
 800af38:	9304      	str	r3, [sp, #16]
 800af3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af3e:	2206      	movs	r2, #6
 800af40:	4829      	ldr	r0, [pc, #164]	@ (800afe8 <_vfiprintf_r+0x224>)
 800af42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af46:	f7fd fc6e 	bl	8008826 <memchr>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d03f      	beq.n	800afce <_vfiprintf_r+0x20a>
 800af4e:	4b27      	ldr	r3, [pc, #156]	@ (800afec <_vfiprintf_r+0x228>)
 800af50:	bb1b      	cbnz	r3, 800af9a <_vfiprintf_r+0x1d6>
 800af52:	9b03      	ldr	r3, [sp, #12]
 800af54:	3307      	adds	r3, #7
 800af56:	f023 0307 	bic.w	r3, r3, #7
 800af5a:	3308      	adds	r3, #8
 800af5c:	9303      	str	r3, [sp, #12]
 800af5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af60:	443b      	add	r3, r7
 800af62:	9309      	str	r3, [sp, #36]	@ 0x24
 800af64:	e76a      	b.n	800ae3c <_vfiprintf_r+0x78>
 800af66:	460c      	mov	r4, r1
 800af68:	2001      	movs	r0, #1
 800af6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af6e:	e7a8      	b.n	800aec2 <_vfiprintf_r+0xfe>
 800af70:	2300      	movs	r3, #0
 800af72:	f04f 0c0a 	mov.w	ip, #10
 800af76:	4619      	mov	r1, r3
 800af78:	3401      	adds	r4, #1
 800af7a:	9305      	str	r3, [sp, #20]
 800af7c:	4620      	mov	r0, r4
 800af7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af82:	3a30      	subs	r2, #48	@ 0x30
 800af84:	2a09      	cmp	r2, #9
 800af86:	d903      	bls.n	800af90 <_vfiprintf_r+0x1cc>
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d0c6      	beq.n	800af1a <_vfiprintf_r+0x156>
 800af8c:	9105      	str	r1, [sp, #20]
 800af8e:	e7c4      	b.n	800af1a <_vfiprintf_r+0x156>
 800af90:	4604      	mov	r4, r0
 800af92:	2301      	movs	r3, #1
 800af94:	fb0c 2101 	mla	r1, ip, r1, r2
 800af98:	e7f0      	b.n	800af7c <_vfiprintf_r+0x1b8>
 800af9a:	ab03      	add	r3, sp, #12
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	462a      	mov	r2, r5
 800afa0:	4630      	mov	r0, r6
 800afa2:	4b13      	ldr	r3, [pc, #76]	@ (800aff0 <_vfiprintf_r+0x22c>)
 800afa4:	a904      	add	r1, sp, #16
 800afa6:	f7fb fe93 	bl	8006cd0 <_printf_float>
 800afaa:	4607      	mov	r7, r0
 800afac:	1c78      	adds	r0, r7, #1
 800afae:	d1d6      	bne.n	800af5e <_vfiprintf_r+0x19a>
 800afb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afb2:	07d9      	lsls	r1, r3, #31
 800afb4:	d405      	bmi.n	800afc2 <_vfiprintf_r+0x1fe>
 800afb6:	89ab      	ldrh	r3, [r5, #12]
 800afb8:	059a      	lsls	r2, r3, #22
 800afba:	d402      	bmi.n	800afc2 <_vfiprintf_r+0x1fe>
 800afbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afbe:	f7fd fc31 	bl	8008824 <__retarget_lock_release_recursive>
 800afc2:	89ab      	ldrh	r3, [r5, #12]
 800afc4:	065b      	lsls	r3, r3, #25
 800afc6:	f53f af1f 	bmi.w	800ae08 <_vfiprintf_r+0x44>
 800afca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afcc:	e71e      	b.n	800ae0c <_vfiprintf_r+0x48>
 800afce:	ab03      	add	r3, sp, #12
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	462a      	mov	r2, r5
 800afd4:	4630      	mov	r0, r6
 800afd6:	4b06      	ldr	r3, [pc, #24]	@ (800aff0 <_vfiprintf_r+0x22c>)
 800afd8:	a904      	add	r1, sp, #16
 800afda:	f7fc f917 	bl	800720c <_printf_i>
 800afde:	e7e4      	b.n	800afaa <_vfiprintf_r+0x1e6>
 800afe0:	0800b67e 	.word	0x0800b67e
 800afe4:	0800b684 	.word	0x0800b684
 800afe8:	0800b688 	.word	0x0800b688
 800afec:	08006cd1 	.word	0x08006cd1
 800aff0:	0800ada1 	.word	0x0800ada1

0800aff4 <__swbuf_r>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	460e      	mov	r6, r1
 800aff8:	4614      	mov	r4, r2
 800affa:	4605      	mov	r5, r0
 800affc:	b118      	cbz	r0, 800b006 <__swbuf_r+0x12>
 800affe:	6a03      	ldr	r3, [r0, #32]
 800b000:	b90b      	cbnz	r3, 800b006 <__swbuf_r+0x12>
 800b002:	f7fc fd13 	bl	8007a2c <__sinit>
 800b006:	69a3      	ldr	r3, [r4, #24]
 800b008:	60a3      	str	r3, [r4, #8]
 800b00a:	89a3      	ldrh	r3, [r4, #12]
 800b00c:	071a      	lsls	r2, r3, #28
 800b00e:	d501      	bpl.n	800b014 <__swbuf_r+0x20>
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	b943      	cbnz	r3, 800b026 <__swbuf_r+0x32>
 800b014:	4621      	mov	r1, r4
 800b016:	4628      	mov	r0, r5
 800b018:	f000 f82a 	bl	800b070 <__swsetup_r>
 800b01c:	b118      	cbz	r0, 800b026 <__swbuf_r+0x32>
 800b01e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b022:	4638      	mov	r0, r7
 800b024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	6922      	ldr	r2, [r4, #16]
 800b02a:	b2f6      	uxtb	r6, r6
 800b02c:	1a98      	subs	r0, r3, r2
 800b02e:	6963      	ldr	r3, [r4, #20]
 800b030:	4637      	mov	r7, r6
 800b032:	4283      	cmp	r3, r0
 800b034:	dc05      	bgt.n	800b042 <__swbuf_r+0x4e>
 800b036:	4621      	mov	r1, r4
 800b038:	4628      	mov	r0, r5
 800b03a:	f7ff f839 	bl	800a0b0 <_fflush_r>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d1ed      	bne.n	800b01e <__swbuf_r+0x2a>
 800b042:	68a3      	ldr	r3, [r4, #8]
 800b044:	3b01      	subs	r3, #1
 800b046:	60a3      	str	r3, [r4, #8]
 800b048:	6823      	ldr	r3, [r4, #0]
 800b04a:	1c5a      	adds	r2, r3, #1
 800b04c:	6022      	str	r2, [r4, #0]
 800b04e:	701e      	strb	r6, [r3, #0]
 800b050:	6962      	ldr	r2, [r4, #20]
 800b052:	1c43      	adds	r3, r0, #1
 800b054:	429a      	cmp	r2, r3
 800b056:	d004      	beq.n	800b062 <__swbuf_r+0x6e>
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	07db      	lsls	r3, r3, #31
 800b05c:	d5e1      	bpl.n	800b022 <__swbuf_r+0x2e>
 800b05e:	2e0a      	cmp	r6, #10
 800b060:	d1df      	bne.n	800b022 <__swbuf_r+0x2e>
 800b062:	4621      	mov	r1, r4
 800b064:	4628      	mov	r0, r5
 800b066:	f7ff f823 	bl	800a0b0 <_fflush_r>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d0d9      	beq.n	800b022 <__swbuf_r+0x2e>
 800b06e:	e7d6      	b.n	800b01e <__swbuf_r+0x2a>

0800b070 <__swsetup_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4b29      	ldr	r3, [pc, #164]	@ (800b118 <__swsetup_r+0xa8>)
 800b074:	4605      	mov	r5, r0
 800b076:	6818      	ldr	r0, [r3, #0]
 800b078:	460c      	mov	r4, r1
 800b07a:	b118      	cbz	r0, 800b084 <__swsetup_r+0x14>
 800b07c:	6a03      	ldr	r3, [r0, #32]
 800b07e:	b90b      	cbnz	r3, 800b084 <__swsetup_r+0x14>
 800b080:	f7fc fcd4 	bl	8007a2c <__sinit>
 800b084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b088:	0719      	lsls	r1, r3, #28
 800b08a:	d422      	bmi.n	800b0d2 <__swsetup_r+0x62>
 800b08c:	06da      	lsls	r2, r3, #27
 800b08e:	d407      	bmi.n	800b0a0 <__swsetup_r+0x30>
 800b090:	2209      	movs	r2, #9
 800b092:	602a      	str	r2, [r5, #0]
 800b094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b098:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	e033      	b.n	800b108 <__swsetup_r+0x98>
 800b0a0:	0758      	lsls	r0, r3, #29
 800b0a2:	d512      	bpl.n	800b0ca <__swsetup_r+0x5a>
 800b0a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0a6:	b141      	cbz	r1, 800b0ba <__swsetup_r+0x4a>
 800b0a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0ac:	4299      	cmp	r1, r3
 800b0ae:	d002      	beq.n	800b0b6 <__swsetup_r+0x46>
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f7ff fdf7 	bl	800aca4 <_free_r>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0ba:	89a3      	ldrh	r3, [r4, #12]
 800b0bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	6063      	str	r3, [r4, #4]
 800b0c6:	6923      	ldr	r3, [r4, #16]
 800b0c8:	6023      	str	r3, [r4, #0]
 800b0ca:	89a3      	ldrh	r3, [r4, #12]
 800b0cc:	f043 0308 	orr.w	r3, r3, #8
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	6923      	ldr	r3, [r4, #16]
 800b0d4:	b94b      	cbnz	r3, 800b0ea <__swsetup_r+0x7a>
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b0dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0e0:	d003      	beq.n	800b0ea <__swsetup_r+0x7a>
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f000 f83e 	bl	800b166 <__smakebuf_r>
 800b0ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ee:	f013 0201 	ands.w	r2, r3, #1
 800b0f2:	d00a      	beq.n	800b10a <__swsetup_r+0x9a>
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	60a2      	str	r2, [r4, #8]
 800b0f8:	6962      	ldr	r2, [r4, #20]
 800b0fa:	4252      	negs	r2, r2
 800b0fc:	61a2      	str	r2, [r4, #24]
 800b0fe:	6922      	ldr	r2, [r4, #16]
 800b100:	b942      	cbnz	r2, 800b114 <__swsetup_r+0xa4>
 800b102:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b106:	d1c5      	bne.n	800b094 <__swsetup_r+0x24>
 800b108:	bd38      	pop	{r3, r4, r5, pc}
 800b10a:	0799      	lsls	r1, r3, #30
 800b10c:	bf58      	it	pl
 800b10e:	6962      	ldrpl	r2, [r4, #20]
 800b110:	60a2      	str	r2, [r4, #8]
 800b112:	e7f4      	b.n	800b0fe <__swsetup_r+0x8e>
 800b114:	2000      	movs	r0, #0
 800b116:	e7f7      	b.n	800b108 <__swsetup_r+0x98>
 800b118:	200001a0 	.word	0x200001a0

0800b11c <__swhatbuf_r>:
 800b11c:	b570      	push	{r4, r5, r6, lr}
 800b11e:	460c      	mov	r4, r1
 800b120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b124:	4615      	mov	r5, r2
 800b126:	2900      	cmp	r1, #0
 800b128:	461e      	mov	r6, r3
 800b12a:	b096      	sub	sp, #88	@ 0x58
 800b12c:	da0c      	bge.n	800b148 <__swhatbuf_r+0x2c>
 800b12e:	89a3      	ldrh	r3, [r4, #12]
 800b130:	2100      	movs	r1, #0
 800b132:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b136:	bf14      	ite	ne
 800b138:	2340      	movne	r3, #64	@ 0x40
 800b13a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b13e:	2000      	movs	r0, #0
 800b140:	6031      	str	r1, [r6, #0]
 800b142:	602b      	str	r3, [r5, #0]
 800b144:	b016      	add	sp, #88	@ 0x58
 800b146:	bd70      	pop	{r4, r5, r6, pc}
 800b148:	466a      	mov	r2, sp
 800b14a:	f000 f849 	bl	800b1e0 <_fstat_r>
 800b14e:	2800      	cmp	r0, #0
 800b150:	dbed      	blt.n	800b12e <__swhatbuf_r+0x12>
 800b152:	9901      	ldr	r1, [sp, #4]
 800b154:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b158:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b15c:	4259      	negs	r1, r3
 800b15e:	4159      	adcs	r1, r3
 800b160:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b164:	e7eb      	b.n	800b13e <__swhatbuf_r+0x22>

0800b166 <__smakebuf_r>:
 800b166:	898b      	ldrh	r3, [r1, #12]
 800b168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b16a:	079d      	lsls	r5, r3, #30
 800b16c:	4606      	mov	r6, r0
 800b16e:	460c      	mov	r4, r1
 800b170:	d507      	bpl.n	800b182 <__smakebuf_r+0x1c>
 800b172:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b176:	6023      	str	r3, [r4, #0]
 800b178:	6123      	str	r3, [r4, #16]
 800b17a:	2301      	movs	r3, #1
 800b17c:	6163      	str	r3, [r4, #20]
 800b17e:	b003      	add	sp, #12
 800b180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b182:	466a      	mov	r2, sp
 800b184:	ab01      	add	r3, sp, #4
 800b186:	f7ff ffc9 	bl	800b11c <__swhatbuf_r>
 800b18a:	9f00      	ldr	r7, [sp, #0]
 800b18c:	4605      	mov	r5, r0
 800b18e:	4639      	mov	r1, r7
 800b190:	4630      	mov	r0, r6
 800b192:	f7fe fe7b 	bl	8009e8c <_malloc_r>
 800b196:	b948      	cbnz	r0, 800b1ac <__smakebuf_r+0x46>
 800b198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b19c:	059a      	lsls	r2, r3, #22
 800b19e:	d4ee      	bmi.n	800b17e <__smakebuf_r+0x18>
 800b1a0:	f023 0303 	bic.w	r3, r3, #3
 800b1a4:	f043 0302 	orr.w	r3, r3, #2
 800b1a8:	81a3      	strh	r3, [r4, #12]
 800b1aa:	e7e2      	b.n	800b172 <__smakebuf_r+0xc>
 800b1ac:	89a3      	ldrh	r3, [r4, #12]
 800b1ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1b6:	81a3      	strh	r3, [r4, #12]
 800b1b8:	9b01      	ldr	r3, [sp, #4]
 800b1ba:	6020      	str	r0, [r4, #0]
 800b1bc:	b15b      	cbz	r3, 800b1d6 <__smakebuf_r+0x70>
 800b1be:	4630      	mov	r0, r6
 800b1c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1c4:	f000 f81e 	bl	800b204 <_isatty_r>
 800b1c8:	b128      	cbz	r0, 800b1d6 <__smakebuf_r+0x70>
 800b1ca:	89a3      	ldrh	r3, [r4, #12]
 800b1cc:	f023 0303 	bic.w	r3, r3, #3
 800b1d0:	f043 0301 	orr.w	r3, r3, #1
 800b1d4:	81a3      	strh	r3, [r4, #12]
 800b1d6:	89a3      	ldrh	r3, [r4, #12]
 800b1d8:	431d      	orrs	r5, r3
 800b1da:	81a5      	strh	r5, [r4, #12]
 800b1dc:	e7cf      	b.n	800b17e <__smakebuf_r+0x18>
	...

0800b1e0 <_fstat_r>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	4d06      	ldr	r5, [pc, #24]	@ (800b200 <_fstat_r+0x20>)
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4608      	mov	r0, r1
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	f7f6 fc37 	bl	8001a60 <_fstat>
 800b1f2:	1c43      	adds	r3, r0, #1
 800b1f4:	d102      	bne.n	800b1fc <_fstat_r+0x1c>
 800b1f6:	682b      	ldr	r3, [r5, #0]
 800b1f8:	b103      	cbz	r3, 800b1fc <_fstat_r+0x1c>
 800b1fa:	6023      	str	r3, [r4, #0]
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}
 800b1fe:	bf00      	nop
 800b200:	20000578 	.word	0x20000578

0800b204 <_isatty_r>:
 800b204:	b538      	push	{r3, r4, r5, lr}
 800b206:	2300      	movs	r3, #0
 800b208:	4d05      	ldr	r5, [pc, #20]	@ (800b220 <_isatty_r+0x1c>)
 800b20a:	4604      	mov	r4, r0
 800b20c:	4608      	mov	r0, r1
 800b20e:	602b      	str	r3, [r5, #0]
 800b210:	f7f6 fc35 	bl	8001a7e <_isatty>
 800b214:	1c43      	adds	r3, r0, #1
 800b216:	d102      	bne.n	800b21e <_isatty_r+0x1a>
 800b218:	682b      	ldr	r3, [r5, #0]
 800b21a:	b103      	cbz	r3, 800b21e <_isatty_r+0x1a>
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	bd38      	pop	{r3, r4, r5, pc}
 800b220:	20000578 	.word	0x20000578

0800b224 <_raise_r>:
 800b224:	291f      	cmp	r1, #31
 800b226:	b538      	push	{r3, r4, r5, lr}
 800b228:	4605      	mov	r5, r0
 800b22a:	460c      	mov	r4, r1
 800b22c:	d904      	bls.n	800b238 <_raise_r+0x14>
 800b22e:	2316      	movs	r3, #22
 800b230:	6003      	str	r3, [r0, #0]
 800b232:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b23a:	b112      	cbz	r2, 800b242 <_raise_r+0x1e>
 800b23c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b240:	b94b      	cbnz	r3, 800b256 <_raise_r+0x32>
 800b242:	4628      	mov	r0, r5
 800b244:	f000 f830 	bl	800b2a8 <_getpid_r>
 800b248:	4622      	mov	r2, r4
 800b24a:	4601      	mov	r1, r0
 800b24c:	4628      	mov	r0, r5
 800b24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b252:	f000 b817 	b.w	800b284 <_kill_r>
 800b256:	2b01      	cmp	r3, #1
 800b258:	d00a      	beq.n	800b270 <_raise_r+0x4c>
 800b25a:	1c59      	adds	r1, r3, #1
 800b25c:	d103      	bne.n	800b266 <_raise_r+0x42>
 800b25e:	2316      	movs	r3, #22
 800b260:	6003      	str	r3, [r0, #0]
 800b262:	2001      	movs	r0, #1
 800b264:	e7e7      	b.n	800b236 <_raise_r+0x12>
 800b266:	2100      	movs	r1, #0
 800b268:	4620      	mov	r0, r4
 800b26a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b26e:	4798      	blx	r3
 800b270:	2000      	movs	r0, #0
 800b272:	e7e0      	b.n	800b236 <_raise_r+0x12>

0800b274 <raise>:
 800b274:	4b02      	ldr	r3, [pc, #8]	@ (800b280 <raise+0xc>)
 800b276:	4601      	mov	r1, r0
 800b278:	6818      	ldr	r0, [r3, #0]
 800b27a:	f7ff bfd3 	b.w	800b224 <_raise_r>
 800b27e:	bf00      	nop
 800b280:	200001a0 	.word	0x200001a0

0800b284 <_kill_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	2300      	movs	r3, #0
 800b288:	4d06      	ldr	r5, [pc, #24]	@ (800b2a4 <_kill_r+0x20>)
 800b28a:	4604      	mov	r4, r0
 800b28c:	4608      	mov	r0, r1
 800b28e:	4611      	mov	r1, r2
 800b290:	602b      	str	r3, [r5, #0]
 800b292:	f7f6 fb86 	bl	80019a2 <_kill>
 800b296:	1c43      	adds	r3, r0, #1
 800b298:	d102      	bne.n	800b2a0 <_kill_r+0x1c>
 800b29a:	682b      	ldr	r3, [r5, #0]
 800b29c:	b103      	cbz	r3, 800b2a0 <_kill_r+0x1c>
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	bd38      	pop	{r3, r4, r5, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000578 	.word	0x20000578

0800b2a8 <_getpid_r>:
 800b2a8:	f7f6 bb74 	b.w	8001994 <_getpid>

0800b2ac <_init>:
 800b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ae:	bf00      	nop
 800b2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2b2:	bc08      	pop	{r3}
 800b2b4:	469e      	mov	lr, r3
 800b2b6:	4770      	bx	lr

0800b2b8 <_fini>:
 800b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ba:	bf00      	nop
 800b2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2be:	bc08      	pop	{r3}
 800b2c0:	469e      	mov	lr, r3
 800b2c2:	4770      	bx	lr
