
BLUEPILL ORIGINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a904  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800aa18  0800aa18  0000ba18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af94  0800af94  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800af94  0800af94  0000bf94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af9c  0800af9c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af9c  0800af9c  0000bf9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800afa0  0800afa0  0000bfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800afa4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001d4  0800b178  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  0800b178  0000c4f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134a8  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000339e  00000000  00000000  0001f6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00022a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e7d  00000000  00000000  00023ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b449  00000000  00000000  00024b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ddb  00000000  00000000  0003ffa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000947a3  00000000  00000000  00058d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed524  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d4  00000000  00000000  000ed568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f373c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9fc 	.word	0x0800a9fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800a9fc 	.word	0x0800a9fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be4:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000be6:	4a21      	ldr	r2, [pc, #132]	@ (8000c6c <MX_ADC1_Init+0x98>)
 8000be8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c00:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c0e:	2202      	movs	r2, #2
 8000c10:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c12:	4815      	ldr	r0, [pc, #84]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c14:	f001 f8d8 	bl	8001dc8 <HAL_ADC_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c1e:	f000 fd7a 	bl	8001716 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c34:	f001 fb58 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f000 fd6a 	bl	8001716 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c50:	f001 fb4a 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c5a:	f000 fd5c 	bl	8001716 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200001f0 	.word	0x200001f0
 8000c6c:	40012400 	.word	0x40012400

08000c70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d3c <HAL_ADC_MspInit+0xcc>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d151      	bne.n	8000d34 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a2a      	ldr	r2, [pc, #168]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b25      	ldr	r3, [pc, #148]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a24      	ldr	r2, [pc, #144]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VCellMas_Pin|VCellMenos_Pin;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481d      	ldr	r0, [pc, #116]	@ (8000d44 <HAL_ADC_MspInit+0xd4>)
 8000cd0:	f002 f808 	bl	8002ce4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8000d4c <HAL_ADC_MspInit+0xdc>)
 8000cd8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000ce8:	2280      	movs	r2, #128	@ 0x80
 8000cea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cf2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cfa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cfe:	2220      	movs	r2, #32
 8000d00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d08:	480f      	ldr	r0, [pc, #60]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d0a:	f001 fdfd 	bl	8002908 <HAL_DMA_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000d14:	f000 fcff 	bl	8001716 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d1c:	621a      	str	r2, [r3, #32]
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2101      	movs	r1, #1
 8000d28:	2012      	movs	r0, #18
 8000d2a:	f001 fdb6 	bl	800289a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d2e:	2012      	movs	r0, #18
 8000d30:	f001 fdcf 	bl	80028d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40012400 	.word	0x40012400
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	20000220 	.word	0x20000220
 8000d4c:	40020008 	.word	0x40020008

08000d50 <BQ29330_ReadFunctionControl>:



// Lee el valor actual del registro FUNCTION_CONTROL (0x03) del BQ29330
HAL_StatusTypeDef BQ29330_ReadFunctionControl(BQ29330_Registers reg, uint8_t *valor_leido)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[1];
    buffer[0] = reg; 		// Dirección del registro
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	733b      	strb	r3, [r7, #12]
    // Paso 1: Enviar la dirección del registro que queremos leer (0x03)
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 1, HAL_MAX_DELAY);
 8000d60:	f107 020c 	add.w	r2, r7, #12
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2140      	movs	r1, #64	@ 0x40
 8000d6e:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <BQ29330_ReadFunctionControl+0x50>)
 8000d70:	f002 fa98 	bl	80032a4 <HAL_I2C_Master_Transmit>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;  // Si falla al enviar la dirección del registro, retornamos el error
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <BQ29330_ReadFunctionControl+0x32>
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	e009      	b.n	8000d96 <BQ29330_ReadFunctionControl+0x46>
    // Paso 2: Leer un byte desde el dispositivo (valor del registro FUNCTION_CONTROL)
    return HAL_I2C_Master_Receive(&hi2c1, BMS_I2C_ADDRESS, valor_leido, 1, HAL_MAX_DELAY);  // Devolver el estado de la operación y el valor leído en *valor_leido
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	2140      	movs	r1, #64	@ 0x40
 8000d8e:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <BQ29330_ReadFunctionControl+0x50>)
 8000d90:	f002 fb86 	bl	80034a0 <HAL_I2C_Master_Receive>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000264 	.word	0x20000264

08000da4 <BQ29330_WriteRegister>:



// Función para escribir en un registro del BQ29330
HAL_StatusTypeDef BQ29330_WriteRegister(BQ29330_Registers reg, uint8_t data)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = reg; 		// Dirección del registro
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;        // Dato a escribir
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8000dbc:	f107 020c 	add.w	r2, r7, #12
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	2140      	movs	r1, #64	@ 0x40
 8000dca:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <BQ29330_WriteRegister+0x38>)
 8000dcc:	f002 fa6a 	bl	80032a4 <HAL_I2C_Master_Transmit>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000264 	.word	0x20000264

08000de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <MX_DMA_Init+0x38>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <MX_DMA_Init+0x38>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6153      	str	r3, [r2, #20]
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <MX_DMA_Init+0x38>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2101      	movs	r1, #1
 8000e02:	200b      	movs	r0, #11
 8000e04:	f001 fd49 	bl	800289a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e08:	200b      	movs	r0, #11
 8000e0a:	f001 fd62 	bl	80028d2 <HAL_NVIC_EnableIRQ>

}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	4b24      	ldr	r3, [pc, #144]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a23      	ldr	r2, [pc, #140]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e36:	f043 0310 	orr.w	r3, r3, #16
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e4e:	f043 0320 	orr.w	r3, r3, #32
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0320 	and.w	r3, r3, #32
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a17      	ldr	r2, [pc, #92]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a11      	ldr	r2, [pc, #68]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <MX_GPIO_Init+0xa8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activador_GPIO_Port, activador_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e96:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <MX_GPIO_Init+0xac>)
 8000e98:	f002 f8a8 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activador_Pin;
 8000e9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(activador_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <MX_GPIO_Init+0xac>)
 8000eb6:	f001 ff15 	bl	8002ce4 <HAL_GPIO_Init>

}
 8000eba:	bf00      	nop
 8000ebc:	3720      	adds	r7, #32
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40011000 	.word	0x40011000

08000ecc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000ed2:	4a13      	ldr	r2, [pc, #76]	@ (8000f20 <MX_I2C1_Init+0x54>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000ed8:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <MX_I2C1_Init+0x58>)
 8000eda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000eea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000efc:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f08:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <MX_I2C1_Init+0x50>)
 8000f0a:	f002 f887 	bl	800301c <HAL_I2C_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f14:	f000 fbff 	bl	8001716 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000264 	.word	0x20000264
 8000f20:	40005400 	.word	0x40005400
 8000f24:	000186a0 	.word	0x000186a0

08000f28 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <MX_I2C2_Init+0x50>)
 8000f2e:	4a13      	ldr	r2, [pc, #76]	@ (8000f7c <MX_I2C2_Init+0x54>)
 8000f30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f32:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <MX_I2C2_Init+0x50>)
 8000f34:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <MX_I2C2_Init+0x58>)
 8000f36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <MX_I2C2_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <MX_I2C2_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <MX_I2C2_Init+0x50>)
 8000f46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f4a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <MX_I2C2_Init+0x50>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <MX_I2C2_Init+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <MX_I2C2_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <MX_I2C2_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	@ (8000f78 <MX_I2C2_Init+0x50>)
 8000f66:	f002 f859 	bl	800301c <HAL_I2C_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000f70:	f000 fbd1 	bl	8001716 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200002b8 	.word	0x200002b8
 8000f7c:	40005800 	.word	0x40005800
 8000f80:	000186a0 	.word	0x000186a0

08000f84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a2b      	ldr	r2, [pc, #172]	@ (800104c <HAL_I2C_MspInit+0xc8>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d124      	bne.n	8000fee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8001050 <HAL_I2C_MspInit+0xcc>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a29      	ldr	r2, [pc, #164]	@ (8001050 <HAL_I2C_MspInit+0xcc>)
 8000faa:	f043 0308 	orr.w	r3, r3, #8
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b27      	ldr	r3, [pc, #156]	@ (8001050 <HAL_I2C_MspInit+0xcc>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0308 	and.w	r3, r3, #8
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fbc:	23c0      	movs	r3, #192	@ 0xc0
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc0:	2312      	movs	r3, #18
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4821      	ldr	r0, [pc, #132]	@ (8001054 <HAL_I2C_MspInit+0xd0>)
 8000fd0:	f001 fe88 	bl	8002ce4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001050 <HAL_I2C_MspInit+0xcc>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001050 <HAL_I2C_MspInit+0xcc>)
 8000fda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fde:	61d3      	str	r3, [r2, #28]
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <HAL_I2C_MspInit+0xcc>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000fec:	e029      	b.n	8001042 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a19      	ldr	r2, [pc, #100]	@ (8001058 <HAL_I2C_MspInit+0xd4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d124      	bne.n	8001042 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <HAL_I2C_MspInit+0xcc>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a14      	ldr	r2, [pc, #80]	@ (8001050 <HAL_I2C_MspInit+0xcc>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <HAL_I2C_MspInit+0xcc>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001010:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001016:	2312      	movs	r3, #18
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	4619      	mov	r1, r3
 8001024:	480b      	ldr	r0, [pc, #44]	@ (8001054 <HAL_I2C_MspInit+0xd0>)
 8001026:	f001 fe5d 	bl	8002ce4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <HAL_I2C_MspInit+0xcc>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <HAL_I2C_MspInit+0xcc>)
 8001030:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <HAL_I2C_MspInit+0xcc>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	@ 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40005400 	.word	0x40005400
 8001050:	40021000 	.word	0x40021000
 8001054:	40010c00 	.word	0x40010c00
 8001058:	40005800 	.word	0x40005800

0800105c <Read16>:
uint16_t ina219_calibrationValue;
int16_t  ina219_currentDivider_mA;
int16_t  ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af04      	add	r7, sp, #16
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	b29a      	uxth	r2, r3
 8001070:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2302      	movs	r3, #2
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	2180      	movs	r1, #128	@ 0x80
 8001084:	f002 fd72 	bl	8003b6c <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 8001088:	7b3b      	ldrb	r3, [r7, #12]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	7b7b      	ldrb	r3, [r7, #13]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29b      	uxth	r3, r3
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af04      	add	r7, sp, #16
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
 80010ac:	4613      	mov	r3, r2
 80010ae:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80010b0:	883b      	ldrh	r3, [r7, #0]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80010ba:	883b      	ldrh	r3, [r7, #0]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2302      	movs	r3, #2
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	2180      	movs	r1, #128	@ 0x80
 80010dc:	f002 fc4c 	bl	8003978 <HAL_I2C_Mem_Write>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 80010f0:	2102      	movs	r1, #2
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffb2 	bl	800105c <Read16>
 80010f8:	4603      	mov	r3, r0
 80010fa:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	b29b      	uxth	r3, r3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	b29b      	uxth	r3, r3

}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001116:	2104      	movs	r1, #4
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff9f 	bl	800105c <Read16>
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001122:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <INA219_ReadShuntVolage>:

	return (result);// / ina219_currentDivider_mA );
}

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001138:	2101      	movs	r1, #1
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff8e 	bl	800105c <Read16>
 8001140:	4603      	mov	r3, r0
 8001142:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01);
 8001144:	89fb      	ldrh	r3, [r7, #14]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f95c 	bl	8000404 <__aeabi_i2d>
 800114c:	a308      	add	r3, pc, #32	@ (adr r3, 8001170 <INA219_ReadShuntVolage+0x40>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff f9c1 	bl	80004d8 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fc93 	bl	8000a88 <__aeabi_d2uiz>
 8001162:	4603      	mov	r3, r0
 8001164:	b29b      	uxth	r3, r3
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	47ae147b 	.word	0x47ae147b
 8001174:	3f847ae1 	.word	0x3f847ae1

08001178 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001180:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001184:	2100      	movs	r1, #0
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ff8a 	bl	80010a0 <Write16>
	HAL_Delay(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f000 fdf7 	bl	8001d80 <HAL_Delay>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	461a      	mov	r2, r3
 80011aa:	2105      	movs	r1, #5
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff77 	bl	80010a0 <Write16>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	461a      	mov	r2, r3
 80011ca:	2100      	movs	r1, #0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff67 	bl	80010a0 <Write16>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <INA219_setCalibration_32V_1A>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_32V_1A(INA219_t *ina219)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 80011e4:	f643 139f 	movw	r3, #14751	@ 0x399f
 80011e8:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 10240;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <INA219_setCalibration_32V_1A+0x40>)
 80011ec:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 80011f0:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 25;    // Current LSB = 40uA per bit (1000/40 = 25)
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <INA219_setCalibration_32V_1A+0x44>)
 80011f4:	2219      	movs	r2, #25
 80011f6:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0.8f; // Power LSB = 800uW per bit
 80011f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <INA219_setCalibration_32V_1A+0x48>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <INA219_setCalibration_32V_1A+0x40>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ffc8 	bl	800119a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	4619      	mov	r1, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffd3 	bl	80011ba <INA219_setConfig>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000030c 	.word	0x2000030c
 8001220:	2000030e 	.word	0x2000030e
 8001224:	20000310 	.word	0x20000310

08001228 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	4613      	mov	r3, r2
 8001234:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <INA219_Init+0x5c>)
 8001244:	2200      	movs	r2, #0
 8001246:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <INA219_Init+0x60>)
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	b29b      	uxth	r3, r3
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	b299      	uxth	r1, r3
 8001256:	2302      	movs	r3, #2
 8001258:	2203      	movs	r2, #3
 800125a:	68b8      	ldr	r0, [r7, #8]
 800125c:	f002 fefa 	bl	8004054 <HAL_I2C_IsDeviceReady>
 8001260:	4603      	mov	r3, r0
 8001262:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d107      	bne.n	800127a <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff ff84 	bl	8001178 <INA219_Reset>
		INA219_setCalibration_32V_1A(ina219);
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f7ff ffb3 	bl	80011dc <INA219_setCalibration_32V_1A>

		return 1;
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <INA219_Init+0x54>
	}

	else
	{
		return 0;
 800127a:	2300      	movs	r3, #0
	}
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000030e 	.word	0x2000030e
 8001288:	20000310 	.word	0x20000310

0800128c <HAL_ADC_ConvCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
uint8_t conv_complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	conv_complete=1;
 8001294:	4b03      	ldr	r3, [pc, #12]	@ (80012a4 <HAL_ADC_ConvCpltCallback+0x18>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20000312 	.word	0x20000312

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b090      	sub	sp, #64	@ 0x40
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f000 fd05 	bl	8001cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f9d5 	bl	8001660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f7ff fdb1 	bl	8000e1c <MX_GPIO_Init>
  MX_DMA_Init();
 80012ba:	f7ff fd91 	bl	8000de0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80012be:	f000 fc39 	bl	8001b34 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80012c2:	f7ff fc87 	bl	8000bd4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80012c6:	f000 fb8b 	bl	80019e0 <MX_TIM3_Init>
  MX_I2C1_Init();
 80012ca:	f7ff fdff 	bl	8000ecc <MX_I2C1_Init>
  MX_I2C2_Init();
 80012ce:	f7ff fe2b 	bl	8000f28 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
//timer
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80012d2:	210c      	movs	r1, #12
 80012d4:	48cc      	ldr	r0, [pc, #816]	@ (8001608 <main+0x360>)
 80012d6:	f004 fa05 	bl	80056e4 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, htim3.Init.Period/2);
 80012da:	4bcb      	ldr	r3, [pc, #812]	@ (8001608 <main+0x360>)
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	4bca      	ldr	r3, [pc, #808]	@ (8001608 <main+0x360>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	0852      	lsrs	r2, r2, #1
 80012e4:	641a      	str	r2, [r3, #64]	@ 0x40


  //bms

  uint16_t rawValues[2];
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 80012e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ea:	2202      	movs	r2, #2
 80012ec:	4619      	mov	r1, r3
 80012ee:	48c7      	ldr	r0, [pc, #796]	@ (800160c <main+0x364>)
 80012f0:	f000 fe42 	bl	8001f78 <HAL_ADC_Start_DMA>
  uint16_t cell_mas;
  uint16_t cell_menos;
  BQ29330_Device bq = { .hi2c = &hi2c1 };
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
 8001304:	615a      	str	r2, [r3, #20]
 8001306:	619a      	str	r2, [r3, #24]
 8001308:	4bc1      	ldr	r3, [pc, #772]	@ (8001610 <main+0x368>)
 800130a:	60bb      	str	r3, [r7, #8]
// INA219
  INA219_t ina219;
  uint16_t vbus, vshunt, current;
  //while(!INA219_Init(&ina219, &hi2c2, INA219_ADDRESS));

  INA219_Init(&ina219, &hi2c2, INA219_ADDRESS);
 800130c:	463b      	mov	r3, r7
 800130e:	2240      	movs	r2, #64	@ 0x40
 8001310:	49c0      	ldr	r1, [pc, #768]	@ (8001614 <main+0x36c>)
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff88 	bl	8001228 <INA219_Init>

  //INA219_setCalibration_32V_2A(&ina219);
  INA219_setCalibration_32V_1A(&ina219);
 8001318:	463b      	mov	r3, r7
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff5e 	bl	80011dc <INA219_setCalibration_32V_1A>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1) {
	uint32_t cell_mas_total = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t cell_menos_total = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	63bb      	str	r3, [r7, #56]	@ 0x38

	for(uint8_t i = 0; i < NUM_SAMPLES ; i++) {
 8001328:	2300      	movs	r3, #0
 800132a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800132e:	e018      	b.n	8001362 <main+0xba>
	    while(!conv_complete);
 8001330:	bf00      	nop
 8001332:	4bb9      	ldr	r3, [pc, #740]	@ (8001618 <main+0x370>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0fb      	beq.n	8001332 <main+0x8a>

	    cell_mas = (uint16_t) rawValues[0];
 800133a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800133c:	86bb      	strh	r3, [r7, #52]	@ 0x34
	    cell_menos = (uint16_t) rawValues[1];
 800133e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001340:	867b      	strh	r3, [r7, #50]	@ 0x32

	    cell_mas_total += cell_mas;
 8001342:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001344:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001346:	4413      	add	r3, r2
 8001348:	63fb      	str	r3, [r7, #60]	@ 0x3c
	    cell_menos_total += cell_menos;
 800134a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800134c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800134e:	4413      	add	r3, r2
 8001350:	63bb      	str	r3, [r7, #56]	@ 0x38

	    conv_complete = 0;
 8001352:	4bb1      	ldr	r3, [pc, #708]	@ (8001618 <main+0x370>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_SAMPLES ; i++) {
 8001358:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800135c:	3301      	adds	r3, #1
 800135e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001362:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001366:	2bc7      	cmp	r3, #199	@ 0xc7
 8001368:	d9e2      	bls.n	8001330 <main+0x88>
	}

	// Promedio final
	cell_mas = cell_mas_total / NUM_SAMPLES;
 800136a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800136c:	4aab      	ldr	r2, [pc, #684]	@ (800161c <main+0x374>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	099b      	lsrs	r3, r3, #6
 8001374:	86bb      	strh	r3, [r7, #52]	@ 0x34
	cell_menos = cell_menos_total / NUM_SAMPLES;
 8001376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001378:	4aa8      	ldr	r2, [pc, #672]	@ (800161c <main+0x374>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	099b      	lsrs	r3, r3, #6
 8001380:	867b      	strh	r3, [r7, #50]	@ 0x32
	cell_menos = cell_menos * 3.3 / 4.096 * 1.1;
 8001382:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f83d 	bl	8000404 <__aeabi_i2d>
 800138a:	a397      	add	r3, pc, #604	@ (adr r3, 80015e8 <main+0x340>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff f8a2 	bl	80004d8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	a394      	add	r3, pc, #592	@ (adr r3, 80015f0 <main+0x348>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff f9c3 	bl	800072c <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	a392      	add	r3, pc, #584	@ (adr r3, 80015f8 <main+0x350>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7ff f890 	bl	80004d8 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb62 	bl	8000a88 <__aeabi_d2uiz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	867b      	strh	r3, [r7, #50]	@ 0x32

	//escribo
	BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, 0x07);
 80013c8:	2107      	movs	r1, #7
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff fcea 	bl	8000da4 <BQ29330_WriteRegister>
	BQ29330_WriteRegister(BQ29330_STATE_CONTROL, 4);   // WDDIS = 1, all else = 0
 80013d0:	2104      	movs	r1, #4
 80013d2:	2002      	movs	r0, #2
 80013d4:	f7ff fce6 	bl	8000da4 <BQ29330_WriteRegister>
	BQ29330_WriteRegister(BQ29330_FUNCTION_CONTROL, 0x05); // BAT = 1 y vmem 1
 80013d8:	2105      	movs	r1, #5
 80013da:	2003      	movs	r0, #3
 80013dc:	f7ff fce2 	bl	8000da4 <BQ29330_WriteRegister>
	BQ29330_WriteRegister(BQ29330_CELL, 0x01); 			   //
 80013e0:	2101      	movs	r1, #1
 80013e2:	2004      	movs	r0, #4
 80013e4:	f7ff fcde 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLV, 0x1F);              // 50 mV 0x00
 80013e8:	211f      	movs	r1, #31
 80013ea:	2005      	movs	r0, #5
 80013ec:	f7ff fcda 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLD, 0x0F);              // 31 ms
 80013f0:	210f      	movs	r1, #15
 80013f2:	2006      	movs	r0, #6
 80013f4:	f7ff fcd6 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCC, 0x0F);              // 475 mV y 915 μs
 80013f8:	210f      	movs	r1, #15
 80013fa:	2007      	movs	r0, #7
 80013fc:	f7ff fcd2 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCD, 0x0F);              // idem for discharge
 8001400:	210f      	movs	r1, #15
 8001402:	2008      	movs	r0, #8
 8001404:	f7ff fcce 	bl	8000da4 <BQ29330_WriteRegister>
/*
*/
    //leo
	HAL_StatusTypeDef statusI2c = BQ29330_ReadFunctionControl(BQ29330_STATUS, &bq.BQ29330_status);
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	3310      	adds	r3, #16
 800140e:	4619      	mov	r1, r3
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fc9d 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001416:	4603      	mov	r3, r0
 8001418:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_OUTPUT_CONTROL, &bq.BQ29330_output_countrol);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	3311      	adds	r3, #17
 8001422:	4619      	mov	r1, r3
 8001424:	2001      	movs	r0, #1
 8001426:	f7ff fc93 	bl	8000d50 <BQ29330_ReadFunctionControl>
 800142a:	4603      	mov	r3, r0
 800142c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_STATE_CONTROL, &bq.BQ29330_state_countrol);
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	3312      	adds	r3, #18
 8001436:	4619      	mov	r1, r3
 8001438:	2002      	movs	r0, #2
 800143a:	f7ff fc89 	bl	8000d50 <BQ29330_ReadFunctionControl>
 800143e:	4603      	mov	r3, r0
 8001440:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_FUNCTION_CONTROL, &bq.BQ29330_function_control);
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	3313      	adds	r3, #19
 800144a:	4619      	mov	r1, r3
 800144c:	2003      	movs	r0, #3
 800144e:	f7ff fc7f 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_CELL, &bq.BQ29330_cell);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	3314      	adds	r3, #20
 800145e:	4619      	mov	r1, r3
 8001460:	2004      	movs	r0, #4
 8001462:	f7ff fc75 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_OLV, &bq.BQ29330_OLV);
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	3315      	adds	r3, #21
 8001472:	4619      	mov	r1, r3
 8001474:	2005      	movs	r0, #5
 8001476:	f7ff fc6b 	bl	8000d50 <BQ29330_ReadFunctionControl>
 800147a:	4603      	mov	r3, r0
 800147c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_OLD, &bq.BQ29330_OLD);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	3316      	adds	r3, #22
 8001486:	4619      	mov	r1, r3
 8001488:	2006      	movs	r0, #6
 800148a:	f7ff fc61 	bl	8000d50 <BQ29330_ReadFunctionControl>
 800148e:	4603      	mov	r3, r0
 8001490:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_SCC, &bq.BQ29330_SCC);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	3317      	adds	r3, #23
 800149a:	4619      	mov	r1, r3
 800149c:	2007      	movs	r0, #7
 800149e:	f7ff fc57 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_SCD, &bq.BQ29330_SCD);
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	3318      	adds	r3, #24
 80014ae:	4619      	mov	r1, r3
 80014b0:	2008      	movs	r0, #8
 80014b2:	f7ff fc4d 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	sendUsartMsg("statusI2c : ", statusI2c);
 80014bc:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4619      	mov	r1, r3
 80014c4:	4856      	ldr	r0, [pc, #344]	@ (8001620 <main+0x378>)
 80014c6:	f000 fbab 	bl	8001c20 <sendUsartMsg>

	sendUsartMsg("Estatus del bms : ", bq.BQ29330_status);
 80014ca:	7e3b      	ldrb	r3, [r7, #24]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4855      	ldr	r0, [pc, #340]	@ (8001624 <main+0x37c>)
 80014d0:	f000 fba6 	bl	8001c20 <sendUsartMsg>
	sendUsartMsg("OUTPUT_CONTROL : ", bq.BQ29330_output_countrol);
 80014d4:	7e7b      	ldrb	r3, [r7, #25]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4853      	ldr	r0, [pc, #332]	@ (8001628 <main+0x380>)
 80014da:	f000 fba1 	bl	8001c20 <sendUsartMsg>
	sendUsartMsg("STATE_CONTROL : ", bq.BQ29330_state_countrol);
 80014de:	7ebb      	ldrb	r3, [r7, #26]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4852      	ldr	r0, [pc, #328]	@ (800162c <main+0x384>)
 80014e4:	f000 fb9c 	bl	8001c20 <sendUsartMsg>
	sendUsartMsg("FUNCTION_CONTROL : ", bq.BQ29330_function_control);
 80014e8:	7efb      	ldrb	r3, [r7, #27]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4850      	ldr	r0, [pc, #320]	@ (8001630 <main+0x388>)
 80014ee:	f000 fb97 	bl	8001c20 <sendUsartMsg>
	sendUsartMsg("CELL : ", bq.BQ29330_cell);
 80014f2:	7f3b      	ldrb	r3, [r7, #28]
 80014f4:	4619      	mov	r1, r3
 80014f6:	484f      	ldr	r0, [pc, #316]	@ (8001634 <main+0x38c>)
 80014f8:	f000 fb92 	bl	8001c20 <sendUsartMsg>
	sendUsartMsg("OLV (Overload voltage threshold): ", bq.BQ29330_OLV);
 80014fc:	7f7b      	ldrb	r3, [r7, #29]
 80014fe:	4619      	mov	r1, r3
 8001500:	484d      	ldr	r0, [pc, #308]	@ (8001638 <main+0x390>)
 8001502:	f000 fb8d 	bl	8001c20 <sendUsartMsg>
	sendUsartMsg("OLD (Overload delay time): ", bq.BQ29330_OLD);
 8001506:	7fbb      	ldrb	r3, [r7, #30]
 8001508:	4619      	mov	r1, r3
 800150a:	484c      	ldr	r0, [pc, #304]	@ (800163c <main+0x394>)
 800150c:	f000 fb88 	bl	8001c20 <sendUsartMsg>
	sendUsartMsg("SCC (Short circuit in charge): ", bq.BQ29330_SCC);
 8001510:	7ffb      	ldrb	r3, [r7, #31]
 8001512:	4619      	mov	r1, r3
 8001514:	484a      	ldr	r0, [pc, #296]	@ (8001640 <main+0x398>)
 8001516:	f000 fb83 	bl	8001c20 <sendUsartMsg>
	sendUsartMsg("SCD (Short circuit in discharge): ", bq.BQ29330_SCD);
 800151a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800151e:	4619      	mov	r1, r3
 8001520:	4848      	ldr	r0, [pc, #288]	@ (8001644 <main+0x39c>)
 8001522:	f000 fb7d 	bl	8001c20 <sendUsartMsg>


	sendUsartMsg("\ncell_mas: ", cell_mas);
 8001526:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001528:	4619      	mov	r1, r3
 800152a:	4847      	ldr	r0, [pc, #284]	@ (8001648 <main+0x3a0>)
 800152c:	f000 fb78 	bl	8001c20 <sendUsartMsg>
	sendUsartMsg("\ncell_menos: ", cell_menos);
 8001530:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001532:	4619      	mov	r1, r3
 8001534:	4845      	ldr	r0, [pc, #276]	@ (800164c <main+0x3a4>)
 8001536:	f000 fb73 	bl	8001c20 <sendUsartMsg>

    if(bq.BQ29330_status != 0){
 800153a:	7e3b      	ldrb	r3, [r7, #24]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00a      	beq.n	8001556 <main+0x2ae>
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, 0x06);
 8001540:	2106      	movs	r1, #6
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff fc2e 	bl	8000da4 <BQ29330_WriteRegister>
        HAL_Delay(10);
 8001548:	200a      	movs	r0, #10
 800154a:	f000 fc19 	bl	8001d80 <HAL_Delay>
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, 0x07);
 800154e:	2107      	movs	r1, #7
 8001550:	2001      	movs	r0, #1
 8001552:	f7ff fc27 	bl	8000da4 <BQ29330_WriteRegister>



    //INA219_setPowerMode(&ina219, INA219_CONFIG_MODE_ADCOFF);

    vbus = INA219_ReadBusVoltage(&ina219);
 8001556:	463b      	mov	r3, r7
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fdc5 	bl	80010e8 <INA219_ReadBusVoltage>
 800155e:	4603      	mov	r3, r0
 8001560:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    vshunt = INA219_ReadShuntVolage(&ina219);
 8001562:	463b      	mov	r3, r7
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fde3 	bl	8001130 <INA219_ReadShuntVolage>
 800156a:	4603      	mov	r3, r0
 800156c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    current = INA219_ReadCurrent_raw(&ina219) ;
 800156e:	463b      	mov	r3, r7
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fdcc 	bl	800110e <INA219_ReadCurrent_raw>
 8001576:	4603      	mov	r3, r0
 8001578:	857b      	strh	r3, [r7, #42]	@ 0x2a
	sendUsartMsg("vbus", vbus);
 800157a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800157c:	4619      	mov	r1, r3
 800157e:	4834      	ldr	r0, [pc, #208]	@ (8001650 <main+0x3a8>)
 8001580:	f000 fb4e 	bl	8001c20 <sendUsartMsg>
	sendUsartMsg("shunt", vshunt * 4);
 8001584:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	b29b      	uxth	r3, r3
 800158a:	4619      	mov	r1, r3
 800158c:	4831      	ldr	r0, [pc, #196]	@ (8001654 <main+0x3ac>)
 800158e:	f000 fb47 	bl	8001c20 <sendUsartMsg>
	sendUsartMsg("current", current * 0.95);
 8001592:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ff35 	bl	8000404 <__aeabi_i2d>
 800159a:	a319      	add	r3, pc, #100	@ (adr r3, 8001600 <main+0x358>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7fe ff9a 	bl	80004d8 <__aeabi_dmul>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fa6c 	bl	8000a88 <__aeabi_d2uiz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4619      	mov	r1, r3
 80015b6:	4828      	ldr	r0, [pc, #160]	@ (8001658 <main+0x3b0>)
 80015b8:	f000 fb32 	bl	8001c20 <sendUsartMsg>




//		Para prender y apagar el led que viene en la bluepil
	HAL_GPIO_WritePin(GPIOC, ACTIVADOR_PIN, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015c2:	4826      	ldr	r0, [pc, #152]	@ (800165c <main+0x3b4>)
 80015c4:	f001 fd12 	bl	8002fec <HAL_GPIO_WritePin>
	HAL_Delay(1000); // 1 segundo de delay
 80015c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015cc:	f000 fbd8 	bl	8001d80 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, ACTIVADOR_PIN, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015d6:	4821      	ldr	r0, [pc, #132]	@ (800165c <main+0x3b4>)
 80015d8:	f001 fd08 	bl	8002fec <HAL_GPIO_WritePin>
	HAL_Delay(500); // 1 segundo de delay
 80015dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015e0:	f000 fbce 	bl	8001d80 <HAL_Delay>
while (1) {
 80015e4:	e69c      	b.n	8001320 <main+0x78>
 80015e6:	bf00      	nop
 80015e8:	66666666 	.word	0x66666666
 80015ec:	400a6666 	.word	0x400a6666
 80015f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015f4:	4010624d 	.word	0x4010624d
 80015f8:	9999999a 	.word	0x9999999a
 80015fc:	3ff19999 	.word	0x3ff19999
 8001600:	66666666 	.word	0x66666666
 8001604:	3fee6666 	.word	0x3fee6666
 8001608:	20000318 	.word	0x20000318
 800160c:	200001f0 	.word	0x200001f0
 8001610:	20000264 	.word	0x20000264
 8001614:	200002b8 	.word	0x200002b8
 8001618:	20000312 	.word	0x20000312
 800161c:	51eb851f 	.word	0x51eb851f
 8001620:	0800aa18 	.word	0x0800aa18
 8001624:	0800aa28 	.word	0x0800aa28
 8001628:	0800aa3c 	.word	0x0800aa3c
 800162c:	0800aa50 	.word	0x0800aa50
 8001630:	0800aa64 	.word	0x0800aa64
 8001634:	0800aa78 	.word	0x0800aa78
 8001638:	0800aa80 	.word	0x0800aa80
 800163c:	0800aaa4 	.word	0x0800aaa4
 8001640:	0800aac0 	.word	0x0800aac0
 8001644:	0800aae0 	.word	0x0800aae0
 8001648:	0800ab04 	.word	0x0800ab04
 800164c:	0800ab10 	.word	0x0800ab10
 8001650:	0800ab20 	.word	0x0800ab20
 8001654:	0800ab28 	.word	0x0800ab28
 8001658:	0800ab30 	.word	0x0800ab30
 800165c:	40011000 	.word	0x40011000

08001660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b094      	sub	sp, #80	@ 0x50
 8001664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001666:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800166a:	2228      	movs	r2, #40	@ 0x28
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f006 fc48 	bl	8007f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001690:	2301      	movs	r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001694:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169e:	2301      	movs	r3, #1
 80016a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a2:	2302      	movs	r3, #2
 80016a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80016ac:	2300      	movs	r3, #0
 80016ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 faff 	bl	8004cb8 <HAL_RCC_OscConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80016c0:	f000 f829 	bl	8001716 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c4:	230f      	movs	r3, #15
 80016c6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80016d6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fd6a 	bl	80051bc <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016ee:	f000 f812 	bl	8001716 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016f2:	2302      	movs	r3, #2
 80016f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80016f6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016fa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 feea 	bl	80054d8 <HAL_RCCEx_PeriphCLKConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800170a:	f000 f804 	bl	8001716 <Error_Handler>
  }
}
 800170e:	bf00      	nop
 8001710:	3750      	adds	r7, #80	@ 0x50
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171a:	b672      	cpsid	i
}
 800171c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800171e:	bf00      	nop
 8001720:	e7fd      	b.n	800171e <Error_Handler+0x8>
	...

08001724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800172a:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <HAL_MspInit+0xa4>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	4a26      	ldr	r2, [pc, #152]	@ (80017c8 <HAL_MspInit+0xa4>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6193      	str	r3, [r2, #24]
 8001736:	4b24      	ldr	r3, [pc, #144]	@ (80017c8 <HAL_MspInit+0xa4>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b21      	ldr	r3, [pc, #132]	@ (80017c8 <HAL_MspInit+0xa4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a20      	ldr	r2, [pc, #128]	@ (80017c8 <HAL_MspInit+0xa4>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174c:	61d3      	str	r3, [r2, #28]
 800174e:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <HAL_MspInit+0xa4>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 2, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2102      	movs	r1, #2
 800175e:	f06f 000b 	mvn.w	r0, #11
 8001762:	f001 f89a 	bl	800289a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2102      	movs	r1, #2
 800176a:	f06f 000a 	mvn.w	r0, #10
 800176e:	f001 f894 	bl	800289a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 2, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2102      	movs	r1, #2
 8001776:	f06f 0009 	mvn.w	r0, #9
 800177a:	f001 f88e 	bl	800289a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2102      	movs	r1, #2
 8001782:	f06f 0004 	mvn.w	r0, #4
 8001786:	f001 f888 	bl	800289a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2102      	movs	r1, #2
 800178e:	f06f 0003 	mvn.w	r0, #3
 8001792:	f001 f882 	bl	800289a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2102      	movs	r1, #2
 800179a:	f06f 0001 	mvn.w	r0, #1
 800179e:	f001 f87c 	bl	800289a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017a2:	4b0a      	ldr	r3, [pc, #40]	@ (80017cc <HAL_MspInit+0xa8>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <HAL_MspInit+0xa8>)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010000 	.word	0x40010000

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <NMI_Handler+0x4>

080017d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <HardFault_Handler+0x4>

080017e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <MemManage_Handler+0x4>

080017e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001820:	f000 fa92 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <DMA1_Channel1_IRQHandler+0x10>)
 800182e:	f001 f925 	bl	8002a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000220 	.word	0x20000220

0800183c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <ADC1_2_IRQHandler+0x10>)
 8001842:	f000 fc77 	bl	8002134 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200001f0 	.word	0x200001f0

08001850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return 1;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <_kill>:

int _kill(int pid, int sig)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001868:	f006 fb58 	bl	8007f1c <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	2216      	movs	r2, #22
 8001870:	601a      	str	r2, [r3, #0]
  return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_exit>:

void _exit (int status)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001886:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffe7 	bl	800185e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <_exit+0x12>

08001894 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	e00a      	b.n	80018bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a6:	f3af 8000 	nop.w
 80018aa:	4601      	mov	r1, r0
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	60ba      	str	r2, [r7, #8]
 80018b2:	b2ca      	uxtb	r2, r1
 80018b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbf0      	blt.n	80018a6 <_read+0x12>
  }

  return len;
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	e009      	b.n	80018f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	60ba      	str	r2, [r7, #8]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dbf1      	blt.n	80018e0 <_write+0x12>
  }
  return len;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_close>:

int _close(int file)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800192c:	605a      	str	r2, [r3, #4]
  return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <_isatty>:

int _isatty(int file)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800194e:	b480      	push	{r7}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
	...

08001968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001970:	4a14      	ldr	r2, [pc, #80]	@ (80019c4 <_sbrk+0x5c>)
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <_sbrk+0x60>)
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800197c:	4b13      	ldr	r3, [pc, #76]	@ (80019cc <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <_sbrk+0x64>)
 8001986:	4a12      	ldr	r2, [pc, #72]	@ (80019d0 <_sbrk+0x68>)
 8001988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198a:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	429a      	cmp	r2, r3
 8001996:	d207      	bcs.n	80019a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001998:	f006 fac0 	bl	8007f1c <__errno>
 800199c:	4603      	mov	r3, r0
 800199e:	220c      	movs	r2, #12
 80019a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019a6:	e009      	b.n	80019bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a8:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ae:	4b07      	ldr	r3, [pc, #28]	@ (80019cc <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	4a05      	ldr	r2, [pc, #20]	@ (80019cc <_sbrk+0x64>)
 80019b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20005000 	.word	0x20005000
 80019c8:	00000400 	.word	0x00000400
 80019cc:	20000314 	.word	0x20000314
 80019d0:	200004f8 	.word	0x200004f8

080019d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	@ 0x28
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	615a      	str	r2, [r3, #20]
 8001a00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a02:	4b22      	ldr	r3, [pc, #136]	@ (8001a8c <MX_TIM3_Init+0xac>)
 8001a04:	4a22      	ldr	r2, [pc, #136]	@ (8001a90 <MX_TIM3_Init+0xb0>)
 8001a06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a08:	4b20      	ldr	r3, [pc, #128]	@ (8001a8c <MX_TIM3_Init+0xac>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <MX_TIM3_Init+0xac>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 490;
 8001a14:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <MX_TIM3_Init+0xac>)
 8001a16:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8001a1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <MX_TIM3_Init+0xac>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <MX_TIM3_Init+0xac>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a28:	4818      	ldr	r0, [pc, #96]	@ (8001a8c <MX_TIM3_Init+0xac>)
 8001a2a:	f003 fe0b 	bl	8005644 <HAL_TIM_PWM_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a34:	f7ff fe6f 	bl	8001716 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a40:	f107 0320 	add.w	r3, r7, #32
 8001a44:	4619      	mov	r1, r3
 8001a46:	4811      	ldr	r0, [pc, #68]	@ (8001a8c <MX_TIM3_Init+0xac>)
 8001a48:	f004 f9ca 	bl	8005de0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a52:	f7ff fe60 	bl	8001716 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a56:	2360      	movs	r3, #96	@ 0x60
 8001a58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	220c      	movs	r2, #12
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4807      	ldr	r0, [pc, #28]	@ (8001a8c <MX_TIM3_Init+0xac>)
 8001a6e:	f003 fedb 	bl	8005828 <HAL_TIM_PWM_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001a78:	f7ff fe4d 	bl	8001716 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a7c:	4803      	ldr	r0, [pc, #12]	@ (8001a8c <MX_TIM3_Init+0xac>)
 8001a7e:	f000 f827 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8001a82:	bf00      	nop
 8001a84:	3728      	adds	r7, #40	@ 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000318 	.word	0x20000318
 8001a90:	40000400 	.word	0x40000400

08001a94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <HAL_TIM_PWM_MspInit+0x34>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d10b      	bne.n	8001abe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_TIM_PWM_MspInit+0x38>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a08      	ldr	r2, [pc, #32]	@ (8001acc <HAL_TIM_PWM_MspInit+0x38>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_TIM_PWM_MspInit+0x38>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a0f      	ldr	r2, [pc, #60]	@ (8001b28 <HAL_TIM_MspPostInit+0x58>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d117      	bne.n	8001b20 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_TIM_MspPostInit+0x5c>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b2c <HAL_TIM_MspPostInit+0x5c>)
 8001af6:	f043 0308 	orr.w	r3, r3, #8
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <HAL_TIM_MspPostInit+0x5c>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2302      	movs	r3, #2
 8001b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <HAL_TIM_MspPostInit+0x60>)
 8001b1c:	f001 f8e2 	bl	8002ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b20:	bf00      	nop
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010c00 	.word	0x40010c00

08001b34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <MX_USART1_UART_Init+0x50>)
 8001b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b58:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_USART1_UART_Init+0x4c>)
 8001b6c:	f004 f996 	bl	8005e9c <HAL_UART_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b76:	f7ff fdce 	bl	8001716 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000360 	.word	0x20000360
 8001b84:	40013800 	.word	0x40013800

08001b88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c14 <HAL_UART_MspInit+0x8c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d131      	bne.n	8001c0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HAL_UART_MspInit+0x90>)
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	4a1a      	ldr	r2, [pc, #104]	@ (8001c18 <HAL_UART_MspInit+0x90>)
 8001bae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb2:	6193      	str	r3, [r2, #24]
 8001bb4:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <HAL_UART_MspInit+0x90>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc0:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <HAL_UART_MspInit+0x90>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a14      	ldr	r2, [pc, #80]	@ (8001c18 <HAL_UART_MspInit+0x90>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_UART_MspInit+0x90>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	4619      	mov	r1, r3
 8001bec:	480b      	ldr	r0, [pc, #44]	@ (8001c1c <HAL_UART_MspInit+0x94>)
 8001bee:	f001 f879 	bl	8002ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	4619      	mov	r1, r3
 8001c06:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <HAL_UART_MspInit+0x94>)
 8001c08:	f001 f86c 	bl	8002ce4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010800 	.word	0x40010800

08001c20 <sendUsartMsg>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void sendUsartMsg(const char* label, uint16_t value) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b094      	sub	sp, #80	@ 0x50
 8001c24:	af02      	add	r7, sp, #8
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
    char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "%s %u \n", label, value);
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	f107 0008 	add.w	r0, r7, #8
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a0c      	ldr	r2, [pc, #48]	@ (8001c68 <sendUsartMsg+0x48>)
 8001c38:	2140      	movs	r1, #64	@ 0x40
 8001c3a:	f005 f9bf 	bl	8006fbc <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fa84 	bl	8000150 <strlen>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	f107 0108 	add.w	r1, r7, #8
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c54:	4805      	ldr	r0, [pc, #20]	@ (8001c6c <sendUsartMsg+0x4c>)
 8001c56:	f004 f971 	bl	8005f3c <HAL_UART_Transmit>
    HAL_Delay(10);
 8001c5a:	200a      	movs	r0, #10
 8001c5c:	f000 f890 	bl	8001d80 <HAL_Delay>
}
 8001c60:	bf00      	nop
 8001c62:	3748      	adds	r7, #72	@ 0x48
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	0800ab38 	.word	0x0800ab38
 8001c6c:	20000360 	.word	0x20000360

08001c70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c70:	f7ff feb0 	bl	80019d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c74:	480b      	ldr	r0, [pc, #44]	@ (8001ca4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c76:	490c      	ldr	r1, [pc, #48]	@ (8001ca8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c78:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c7c:	e002      	b.n	8001c84 <LoopCopyDataInit>

08001c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c82:	3304      	adds	r3, #4

08001c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c88:	d3f9      	bcc.n	8001c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8a:	4a09      	ldr	r2, [pc, #36]	@ (8001cb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c8c:	4c09      	ldr	r4, [pc, #36]	@ (8001cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c90:	e001      	b.n	8001c96 <LoopFillZerobss>

08001c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c94:	3204      	adds	r2, #4

08001c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c98:	d3fb      	bcc.n	8001c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c9a:	f006 f945 	bl	8007f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c9e:	f7ff fb03 	bl	80012a8 <main>
  bx lr
 8001ca2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001cac:	0800afa4 	.word	0x0800afa4
  ldr r2, =_sbss
 8001cb0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001cb4:	200004f8 	.word	0x200004f8

08001cb8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <CAN1_RX1_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_Init+0x28>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <HAL_Init+0x28>)
 8001cc6:	f043 0310 	orr.w	r3, r3, #16
 8001cca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f000 fdd9 	bl	8002884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	200f      	movs	r0, #15
 8001cd4:	f000 f808 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fd24 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40022000 	.word	0x40022000

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 fdf1 	bl	80028ee <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d24:	f000 fdb9 	bl	800289a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	@ (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000008 	.word	0x20000008
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <HAL_IncTick+0x1c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <HAL_IncTick+0x20>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a03      	ldr	r2, [pc, #12]	@ (8001d68 <HAL_IncTick+0x20>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	20000008 	.word	0x20000008
 8001d68:	200003a8 	.word	0x200003a8

08001d6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b02      	ldr	r3, [pc, #8]	@ (8001d7c <HAL_GetTick+0x10>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	200003a8 	.word	0x200003a8

08001d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d88:	f7ff fff0 	bl	8001d6c <HAL_GetTick>
 8001d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d98:	d005      	beq.n	8001da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_Delay+0x44>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001da6:	bf00      	nop
 8001da8:	f7ff ffe0 	bl	8001d6c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d8f7      	bhi.n	8001da8 <HAL_Delay+0x28>
  {
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0be      	b.n	8001f68 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7fe ff32 	bl	8000c70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fbbd 	bl	800258c <ADC_ConversionStop_Disable>
 8001e12:	4603      	mov	r3, r0
 8001e14:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 8099 	bne.w	8001f56 <HAL_ADC_Init+0x18e>
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 8095 	bne.w	8001f56 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e34:	f023 0302 	bic.w	r3, r3, #2
 8001e38:	f043 0202 	orr.w	r2, r3, #2
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e48:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7b1b      	ldrb	r3, [r3, #12]
 8001e4e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e50:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e60:	d003      	beq.n	8001e6a <HAL_ADC_Init+0xa2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d102      	bne.n	8001e70 <HAL_ADC_Init+0xa8>
 8001e6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e6e:	e000      	b.n	8001e72 <HAL_ADC_Init+0xaa>
 8001e70:	2300      	movs	r3, #0
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7d1b      	ldrb	r3, [r3, #20]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d119      	bne.n	8001eb4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7b1b      	ldrb	r3, [r3, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	035a      	lsls	r2, r3, #13
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e00b      	b.n	8001eb4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea0:	f043 0220 	orr.w	r2, r3, #32
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <HAL_ADC_Init+0x1a8>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ee4:	d003      	beq.n	8001eee <HAL_ADC_Init+0x126>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d104      	bne.n	8001ef8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	051b      	lsls	r3, r3, #20
 8001ef6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	4b18      	ldr	r3, [pc, #96]	@ (8001f74 <HAL_ADC_Init+0x1ac>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d10b      	bne.n	8001f34 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f26:	f023 0303 	bic.w	r3, r3, #3
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f32:	e018      	b.n	8001f66 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	f023 0312 	bic.w	r3, r3, #18
 8001f3c:	f043 0210 	orr.w	r2, r3, #16
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f54:	e007      	b.n	8001f66 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	f043 0210 	orr.w	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	ffe1f7fd 	.word	0xffe1f7fd
 8001f74:	ff1f0efe 	.word	0xff1f0efe

08001f78 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a64      	ldr	r2, [pc, #400]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_ADC_Start_DMA+0x24>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a63      	ldr	r2, [pc, #396]	@ (8002124 <HAL_ADC_Start_DMA+0x1ac>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d106      	bne.n	8001faa <HAL_ADC_Start_DMA+0x32>
 8001f9c:	4b60      	ldr	r3, [pc, #384]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f040 80b3 	bne.w	8002110 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_Start_DMA+0x40>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e0ae      	b.n	8002116 <HAL_ADC_Start_DMA+0x19e>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 fa89 	bl	80024d8 <ADC_Enable>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f040 809a 	bne.w	8002106 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a4e      	ldr	r2, [pc, #312]	@ (8002124 <HAL_ADC_Start_DMA+0x1ac>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d105      	bne.n	8001ffc <HAL_ADC_Start_DMA+0x84>
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d115      	bne.n	8002028 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002000:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002012:	2b00      	cmp	r3, #0
 8002014:	d026      	beq.n	8002064 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800201e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002026:	e01d      	b.n	8002064 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a39      	ldr	r2, [pc, #228]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_ADC_Start_DMA+0xd0>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a38      	ldr	r2, [pc, #224]	@ (8002124 <HAL_ADC_Start_DMA+0x1ac>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d10d      	bne.n	8002064 <HAL_ADC_Start_DMA+0xec>
 8002048:	4b35      	ldr	r3, [pc, #212]	@ (8002120 <HAL_ADC_Start_DMA+0x1a8>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800205c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	f023 0206 	bic.w	r2, r3, #6
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800207c:	e002      	b.n	8002084 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a25      	ldr	r2, [pc, #148]	@ (8002128 <HAL_ADC_Start_DMA+0x1b0>)
 8002092:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4a24      	ldr	r2, [pc, #144]	@ (800212c <HAL_ADC_Start_DMA+0x1b4>)
 800209a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a23      	ldr	r2, [pc, #140]	@ (8002130 <HAL_ADC_Start_DMA+0x1b8>)
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0202 	mvn.w	r2, #2
 80020ac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020bc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a18      	ldr	r0, [r3, #32]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	334c      	adds	r3, #76	@ 0x4c
 80020c8:	4619      	mov	r1, r3
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f000 fc75 	bl	80029bc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80020dc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020e0:	d108      	bne.n	80020f4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80020f0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80020f2:	e00f      	b.n	8002114 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002102:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002104:	e006      	b.n	8002114 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800210e:	e001      	b.n	8002114 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002114:	7dfb      	ldrb	r3, [r7, #23]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40012400 	.word	0x40012400
 8002124:	40012800 	.word	0x40012800
 8002128:	0800260f 	.word	0x0800260f
 800212c:	0800268b 	.word	0x0800268b
 8002130:	080026a7 	.word	0x080026a7

08002134 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d03e      	beq.n	80021d4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d039      	beq.n	80021d4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002170:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002182:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002186:	d11d      	bne.n	80021c4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800218c:	2b00      	cmp	r3, #0
 800218e:	d119      	bne.n	80021c4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0220 	bic.w	r2, r2, #32
 800219e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff f861 	bl	800128c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f06f 0212 	mvn.w	r2, #18
 80021d2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d04d      	beq.n	800227a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d048      	beq.n	800227a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d105      	bne.n	8002200 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800220a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800220e:	d012      	beq.n	8002236 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800221a:	2b00      	cmp	r3, #0
 800221c:	d125      	bne.n	800226a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002228:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800222c:	d11d      	bne.n	800226a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	d119      	bne.n	800226a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002244:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fa35 	bl	80026da <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 020c 	mvn.w	r2, #12
 8002278:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d012      	beq.n	80022aa <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00d      	beq.n	80022aa <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002292:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f812 	bl	80022c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0201 	mvn.w	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x20>
 8002304:	2302      	movs	r3, #2
 8002306:	e0dc      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x1da>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b06      	cmp	r3, #6
 8002316:	d81c      	bhi.n	8002352 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b05      	subs	r3, #5
 800232a:	221f      	movs	r2, #31
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	4019      	ands	r1, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	3b05      	subs	r3, #5
 8002344:	fa00 f203 	lsl.w	r2, r0, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002350:	e03c      	b.n	80023cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d81c      	bhi.n	8002394 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b23      	subs	r3, #35	@ 0x23
 800236c:	221f      	movs	r2, #31
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	4019      	ands	r1, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	3b23      	subs	r3, #35	@ 0x23
 8002386:	fa00 f203 	lsl.w	r2, r0, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	631a      	str	r2, [r3, #48]	@ 0x30
 8002392:	e01b      	b.n	80023cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	3b41      	subs	r3, #65	@ 0x41
 80023a6:	221f      	movs	r2, #31
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4019      	ands	r1, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	3b41      	subs	r3, #65	@ 0x41
 80023c0:	fa00 f203 	lsl.w	r2, r0, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	d91c      	bls.n	800240e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68d9      	ldr	r1, [r3, #12]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	3b1e      	subs	r3, #30
 80023e6:	2207      	movs	r2, #7
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	4019      	ands	r1, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6898      	ldr	r0, [r3, #8]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	3b1e      	subs	r3, #30
 8002400:	fa00 f203 	lsl.w	r2, r0, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	60da      	str	r2, [r3, #12]
 800240c:	e019      	b.n	8002442 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6919      	ldr	r1, [r3, #16]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	2207      	movs	r2, #7
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	4019      	ands	r1, r3
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6898      	ldr	r0, [r3, #8]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	fa00 f203 	lsl.w	r2, r0, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b10      	cmp	r3, #16
 8002448:	d003      	beq.n	8002452 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800244e:	2b11      	cmp	r3, #17
 8002450:	d132      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1d      	ldr	r2, [pc, #116]	@ (80024cc <HAL_ADC_ConfigChannel+0x1e4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d125      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d126      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002478:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b10      	cmp	r3, #16
 8002480:	d11a      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002482:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a13      	ldr	r2, [pc, #76]	@ (80024d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002488:	fba2 2303 	umull	r2, r3, r2, r3
 800248c:	0c9a      	lsrs	r2, r3, #18
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002498:	e002      	b.n	80024a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	3b01      	subs	r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f9      	bne.n	800249a <HAL_ADC_ConfigChannel+0x1b2>
 80024a6:	e007      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	f043 0220 	orr.w	r2, r3, #32
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40012400 	.word	0x40012400
 80024d0:	20000000 	.word	0x20000000
 80024d4:	431bde83 	.word	0x431bde83

080024d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d040      	beq.n	8002578 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002506:	4b1f      	ldr	r3, [pc, #124]	@ (8002584 <ADC_Enable+0xac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1f      	ldr	r2, [pc, #124]	@ (8002588 <ADC_Enable+0xb0>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	0c9b      	lsrs	r3, r3, #18
 8002512:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002514:	e002      	b.n	800251c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	3b01      	subs	r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f9      	bne.n	8002516 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002522:	f7ff fc23 	bl	8001d6c <HAL_GetTick>
 8002526:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002528:	e01f      	b.n	800256a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800252a:	f7ff fc1f 	bl	8001d6c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d918      	bls.n	800256a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d011      	beq.n	800256a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254a:	f043 0210 	orr.w	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e007      	b.n	800257a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	d1d8      	bne.n	800252a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20000000 	.word	0x20000000
 8002588:	431bde83 	.word	0x431bde83

0800258c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d12e      	bne.n	8002604 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025b6:	f7ff fbd9 	bl	8001d6c <HAL_GetTick>
 80025ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025bc:	e01b      	b.n	80025f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025be:	f7ff fbd5 	bl	8001d6c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d914      	bls.n	80025f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d10d      	bne.n	80025f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e007      	b.n	8002606 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d0dc      	beq.n	80025be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002624:	2b00      	cmp	r3, #0
 8002626:	d127      	bne.n	8002678 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800263e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002642:	d115      	bne.n	8002670 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002648:	2b00      	cmp	r3, #0
 800264a:	d111      	bne.n	8002670 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7fe fe0b 	bl	800128c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002676:	e004      	b.n	8002682 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	4798      	blx	r3
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7ff fe0a 	bl	80022b2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c4:	f043 0204 	orr.w	r2, r3, #4
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f7ff fe02 	bl	80022d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	@ (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	db0b      	blt.n	800277a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4906      	ldr	r1, [pc, #24]	@ (8002784 <__NVIC_EnableIRQ+0x34>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2001      	movs	r0, #1
 8002772:	fa00 f202 	lsl.w	r2, r0, r2
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	e000e100 	.word	0xe000e100

08002788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	6039      	str	r1, [r7, #0]
 8002792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db0a      	blt.n	80027b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	490c      	ldr	r1, [pc, #48]	@ (80027d4 <__NVIC_SetPriority+0x4c>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b0:	e00a      	b.n	80027c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	4908      	ldr	r1, [pc, #32]	@ (80027d8 <__NVIC_SetPriority+0x50>)
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3b04      	subs	r3, #4
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	440b      	add	r3, r1
 80027c6:	761a      	strb	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027dc:	b480      	push	{r7}
 80027de:	b089      	sub	sp, #36	@ 0x24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f1c3 0307 	rsb	r3, r3, #7
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	bf28      	it	cs
 80027fa:	2304      	movcs	r3, #4
 80027fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3304      	adds	r3, #4
 8002802:	2b06      	cmp	r3, #6
 8002804:	d902      	bls.n	800280c <NVIC_EncodePriority+0x30>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3b03      	subs	r3, #3
 800280a:	e000      	b.n	800280e <NVIC_EncodePriority+0x32>
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002810:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43da      	mvns	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	401a      	ands	r2, r3
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002824:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	43d9      	mvns	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	4313      	orrs	r3, r2
         );
}
 8002836:	4618      	mov	r0, r3
 8002838:	3724      	adds	r7, #36	@ 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002850:	d301      	bcc.n	8002856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002852:	2301      	movs	r3, #1
 8002854:	e00f      	b.n	8002876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002856:	4a0a      	ldr	r2, [pc, #40]	@ (8002880 <SysTick_Config+0x40>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285e:	210f      	movs	r1, #15
 8002860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002864:	f7ff ff90 	bl	8002788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002868:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <SysTick_Config+0x40>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286e:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <SysTick_Config+0x40>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	e000e010 	.word	0xe000e010

08002884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff2d 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ac:	f7ff ff42 	bl	8002734 <__NVIC_GetPriorityGrouping>
 80028b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	6978      	ldr	r0, [r7, #20]
 80028b8:	f7ff ff90 	bl	80027dc <NVIC_EncodePriority>
 80028bc:	4602      	mov	r2, r0
 80028be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff5f 	bl	8002788 <__NVIC_SetPriority>
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff ff35 	bl	8002750 <__NVIC_EnableIRQ>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ffa2 	bl	8002840 <SysTick_Config>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e043      	b.n	80029a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	4b22      	ldr	r3, [pc, #136]	@ (80029b0 <HAL_DMA_Init+0xa8>)
 8002926:	4413      	add	r3, r2
 8002928:	4a22      	ldr	r2, [pc, #136]	@ (80029b4 <HAL_DMA_Init+0xac>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	091b      	lsrs	r3, r3, #4
 8002930:	009a      	lsls	r2, r3, #2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a1f      	ldr	r2, [pc, #124]	@ (80029b8 <HAL_DMA_Init+0xb0>)
 800293a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002952:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002956:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	bffdfff8 	.word	0xbffdfff8
 80029b4:	cccccccd 	.word	0xcccccccd
 80029b8:	40020000 	.word	0x40020000

080029bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_DMA_Start_IT+0x20>
 80029d8:	2302      	movs	r3, #2
 80029da:	e04b      	b.n	8002a74 <HAL_DMA_Start_IT+0xb8>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d13a      	bne.n	8002a66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f937 	bl	8002c88 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d008      	beq.n	8002a34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 020e 	orr.w	r2, r2, #14
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e00f      	b.n	8002a54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0204 	bic.w	r2, r2, #4
 8002a42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 020a 	orr.w	r2, r2, #10
 8002a52:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e005      	b.n	8002a72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	2204      	movs	r2, #4
 8002a9a:	409a      	lsls	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d04f      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc8>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d04a      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0204 	bic.w	r2, r2, #4
 8002aca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a66      	ldr	r2, [pc, #408]	@ (8002c6c <HAL_DMA_IRQHandler+0x1f0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d029      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xae>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a65      	ldr	r2, [pc, #404]	@ (8002c70 <HAL_DMA_IRQHandler+0x1f4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d022      	beq.n	8002b26 <HAL_DMA_IRQHandler+0xaa>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a63      	ldr	r2, [pc, #396]	@ (8002c74 <HAL_DMA_IRQHandler+0x1f8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01a      	beq.n	8002b20 <HAL_DMA_IRQHandler+0xa4>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a62      	ldr	r2, [pc, #392]	@ (8002c78 <HAL_DMA_IRQHandler+0x1fc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d012      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x9e>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a60      	ldr	r2, [pc, #384]	@ (8002c7c <HAL_DMA_IRQHandler+0x200>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00a      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x98>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5f      	ldr	r2, [pc, #380]	@ (8002c80 <HAL_DMA_IRQHandler+0x204>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d102      	bne.n	8002b0e <HAL_DMA_IRQHandler+0x92>
 8002b08:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b0c:	e00e      	b.n	8002b2c <HAL_DMA_IRQHandler+0xb0>
 8002b0e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b12:	e00b      	b.n	8002b2c <HAL_DMA_IRQHandler+0xb0>
 8002b14:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b18:	e008      	b.n	8002b2c <HAL_DMA_IRQHandler+0xb0>
 8002b1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b1e:	e005      	b.n	8002b2c <HAL_DMA_IRQHandler+0xb0>
 8002b20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b24:	e002      	b.n	8002b2c <HAL_DMA_IRQHandler+0xb0>
 8002b26:	2340      	movs	r3, #64	@ 0x40
 8002b28:	e000      	b.n	8002b2c <HAL_DMA_IRQHandler+0xb0>
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	4a55      	ldr	r2, [pc, #340]	@ (8002c84 <HAL_DMA_IRQHandler+0x208>)
 8002b2e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8094 	beq.w	8002c62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b42:	e08e      	b.n	8002c62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	2202      	movs	r2, #2
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d056      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x186>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d051      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 020a 	bic.w	r2, r2, #10
 8002b7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a38      	ldr	r2, [pc, #224]	@ (8002c6c <HAL_DMA_IRQHandler+0x1f0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d029      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x166>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a37      	ldr	r2, [pc, #220]	@ (8002c70 <HAL_DMA_IRQHandler+0x1f4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d022      	beq.n	8002bde <HAL_DMA_IRQHandler+0x162>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a35      	ldr	r2, [pc, #212]	@ (8002c74 <HAL_DMA_IRQHandler+0x1f8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01a      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x15c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a34      	ldr	r2, [pc, #208]	@ (8002c78 <HAL_DMA_IRQHandler+0x1fc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d012      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x156>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a32      	ldr	r2, [pc, #200]	@ (8002c7c <HAL_DMA_IRQHandler+0x200>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00a      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x150>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a31      	ldr	r2, [pc, #196]	@ (8002c80 <HAL_DMA_IRQHandler+0x204>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d102      	bne.n	8002bc6 <HAL_DMA_IRQHandler+0x14a>
 8002bc0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002bc4:	e00e      	b.n	8002be4 <HAL_DMA_IRQHandler+0x168>
 8002bc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bca:	e00b      	b.n	8002be4 <HAL_DMA_IRQHandler+0x168>
 8002bcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd0:	e008      	b.n	8002be4 <HAL_DMA_IRQHandler+0x168>
 8002bd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bd6:	e005      	b.n	8002be4 <HAL_DMA_IRQHandler+0x168>
 8002bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bdc:	e002      	b.n	8002be4 <HAL_DMA_IRQHandler+0x168>
 8002bde:	2320      	movs	r3, #32
 8002be0:	e000      	b.n	8002be4 <HAL_DMA_IRQHandler+0x168>
 8002be2:	2302      	movs	r3, #2
 8002be4:	4a27      	ldr	r2, [pc, #156]	@ (8002c84 <HAL_DMA_IRQHandler+0x208>)
 8002be6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d034      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c00:	e02f      	b.n	8002c62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	2208      	movs	r2, #8
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d028      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x1e8>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d023      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 020e 	bic.w	r2, r2, #14
 8002c2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d004      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
    }
  }
  return;
 8002c62:	bf00      	nop
 8002c64:	bf00      	nop
}
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40020008 	.word	0x40020008
 8002c70:	4002001c 	.word	0x4002001c
 8002c74:	40020030 	.word	0x40020030
 8002c78:	40020044 	.word	0x40020044
 8002c7c:	40020058 	.word	0x40020058
 8002c80:	4002006c 	.word	0x4002006c
 8002c84:	40020000 	.word	0x40020000

08002c88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d108      	bne.n	8002cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cc6:	e007      	b.n	8002cd8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	60da      	str	r2, [r3, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
	...

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b08b      	sub	sp, #44	@ 0x2c
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf6:	e169      	b.n	8002fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f040 8158 	bne.w	8002fc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a9a      	ldr	r2, [pc, #616]	@ (8002f84 <HAL_GPIO_Init+0x2a0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d05e      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d20:	4a98      	ldr	r2, [pc, #608]	@ (8002f84 <HAL_GPIO_Init+0x2a0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d875      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d26:	4a98      	ldr	r2, [pc, #608]	@ (8002f88 <HAL_GPIO_Init+0x2a4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d058      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d2c:	4a96      	ldr	r2, [pc, #600]	@ (8002f88 <HAL_GPIO_Init+0x2a4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d86f      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d32:	4a96      	ldr	r2, [pc, #600]	@ (8002f8c <HAL_GPIO_Init+0x2a8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d052      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d38:	4a94      	ldr	r2, [pc, #592]	@ (8002f8c <HAL_GPIO_Init+0x2a8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d869      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d3e:	4a94      	ldr	r2, [pc, #592]	@ (8002f90 <HAL_GPIO_Init+0x2ac>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d04c      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d44:	4a92      	ldr	r2, [pc, #584]	@ (8002f90 <HAL_GPIO_Init+0x2ac>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d863      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d4a:	4a92      	ldr	r2, [pc, #584]	@ (8002f94 <HAL_GPIO_Init+0x2b0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d046      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
 8002d50:	4a90      	ldr	r2, [pc, #576]	@ (8002f94 <HAL_GPIO_Init+0x2b0>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d85d      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d56:	2b12      	cmp	r3, #18
 8002d58:	d82a      	bhi.n	8002db0 <HAL_GPIO_Init+0xcc>
 8002d5a:	2b12      	cmp	r3, #18
 8002d5c:	d859      	bhi.n	8002e12 <HAL_GPIO_Init+0x12e>
 8002d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d64 <HAL_GPIO_Init+0x80>)
 8002d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d64:	08002ddf 	.word	0x08002ddf
 8002d68:	08002db9 	.word	0x08002db9
 8002d6c:	08002dcb 	.word	0x08002dcb
 8002d70:	08002e0d 	.word	0x08002e0d
 8002d74:	08002e13 	.word	0x08002e13
 8002d78:	08002e13 	.word	0x08002e13
 8002d7c:	08002e13 	.word	0x08002e13
 8002d80:	08002e13 	.word	0x08002e13
 8002d84:	08002e13 	.word	0x08002e13
 8002d88:	08002e13 	.word	0x08002e13
 8002d8c:	08002e13 	.word	0x08002e13
 8002d90:	08002e13 	.word	0x08002e13
 8002d94:	08002e13 	.word	0x08002e13
 8002d98:	08002e13 	.word	0x08002e13
 8002d9c:	08002e13 	.word	0x08002e13
 8002da0:	08002e13 	.word	0x08002e13
 8002da4:	08002e13 	.word	0x08002e13
 8002da8:	08002dc1 	.word	0x08002dc1
 8002dac:	08002dd5 	.word	0x08002dd5
 8002db0:	4a79      	ldr	r2, [pc, #484]	@ (8002f98 <HAL_GPIO_Init+0x2b4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002db6:	e02c      	b.n	8002e12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	623b      	str	r3, [r7, #32]
          break;
 8002dbe:	e029      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	623b      	str	r3, [r7, #32]
          break;
 8002dc8:	e024      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	3308      	adds	r3, #8
 8002dd0:	623b      	str	r3, [r7, #32]
          break;
 8002dd2:	e01f      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	330c      	adds	r3, #12
 8002dda:	623b      	str	r3, [r7, #32]
          break;
 8002ddc:	e01a      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002de6:	2304      	movs	r3, #4
 8002de8:	623b      	str	r3, [r7, #32]
          break;
 8002dea:	e013      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002df4:	2308      	movs	r3, #8
 8002df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	611a      	str	r2, [r3, #16]
          break;
 8002dfe:	e009      	b.n	8002e14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e00:	2308      	movs	r3, #8
 8002e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	615a      	str	r2, [r3, #20]
          break;
 8002e0a:	e003      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	623b      	str	r3, [r7, #32]
          break;
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_Init+0x130>
          break;
 8002e12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2bff      	cmp	r3, #255	@ 0xff
 8002e18:	d801      	bhi.n	8002e1e <HAL_GPIO_Init+0x13a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	e001      	b.n	8002e22 <HAL_GPIO_Init+0x13e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2bff      	cmp	r3, #255	@ 0xff
 8002e28:	d802      	bhi.n	8002e30 <HAL_GPIO_Init+0x14c>
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	e002      	b.n	8002e36 <HAL_GPIO_Init+0x152>
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	3b08      	subs	r3, #8
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	210f      	movs	r1, #15
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	401a      	ands	r2, r3
 8002e48:	6a39      	ldr	r1, [r7, #32]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	431a      	orrs	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80b1 	beq.w	8002fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e64:	4b4d      	ldr	r3, [pc, #308]	@ (8002f9c <HAL_GPIO_Init+0x2b8>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4a4c      	ldr	r2, [pc, #304]	@ (8002f9c <HAL_GPIO_Init+0x2b8>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6193      	str	r3, [r2, #24]
 8002e70:	4b4a      	ldr	r3, [pc, #296]	@ (8002f9c <HAL_GPIO_Init+0x2b8>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e7c:	4a48      	ldr	r2, [pc, #288]	@ (8002fa0 <HAL_GPIO_Init+0x2bc>)
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	220f      	movs	r2, #15
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a40      	ldr	r2, [pc, #256]	@ (8002fa4 <HAL_GPIO_Init+0x2c0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d013      	beq.n	8002ed0 <HAL_GPIO_Init+0x1ec>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a3f      	ldr	r2, [pc, #252]	@ (8002fa8 <HAL_GPIO_Init+0x2c4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00d      	beq.n	8002ecc <HAL_GPIO_Init+0x1e8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a3e      	ldr	r2, [pc, #248]	@ (8002fac <HAL_GPIO_Init+0x2c8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d007      	beq.n	8002ec8 <HAL_GPIO_Init+0x1e4>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a3d      	ldr	r2, [pc, #244]	@ (8002fb0 <HAL_GPIO_Init+0x2cc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d101      	bne.n	8002ec4 <HAL_GPIO_Init+0x1e0>
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e006      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	e004      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e002      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_GPIO_Init+0x1ee>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed4:	f002 0203 	and.w	r2, r2, #3
 8002ed8:	0092      	lsls	r2, r2, #2
 8002eda:	4093      	lsls	r3, r2
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ee2:	492f      	ldr	r1, [pc, #188]	@ (8002fa0 <HAL_GPIO_Init+0x2bc>)
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	3302      	adds	r3, #2
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d006      	beq.n	8002f0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002efc:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	492c      	ldr	r1, [pc, #176]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]
 8002f08:	e006      	b.n	8002f18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	4928      	ldr	r1, [pc, #160]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d006      	beq.n	8002f32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f24:	4b23      	ldr	r3, [pc, #140]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	4922      	ldr	r1, [pc, #136]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60cb      	str	r3, [r1, #12]
 8002f30:	e006      	b.n	8002f40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f32:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	491e      	ldr	r1, [pc, #120]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d006      	beq.n	8002f5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	4918      	ldr	r1, [pc, #96]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
 8002f58:	e006      	b.n	8002f68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f5a:	4b16      	ldr	r3, [pc, #88]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	43db      	mvns	r3, r3
 8002f62:	4914      	ldr	r1, [pc, #80]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d021      	beq.n	8002fb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f74:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	490e      	ldr	r1, [pc, #56]	@ (8002fb4 <HAL_GPIO_Init+0x2d0>)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]
 8002f80:	e021      	b.n	8002fc6 <HAL_GPIO_Init+0x2e2>
 8002f82:	bf00      	nop
 8002f84:	10320000 	.word	0x10320000
 8002f88:	10310000 	.word	0x10310000
 8002f8c:	10220000 	.word	0x10220000
 8002f90:	10210000 	.word	0x10210000
 8002f94:	10120000 	.word	0x10120000
 8002f98:	10110000 	.word	0x10110000
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40010800 	.word	0x40010800
 8002fa8:	40010c00 	.word	0x40010c00
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	40011400 	.word	0x40011400
 8002fb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	4909      	ldr	r1, [pc, #36]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	3301      	adds	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f47f ae8e 	bne.w	8002cf8 <HAL_GPIO_Init+0x14>
  }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	372c      	adds	r7, #44	@ 0x2c
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	40010400 	.word	0x40010400

08002fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ffc:	787b      	ldrb	r3, [r7, #1]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003008:	e003      	b.n	8003012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	041a      	lsls	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	611a      	str	r2, [r3, #16]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e12b      	b.n	8003286 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd ff9e 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2224      	movs	r2, #36	@ 0x24
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800306e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800307e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003080:	f002 f9e4 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 8003084:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a81      	ldr	r2, [pc, #516]	@ (8003290 <HAL_I2C_Init+0x274>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d807      	bhi.n	80030a0 <HAL_I2C_Init+0x84>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a80      	ldr	r2, [pc, #512]	@ (8003294 <HAL_I2C_Init+0x278>)
 8003094:	4293      	cmp	r3, r2
 8003096:	bf94      	ite	ls
 8003098:	2301      	movls	r3, #1
 800309a:	2300      	movhi	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e006      	b.n	80030ae <HAL_I2C_Init+0x92>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a7d      	ldr	r2, [pc, #500]	@ (8003298 <HAL_I2C_Init+0x27c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	bf94      	ite	ls
 80030a8:	2301      	movls	r3, #1
 80030aa:	2300      	movhi	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e0e7      	b.n	8003286 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4a78      	ldr	r2, [pc, #480]	@ (800329c <HAL_I2C_Init+0x280>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	0c9b      	lsrs	r3, r3, #18
 80030c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003290 <HAL_I2C_Init+0x274>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d802      	bhi.n	80030f0 <HAL_I2C_Init+0xd4>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	3301      	adds	r3, #1
 80030ee:	e009      	b.n	8003104 <HAL_I2C_Init+0xe8>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	4a69      	ldr	r2, [pc, #420]	@ (80032a0 <HAL_I2C_Init+0x284>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	099b      	lsrs	r3, r3, #6
 8003102:	3301      	adds	r3, #1
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	430b      	orrs	r3, r1
 800310a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003116:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	495c      	ldr	r1, [pc, #368]	@ (8003290 <HAL_I2C_Init+0x274>)
 8003120:	428b      	cmp	r3, r1
 8003122:	d819      	bhi.n	8003158 <HAL_I2C_Init+0x13c>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1e59      	subs	r1, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003132:	1c59      	adds	r1, r3, #1
 8003134:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003138:	400b      	ands	r3, r1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_I2C_Init+0x138>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1e59      	subs	r1, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fbb1 f3f3 	udiv	r3, r1, r3
 800314c:	3301      	adds	r3, #1
 800314e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003152:	e051      	b.n	80031f8 <HAL_I2C_Init+0x1dc>
 8003154:	2304      	movs	r3, #4
 8003156:	e04f      	b.n	80031f8 <HAL_I2C_Init+0x1dc>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d111      	bne.n	8003184 <HAL_I2C_Init+0x168>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1e58      	subs	r0, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	440b      	add	r3, r1
 800316e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003172:	3301      	adds	r3, #1
 8003174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e012      	b.n	80031aa <HAL_I2C_Init+0x18e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e58      	subs	r0, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	0099      	lsls	r1, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	fbb0 f3f3 	udiv	r3, r0, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Init+0x196>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e022      	b.n	80031f8 <HAL_I2C_Init+0x1dc>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10e      	bne.n	80031d8 <HAL_I2C_Init+0x1bc>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1e58      	subs	r0, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	440b      	add	r3, r1
 80031c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031cc:	3301      	adds	r3, #1
 80031ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031d6:	e00f      	b.n	80031f8 <HAL_I2C_Init+0x1dc>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e58      	subs	r0, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	0099      	lsls	r1, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ee:	3301      	adds	r3, #1
 80031f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	6809      	ldr	r1, [r1, #0]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003226:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6911      	ldr	r1, [r2, #16]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68d2      	ldr	r2, [r2, #12]
 8003232:	4311      	orrs	r1, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	430b      	orrs	r3, r1
 800323a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	000186a0 	.word	0x000186a0
 8003294:	001e847f 	.word	0x001e847f
 8003298:	003d08ff 	.word	0x003d08ff
 800329c:	431bde83 	.word	0x431bde83
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	461a      	mov	r2, r3
 80032b0:	460b      	mov	r3, r1
 80032b2:	817b      	strh	r3, [r7, #10]
 80032b4:	4613      	mov	r3, r2
 80032b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032b8:	f7fe fd58 	bl	8001d6c <HAL_GetTick>
 80032bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	f040 80e0 	bne.w	800348c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2319      	movs	r3, #25
 80032d2:	2201      	movs	r2, #1
 80032d4:	4970      	ldr	r1, [pc, #448]	@ (8003498 <HAL_I2C_Master_Transmit+0x1f4>)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f001 fab8 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0d3      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_I2C_Master_Transmit+0x50>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0cc      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ea>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d007      	beq.n	800331a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0201 	orr.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003328:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2221      	movs	r2, #33	@ 0x21
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2210      	movs	r2, #16
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	893a      	ldrh	r2, [r7, #8]
 800334a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4a50      	ldr	r2, [pc, #320]	@ (800349c <HAL_I2C_Master_Transmit+0x1f8>)
 800335a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800335c:	8979      	ldrh	r1, [r7, #10]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	6a3a      	ldr	r2, [r7, #32]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 ffa4 	bl	80042b0 <I2C_MasterRequestWrite>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e08d      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003388:	e066      	b.n	8003458 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	6a39      	ldr	r1, [r7, #32]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f001 fb76 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d107      	bne.n	80033b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06b      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d11b      	bne.n	800342c <HAL_I2C_Master_Transmit+0x188>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d017      	beq.n	800342c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	6a39      	ldr	r1, [r7, #32]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f001 fb6d 	bl	8004b10 <I2C_WaitOnBTFFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00d      	beq.n	8003458 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	2b04      	cmp	r3, #4
 8003442:	d107      	bne.n	8003454 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003452:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e01a      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345c:	2b00      	cmp	r3, #0
 800345e:	d194      	bne.n	800338a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800346e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800348c:	2302      	movs	r3, #2
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	00100002 	.word	0x00100002
 800349c:	ffff0000 	.word	0xffff0000

080034a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08c      	sub	sp, #48	@ 0x30
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	461a      	mov	r2, r3
 80034ac:	460b      	mov	r3, r1
 80034ae:	817b      	strh	r3, [r7, #10]
 80034b0:	4613      	mov	r3, r2
 80034b2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034b8:	f7fe fc58 	bl	8001d6c <HAL_GetTick>
 80034bc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	f040 824b 	bne.w	8003962 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2319      	movs	r3, #25
 80034d2:	2201      	movs	r2, #1
 80034d4:	497f      	ldr	r1, [pc, #508]	@ (80036d4 <HAL_I2C_Master_Receive+0x234>)
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f001 f9b8 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
 80034e4:	e23e      	b.n	8003964 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_I2C_Master_Receive+0x54>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e237      	b.n	8003964 <HAL_I2C_Master_Receive+0x4c4>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d007      	beq.n	800351a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003528:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2222      	movs	r2, #34	@ 0x22
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2210      	movs	r2, #16
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	893a      	ldrh	r2, [r7, #8]
 800354a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4a5f      	ldr	r2, [pc, #380]	@ (80036d8 <HAL_I2C_Master_Receive+0x238>)
 800355a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800355c:	8979      	ldrh	r1, [r7, #10]
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 ff26 	bl	80043b4 <I2C_MasterRequestRead>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e1f8      	b.n	8003964 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	d113      	bne.n	80035a2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	61fb      	str	r3, [r7, #28]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e1cc      	b.n	800393c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d11e      	bne.n	80035e8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035ba:	b672      	cpsid	i
}
 80035bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035e4:	b662      	cpsie	i
}
 80035e6:	e035      	b.n	8003654 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d11e      	bne.n	800362e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003600:	b672      	cpsid	i
}
 8003602:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003628:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800362a:	b662      	cpsie	i
}
 800362c:	e012      	b.n	8003654 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800363c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003654:	e172      	b.n	800393c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365a:	2b03      	cmp	r3, #3
 800365c:	f200 811f 	bhi.w	800389e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003664:	2b01      	cmp	r3, #1
 8003666:	d123      	bne.n	80036b0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f001 fa97 	bl	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e173      	b.n	8003964 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036ae:	e145      	b.n	800393c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d152      	bne.n	800375e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036be:	2200      	movs	r2, #0
 80036c0:	4906      	ldr	r1, [pc, #24]	@ (80036dc <HAL_I2C_Master_Receive+0x23c>)
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f001 f8c2 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e148      	b.n	8003964 <HAL_I2C_Master_Receive+0x4c4>
 80036d2:	bf00      	nop
 80036d4:	00100002 	.word	0x00100002
 80036d8:	ffff0000 	.word	0xffff0000
 80036dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80036e0:	b672      	cpsid	i
}
 80036e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003726:	b662      	cpsie	i
}
 8003728:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800375c:	e0ee      	b.n	800393c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003764:	2200      	movs	r2, #0
 8003766:	4981      	ldr	r1, [pc, #516]	@ (800396c <HAL_I2C_Master_Receive+0x4cc>)
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f001 f86f 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0f5      	b.n	8003964 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003786:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003788:	b672      	cpsid	i
}
 800378a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80037be:	4b6c      	ldr	r3, [pc, #432]	@ (8003970 <HAL_I2C_Master_Receive+0x4d0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	08db      	lsrs	r3, r3, #3
 80037c4:	4a6b      	ldr	r2, [pc, #428]	@ (8003974 <HAL_I2C_Master_Receive+0x4d4>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	0a1a      	lsrs	r2, r3, #8
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	00da      	lsls	r2, r3, #3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80037d8:	6a3b      	ldr	r3, [r7, #32]
 80037da:	3b01      	subs	r3, #1
 80037dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d118      	bne.n	8003816 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003806:	b662      	cpsie	i
}
 8003808:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0a6      	b.n	8003964 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d1d9      	bne.n	80037d8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003866:	b662      	cpsie	i
}
 8003868:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800389c:	e04e      	b.n	800393c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f001 f97c 	bl	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e058      	b.n	8003964 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d124      	bne.n	800393c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d107      	bne.n	800390a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003908:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691a      	ldr	r2, [r3, #16]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	f47f ae88 	bne.w	8003656 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	e000      	b.n	8003964 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003962:	2302      	movs	r3, #2
  }
}
 8003964:	4618      	mov	r0, r3
 8003966:	3728      	adds	r7, #40	@ 0x28
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	00010004 	.word	0x00010004
 8003970:	20000000 	.word	0x20000000
 8003974:	14f8b589 	.word	0x14f8b589

08003978 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	4608      	mov	r0, r1
 8003982:	4611      	mov	r1, r2
 8003984:	461a      	mov	r2, r3
 8003986:	4603      	mov	r3, r0
 8003988:	817b      	strh	r3, [r7, #10]
 800398a:	460b      	mov	r3, r1
 800398c:	813b      	strh	r3, [r7, #8]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003992:	f7fe f9eb 	bl	8001d6c <HAL_GetTick>
 8003996:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	f040 80d9 	bne.w	8003b58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2319      	movs	r3, #25
 80039ac:	2201      	movs	r2, #1
 80039ae:	496d      	ldr	r1, [pc, #436]	@ (8003b64 <HAL_I2C_Mem_Write+0x1ec>)
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 ff4b 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
 80039be:	e0cc      	b.n	8003b5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_I2C_Mem_Write+0x56>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e0c5      	b.n	8003b5a <HAL_I2C_Mem_Write+0x1e2>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d007      	beq.n	80039f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2221      	movs	r2, #33	@ 0x21
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2240      	movs	r2, #64	@ 0x40
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a3a      	ldr	r2, [r7, #32]
 8003a1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a4d      	ldr	r2, [pc, #308]	@ (8003b68 <HAL_I2C_Mem_Write+0x1f0>)
 8003a34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a36:	88f8      	ldrh	r0, [r7, #6]
 8003a38:	893a      	ldrh	r2, [r7, #8]
 8003a3a:	8979      	ldrh	r1, [r7, #10]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	4603      	mov	r3, r0
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fd82 	bl	8004550 <I2C_RequestMemoryWrite>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d052      	beq.n	8003af8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e081      	b.n	8003b5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f001 f810 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d107      	bne.n	8003a7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e06b      	b.n	8003b5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d11b      	bne.n	8003af8 <HAL_I2C_Mem_Write+0x180>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d017      	beq.n	8003af8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1aa      	bne.n	8003a56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f001 f803 	bl	8004b10 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00d      	beq.n	8003b2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d107      	bne.n	8003b28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e016      	b.n	8003b5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	00100002 	.word	0x00100002
 8003b68:	ffff0000 	.word	0xffff0000

08003b6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08c      	sub	sp, #48	@ 0x30
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	4608      	mov	r0, r1
 8003b76:	4611      	mov	r1, r2
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	817b      	strh	r3, [r7, #10]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	813b      	strh	r3, [r7, #8]
 8003b82:	4613      	mov	r3, r2
 8003b84:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b8a:	f7fe f8ef 	bl	8001d6c <HAL_GetTick>
 8003b8e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	f040 8250 	bne.w	800403e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	2319      	movs	r3, #25
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4982      	ldr	r1, [pc, #520]	@ (8003db0 <HAL_I2C_Mem_Read+0x244>)
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fe4f 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e243      	b.n	8004040 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_I2C_Mem_Read+0x5a>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e23c      	b.n	8004040 <HAL_I2C_Mem_Read+0x4d4>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d007      	beq.n	8003bec <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2222      	movs	r2, #34	@ 0x22
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2240      	movs	r2, #64	@ 0x40
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a62      	ldr	r2, [pc, #392]	@ (8003db4 <HAL_I2C_Mem_Read+0x248>)
 8003c2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c2e:	88f8      	ldrh	r0, [r7, #6]
 8003c30:	893a      	ldrh	r2, [r7, #8]
 8003c32:	8979      	ldrh	r1, [r7, #10]
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fd1c 	bl	800467c <I2C_RequestMemoryRead>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e1f8      	b.n	8004040 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d113      	bne.n	8003c7e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e1cc      	b.n	8004018 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d11e      	bne.n	8003cc4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c96:	b672      	cpsid	i
}
 8003c98:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cc0:	b662      	cpsie	i
}
 8003cc2:	e035      	b.n	8003d30 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d11e      	bne.n	8003d0a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cdc:	b672      	cpsid	i
}
 8003cde:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d06:	b662      	cpsie	i
}
 8003d08:	e012      	b.n	8003d30 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d18:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003d30:	e172      	b.n	8004018 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	f200 811f 	bhi.w	8003f7a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d123      	bne.n	8003d8c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d46:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 ff29 	bl	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e173      	b.n	8004040 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d8a:	e145      	b.n	8004018 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d152      	bne.n	8003e3a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4906      	ldr	r1, [pc, #24]	@ (8003db8 <HAL_I2C_Mem_Read+0x24c>)
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fd54 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e148      	b.n	8004040 <HAL_I2C_Mem_Read+0x4d4>
 8003dae:	bf00      	nop
 8003db0:	00100002 	.word	0x00100002
 8003db4:	ffff0000 	.word	0xffff0000
 8003db8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003dbc:	b672      	cpsid	i
}
 8003dbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e02:	b662      	cpsie	i
}
 8003e04:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e38:	e0ee      	b.n	8004018 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e40:	2200      	movs	r2, #0
 8003e42:	4981      	ldr	r1, [pc, #516]	@ (8004048 <HAL_I2C_Mem_Read+0x4dc>)
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 fd01 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0f5      	b.n	8004040 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e64:	b672      	cpsid	i
}
 8003e66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e9a:	4b6c      	ldr	r3, [pc, #432]	@ (800404c <HAL_I2C_Mem_Read+0x4e0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	08db      	lsrs	r3, r3, #3
 8003ea0:	4a6b      	ldr	r2, [pc, #428]	@ (8004050 <HAL_I2C_Mem_Read+0x4e4>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	0a1a      	lsrs	r2, r3, #8
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	00da      	lsls	r2, r3, #3
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d118      	bne.n	8003ef2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	f043 0220 	orr.w	r2, r3, #32
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ee2:	b662      	cpsie	i
}
 8003ee4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0a6      	b.n	8004040 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d1d9      	bne.n	8003eb4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f42:	b662      	cpsie	i
}
 8003f44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f78:	e04e      	b.n	8004018 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fe0e 	bl	8004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e058      	b.n	8004040 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d124      	bne.n	8004018 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d107      	bne.n	8003fe6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	f47f ae88 	bne.w	8003d32 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	e000      	b.n	8004040 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
  }
}
 8004040:	4618      	mov	r0, r3
 8004042:	3728      	adds	r7, #40	@ 0x28
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	00010004 	.word	0x00010004
 800404c:	20000000 	.word	0x20000000
 8004050:	14f8b589 	.word	0x14f8b589

08004054 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	@ 0x28
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	460b      	mov	r3, r1
 8004062:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004064:	f7fd fe82 	bl	8001d6c <HAL_GetTick>
 8004068:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b20      	cmp	r3, #32
 8004078:	f040 8111 	bne.w	800429e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2319      	movs	r3, #25
 8004082:	2201      	movs	r2, #1
 8004084:	4988      	ldr	r1, [pc, #544]	@ (80042a8 <HAL_I2C_IsDeviceReady+0x254>)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fbe0 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
 8004094:	e104      	b.n	80042a0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_I2C_IsDeviceReady+0x50>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e0fd      	b.n	80042a0 <HAL_I2C_IsDeviceReady+0x24c>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d007      	beq.n	80040ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0201 	orr.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2224      	movs	r2, #36	@ 0x24
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4a70      	ldr	r2, [pc, #448]	@ (80042ac <HAL_I2C_IsDeviceReady+0x258>)
 80040ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2200      	movs	r2, #0
 8004106:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fb9e 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004124:	d103      	bne.n	800412e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800412c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e0b6      	b.n	80042a0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004132:	897b      	ldrh	r3, [r7, #10]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004140:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004142:	f7fd fe13 	bl	8001d6c <HAL_GetTick>
 8004146:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b02      	cmp	r3, #2
 8004154:	bf0c      	ite	eq
 8004156:	2301      	moveq	r3, #1
 8004158:	2300      	movne	r3, #0
 800415a:	b2db      	uxtb	r3, r3
 800415c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004176:	e025      	b.n	80041c4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004178:	f7fd fdf8 	bl	8001d6c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d302      	bcc.n	800418e <HAL_I2C_IsDeviceReady+0x13a>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	22a0      	movs	r2, #160	@ 0xa0
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2ba0      	cmp	r3, #160	@ 0xa0
 80041ce:	d005      	beq.n	80041dc <HAL_I2C_IsDeviceReady+0x188>
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d102      	bne.n	80041dc <HAL_I2C_IsDeviceReady+0x188>
 80041d6:	7dbb      	ldrb	r3, [r7, #22]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d0cd      	beq.n	8004178 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d129      	bne.n	8004246 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004200:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2319      	movs	r3, #25
 800421e:	2201      	movs	r2, #1
 8004220:	4921      	ldr	r1, [pc, #132]	@ (80042a8 <HAL_I2C_IsDeviceReady+0x254>)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fb12 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e036      	b.n	80042a0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e02c      	b.n	80042a0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004254:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800425e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	2319      	movs	r3, #25
 8004266:	2201      	movs	r2, #1
 8004268:	490f      	ldr	r1, [pc, #60]	@ (80042a8 <HAL_I2C_IsDeviceReady+0x254>)
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 faee 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e012      	b.n	80042a0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	3301      	adds	r3, #1
 800427e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	429a      	cmp	r2, r3
 8004286:	f4ff af32 	bcc.w	80040ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
  }
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	00100002 	.word	0x00100002
 80042ac:	ffff0000 	.word	0xffff0000

080042b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	460b      	mov	r3, r1
 80042be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d006      	beq.n	80042da <I2C_MasterRequestWrite+0x2a>
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d003      	beq.n	80042da <I2C_MasterRequestWrite+0x2a>
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042d8:	d108      	bne.n	80042ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	e00b      	b.n	8004304 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	2b12      	cmp	r3, #18
 80042f2:	d107      	bne.n	8004304 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004302:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fa9b 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00d      	beq.n	8004338 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800432a:	d103      	bne.n	8004334 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004332:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e035      	b.n	80043a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004340:	d108      	bne.n	8004354 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004342:	897b      	ldrh	r3, [r7, #10]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004350:	611a      	str	r2, [r3, #16]
 8004352:	e01b      	b.n	800438c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004354:	897b      	ldrh	r3, [r7, #10]
 8004356:	11db      	asrs	r3, r3, #7
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0306 	and.w	r3, r3, #6
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f063 030f 	orn	r3, r3, #15
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	490e      	ldr	r1, [pc, #56]	@ (80043ac <I2C_MasterRequestWrite+0xfc>)
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fae4 	bl	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e010      	b.n	80043a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004382:	897b      	ldrh	r3, [r7, #10]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4907      	ldr	r1, [pc, #28]	@ (80043b0 <I2C_MasterRequestWrite+0x100>)
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fad4 	bl	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	00010008 	.word	0x00010008
 80043b0:	00010002 	.word	0x00010002

080043b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	460b      	mov	r3, r1
 80043c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d006      	beq.n	80043ee <I2C_MasterRequestRead+0x3a>
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d003      	beq.n	80043ee <I2C_MasterRequestRead+0x3a>
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043ec:	d108      	bne.n	8004400 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	e00b      	b.n	8004418 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004404:	2b11      	cmp	r3, #17
 8004406:	d107      	bne.n	8004418 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004416:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 fa11 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00d      	beq.n	800444c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800443e:	d103      	bne.n	8004448 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004446:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e079      	b.n	8004540 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004454:	d108      	bne.n	8004468 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004456:	897b      	ldrh	r3, [r7, #10]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	b2da      	uxtb	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	611a      	str	r2, [r3, #16]
 8004466:	e05f      	b.n	8004528 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004468:	897b      	ldrh	r3, [r7, #10]
 800446a:	11db      	asrs	r3, r3, #7
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f003 0306 	and.w	r3, r3, #6
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f063 030f 	orn	r3, r3, #15
 8004478:	b2da      	uxtb	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	4930      	ldr	r1, [pc, #192]	@ (8004548 <I2C_MasterRequestRead+0x194>)
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fa5a 	bl	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e054      	b.n	8004540 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004496:	897b      	ldrh	r3, [r7, #10]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	4929      	ldr	r1, [pc, #164]	@ (800454c <I2C_MasterRequestRead+0x198>)
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fa4a 	bl	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e044      	b.n	8004540 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b6:	2300      	movs	r3, #0
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f9af 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00d      	beq.n	8004510 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004502:	d103      	bne.n	800450c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800450a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e017      	b.n	8004540 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004510:	897b      	ldrh	r3, [r7, #10]
 8004512:	11db      	asrs	r3, r3, #7
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f003 0306 	and.w	r3, r3, #6
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f063 030e 	orn	r3, r3, #14
 8004520:	b2da      	uxtb	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	4907      	ldr	r1, [pc, #28]	@ (800454c <I2C_MasterRequestRead+0x198>)
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fa06 	bl	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	00010008 	.word	0x00010008
 800454c:	00010002 	.word	0x00010002

08004550 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	4608      	mov	r0, r1
 800455a:	4611      	mov	r1, r2
 800455c:	461a      	mov	r2, r3
 800455e:	4603      	mov	r3, r0
 8004560:	817b      	strh	r3, [r7, #10]
 8004562:	460b      	mov	r3, r1
 8004564:	813b      	strh	r3, [r7, #8]
 8004566:	4613      	mov	r3, r2
 8004568:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004578:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	2200      	movs	r2, #0
 8004582:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f960 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00d      	beq.n	80045ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045a0:	d103      	bne.n	80045aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e05f      	b.n	800466e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	6a3a      	ldr	r2, [r7, #32]
 80045c2:	492d      	ldr	r1, [pc, #180]	@ (8004678 <I2C_RequestMemoryWrite+0x128>)
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f9bb 	bl	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e04c      	b.n	800466e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ec:	6a39      	ldr	r1, [r7, #32]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fa46 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00d      	beq.n	8004616 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d107      	bne.n	8004612 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004610:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e02b      	b.n	800466e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d105      	bne.n	8004628 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800461c:	893b      	ldrh	r3, [r7, #8]
 800461e:	b2da      	uxtb	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	611a      	str	r2, [r3, #16]
 8004626:	e021      	b.n	800466c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004628:	893b      	ldrh	r3, [r7, #8]
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	b29b      	uxth	r3, r3
 800462e:	b2da      	uxtb	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004638:	6a39      	ldr	r1, [r7, #32]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f000 fa20 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00d      	beq.n	8004662 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	2b04      	cmp	r3, #4
 800464c:	d107      	bne.n	800465e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800465c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e005      	b.n	800466e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004662:	893b      	ldrh	r3, [r7, #8]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	00010002 	.word	0x00010002

0800467c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	4608      	mov	r0, r1
 8004686:	4611      	mov	r1, r2
 8004688:	461a      	mov	r2, r3
 800468a:	4603      	mov	r3, r0
 800468c:	817b      	strh	r3, [r7, #10]
 800468e:	460b      	mov	r3, r1
 8004690:	813b      	strh	r3, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	2200      	movs	r2, #0
 80046be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f8c2 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00d      	beq.n	80046ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046dc:	d103      	bne.n	80046e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e0aa      	b.n	8004840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ea:	897b      	ldrh	r3, [r7, #10]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	6a3a      	ldr	r2, [r7, #32]
 80046fe:	4952      	ldr	r1, [pc, #328]	@ (8004848 <I2C_RequestMemoryRead+0x1cc>)
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f91d 	bl	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e097      	b.n	8004840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004728:	6a39      	ldr	r1, [r7, #32]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f9a8 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	2b04      	cmp	r3, #4
 800473c:	d107      	bne.n	800474e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800474c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e076      	b.n	8004840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d105      	bne.n	8004764 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004758:	893b      	ldrh	r3, [r7, #8]
 800475a:	b2da      	uxtb	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	611a      	str	r2, [r3, #16]
 8004762:	e021      	b.n	80047a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004764:	893b      	ldrh	r3, [r7, #8]
 8004766:	0a1b      	lsrs	r3, r3, #8
 8004768:	b29b      	uxth	r3, r3
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004774:	6a39      	ldr	r1, [r7, #32]
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f982 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00d      	beq.n	800479e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004786:	2b04      	cmp	r3, #4
 8004788:	d107      	bne.n	800479a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004798:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e050      	b.n	8004840 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800479e:	893b      	ldrh	r3, [r7, #8]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047aa:	6a39      	ldr	r1, [r7, #32]
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f967 	bl	8004a80 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00d      	beq.n	80047d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d107      	bne.n	80047d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e035      	b.n	8004840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f82b 	bl	800484c <I2C_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00d      	beq.n	8004818 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800480a:	d103      	bne.n	8004814 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004812:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e013      	b.n	8004840 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004818:	897b      	ldrh	r3, [r7, #10]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	6a3a      	ldr	r2, [r7, #32]
 800482c:	4906      	ldr	r1, [pc, #24]	@ (8004848 <I2C_RequestMemoryRead+0x1cc>)
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f886 	bl	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	00010002 	.word	0x00010002

0800484c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800485c:	e048      	b.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004864:	d044      	beq.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004866:	f7fd fa81 	bl	8001d6c <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d302      	bcc.n	800487c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d139      	bne.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	0c1b      	lsrs	r3, r3, #16
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d10d      	bne.n	80048a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	43da      	mvns	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	4013      	ands	r3, r2
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	e00c      	b.n	80048bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	43da      	mvns	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4013      	ands	r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d116      	bne.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e023      	b.n	8004938 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	0c1b      	lsrs	r3, r3, #16
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d10d      	bne.n	8004916 <I2C_WaitOnFlagUntilTimeout+0xca>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	43da      	mvns	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4013      	ands	r3, r2
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf0c      	ite	eq
 800490c:	2301      	moveq	r3, #1
 800490e:	2300      	movne	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	e00c      	b.n	8004930 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	43da      	mvns	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4013      	ands	r3, r2
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	bf0c      	ite	eq
 8004928:	2301      	moveq	r3, #1
 800492a:	2300      	movne	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	429a      	cmp	r2, r3
 8004934:	d093      	beq.n	800485e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800494e:	e071      	b.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800495e:	d123      	bne.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800496e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004978:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	f043 0204 	orr.w	r2, r3, #4
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e067      	b.n	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049ae:	d041      	beq.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b0:	f7fd f9dc 	bl	8001d6c <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d136      	bne.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d10c      	bne.n	80049ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	43da      	mvns	r2, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4013      	ands	r3, r2
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bf14      	ite	ne
 80049e2:	2301      	movne	r3, #1
 80049e4:	2300      	moveq	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	e00b      	b.n	8004a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	43da      	mvns	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4013      	ands	r3, r2
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf14      	ite	ne
 80049fc:	2301      	movne	r3, #1
 80049fe:	2300      	moveq	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d016      	beq.n	8004a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e021      	b.n	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	0c1b      	lsrs	r3, r3, #16
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d10c      	bne.n	8004a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	43da      	mvns	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf14      	ite	ne
 8004a50:	2301      	movne	r3, #1
 8004a52:	2300      	moveq	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e00b      	b.n	8004a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	43da      	mvns	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bf14      	ite	ne
 8004a6a:	2301      	movne	r3, #1
 8004a6c:	2300      	moveq	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f47f af6d 	bne.w	8004950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a8c:	e034      	b.n	8004af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f8e3 	bl	8004c5a <I2C_IsAcknowledgeFailed>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e034      	b.n	8004b08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aa4:	d028      	beq.n	8004af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa6:	f7fd f961 	bl	8001d6c <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d11d      	bne.n	8004af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac6:	2b80      	cmp	r3, #128	@ 0x80
 8004ac8:	d016      	beq.n	8004af8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	f043 0220 	orr.w	r2, r3, #32
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e007      	b.n	8004b08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b02:	2b80      	cmp	r3, #128	@ 0x80
 8004b04:	d1c3      	bne.n	8004a8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b1c:	e034      	b.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f89b 	bl	8004c5a <I2C_IsAcknowledgeFailed>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e034      	b.n	8004b98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b34:	d028      	beq.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b36:	f7fd f919 	bl	8001d6c <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d11d      	bne.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d016      	beq.n	8004b88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	f043 0220 	orr.w	r2, r3, #32
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e007      	b.n	8004b98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d1c3      	bne.n	8004b1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bac:	e049      	b.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d119      	bne.n	8004bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0210 	mvn.w	r2, #16
 8004bc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e030      	b.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf0:	f7fd f8bc 	bl	8001d6c <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d302      	bcc.n	8004c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11d      	bne.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c10:	2b40      	cmp	r3, #64	@ 0x40
 8004c12:	d016      	beq.n	8004c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e007      	b.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4c:	2b40      	cmp	r3, #64	@ 0x40
 8004c4e:	d1ae      	bne.n	8004bae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c70:	d11b      	bne.n	8004caa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f043 0204 	orr.w	r2, r3, #4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr
	...

08004cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e272      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 8087 	beq.w	8004de6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd8:	4b92      	ldr	r3, [pc, #584]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f003 030c 	and.w	r3, r3, #12
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d00c      	beq.n	8004cfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ce4:	4b8f      	ldr	r3, [pc, #572]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 030c 	and.w	r3, r3, #12
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d112      	bne.n	8004d16 <HAL_RCC_OscConfig+0x5e>
 8004cf0:	4b8c      	ldr	r3, [pc, #560]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfc:	d10b      	bne.n	8004d16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfe:	4b89      	ldr	r3, [pc, #548]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d06c      	beq.n	8004de4 <HAL_RCC_OscConfig+0x12c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d168      	bne.n	8004de4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e24c      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d1e:	d106      	bne.n	8004d2e <HAL_RCC_OscConfig+0x76>
 8004d20:	4b80      	ldr	r3, [pc, #512]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a7f      	ldr	r2, [pc, #508]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	e02e      	b.n	8004d8c <HAL_RCC_OscConfig+0xd4>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x98>
 8004d36:	4b7b      	ldr	r3, [pc, #492]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a7a      	ldr	r2, [pc, #488]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	4b78      	ldr	r3, [pc, #480]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a77      	ldr	r2, [pc, #476]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e01d      	b.n	8004d8c <HAL_RCC_OscConfig+0xd4>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCC_OscConfig+0xbc>
 8004d5a:	4b72      	ldr	r3, [pc, #456]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a71      	ldr	r2, [pc, #452]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	4b6f      	ldr	r3, [pc, #444]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a6e      	ldr	r2, [pc, #440]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	e00b      	b.n	8004d8c <HAL_RCC_OscConfig+0xd4>
 8004d74:	4b6b      	ldr	r3, [pc, #428]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a6a      	ldr	r2, [pc, #424]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d7e:	6013      	str	r3, [r2, #0]
 8004d80:	4b68      	ldr	r3, [pc, #416]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a67      	ldr	r2, [pc, #412]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d013      	beq.n	8004dbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fc ffea 	bl	8001d6c <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d9c:	f7fc ffe6 	bl	8001d6c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b64      	cmp	r3, #100	@ 0x64
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e200      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dae:	4b5d      	ldr	r3, [pc, #372]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0xe4>
 8004dba:	e014      	b.n	8004de6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbc:	f7fc ffd6 	bl	8001d6c <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dc4:	f7fc ffd2 	bl	8001d6c <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b64      	cmp	r3, #100	@ 0x64
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e1ec      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dd6:	4b53      	ldr	r3, [pc, #332]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f0      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x10c>
 8004de2:	e000      	b.n	8004de6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d063      	beq.n	8004eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004df2:	4b4c      	ldr	r3, [pc, #304]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dfe:	4b49      	ldr	r3, [pc, #292]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d11c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x18c>
 8004e0a:	4b46      	ldr	r3, [pc, #280]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d116      	bne.n	8004e44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e16:	4b43      	ldr	r3, [pc, #268]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_RCC_OscConfig+0x176>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d001      	beq.n	8004e2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e1c0      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	4939      	ldr	r1, [pc, #228]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e42:	e03a      	b.n	8004eba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d020      	beq.n	8004e8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e4c:	4b36      	ldr	r3, [pc, #216]	@ (8004f28 <HAL_RCC_OscConfig+0x270>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fc ff8b 	bl	8001d6c <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5a:	f7fc ff87 	bl	8001d6c <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e1a1      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e78:	4b2a      	ldr	r3, [pc, #168]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4927      	ldr	r1, [pc, #156]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	600b      	str	r3, [r1, #0]
 8004e8c:	e015      	b.n	8004eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e8e:	4b26      	ldr	r3, [pc, #152]	@ (8004f28 <HAL_RCC_OscConfig+0x270>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fc ff6a 	bl	8001d6c <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e9c:	f7fc ff66 	bl	8001d6c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e180      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eae:	4b1d      	ldr	r3, [pc, #116]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d03a      	beq.n	8004f3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d019      	beq.n	8004f02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ece:	4b17      	ldr	r3, [pc, #92]	@ (8004f2c <HAL_RCC_OscConfig+0x274>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed4:	f7fc ff4a 	bl	8001d6c <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004edc:	f7fc ff46 	bl	8001d6c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e160      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eee:	4b0d      	ldr	r3, [pc, #52]	@ (8004f24 <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004efa:	2001      	movs	r0, #1
 8004efc:	f000 face 	bl	800549c <RCC_Delay>
 8004f00:	e01c      	b.n	8004f3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f02:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <HAL_RCC_OscConfig+0x274>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f08:	f7fc ff30 	bl	8001d6c <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f0e:	e00f      	b.n	8004f30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f10:	f7fc ff2c 	bl	8001d6c <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d908      	bls.n	8004f30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e146      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000
 8004f28:	42420000 	.word	0x42420000
 8004f2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f30:	4b92      	ldr	r3, [pc, #584]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e9      	bne.n	8004f10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80a6 	beq.w	8005096 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4e:	4b8b      	ldr	r3, [pc, #556]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10d      	bne.n	8004f76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5a:	4b88      	ldr	r3, [pc, #544]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	4a87      	ldr	r2, [pc, #540]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f64:	61d3      	str	r3, [r2, #28]
 8004f66:	4b85      	ldr	r3, [pc, #532]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f76:	4b82      	ldr	r3, [pc, #520]	@ (8005180 <HAL_RCC_OscConfig+0x4c8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d118      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f82:	4b7f      	ldr	r3, [pc, #508]	@ (8005180 <HAL_RCC_OscConfig+0x4c8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a7e      	ldr	r2, [pc, #504]	@ (8005180 <HAL_RCC_OscConfig+0x4c8>)
 8004f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f8e:	f7fc feed 	bl	8001d6c <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f96:	f7fc fee9 	bl	8001d6c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b64      	cmp	r3, #100	@ 0x64
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e103      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa8:	4b75      	ldr	r3, [pc, #468]	@ (8005180 <HAL_RCC_OscConfig+0x4c8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d106      	bne.n	8004fca <HAL_RCC_OscConfig+0x312>
 8004fbc:	4b6f      	ldr	r3, [pc, #444]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4a6e      	ldr	r2, [pc, #440]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6213      	str	r3, [r2, #32]
 8004fc8:	e02d      	b.n	8005026 <HAL_RCC_OscConfig+0x36e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0x334>
 8004fd2:	4b6a      	ldr	r3, [pc, #424]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	4a69      	ldr	r2, [pc, #420]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	6213      	str	r3, [r2, #32]
 8004fde:	4b67      	ldr	r3, [pc, #412]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	4a66      	ldr	r2, [pc, #408]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004fe4:	f023 0304 	bic.w	r3, r3, #4
 8004fe8:	6213      	str	r3, [r2, #32]
 8004fea:	e01c      	b.n	8005026 <HAL_RCC_OscConfig+0x36e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b05      	cmp	r3, #5
 8004ff2:	d10c      	bne.n	800500e <HAL_RCC_OscConfig+0x356>
 8004ff4:	4b61      	ldr	r3, [pc, #388]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	4a60      	ldr	r2, [pc, #384]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8004ffa:	f043 0304 	orr.w	r3, r3, #4
 8004ffe:	6213      	str	r3, [r2, #32]
 8005000:	4b5e      	ldr	r3, [pc, #376]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	4a5d      	ldr	r2, [pc, #372]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6213      	str	r3, [r2, #32]
 800500c:	e00b      	b.n	8005026 <HAL_RCC_OscConfig+0x36e>
 800500e:	4b5b      	ldr	r3, [pc, #364]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	4a5a      	ldr	r2, [pc, #360]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	6213      	str	r3, [r2, #32]
 800501a:	4b58      	ldr	r3, [pc, #352]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	4a57      	ldr	r2, [pc, #348]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005020:	f023 0304 	bic.w	r3, r3, #4
 8005024:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d015      	beq.n	800505a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800502e:	f7fc fe9d 	bl	8001d6c <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005034:	e00a      	b.n	800504c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005036:	f7fc fe99 	bl	8001d6c <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005044:	4293      	cmp	r3, r2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e0b1      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800504c:	4b4b      	ldr	r3, [pc, #300]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0ee      	beq.n	8005036 <HAL_RCC_OscConfig+0x37e>
 8005058:	e014      	b.n	8005084 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800505a:	f7fc fe87 	bl	8001d6c <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005060:	e00a      	b.n	8005078 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005062:	f7fc fe83 	bl	8001d6c <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005070:	4293      	cmp	r3, r2
 8005072:	d901      	bls.n	8005078 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e09b      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005078:	4b40      	ldr	r3, [pc, #256]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1ee      	bne.n	8005062 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d105      	bne.n	8005096 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800508a:	4b3c      	ldr	r3, [pc, #240]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	4a3b      	ldr	r2, [pc, #236]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005090:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005094:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 8087 	beq.w	80051ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a0:	4b36      	ldr	r3, [pc, #216]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 030c 	and.w	r3, r3, #12
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d061      	beq.n	8005170 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d146      	bne.n	8005142 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b4:	4b33      	ldr	r3, [pc, #204]	@ (8005184 <HAL_RCC_OscConfig+0x4cc>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ba:	f7fc fe57 	bl	8001d6c <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c2:	f7fc fe53 	bl	8001d6c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e06d      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d4:	4b29      	ldr	r3, [pc, #164]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f0      	bne.n	80050c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e8:	d108      	bne.n	80050fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050ea:	4b24      	ldr	r3, [pc, #144]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	4921      	ldr	r1, [pc, #132]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050fc:	4b1f      	ldr	r3, [pc, #124]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a19      	ldr	r1, [r3, #32]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510c:	430b      	orrs	r3, r1
 800510e:	491b      	ldr	r1, [pc, #108]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005110:	4313      	orrs	r3, r2
 8005112:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005114:	4b1b      	ldr	r3, [pc, #108]	@ (8005184 <HAL_RCC_OscConfig+0x4cc>)
 8005116:	2201      	movs	r2, #1
 8005118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511a:	f7fc fe27 	bl	8001d6c <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005122:	f7fc fe23 	bl	8001d6c <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e03d      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005134:	4b11      	ldr	r3, [pc, #68]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <HAL_RCC_OscConfig+0x46a>
 8005140:	e035      	b.n	80051ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005142:	4b10      	ldr	r3, [pc, #64]	@ (8005184 <HAL_RCC_OscConfig+0x4cc>)
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fc fe10 	bl	8001d6c <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005150:	f7fc fe0c 	bl	8001d6c <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e026      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005162:	4b06      	ldr	r3, [pc, #24]	@ (800517c <HAL_RCC_OscConfig+0x4c4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0x498>
 800516e:	e01e      	b.n	80051ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d107      	bne.n	8005188 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e019      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
 800517c:	40021000 	.word	0x40021000
 8005180:	40007000 	.word	0x40007000
 8005184:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005188:	4b0b      	ldr	r3, [pc, #44]	@ (80051b8 <HAL_RCC_OscConfig+0x500>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	429a      	cmp	r2, r3
 800519a:	d106      	bne.n	80051aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d001      	beq.n	80051ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40021000 	.word	0x40021000

080051bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0d0      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d0:	4b6a      	ldr	r3, [pc, #424]	@ (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d910      	bls.n	8005200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051de:	4b67      	ldr	r3, [pc, #412]	@ (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 0207 	bic.w	r2, r3, #7
 80051e6:	4965      	ldr	r1, [pc, #404]	@ (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	4b63      	ldr	r3, [pc, #396]	@ (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0307 	and.w	r3, r3, #7
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0b8      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d020      	beq.n	800524e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005218:	4b59      	ldr	r3, [pc, #356]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	4a58      	ldr	r2, [pc, #352]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800521e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005222:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005230:	4b53      	ldr	r3, [pc, #332]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4a52      	ldr	r2, [pc, #328]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005236:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800523a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523c:	4b50      	ldr	r3, [pc, #320]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	494d      	ldr	r1, [pc, #308]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800524a:	4313      	orrs	r3, r2
 800524c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d040      	beq.n	80052dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d107      	bne.n	8005272 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005262:	4b47      	ldr	r3, [pc, #284]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d115      	bne.n	800529a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e07f      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d107      	bne.n	800528a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527a:	4b41      	ldr	r3, [pc, #260]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e073      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528a:	4b3d      	ldr	r3, [pc, #244]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e06b      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529a:	4b39      	ldr	r3, [pc, #228]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f023 0203 	bic.w	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4936      	ldr	r1, [pc, #216]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052ac:	f7fc fd5e 	bl	8001d6c <HAL_GetTick>
 80052b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b4:	f7fc fd5a 	bl	8001d6c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e053      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 020c 	and.w	r2, r3, #12
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	429a      	cmp	r2, r3
 80052da:	d1eb      	bne.n	80052b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052dc:	4b27      	ldr	r3, [pc, #156]	@ (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d210      	bcs.n	800530c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ea:	4b24      	ldr	r3, [pc, #144]	@ (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 0207 	bic.w	r2, r3, #7
 80052f2:	4922      	ldr	r1, [pc, #136]	@ (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fa:	4b20      	ldr	r3, [pc, #128]	@ (800537c <HAL_RCC_ClockConfig+0x1c0>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d001      	beq.n	800530c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e032      	b.n	8005372 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005318:	4b19      	ldr	r3, [pc, #100]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4916      	ldr	r1, [pc, #88]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005326:	4313      	orrs	r3, r2
 8005328:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0308 	and.w	r3, r3, #8
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005336:	4b12      	ldr	r3, [pc, #72]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	490e      	ldr	r1, [pc, #56]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005346:	4313      	orrs	r3, r2
 8005348:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800534a:	f000 f821 	bl	8005390 <HAL_RCC_GetSysClockFreq>
 800534e:	4602      	mov	r2, r0
 8005350:	4b0b      	ldr	r3, [pc, #44]	@ (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	490a      	ldr	r1, [pc, #40]	@ (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800535c:	5ccb      	ldrb	r3, [r1, r3]
 800535e:	fa22 f303 	lsr.w	r3, r2, r3
 8005362:	4a09      	ldr	r2, [pc, #36]	@ (8005388 <HAL_RCC_ClockConfig+0x1cc>)
 8005364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005366:	4b09      	ldr	r3, [pc, #36]	@ (800538c <HAL_RCC_ClockConfig+0x1d0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7fc fcbc 	bl	8001ce8 <HAL_InitTick>

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40022000 	.word	0x40022000
 8005380:	40021000 	.word	0x40021000
 8005384:	0800ab40 	.word	0x0800ab40
 8005388:	20000000 	.word	0x20000000
 800538c:	20000004 	.word	0x20000004

08005390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	2300      	movs	r3, #0
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	2300      	movs	r3, #0
 80053a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80053a6:	2300      	movs	r3, #0
 80053a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80053aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005424 <HAL_RCC_GetSysClockFreq+0x94>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d002      	beq.n	80053c0 <HAL_RCC_GetSysClockFreq+0x30>
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d003      	beq.n	80053c6 <HAL_RCC_GetSysClockFreq+0x36>
 80053be:	e027      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053c0:	4b19      	ldr	r3, [pc, #100]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x98>)
 80053c2:	613b      	str	r3, [r7, #16]
      break;
 80053c4:	e027      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	0c9b      	lsrs	r3, r3, #18
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	4a17      	ldr	r2, [pc, #92]	@ (800542c <HAL_RCC_GetSysClockFreq+0x9c>)
 80053d0:	5cd3      	ldrb	r3, [r2, r3]
 80053d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d010      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053de:	4b11      	ldr	r3, [pc, #68]	@ (8005424 <HAL_RCC_GetSysClockFreq+0x94>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	0c5b      	lsrs	r3, r3, #17
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	4a11      	ldr	r2, [pc, #68]	@ (8005430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80053ea:	5cd3      	ldrb	r3, [r2, r3]
 80053ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x98>)
 80053f2:	fb03 f202 	mul.w	r2, r3, r2
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	e004      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a0c      	ldr	r2, [pc, #48]	@ (8005434 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005404:	fb02 f303 	mul.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	613b      	str	r3, [r7, #16]
      break;
 800540e:	e002      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005410:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <HAL_RCC_GetSysClockFreq+0x98>)
 8005412:	613b      	str	r3, [r7, #16]
      break;
 8005414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005416:	693b      	ldr	r3, [r7, #16]
}
 8005418:	4618      	mov	r0, r3
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40021000 	.word	0x40021000
 8005428:	007a1200 	.word	0x007a1200
 800542c:	0800ab58 	.word	0x0800ab58
 8005430:	0800ab68 	.word	0x0800ab68
 8005434:	003d0900 	.word	0x003d0900

08005438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800543c:	4b02      	ldr	r3, [pc, #8]	@ (8005448 <HAL_RCC_GetHCLKFreq+0x10>)
 800543e:	681b      	ldr	r3, [r3, #0]
}
 8005440:	4618      	mov	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr
 8005448:	20000000 	.word	0x20000000

0800544c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005450:	f7ff fff2 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b05      	ldr	r3, [pc, #20]	@ (800546c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	0a1b      	lsrs	r3, r3, #8
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4903      	ldr	r1, [pc, #12]	@ (8005470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000
 8005470:	0800ab50 	.word	0x0800ab50

08005474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005478:	f7ff ffde 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b05      	ldr	r3, [pc, #20]	@ (8005494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	0adb      	lsrs	r3, r3, #11
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4903      	ldr	r1, [pc, #12]	@ (8005498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005490:	4618      	mov	r0, r3
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40021000 	.word	0x40021000
 8005498:	0800ab50 	.word	0x0800ab50

0800549c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054a4:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <RCC_Delay+0x34>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a0a      	ldr	r2, [pc, #40]	@ (80054d4 <RCC_Delay+0x38>)
 80054aa:	fba2 2303 	umull	r2, r3, r2, r3
 80054ae:	0a5b      	lsrs	r3, r3, #9
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	fb02 f303 	mul.w	r3, r2, r3
 80054b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054b8:	bf00      	nop
  }
  while (Delay --);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	1e5a      	subs	r2, r3, #1
 80054be:	60fa      	str	r2, [r7, #12]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f9      	bne.n	80054b8 <RCC_Delay+0x1c>
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr
 80054d0:	20000000 	.word	0x20000000
 80054d4:	10624dd3 	.word	0x10624dd3

080054d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d07d      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054f4:	2300      	movs	r3, #0
 80054f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f8:	4b4f      	ldr	r3, [pc, #316]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10d      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005504:	4b4c      	ldr	r3, [pc, #304]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	4a4b      	ldr	r2, [pc, #300]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800550a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800550e:	61d3      	str	r3, [r2, #28]
 8005510:	4b49      	ldr	r3, [pc, #292]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551c:	2301      	movs	r3, #1
 800551e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005520:	4b46      	ldr	r3, [pc, #280]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d118      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800552c:	4b43      	ldr	r3, [pc, #268]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a42      	ldr	r2, [pc, #264]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005536:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005538:	f7fc fc18 	bl	8001d6c <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553e:	e008      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005540:	f7fc fc14 	bl	8001d6c <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b64      	cmp	r3, #100	@ 0x64
 800554c:	d901      	bls.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e06d      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005552:	4b3a      	ldr	r3, [pc, #232]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f0      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800555e:	4b36      	ldr	r3, [pc, #216]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005566:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d02e      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	429a      	cmp	r2, r3
 800557a:	d027      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800557c:	4b2e      	ldr	r3, [pc, #184]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005584:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005586:	4b2e      	ldr	r3, [pc, #184]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800558c:	4b2c      	ldr	r3, [pc, #176]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005592:	4a29      	ldr	r2, [pc, #164]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d014      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a2:	f7fc fbe3 	bl	8001d6c <HAL_GetTick>
 80055a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a8:	e00a      	b.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055aa:	f7fc fbdf 	bl	8001d6c <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e036      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0ee      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	4917      	ldr	r1, [pc, #92]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d105      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e4:	4b14      	ldr	r3, [pc, #80]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	4a13      	ldr	r2, [pc, #76]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	490b      	ldr	r1, [pc, #44]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560a:	4313      	orrs	r3, r2
 800560c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	d008      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800561a:	4b07      	ldr	r3, [pc, #28]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	4904      	ldr	r1, [pc, #16]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005628:	4313      	orrs	r3, r2
 800562a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
 800563c:	40007000 	.word	0x40007000
 8005640:	42420440 	.word	0x42420440

08005644 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e041      	b.n	80056da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fc fa12 	bl	8001a94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f000 f992 	bl	80059ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <HAL_TIM_PWM_Start+0x24>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	bf14      	ite	ne
 8005700:	2301      	movne	r3, #1
 8005702:	2300      	moveq	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	e022      	b.n	800574e <HAL_TIM_PWM_Start+0x6a>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b04      	cmp	r3, #4
 800570c:	d109      	bne.n	8005722 <HAL_TIM_PWM_Start+0x3e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b01      	cmp	r3, #1
 8005718:	bf14      	ite	ne
 800571a:	2301      	movne	r3, #1
 800571c:	2300      	moveq	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	e015      	b.n	800574e <HAL_TIM_PWM_Start+0x6a>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d109      	bne.n	800573c <HAL_TIM_PWM_Start+0x58>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	bf14      	ite	ne
 8005734:	2301      	movne	r3, #1
 8005736:	2300      	moveq	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	e008      	b.n	800574e <HAL_TIM_PWM_Start+0x6a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	bf14      	ite	ne
 8005748:	2301      	movne	r3, #1
 800574a:	2300      	moveq	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e05e      	b.n	8005814 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <HAL_TIM_PWM_Start+0x82>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005764:	e013      	b.n	800578e <HAL_TIM_PWM_Start+0xaa>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b04      	cmp	r3, #4
 800576a:	d104      	bne.n	8005776 <HAL_TIM_PWM_Start+0x92>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005774:	e00b      	b.n	800578e <HAL_TIM_PWM_Start+0xaa>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b08      	cmp	r3, #8
 800577a:	d104      	bne.n	8005786 <HAL_TIM_PWM_Start+0xa2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005784:	e003      	b.n	800578e <HAL_TIM_PWM_Start+0xaa>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2201      	movs	r2, #1
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fafe 	bl	8005d98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1e      	ldr	r2, [pc, #120]	@ (800581c <HAL_TIM_PWM_Start+0x138>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d107      	bne.n	80057b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a18      	ldr	r2, [pc, #96]	@ (800581c <HAL_TIM_PWM_Start+0x138>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d00e      	beq.n	80057de <HAL_TIM_PWM_Start+0xfa>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c8:	d009      	beq.n	80057de <HAL_TIM_PWM_Start+0xfa>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a14      	ldr	r2, [pc, #80]	@ (8005820 <HAL_TIM_PWM_Start+0x13c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_TIM_PWM_Start+0xfa>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a12      	ldr	r2, [pc, #72]	@ (8005824 <HAL_TIM_PWM_Start+0x140>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d111      	bne.n	8005802 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b06      	cmp	r3, #6
 80057ee:	d010      	beq.n	8005812 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005800:	e007      	b.n	8005812 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0201 	orr.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40012c00 	.word	0x40012c00
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800

08005828 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800583e:	2b01      	cmp	r3, #1
 8005840:	d101      	bne.n	8005846 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005842:	2302      	movs	r3, #2
 8005844:	e0ae      	b.n	80059a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b0c      	cmp	r3, #12
 8005852:	f200 809f 	bhi.w	8005994 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005856:	a201      	add	r2, pc, #4	@ (adr r2, 800585c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585c:	08005891 	.word	0x08005891
 8005860:	08005995 	.word	0x08005995
 8005864:	08005995 	.word	0x08005995
 8005868:	08005995 	.word	0x08005995
 800586c:	080058d1 	.word	0x080058d1
 8005870:	08005995 	.word	0x08005995
 8005874:	08005995 	.word	0x08005995
 8005878:	08005995 	.word	0x08005995
 800587c:	08005913 	.word	0x08005913
 8005880:	08005995 	.word	0x08005995
 8005884:	08005995 	.word	0x08005995
 8005888:	08005995 	.word	0x08005995
 800588c:	08005953 	.word	0x08005953
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f8f6 	bl	8005a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0208 	orr.w	r2, r2, #8
 80058aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0204 	bic.w	r2, r2, #4
 80058ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6999      	ldr	r1, [r3, #24]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	619a      	str	r2, [r3, #24]
      break;
 80058ce:	e064      	b.n	800599a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 f93c 	bl	8005b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6999      	ldr	r1, [r3, #24]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	021a      	lsls	r2, r3, #8
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	619a      	str	r2, [r3, #24]
      break;
 8005910:	e043      	b.n	800599a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	4618      	mov	r0, r3
 800591a:	f000 f985 	bl	8005c28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f042 0208 	orr.w	r2, r2, #8
 800592c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0204 	bic.w	r2, r2, #4
 800593c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	69d9      	ldr	r1, [r3, #28]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	61da      	str	r2, [r3, #28]
      break;
 8005950:	e023      	b.n	800599a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	4618      	mov	r0, r3
 800595a:	f000 f9cf 	bl	8005cfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800596c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800597c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69d9      	ldr	r1, [r3, #28]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	021a      	lsls	r2, r3, #8
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	61da      	str	r2, [r3, #28]
      break;
 8005992:	e002      	b.n	800599a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	75fb      	strb	r3, [r7, #23]
      break;
 8005998:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a2f      	ldr	r2, [pc, #188]	@ (8005a7c <TIM_Base_SetConfig+0xd0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00b      	beq.n	80059dc <TIM_Base_SetConfig+0x30>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ca:	d007      	beq.n	80059dc <TIM_Base_SetConfig+0x30>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005a80 <TIM_Base_SetConfig+0xd4>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d003      	beq.n	80059dc <TIM_Base_SetConfig+0x30>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a2b      	ldr	r2, [pc, #172]	@ (8005a84 <TIM_Base_SetConfig+0xd8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d108      	bne.n	80059ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a22      	ldr	r2, [pc, #136]	@ (8005a7c <TIM_Base_SetConfig+0xd0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00b      	beq.n	8005a0e <TIM_Base_SetConfig+0x62>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059fc:	d007      	beq.n	8005a0e <TIM_Base_SetConfig+0x62>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a1f      	ldr	r2, [pc, #124]	@ (8005a80 <TIM_Base_SetConfig+0xd4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_Base_SetConfig+0x62>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a1e      	ldr	r2, [pc, #120]	@ (8005a84 <TIM_Base_SetConfig+0xd8>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d108      	bne.n	8005a20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a0d      	ldr	r2, [pc, #52]	@ (8005a7c <TIM_Base_SetConfig+0xd0>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d103      	bne.n	8005a54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f023 0201 	bic.w	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	611a      	str	r2, [r3, #16]
  }
}
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	40012c00 	.word	0x40012c00
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800

08005a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	f023 0201 	bic.w	r2, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0303 	bic.w	r3, r3, #3
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f023 0302 	bic.w	r3, r3, #2
 8005ad0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a1c      	ldr	r2, [pc, #112]	@ (8005b50 <TIM_OC1_SetConfig+0xc8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d10c      	bne.n	8005afe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f023 0308 	bic.w	r3, r3, #8
 8005aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f023 0304 	bic.w	r3, r3, #4
 8005afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a13      	ldr	r2, [pc, #76]	@ (8005b50 <TIM_OC1_SetConfig+0xc8>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d111      	bne.n	8005b2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	621a      	str	r2, [r3, #32]
}
 8005b44:	bf00      	nop
 8005b46:	371c      	adds	r7, #28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40012c00 	.word	0x40012c00

08005b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f023 0210 	bic.w	r2, r3, #16
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f023 0320 	bic.w	r3, r3, #32
 8005b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a1d      	ldr	r2, [pc, #116]	@ (8005c24 <TIM_OC2_SetConfig+0xd0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d10d      	bne.n	8005bd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a14      	ldr	r2, [pc, #80]	@ (8005c24 <TIM_OC2_SetConfig+0xd0>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d113      	bne.n	8005c00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005be6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr
 8005c24:	40012c00 	.word	0x40012c00

08005c28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0303 	bic.w	r3, r3, #3
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf8 <TIM_OC3_SetConfig+0xd0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d10d      	bne.n	8005ca2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a14      	ldr	r2, [pc, #80]	@ (8005cf8 <TIM_OC3_SetConfig+0xd0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d113      	bne.n	8005cd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	621a      	str	r2, [r3, #32]
}
 8005cec:	bf00      	nop
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bc80      	pop	{r7}
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40012c00 	.word	0x40012c00

08005cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	031b      	lsls	r3, r3, #12
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a0f      	ldr	r2, [pc, #60]	@ (8005d94 <TIM_OC4_SetConfig+0x98>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d109      	bne.n	8005d70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	019b      	lsls	r3, r3, #6
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr
 8005d94:	40012c00 	.word	0x40012c00

08005d98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	2201      	movs	r2, #1
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1a      	ldr	r2, [r3, #32]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	43db      	mvns	r3, r3
 8005dba:	401a      	ands	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1a      	ldr	r2, [r3, #32]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e046      	b.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a16      	ldr	r2, [pc, #88]	@ (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00e      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e44:	d009      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a12      	ldr	r2, [pc, #72]	@ (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d004      	beq.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a10      	ldr	r2, [pc, #64]	@ (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10c      	bne.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bc80      	pop	{r7}
 8005e8e:	4770      	bx	lr
 8005e90:	40012c00 	.word	0x40012c00
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40000800 	.word	0x40000800

08005e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e042      	b.n	8005f34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fb fe60 	bl	8001b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2224      	movs	r2, #36	@ 0x24
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f971 	bl	80061c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695a      	ldr	r2, [r3, #20]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3708      	adds	r7, #8
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08a      	sub	sp, #40	@ 0x28
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d175      	bne.n	8006048 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_UART_Transmit+0x2c>
 8005f62:	88fb      	ldrh	r3, [r7, #6]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e06e      	b.n	800604a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2221      	movs	r2, #33	@ 0x21
 8005f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f7a:	f7fb fef7 	bl	8001d6c <HAL_GetTick>
 8005f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	88fa      	ldrh	r2, [r7, #6]
 8005f84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	88fa      	ldrh	r2, [r7, #6]
 8005f8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f94:	d108      	bne.n	8005fa8 <HAL_UART_Transmit+0x6c>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d104      	bne.n	8005fa8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	e003      	b.n	8005fb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fb0:	e02e      	b.n	8006010 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2180      	movs	r1, #128	@ 0x80
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f848 	bl	8006052 <UART_WaitOnFlagUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e03a      	b.n	800604a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fe8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	3302      	adds	r3, #2
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	e007      	b.n	8006002 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	3301      	adds	r3, #1
 8006000:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1cb      	bne.n	8005fb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2200      	movs	r2, #0
 8006022:	2140      	movs	r1, #64	@ 0x40
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f814 	bl	8006052 <UART_WaitOnFlagUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e006      	b.n	800604a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b086      	sub	sp, #24
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	4613      	mov	r3, r2
 8006060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006062:	e03b      	b.n	80060dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800606a:	d037      	beq.n	80060dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800606c:	f7fb fe7e 	bl	8001d6c <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	6a3a      	ldr	r2, [r7, #32]
 8006078:	429a      	cmp	r2, r3
 800607a:	d302      	bcc.n	8006082 <UART_WaitOnFlagUntilTimeout+0x30>
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e03a      	b.n	80060fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d023      	beq.n	80060dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b80      	cmp	r3, #128	@ 0x80
 8006098:	d020      	beq.n	80060dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b40      	cmp	r3, #64	@ 0x40
 800609e:	d01d      	beq.n	80060dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d116      	bne.n	80060dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f81d 	bl	8006104 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2208      	movs	r2, #8
 80060ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e00f      	b.n	80060fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4013      	ands	r3, r2
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	bf0c      	ite	eq
 80060ec:	2301      	moveq	r3, #1
 80060ee:	2300      	movne	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	461a      	mov	r2, r3
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d0b4      	beq.n	8006064 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006104:	b480      	push	{r7}
 8006106:	b095      	sub	sp, #84	@ 0x54
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	330c      	adds	r3, #12
 800612a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800612c:	643a      	str	r2, [r7, #64]	@ 0x40
 800612e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800613a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e5      	bne.n	800610c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	3314      	adds	r3, #20
 8006146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	f023 0301 	bic.w	r3, r3, #1
 8006156:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3314      	adds	r3, #20
 800615e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006160:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006162:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e5      	bne.n	8006140 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006178:	2b01      	cmp	r3, #1
 800617a:	d119      	bne.n	80061b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	60bb      	str	r3, [r7, #8]
   return(result);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f023 0310 	bic.w	r3, r3, #16
 8006192:	647b      	str	r3, [r7, #68]	@ 0x44
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800619c:	61ba      	str	r2, [r7, #24]
 800619e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	6979      	ldr	r1, [r7, #20]
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	613b      	str	r3, [r7, #16]
   return(result);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e5      	bne.n	800617c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061be:	bf00      	nop
 80061c0:	3754      	adds	r7, #84	@ 0x54
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr

080061c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006202:	f023 030c 	bic.w	r3, r3, #12
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	430b      	orrs	r3, r1
 800620e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a2c      	ldr	r2, [pc, #176]	@ (80062dc <UART_SetConfig+0x114>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d103      	bne.n	8006238 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006230:	f7ff f920 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	e002      	b.n	800623e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006238:	f7ff f908 	bl	800544c <HAL_RCC_GetPCLK1Freq>
 800623c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009a      	lsls	r2, r3, #2
 8006248:	441a      	add	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	fbb2 f3f3 	udiv	r3, r2, r3
 8006254:	4a22      	ldr	r2, [pc, #136]	@ (80062e0 <UART_SetConfig+0x118>)
 8006256:	fba2 2303 	umull	r2, r3, r2, r3
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	0119      	lsls	r1, r3, #4
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	009a      	lsls	r2, r3, #2
 8006268:	441a      	add	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	fbb2 f2f3 	udiv	r2, r2, r3
 8006274:	4b1a      	ldr	r3, [pc, #104]	@ (80062e0 <UART_SetConfig+0x118>)
 8006276:	fba3 0302 	umull	r0, r3, r3, r2
 800627a:	095b      	lsrs	r3, r3, #5
 800627c:	2064      	movs	r0, #100	@ 0x64
 800627e:	fb00 f303 	mul.w	r3, r0, r3
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	3332      	adds	r3, #50	@ 0x32
 8006288:	4a15      	ldr	r2, [pc, #84]	@ (80062e0 <UART_SetConfig+0x118>)
 800628a:	fba2 2303 	umull	r2, r3, r2, r3
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006294:	4419      	add	r1, r3
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	009a      	lsls	r2, r3, #2
 80062a0:	441a      	add	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80062ac:	4b0c      	ldr	r3, [pc, #48]	@ (80062e0 <UART_SetConfig+0x118>)
 80062ae:	fba3 0302 	umull	r0, r3, r3, r2
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	2064      	movs	r0, #100	@ 0x64
 80062b6:	fb00 f303 	mul.w	r3, r0, r3
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	3332      	adds	r3, #50	@ 0x32
 80062c0:	4a07      	ldr	r2, [pc, #28]	@ (80062e0 <UART_SetConfig+0x118>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	f003 020f 	and.w	r2, r3, #15
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	440a      	add	r2, r1
 80062d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40013800 	.word	0x40013800
 80062e0:	51eb851f 	.word	0x51eb851f

080062e4 <__cvt>:
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ea:	461d      	mov	r5, r3
 80062ec:	bfbb      	ittet	lt
 80062ee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80062f2:	461d      	movlt	r5, r3
 80062f4:	2300      	movge	r3, #0
 80062f6:	232d      	movlt	r3, #45	@ 0x2d
 80062f8:	b088      	sub	sp, #32
 80062fa:	4614      	mov	r4, r2
 80062fc:	bfb8      	it	lt
 80062fe:	4614      	movlt	r4, r2
 8006300:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006302:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006304:	7013      	strb	r3, [r2, #0]
 8006306:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006308:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800630c:	f023 0820 	bic.w	r8, r3, #32
 8006310:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006314:	d005      	beq.n	8006322 <__cvt+0x3e>
 8006316:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800631a:	d100      	bne.n	800631e <__cvt+0x3a>
 800631c:	3601      	adds	r6, #1
 800631e:	2302      	movs	r3, #2
 8006320:	e000      	b.n	8006324 <__cvt+0x40>
 8006322:	2303      	movs	r3, #3
 8006324:	aa07      	add	r2, sp, #28
 8006326:	9204      	str	r2, [sp, #16]
 8006328:	aa06      	add	r2, sp, #24
 800632a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800632e:	e9cd 3600 	strd	r3, r6, [sp]
 8006332:	4622      	mov	r2, r4
 8006334:	462b      	mov	r3, r5
 8006336:	f001 fecf 	bl	80080d8 <_dtoa_r>
 800633a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800633e:	4607      	mov	r7, r0
 8006340:	d119      	bne.n	8006376 <__cvt+0x92>
 8006342:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006344:	07db      	lsls	r3, r3, #31
 8006346:	d50e      	bpl.n	8006366 <__cvt+0x82>
 8006348:	eb00 0906 	add.w	r9, r0, r6
 800634c:	2200      	movs	r2, #0
 800634e:	2300      	movs	r3, #0
 8006350:	4620      	mov	r0, r4
 8006352:	4629      	mov	r1, r5
 8006354:	f7fa fb28 	bl	80009a8 <__aeabi_dcmpeq>
 8006358:	b108      	cbz	r0, 800635e <__cvt+0x7a>
 800635a:	f8cd 901c 	str.w	r9, [sp, #28]
 800635e:	2230      	movs	r2, #48	@ 0x30
 8006360:	9b07      	ldr	r3, [sp, #28]
 8006362:	454b      	cmp	r3, r9
 8006364:	d31e      	bcc.n	80063a4 <__cvt+0xc0>
 8006366:	4638      	mov	r0, r7
 8006368:	9b07      	ldr	r3, [sp, #28]
 800636a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800636c:	1bdb      	subs	r3, r3, r7
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	b008      	add	sp, #32
 8006372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006376:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800637a:	eb00 0906 	add.w	r9, r0, r6
 800637e:	d1e5      	bne.n	800634c <__cvt+0x68>
 8006380:	7803      	ldrb	r3, [r0, #0]
 8006382:	2b30      	cmp	r3, #48	@ 0x30
 8006384:	d10a      	bne.n	800639c <__cvt+0xb8>
 8006386:	2200      	movs	r2, #0
 8006388:	2300      	movs	r3, #0
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7fa fb0b 	bl	80009a8 <__aeabi_dcmpeq>
 8006392:	b918      	cbnz	r0, 800639c <__cvt+0xb8>
 8006394:	f1c6 0601 	rsb	r6, r6, #1
 8006398:	f8ca 6000 	str.w	r6, [sl]
 800639c:	f8da 3000 	ldr.w	r3, [sl]
 80063a0:	4499      	add	r9, r3
 80063a2:	e7d3      	b.n	800634c <__cvt+0x68>
 80063a4:	1c59      	adds	r1, r3, #1
 80063a6:	9107      	str	r1, [sp, #28]
 80063a8:	701a      	strb	r2, [r3, #0]
 80063aa:	e7d9      	b.n	8006360 <__cvt+0x7c>

080063ac <__exponent>:
 80063ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ae:	2900      	cmp	r1, #0
 80063b0:	bfb6      	itet	lt
 80063b2:	232d      	movlt	r3, #45	@ 0x2d
 80063b4:	232b      	movge	r3, #43	@ 0x2b
 80063b6:	4249      	neglt	r1, r1
 80063b8:	2909      	cmp	r1, #9
 80063ba:	7002      	strb	r2, [r0, #0]
 80063bc:	7043      	strb	r3, [r0, #1]
 80063be:	dd29      	ble.n	8006414 <__exponent+0x68>
 80063c0:	f10d 0307 	add.w	r3, sp, #7
 80063c4:	461d      	mov	r5, r3
 80063c6:	270a      	movs	r7, #10
 80063c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80063cc:	461a      	mov	r2, r3
 80063ce:	fb07 1416 	mls	r4, r7, r6, r1
 80063d2:	3430      	adds	r4, #48	@ 0x30
 80063d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063d8:	460c      	mov	r4, r1
 80063da:	2c63      	cmp	r4, #99	@ 0x63
 80063dc:	4631      	mov	r1, r6
 80063de:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80063e2:	dcf1      	bgt.n	80063c8 <__exponent+0x1c>
 80063e4:	3130      	adds	r1, #48	@ 0x30
 80063e6:	1e94      	subs	r4, r2, #2
 80063e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063ec:	4623      	mov	r3, r4
 80063ee:	1c41      	adds	r1, r0, #1
 80063f0:	42ab      	cmp	r3, r5
 80063f2:	d30a      	bcc.n	800640a <__exponent+0x5e>
 80063f4:	f10d 0309 	add.w	r3, sp, #9
 80063f8:	1a9b      	subs	r3, r3, r2
 80063fa:	42ac      	cmp	r4, r5
 80063fc:	bf88      	it	hi
 80063fe:	2300      	movhi	r3, #0
 8006400:	3302      	adds	r3, #2
 8006402:	4403      	add	r3, r0
 8006404:	1a18      	subs	r0, r3, r0
 8006406:	b003      	add	sp, #12
 8006408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800640a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800640e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006412:	e7ed      	b.n	80063f0 <__exponent+0x44>
 8006414:	2330      	movs	r3, #48	@ 0x30
 8006416:	3130      	adds	r1, #48	@ 0x30
 8006418:	7083      	strb	r3, [r0, #2]
 800641a:	70c1      	strb	r1, [r0, #3]
 800641c:	1d03      	adds	r3, r0, #4
 800641e:	e7f1      	b.n	8006404 <__exponent+0x58>

08006420 <_printf_float>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	b091      	sub	sp, #68	@ 0x44
 8006426:	460c      	mov	r4, r1
 8006428:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800642c:	4616      	mov	r6, r2
 800642e:	461f      	mov	r7, r3
 8006430:	4605      	mov	r5, r0
 8006432:	f001 fd6f 	bl	8007f14 <_localeconv_r>
 8006436:	6803      	ldr	r3, [r0, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	9308      	str	r3, [sp, #32]
 800643c:	f7f9 fe88 	bl	8000150 <strlen>
 8006440:	2300      	movs	r3, #0
 8006442:	930e      	str	r3, [sp, #56]	@ 0x38
 8006444:	f8d8 3000 	ldr.w	r3, [r8]
 8006448:	9009      	str	r0, [sp, #36]	@ 0x24
 800644a:	3307      	adds	r3, #7
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	f103 0208 	add.w	r2, r3, #8
 8006454:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006458:	f8d4 b000 	ldr.w	fp, [r4]
 800645c:	f8c8 2000 	str.w	r2, [r8]
 8006460:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006464:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800646a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800646e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006472:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006476:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800647a:	4b9c      	ldr	r3, [pc, #624]	@ (80066ec <_printf_float+0x2cc>)
 800647c:	f7fa fac6 	bl	8000a0c <__aeabi_dcmpun>
 8006480:	bb70      	cbnz	r0, 80064e0 <_printf_float+0xc0>
 8006482:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006486:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800648a:	4b98      	ldr	r3, [pc, #608]	@ (80066ec <_printf_float+0x2cc>)
 800648c:	f7fa faa0 	bl	80009d0 <__aeabi_dcmple>
 8006490:	bb30      	cbnz	r0, 80064e0 <_printf_float+0xc0>
 8006492:	2200      	movs	r2, #0
 8006494:	2300      	movs	r3, #0
 8006496:	4640      	mov	r0, r8
 8006498:	4649      	mov	r1, r9
 800649a:	f7fa fa8f 	bl	80009bc <__aeabi_dcmplt>
 800649e:	b110      	cbz	r0, 80064a6 <_printf_float+0x86>
 80064a0:	232d      	movs	r3, #45	@ 0x2d
 80064a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a6:	4a92      	ldr	r2, [pc, #584]	@ (80066f0 <_printf_float+0x2d0>)
 80064a8:	4b92      	ldr	r3, [pc, #584]	@ (80066f4 <_printf_float+0x2d4>)
 80064aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064ae:	bf94      	ite	ls
 80064b0:	4690      	movls	r8, r2
 80064b2:	4698      	movhi	r8, r3
 80064b4:	2303      	movs	r3, #3
 80064b6:	f04f 0900 	mov.w	r9, #0
 80064ba:	6123      	str	r3, [r4, #16]
 80064bc:	f02b 0304 	bic.w	r3, fp, #4
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	4633      	mov	r3, r6
 80064c4:	4621      	mov	r1, r4
 80064c6:	4628      	mov	r0, r5
 80064c8:	9700      	str	r7, [sp, #0]
 80064ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 80064cc:	f000 f9d4 	bl	8006878 <_printf_common>
 80064d0:	3001      	adds	r0, #1
 80064d2:	f040 8090 	bne.w	80065f6 <_printf_float+0x1d6>
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064da:	b011      	add	sp, #68	@ 0x44
 80064dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e0:	4642      	mov	r2, r8
 80064e2:	464b      	mov	r3, r9
 80064e4:	4640      	mov	r0, r8
 80064e6:	4649      	mov	r1, r9
 80064e8:	f7fa fa90 	bl	8000a0c <__aeabi_dcmpun>
 80064ec:	b148      	cbz	r0, 8006502 <_printf_float+0xe2>
 80064ee:	464b      	mov	r3, r9
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bfb8      	it	lt
 80064f4:	232d      	movlt	r3, #45	@ 0x2d
 80064f6:	4a80      	ldr	r2, [pc, #512]	@ (80066f8 <_printf_float+0x2d8>)
 80064f8:	bfb8      	it	lt
 80064fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80064fe:	4b7f      	ldr	r3, [pc, #508]	@ (80066fc <_printf_float+0x2dc>)
 8006500:	e7d3      	b.n	80064aa <_printf_float+0x8a>
 8006502:	6863      	ldr	r3, [r4, #4]
 8006504:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	d13f      	bne.n	800658c <_printf_float+0x16c>
 800650c:	2306      	movs	r3, #6
 800650e:	6063      	str	r3, [r4, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	9206      	str	r2, [sp, #24]
 800651a:	aa0e      	add	r2, sp, #56	@ 0x38
 800651c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006520:	aa0d      	add	r2, sp, #52	@ 0x34
 8006522:	9203      	str	r2, [sp, #12]
 8006524:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006528:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	4642      	mov	r2, r8
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	4628      	mov	r0, r5
 8006534:	464b      	mov	r3, r9
 8006536:	910a      	str	r1, [sp, #40]	@ 0x28
 8006538:	f7ff fed4 	bl	80062e4 <__cvt>
 800653c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800653e:	4680      	mov	r8, r0
 8006540:	2947      	cmp	r1, #71	@ 0x47
 8006542:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006544:	d128      	bne.n	8006598 <_printf_float+0x178>
 8006546:	1cc8      	adds	r0, r1, #3
 8006548:	db02      	blt.n	8006550 <_printf_float+0x130>
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	4299      	cmp	r1, r3
 800654e:	dd40      	ble.n	80065d2 <_printf_float+0x1b2>
 8006550:	f1aa 0a02 	sub.w	sl, sl, #2
 8006554:	fa5f fa8a 	uxtb.w	sl, sl
 8006558:	4652      	mov	r2, sl
 800655a:	3901      	subs	r1, #1
 800655c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006560:	910d      	str	r1, [sp, #52]	@ 0x34
 8006562:	f7ff ff23 	bl	80063ac <__exponent>
 8006566:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006568:	4681      	mov	r9, r0
 800656a:	1813      	adds	r3, r2, r0
 800656c:	2a01      	cmp	r2, #1
 800656e:	6123      	str	r3, [r4, #16]
 8006570:	dc02      	bgt.n	8006578 <_printf_float+0x158>
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	07d2      	lsls	r2, r2, #31
 8006576:	d501      	bpl.n	800657c <_printf_float+0x15c>
 8006578:	3301      	adds	r3, #1
 800657a:	6123      	str	r3, [r4, #16]
 800657c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006580:	2b00      	cmp	r3, #0
 8006582:	d09e      	beq.n	80064c2 <_printf_float+0xa2>
 8006584:	232d      	movs	r3, #45	@ 0x2d
 8006586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800658a:	e79a      	b.n	80064c2 <_printf_float+0xa2>
 800658c:	2947      	cmp	r1, #71	@ 0x47
 800658e:	d1bf      	bne.n	8006510 <_printf_float+0xf0>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1bd      	bne.n	8006510 <_printf_float+0xf0>
 8006594:	2301      	movs	r3, #1
 8006596:	e7ba      	b.n	800650e <_printf_float+0xee>
 8006598:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800659c:	d9dc      	bls.n	8006558 <_printf_float+0x138>
 800659e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80065a2:	d118      	bne.n	80065d6 <_printf_float+0x1b6>
 80065a4:	2900      	cmp	r1, #0
 80065a6:	6863      	ldr	r3, [r4, #4]
 80065a8:	dd0b      	ble.n	80065c2 <_printf_float+0x1a2>
 80065aa:	6121      	str	r1, [r4, #16]
 80065ac:	b913      	cbnz	r3, 80065b4 <_printf_float+0x194>
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	07d0      	lsls	r0, r2, #31
 80065b2:	d502      	bpl.n	80065ba <_printf_float+0x19a>
 80065b4:	3301      	adds	r3, #1
 80065b6:	440b      	add	r3, r1
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	f04f 0900 	mov.w	r9, #0
 80065be:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065c0:	e7dc      	b.n	800657c <_printf_float+0x15c>
 80065c2:	b913      	cbnz	r3, 80065ca <_printf_float+0x1aa>
 80065c4:	6822      	ldr	r2, [r4, #0]
 80065c6:	07d2      	lsls	r2, r2, #31
 80065c8:	d501      	bpl.n	80065ce <_printf_float+0x1ae>
 80065ca:	3302      	adds	r3, #2
 80065cc:	e7f4      	b.n	80065b8 <_printf_float+0x198>
 80065ce:	2301      	movs	r3, #1
 80065d0:	e7f2      	b.n	80065b8 <_printf_float+0x198>
 80065d2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065d8:	4299      	cmp	r1, r3
 80065da:	db05      	blt.n	80065e8 <_printf_float+0x1c8>
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	6121      	str	r1, [r4, #16]
 80065e0:	07d8      	lsls	r0, r3, #31
 80065e2:	d5ea      	bpl.n	80065ba <_printf_float+0x19a>
 80065e4:	1c4b      	adds	r3, r1, #1
 80065e6:	e7e7      	b.n	80065b8 <_printf_float+0x198>
 80065e8:	2900      	cmp	r1, #0
 80065ea:	bfcc      	ite	gt
 80065ec:	2201      	movgt	r2, #1
 80065ee:	f1c1 0202 	rsble	r2, r1, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	e7e0      	b.n	80065b8 <_printf_float+0x198>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	055a      	lsls	r2, r3, #21
 80065fa:	d407      	bmi.n	800660c <_printf_float+0x1ec>
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	4642      	mov	r2, r8
 8006600:	4631      	mov	r1, r6
 8006602:	4628      	mov	r0, r5
 8006604:	47b8      	blx	r7
 8006606:	3001      	adds	r0, #1
 8006608:	d12b      	bne.n	8006662 <_printf_float+0x242>
 800660a:	e764      	b.n	80064d6 <_printf_float+0xb6>
 800660c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006610:	f240 80dc 	bls.w	80067cc <_printf_float+0x3ac>
 8006614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006618:	2200      	movs	r2, #0
 800661a:	2300      	movs	r3, #0
 800661c:	f7fa f9c4 	bl	80009a8 <__aeabi_dcmpeq>
 8006620:	2800      	cmp	r0, #0
 8006622:	d033      	beq.n	800668c <_printf_float+0x26c>
 8006624:	2301      	movs	r3, #1
 8006626:	4631      	mov	r1, r6
 8006628:	4628      	mov	r0, r5
 800662a:	4a35      	ldr	r2, [pc, #212]	@ (8006700 <_printf_float+0x2e0>)
 800662c:	47b8      	blx	r7
 800662e:	3001      	adds	r0, #1
 8006630:	f43f af51 	beq.w	80064d6 <_printf_float+0xb6>
 8006634:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006638:	4543      	cmp	r3, r8
 800663a:	db02      	blt.n	8006642 <_printf_float+0x222>
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	07d8      	lsls	r0, r3, #31
 8006640:	d50f      	bpl.n	8006662 <_printf_float+0x242>
 8006642:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	f43f af42 	beq.w	80064d6 <_printf_float+0xb6>
 8006652:	f04f 0900 	mov.w	r9, #0
 8006656:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800665a:	f104 0a1a 	add.w	sl, r4, #26
 800665e:	45c8      	cmp	r8, r9
 8006660:	dc09      	bgt.n	8006676 <_printf_float+0x256>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	079b      	lsls	r3, r3, #30
 8006666:	f100 8102 	bmi.w	800686e <_printf_float+0x44e>
 800666a:	68e0      	ldr	r0, [r4, #12]
 800666c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800666e:	4298      	cmp	r0, r3
 8006670:	bfb8      	it	lt
 8006672:	4618      	movlt	r0, r3
 8006674:	e731      	b.n	80064da <_printf_float+0xba>
 8006676:	2301      	movs	r3, #1
 8006678:	4652      	mov	r2, sl
 800667a:	4631      	mov	r1, r6
 800667c:	4628      	mov	r0, r5
 800667e:	47b8      	blx	r7
 8006680:	3001      	adds	r0, #1
 8006682:	f43f af28 	beq.w	80064d6 <_printf_float+0xb6>
 8006686:	f109 0901 	add.w	r9, r9, #1
 800668a:	e7e8      	b.n	800665e <_printf_float+0x23e>
 800668c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800668e:	2b00      	cmp	r3, #0
 8006690:	dc38      	bgt.n	8006704 <_printf_float+0x2e4>
 8006692:	2301      	movs	r3, #1
 8006694:	4631      	mov	r1, r6
 8006696:	4628      	mov	r0, r5
 8006698:	4a19      	ldr	r2, [pc, #100]	@ (8006700 <_printf_float+0x2e0>)
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	f43f af1a 	beq.w	80064d6 <_printf_float+0xb6>
 80066a2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80066a6:	ea59 0303 	orrs.w	r3, r9, r3
 80066aa:	d102      	bne.n	80066b2 <_printf_float+0x292>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	07d9      	lsls	r1, r3, #31
 80066b0:	d5d7      	bpl.n	8006662 <_printf_float+0x242>
 80066b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066b6:	4631      	mov	r1, r6
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b8      	blx	r7
 80066bc:	3001      	adds	r0, #1
 80066be:	f43f af0a 	beq.w	80064d6 <_printf_float+0xb6>
 80066c2:	f04f 0a00 	mov.w	sl, #0
 80066c6:	f104 0b1a 	add.w	fp, r4, #26
 80066ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066cc:	425b      	negs	r3, r3
 80066ce:	4553      	cmp	r3, sl
 80066d0:	dc01      	bgt.n	80066d6 <_printf_float+0x2b6>
 80066d2:	464b      	mov	r3, r9
 80066d4:	e793      	b.n	80065fe <_printf_float+0x1de>
 80066d6:	2301      	movs	r3, #1
 80066d8:	465a      	mov	r2, fp
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f aef8 	beq.w	80064d6 <_printf_float+0xb6>
 80066e6:	f10a 0a01 	add.w	sl, sl, #1
 80066ea:	e7ee      	b.n	80066ca <_printf_float+0x2aa>
 80066ec:	7fefffff 	.word	0x7fefffff
 80066f0:	0800ab6a 	.word	0x0800ab6a
 80066f4:	0800ab6e 	.word	0x0800ab6e
 80066f8:	0800ab72 	.word	0x0800ab72
 80066fc:	0800ab76 	.word	0x0800ab76
 8006700:	0800ab7a 	.word	0x0800ab7a
 8006704:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006706:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800670a:	4553      	cmp	r3, sl
 800670c:	bfa8      	it	ge
 800670e:	4653      	movge	r3, sl
 8006710:	2b00      	cmp	r3, #0
 8006712:	4699      	mov	r9, r3
 8006714:	dc36      	bgt.n	8006784 <_printf_float+0x364>
 8006716:	f04f 0b00 	mov.w	fp, #0
 800671a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800671e:	f104 021a 	add.w	r2, r4, #26
 8006722:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006724:	930a      	str	r3, [sp, #40]	@ 0x28
 8006726:	eba3 0309 	sub.w	r3, r3, r9
 800672a:	455b      	cmp	r3, fp
 800672c:	dc31      	bgt.n	8006792 <_printf_float+0x372>
 800672e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006730:	459a      	cmp	sl, r3
 8006732:	dc3a      	bgt.n	80067aa <_printf_float+0x38a>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	07da      	lsls	r2, r3, #31
 8006738:	d437      	bmi.n	80067aa <_printf_float+0x38a>
 800673a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800673c:	ebaa 0903 	sub.w	r9, sl, r3
 8006740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006742:	ebaa 0303 	sub.w	r3, sl, r3
 8006746:	4599      	cmp	r9, r3
 8006748:	bfa8      	it	ge
 800674a:	4699      	movge	r9, r3
 800674c:	f1b9 0f00 	cmp.w	r9, #0
 8006750:	dc33      	bgt.n	80067ba <_printf_float+0x39a>
 8006752:	f04f 0800 	mov.w	r8, #0
 8006756:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800675a:	f104 0b1a 	add.w	fp, r4, #26
 800675e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006760:	ebaa 0303 	sub.w	r3, sl, r3
 8006764:	eba3 0309 	sub.w	r3, r3, r9
 8006768:	4543      	cmp	r3, r8
 800676a:	f77f af7a 	ble.w	8006662 <_printf_float+0x242>
 800676e:	2301      	movs	r3, #1
 8006770:	465a      	mov	r2, fp
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	f43f aeac 	beq.w	80064d6 <_printf_float+0xb6>
 800677e:	f108 0801 	add.w	r8, r8, #1
 8006782:	e7ec      	b.n	800675e <_printf_float+0x33e>
 8006784:	4642      	mov	r2, r8
 8006786:	4631      	mov	r1, r6
 8006788:	4628      	mov	r0, r5
 800678a:	47b8      	blx	r7
 800678c:	3001      	adds	r0, #1
 800678e:	d1c2      	bne.n	8006716 <_printf_float+0x2f6>
 8006790:	e6a1      	b.n	80064d6 <_printf_float+0xb6>
 8006792:	2301      	movs	r3, #1
 8006794:	4631      	mov	r1, r6
 8006796:	4628      	mov	r0, r5
 8006798:	920a      	str	r2, [sp, #40]	@ 0x28
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	f43f ae9a 	beq.w	80064d6 <_printf_float+0xb6>
 80067a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067a4:	f10b 0b01 	add.w	fp, fp, #1
 80067a8:	e7bb      	b.n	8006722 <_printf_float+0x302>
 80067aa:	4631      	mov	r1, r6
 80067ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b8      	blx	r7
 80067b4:	3001      	adds	r0, #1
 80067b6:	d1c0      	bne.n	800673a <_printf_float+0x31a>
 80067b8:	e68d      	b.n	80064d6 <_printf_float+0xb6>
 80067ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067bc:	464b      	mov	r3, r9
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	4442      	add	r2, r8
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	d1c3      	bne.n	8006752 <_printf_float+0x332>
 80067ca:	e684      	b.n	80064d6 <_printf_float+0xb6>
 80067cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80067d0:	f1ba 0f01 	cmp.w	sl, #1
 80067d4:	dc01      	bgt.n	80067da <_printf_float+0x3ba>
 80067d6:	07db      	lsls	r3, r3, #31
 80067d8:	d536      	bpl.n	8006848 <_printf_float+0x428>
 80067da:	2301      	movs	r3, #1
 80067dc:	4642      	mov	r2, r8
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	f43f ae76 	beq.w	80064d6 <_printf_float+0xb6>
 80067ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067ee:	4631      	mov	r1, r6
 80067f0:	4628      	mov	r0, r5
 80067f2:	47b8      	blx	r7
 80067f4:	3001      	adds	r0, #1
 80067f6:	f43f ae6e 	beq.w	80064d6 <_printf_float+0xb6>
 80067fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067fe:	2200      	movs	r2, #0
 8006800:	2300      	movs	r3, #0
 8006802:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006806:	f7fa f8cf 	bl	80009a8 <__aeabi_dcmpeq>
 800680a:	b9c0      	cbnz	r0, 800683e <_printf_float+0x41e>
 800680c:	4653      	mov	r3, sl
 800680e:	f108 0201 	add.w	r2, r8, #1
 8006812:	4631      	mov	r1, r6
 8006814:	4628      	mov	r0, r5
 8006816:	47b8      	blx	r7
 8006818:	3001      	adds	r0, #1
 800681a:	d10c      	bne.n	8006836 <_printf_float+0x416>
 800681c:	e65b      	b.n	80064d6 <_printf_float+0xb6>
 800681e:	2301      	movs	r3, #1
 8006820:	465a      	mov	r2, fp
 8006822:	4631      	mov	r1, r6
 8006824:	4628      	mov	r0, r5
 8006826:	47b8      	blx	r7
 8006828:	3001      	adds	r0, #1
 800682a:	f43f ae54 	beq.w	80064d6 <_printf_float+0xb6>
 800682e:	f108 0801 	add.w	r8, r8, #1
 8006832:	45d0      	cmp	r8, sl
 8006834:	dbf3      	blt.n	800681e <_printf_float+0x3fe>
 8006836:	464b      	mov	r3, r9
 8006838:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800683c:	e6e0      	b.n	8006600 <_printf_float+0x1e0>
 800683e:	f04f 0800 	mov.w	r8, #0
 8006842:	f104 0b1a 	add.w	fp, r4, #26
 8006846:	e7f4      	b.n	8006832 <_printf_float+0x412>
 8006848:	2301      	movs	r3, #1
 800684a:	4642      	mov	r2, r8
 800684c:	e7e1      	b.n	8006812 <_printf_float+0x3f2>
 800684e:	2301      	movs	r3, #1
 8006850:	464a      	mov	r2, r9
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f ae3c 	beq.w	80064d6 <_printf_float+0xb6>
 800685e:	f108 0801 	add.w	r8, r8, #1
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006866:	1a5b      	subs	r3, r3, r1
 8006868:	4543      	cmp	r3, r8
 800686a:	dcf0      	bgt.n	800684e <_printf_float+0x42e>
 800686c:	e6fd      	b.n	800666a <_printf_float+0x24a>
 800686e:	f04f 0800 	mov.w	r8, #0
 8006872:	f104 0919 	add.w	r9, r4, #25
 8006876:	e7f4      	b.n	8006862 <_printf_float+0x442>

08006878 <_printf_common>:
 8006878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687c:	4616      	mov	r6, r2
 800687e:	4698      	mov	r8, r3
 8006880:	688a      	ldr	r2, [r1, #8]
 8006882:	690b      	ldr	r3, [r1, #16]
 8006884:	4607      	mov	r7, r0
 8006886:	4293      	cmp	r3, r2
 8006888:	bfb8      	it	lt
 800688a:	4613      	movlt	r3, r2
 800688c:	6033      	str	r3, [r6, #0]
 800688e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006892:	460c      	mov	r4, r1
 8006894:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006898:	b10a      	cbz	r2, 800689e <_printf_common+0x26>
 800689a:	3301      	adds	r3, #1
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	0699      	lsls	r1, r3, #26
 80068a2:	bf42      	ittt	mi
 80068a4:	6833      	ldrmi	r3, [r6, #0]
 80068a6:	3302      	addmi	r3, #2
 80068a8:	6033      	strmi	r3, [r6, #0]
 80068aa:	6825      	ldr	r5, [r4, #0]
 80068ac:	f015 0506 	ands.w	r5, r5, #6
 80068b0:	d106      	bne.n	80068c0 <_printf_common+0x48>
 80068b2:	f104 0a19 	add.w	sl, r4, #25
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	6832      	ldr	r2, [r6, #0]
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	42ab      	cmp	r3, r5
 80068be:	dc2b      	bgt.n	8006918 <_printf_common+0xa0>
 80068c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068c4:	6822      	ldr	r2, [r4, #0]
 80068c6:	3b00      	subs	r3, #0
 80068c8:	bf18      	it	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	0692      	lsls	r2, r2, #26
 80068ce:	d430      	bmi.n	8006932 <_printf_common+0xba>
 80068d0:	4641      	mov	r1, r8
 80068d2:	4638      	mov	r0, r7
 80068d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068d8:	47c8      	blx	r9
 80068da:	3001      	adds	r0, #1
 80068dc:	d023      	beq.n	8006926 <_printf_common+0xae>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	6922      	ldr	r2, [r4, #16]
 80068e2:	f003 0306 	and.w	r3, r3, #6
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	bf14      	ite	ne
 80068ea:	2500      	movne	r5, #0
 80068ec:	6833      	ldreq	r3, [r6, #0]
 80068ee:	f04f 0600 	mov.w	r6, #0
 80068f2:	bf08      	it	eq
 80068f4:	68e5      	ldreq	r5, [r4, #12]
 80068f6:	f104 041a 	add.w	r4, r4, #26
 80068fa:	bf08      	it	eq
 80068fc:	1aed      	subeq	r5, r5, r3
 80068fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006902:	bf08      	it	eq
 8006904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006908:	4293      	cmp	r3, r2
 800690a:	bfc4      	itt	gt
 800690c:	1a9b      	subgt	r3, r3, r2
 800690e:	18ed      	addgt	r5, r5, r3
 8006910:	42b5      	cmp	r5, r6
 8006912:	d11a      	bne.n	800694a <_printf_common+0xd2>
 8006914:	2000      	movs	r0, #0
 8006916:	e008      	b.n	800692a <_printf_common+0xb2>
 8006918:	2301      	movs	r3, #1
 800691a:	4652      	mov	r2, sl
 800691c:	4641      	mov	r1, r8
 800691e:	4638      	mov	r0, r7
 8006920:	47c8      	blx	r9
 8006922:	3001      	adds	r0, #1
 8006924:	d103      	bne.n	800692e <_printf_common+0xb6>
 8006926:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800692a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692e:	3501      	adds	r5, #1
 8006930:	e7c1      	b.n	80068b6 <_printf_common+0x3e>
 8006932:	2030      	movs	r0, #48	@ 0x30
 8006934:	18e1      	adds	r1, r4, r3
 8006936:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006940:	4422      	add	r2, r4
 8006942:	3302      	adds	r3, #2
 8006944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006948:	e7c2      	b.n	80068d0 <_printf_common+0x58>
 800694a:	2301      	movs	r3, #1
 800694c:	4622      	mov	r2, r4
 800694e:	4641      	mov	r1, r8
 8006950:	4638      	mov	r0, r7
 8006952:	47c8      	blx	r9
 8006954:	3001      	adds	r0, #1
 8006956:	d0e6      	beq.n	8006926 <_printf_common+0xae>
 8006958:	3601      	adds	r6, #1
 800695a:	e7d9      	b.n	8006910 <_printf_common+0x98>

0800695c <_printf_i>:
 800695c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	7e0f      	ldrb	r7, [r1, #24]
 8006962:	4691      	mov	r9, r2
 8006964:	2f78      	cmp	r7, #120	@ 0x78
 8006966:	4680      	mov	r8, r0
 8006968:	460c      	mov	r4, r1
 800696a:	469a      	mov	sl, r3
 800696c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800696e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006972:	d807      	bhi.n	8006984 <_printf_i+0x28>
 8006974:	2f62      	cmp	r7, #98	@ 0x62
 8006976:	d80a      	bhi.n	800698e <_printf_i+0x32>
 8006978:	2f00      	cmp	r7, #0
 800697a:	f000 80d3 	beq.w	8006b24 <_printf_i+0x1c8>
 800697e:	2f58      	cmp	r7, #88	@ 0x58
 8006980:	f000 80ba 	beq.w	8006af8 <_printf_i+0x19c>
 8006984:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006988:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800698c:	e03a      	b.n	8006a04 <_printf_i+0xa8>
 800698e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006992:	2b15      	cmp	r3, #21
 8006994:	d8f6      	bhi.n	8006984 <_printf_i+0x28>
 8006996:	a101      	add	r1, pc, #4	@ (adr r1, 800699c <_printf_i+0x40>)
 8006998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	08006a09 	.word	0x08006a09
 80069a4:	08006985 	.word	0x08006985
 80069a8:	08006985 	.word	0x08006985
 80069ac:	08006985 	.word	0x08006985
 80069b0:	08006985 	.word	0x08006985
 80069b4:	08006a09 	.word	0x08006a09
 80069b8:	08006985 	.word	0x08006985
 80069bc:	08006985 	.word	0x08006985
 80069c0:	08006985 	.word	0x08006985
 80069c4:	08006985 	.word	0x08006985
 80069c8:	08006b0b 	.word	0x08006b0b
 80069cc:	08006a33 	.word	0x08006a33
 80069d0:	08006ac5 	.word	0x08006ac5
 80069d4:	08006985 	.word	0x08006985
 80069d8:	08006985 	.word	0x08006985
 80069dc:	08006b2d 	.word	0x08006b2d
 80069e0:	08006985 	.word	0x08006985
 80069e4:	08006a33 	.word	0x08006a33
 80069e8:	08006985 	.word	0x08006985
 80069ec:	08006985 	.word	0x08006985
 80069f0:	08006acd 	.word	0x08006acd
 80069f4:	6833      	ldr	r3, [r6, #0]
 80069f6:	1d1a      	adds	r2, r3, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6032      	str	r2, [r6, #0]
 80069fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a04:	2301      	movs	r3, #1
 8006a06:	e09e      	b.n	8006b46 <_printf_i+0x1ea>
 8006a08:	6833      	ldr	r3, [r6, #0]
 8006a0a:	6820      	ldr	r0, [r4, #0]
 8006a0c:	1d19      	adds	r1, r3, #4
 8006a0e:	6031      	str	r1, [r6, #0]
 8006a10:	0606      	lsls	r6, r0, #24
 8006a12:	d501      	bpl.n	8006a18 <_printf_i+0xbc>
 8006a14:	681d      	ldr	r5, [r3, #0]
 8006a16:	e003      	b.n	8006a20 <_printf_i+0xc4>
 8006a18:	0645      	lsls	r5, r0, #25
 8006a1a:	d5fb      	bpl.n	8006a14 <_printf_i+0xb8>
 8006a1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a20:	2d00      	cmp	r5, #0
 8006a22:	da03      	bge.n	8006a2c <_printf_i+0xd0>
 8006a24:	232d      	movs	r3, #45	@ 0x2d
 8006a26:	426d      	negs	r5, r5
 8006a28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a2c:	230a      	movs	r3, #10
 8006a2e:	4859      	ldr	r0, [pc, #356]	@ (8006b94 <_printf_i+0x238>)
 8006a30:	e011      	b.n	8006a56 <_printf_i+0xfa>
 8006a32:	6821      	ldr	r1, [r4, #0]
 8006a34:	6833      	ldr	r3, [r6, #0]
 8006a36:	0608      	lsls	r0, r1, #24
 8006a38:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a3c:	d402      	bmi.n	8006a44 <_printf_i+0xe8>
 8006a3e:	0649      	lsls	r1, r1, #25
 8006a40:	bf48      	it	mi
 8006a42:	b2ad      	uxthmi	r5, r5
 8006a44:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a46:	6033      	str	r3, [r6, #0]
 8006a48:	bf14      	ite	ne
 8006a4a:	230a      	movne	r3, #10
 8006a4c:	2308      	moveq	r3, #8
 8006a4e:	4851      	ldr	r0, [pc, #324]	@ (8006b94 <_printf_i+0x238>)
 8006a50:	2100      	movs	r1, #0
 8006a52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a56:	6866      	ldr	r6, [r4, #4]
 8006a58:	2e00      	cmp	r6, #0
 8006a5a:	bfa8      	it	ge
 8006a5c:	6821      	ldrge	r1, [r4, #0]
 8006a5e:	60a6      	str	r6, [r4, #8]
 8006a60:	bfa4      	itt	ge
 8006a62:	f021 0104 	bicge.w	r1, r1, #4
 8006a66:	6021      	strge	r1, [r4, #0]
 8006a68:	b90d      	cbnz	r5, 8006a6e <_printf_i+0x112>
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	d04b      	beq.n	8006b06 <_printf_i+0x1aa>
 8006a6e:	4616      	mov	r6, r2
 8006a70:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a74:	fb03 5711 	mls	r7, r3, r1, r5
 8006a78:	5dc7      	ldrb	r7, [r0, r7]
 8006a7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a7e:	462f      	mov	r7, r5
 8006a80:	42bb      	cmp	r3, r7
 8006a82:	460d      	mov	r5, r1
 8006a84:	d9f4      	bls.n	8006a70 <_printf_i+0x114>
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d10b      	bne.n	8006aa2 <_printf_i+0x146>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	07df      	lsls	r7, r3, #31
 8006a8e:	d508      	bpl.n	8006aa2 <_printf_i+0x146>
 8006a90:	6923      	ldr	r3, [r4, #16]
 8006a92:	6861      	ldr	r1, [r4, #4]
 8006a94:	4299      	cmp	r1, r3
 8006a96:	bfde      	ittt	le
 8006a98:	2330      	movle	r3, #48	@ 0x30
 8006a9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a9e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006aa2:	1b92      	subs	r2, r2, r6
 8006aa4:	6122      	str	r2, [r4, #16]
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	4640      	mov	r0, r8
 8006aac:	f8cd a000 	str.w	sl, [sp]
 8006ab0:	aa03      	add	r2, sp, #12
 8006ab2:	f7ff fee1 	bl	8006878 <_printf_common>
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d14a      	bne.n	8006b50 <_printf_i+0x1f4>
 8006aba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006abe:	b004      	add	sp, #16
 8006ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	f043 0320 	orr.w	r3, r3, #32
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	2778      	movs	r7, #120	@ 0x78
 8006ace:	4832      	ldr	r0, [pc, #200]	@ (8006b98 <_printf_i+0x23c>)
 8006ad0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	6831      	ldr	r1, [r6, #0]
 8006ad8:	061f      	lsls	r7, r3, #24
 8006ada:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ade:	d402      	bmi.n	8006ae6 <_printf_i+0x18a>
 8006ae0:	065f      	lsls	r7, r3, #25
 8006ae2:	bf48      	it	mi
 8006ae4:	b2ad      	uxthmi	r5, r5
 8006ae6:	6031      	str	r1, [r6, #0]
 8006ae8:	07d9      	lsls	r1, r3, #31
 8006aea:	bf44      	itt	mi
 8006aec:	f043 0320 	orrmi.w	r3, r3, #32
 8006af0:	6023      	strmi	r3, [r4, #0]
 8006af2:	b11d      	cbz	r5, 8006afc <_printf_i+0x1a0>
 8006af4:	2310      	movs	r3, #16
 8006af6:	e7ab      	b.n	8006a50 <_printf_i+0xf4>
 8006af8:	4826      	ldr	r0, [pc, #152]	@ (8006b94 <_printf_i+0x238>)
 8006afa:	e7e9      	b.n	8006ad0 <_printf_i+0x174>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	f023 0320 	bic.w	r3, r3, #32
 8006b02:	6023      	str	r3, [r4, #0]
 8006b04:	e7f6      	b.n	8006af4 <_printf_i+0x198>
 8006b06:	4616      	mov	r6, r2
 8006b08:	e7bd      	b.n	8006a86 <_printf_i+0x12a>
 8006b0a:	6833      	ldr	r3, [r6, #0]
 8006b0c:	6825      	ldr	r5, [r4, #0]
 8006b0e:	1d18      	adds	r0, r3, #4
 8006b10:	6961      	ldr	r1, [r4, #20]
 8006b12:	6030      	str	r0, [r6, #0]
 8006b14:	062e      	lsls	r6, r5, #24
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	d501      	bpl.n	8006b1e <_printf_i+0x1c2>
 8006b1a:	6019      	str	r1, [r3, #0]
 8006b1c:	e002      	b.n	8006b24 <_printf_i+0x1c8>
 8006b1e:	0668      	lsls	r0, r5, #25
 8006b20:	d5fb      	bpl.n	8006b1a <_printf_i+0x1be>
 8006b22:	8019      	strh	r1, [r3, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	4616      	mov	r6, r2
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	e7bc      	b.n	8006aa6 <_printf_i+0x14a>
 8006b2c:	6833      	ldr	r3, [r6, #0]
 8006b2e:	2100      	movs	r1, #0
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	6032      	str	r2, [r6, #0]
 8006b34:	681e      	ldr	r6, [r3, #0]
 8006b36:	6862      	ldr	r2, [r4, #4]
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f001 fa1c 	bl	8007f76 <memchr>
 8006b3e:	b108      	cbz	r0, 8006b44 <_printf_i+0x1e8>
 8006b40:	1b80      	subs	r0, r0, r6
 8006b42:	6060      	str	r0, [r4, #4]
 8006b44:	6863      	ldr	r3, [r4, #4]
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b4e:	e7aa      	b.n	8006aa6 <_printf_i+0x14a>
 8006b50:	4632      	mov	r2, r6
 8006b52:	4649      	mov	r1, r9
 8006b54:	4640      	mov	r0, r8
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	47d0      	blx	sl
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	d0ad      	beq.n	8006aba <_printf_i+0x15e>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	079b      	lsls	r3, r3, #30
 8006b62:	d413      	bmi.n	8006b8c <_printf_i+0x230>
 8006b64:	68e0      	ldr	r0, [r4, #12]
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	4298      	cmp	r0, r3
 8006b6a:	bfb8      	it	lt
 8006b6c:	4618      	movlt	r0, r3
 8006b6e:	e7a6      	b.n	8006abe <_printf_i+0x162>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4632      	mov	r2, r6
 8006b74:	4649      	mov	r1, r9
 8006b76:	4640      	mov	r0, r8
 8006b78:	47d0      	blx	sl
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	d09d      	beq.n	8006aba <_printf_i+0x15e>
 8006b7e:	3501      	adds	r5, #1
 8006b80:	68e3      	ldr	r3, [r4, #12]
 8006b82:	9903      	ldr	r1, [sp, #12]
 8006b84:	1a5b      	subs	r3, r3, r1
 8006b86:	42ab      	cmp	r3, r5
 8006b88:	dcf2      	bgt.n	8006b70 <_printf_i+0x214>
 8006b8a:	e7eb      	b.n	8006b64 <_printf_i+0x208>
 8006b8c:	2500      	movs	r5, #0
 8006b8e:	f104 0619 	add.w	r6, r4, #25
 8006b92:	e7f5      	b.n	8006b80 <_printf_i+0x224>
 8006b94:	0800ab7c 	.word	0x0800ab7c
 8006b98:	0800ab8d 	.word	0x0800ab8d

08006b9c <_scanf_float>:
 8006b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba0:	b087      	sub	sp, #28
 8006ba2:	9303      	str	r3, [sp, #12]
 8006ba4:	688b      	ldr	r3, [r1, #8]
 8006ba6:	4617      	mov	r7, r2
 8006ba8:	1e5a      	subs	r2, r3, #1
 8006baa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006bae:	bf82      	ittt	hi
 8006bb0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006bb4:	eb03 0b05 	addhi.w	fp, r3, r5
 8006bb8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006bbc:	460a      	mov	r2, r1
 8006bbe:	f04f 0500 	mov.w	r5, #0
 8006bc2:	bf88      	it	hi
 8006bc4:	608b      	strhi	r3, [r1, #8]
 8006bc6:	680b      	ldr	r3, [r1, #0]
 8006bc8:	4680      	mov	r8, r0
 8006bca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006bce:	f842 3b1c 	str.w	r3, [r2], #28
 8006bd2:	460c      	mov	r4, r1
 8006bd4:	bf98      	it	ls
 8006bd6:	f04f 0b00 	movls.w	fp, #0
 8006bda:	4616      	mov	r6, r2
 8006bdc:	46aa      	mov	sl, r5
 8006bde:	46a9      	mov	r9, r5
 8006be0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006be4:	9201      	str	r2, [sp, #4]
 8006be6:	9502      	str	r5, [sp, #8]
 8006be8:	68a2      	ldr	r2, [r4, #8]
 8006bea:	b152      	cbz	r2, 8006c02 <_scanf_float+0x66>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b4e      	cmp	r3, #78	@ 0x4e
 8006bf2:	d865      	bhi.n	8006cc0 <_scanf_float+0x124>
 8006bf4:	2b40      	cmp	r3, #64	@ 0x40
 8006bf6:	d83d      	bhi.n	8006c74 <_scanf_float+0xd8>
 8006bf8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006bfc:	b2c8      	uxtb	r0, r1
 8006bfe:	280e      	cmp	r0, #14
 8006c00:	d93b      	bls.n	8006c7a <_scanf_float+0xde>
 8006c02:	f1b9 0f00 	cmp.w	r9, #0
 8006c06:	d003      	beq.n	8006c10 <_scanf_float+0x74>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006c14:	f1ba 0f01 	cmp.w	sl, #1
 8006c18:	f200 8118 	bhi.w	8006e4c <_scanf_float+0x2b0>
 8006c1c:	9b01      	ldr	r3, [sp, #4]
 8006c1e:	429e      	cmp	r6, r3
 8006c20:	f200 8109 	bhi.w	8006e36 <_scanf_float+0x29a>
 8006c24:	2001      	movs	r0, #1
 8006c26:	b007      	add	sp, #28
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006c30:	2a0d      	cmp	r2, #13
 8006c32:	d8e6      	bhi.n	8006c02 <_scanf_float+0x66>
 8006c34:	a101      	add	r1, pc, #4	@ (adr r1, 8006c3c <_scanf_float+0xa0>)
 8006c36:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006d83 	.word	0x08006d83
 8006c40:	08006c03 	.word	0x08006c03
 8006c44:	08006c03 	.word	0x08006c03
 8006c48:	08006c03 	.word	0x08006c03
 8006c4c:	08006de3 	.word	0x08006de3
 8006c50:	08006dbb 	.word	0x08006dbb
 8006c54:	08006c03 	.word	0x08006c03
 8006c58:	08006c03 	.word	0x08006c03
 8006c5c:	08006d91 	.word	0x08006d91
 8006c60:	08006c03 	.word	0x08006c03
 8006c64:	08006c03 	.word	0x08006c03
 8006c68:	08006c03 	.word	0x08006c03
 8006c6c:	08006c03 	.word	0x08006c03
 8006c70:	08006d49 	.word	0x08006d49
 8006c74:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006c78:	e7da      	b.n	8006c30 <_scanf_float+0x94>
 8006c7a:	290e      	cmp	r1, #14
 8006c7c:	d8c1      	bhi.n	8006c02 <_scanf_float+0x66>
 8006c7e:	a001      	add	r0, pc, #4	@ (adr r0, 8006c84 <_scanf_float+0xe8>)
 8006c80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c84:	08006d39 	.word	0x08006d39
 8006c88:	08006c03 	.word	0x08006c03
 8006c8c:	08006d39 	.word	0x08006d39
 8006c90:	08006dcf 	.word	0x08006dcf
 8006c94:	08006c03 	.word	0x08006c03
 8006c98:	08006ce1 	.word	0x08006ce1
 8006c9c:	08006d1f 	.word	0x08006d1f
 8006ca0:	08006d1f 	.word	0x08006d1f
 8006ca4:	08006d1f 	.word	0x08006d1f
 8006ca8:	08006d1f 	.word	0x08006d1f
 8006cac:	08006d1f 	.word	0x08006d1f
 8006cb0:	08006d1f 	.word	0x08006d1f
 8006cb4:	08006d1f 	.word	0x08006d1f
 8006cb8:	08006d1f 	.word	0x08006d1f
 8006cbc:	08006d1f 	.word	0x08006d1f
 8006cc0:	2b6e      	cmp	r3, #110	@ 0x6e
 8006cc2:	d809      	bhi.n	8006cd8 <_scanf_float+0x13c>
 8006cc4:	2b60      	cmp	r3, #96	@ 0x60
 8006cc6:	d8b1      	bhi.n	8006c2c <_scanf_float+0x90>
 8006cc8:	2b54      	cmp	r3, #84	@ 0x54
 8006cca:	d07b      	beq.n	8006dc4 <_scanf_float+0x228>
 8006ccc:	2b59      	cmp	r3, #89	@ 0x59
 8006cce:	d198      	bne.n	8006c02 <_scanf_float+0x66>
 8006cd0:	2d07      	cmp	r5, #7
 8006cd2:	d196      	bne.n	8006c02 <_scanf_float+0x66>
 8006cd4:	2508      	movs	r5, #8
 8006cd6:	e02c      	b.n	8006d32 <_scanf_float+0x196>
 8006cd8:	2b74      	cmp	r3, #116	@ 0x74
 8006cda:	d073      	beq.n	8006dc4 <_scanf_float+0x228>
 8006cdc:	2b79      	cmp	r3, #121	@ 0x79
 8006cde:	e7f6      	b.n	8006cce <_scanf_float+0x132>
 8006ce0:	6821      	ldr	r1, [r4, #0]
 8006ce2:	05c8      	lsls	r0, r1, #23
 8006ce4:	d51b      	bpl.n	8006d1e <_scanf_float+0x182>
 8006ce6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006cea:	6021      	str	r1, [r4, #0]
 8006cec:	f109 0901 	add.w	r9, r9, #1
 8006cf0:	f1bb 0f00 	cmp.w	fp, #0
 8006cf4:	d003      	beq.n	8006cfe <_scanf_float+0x162>
 8006cf6:	3201      	adds	r2, #1
 8006cf8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006cfc:	60a2      	str	r2, [r4, #8]
 8006cfe:	68a3      	ldr	r3, [r4, #8]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	60a3      	str	r3, [r4, #8]
 8006d04:	6923      	ldr	r3, [r4, #16]
 8006d06:	3301      	adds	r3, #1
 8006d08:	6123      	str	r3, [r4, #16]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	607b      	str	r3, [r7, #4]
 8006d12:	f340 8087 	ble.w	8006e24 <_scanf_float+0x288>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	e764      	b.n	8006be8 <_scanf_float+0x4c>
 8006d1e:	eb1a 0105 	adds.w	r1, sl, r5
 8006d22:	f47f af6e 	bne.w	8006c02 <_scanf_float+0x66>
 8006d26:	460d      	mov	r5, r1
 8006d28:	468a      	mov	sl, r1
 8006d2a:	6822      	ldr	r2, [r4, #0]
 8006d2c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006d30:	6022      	str	r2, [r4, #0]
 8006d32:	f806 3b01 	strb.w	r3, [r6], #1
 8006d36:	e7e2      	b.n	8006cfe <_scanf_float+0x162>
 8006d38:	6822      	ldr	r2, [r4, #0]
 8006d3a:	0610      	lsls	r0, r2, #24
 8006d3c:	f57f af61 	bpl.w	8006c02 <_scanf_float+0x66>
 8006d40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d44:	6022      	str	r2, [r4, #0]
 8006d46:	e7f4      	b.n	8006d32 <_scanf_float+0x196>
 8006d48:	f1ba 0f00 	cmp.w	sl, #0
 8006d4c:	d10e      	bne.n	8006d6c <_scanf_float+0x1d0>
 8006d4e:	f1b9 0f00 	cmp.w	r9, #0
 8006d52:	d10e      	bne.n	8006d72 <_scanf_float+0x1d6>
 8006d54:	6822      	ldr	r2, [r4, #0]
 8006d56:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006d5a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006d5e:	d108      	bne.n	8006d72 <_scanf_float+0x1d6>
 8006d60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006d64:	f04f 0a01 	mov.w	sl, #1
 8006d68:	6022      	str	r2, [r4, #0]
 8006d6a:	e7e2      	b.n	8006d32 <_scanf_float+0x196>
 8006d6c:	f1ba 0f02 	cmp.w	sl, #2
 8006d70:	d055      	beq.n	8006e1e <_scanf_float+0x282>
 8006d72:	2d01      	cmp	r5, #1
 8006d74:	d002      	beq.n	8006d7c <_scanf_float+0x1e0>
 8006d76:	2d04      	cmp	r5, #4
 8006d78:	f47f af43 	bne.w	8006c02 <_scanf_float+0x66>
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	b2ed      	uxtb	r5, r5
 8006d80:	e7d7      	b.n	8006d32 <_scanf_float+0x196>
 8006d82:	f1ba 0f01 	cmp.w	sl, #1
 8006d86:	f47f af3c 	bne.w	8006c02 <_scanf_float+0x66>
 8006d8a:	f04f 0a02 	mov.w	sl, #2
 8006d8e:	e7d0      	b.n	8006d32 <_scanf_float+0x196>
 8006d90:	b97d      	cbnz	r5, 8006db2 <_scanf_float+0x216>
 8006d92:	f1b9 0f00 	cmp.w	r9, #0
 8006d96:	f47f af37 	bne.w	8006c08 <_scanf_float+0x6c>
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006da0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006da4:	f040 8103 	bne.w	8006fae <_scanf_float+0x412>
 8006da8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006dac:	2501      	movs	r5, #1
 8006dae:	6022      	str	r2, [r4, #0]
 8006db0:	e7bf      	b.n	8006d32 <_scanf_float+0x196>
 8006db2:	2d03      	cmp	r5, #3
 8006db4:	d0e2      	beq.n	8006d7c <_scanf_float+0x1e0>
 8006db6:	2d05      	cmp	r5, #5
 8006db8:	e7de      	b.n	8006d78 <_scanf_float+0x1dc>
 8006dba:	2d02      	cmp	r5, #2
 8006dbc:	f47f af21 	bne.w	8006c02 <_scanf_float+0x66>
 8006dc0:	2503      	movs	r5, #3
 8006dc2:	e7b6      	b.n	8006d32 <_scanf_float+0x196>
 8006dc4:	2d06      	cmp	r5, #6
 8006dc6:	f47f af1c 	bne.w	8006c02 <_scanf_float+0x66>
 8006dca:	2507      	movs	r5, #7
 8006dcc:	e7b1      	b.n	8006d32 <_scanf_float+0x196>
 8006dce:	6822      	ldr	r2, [r4, #0]
 8006dd0:	0591      	lsls	r1, r2, #22
 8006dd2:	f57f af16 	bpl.w	8006c02 <_scanf_float+0x66>
 8006dd6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006dda:	6022      	str	r2, [r4, #0]
 8006ddc:	f8cd 9008 	str.w	r9, [sp, #8]
 8006de0:	e7a7      	b.n	8006d32 <_scanf_float+0x196>
 8006de2:	6822      	ldr	r2, [r4, #0]
 8006de4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006de8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006dec:	d006      	beq.n	8006dfc <_scanf_float+0x260>
 8006dee:	0550      	lsls	r0, r2, #21
 8006df0:	f57f af07 	bpl.w	8006c02 <_scanf_float+0x66>
 8006df4:	f1b9 0f00 	cmp.w	r9, #0
 8006df8:	f000 80d9 	beq.w	8006fae <_scanf_float+0x412>
 8006dfc:	0591      	lsls	r1, r2, #22
 8006dfe:	bf58      	it	pl
 8006e00:	9902      	ldrpl	r1, [sp, #8]
 8006e02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e06:	bf58      	it	pl
 8006e08:	eba9 0101 	subpl.w	r1, r9, r1
 8006e0c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006e10:	f04f 0900 	mov.w	r9, #0
 8006e14:	bf58      	it	pl
 8006e16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e1a:	6022      	str	r2, [r4, #0]
 8006e1c:	e789      	b.n	8006d32 <_scanf_float+0x196>
 8006e1e:	f04f 0a03 	mov.w	sl, #3
 8006e22:	e786      	b.n	8006d32 <_scanf_float+0x196>
 8006e24:	4639      	mov	r1, r7
 8006e26:	4640      	mov	r0, r8
 8006e28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006e2c:	4798      	blx	r3
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f43f aeda 	beq.w	8006be8 <_scanf_float+0x4c>
 8006e34:	e6e5      	b.n	8006c02 <_scanf_float+0x66>
 8006e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e3a:	463a      	mov	r2, r7
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e42:	4798      	blx	r3
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	6123      	str	r3, [r4, #16]
 8006e4a:	e6e7      	b.n	8006c1c <_scanf_float+0x80>
 8006e4c:	1e6b      	subs	r3, r5, #1
 8006e4e:	2b06      	cmp	r3, #6
 8006e50:	d824      	bhi.n	8006e9c <_scanf_float+0x300>
 8006e52:	2d02      	cmp	r5, #2
 8006e54:	d836      	bhi.n	8006ec4 <_scanf_float+0x328>
 8006e56:	9b01      	ldr	r3, [sp, #4]
 8006e58:	429e      	cmp	r6, r3
 8006e5a:	f67f aee3 	bls.w	8006c24 <_scanf_float+0x88>
 8006e5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e62:	463a      	mov	r2, r7
 8006e64:	4640      	mov	r0, r8
 8006e66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e6a:	4798      	blx	r3
 8006e6c:	6923      	ldr	r3, [r4, #16]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	6123      	str	r3, [r4, #16]
 8006e72:	e7f0      	b.n	8006e56 <_scanf_float+0x2ba>
 8006e74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e78:	463a      	mov	r2, r7
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006e80:	4798      	blx	r3
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	6123      	str	r3, [r4, #16]
 8006e88:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006e8c:	fa5f fa8a 	uxtb.w	sl, sl
 8006e90:	f1ba 0f02 	cmp.w	sl, #2
 8006e94:	d1ee      	bne.n	8006e74 <_scanf_float+0x2d8>
 8006e96:	3d03      	subs	r5, #3
 8006e98:	b2ed      	uxtb	r5, r5
 8006e9a:	1b76      	subs	r6, r6, r5
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	05da      	lsls	r2, r3, #23
 8006ea0:	d530      	bpl.n	8006f04 <_scanf_float+0x368>
 8006ea2:	055b      	lsls	r3, r3, #21
 8006ea4:	d511      	bpl.n	8006eca <_scanf_float+0x32e>
 8006ea6:	9b01      	ldr	r3, [sp, #4]
 8006ea8:	429e      	cmp	r6, r3
 8006eaa:	f67f aebb 	bls.w	8006c24 <_scanf_float+0x88>
 8006eae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006eb2:	463a      	mov	r2, r7
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eba:	4798      	blx	r3
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	6123      	str	r3, [r4, #16]
 8006ec2:	e7f0      	b.n	8006ea6 <_scanf_float+0x30a>
 8006ec4:	46aa      	mov	sl, r5
 8006ec6:	46b3      	mov	fp, r6
 8006ec8:	e7de      	b.n	8006e88 <_scanf_float+0x2ec>
 8006eca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ece:	6923      	ldr	r3, [r4, #16]
 8006ed0:	2965      	cmp	r1, #101	@ 0x65
 8006ed2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006ed6:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006eda:	6123      	str	r3, [r4, #16]
 8006edc:	d00c      	beq.n	8006ef8 <_scanf_float+0x35c>
 8006ede:	2945      	cmp	r1, #69	@ 0x45
 8006ee0:	d00a      	beq.n	8006ef8 <_scanf_float+0x35c>
 8006ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ee6:	463a      	mov	r2, r7
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4798      	blx	r3
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	1eb5      	subs	r5, r6, #2
 8006ef6:	6123      	str	r3, [r4, #16]
 8006ef8:	463a      	mov	r2, r7
 8006efa:	4640      	mov	r0, r8
 8006efc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f00:	4798      	blx	r3
 8006f02:	462e      	mov	r6, r5
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	f012 0210 	ands.w	r2, r2, #16
 8006f0a:	d001      	beq.n	8006f10 <_scanf_float+0x374>
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	e68a      	b.n	8006c26 <_scanf_float+0x8a>
 8006f10:	7032      	strb	r2, [r6, #0]
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1c:	d11c      	bne.n	8006f58 <_scanf_float+0x3bc>
 8006f1e:	9b02      	ldr	r3, [sp, #8]
 8006f20:	454b      	cmp	r3, r9
 8006f22:	eba3 0209 	sub.w	r2, r3, r9
 8006f26:	d123      	bne.n	8006f70 <_scanf_float+0x3d4>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	9901      	ldr	r1, [sp, #4]
 8006f2e:	f000 ff37 	bl	8007da0 <_strtod_r>
 8006f32:	9b03      	ldr	r3, [sp, #12]
 8006f34:	6825      	ldr	r5, [r4, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f015 0f02 	tst.w	r5, #2
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	460f      	mov	r7, r1
 8006f40:	f103 0204 	add.w	r2, r3, #4
 8006f44:	d01f      	beq.n	8006f86 <_scanf_float+0x3ea>
 8006f46:	9903      	ldr	r1, [sp, #12]
 8006f48:	600a      	str	r2, [r1, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	e9c3 6700 	strd	r6, r7, [r3]
 8006f50:	68e3      	ldr	r3, [r4, #12]
 8006f52:	3301      	adds	r3, #1
 8006f54:	60e3      	str	r3, [r4, #12]
 8006f56:	e7d9      	b.n	8006f0c <_scanf_float+0x370>
 8006f58:	9b04      	ldr	r3, [sp, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0e4      	beq.n	8006f28 <_scanf_float+0x38c>
 8006f5e:	9905      	ldr	r1, [sp, #20]
 8006f60:	230a      	movs	r3, #10
 8006f62:	4640      	mov	r0, r8
 8006f64:	3101      	adds	r1, #1
 8006f66:	f000 ff9b 	bl	8007ea0 <_strtol_r>
 8006f6a:	9b04      	ldr	r3, [sp, #16]
 8006f6c:	9e05      	ldr	r6, [sp, #20]
 8006f6e:	1ac2      	subs	r2, r0, r3
 8006f70:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006f74:	429e      	cmp	r6, r3
 8006f76:	bf28      	it	cs
 8006f78:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	490d      	ldr	r1, [pc, #52]	@ (8006fb4 <_scanf_float+0x418>)
 8006f80:	f000 f850 	bl	8007024 <siprintf>
 8006f84:	e7d0      	b.n	8006f28 <_scanf_float+0x38c>
 8006f86:	076d      	lsls	r5, r5, #29
 8006f88:	d4dd      	bmi.n	8006f46 <_scanf_float+0x3aa>
 8006f8a:	9d03      	ldr	r5, [sp, #12]
 8006f8c:	602a      	str	r2, [r5, #0]
 8006f8e:	681d      	ldr	r5, [r3, #0]
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	f7f9 fd3a 	bl	8000a0c <__aeabi_dcmpun>
 8006f98:	b120      	cbz	r0, 8006fa4 <_scanf_float+0x408>
 8006f9a:	4807      	ldr	r0, [pc, #28]	@ (8006fb8 <_scanf_float+0x41c>)
 8006f9c:	f001 f80e 	bl	8007fbc <nanf>
 8006fa0:	6028      	str	r0, [r5, #0]
 8006fa2:	e7d5      	b.n	8006f50 <_scanf_float+0x3b4>
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	f7f9 fd8e 	bl	8000ac8 <__aeabi_d2f>
 8006fac:	e7f8      	b.n	8006fa0 <_scanf_float+0x404>
 8006fae:	f04f 0900 	mov.w	r9, #0
 8006fb2:	e62d      	b.n	8006c10 <_scanf_float+0x74>
 8006fb4:	0800ab9e 	.word	0x0800ab9e
 8006fb8:	0800af93 	.word	0x0800af93

08006fbc <sniprintf>:
 8006fbc:	b40c      	push	{r2, r3}
 8006fbe:	b530      	push	{r4, r5, lr}
 8006fc0:	4b17      	ldr	r3, [pc, #92]	@ (8007020 <sniprintf+0x64>)
 8006fc2:	1e0c      	subs	r4, r1, #0
 8006fc4:	681d      	ldr	r5, [r3, #0]
 8006fc6:	b09d      	sub	sp, #116	@ 0x74
 8006fc8:	da08      	bge.n	8006fdc <sniprintf+0x20>
 8006fca:	238b      	movs	r3, #139	@ 0x8b
 8006fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	b01d      	add	sp, #116	@ 0x74
 8006fd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fd8:	b002      	add	sp, #8
 8006fda:	4770      	bx	lr
 8006fdc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006fe0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006fe4:	bf0c      	ite	eq
 8006fe6:	4623      	moveq	r3, r4
 8006fe8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006fec:	9304      	str	r3, [sp, #16]
 8006fee:	9307      	str	r3, [sp, #28]
 8006ff0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ff4:	9002      	str	r0, [sp, #8]
 8006ff6:	9006      	str	r0, [sp, #24]
 8006ff8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	ab21      	add	r3, sp, #132	@ 0x84
 8007000:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007002:	a902      	add	r1, sp, #8
 8007004:	9301      	str	r3, [sp, #4]
 8007006:	f002 f9c3 	bl	8009390 <_svfiprintf_r>
 800700a:	1c43      	adds	r3, r0, #1
 800700c:	bfbc      	itt	lt
 800700e:	238b      	movlt	r3, #139	@ 0x8b
 8007010:	602b      	strlt	r3, [r5, #0]
 8007012:	2c00      	cmp	r4, #0
 8007014:	d0dd      	beq.n	8006fd2 <sniprintf+0x16>
 8007016:	2200      	movs	r2, #0
 8007018:	9b02      	ldr	r3, [sp, #8]
 800701a:	701a      	strb	r2, [r3, #0]
 800701c:	e7d9      	b.n	8006fd2 <sniprintf+0x16>
 800701e:	bf00      	nop
 8007020:	20000184 	.word	0x20000184

08007024 <siprintf>:
 8007024:	b40e      	push	{r1, r2, r3}
 8007026:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800702a:	b500      	push	{lr}
 800702c:	b09c      	sub	sp, #112	@ 0x70
 800702e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007030:	9002      	str	r0, [sp, #8]
 8007032:	9006      	str	r0, [sp, #24]
 8007034:	9107      	str	r1, [sp, #28]
 8007036:	9104      	str	r1, [sp, #16]
 8007038:	4808      	ldr	r0, [pc, #32]	@ (800705c <siprintf+0x38>)
 800703a:	4909      	ldr	r1, [pc, #36]	@ (8007060 <siprintf+0x3c>)
 800703c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007040:	9105      	str	r1, [sp, #20]
 8007042:	6800      	ldr	r0, [r0, #0]
 8007044:	a902      	add	r1, sp, #8
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	f002 f9a2 	bl	8009390 <_svfiprintf_r>
 800704c:	2200      	movs	r2, #0
 800704e:	9b02      	ldr	r3, [sp, #8]
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	b01c      	add	sp, #112	@ 0x70
 8007054:	f85d eb04 	ldr.w	lr, [sp], #4
 8007058:	b003      	add	sp, #12
 800705a:	4770      	bx	lr
 800705c:	20000184 	.word	0x20000184
 8007060:	ffff0208 	.word	0xffff0208

08007064 <std>:
 8007064:	2300      	movs	r3, #0
 8007066:	b510      	push	{r4, lr}
 8007068:	4604      	mov	r4, r0
 800706a:	e9c0 3300 	strd	r3, r3, [r0]
 800706e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007072:	6083      	str	r3, [r0, #8]
 8007074:	8181      	strh	r1, [r0, #12]
 8007076:	6643      	str	r3, [r0, #100]	@ 0x64
 8007078:	81c2      	strh	r2, [r0, #14]
 800707a:	6183      	str	r3, [r0, #24]
 800707c:	4619      	mov	r1, r3
 800707e:	2208      	movs	r2, #8
 8007080:	305c      	adds	r0, #92	@ 0x5c
 8007082:	f000 ff3f 	bl	8007f04 <memset>
 8007086:	4b0d      	ldr	r3, [pc, #52]	@ (80070bc <std+0x58>)
 8007088:	6224      	str	r4, [r4, #32]
 800708a:	6263      	str	r3, [r4, #36]	@ 0x24
 800708c:	4b0c      	ldr	r3, [pc, #48]	@ (80070c0 <std+0x5c>)
 800708e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007090:	4b0c      	ldr	r3, [pc, #48]	@ (80070c4 <std+0x60>)
 8007092:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007094:	4b0c      	ldr	r3, [pc, #48]	@ (80070c8 <std+0x64>)
 8007096:	6323      	str	r3, [r4, #48]	@ 0x30
 8007098:	4b0c      	ldr	r3, [pc, #48]	@ (80070cc <std+0x68>)
 800709a:	429c      	cmp	r4, r3
 800709c:	d006      	beq.n	80070ac <std+0x48>
 800709e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070a2:	4294      	cmp	r4, r2
 80070a4:	d002      	beq.n	80070ac <std+0x48>
 80070a6:	33d0      	adds	r3, #208	@ 0xd0
 80070a8:	429c      	cmp	r4, r3
 80070aa:	d105      	bne.n	80070b8 <std+0x54>
 80070ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b4:	f000 bf5c 	b.w	8007f70 <__retarget_lock_init_recursive>
 80070b8:	bd10      	pop	{r4, pc}
 80070ba:	bf00      	nop
 80070bc:	0800a1b5 	.word	0x0800a1b5
 80070c0:	0800a1d7 	.word	0x0800a1d7
 80070c4:	0800a20f 	.word	0x0800a20f
 80070c8:	0800a233 	.word	0x0800a233
 80070cc:	200003ac 	.word	0x200003ac

080070d0 <stdio_exit_handler>:
 80070d0:	4a02      	ldr	r2, [pc, #8]	@ (80070dc <stdio_exit_handler+0xc>)
 80070d2:	4903      	ldr	r1, [pc, #12]	@ (80070e0 <stdio_exit_handler+0x10>)
 80070d4:	4803      	ldr	r0, [pc, #12]	@ (80070e4 <stdio_exit_handler+0x14>)
 80070d6:	f000 bee5 	b.w	8007ea4 <_fwalk_sglue>
 80070da:	bf00      	nop
 80070dc:	2000000c 	.word	0x2000000c
 80070e0:	08009801 	.word	0x08009801
 80070e4:	20000188 	.word	0x20000188

080070e8 <cleanup_stdio>:
 80070e8:	6841      	ldr	r1, [r0, #4]
 80070ea:	4b0c      	ldr	r3, [pc, #48]	@ (800711c <cleanup_stdio+0x34>)
 80070ec:	b510      	push	{r4, lr}
 80070ee:	4299      	cmp	r1, r3
 80070f0:	4604      	mov	r4, r0
 80070f2:	d001      	beq.n	80070f8 <cleanup_stdio+0x10>
 80070f4:	f002 fb84 	bl	8009800 <_fflush_r>
 80070f8:	68a1      	ldr	r1, [r4, #8]
 80070fa:	4b09      	ldr	r3, [pc, #36]	@ (8007120 <cleanup_stdio+0x38>)
 80070fc:	4299      	cmp	r1, r3
 80070fe:	d002      	beq.n	8007106 <cleanup_stdio+0x1e>
 8007100:	4620      	mov	r0, r4
 8007102:	f002 fb7d 	bl	8009800 <_fflush_r>
 8007106:	68e1      	ldr	r1, [r4, #12]
 8007108:	4b06      	ldr	r3, [pc, #24]	@ (8007124 <cleanup_stdio+0x3c>)
 800710a:	4299      	cmp	r1, r3
 800710c:	d004      	beq.n	8007118 <cleanup_stdio+0x30>
 800710e:	4620      	mov	r0, r4
 8007110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007114:	f002 bb74 	b.w	8009800 <_fflush_r>
 8007118:	bd10      	pop	{r4, pc}
 800711a:	bf00      	nop
 800711c:	200003ac 	.word	0x200003ac
 8007120:	20000414 	.word	0x20000414
 8007124:	2000047c 	.word	0x2000047c

08007128 <global_stdio_init.part.0>:
 8007128:	b510      	push	{r4, lr}
 800712a:	4b0b      	ldr	r3, [pc, #44]	@ (8007158 <global_stdio_init.part.0+0x30>)
 800712c:	4c0b      	ldr	r4, [pc, #44]	@ (800715c <global_stdio_init.part.0+0x34>)
 800712e:	4a0c      	ldr	r2, [pc, #48]	@ (8007160 <global_stdio_init.part.0+0x38>)
 8007130:	4620      	mov	r0, r4
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	2104      	movs	r1, #4
 8007136:	2200      	movs	r2, #0
 8007138:	f7ff ff94 	bl	8007064 <std>
 800713c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007140:	2201      	movs	r2, #1
 8007142:	2109      	movs	r1, #9
 8007144:	f7ff ff8e 	bl	8007064 <std>
 8007148:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800714c:	2202      	movs	r2, #2
 800714e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007152:	2112      	movs	r1, #18
 8007154:	f7ff bf86 	b.w	8007064 <std>
 8007158:	200004e4 	.word	0x200004e4
 800715c:	200003ac 	.word	0x200003ac
 8007160:	080070d1 	.word	0x080070d1

08007164 <__sfp_lock_acquire>:
 8007164:	4801      	ldr	r0, [pc, #4]	@ (800716c <__sfp_lock_acquire+0x8>)
 8007166:	f000 bf04 	b.w	8007f72 <__retarget_lock_acquire_recursive>
 800716a:	bf00      	nop
 800716c:	200004e9 	.word	0x200004e9

08007170 <__sfp_lock_release>:
 8007170:	4801      	ldr	r0, [pc, #4]	@ (8007178 <__sfp_lock_release+0x8>)
 8007172:	f000 beff 	b.w	8007f74 <__retarget_lock_release_recursive>
 8007176:	bf00      	nop
 8007178:	200004e9 	.word	0x200004e9

0800717c <__sinit>:
 800717c:	b510      	push	{r4, lr}
 800717e:	4604      	mov	r4, r0
 8007180:	f7ff fff0 	bl	8007164 <__sfp_lock_acquire>
 8007184:	6a23      	ldr	r3, [r4, #32]
 8007186:	b11b      	cbz	r3, 8007190 <__sinit+0x14>
 8007188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800718c:	f7ff bff0 	b.w	8007170 <__sfp_lock_release>
 8007190:	4b04      	ldr	r3, [pc, #16]	@ (80071a4 <__sinit+0x28>)
 8007192:	6223      	str	r3, [r4, #32]
 8007194:	4b04      	ldr	r3, [pc, #16]	@ (80071a8 <__sinit+0x2c>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1f5      	bne.n	8007188 <__sinit+0xc>
 800719c:	f7ff ffc4 	bl	8007128 <global_stdio_init.part.0>
 80071a0:	e7f2      	b.n	8007188 <__sinit+0xc>
 80071a2:	bf00      	nop
 80071a4:	080070e9 	.word	0x080070e9
 80071a8:	200004e4 	.word	0x200004e4

080071ac <sulp>:
 80071ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b0:	460f      	mov	r7, r1
 80071b2:	4690      	mov	r8, r2
 80071b4:	f002 feca 	bl	8009f4c <__ulp>
 80071b8:	4604      	mov	r4, r0
 80071ba:	460d      	mov	r5, r1
 80071bc:	f1b8 0f00 	cmp.w	r8, #0
 80071c0:	d011      	beq.n	80071e6 <sulp+0x3a>
 80071c2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80071c6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	dd0b      	ble.n	80071e6 <sulp+0x3a>
 80071ce:	2400      	movs	r4, #0
 80071d0:	051b      	lsls	r3, r3, #20
 80071d2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80071d6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80071da:	4622      	mov	r2, r4
 80071dc:	462b      	mov	r3, r5
 80071de:	f7f9 f97b 	bl	80004d8 <__aeabi_dmul>
 80071e2:	4604      	mov	r4, r0
 80071e4:	460d      	mov	r5, r1
 80071e6:	4620      	mov	r0, r4
 80071e8:	4629      	mov	r1, r5
 80071ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080071f0 <_strtod_l>:
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	b09f      	sub	sp, #124	@ 0x7c
 80071f6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80071f8:	2200      	movs	r2, #0
 80071fa:	460c      	mov	r4, r1
 80071fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80071fe:	f04f 0a00 	mov.w	sl, #0
 8007202:	f04f 0b00 	mov.w	fp, #0
 8007206:	460a      	mov	r2, r1
 8007208:	9005      	str	r0, [sp, #20]
 800720a:	9219      	str	r2, [sp, #100]	@ 0x64
 800720c:	7811      	ldrb	r1, [r2, #0]
 800720e:	292b      	cmp	r1, #43	@ 0x2b
 8007210:	d048      	beq.n	80072a4 <_strtod_l+0xb4>
 8007212:	d836      	bhi.n	8007282 <_strtod_l+0x92>
 8007214:	290d      	cmp	r1, #13
 8007216:	d830      	bhi.n	800727a <_strtod_l+0x8a>
 8007218:	2908      	cmp	r1, #8
 800721a:	d830      	bhi.n	800727e <_strtod_l+0x8e>
 800721c:	2900      	cmp	r1, #0
 800721e:	d039      	beq.n	8007294 <_strtod_l+0xa4>
 8007220:	2200      	movs	r2, #0
 8007222:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007224:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007226:	782a      	ldrb	r2, [r5, #0]
 8007228:	2a30      	cmp	r2, #48	@ 0x30
 800722a:	f040 80b1 	bne.w	8007390 <_strtod_l+0x1a0>
 800722e:	786a      	ldrb	r2, [r5, #1]
 8007230:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007234:	2a58      	cmp	r2, #88	@ 0x58
 8007236:	d16c      	bne.n	8007312 <_strtod_l+0x122>
 8007238:	9302      	str	r3, [sp, #8]
 800723a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800723c:	4a8e      	ldr	r2, [pc, #568]	@ (8007478 <_strtod_l+0x288>)
 800723e:	9301      	str	r3, [sp, #4]
 8007240:	ab1a      	add	r3, sp, #104	@ 0x68
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	9805      	ldr	r0, [sp, #20]
 8007246:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007248:	a919      	add	r1, sp, #100	@ 0x64
 800724a:	f001 fd75 	bl	8008d38 <__gethex>
 800724e:	f010 060f 	ands.w	r6, r0, #15
 8007252:	4604      	mov	r4, r0
 8007254:	d005      	beq.n	8007262 <_strtod_l+0x72>
 8007256:	2e06      	cmp	r6, #6
 8007258:	d126      	bne.n	80072a8 <_strtod_l+0xb8>
 800725a:	2300      	movs	r3, #0
 800725c:	3501      	adds	r5, #1
 800725e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007264:	2b00      	cmp	r3, #0
 8007266:	f040 8584 	bne.w	8007d72 <_strtod_l+0xb82>
 800726a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800726c:	b1bb      	cbz	r3, 800729e <_strtod_l+0xae>
 800726e:	4650      	mov	r0, sl
 8007270:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007274:	b01f      	add	sp, #124	@ 0x7c
 8007276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727a:	2920      	cmp	r1, #32
 800727c:	d1d0      	bne.n	8007220 <_strtod_l+0x30>
 800727e:	3201      	adds	r2, #1
 8007280:	e7c3      	b.n	800720a <_strtod_l+0x1a>
 8007282:	292d      	cmp	r1, #45	@ 0x2d
 8007284:	d1cc      	bne.n	8007220 <_strtod_l+0x30>
 8007286:	2101      	movs	r1, #1
 8007288:	910b      	str	r1, [sp, #44]	@ 0x2c
 800728a:	1c51      	adds	r1, r2, #1
 800728c:	9119      	str	r1, [sp, #100]	@ 0x64
 800728e:	7852      	ldrb	r2, [r2, #1]
 8007290:	2a00      	cmp	r2, #0
 8007292:	d1c7      	bne.n	8007224 <_strtod_l+0x34>
 8007294:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007296:	9419      	str	r4, [sp, #100]	@ 0x64
 8007298:	2b00      	cmp	r3, #0
 800729a:	f040 8568 	bne.w	8007d6e <_strtod_l+0xb7e>
 800729e:	4650      	mov	r0, sl
 80072a0:	4659      	mov	r1, fp
 80072a2:	e7e7      	b.n	8007274 <_strtod_l+0x84>
 80072a4:	2100      	movs	r1, #0
 80072a6:	e7ef      	b.n	8007288 <_strtod_l+0x98>
 80072a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80072aa:	b13a      	cbz	r2, 80072bc <_strtod_l+0xcc>
 80072ac:	2135      	movs	r1, #53	@ 0x35
 80072ae:	a81c      	add	r0, sp, #112	@ 0x70
 80072b0:	f002 ff3c 	bl	800a12c <__copybits>
 80072b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072b6:	9805      	ldr	r0, [sp, #20]
 80072b8:	f002 fb16 	bl	80098e8 <_Bfree>
 80072bc:	3e01      	subs	r6, #1
 80072be:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80072c0:	2e04      	cmp	r6, #4
 80072c2:	d806      	bhi.n	80072d2 <_strtod_l+0xe2>
 80072c4:	e8df f006 	tbb	[pc, r6]
 80072c8:	201d0314 	.word	0x201d0314
 80072cc:	14          	.byte	0x14
 80072cd:	00          	.byte	0x00
 80072ce:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80072d2:	05e1      	lsls	r1, r4, #23
 80072d4:	bf48      	it	mi
 80072d6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80072da:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072de:	0d1b      	lsrs	r3, r3, #20
 80072e0:	051b      	lsls	r3, r3, #20
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1bd      	bne.n	8007262 <_strtod_l+0x72>
 80072e6:	f000 fe19 	bl	8007f1c <__errno>
 80072ea:	2322      	movs	r3, #34	@ 0x22
 80072ec:	6003      	str	r3, [r0, #0]
 80072ee:	e7b8      	b.n	8007262 <_strtod_l+0x72>
 80072f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80072f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80072f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80072fc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007300:	e7e7      	b.n	80072d2 <_strtod_l+0xe2>
 8007302:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800747c <_strtod_l+0x28c>
 8007306:	e7e4      	b.n	80072d2 <_strtod_l+0xe2>
 8007308:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800730c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007310:	e7df      	b.n	80072d2 <_strtod_l+0xe2>
 8007312:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	9219      	str	r2, [sp, #100]	@ 0x64
 8007318:	785b      	ldrb	r3, [r3, #1]
 800731a:	2b30      	cmp	r3, #48	@ 0x30
 800731c:	d0f9      	beq.n	8007312 <_strtod_l+0x122>
 800731e:	2b00      	cmp	r3, #0
 8007320:	d09f      	beq.n	8007262 <_strtod_l+0x72>
 8007322:	2301      	movs	r3, #1
 8007324:	9309      	str	r3, [sp, #36]	@ 0x24
 8007326:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007328:	220a      	movs	r2, #10
 800732a:	930c      	str	r3, [sp, #48]	@ 0x30
 800732c:	2300      	movs	r3, #0
 800732e:	461f      	mov	r7, r3
 8007330:	9308      	str	r3, [sp, #32]
 8007332:	930a      	str	r3, [sp, #40]	@ 0x28
 8007334:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007336:	7805      	ldrb	r5, [r0, #0]
 8007338:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800733c:	b2d9      	uxtb	r1, r3
 800733e:	2909      	cmp	r1, #9
 8007340:	d928      	bls.n	8007394 <_strtod_l+0x1a4>
 8007342:	2201      	movs	r2, #1
 8007344:	494e      	ldr	r1, [pc, #312]	@ (8007480 <_strtod_l+0x290>)
 8007346:	f000 fdcb 	bl	8007ee0 <strncmp>
 800734a:	2800      	cmp	r0, #0
 800734c:	d032      	beq.n	80073b4 <_strtod_l+0x1c4>
 800734e:	2000      	movs	r0, #0
 8007350:	462a      	mov	r2, r5
 8007352:	4681      	mov	r9, r0
 8007354:	463d      	mov	r5, r7
 8007356:	4603      	mov	r3, r0
 8007358:	2a65      	cmp	r2, #101	@ 0x65
 800735a:	d001      	beq.n	8007360 <_strtod_l+0x170>
 800735c:	2a45      	cmp	r2, #69	@ 0x45
 800735e:	d114      	bne.n	800738a <_strtod_l+0x19a>
 8007360:	b91d      	cbnz	r5, 800736a <_strtod_l+0x17a>
 8007362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007364:	4302      	orrs	r2, r0
 8007366:	d095      	beq.n	8007294 <_strtod_l+0xa4>
 8007368:	2500      	movs	r5, #0
 800736a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800736c:	1c62      	adds	r2, r4, #1
 800736e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007370:	7862      	ldrb	r2, [r4, #1]
 8007372:	2a2b      	cmp	r2, #43	@ 0x2b
 8007374:	d077      	beq.n	8007466 <_strtod_l+0x276>
 8007376:	2a2d      	cmp	r2, #45	@ 0x2d
 8007378:	d07b      	beq.n	8007472 <_strtod_l+0x282>
 800737a:	f04f 0c00 	mov.w	ip, #0
 800737e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007382:	2909      	cmp	r1, #9
 8007384:	f240 8082 	bls.w	800748c <_strtod_l+0x29c>
 8007388:	9419      	str	r4, [sp, #100]	@ 0x64
 800738a:	f04f 0800 	mov.w	r8, #0
 800738e:	e0a2      	b.n	80074d6 <_strtod_l+0x2e6>
 8007390:	2300      	movs	r3, #0
 8007392:	e7c7      	b.n	8007324 <_strtod_l+0x134>
 8007394:	2f08      	cmp	r7, #8
 8007396:	bfd5      	itete	le
 8007398:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800739a:	9908      	ldrgt	r1, [sp, #32]
 800739c:	fb02 3301 	mlale	r3, r2, r1, r3
 80073a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80073a4:	f100 0001 	add.w	r0, r0, #1
 80073a8:	bfd4      	ite	le
 80073aa:	930a      	strle	r3, [sp, #40]	@ 0x28
 80073ac:	9308      	strgt	r3, [sp, #32]
 80073ae:	3701      	adds	r7, #1
 80073b0:	9019      	str	r0, [sp, #100]	@ 0x64
 80073b2:	e7bf      	b.n	8007334 <_strtod_l+0x144>
 80073b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80073ba:	785a      	ldrb	r2, [r3, #1]
 80073bc:	b37f      	cbz	r7, 800741e <_strtod_l+0x22e>
 80073be:	4681      	mov	r9, r0
 80073c0:	463d      	mov	r5, r7
 80073c2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80073c6:	2b09      	cmp	r3, #9
 80073c8:	d912      	bls.n	80073f0 <_strtod_l+0x200>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e7c4      	b.n	8007358 <_strtod_l+0x168>
 80073ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073d0:	3001      	adds	r0, #1
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80073d6:	785a      	ldrb	r2, [r3, #1]
 80073d8:	2a30      	cmp	r2, #48	@ 0x30
 80073da:	d0f8      	beq.n	80073ce <_strtod_l+0x1de>
 80073dc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	f200 84cb 	bhi.w	8007d7c <_strtod_l+0xb8c>
 80073e6:	4681      	mov	r9, r0
 80073e8:	2000      	movs	r0, #0
 80073ea:	4605      	mov	r5, r0
 80073ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80073f0:	3a30      	subs	r2, #48	@ 0x30
 80073f2:	f100 0301 	add.w	r3, r0, #1
 80073f6:	d02a      	beq.n	800744e <_strtod_l+0x25e>
 80073f8:	4499      	add	r9, r3
 80073fa:	210a      	movs	r1, #10
 80073fc:	462b      	mov	r3, r5
 80073fe:	eb00 0c05 	add.w	ip, r0, r5
 8007402:	4563      	cmp	r3, ip
 8007404:	d10d      	bne.n	8007422 <_strtod_l+0x232>
 8007406:	1c69      	adds	r1, r5, #1
 8007408:	4401      	add	r1, r0
 800740a:	4428      	add	r0, r5
 800740c:	2808      	cmp	r0, #8
 800740e:	dc16      	bgt.n	800743e <_strtod_l+0x24e>
 8007410:	230a      	movs	r3, #10
 8007412:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007414:	fb03 2300 	mla	r3, r3, r0, r2
 8007418:	930a      	str	r3, [sp, #40]	@ 0x28
 800741a:	2300      	movs	r3, #0
 800741c:	e018      	b.n	8007450 <_strtod_l+0x260>
 800741e:	4638      	mov	r0, r7
 8007420:	e7da      	b.n	80073d8 <_strtod_l+0x1e8>
 8007422:	2b08      	cmp	r3, #8
 8007424:	f103 0301 	add.w	r3, r3, #1
 8007428:	dc03      	bgt.n	8007432 <_strtod_l+0x242>
 800742a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800742c:	434e      	muls	r6, r1
 800742e:	960a      	str	r6, [sp, #40]	@ 0x28
 8007430:	e7e7      	b.n	8007402 <_strtod_l+0x212>
 8007432:	2b10      	cmp	r3, #16
 8007434:	bfde      	ittt	le
 8007436:	9e08      	ldrle	r6, [sp, #32]
 8007438:	434e      	mulle	r6, r1
 800743a:	9608      	strle	r6, [sp, #32]
 800743c:	e7e1      	b.n	8007402 <_strtod_l+0x212>
 800743e:	280f      	cmp	r0, #15
 8007440:	dceb      	bgt.n	800741a <_strtod_l+0x22a>
 8007442:	230a      	movs	r3, #10
 8007444:	9808      	ldr	r0, [sp, #32]
 8007446:	fb03 2300 	mla	r3, r3, r0, r2
 800744a:	9308      	str	r3, [sp, #32]
 800744c:	e7e5      	b.n	800741a <_strtod_l+0x22a>
 800744e:	4629      	mov	r1, r5
 8007450:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007452:	460d      	mov	r5, r1
 8007454:	1c50      	adds	r0, r2, #1
 8007456:	9019      	str	r0, [sp, #100]	@ 0x64
 8007458:	7852      	ldrb	r2, [r2, #1]
 800745a:	4618      	mov	r0, r3
 800745c:	e7b1      	b.n	80073c2 <_strtod_l+0x1d2>
 800745e:	f04f 0900 	mov.w	r9, #0
 8007462:	2301      	movs	r3, #1
 8007464:	e77d      	b.n	8007362 <_strtod_l+0x172>
 8007466:	f04f 0c00 	mov.w	ip, #0
 800746a:	1ca2      	adds	r2, r4, #2
 800746c:	9219      	str	r2, [sp, #100]	@ 0x64
 800746e:	78a2      	ldrb	r2, [r4, #2]
 8007470:	e785      	b.n	800737e <_strtod_l+0x18e>
 8007472:	f04f 0c01 	mov.w	ip, #1
 8007476:	e7f8      	b.n	800746a <_strtod_l+0x27a>
 8007478:	0800abbc 	.word	0x0800abbc
 800747c:	7ff00000 	.word	0x7ff00000
 8007480:	0800aba3 	.word	0x0800aba3
 8007484:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007486:	1c51      	adds	r1, r2, #1
 8007488:	9119      	str	r1, [sp, #100]	@ 0x64
 800748a:	7852      	ldrb	r2, [r2, #1]
 800748c:	2a30      	cmp	r2, #48	@ 0x30
 800748e:	d0f9      	beq.n	8007484 <_strtod_l+0x294>
 8007490:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007494:	2908      	cmp	r1, #8
 8007496:	f63f af78 	bhi.w	800738a <_strtod_l+0x19a>
 800749a:	f04f 080a 	mov.w	r8, #10
 800749e:	3a30      	subs	r2, #48	@ 0x30
 80074a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80074a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80074a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80074a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80074a8:	1c56      	adds	r6, r2, #1
 80074aa:	9619      	str	r6, [sp, #100]	@ 0x64
 80074ac:	7852      	ldrb	r2, [r2, #1]
 80074ae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80074b2:	f1be 0f09 	cmp.w	lr, #9
 80074b6:	d939      	bls.n	800752c <_strtod_l+0x33c>
 80074b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80074ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80074be:	1a76      	subs	r6, r6, r1
 80074c0:	2e08      	cmp	r6, #8
 80074c2:	dc03      	bgt.n	80074cc <_strtod_l+0x2dc>
 80074c4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80074c6:	4588      	cmp	r8, r1
 80074c8:	bfa8      	it	ge
 80074ca:	4688      	movge	r8, r1
 80074cc:	f1bc 0f00 	cmp.w	ip, #0
 80074d0:	d001      	beq.n	80074d6 <_strtod_l+0x2e6>
 80074d2:	f1c8 0800 	rsb	r8, r8, #0
 80074d6:	2d00      	cmp	r5, #0
 80074d8:	d14e      	bne.n	8007578 <_strtod_l+0x388>
 80074da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074dc:	4308      	orrs	r0, r1
 80074de:	f47f aec0 	bne.w	8007262 <_strtod_l+0x72>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f47f aed6 	bne.w	8007294 <_strtod_l+0xa4>
 80074e8:	2a69      	cmp	r2, #105	@ 0x69
 80074ea:	d028      	beq.n	800753e <_strtod_l+0x34e>
 80074ec:	dc25      	bgt.n	800753a <_strtod_l+0x34a>
 80074ee:	2a49      	cmp	r2, #73	@ 0x49
 80074f0:	d025      	beq.n	800753e <_strtod_l+0x34e>
 80074f2:	2a4e      	cmp	r2, #78	@ 0x4e
 80074f4:	f47f aece 	bne.w	8007294 <_strtod_l+0xa4>
 80074f8:	499a      	ldr	r1, [pc, #616]	@ (8007764 <_strtod_l+0x574>)
 80074fa:	a819      	add	r0, sp, #100	@ 0x64
 80074fc:	f001 fe3e 	bl	800917c <__match>
 8007500:	2800      	cmp	r0, #0
 8007502:	f43f aec7 	beq.w	8007294 <_strtod_l+0xa4>
 8007506:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	2b28      	cmp	r3, #40	@ 0x28
 800750c:	d12e      	bne.n	800756c <_strtod_l+0x37c>
 800750e:	4996      	ldr	r1, [pc, #600]	@ (8007768 <_strtod_l+0x578>)
 8007510:	aa1c      	add	r2, sp, #112	@ 0x70
 8007512:	a819      	add	r0, sp, #100	@ 0x64
 8007514:	f001 fe46 	bl	80091a4 <__hexnan>
 8007518:	2805      	cmp	r0, #5
 800751a:	d127      	bne.n	800756c <_strtod_l+0x37c>
 800751c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800751e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007522:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007526:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800752a:	e69a      	b.n	8007262 <_strtod_l+0x72>
 800752c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800752e:	fb08 2101 	mla	r1, r8, r1, r2
 8007532:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007536:	920e      	str	r2, [sp, #56]	@ 0x38
 8007538:	e7b5      	b.n	80074a6 <_strtod_l+0x2b6>
 800753a:	2a6e      	cmp	r2, #110	@ 0x6e
 800753c:	e7da      	b.n	80074f4 <_strtod_l+0x304>
 800753e:	498b      	ldr	r1, [pc, #556]	@ (800776c <_strtod_l+0x57c>)
 8007540:	a819      	add	r0, sp, #100	@ 0x64
 8007542:	f001 fe1b 	bl	800917c <__match>
 8007546:	2800      	cmp	r0, #0
 8007548:	f43f aea4 	beq.w	8007294 <_strtod_l+0xa4>
 800754c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800754e:	4988      	ldr	r1, [pc, #544]	@ (8007770 <_strtod_l+0x580>)
 8007550:	3b01      	subs	r3, #1
 8007552:	a819      	add	r0, sp, #100	@ 0x64
 8007554:	9319      	str	r3, [sp, #100]	@ 0x64
 8007556:	f001 fe11 	bl	800917c <__match>
 800755a:	b910      	cbnz	r0, 8007562 <_strtod_l+0x372>
 800755c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800755e:	3301      	adds	r3, #1
 8007560:	9319      	str	r3, [sp, #100]	@ 0x64
 8007562:	f04f 0a00 	mov.w	sl, #0
 8007566:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8007774 <_strtod_l+0x584>
 800756a:	e67a      	b.n	8007262 <_strtod_l+0x72>
 800756c:	4882      	ldr	r0, [pc, #520]	@ (8007778 <_strtod_l+0x588>)
 800756e:	f000 fd1f 	bl	8007fb0 <nan>
 8007572:	4682      	mov	sl, r0
 8007574:	468b      	mov	fp, r1
 8007576:	e674      	b.n	8007262 <_strtod_l+0x72>
 8007578:	eba8 0309 	sub.w	r3, r8, r9
 800757c:	2f00      	cmp	r7, #0
 800757e:	bf08      	it	eq
 8007580:	462f      	moveq	r7, r5
 8007582:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007584:	2d10      	cmp	r5, #16
 8007586:	462c      	mov	r4, r5
 8007588:	9309      	str	r3, [sp, #36]	@ 0x24
 800758a:	bfa8      	it	ge
 800758c:	2410      	movge	r4, #16
 800758e:	f7f8 ff29 	bl	80003e4 <__aeabi_ui2d>
 8007592:	2d09      	cmp	r5, #9
 8007594:	4682      	mov	sl, r0
 8007596:	468b      	mov	fp, r1
 8007598:	dc11      	bgt.n	80075be <_strtod_l+0x3ce>
 800759a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800759c:	2b00      	cmp	r3, #0
 800759e:	f43f ae60 	beq.w	8007262 <_strtod_l+0x72>
 80075a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a4:	dd76      	ble.n	8007694 <_strtod_l+0x4a4>
 80075a6:	2b16      	cmp	r3, #22
 80075a8:	dc5d      	bgt.n	8007666 <_strtod_l+0x476>
 80075aa:	4974      	ldr	r1, [pc, #464]	@ (800777c <_strtod_l+0x58c>)
 80075ac:	4652      	mov	r2, sl
 80075ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075b2:	465b      	mov	r3, fp
 80075b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075b8:	f7f8 ff8e 	bl	80004d8 <__aeabi_dmul>
 80075bc:	e7d9      	b.n	8007572 <_strtod_l+0x382>
 80075be:	4b6f      	ldr	r3, [pc, #444]	@ (800777c <_strtod_l+0x58c>)
 80075c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80075c8:	f7f8 ff86 	bl	80004d8 <__aeabi_dmul>
 80075cc:	4682      	mov	sl, r0
 80075ce:	9808      	ldr	r0, [sp, #32]
 80075d0:	468b      	mov	fp, r1
 80075d2:	f7f8 ff07 	bl	80003e4 <__aeabi_ui2d>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4650      	mov	r0, sl
 80075dc:	4659      	mov	r1, fp
 80075de:	f7f8 fdc5 	bl	800016c <__adddf3>
 80075e2:	2d0f      	cmp	r5, #15
 80075e4:	4682      	mov	sl, r0
 80075e6:	468b      	mov	fp, r1
 80075e8:	ddd7      	ble.n	800759a <_strtod_l+0x3aa>
 80075ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ec:	1b2c      	subs	r4, r5, r4
 80075ee:	441c      	add	r4, r3
 80075f0:	2c00      	cmp	r4, #0
 80075f2:	f340 8096 	ble.w	8007722 <_strtod_l+0x532>
 80075f6:	f014 030f 	ands.w	r3, r4, #15
 80075fa:	d00a      	beq.n	8007612 <_strtod_l+0x422>
 80075fc:	495f      	ldr	r1, [pc, #380]	@ (800777c <_strtod_l+0x58c>)
 80075fe:	4652      	mov	r2, sl
 8007600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007608:	465b      	mov	r3, fp
 800760a:	f7f8 ff65 	bl	80004d8 <__aeabi_dmul>
 800760e:	4682      	mov	sl, r0
 8007610:	468b      	mov	fp, r1
 8007612:	f034 040f 	bics.w	r4, r4, #15
 8007616:	d073      	beq.n	8007700 <_strtod_l+0x510>
 8007618:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800761c:	dd48      	ble.n	80076b0 <_strtod_l+0x4c0>
 800761e:	2400      	movs	r4, #0
 8007620:	46a0      	mov	r8, r4
 8007622:	46a1      	mov	r9, r4
 8007624:	940a      	str	r4, [sp, #40]	@ 0x28
 8007626:	2322      	movs	r3, #34	@ 0x22
 8007628:	f04f 0a00 	mov.w	sl, #0
 800762c:	9a05      	ldr	r2, [sp, #20]
 800762e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8007774 <_strtod_l+0x584>
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007636:	2b00      	cmp	r3, #0
 8007638:	f43f ae13 	beq.w	8007262 <_strtod_l+0x72>
 800763c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800763e:	9805      	ldr	r0, [sp, #20]
 8007640:	f002 f952 	bl	80098e8 <_Bfree>
 8007644:	4649      	mov	r1, r9
 8007646:	9805      	ldr	r0, [sp, #20]
 8007648:	f002 f94e 	bl	80098e8 <_Bfree>
 800764c:	4641      	mov	r1, r8
 800764e:	9805      	ldr	r0, [sp, #20]
 8007650:	f002 f94a 	bl	80098e8 <_Bfree>
 8007654:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007656:	9805      	ldr	r0, [sp, #20]
 8007658:	f002 f946 	bl	80098e8 <_Bfree>
 800765c:	4621      	mov	r1, r4
 800765e:	9805      	ldr	r0, [sp, #20]
 8007660:	f002 f942 	bl	80098e8 <_Bfree>
 8007664:	e5fd      	b.n	8007262 <_strtod_l+0x72>
 8007666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007668:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800766c:	4293      	cmp	r3, r2
 800766e:	dbbc      	blt.n	80075ea <_strtod_l+0x3fa>
 8007670:	4c42      	ldr	r4, [pc, #264]	@ (800777c <_strtod_l+0x58c>)
 8007672:	f1c5 050f 	rsb	r5, r5, #15
 8007676:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800767a:	4652      	mov	r2, sl
 800767c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007680:	465b      	mov	r3, fp
 8007682:	f7f8 ff29 	bl	80004d8 <__aeabi_dmul>
 8007686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007688:	1b5d      	subs	r5, r3, r5
 800768a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800768e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007692:	e791      	b.n	80075b8 <_strtod_l+0x3c8>
 8007694:	3316      	adds	r3, #22
 8007696:	dba8      	blt.n	80075ea <_strtod_l+0x3fa>
 8007698:	4b38      	ldr	r3, [pc, #224]	@ (800777c <_strtod_l+0x58c>)
 800769a:	eba9 0808 	sub.w	r8, r9, r8
 800769e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80076a2:	4650      	mov	r0, sl
 80076a4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80076a8:	4659      	mov	r1, fp
 80076aa:	f7f9 f83f 	bl	800072c <__aeabi_ddiv>
 80076ae:	e760      	b.n	8007572 <_strtod_l+0x382>
 80076b0:	4b33      	ldr	r3, [pc, #204]	@ (8007780 <_strtod_l+0x590>)
 80076b2:	4650      	mov	r0, sl
 80076b4:	9308      	str	r3, [sp, #32]
 80076b6:	2300      	movs	r3, #0
 80076b8:	4659      	mov	r1, fp
 80076ba:	461e      	mov	r6, r3
 80076bc:	1124      	asrs	r4, r4, #4
 80076be:	2c01      	cmp	r4, #1
 80076c0:	dc21      	bgt.n	8007706 <_strtod_l+0x516>
 80076c2:	b10b      	cbz	r3, 80076c8 <_strtod_l+0x4d8>
 80076c4:	4682      	mov	sl, r0
 80076c6:	468b      	mov	fp, r1
 80076c8:	492d      	ldr	r1, [pc, #180]	@ (8007780 <_strtod_l+0x590>)
 80076ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80076ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80076d2:	4652      	mov	r2, sl
 80076d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076d8:	465b      	mov	r3, fp
 80076da:	f7f8 fefd 	bl	80004d8 <__aeabi_dmul>
 80076de:	4b25      	ldr	r3, [pc, #148]	@ (8007774 <_strtod_l+0x584>)
 80076e0:	460a      	mov	r2, r1
 80076e2:	400b      	ands	r3, r1
 80076e4:	4927      	ldr	r1, [pc, #156]	@ (8007784 <_strtod_l+0x594>)
 80076e6:	4682      	mov	sl, r0
 80076e8:	428b      	cmp	r3, r1
 80076ea:	d898      	bhi.n	800761e <_strtod_l+0x42e>
 80076ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80076f0:	428b      	cmp	r3, r1
 80076f2:	bf86      	itte	hi
 80076f4:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80076f8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007788 <_strtod_l+0x598>
 80076fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007700:	2300      	movs	r3, #0
 8007702:	9308      	str	r3, [sp, #32]
 8007704:	e07a      	b.n	80077fc <_strtod_l+0x60c>
 8007706:	07e2      	lsls	r2, r4, #31
 8007708:	d505      	bpl.n	8007716 <_strtod_l+0x526>
 800770a:	9b08      	ldr	r3, [sp, #32]
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	f7f8 fee2 	bl	80004d8 <__aeabi_dmul>
 8007714:	2301      	movs	r3, #1
 8007716:	9a08      	ldr	r2, [sp, #32]
 8007718:	3601      	adds	r6, #1
 800771a:	3208      	adds	r2, #8
 800771c:	1064      	asrs	r4, r4, #1
 800771e:	9208      	str	r2, [sp, #32]
 8007720:	e7cd      	b.n	80076be <_strtod_l+0x4ce>
 8007722:	d0ed      	beq.n	8007700 <_strtod_l+0x510>
 8007724:	4264      	negs	r4, r4
 8007726:	f014 020f 	ands.w	r2, r4, #15
 800772a:	d00a      	beq.n	8007742 <_strtod_l+0x552>
 800772c:	4b13      	ldr	r3, [pc, #76]	@ (800777c <_strtod_l+0x58c>)
 800772e:	4650      	mov	r0, sl
 8007730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007734:	4659      	mov	r1, fp
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	f7f8 fff7 	bl	800072c <__aeabi_ddiv>
 800773e:	4682      	mov	sl, r0
 8007740:	468b      	mov	fp, r1
 8007742:	1124      	asrs	r4, r4, #4
 8007744:	d0dc      	beq.n	8007700 <_strtod_l+0x510>
 8007746:	2c1f      	cmp	r4, #31
 8007748:	dd20      	ble.n	800778c <_strtod_l+0x59c>
 800774a:	2400      	movs	r4, #0
 800774c:	46a0      	mov	r8, r4
 800774e:	46a1      	mov	r9, r4
 8007750:	940a      	str	r4, [sp, #40]	@ 0x28
 8007752:	2322      	movs	r3, #34	@ 0x22
 8007754:	9a05      	ldr	r2, [sp, #20]
 8007756:	f04f 0a00 	mov.w	sl, #0
 800775a:	f04f 0b00 	mov.w	fp, #0
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	e768      	b.n	8007634 <_strtod_l+0x444>
 8007762:	bf00      	nop
 8007764:	0800ab77 	.word	0x0800ab77
 8007768:	0800aba8 	.word	0x0800aba8
 800776c:	0800ab6f 	.word	0x0800ab6f
 8007770:	0800ad04 	.word	0x0800ad04
 8007774:	7ff00000 	.word	0x7ff00000
 8007778:	0800af93 	.word	0x0800af93
 800777c:	0800ae90 	.word	0x0800ae90
 8007780:	0800ae68 	.word	0x0800ae68
 8007784:	7ca00000 	.word	0x7ca00000
 8007788:	7fefffff 	.word	0x7fefffff
 800778c:	f014 0310 	ands.w	r3, r4, #16
 8007790:	bf18      	it	ne
 8007792:	236a      	movne	r3, #106	@ 0x6a
 8007794:	4650      	mov	r0, sl
 8007796:	9308      	str	r3, [sp, #32]
 8007798:	4659      	mov	r1, fp
 800779a:	2300      	movs	r3, #0
 800779c:	4ea9      	ldr	r6, [pc, #676]	@ (8007a44 <_strtod_l+0x854>)
 800779e:	07e2      	lsls	r2, r4, #31
 80077a0:	d504      	bpl.n	80077ac <_strtod_l+0x5bc>
 80077a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80077a6:	f7f8 fe97 	bl	80004d8 <__aeabi_dmul>
 80077aa:	2301      	movs	r3, #1
 80077ac:	1064      	asrs	r4, r4, #1
 80077ae:	f106 0608 	add.w	r6, r6, #8
 80077b2:	d1f4      	bne.n	800779e <_strtod_l+0x5ae>
 80077b4:	b10b      	cbz	r3, 80077ba <_strtod_l+0x5ca>
 80077b6:	4682      	mov	sl, r0
 80077b8:	468b      	mov	fp, r1
 80077ba:	9b08      	ldr	r3, [sp, #32]
 80077bc:	b1b3      	cbz	r3, 80077ec <_strtod_l+0x5fc>
 80077be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80077c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	4659      	mov	r1, fp
 80077ca:	dd0f      	ble.n	80077ec <_strtod_l+0x5fc>
 80077cc:	2b1f      	cmp	r3, #31
 80077ce:	dd57      	ble.n	8007880 <_strtod_l+0x690>
 80077d0:	2b34      	cmp	r3, #52	@ 0x34
 80077d2:	bfd8      	it	le
 80077d4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80077d8:	f04f 0a00 	mov.w	sl, #0
 80077dc:	bfcf      	iteee	gt
 80077de:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80077e2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80077e6:	4093      	lslle	r3, r2
 80077e8:	ea03 0b01 	andle.w	fp, r3, r1
 80077ec:	2200      	movs	r2, #0
 80077ee:	2300      	movs	r3, #0
 80077f0:	4650      	mov	r0, sl
 80077f2:	4659      	mov	r1, fp
 80077f4:	f7f9 f8d8 	bl	80009a8 <__aeabi_dcmpeq>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d1a6      	bne.n	800774a <_strtod_l+0x55a>
 80077fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077fe:	463a      	mov	r2, r7
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007804:	462b      	mov	r3, r5
 8007806:	9805      	ldr	r0, [sp, #20]
 8007808:	f002 f8d6 	bl	80099b8 <__s2b>
 800780c:	900a      	str	r0, [sp, #40]	@ 0x28
 800780e:	2800      	cmp	r0, #0
 8007810:	f43f af05 	beq.w	800761e <_strtod_l+0x42e>
 8007814:	2400      	movs	r4, #0
 8007816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007818:	eba9 0308 	sub.w	r3, r9, r8
 800781c:	2a00      	cmp	r2, #0
 800781e:	bfa8      	it	ge
 8007820:	2300      	movge	r3, #0
 8007822:	46a0      	mov	r8, r4
 8007824:	9312      	str	r3, [sp, #72]	@ 0x48
 8007826:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800782a:	9316      	str	r3, [sp, #88]	@ 0x58
 800782c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800782e:	9805      	ldr	r0, [sp, #20]
 8007830:	6859      	ldr	r1, [r3, #4]
 8007832:	f002 f819 	bl	8009868 <_Balloc>
 8007836:	4681      	mov	r9, r0
 8007838:	2800      	cmp	r0, #0
 800783a:	f43f aef4 	beq.w	8007626 <_strtod_l+0x436>
 800783e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007840:	300c      	adds	r0, #12
 8007842:	691a      	ldr	r2, [r3, #16]
 8007844:	f103 010c 	add.w	r1, r3, #12
 8007848:	3202      	adds	r2, #2
 800784a:	0092      	lsls	r2, r2, #2
 800784c:	f000 fba1 	bl	8007f92 <memcpy>
 8007850:	ab1c      	add	r3, sp, #112	@ 0x70
 8007852:	9301      	str	r3, [sp, #4]
 8007854:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	4652      	mov	r2, sl
 800785a:	465b      	mov	r3, fp
 800785c:	9805      	ldr	r0, [sp, #20]
 800785e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007862:	f002 fbdb 	bl	800a01c <__d2b>
 8007866:	901a      	str	r0, [sp, #104]	@ 0x68
 8007868:	2800      	cmp	r0, #0
 800786a:	f43f aedc 	beq.w	8007626 <_strtod_l+0x436>
 800786e:	2101      	movs	r1, #1
 8007870:	9805      	ldr	r0, [sp, #20]
 8007872:	f002 f937 	bl	8009ae4 <__i2b>
 8007876:	4680      	mov	r8, r0
 8007878:	b948      	cbnz	r0, 800788e <_strtod_l+0x69e>
 800787a:	f04f 0800 	mov.w	r8, #0
 800787e:	e6d2      	b.n	8007626 <_strtod_l+0x436>
 8007880:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	ea03 0a0a 	and.w	sl, r3, sl
 800788c:	e7ae      	b.n	80077ec <_strtod_l+0x5fc>
 800788e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007890:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007892:	2d00      	cmp	r5, #0
 8007894:	bfab      	itete	ge
 8007896:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007898:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800789a:	18ef      	addge	r7, r5, r3
 800789c:	1b5e      	sublt	r6, r3, r5
 800789e:	9b08      	ldr	r3, [sp, #32]
 80078a0:	bfa8      	it	ge
 80078a2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80078a4:	eba5 0503 	sub.w	r5, r5, r3
 80078a8:	4415      	add	r5, r2
 80078aa:	4b67      	ldr	r3, [pc, #412]	@ (8007a48 <_strtod_l+0x858>)
 80078ac:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 80078b0:	bfb8      	it	lt
 80078b2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80078b4:	429d      	cmp	r5, r3
 80078b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80078ba:	da50      	bge.n	800795e <_strtod_l+0x76e>
 80078bc:	1b5b      	subs	r3, r3, r5
 80078be:	2b1f      	cmp	r3, #31
 80078c0:	f04f 0101 	mov.w	r1, #1
 80078c4:	eba2 0203 	sub.w	r2, r2, r3
 80078c8:	dc3d      	bgt.n	8007946 <_strtod_l+0x756>
 80078ca:	fa01 f303 	lsl.w	r3, r1, r3
 80078ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078d0:	2300      	movs	r3, #0
 80078d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80078d4:	18bd      	adds	r5, r7, r2
 80078d6:	9b08      	ldr	r3, [sp, #32]
 80078d8:	42af      	cmp	r7, r5
 80078da:	4416      	add	r6, r2
 80078dc:	441e      	add	r6, r3
 80078de:	463b      	mov	r3, r7
 80078e0:	bfa8      	it	ge
 80078e2:	462b      	movge	r3, r5
 80078e4:	42b3      	cmp	r3, r6
 80078e6:	bfa8      	it	ge
 80078e8:	4633      	movge	r3, r6
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bfc2      	ittt	gt
 80078ee:	1aed      	subgt	r5, r5, r3
 80078f0:	1af6      	subgt	r6, r6, r3
 80078f2:	1aff      	subgt	r7, r7, r3
 80078f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	dd16      	ble.n	8007928 <_strtod_l+0x738>
 80078fa:	4641      	mov	r1, r8
 80078fc:	461a      	mov	r2, r3
 80078fe:	9805      	ldr	r0, [sp, #20]
 8007900:	f002 f9ae 	bl	8009c60 <__pow5mult>
 8007904:	4680      	mov	r8, r0
 8007906:	2800      	cmp	r0, #0
 8007908:	d0b7      	beq.n	800787a <_strtod_l+0x68a>
 800790a:	4601      	mov	r1, r0
 800790c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800790e:	9805      	ldr	r0, [sp, #20]
 8007910:	f002 f8fe 	bl	8009b10 <__multiply>
 8007914:	900e      	str	r0, [sp, #56]	@ 0x38
 8007916:	2800      	cmp	r0, #0
 8007918:	f43f ae85 	beq.w	8007626 <_strtod_l+0x436>
 800791c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800791e:	9805      	ldr	r0, [sp, #20]
 8007920:	f001 ffe2 	bl	80098e8 <_Bfree>
 8007924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007926:	931a      	str	r3, [sp, #104]	@ 0x68
 8007928:	2d00      	cmp	r5, #0
 800792a:	dc1d      	bgt.n	8007968 <_strtod_l+0x778>
 800792c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	dd23      	ble.n	800797a <_strtod_l+0x78a>
 8007932:	4649      	mov	r1, r9
 8007934:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007936:	9805      	ldr	r0, [sp, #20]
 8007938:	f002 f992 	bl	8009c60 <__pow5mult>
 800793c:	4681      	mov	r9, r0
 800793e:	b9e0      	cbnz	r0, 800797a <_strtod_l+0x78a>
 8007940:	f04f 0900 	mov.w	r9, #0
 8007944:	e66f      	b.n	8007626 <_strtod_l+0x436>
 8007946:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800794a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800794e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007952:	35e2      	adds	r5, #226	@ 0xe2
 8007954:	fa01 f305 	lsl.w	r3, r1, r5
 8007958:	9310      	str	r3, [sp, #64]	@ 0x40
 800795a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800795c:	e7ba      	b.n	80078d4 <_strtod_l+0x6e4>
 800795e:	2300      	movs	r3, #0
 8007960:	9310      	str	r3, [sp, #64]	@ 0x40
 8007962:	2301      	movs	r3, #1
 8007964:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007966:	e7b5      	b.n	80078d4 <_strtod_l+0x6e4>
 8007968:	462a      	mov	r2, r5
 800796a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800796c:	9805      	ldr	r0, [sp, #20]
 800796e:	f002 f9d1 	bl	8009d14 <__lshift>
 8007972:	901a      	str	r0, [sp, #104]	@ 0x68
 8007974:	2800      	cmp	r0, #0
 8007976:	d1d9      	bne.n	800792c <_strtod_l+0x73c>
 8007978:	e655      	b.n	8007626 <_strtod_l+0x436>
 800797a:	2e00      	cmp	r6, #0
 800797c:	dd07      	ble.n	800798e <_strtod_l+0x79e>
 800797e:	4649      	mov	r1, r9
 8007980:	4632      	mov	r2, r6
 8007982:	9805      	ldr	r0, [sp, #20]
 8007984:	f002 f9c6 	bl	8009d14 <__lshift>
 8007988:	4681      	mov	r9, r0
 800798a:	2800      	cmp	r0, #0
 800798c:	d0d8      	beq.n	8007940 <_strtod_l+0x750>
 800798e:	2f00      	cmp	r7, #0
 8007990:	dd08      	ble.n	80079a4 <_strtod_l+0x7b4>
 8007992:	4641      	mov	r1, r8
 8007994:	463a      	mov	r2, r7
 8007996:	9805      	ldr	r0, [sp, #20]
 8007998:	f002 f9bc 	bl	8009d14 <__lshift>
 800799c:	4680      	mov	r8, r0
 800799e:	2800      	cmp	r0, #0
 80079a0:	f43f ae41 	beq.w	8007626 <_strtod_l+0x436>
 80079a4:	464a      	mov	r2, r9
 80079a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079a8:	9805      	ldr	r0, [sp, #20]
 80079aa:	f002 fa3b 	bl	8009e24 <__mdiff>
 80079ae:	4604      	mov	r4, r0
 80079b0:	2800      	cmp	r0, #0
 80079b2:	f43f ae38 	beq.w	8007626 <_strtod_l+0x436>
 80079b6:	68c3      	ldr	r3, [r0, #12]
 80079b8:	4641      	mov	r1, r8
 80079ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079bc:	2300      	movs	r3, #0
 80079be:	60c3      	str	r3, [r0, #12]
 80079c0:	f002 fa14 	bl	8009dec <__mcmp>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	da45      	bge.n	8007a54 <_strtod_l+0x864>
 80079c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ca:	ea53 030a 	orrs.w	r3, r3, sl
 80079ce:	d16b      	bne.n	8007aa8 <_strtod_l+0x8b8>
 80079d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d167      	bne.n	8007aa8 <_strtod_l+0x8b8>
 80079d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80079dc:	0d1b      	lsrs	r3, r3, #20
 80079de:	051b      	lsls	r3, r3, #20
 80079e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80079e4:	d960      	bls.n	8007aa8 <_strtod_l+0x8b8>
 80079e6:	6963      	ldr	r3, [r4, #20]
 80079e8:	b913      	cbnz	r3, 80079f0 <_strtod_l+0x800>
 80079ea:	6923      	ldr	r3, [r4, #16]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	dd5b      	ble.n	8007aa8 <_strtod_l+0x8b8>
 80079f0:	4621      	mov	r1, r4
 80079f2:	2201      	movs	r2, #1
 80079f4:	9805      	ldr	r0, [sp, #20]
 80079f6:	f002 f98d 	bl	8009d14 <__lshift>
 80079fa:	4641      	mov	r1, r8
 80079fc:	4604      	mov	r4, r0
 80079fe:	f002 f9f5 	bl	8009dec <__mcmp>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	dd50      	ble.n	8007aa8 <_strtod_l+0x8b8>
 8007a06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a0a:	9a08      	ldr	r2, [sp, #32]
 8007a0c:	0d1b      	lsrs	r3, r3, #20
 8007a0e:	051b      	lsls	r3, r3, #20
 8007a10:	2a00      	cmp	r2, #0
 8007a12:	d06a      	beq.n	8007aea <_strtod_l+0x8fa>
 8007a14:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007a18:	d867      	bhi.n	8007aea <_strtod_l+0x8fa>
 8007a1a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007a1e:	f67f ae98 	bls.w	8007752 <_strtod_l+0x562>
 8007a22:	4650      	mov	r0, sl
 8007a24:	4659      	mov	r1, fp
 8007a26:	4b09      	ldr	r3, [pc, #36]	@ (8007a4c <_strtod_l+0x85c>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f7f8 fd55 	bl	80004d8 <__aeabi_dmul>
 8007a2e:	4b08      	ldr	r3, [pc, #32]	@ (8007a50 <_strtod_l+0x860>)
 8007a30:	4682      	mov	sl, r0
 8007a32:	400b      	ands	r3, r1
 8007a34:	468b      	mov	fp, r1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f47f ae00 	bne.w	800763c <_strtod_l+0x44c>
 8007a3c:	2322      	movs	r3, #34	@ 0x22
 8007a3e:	9a05      	ldr	r2, [sp, #20]
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	e5fb      	b.n	800763c <_strtod_l+0x44c>
 8007a44:	0800abd0 	.word	0x0800abd0
 8007a48:	fffffc02 	.word	0xfffffc02
 8007a4c:	39500000 	.word	0x39500000
 8007a50:	7ff00000 	.word	0x7ff00000
 8007a54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007a58:	d165      	bne.n	8007b26 <_strtod_l+0x936>
 8007a5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007a5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a60:	b35a      	cbz	r2, 8007aba <_strtod_l+0x8ca>
 8007a62:	4a99      	ldr	r2, [pc, #612]	@ (8007cc8 <_strtod_l+0xad8>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d12b      	bne.n	8007ac0 <_strtod_l+0x8d0>
 8007a68:	9b08      	ldr	r3, [sp, #32]
 8007a6a:	4651      	mov	r1, sl
 8007a6c:	b303      	cbz	r3, 8007ab0 <_strtod_l+0x8c0>
 8007a6e:	465a      	mov	r2, fp
 8007a70:	4b96      	ldr	r3, [pc, #600]	@ (8007ccc <_strtod_l+0xadc>)
 8007a72:	4013      	ands	r3, r2
 8007a74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007a78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a7c:	d81b      	bhi.n	8007ab6 <_strtod_l+0x8c6>
 8007a7e:	0d1b      	lsrs	r3, r3, #20
 8007a80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007a84:	fa02 f303 	lsl.w	r3, r2, r3
 8007a88:	4299      	cmp	r1, r3
 8007a8a:	d119      	bne.n	8007ac0 <_strtod_l+0x8d0>
 8007a8c:	4b90      	ldr	r3, [pc, #576]	@ (8007cd0 <_strtod_l+0xae0>)
 8007a8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d102      	bne.n	8007a9a <_strtod_l+0x8aa>
 8007a94:	3101      	adds	r1, #1
 8007a96:	f43f adc6 	beq.w	8007626 <_strtod_l+0x436>
 8007a9a:	f04f 0a00 	mov.w	sl, #0
 8007a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8007ccc <_strtod_l+0xadc>)
 8007aa0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007aa2:	401a      	ands	r2, r3
 8007aa4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007aa8:	9b08      	ldr	r3, [sp, #32]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1b9      	bne.n	8007a22 <_strtod_l+0x832>
 8007aae:	e5c5      	b.n	800763c <_strtod_l+0x44c>
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ab4:	e7e8      	b.n	8007a88 <_strtod_l+0x898>
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	e7e6      	b.n	8007a88 <_strtod_l+0x898>
 8007aba:	ea53 030a 	orrs.w	r3, r3, sl
 8007abe:	d0a2      	beq.n	8007a06 <_strtod_l+0x816>
 8007ac0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ac2:	b1db      	cbz	r3, 8007afc <_strtod_l+0x90c>
 8007ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ac6:	4213      	tst	r3, r2
 8007ac8:	d0ee      	beq.n	8007aa8 <_strtod_l+0x8b8>
 8007aca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007acc:	4650      	mov	r0, sl
 8007ace:	4659      	mov	r1, fp
 8007ad0:	9a08      	ldr	r2, [sp, #32]
 8007ad2:	b1bb      	cbz	r3, 8007b04 <_strtod_l+0x914>
 8007ad4:	f7ff fb6a 	bl	80071ac <sulp>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ae0:	f7f8 fb44 	bl	800016c <__adddf3>
 8007ae4:	4682      	mov	sl, r0
 8007ae6:	468b      	mov	fp, r1
 8007ae8:	e7de      	b.n	8007aa8 <_strtod_l+0x8b8>
 8007aea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007aee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007af2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007af6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007afa:	e7d5      	b.n	8007aa8 <_strtod_l+0x8b8>
 8007afc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007afe:	ea13 0f0a 	tst.w	r3, sl
 8007b02:	e7e1      	b.n	8007ac8 <_strtod_l+0x8d8>
 8007b04:	f7ff fb52 	bl	80071ac <sulp>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b10:	f7f8 fb2a 	bl	8000168 <__aeabi_dsub>
 8007b14:	2200      	movs	r2, #0
 8007b16:	2300      	movs	r3, #0
 8007b18:	4682      	mov	sl, r0
 8007b1a:	468b      	mov	fp, r1
 8007b1c:	f7f8 ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d0c1      	beq.n	8007aa8 <_strtod_l+0x8b8>
 8007b24:	e615      	b.n	8007752 <_strtod_l+0x562>
 8007b26:	4641      	mov	r1, r8
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f002 facf 	bl	800a0cc <__ratio>
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007b34:	4606      	mov	r6, r0
 8007b36:	460f      	mov	r7, r1
 8007b38:	f7f8 ff4a 	bl	80009d0 <__aeabi_dcmple>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d06d      	beq.n	8007c1c <_strtod_l+0xa2c>
 8007b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d178      	bne.n	8007c38 <_strtod_l+0xa48>
 8007b46:	f1ba 0f00 	cmp.w	sl, #0
 8007b4a:	d156      	bne.n	8007bfa <_strtod_l+0xa0a>
 8007b4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d158      	bne.n	8007c08 <_strtod_l+0xa18>
 8007b56:	2200      	movs	r2, #0
 8007b58:	4630      	mov	r0, r6
 8007b5a:	4639      	mov	r1, r7
 8007b5c:	4b5d      	ldr	r3, [pc, #372]	@ (8007cd4 <_strtod_l+0xae4>)
 8007b5e:	f7f8 ff2d 	bl	80009bc <__aeabi_dcmplt>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d157      	bne.n	8007c16 <_strtod_l+0xa26>
 8007b66:	4630      	mov	r0, r6
 8007b68:	4639      	mov	r1, r7
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8007cd8 <_strtod_l+0xae8>)
 8007b6e:	f7f8 fcb3 	bl	80004d8 <__aeabi_dmul>
 8007b72:	4606      	mov	r6, r0
 8007b74:	460f      	mov	r7, r1
 8007b76:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007b7a:	9606      	str	r6, [sp, #24]
 8007b7c:	9307      	str	r3, [sp, #28]
 8007b7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b82:	4d52      	ldr	r5, [pc, #328]	@ (8007ccc <_strtod_l+0xadc>)
 8007b84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007b88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b8a:	401d      	ands	r5, r3
 8007b8c:	4b53      	ldr	r3, [pc, #332]	@ (8007cdc <_strtod_l+0xaec>)
 8007b8e:	429d      	cmp	r5, r3
 8007b90:	f040 80aa 	bne.w	8007ce8 <_strtod_l+0xaf8>
 8007b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b96:	4650      	mov	r0, sl
 8007b98:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007b9c:	4659      	mov	r1, fp
 8007b9e:	f002 f9d5 	bl	8009f4c <__ulp>
 8007ba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ba6:	f7f8 fc97 	bl	80004d8 <__aeabi_dmul>
 8007baa:	4652      	mov	r2, sl
 8007bac:	465b      	mov	r3, fp
 8007bae:	f7f8 fadd 	bl	800016c <__adddf3>
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4945      	ldr	r1, [pc, #276]	@ (8007ccc <_strtod_l+0xadc>)
 8007bb6:	4a4a      	ldr	r2, [pc, #296]	@ (8007ce0 <_strtod_l+0xaf0>)
 8007bb8:	4019      	ands	r1, r3
 8007bba:	4291      	cmp	r1, r2
 8007bbc:	4682      	mov	sl, r0
 8007bbe:	d942      	bls.n	8007c46 <_strtod_l+0xa56>
 8007bc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bc2:	4b43      	ldr	r3, [pc, #268]	@ (8007cd0 <_strtod_l+0xae0>)
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d103      	bne.n	8007bd0 <_strtod_l+0x9e0>
 8007bc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007bca:	3301      	adds	r3, #1
 8007bcc:	f43f ad2b 	beq.w	8007626 <_strtod_l+0x436>
 8007bd0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007bd4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007cd0 <_strtod_l+0xae0>
 8007bd8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bda:	9805      	ldr	r0, [sp, #20]
 8007bdc:	f001 fe84 	bl	80098e8 <_Bfree>
 8007be0:	4649      	mov	r1, r9
 8007be2:	9805      	ldr	r0, [sp, #20]
 8007be4:	f001 fe80 	bl	80098e8 <_Bfree>
 8007be8:	4641      	mov	r1, r8
 8007bea:	9805      	ldr	r0, [sp, #20]
 8007bec:	f001 fe7c 	bl	80098e8 <_Bfree>
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	9805      	ldr	r0, [sp, #20]
 8007bf4:	f001 fe78 	bl	80098e8 <_Bfree>
 8007bf8:	e618      	b.n	800782c <_strtod_l+0x63c>
 8007bfa:	f1ba 0f01 	cmp.w	sl, #1
 8007bfe:	d103      	bne.n	8007c08 <_strtod_l+0xa18>
 8007c00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f43f ada5 	beq.w	8007752 <_strtod_l+0x562>
 8007c08:	2200      	movs	r2, #0
 8007c0a:	4b36      	ldr	r3, [pc, #216]	@ (8007ce4 <_strtod_l+0xaf4>)
 8007c0c:	2600      	movs	r6, #0
 8007c0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c12:	4f30      	ldr	r7, [pc, #192]	@ (8007cd4 <_strtod_l+0xae4>)
 8007c14:	e7b3      	b.n	8007b7e <_strtod_l+0x98e>
 8007c16:	2600      	movs	r6, #0
 8007c18:	4f2f      	ldr	r7, [pc, #188]	@ (8007cd8 <_strtod_l+0xae8>)
 8007c1a:	e7ac      	b.n	8007b76 <_strtod_l+0x986>
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	4b2d      	ldr	r3, [pc, #180]	@ (8007cd8 <_strtod_l+0xae8>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	f7f8 fc58 	bl	80004d8 <__aeabi_dmul>
 8007c28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	460f      	mov	r7, r1
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0a1      	beq.n	8007b76 <_strtod_l+0x986>
 8007c32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007c36:	e7a2      	b.n	8007b7e <_strtod_l+0x98e>
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4b26      	ldr	r3, [pc, #152]	@ (8007cd4 <_strtod_l+0xae4>)
 8007c3c:	4616      	mov	r6, r2
 8007c3e:	461f      	mov	r7, r3
 8007c40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c44:	e79b      	b.n	8007b7e <_strtod_l+0x98e>
 8007c46:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007c4a:	9b08      	ldr	r3, [sp, #32]
 8007c4c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1c1      	bne.n	8007bd8 <_strtod_l+0x9e8>
 8007c54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c58:	0d1b      	lsrs	r3, r3, #20
 8007c5a:	051b      	lsls	r3, r3, #20
 8007c5c:	429d      	cmp	r5, r3
 8007c5e:	d1bb      	bne.n	8007bd8 <_strtod_l+0x9e8>
 8007c60:	4630      	mov	r0, r6
 8007c62:	4639      	mov	r1, r7
 8007c64:	f7f8 ff80 	bl	8000b68 <__aeabi_d2lz>
 8007c68:	f7f8 fc08 	bl	800047c <__aeabi_l2d>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	f7f8 fa78 	bl	8000168 <__aeabi_dsub>
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007c80:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c86:	ea46 060a 	orr.w	r6, r6, sl
 8007c8a:	431e      	orrs	r6, r3
 8007c8c:	d069      	beq.n	8007d62 <_strtod_l+0xb72>
 8007c8e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007cb8 <_strtod_l+0xac8>)
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f7f8 fe92 	bl	80009bc <__aeabi_dcmplt>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	f47f accf 	bne.w	800763c <_strtod_l+0x44c>
 8007c9e:	a308      	add	r3, pc, #32	@ (adr r3, 8007cc0 <_strtod_l+0xad0>)
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ca8:	f7f8 fea6 	bl	80009f8 <__aeabi_dcmpgt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d093      	beq.n	8007bd8 <_strtod_l+0x9e8>
 8007cb0:	e4c4      	b.n	800763c <_strtod_l+0x44c>
 8007cb2:	bf00      	nop
 8007cb4:	f3af 8000 	nop.w
 8007cb8:	94a03595 	.word	0x94a03595
 8007cbc:	3fdfffff 	.word	0x3fdfffff
 8007cc0:	35afe535 	.word	0x35afe535
 8007cc4:	3fe00000 	.word	0x3fe00000
 8007cc8:	000fffff 	.word	0x000fffff
 8007ccc:	7ff00000 	.word	0x7ff00000
 8007cd0:	7fefffff 	.word	0x7fefffff
 8007cd4:	3ff00000 	.word	0x3ff00000
 8007cd8:	3fe00000 	.word	0x3fe00000
 8007cdc:	7fe00000 	.word	0x7fe00000
 8007ce0:	7c9fffff 	.word	0x7c9fffff
 8007ce4:	bff00000 	.word	0xbff00000
 8007ce8:	9b08      	ldr	r3, [sp, #32]
 8007cea:	b323      	cbz	r3, 8007d36 <_strtod_l+0xb46>
 8007cec:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007cf0:	d821      	bhi.n	8007d36 <_strtod_l+0xb46>
 8007cf2:	a327      	add	r3, pc, #156	@ (adr r3, 8007d90 <_strtod_l+0xba0>)
 8007cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	4639      	mov	r1, r7
 8007cfc:	f7f8 fe68 	bl	80009d0 <__aeabi_dcmple>
 8007d00:	b1a0      	cbz	r0, 8007d2c <_strtod_l+0xb3c>
 8007d02:	4639      	mov	r1, r7
 8007d04:	4630      	mov	r0, r6
 8007d06:	f7f8 febf 	bl	8000a88 <__aeabi_d2uiz>
 8007d0a:	2801      	cmp	r0, #1
 8007d0c:	bf38      	it	cc
 8007d0e:	2001      	movcc	r0, #1
 8007d10:	f7f8 fb68 	bl	80003e4 <__aeabi_ui2d>
 8007d14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d16:	4606      	mov	r6, r0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	b9fb      	cbnz	r3, 8007d5c <_strtod_l+0xb6c>
 8007d1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d20:	9014      	str	r0, [sp, #80]	@ 0x50
 8007d22:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007d28:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007d2c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007d2e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007d32:	1b5b      	subs	r3, r3, r5
 8007d34:	9311      	str	r3, [sp, #68]	@ 0x44
 8007d36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d3a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007d3e:	f002 f905 	bl	8009f4c <__ulp>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4650      	mov	r0, sl
 8007d48:	4659      	mov	r1, fp
 8007d4a:	f7f8 fbc5 	bl	80004d8 <__aeabi_dmul>
 8007d4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007d52:	f7f8 fa0b 	bl	800016c <__adddf3>
 8007d56:	4682      	mov	sl, r0
 8007d58:	468b      	mov	fp, r1
 8007d5a:	e776      	b.n	8007c4a <_strtod_l+0xa5a>
 8007d5c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007d60:	e7e0      	b.n	8007d24 <_strtod_l+0xb34>
 8007d62:	a30d      	add	r3, pc, #52	@ (adr r3, 8007d98 <_strtod_l+0xba8>)
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	f7f8 fe28 	bl	80009bc <__aeabi_dcmplt>
 8007d6c:	e79e      	b.n	8007cac <_strtod_l+0xabc>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d74:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	f7ff ba77 	b.w	800726a <_strtod_l+0x7a>
 8007d7c:	2a65      	cmp	r2, #101	@ 0x65
 8007d7e:	f43f ab6e 	beq.w	800745e <_strtod_l+0x26e>
 8007d82:	2a45      	cmp	r2, #69	@ 0x45
 8007d84:	f43f ab6b 	beq.w	800745e <_strtod_l+0x26e>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f7ff bba6 	b.w	80074da <_strtod_l+0x2ea>
 8007d8e:	bf00      	nop
 8007d90:	ffc00000 	.word	0xffc00000
 8007d94:	41dfffff 	.word	0x41dfffff
 8007d98:	94a03595 	.word	0x94a03595
 8007d9c:	3fcfffff 	.word	0x3fcfffff

08007da0 <_strtod_r>:
 8007da0:	4b01      	ldr	r3, [pc, #4]	@ (8007da8 <_strtod_r+0x8>)
 8007da2:	f7ff ba25 	b.w	80071f0 <_strtod_l>
 8007da6:	bf00      	nop
 8007da8:	20000018 	.word	0x20000018

08007dac <_strtol_l.constprop.0>:
 8007dac:	2b24      	cmp	r3, #36	@ 0x24
 8007dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db2:	4686      	mov	lr, r0
 8007db4:	4690      	mov	r8, r2
 8007db6:	d801      	bhi.n	8007dbc <_strtol_l.constprop.0+0x10>
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d106      	bne.n	8007dca <_strtol_l.constprop.0+0x1e>
 8007dbc:	f000 f8ae 	bl	8007f1c <__errno>
 8007dc0:	2316      	movs	r3, #22
 8007dc2:	6003      	str	r3, [r0, #0]
 8007dc4:	2000      	movs	r0, #0
 8007dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dca:	460d      	mov	r5, r1
 8007dcc:	4833      	ldr	r0, [pc, #204]	@ (8007e9c <_strtol_l.constprop.0+0xf0>)
 8007dce:	462a      	mov	r2, r5
 8007dd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dd4:	5d06      	ldrb	r6, [r0, r4]
 8007dd6:	f016 0608 	ands.w	r6, r6, #8
 8007dda:	d1f8      	bne.n	8007dce <_strtol_l.constprop.0+0x22>
 8007ddc:	2c2d      	cmp	r4, #45	@ 0x2d
 8007dde:	d12d      	bne.n	8007e3c <_strtol_l.constprop.0+0x90>
 8007de0:	2601      	movs	r6, #1
 8007de2:	782c      	ldrb	r4, [r5, #0]
 8007de4:	1c95      	adds	r5, r2, #2
 8007de6:	f033 0210 	bics.w	r2, r3, #16
 8007dea:	d109      	bne.n	8007e00 <_strtol_l.constprop.0+0x54>
 8007dec:	2c30      	cmp	r4, #48	@ 0x30
 8007dee:	d12a      	bne.n	8007e46 <_strtol_l.constprop.0+0x9a>
 8007df0:	782a      	ldrb	r2, [r5, #0]
 8007df2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007df6:	2a58      	cmp	r2, #88	@ 0x58
 8007df8:	d125      	bne.n	8007e46 <_strtol_l.constprop.0+0x9a>
 8007dfa:	2310      	movs	r3, #16
 8007dfc:	786c      	ldrb	r4, [r5, #1]
 8007dfe:	3502      	adds	r5, #2
 8007e00:	2200      	movs	r2, #0
 8007e02:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007e06:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007e0a:	fbbc f9f3 	udiv	r9, ip, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007e18:	2f09      	cmp	r7, #9
 8007e1a:	d81b      	bhi.n	8007e54 <_strtol_l.constprop.0+0xa8>
 8007e1c:	463c      	mov	r4, r7
 8007e1e:	42a3      	cmp	r3, r4
 8007e20:	dd27      	ble.n	8007e72 <_strtol_l.constprop.0+0xc6>
 8007e22:	1c57      	adds	r7, r2, #1
 8007e24:	d007      	beq.n	8007e36 <_strtol_l.constprop.0+0x8a>
 8007e26:	4581      	cmp	r9, r0
 8007e28:	d320      	bcc.n	8007e6c <_strtol_l.constprop.0+0xc0>
 8007e2a:	d101      	bne.n	8007e30 <_strtol_l.constprop.0+0x84>
 8007e2c:	45a2      	cmp	sl, r4
 8007e2e:	db1d      	blt.n	8007e6c <_strtol_l.constprop.0+0xc0>
 8007e30:	2201      	movs	r2, #1
 8007e32:	fb00 4003 	mla	r0, r0, r3, r4
 8007e36:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e3a:	e7eb      	b.n	8007e14 <_strtol_l.constprop.0+0x68>
 8007e3c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007e3e:	bf04      	itt	eq
 8007e40:	782c      	ldrbeq	r4, [r5, #0]
 8007e42:	1c95      	addeq	r5, r2, #2
 8007e44:	e7cf      	b.n	8007de6 <_strtol_l.constprop.0+0x3a>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1da      	bne.n	8007e00 <_strtol_l.constprop.0+0x54>
 8007e4a:	2c30      	cmp	r4, #48	@ 0x30
 8007e4c:	bf0c      	ite	eq
 8007e4e:	2308      	moveq	r3, #8
 8007e50:	230a      	movne	r3, #10
 8007e52:	e7d5      	b.n	8007e00 <_strtol_l.constprop.0+0x54>
 8007e54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007e58:	2f19      	cmp	r7, #25
 8007e5a:	d801      	bhi.n	8007e60 <_strtol_l.constprop.0+0xb4>
 8007e5c:	3c37      	subs	r4, #55	@ 0x37
 8007e5e:	e7de      	b.n	8007e1e <_strtol_l.constprop.0+0x72>
 8007e60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007e64:	2f19      	cmp	r7, #25
 8007e66:	d804      	bhi.n	8007e72 <_strtol_l.constprop.0+0xc6>
 8007e68:	3c57      	subs	r4, #87	@ 0x57
 8007e6a:	e7d8      	b.n	8007e1e <_strtol_l.constprop.0+0x72>
 8007e6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e70:	e7e1      	b.n	8007e36 <_strtol_l.constprop.0+0x8a>
 8007e72:	1c53      	adds	r3, r2, #1
 8007e74:	d108      	bne.n	8007e88 <_strtol_l.constprop.0+0xdc>
 8007e76:	2322      	movs	r3, #34	@ 0x22
 8007e78:	4660      	mov	r0, ip
 8007e7a:	f8ce 3000 	str.w	r3, [lr]
 8007e7e:	f1b8 0f00 	cmp.w	r8, #0
 8007e82:	d0a0      	beq.n	8007dc6 <_strtol_l.constprop.0+0x1a>
 8007e84:	1e69      	subs	r1, r5, #1
 8007e86:	e006      	b.n	8007e96 <_strtol_l.constprop.0+0xea>
 8007e88:	b106      	cbz	r6, 8007e8c <_strtol_l.constprop.0+0xe0>
 8007e8a:	4240      	negs	r0, r0
 8007e8c:	f1b8 0f00 	cmp.w	r8, #0
 8007e90:	d099      	beq.n	8007dc6 <_strtol_l.constprop.0+0x1a>
 8007e92:	2a00      	cmp	r2, #0
 8007e94:	d1f6      	bne.n	8007e84 <_strtol_l.constprop.0+0xd8>
 8007e96:	f8c8 1000 	str.w	r1, [r8]
 8007e9a:	e794      	b.n	8007dc6 <_strtol_l.constprop.0+0x1a>
 8007e9c:	0800ac01 	.word	0x0800ac01

08007ea0 <_strtol_r>:
 8007ea0:	f7ff bf84 	b.w	8007dac <_strtol_l.constprop.0>

08007ea4 <_fwalk_sglue>:
 8007ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea8:	4607      	mov	r7, r0
 8007eaa:	4688      	mov	r8, r1
 8007eac:	4614      	mov	r4, r2
 8007eae:	2600      	movs	r6, #0
 8007eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8007eb8:	d505      	bpl.n	8007ec6 <_fwalk_sglue+0x22>
 8007eba:	6824      	ldr	r4, [r4, #0]
 8007ebc:	2c00      	cmp	r4, #0
 8007ebe:	d1f7      	bne.n	8007eb0 <_fwalk_sglue+0xc>
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec6:	89ab      	ldrh	r3, [r5, #12]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d907      	bls.n	8007edc <_fwalk_sglue+0x38>
 8007ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	d003      	beq.n	8007edc <_fwalk_sglue+0x38>
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	47c0      	blx	r8
 8007eda:	4306      	orrs	r6, r0
 8007edc:	3568      	adds	r5, #104	@ 0x68
 8007ede:	e7e9      	b.n	8007eb4 <_fwalk_sglue+0x10>

08007ee0 <strncmp>:
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	b16a      	cbz	r2, 8007f00 <strncmp+0x20>
 8007ee4:	3901      	subs	r1, #1
 8007ee6:	1884      	adds	r4, r0, r2
 8007ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d103      	bne.n	8007efc <strncmp+0x1c>
 8007ef4:	42a0      	cmp	r0, r4
 8007ef6:	d001      	beq.n	8007efc <strncmp+0x1c>
 8007ef8:	2a00      	cmp	r2, #0
 8007efa:	d1f5      	bne.n	8007ee8 <strncmp+0x8>
 8007efc:	1ad0      	subs	r0, r2, r3
 8007efe:	bd10      	pop	{r4, pc}
 8007f00:	4610      	mov	r0, r2
 8007f02:	e7fc      	b.n	8007efe <strncmp+0x1e>

08007f04 <memset>:
 8007f04:	4603      	mov	r3, r0
 8007f06:	4402      	add	r2, r0
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d100      	bne.n	8007f0e <memset+0xa>
 8007f0c:	4770      	bx	lr
 8007f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f12:	e7f9      	b.n	8007f08 <memset+0x4>

08007f14 <_localeconv_r>:
 8007f14:	4800      	ldr	r0, [pc, #0]	@ (8007f18 <_localeconv_r+0x4>)
 8007f16:	4770      	bx	lr
 8007f18:	20000108 	.word	0x20000108

08007f1c <__errno>:
 8007f1c:	4b01      	ldr	r3, [pc, #4]	@ (8007f24 <__errno+0x8>)
 8007f1e:	6818      	ldr	r0, [r3, #0]
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	20000184 	.word	0x20000184

08007f28 <__libc_init_array>:
 8007f28:	b570      	push	{r4, r5, r6, lr}
 8007f2a:	2600      	movs	r6, #0
 8007f2c:	4d0c      	ldr	r5, [pc, #48]	@ (8007f60 <__libc_init_array+0x38>)
 8007f2e:	4c0d      	ldr	r4, [pc, #52]	@ (8007f64 <__libc_init_array+0x3c>)
 8007f30:	1b64      	subs	r4, r4, r5
 8007f32:	10a4      	asrs	r4, r4, #2
 8007f34:	42a6      	cmp	r6, r4
 8007f36:	d109      	bne.n	8007f4c <__libc_init_array+0x24>
 8007f38:	f002 fd60 	bl	800a9fc <_init>
 8007f3c:	2600      	movs	r6, #0
 8007f3e:	4d0a      	ldr	r5, [pc, #40]	@ (8007f68 <__libc_init_array+0x40>)
 8007f40:	4c0a      	ldr	r4, [pc, #40]	@ (8007f6c <__libc_init_array+0x44>)
 8007f42:	1b64      	subs	r4, r4, r5
 8007f44:	10a4      	asrs	r4, r4, #2
 8007f46:	42a6      	cmp	r6, r4
 8007f48:	d105      	bne.n	8007f56 <__libc_init_array+0x2e>
 8007f4a:	bd70      	pop	{r4, r5, r6, pc}
 8007f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f50:	4798      	blx	r3
 8007f52:	3601      	adds	r6, #1
 8007f54:	e7ee      	b.n	8007f34 <__libc_init_array+0xc>
 8007f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f5a:	4798      	blx	r3
 8007f5c:	3601      	adds	r6, #1
 8007f5e:	e7f2      	b.n	8007f46 <__libc_init_array+0x1e>
 8007f60:	0800af9c 	.word	0x0800af9c
 8007f64:	0800af9c 	.word	0x0800af9c
 8007f68:	0800af9c 	.word	0x0800af9c
 8007f6c:	0800afa0 	.word	0x0800afa0

08007f70 <__retarget_lock_init_recursive>:
 8007f70:	4770      	bx	lr

08007f72 <__retarget_lock_acquire_recursive>:
 8007f72:	4770      	bx	lr

08007f74 <__retarget_lock_release_recursive>:
 8007f74:	4770      	bx	lr

08007f76 <memchr>:
 8007f76:	4603      	mov	r3, r0
 8007f78:	b510      	push	{r4, lr}
 8007f7a:	b2c9      	uxtb	r1, r1
 8007f7c:	4402      	add	r2, r0
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	4618      	mov	r0, r3
 8007f82:	d101      	bne.n	8007f88 <memchr+0x12>
 8007f84:	2000      	movs	r0, #0
 8007f86:	e003      	b.n	8007f90 <memchr+0x1a>
 8007f88:	7804      	ldrb	r4, [r0, #0]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	428c      	cmp	r4, r1
 8007f8e:	d1f6      	bne.n	8007f7e <memchr+0x8>
 8007f90:	bd10      	pop	{r4, pc}

08007f92 <memcpy>:
 8007f92:	440a      	add	r2, r1
 8007f94:	4291      	cmp	r1, r2
 8007f96:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007f9a:	d100      	bne.n	8007f9e <memcpy+0xc>
 8007f9c:	4770      	bx	lr
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fa4:	4291      	cmp	r1, r2
 8007fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007faa:	d1f9      	bne.n	8007fa0 <memcpy+0xe>
 8007fac:	bd10      	pop	{r4, pc}
	...

08007fb0 <nan>:
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	4901      	ldr	r1, [pc, #4]	@ (8007fb8 <nan+0x8>)
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	7ff80000 	.word	0x7ff80000

08007fbc <nanf>:
 8007fbc:	4800      	ldr	r0, [pc, #0]	@ (8007fc0 <nanf+0x4>)
 8007fbe:	4770      	bx	lr
 8007fc0:	7fc00000 	.word	0x7fc00000

08007fc4 <quorem>:
 8007fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	6903      	ldr	r3, [r0, #16]
 8007fca:	690c      	ldr	r4, [r1, #16]
 8007fcc:	4607      	mov	r7, r0
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	db7e      	blt.n	80080d0 <quorem+0x10c>
 8007fd2:	3c01      	subs	r4, #1
 8007fd4:	00a3      	lsls	r3, r4, #2
 8007fd6:	f100 0514 	add.w	r5, r0, #20
 8007fda:	f101 0814 	add.w	r8, r1, #20
 8007fde:	9300      	str	r3, [sp, #0]
 8007fe0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ff6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ffa:	d32e      	bcc.n	800805a <quorem+0x96>
 8007ffc:	f04f 0a00 	mov.w	sl, #0
 8008000:	46c4      	mov	ip, r8
 8008002:	46ae      	mov	lr, r5
 8008004:	46d3      	mov	fp, sl
 8008006:	f85c 3b04 	ldr.w	r3, [ip], #4
 800800a:	b298      	uxth	r0, r3
 800800c:	fb06 a000 	mla	r0, r6, r0, sl
 8008010:	0c1b      	lsrs	r3, r3, #16
 8008012:	0c02      	lsrs	r2, r0, #16
 8008014:	fb06 2303 	mla	r3, r6, r3, r2
 8008018:	f8de 2000 	ldr.w	r2, [lr]
 800801c:	b280      	uxth	r0, r0
 800801e:	b292      	uxth	r2, r2
 8008020:	1a12      	subs	r2, r2, r0
 8008022:	445a      	add	r2, fp
 8008024:	f8de 0000 	ldr.w	r0, [lr]
 8008028:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800802c:	b29b      	uxth	r3, r3
 800802e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008032:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008036:	b292      	uxth	r2, r2
 8008038:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800803c:	45e1      	cmp	r9, ip
 800803e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008042:	f84e 2b04 	str.w	r2, [lr], #4
 8008046:	d2de      	bcs.n	8008006 <quorem+0x42>
 8008048:	9b00      	ldr	r3, [sp, #0]
 800804a:	58eb      	ldr	r3, [r5, r3]
 800804c:	b92b      	cbnz	r3, 800805a <quorem+0x96>
 800804e:	9b01      	ldr	r3, [sp, #4]
 8008050:	3b04      	subs	r3, #4
 8008052:	429d      	cmp	r5, r3
 8008054:	461a      	mov	r2, r3
 8008056:	d32f      	bcc.n	80080b8 <quorem+0xf4>
 8008058:	613c      	str	r4, [r7, #16]
 800805a:	4638      	mov	r0, r7
 800805c:	f001 fec6 	bl	8009dec <__mcmp>
 8008060:	2800      	cmp	r0, #0
 8008062:	db25      	blt.n	80080b0 <quorem+0xec>
 8008064:	4629      	mov	r1, r5
 8008066:	2000      	movs	r0, #0
 8008068:	f858 2b04 	ldr.w	r2, [r8], #4
 800806c:	f8d1 c000 	ldr.w	ip, [r1]
 8008070:	fa1f fe82 	uxth.w	lr, r2
 8008074:	fa1f f38c 	uxth.w	r3, ip
 8008078:	eba3 030e 	sub.w	r3, r3, lr
 800807c:	4403      	add	r3, r0
 800807e:	0c12      	lsrs	r2, r2, #16
 8008080:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008084:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008088:	b29b      	uxth	r3, r3
 800808a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800808e:	45c1      	cmp	r9, r8
 8008090:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008094:	f841 3b04 	str.w	r3, [r1], #4
 8008098:	d2e6      	bcs.n	8008068 <quorem+0xa4>
 800809a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800809e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080a2:	b922      	cbnz	r2, 80080ae <quorem+0xea>
 80080a4:	3b04      	subs	r3, #4
 80080a6:	429d      	cmp	r5, r3
 80080a8:	461a      	mov	r2, r3
 80080aa:	d30b      	bcc.n	80080c4 <quorem+0x100>
 80080ac:	613c      	str	r4, [r7, #16]
 80080ae:	3601      	adds	r6, #1
 80080b0:	4630      	mov	r0, r6
 80080b2:	b003      	add	sp, #12
 80080b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b8:	6812      	ldr	r2, [r2, #0]
 80080ba:	3b04      	subs	r3, #4
 80080bc:	2a00      	cmp	r2, #0
 80080be:	d1cb      	bne.n	8008058 <quorem+0x94>
 80080c0:	3c01      	subs	r4, #1
 80080c2:	e7c6      	b.n	8008052 <quorem+0x8e>
 80080c4:	6812      	ldr	r2, [r2, #0]
 80080c6:	3b04      	subs	r3, #4
 80080c8:	2a00      	cmp	r2, #0
 80080ca:	d1ef      	bne.n	80080ac <quorem+0xe8>
 80080cc:	3c01      	subs	r4, #1
 80080ce:	e7ea      	b.n	80080a6 <quorem+0xe2>
 80080d0:	2000      	movs	r0, #0
 80080d2:	e7ee      	b.n	80080b2 <quorem+0xee>
 80080d4:	0000      	movs	r0, r0
	...

080080d8 <_dtoa_r>:
 80080d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080dc:	4614      	mov	r4, r2
 80080de:	461d      	mov	r5, r3
 80080e0:	69c7      	ldr	r7, [r0, #28]
 80080e2:	b097      	sub	sp, #92	@ 0x5c
 80080e4:	4683      	mov	fp, r0
 80080e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80080ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80080ec:	b97f      	cbnz	r7, 800810e <_dtoa_r+0x36>
 80080ee:	2010      	movs	r0, #16
 80080f0:	f001 fa4a 	bl	8009588 <malloc>
 80080f4:	4602      	mov	r2, r0
 80080f6:	f8cb 001c 	str.w	r0, [fp, #28]
 80080fa:	b920      	cbnz	r0, 8008106 <_dtoa_r+0x2e>
 80080fc:	21ef      	movs	r1, #239	@ 0xef
 80080fe:	4ba8      	ldr	r3, [pc, #672]	@ (80083a0 <_dtoa_r+0x2c8>)
 8008100:	48a8      	ldr	r0, [pc, #672]	@ (80083a4 <_dtoa_r+0x2cc>)
 8008102:	f002 f945 	bl	800a390 <__assert_func>
 8008106:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800810a:	6007      	str	r7, [r0, #0]
 800810c:	60c7      	str	r7, [r0, #12]
 800810e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008112:	6819      	ldr	r1, [r3, #0]
 8008114:	b159      	cbz	r1, 800812e <_dtoa_r+0x56>
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	2301      	movs	r3, #1
 800811a:	4093      	lsls	r3, r2
 800811c:	604a      	str	r2, [r1, #4]
 800811e:	608b      	str	r3, [r1, #8]
 8008120:	4658      	mov	r0, fp
 8008122:	f001 fbe1 	bl	80098e8 <_Bfree>
 8008126:	2200      	movs	r2, #0
 8008128:	f8db 301c 	ldr.w	r3, [fp, #28]
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	1e2b      	subs	r3, r5, #0
 8008130:	bfaf      	iteee	ge
 8008132:	2300      	movge	r3, #0
 8008134:	2201      	movlt	r2, #1
 8008136:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800813a:	9303      	strlt	r3, [sp, #12]
 800813c:	bfa8      	it	ge
 800813e:	6033      	strge	r3, [r6, #0]
 8008140:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008144:	4b98      	ldr	r3, [pc, #608]	@ (80083a8 <_dtoa_r+0x2d0>)
 8008146:	bfb8      	it	lt
 8008148:	6032      	strlt	r2, [r6, #0]
 800814a:	ea33 0308 	bics.w	r3, r3, r8
 800814e:	d112      	bne.n	8008176 <_dtoa_r+0x9e>
 8008150:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008154:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008156:	6013      	str	r3, [r2, #0]
 8008158:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800815c:	4323      	orrs	r3, r4
 800815e:	f000 8550 	beq.w	8008c02 <_dtoa_r+0xb2a>
 8008162:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008164:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80083ac <_dtoa_r+0x2d4>
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 8552 	beq.w	8008c12 <_dtoa_r+0xb3a>
 800816e:	f10a 0303 	add.w	r3, sl, #3
 8008172:	f000 bd4c 	b.w	8008c0e <_dtoa_r+0xb36>
 8008176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800817a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800817e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008182:	2200      	movs	r2, #0
 8008184:	2300      	movs	r3, #0
 8008186:	f7f8 fc0f 	bl	80009a8 <__aeabi_dcmpeq>
 800818a:	4607      	mov	r7, r0
 800818c:	b158      	cbz	r0, 80081a6 <_dtoa_r+0xce>
 800818e:	2301      	movs	r3, #1
 8008190:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008196:	b113      	cbz	r3, 800819e <_dtoa_r+0xc6>
 8008198:	4b85      	ldr	r3, [pc, #532]	@ (80083b0 <_dtoa_r+0x2d8>)
 800819a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80083b4 <_dtoa_r+0x2dc>
 80081a2:	f000 bd36 	b.w	8008c12 <_dtoa_r+0xb3a>
 80081a6:	ab14      	add	r3, sp, #80	@ 0x50
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	ab15      	add	r3, sp, #84	@ 0x54
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	4658      	mov	r0, fp
 80081b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80081b4:	f001 ff32 	bl	800a01c <__d2b>
 80081b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80081bc:	4681      	mov	r9, r0
 80081be:	2e00      	cmp	r6, #0
 80081c0:	d077      	beq.n	80082b2 <_dtoa_r+0x1da>
 80081c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80081cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80081d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80081d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80081da:	4619      	mov	r1, r3
 80081dc:	2200      	movs	r2, #0
 80081de:	4b76      	ldr	r3, [pc, #472]	@ (80083b8 <_dtoa_r+0x2e0>)
 80081e0:	f7f7 ffc2 	bl	8000168 <__aeabi_dsub>
 80081e4:	a368      	add	r3, pc, #416	@ (adr r3, 8008388 <_dtoa_r+0x2b0>)
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	f7f8 f975 	bl	80004d8 <__aeabi_dmul>
 80081ee:	a368      	add	r3, pc, #416	@ (adr r3, 8008390 <_dtoa_r+0x2b8>)
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	f7f7 ffba 	bl	800016c <__adddf3>
 80081f8:	4604      	mov	r4, r0
 80081fa:	4630      	mov	r0, r6
 80081fc:	460d      	mov	r5, r1
 80081fe:	f7f8 f901 	bl	8000404 <__aeabi_i2d>
 8008202:	a365      	add	r3, pc, #404	@ (adr r3, 8008398 <_dtoa_r+0x2c0>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f8 f966 	bl	80004d8 <__aeabi_dmul>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	4620      	mov	r0, r4
 8008212:	4629      	mov	r1, r5
 8008214:	f7f7 ffaa 	bl	800016c <__adddf3>
 8008218:	4604      	mov	r4, r0
 800821a:	460d      	mov	r5, r1
 800821c:	f7f8 fc0c 	bl	8000a38 <__aeabi_d2iz>
 8008220:	2200      	movs	r2, #0
 8008222:	4607      	mov	r7, r0
 8008224:	2300      	movs	r3, #0
 8008226:	4620      	mov	r0, r4
 8008228:	4629      	mov	r1, r5
 800822a:	f7f8 fbc7 	bl	80009bc <__aeabi_dcmplt>
 800822e:	b140      	cbz	r0, 8008242 <_dtoa_r+0x16a>
 8008230:	4638      	mov	r0, r7
 8008232:	f7f8 f8e7 	bl	8000404 <__aeabi_i2d>
 8008236:	4622      	mov	r2, r4
 8008238:	462b      	mov	r3, r5
 800823a:	f7f8 fbb5 	bl	80009a8 <__aeabi_dcmpeq>
 800823e:	b900      	cbnz	r0, 8008242 <_dtoa_r+0x16a>
 8008240:	3f01      	subs	r7, #1
 8008242:	2f16      	cmp	r7, #22
 8008244:	d853      	bhi.n	80082ee <_dtoa_r+0x216>
 8008246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800824a:	4b5c      	ldr	r3, [pc, #368]	@ (80083bc <_dtoa_r+0x2e4>)
 800824c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7f8 fbb2 	bl	80009bc <__aeabi_dcmplt>
 8008258:	2800      	cmp	r0, #0
 800825a:	d04a      	beq.n	80082f2 <_dtoa_r+0x21a>
 800825c:	2300      	movs	r3, #0
 800825e:	3f01      	subs	r7, #1
 8008260:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008262:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008264:	1b9b      	subs	r3, r3, r6
 8008266:	1e5a      	subs	r2, r3, #1
 8008268:	bf46      	itte	mi
 800826a:	f1c3 0801 	rsbmi	r8, r3, #1
 800826e:	2300      	movmi	r3, #0
 8008270:	f04f 0800 	movpl.w	r8, #0
 8008274:	9209      	str	r2, [sp, #36]	@ 0x24
 8008276:	bf48      	it	mi
 8008278:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800827a:	2f00      	cmp	r7, #0
 800827c:	db3b      	blt.n	80082f6 <_dtoa_r+0x21e>
 800827e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008280:	970e      	str	r7, [sp, #56]	@ 0x38
 8008282:	443b      	add	r3, r7
 8008284:	9309      	str	r3, [sp, #36]	@ 0x24
 8008286:	2300      	movs	r3, #0
 8008288:	930a      	str	r3, [sp, #40]	@ 0x28
 800828a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800828c:	2b09      	cmp	r3, #9
 800828e:	d866      	bhi.n	800835e <_dtoa_r+0x286>
 8008290:	2b05      	cmp	r3, #5
 8008292:	bfc4      	itt	gt
 8008294:	3b04      	subgt	r3, #4
 8008296:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008298:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800829a:	bfc8      	it	gt
 800829c:	2400      	movgt	r4, #0
 800829e:	f1a3 0302 	sub.w	r3, r3, #2
 80082a2:	bfd8      	it	le
 80082a4:	2401      	movle	r4, #1
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d864      	bhi.n	8008374 <_dtoa_r+0x29c>
 80082aa:	e8df f003 	tbb	[pc, r3]
 80082ae:	382b      	.short	0x382b
 80082b0:	5636      	.short	0x5636
 80082b2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80082b6:	441e      	add	r6, r3
 80082b8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80082bc:	2b20      	cmp	r3, #32
 80082be:	bfc1      	itttt	gt
 80082c0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80082c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80082c8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80082cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80082d0:	bfd6      	itet	le
 80082d2:	f1c3 0320 	rsble	r3, r3, #32
 80082d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80082da:	fa04 f003 	lslle.w	r0, r4, r3
 80082de:	f7f8 f881 	bl	80003e4 <__aeabi_ui2d>
 80082e2:	2201      	movs	r2, #1
 80082e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80082e8:	3e01      	subs	r6, #1
 80082ea:	9212      	str	r2, [sp, #72]	@ 0x48
 80082ec:	e775      	b.n	80081da <_dtoa_r+0x102>
 80082ee:	2301      	movs	r3, #1
 80082f0:	e7b6      	b.n	8008260 <_dtoa_r+0x188>
 80082f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80082f4:	e7b5      	b.n	8008262 <_dtoa_r+0x18a>
 80082f6:	427b      	negs	r3, r7
 80082f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80082fa:	2300      	movs	r3, #0
 80082fc:	eba8 0807 	sub.w	r8, r8, r7
 8008300:	930e      	str	r3, [sp, #56]	@ 0x38
 8008302:	e7c2      	b.n	800828a <_dtoa_r+0x1b2>
 8008304:	2300      	movs	r3, #0
 8008306:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008308:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800830a:	2b00      	cmp	r3, #0
 800830c:	dc35      	bgt.n	800837a <_dtoa_r+0x2a2>
 800830e:	2301      	movs	r3, #1
 8008310:	461a      	mov	r2, r3
 8008312:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008316:	9221      	str	r2, [sp, #132]	@ 0x84
 8008318:	e00b      	b.n	8008332 <_dtoa_r+0x25a>
 800831a:	2301      	movs	r3, #1
 800831c:	e7f3      	b.n	8008306 <_dtoa_r+0x22e>
 800831e:	2300      	movs	r3, #0
 8008320:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008322:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008324:	18fb      	adds	r3, r7, r3
 8008326:	9308      	str	r3, [sp, #32]
 8008328:	3301      	adds	r3, #1
 800832a:	2b01      	cmp	r3, #1
 800832c:	9307      	str	r3, [sp, #28]
 800832e:	bfb8      	it	lt
 8008330:	2301      	movlt	r3, #1
 8008332:	2100      	movs	r1, #0
 8008334:	2204      	movs	r2, #4
 8008336:	f8db 001c 	ldr.w	r0, [fp, #28]
 800833a:	f102 0514 	add.w	r5, r2, #20
 800833e:	429d      	cmp	r5, r3
 8008340:	d91f      	bls.n	8008382 <_dtoa_r+0x2aa>
 8008342:	6041      	str	r1, [r0, #4]
 8008344:	4658      	mov	r0, fp
 8008346:	f001 fa8f 	bl	8009868 <_Balloc>
 800834a:	4682      	mov	sl, r0
 800834c:	2800      	cmp	r0, #0
 800834e:	d139      	bne.n	80083c4 <_dtoa_r+0x2ec>
 8008350:	4602      	mov	r2, r0
 8008352:	f240 11af 	movw	r1, #431	@ 0x1af
 8008356:	4b1a      	ldr	r3, [pc, #104]	@ (80083c0 <_dtoa_r+0x2e8>)
 8008358:	e6d2      	b.n	8008100 <_dtoa_r+0x28>
 800835a:	2301      	movs	r3, #1
 800835c:	e7e0      	b.n	8008320 <_dtoa_r+0x248>
 800835e:	2401      	movs	r4, #1
 8008360:	2300      	movs	r3, #0
 8008362:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008364:	9320      	str	r3, [sp, #128]	@ 0x80
 8008366:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800836a:	2200      	movs	r2, #0
 800836c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008370:	2312      	movs	r3, #18
 8008372:	e7d0      	b.n	8008316 <_dtoa_r+0x23e>
 8008374:	2301      	movs	r3, #1
 8008376:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008378:	e7f5      	b.n	8008366 <_dtoa_r+0x28e>
 800837a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800837c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008380:	e7d7      	b.n	8008332 <_dtoa_r+0x25a>
 8008382:	3101      	adds	r1, #1
 8008384:	0052      	lsls	r2, r2, #1
 8008386:	e7d8      	b.n	800833a <_dtoa_r+0x262>
 8008388:	636f4361 	.word	0x636f4361
 800838c:	3fd287a7 	.word	0x3fd287a7
 8008390:	8b60c8b3 	.word	0x8b60c8b3
 8008394:	3fc68a28 	.word	0x3fc68a28
 8008398:	509f79fb 	.word	0x509f79fb
 800839c:	3fd34413 	.word	0x3fd34413
 80083a0:	0800ad0e 	.word	0x0800ad0e
 80083a4:	0800ad25 	.word	0x0800ad25
 80083a8:	7ff00000 	.word	0x7ff00000
 80083ac:	0800ad0a 	.word	0x0800ad0a
 80083b0:	0800ab7b 	.word	0x0800ab7b
 80083b4:	0800ab7a 	.word	0x0800ab7a
 80083b8:	3ff80000 	.word	0x3ff80000
 80083bc:	0800ae90 	.word	0x0800ae90
 80083c0:	0800ad7d 	.word	0x0800ad7d
 80083c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80083c8:	6018      	str	r0, [r3, #0]
 80083ca:	9b07      	ldr	r3, [sp, #28]
 80083cc:	2b0e      	cmp	r3, #14
 80083ce:	f200 80a4 	bhi.w	800851a <_dtoa_r+0x442>
 80083d2:	2c00      	cmp	r4, #0
 80083d4:	f000 80a1 	beq.w	800851a <_dtoa_r+0x442>
 80083d8:	2f00      	cmp	r7, #0
 80083da:	dd33      	ble.n	8008444 <_dtoa_r+0x36c>
 80083dc:	4b86      	ldr	r3, [pc, #536]	@ (80085f8 <_dtoa_r+0x520>)
 80083de:	f007 020f 	and.w	r2, r7, #15
 80083e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083e6:	05f8      	lsls	r0, r7, #23
 80083e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80083f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80083f4:	d516      	bpl.n	8008424 <_dtoa_r+0x34c>
 80083f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083fa:	4b80      	ldr	r3, [pc, #512]	@ (80085fc <_dtoa_r+0x524>)
 80083fc:	2603      	movs	r6, #3
 80083fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008402:	f7f8 f993 	bl	800072c <__aeabi_ddiv>
 8008406:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800840a:	f004 040f 	and.w	r4, r4, #15
 800840e:	4d7b      	ldr	r5, [pc, #492]	@ (80085fc <_dtoa_r+0x524>)
 8008410:	b954      	cbnz	r4, 8008428 <_dtoa_r+0x350>
 8008412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800841a:	f7f8 f987 	bl	800072c <__aeabi_ddiv>
 800841e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008422:	e028      	b.n	8008476 <_dtoa_r+0x39e>
 8008424:	2602      	movs	r6, #2
 8008426:	e7f2      	b.n	800840e <_dtoa_r+0x336>
 8008428:	07e1      	lsls	r1, r4, #31
 800842a:	d508      	bpl.n	800843e <_dtoa_r+0x366>
 800842c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008430:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008434:	f7f8 f850 	bl	80004d8 <__aeabi_dmul>
 8008438:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800843c:	3601      	adds	r6, #1
 800843e:	1064      	asrs	r4, r4, #1
 8008440:	3508      	adds	r5, #8
 8008442:	e7e5      	b.n	8008410 <_dtoa_r+0x338>
 8008444:	f000 80d2 	beq.w	80085ec <_dtoa_r+0x514>
 8008448:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800844c:	427c      	negs	r4, r7
 800844e:	4b6a      	ldr	r3, [pc, #424]	@ (80085f8 <_dtoa_r+0x520>)
 8008450:	f004 020f 	and.w	r2, r4, #15
 8008454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	f7f8 f83c 	bl	80004d8 <__aeabi_dmul>
 8008460:	2602      	movs	r6, #2
 8008462:	2300      	movs	r3, #0
 8008464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008468:	4d64      	ldr	r5, [pc, #400]	@ (80085fc <_dtoa_r+0x524>)
 800846a:	1124      	asrs	r4, r4, #4
 800846c:	2c00      	cmp	r4, #0
 800846e:	f040 80b2 	bne.w	80085d6 <_dtoa_r+0x4fe>
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1d3      	bne.n	800841e <_dtoa_r+0x346>
 8008476:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800847a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 80b7 	beq.w	80085f0 <_dtoa_r+0x518>
 8008482:	2200      	movs	r2, #0
 8008484:	4620      	mov	r0, r4
 8008486:	4629      	mov	r1, r5
 8008488:	4b5d      	ldr	r3, [pc, #372]	@ (8008600 <_dtoa_r+0x528>)
 800848a:	f7f8 fa97 	bl	80009bc <__aeabi_dcmplt>
 800848e:	2800      	cmp	r0, #0
 8008490:	f000 80ae 	beq.w	80085f0 <_dtoa_r+0x518>
 8008494:	9b07      	ldr	r3, [sp, #28]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 80aa 	beq.w	80085f0 <_dtoa_r+0x518>
 800849c:	9b08      	ldr	r3, [sp, #32]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	dd37      	ble.n	8008512 <_dtoa_r+0x43a>
 80084a2:	1e7b      	subs	r3, r7, #1
 80084a4:	4620      	mov	r0, r4
 80084a6:	9304      	str	r3, [sp, #16]
 80084a8:	2200      	movs	r2, #0
 80084aa:	4629      	mov	r1, r5
 80084ac:	4b55      	ldr	r3, [pc, #340]	@ (8008604 <_dtoa_r+0x52c>)
 80084ae:	f7f8 f813 	bl	80004d8 <__aeabi_dmul>
 80084b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084b6:	9c08      	ldr	r4, [sp, #32]
 80084b8:	3601      	adds	r6, #1
 80084ba:	4630      	mov	r0, r6
 80084bc:	f7f7 ffa2 	bl	8000404 <__aeabi_i2d>
 80084c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084c4:	f7f8 f808 	bl	80004d8 <__aeabi_dmul>
 80084c8:	2200      	movs	r2, #0
 80084ca:	4b4f      	ldr	r3, [pc, #316]	@ (8008608 <_dtoa_r+0x530>)
 80084cc:	f7f7 fe4e 	bl	800016c <__adddf3>
 80084d0:	4605      	mov	r5, r0
 80084d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80084d6:	2c00      	cmp	r4, #0
 80084d8:	f040 809a 	bne.w	8008610 <_dtoa_r+0x538>
 80084dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084e0:	2200      	movs	r2, #0
 80084e2:	4b4a      	ldr	r3, [pc, #296]	@ (800860c <_dtoa_r+0x534>)
 80084e4:	f7f7 fe40 	bl	8000168 <__aeabi_dsub>
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084f0:	462a      	mov	r2, r5
 80084f2:	4633      	mov	r3, r6
 80084f4:	f7f8 fa80 	bl	80009f8 <__aeabi_dcmpgt>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	f040 828e 	bne.w	8008a1a <_dtoa_r+0x942>
 80084fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008502:	462a      	mov	r2, r5
 8008504:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008508:	f7f8 fa58 	bl	80009bc <__aeabi_dcmplt>
 800850c:	2800      	cmp	r0, #0
 800850e:	f040 8127 	bne.w	8008760 <_dtoa_r+0x688>
 8008512:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008516:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800851a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800851c:	2b00      	cmp	r3, #0
 800851e:	f2c0 8163 	blt.w	80087e8 <_dtoa_r+0x710>
 8008522:	2f0e      	cmp	r7, #14
 8008524:	f300 8160 	bgt.w	80087e8 <_dtoa_r+0x710>
 8008528:	4b33      	ldr	r3, [pc, #204]	@ (80085f8 <_dtoa_r+0x520>)
 800852a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800852e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008532:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008536:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008538:	2b00      	cmp	r3, #0
 800853a:	da03      	bge.n	8008544 <_dtoa_r+0x46c>
 800853c:	9b07      	ldr	r3, [sp, #28]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f340 8100 	ble.w	8008744 <_dtoa_r+0x66c>
 8008544:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008548:	4656      	mov	r6, sl
 800854a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800854e:	4620      	mov	r0, r4
 8008550:	4629      	mov	r1, r5
 8008552:	f7f8 f8eb 	bl	800072c <__aeabi_ddiv>
 8008556:	f7f8 fa6f 	bl	8000a38 <__aeabi_d2iz>
 800855a:	4680      	mov	r8, r0
 800855c:	f7f7 ff52 	bl	8000404 <__aeabi_i2d>
 8008560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008564:	f7f7 ffb8 	bl	80004d8 <__aeabi_dmul>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4620      	mov	r0, r4
 800856e:	4629      	mov	r1, r5
 8008570:	f7f7 fdfa 	bl	8000168 <__aeabi_dsub>
 8008574:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008578:	9d07      	ldr	r5, [sp, #28]
 800857a:	f806 4b01 	strb.w	r4, [r6], #1
 800857e:	eba6 040a 	sub.w	r4, r6, sl
 8008582:	42a5      	cmp	r5, r4
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	f040 8116 	bne.w	80087b8 <_dtoa_r+0x6e0>
 800858c:	f7f7 fdee 	bl	800016c <__adddf3>
 8008590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008594:	4604      	mov	r4, r0
 8008596:	460d      	mov	r5, r1
 8008598:	f7f8 fa2e 	bl	80009f8 <__aeabi_dcmpgt>
 800859c:	2800      	cmp	r0, #0
 800859e:	f040 80f8 	bne.w	8008792 <_dtoa_r+0x6ba>
 80085a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085a6:	4620      	mov	r0, r4
 80085a8:	4629      	mov	r1, r5
 80085aa:	f7f8 f9fd 	bl	80009a8 <__aeabi_dcmpeq>
 80085ae:	b118      	cbz	r0, 80085b8 <_dtoa_r+0x4e0>
 80085b0:	f018 0f01 	tst.w	r8, #1
 80085b4:	f040 80ed 	bne.w	8008792 <_dtoa_r+0x6ba>
 80085b8:	4649      	mov	r1, r9
 80085ba:	4658      	mov	r0, fp
 80085bc:	f001 f994 	bl	80098e8 <_Bfree>
 80085c0:	2300      	movs	r3, #0
 80085c2:	7033      	strb	r3, [r6, #0]
 80085c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80085c6:	3701      	adds	r7, #1
 80085c8:	601f      	str	r7, [r3, #0]
 80085ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 8320 	beq.w	8008c12 <_dtoa_r+0xb3a>
 80085d2:	601e      	str	r6, [r3, #0]
 80085d4:	e31d      	b.n	8008c12 <_dtoa_r+0xb3a>
 80085d6:	07e2      	lsls	r2, r4, #31
 80085d8:	d505      	bpl.n	80085e6 <_dtoa_r+0x50e>
 80085da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085de:	f7f7 ff7b 	bl	80004d8 <__aeabi_dmul>
 80085e2:	2301      	movs	r3, #1
 80085e4:	3601      	adds	r6, #1
 80085e6:	1064      	asrs	r4, r4, #1
 80085e8:	3508      	adds	r5, #8
 80085ea:	e73f      	b.n	800846c <_dtoa_r+0x394>
 80085ec:	2602      	movs	r6, #2
 80085ee:	e742      	b.n	8008476 <_dtoa_r+0x39e>
 80085f0:	9c07      	ldr	r4, [sp, #28]
 80085f2:	9704      	str	r7, [sp, #16]
 80085f4:	e761      	b.n	80084ba <_dtoa_r+0x3e2>
 80085f6:	bf00      	nop
 80085f8:	0800ae90 	.word	0x0800ae90
 80085fc:	0800ae68 	.word	0x0800ae68
 8008600:	3ff00000 	.word	0x3ff00000
 8008604:	40240000 	.word	0x40240000
 8008608:	401c0000 	.word	0x401c0000
 800860c:	40140000 	.word	0x40140000
 8008610:	4b70      	ldr	r3, [pc, #448]	@ (80087d4 <_dtoa_r+0x6fc>)
 8008612:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008614:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008618:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800861c:	4454      	add	r4, sl
 800861e:	2900      	cmp	r1, #0
 8008620:	d045      	beq.n	80086ae <_dtoa_r+0x5d6>
 8008622:	2000      	movs	r0, #0
 8008624:	496c      	ldr	r1, [pc, #432]	@ (80087d8 <_dtoa_r+0x700>)
 8008626:	f7f8 f881 	bl	800072c <__aeabi_ddiv>
 800862a:	4633      	mov	r3, r6
 800862c:	462a      	mov	r2, r5
 800862e:	f7f7 fd9b 	bl	8000168 <__aeabi_dsub>
 8008632:	4656      	mov	r6, sl
 8008634:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800863c:	f7f8 f9fc 	bl	8000a38 <__aeabi_d2iz>
 8008640:	4605      	mov	r5, r0
 8008642:	f7f7 fedf 	bl	8000404 <__aeabi_i2d>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800864e:	f7f7 fd8b 	bl	8000168 <__aeabi_dsub>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	3530      	adds	r5, #48	@ 0x30
 8008658:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800865c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008660:	f806 5b01 	strb.w	r5, [r6], #1
 8008664:	f7f8 f9aa 	bl	80009bc <__aeabi_dcmplt>
 8008668:	2800      	cmp	r0, #0
 800866a:	d163      	bne.n	8008734 <_dtoa_r+0x65c>
 800866c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008670:	2000      	movs	r0, #0
 8008672:	495a      	ldr	r1, [pc, #360]	@ (80087dc <_dtoa_r+0x704>)
 8008674:	f7f7 fd78 	bl	8000168 <__aeabi_dsub>
 8008678:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800867c:	f7f8 f99e 	bl	80009bc <__aeabi_dcmplt>
 8008680:	2800      	cmp	r0, #0
 8008682:	f040 8087 	bne.w	8008794 <_dtoa_r+0x6bc>
 8008686:	42a6      	cmp	r6, r4
 8008688:	f43f af43 	beq.w	8008512 <_dtoa_r+0x43a>
 800868c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008690:	2200      	movs	r2, #0
 8008692:	4b53      	ldr	r3, [pc, #332]	@ (80087e0 <_dtoa_r+0x708>)
 8008694:	f7f7 ff20 	bl	80004d8 <__aeabi_dmul>
 8008698:	2200      	movs	r2, #0
 800869a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800869e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086a2:	4b4f      	ldr	r3, [pc, #316]	@ (80087e0 <_dtoa_r+0x708>)
 80086a4:	f7f7 ff18 	bl	80004d8 <__aeabi_dmul>
 80086a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086ac:	e7c4      	b.n	8008638 <_dtoa_r+0x560>
 80086ae:	4631      	mov	r1, r6
 80086b0:	4628      	mov	r0, r5
 80086b2:	f7f7 ff11 	bl	80004d8 <__aeabi_dmul>
 80086b6:	4656      	mov	r6, sl
 80086b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086bc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80086be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086c2:	f7f8 f9b9 	bl	8000a38 <__aeabi_d2iz>
 80086c6:	4605      	mov	r5, r0
 80086c8:	f7f7 fe9c 	bl	8000404 <__aeabi_i2d>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086d4:	f7f7 fd48 	bl	8000168 <__aeabi_dsub>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	3530      	adds	r5, #48	@ 0x30
 80086de:	f806 5b01 	strb.w	r5, [r6], #1
 80086e2:	42a6      	cmp	r6, r4
 80086e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086e8:	f04f 0200 	mov.w	r2, #0
 80086ec:	d124      	bne.n	8008738 <_dtoa_r+0x660>
 80086ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80086f2:	4b39      	ldr	r3, [pc, #228]	@ (80087d8 <_dtoa_r+0x700>)
 80086f4:	f7f7 fd3a 	bl	800016c <__adddf3>
 80086f8:	4602      	mov	r2, r0
 80086fa:	460b      	mov	r3, r1
 80086fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008700:	f7f8 f97a 	bl	80009f8 <__aeabi_dcmpgt>
 8008704:	2800      	cmp	r0, #0
 8008706:	d145      	bne.n	8008794 <_dtoa_r+0x6bc>
 8008708:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800870c:	2000      	movs	r0, #0
 800870e:	4932      	ldr	r1, [pc, #200]	@ (80087d8 <_dtoa_r+0x700>)
 8008710:	f7f7 fd2a 	bl	8000168 <__aeabi_dsub>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800871c:	f7f8 f94e 	bl	80009bc <__aeabi_dcmplt>
 8008720:	2800      	cmp	r0, #0
 8008722:	f43f aef6 	beq.w	8008512 <_dtoa_r+0x43a>
 8008726:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008728:	1e73      	subs	r3, r6, #1
 800872a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800872c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008730:	2b30      	cmp	r3, #48	@ 0x30
 8008732:	d0f8      	beq.n	8008726 <_dtoa_r+0x64e>
 8008734:	9f04      	ldr	r7, [sp, #16]
 8008736:	e73f      	b.n	80085b8 <_dtoa_r+0x4e0>
 8008738:	4b29      	ldr	r3, [pc, #164]	@ (80087e0 <_dtoa_r+0x708>)
 800873a:	f7f7 fecd 	bl	80004d8 <__aeabi_dmul>
 800873e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008742:	e7bc      	b.n	80086be <_dtoa_r+0x5e6>
 8008744:	d10c      	bne.n	8008760 <_dtoa_r+0x688>
 8008746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800874a:	2200      	movs	r2, #0
 800874c:	4b25      	ldr	r3, [pc, #148]	@ (80087e4 <_dtoa_r+0x70c>)
 800874e:	f7f7 fec3 	bl	80004d8 <__aeabi_dmul>
 8008752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008756:	f7f8 f945 	bl	80009e4 <__aeabi_dcmpge>
 800875a:	2800      	cmp	r0, #0
 800875c:	f000 815b 	beq.w	8008a16 <_dtoa_r+0x93e>
 8008760:	2400      	movs	r4, #0
 8008762:	4625      	mov	r5, r4
 8008764:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008766:	4656      	mov	r6, sl
 8008768:	43db      	mvns	r3, r3
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	2700      	movs	r7, #0
 800876e:	4621      	mov	r1, r4
 8008770:	4658      	mov	r0, fp
 8008772:	f001 f8b9 	bl	80098e8 <_Bfree>
 8008776:	2d00      	cmp	r5, #0
 8008778:	d0dc      	beq.n	8008734 <_dtoa_r+0x65c>
 800877a:	b12f      	cbz	r7, 8008788 <_dtoa_r+0x6b0>
 800877c:	42af      	cmp	r7, r5
 800877e:	d003      	beq.n	8008788 <_dtoa_r+0x6b0>
 8008780:	4639      	mov	r1, r7
 8008782:	4658      	mov	r0, fp
 8008784:	f001 f8b0 	bl	80098e8 <_Bfree>
 8008788:	4629      	mov	r1, r5
 800878a:	4658      	mov	r0, fp
 800878c:	f001 f8ac 	bl	80098e8 <_Bfree>
 8008790:	e7d0      	b.n	8008734 <_dtoa_r+0x65c>
 8008792:	9704      	str	r7, [sp, #16]
 8008794:	4633      	mov	r3, r6
 8008796:	461e      	mov	r6, r3
 8008798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800879c:	2a39      	cmp	r2, #57	@ 0x39
 800879e:	d107      	bne.n	80087b0 <_dtoa_r+0x6d8>
 80087a0:	459a      	cmp	sl, r3
 80087a2:	d1f8      	bne.n	8008796 <_dtoa_r+0x6be>
 80087a4:	9a04      	ldr	r2, [sp, #16]
 80087a6:	3201      	adds	r2, #1
 80087a8:	9204      	str	r2, [sp, #16]
 80087aa:	2230      	movs	r2, #48	@ 0x30
 80087ac:	f88a 2000 	strb.w	r2, [sl]
 80087b0:	781a      	ldrb	r2, [r3, #0]
 80087b2:	3201      	adds	r2, #1
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	e7bd      	b.n	8008734 <_dtoa_r+0x65c>
 80087b8:	2200      	movs	r2, #0
 80087ba:	4b09      	ldr	r3, [pc, #36]	@ (80087e0 <_dtoa_r+0x708>)
 80087bc:	f7f7 fe8c 	bl	80004d8 <__aeabi_dmul>
 80087c0:	2200      	movs	r2, #0
 80087c2:	2300      	movs	r3, #0
 80087c4:	4604      	mov	r4, r0
 80087c6:	460d      	mov	r5, r1
 80087c8:	f7f8 f8ee 	bl	80009a8 <__aeabi_dcmpeq>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	f43f aebc 	beq.w	800854a <_dtoa_r+0x472>
 80087d2:	e6f1      	b.n	80085b8 <_dtoa_r+0x4e0>
 80087d4:	0800ae90 	.word	0x0800ae90
 80087d8:	3fe00000 	.word	0x3fe00000
 80087dc:	3ff00000 	.word	0x3ff00000
 80087e0:	40240000 	.word	0x40240000
 80087e4:	40140000 	.word	0x40140000
 80087e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80087ea:	2a00      	cmp	r2, #0
 80087ec:	f000 80db 	beq.w	80089a6 <_dtoa_r+0x8ce>
 80087f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80087f2:	2a01      	cmp	r2, #1
 80087f4:	f300 80bf 	bgt.w	8008976 <_dtoa_r+0x89e>
 80087f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80087fa:	2a00      	cmp	r2, #0
 80087fc:	f000 80b7 	beq.w	800896e <_dtoa_r+0x896>
 8008800:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008804:	4646      	mov	r6, r8
 8008806:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800880a:	2101      	movs	r1, #1
 800880c:	441a      	add	r2, r3
 800880e:	4658      	mov	r0, fp
 8008810:	4498      	add	r8, r3
 8008812:	9209      	str	r2, [sp, #36]	@ 0x24
 8008814:	f001 f966 	bl	8009ae4 <__i2b>
 8008818:	4605      	mov	r5, r0
 800881a:	b15e      	cbz	r6, 8008834 <_dtoa_r+0x75c>
 800881c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800881e:	2b00      	cmp	r3, #0
 8008820:	dd08      	ble.n	8008834 <_dtoa_r+0x75c>
 8008822:	42b3      	cmp	r3, r6
 8008824:	bfa8      	it	ge
 8008826:	4633      	movge	r3, r6
 8008828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800882a:	eba8 0803 	sub.w	r8, r8, r3
 800882e:	1af6      	subs	r6, r6, r3
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	9309      	str	r3, [sp, #36]	@ 0x24
 8008834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008836:	b1f3      	cbz	r3, 8008876 <_dtoa_r+0x79e>
 8008838:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80b7 	beq.w	80089ae <_dtoa_r+0x8d6>
 8008840:	b18c      	cbz	r4, 8008866 <_dtoa_r+0x78e>
 8008842:	4629      	mov	r1, r5
 8008844:	4622      	mov	r2, r4
 8008846:	4658      	mov	r0, fp
 8008848:	f001 fa0a 	bl	8009c60 <__pow5mult>
 800884c:	464a      	mov	r2, r9
 800884e:	4601      	mov	r1, r0
 8008850:	4605      	mov	r5, r0
 8008852:	4658      	mov	r0, fp
 8008854:	f001 f95c 	bl	8009b10 <__multiply>
 8008858:	4649      	mov	r1, r9
 800885a:	9004      	str	r0, [sp, #16]
 800885c:	4658      	mov	r0, fp
 800885e:	f001 f843 	bl	80098e8 <_Bfree>
 8008862:	9b04      	ldr	r3, [sp, #16]
 8008864:	4699      	mov	r9, r3
 8008866:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008868:	1b1a      	subs	r2, r3, r4
 800886a:	d004      	beq.n	8008876 <_dtoa_r+0x79e>
 800886c:	4649      	mov	r1, r9
 800886e:	4658      	mov	r0, fp
 8008870:	f001 f9f6 	bl	8009c60 <__pow5mult>
 8008874:	4681      	mov	r9, r0
 8008876:	2101      	movs	r1, #1
 8008878:	4658      	mov	r0, fp
 800887a:	f001 f933 	bl	8009ae4 <__i2b>
 800887e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008880:	4604      	mov	r4, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 81c9 	beq.w	8008c1a <_dtoa_r+0xb42>
 8008888:	461a      	mov	r2, r3
 800888a:	4601      	mov	r1, r0
 800888c:	4658      	mov	r0, fp
 800888e:	f001 f9e7 	bl	8009c60 <__pow5mult>
 8008892:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008894:	4604      	mov	r4, r0
 8008896:	2b01      	cmp	r3, #1
 8008898:	f300 808f 	bgt.w	80089ba <_dtoa_r+0x8e2>
 800889c:	9b02      	ldr	r3, [sp, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f040 8087 	bne.w	80089b2 <_dtoa_r+0x8da>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f040 8083 	bne.w	80089b6 <_dtoa_r+0x8de>
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80088b6:	0d1b      	lsrs	r3, r3, #20
 80088b8:	051b      	lsls	r3, r3, #20
 80088ba:	b12b      	cbz	r3, 80088c8 <_dtoa_r+0x7f0>
 80088bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088be:	f108 0801 	add.w	r8, r8, #1
 80088c2:	3301      	adds	r3, #1
 80088c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088c6:	2301      	movs	r3, #1
 80088c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80088ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 81aa 	beq.w	8008c26 <_dtoa_r+0xb4e>
 80088d2:	6923      	ldr	r3, [r4, #16]
 80088d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088d8:	6918      	ldr	r0, [r3, #16]
 80088da:	f001 f8b7 	bl	8009a4c <__hi0bits>
 80088de:	f1c0 0020 	rsb	r0, r0, #32
 80088e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088e4:	4418      	add	r0, r3
 80088e6:	f010 001f 	ands.w	r0, r0, #31
 80088ea:	d071      	beq.n	80089d0 <_dtoa_r+0x8f8>
 80088ec:	f1c0 0320 	rsb	r3, r0, #32
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	dd65      	ble.n	80089c0 <_dtoa_r+0x8e8>
 80088f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f6:	f1c0 001c 	rsb	r0, r0, #28
 80088fa:	4403      	add	r3, r0
 80088fc:	4480      	add	r8, r0
 80088fe:	4406      	add	r6, r0
 8008900:	9309      	str	r3, [sp, #36]	@ 0x24
 8008902:	f1b8 0f00 	cmp.w	r8, #0
 8008906:	dd05      	ble.n	8008914 <_dtoa_r+0x83c>
 8008908:	4649      	mov	r1, r9
 800890a:	4642      	mov	r2, r8
 800890c:	4658      	mov	r0, fp
 800890e:	f001 fa01 	bl	8009d14 <__lshift>
 8008912:	4681      	mov	r9, r0
 8008914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008916:	2b00      	cmp	r3, #0
 8008918:	dd05      	ble.n	8008926 <_dtoa_r+0x84e>
 800891a:	4621      	mov	r1, r4
 800891c:	461a      	mov	r2, r3
 800891e:	4658      	mov	r0, fp
 8008920:	f001 f9f8 	bl	8009d14 <__lshift>
 8008924:	4604      	mov	r4, r0
 8008926:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d053      	beq.n	80089d4 <_dtoa_r+0x8fc>
 800892c:	4621      	mov	r1, r4
 800892e:	4648      	mov	r0, r9
 8008930:	f001 fa5c 	bl	8009dec <__mcmp>
 8008934:	2800      	cmp	r0, #0
 8008936:	da4d      	bge.n	80089d4 <_dtoa_r+0x8fc>
 8008938:	1e7b      	subs	r3, r7, #1
 800893a:	4649      	mov	r1, r9
 800893c:	9304      	str	r3, [sp, #16]
 800893e:	220a      	movs	r2, #10
 8008940:	2300      	movs	r3, #0
 8008942:	4658      	mov	r0, fp
 8008944:	f000 fff2 	bl	800992c <__multadd>
 8008948:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800894a:	4681      	mov	r9, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 816c 	beq.w	8008c2a <_dtoa_r+0xb52>
 8008952:	2300      	movs	r3, #0
 8008954:	4629      	mov	r1, r5
 8008956:	220a      	movs	r2, #10
 8008958:	4658      	mov	r0, fp
 800895a:	f000 ffe7 	bl	800992c <__multadd>
 800895e:	9b08      	ldr	r3, [sp, #32]
 8008960:	4605      	mov	r5, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	dc61      	bgt.n	8008a2a <_dtoa_r+0x952>
 8008966:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008968:	2b02      	cmp	r3, #2
 800896a:	dc3b      	bgt.n	80089e4 <_dtoa_r+0x90c>
 800896c:	e05d      	b.n	8008a2a <_dtoa_r+0x952>
 800896e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008970:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008974:	e746      	b.n	8008804 <_dtoa_r+0x72c>
 8008976:	9b07      	ldr	r3, [sp, #28]
 8008978:	1e5c      	subs	r4, r3, #1
 800897a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800897c:	42a3      	cmp	r3, r4
 800897e:	bfbf      	itttt	lt
 8008980:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008982:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008984:	1ae3      	sublt	r3, r4, r3
 8008986:	18d2      	addlt	r2, r2, r3
 8008988:	bfa8      	it	ge
 800898a:	1b1c      	subge	r4, r3, r4
 800898c:	9b07      	ldr	r3, [sp, #28]
 800898e:	bfbe      	ittt	lt
 8008990:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008992:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008994:	2400      	movlt	r4, #0
 8008996:	2b00      	cmp	r3, #0
 8008998:	bfb5      	itete	lt
 800899a:	eba8 0603 	sublt.w	r6, r8, r3
 800899e:	4646      	movge	r6, r8
 80089a0:	2300      	movlt	r3, #0
 80089a2:	9b07      	ldrge	r3, [sp, #28]
 80089a4:	e730      	b.n	8008808 <_dtoa_r+0x730>
 80089a6:	4646      	mov	r6, r8
 80089a8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80089aa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80089ac:	e735      	b.n	800881a <_dtoa_r+0x742>
 80089ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089b0:	e75c      	b.n	800886c <_dtoa_r+0x794>
 80089b2:	2300      	movs	r3, #0
 80089b4:	e788      	b.n	80088c8 <_dtoa_r+0x7f0>
 80089b6:	9b02      	ldr	r3, [sp, #8]
 80089b8:	e786      	b.n	80088c8 <_dtoa_r+0x7f0>
 80089ba:	2300      	movs	r3, #0
 80089bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80089be:	e788      	b.n	80088d2 <_dtoa_r+0x7fa>
 80089c0:	d09f      	beq.n	8008902 <_dtoa_r+0x82a>
 80089c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089c4:	331c      	adds	r3, #28
 80089c6:	441a      	add	r2, r3
 80089c8:	4498      	add	r8, r3
 80089ca:	441e      	add	r6, r3
 80089cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80089ce:	e798      	b.n	8008902 <_dtoa_r+0x82a>
 80089d0:	4603      	mov	r3, r0
 80089d2:	e7f6      	b.n	80089c2 <_dtoa_r+0x8ea>
 80089d4:	9b07      	ldr	r3, [sp, #28]
 80089d6:	9704      	str	r7, [sp, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	dc20      	bgt.n	8008a1e <_dtoa_r+0x946>
 80089dc:	9308      	str	r3, [sp, #32]
 80089de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	dd1e      	ble.n	8008a22 <_dtoa_r+0x94a>
 80089e4:	9b08      	ldr	r3, [sp, #32]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f47f aebc 	bne.w	8008764 <_dtoa_r+0x68c>
 80089ec:	4621      	mov	r1, r4
 80089ee:	2205      	movs	r2, #5
 80089f0:	4658      	mov	r0, fp
 80089f2:	f000 ff9b 	bl	800992c <__multadd>
 80089f6:	4601      	mov	r1, r0
 80089f8:	4604      	mov	r4, r0
 80089fa:	4648      	mov	r0, r9
 80089fc:	f001 f9f6 	bl	8009dec <__mcmp>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	f77f aeaf 	ble.w	8008764 <_dtoa_r+0x68c>
 8008a06:	2331      	movs	r3, #49	@ 0x31
 8008a08:	4656      	mov	r6, sl
 8008a0a:	f806 3b01 	strb.w	r3, [r6], #1
 8008a0e:	9b04      	ldr	r3, [sp, #16]
 8008a10:	3301      	adds	r3, #1
 8008a12:	9304      	str	r3, [sp, #16]
 8008a14:	e6aa      	b.n	800876c <_dtoa_r+0x694>
 8008a16:	9c07      	ldr	r4, [sp, #28]
 8008a18:	9704      	str	r7, [sp, #16]
 8008a1a:	4625      	mov	r5, r4
 8008a1c:	e7f3      	b.n	8008a06 <_dtoa_r+0x92e>
 8008a1e:	9b07      	ldr	r3, [sp, #28]
 8008a20:	9308      	str	r3, [sp, #32]
 8008a22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 8104 	beq.w	8008c32 <_dtoa_r+0xb5a>
 8008a2a:	2e00      	cmp	r6, #0
 8008a2c:	dd05      	ble.n	8008a3a <_dtoa_r+0x962>
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4632      	mov	r2, r6
 8008a32:	4658      	mov	r0, fp
 8008a34:	f001 f96e 	bl	8009d14 <__lshift>
 8008a38:	4605      	mov	r5, r0
 8008a3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d05a      	beq.n	8008af6 <_dtoa_r+0xa1e>
 8008a40:	4658      	mov	r0, fp
 8008a42:	6869      	ldr	r1, [r5, #4]
 8008a44:	f000 ff10 	bl	8009868 <_Balloc>
 8008a48:	4606      	mov	r6, r0
 8008a4a:	b928      	cbnz	r0, 8008a58 <_dtoa_r+0x980>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008a52:	4b83      	ldr	r3, [pc, #524]	@ (8008c60 <_dtoa_r+0xb88>)
 8008a54:	f7ff bb54 	b.w	8008100 <_dtoa_r+0x28>
 8008a58:	692a      	ldr	r2, [r5, #16]
 8008a5a:	f105 010c 	add.w	r1, r5, #12
 8008a5e:	3202      	adds	r2, #2
 8008a60:	0092      	lsls	r2, r2, #2
 8008a62:	300c      	adds	r0, #12
 8008a64:	f7ff fa95 	bl	8007f92 <memcpy>
 8008a68:	2201      	movs	r2, #1
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4658      	mov	r0, fp
 8008a6e:	f001 f951 	bl	8009d14 <__lshift>
 8008a72:	462f      	mov	r7, r5
 8008a74:	4605      	mov	r5, r0
 8008a76:	f10a 0301 	add.w	r3, sl, #1
 8008a7a:	9307      	str	r3, [sp, #28]
 8008a7c:	9b08      	ldr	r3, [sp, #32]
 8008a7e:	4453      	add	r3, sl
 8008a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a82:	9b02      	ldr	r3, [sp, #8]
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a8a:	9b07      	ldr	r3, [sp, #28]
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	4648      	mov	r0, r9
 8008a92:	9302      	str	r3, [sp, #8]
 8008a94:	f7ff fa96 	bl	8007fc4 <quorem>
 8008a98:	4639      	mov	r1, r7
 8008a9a:	9008      	str	r0, [sp, #32]
 8008a9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008aa0:	4648      	mov	r0, r9
 8008aa2:	f001 f9a3 	bl	8009dec <__mcmp>
 8008aa6:	462a      	mov	r2, r5
 8008aa8:	9009      	str	r0, [sp, #36]	@ 0x24
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4658      	mov	r0, fp
 8008aae:	f001 f9b9 	bl	8009e24 <__mdiff>
 8008ab2:	68c2      	ldr	r2, [r0, #12]
 8008ab4:	4606      	mov	r6, r0
 8008ab6:	bb02      	cbnz	r2, 8008afa <_dtoa_r+0xa22>
 8008ab8:	4601      	mov	r1, r0
 8008aba:	4648      	mov	r0, r9
 8008abc:	f001 f996 	bl	8009dec <__mcmp>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4658      	mov	r0, fp
 8008ac6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ac8:	f000 ff0e 	bl	80098e8 <_Bfree>
 8008acc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008ace:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008ad0:	9e07      	ldr	r6, [sp, #28]
 8008ad2:	ea43 0102 	orr.w	r1, r3, r2
 8008ad6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ad8:	4319      	orrs	r1, r3
 8008ada:	d110      	bne.n	8008afe <_dtoa_r+0xa26>
 8008adc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ae0:	d029      	beq.n	8008b36 <_dtoa_r+0xa5e>
 8008ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dd02      	ble.n	8008aee <_dtoa_r+0xa16>
 8008ae8:	9b08      	ldr	r3, [sp, #32]
 8008aea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008aee:	9b02      	ldr	r3, [sp, #8]
 8008af0:	f883 8000 	strb.w	r8, [r3]
 8008af4:	e63b      	b.n	800876e <_dtoa_r+0x696>
 8008af6:	4628      	mov	r0, r5
 8008af8:	e7bb      	b.n	8008a72 <_dtoa_r+0x99a>
 8008afa:	2201      	movs	r2, #1
 8008afc:	e7e1      	b.n	8008ac2 <_dtoa_r+0x9ea>
 8008afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	db04      	blt.n	8008b0e <_dtoa_r+0xa36>
 8008b04:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008b06:	430b      	orrs	r3, r1
 8008b08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b0a:	430b      	orrs	r3, r1
 8008b0c:	d120      	bne.n	8008b50 <_dtoa_r+0xa78>
 8008b0e:	2a00      	cmp	r2, #0
 8008b10:	dded      	ble.n	8008aee <_dtoa_r+0xa16>
 8008b12:	4649      	mov	r1, r9
 8008b14:	2201      	movs	r2, #1
 8008b16:	4658      	mov	r0, fp
 8008b18:	f001 f8fc 	bl	8009d14 <__lshift>
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4681      	mov	r9, r0
 8008b20:	f001 f964 	bl	8009dec <__mcmp>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	dc03      	bgt.n	8008b30 <_dtoa_r+0xa58>
 8008b28:	d1e1      	bne.n	8008aee <_dtoa_r+0xa16>
 8008b2a:	f018 0f01 	tst.w	r8, #1
 8008b2e:	d0de      	beq.n	8008aee <_dtoa_r+0xa16>
 8008b30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b34:	d1d8      	bne.n	8008ae8 <_dtoa_r+0xa10>
 8008b36:	2339      	movs	r3, #57	@ 0x39
 8008b38:	9a02      	ldr	r2, [sp, #8]
 8008b3a:	7013      	strb	r3, [r2, #0]
 8008b3c:	4633      	mov	r3, r6
 8008b3e:	461e      	mov	r6, r3
 8008b40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	2a39      	cmp	r2, #57	@ 0x39
 8008b48:	d052      	beq.n	8008bf0 <_dtoa_r+0xb18>
 8008b4a:	3201      	adds	r2, #1
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	e60e      	b.n	800876e <_dtoa_r+0x696>
 8008b50:	2a00      	cmp	r2, #0
 8008b52:	dd07      	ble.n	8008b64 <_dtoa_r+0xa8c>
 8008b54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b58:	d0ed      	beq.n	8008b36 <_dtoa_r+0xa5e>
 8008b5a:	9a02      	ldr	r2, [sp, #8]
 8008b5c:	f108 0301 	add.w	r3, r8, #1
 8008b60:	7013      	strb	r3, [r2, #0]
 8008b62:	e604      	b.n	800876e <_dtoa_r+0x696>
 8008b64:	9b07      	ldr	r3, [sp, #28]
 8008b66:	9a07      	ldr	r2, [sp, #28]
 8008b68:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008b6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d028      	beq.n	8008bc4 <_dtoa_r+0xaec>
 8008b72:	4649      	mov	r1, r9
 8008b74:	2300      	movs	r3, #0
 8008b76:	220a      	movs	r2, #10
 8008b78:	4658      	mov	r0, fp
 8008b7a:	f000 fed7 	bl	800992c <__multadd>
 8008b7e:	42af      	cmp	r7, r5
 8008b80:	4681      	mov	r9, r0
 8008b82:	f04f 0300 	mov.w	r3, #0
 8008b86:	f04f 020a 	mov.w	r2, #10
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	4658      	mov	r0, fp
 8008b8e:	d107      	bne.n	8008ba0 <_dtoa_r+0xac8>
 8008b90:	f000 fecc 	bl	800992c <__multadd>
 8008b94:	4607      	mov	r7, r0
 8008b96:	4605      	mov	r5, r0
 8008b98:	9b07      	ldr	r3, [sp, #28]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	9307      	str	r3, [sp, #28]
 8008b9e:	e774      	b.n	8008a8a <_dtoa_r+0x9b2>
 8008ba0:	f000 fec4 	bl	800992c <__multadd>
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	4607      	mov	r7, r0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	220a      	movs	r2, #10
 8008bac:	4658      	mov	r0, fp
 8008bae:	f000 febd 	bl	800992c <__multadd>
 8008bb2:	4605      	mov	r5, r0
 8008bb4:	e7f0      	b.n	8008b98 <_dtoa_r+0xac0>
 8008bb6:	9b08      	ldr	r3, [sp, #32]
 8008bb8:	2700      	movs	r7, #0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	bfcc      	ite	gt
 8008bbe:	461e      	movgt	r6, r3
 8008bc0:	2601      	movle	r6, #1
 8008bc2:	4456      	add	r6, sl
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4658      	mov	r0, fp
 8008bca:	f001 f8a3 	bl	8009d14 <__lshift>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	4681      	mov	r9, r0
 8008bd2:	f001 f90b 	bl	8009dec <__mcmp>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	dcb0      	bgt.n	8008b3c <_dtoa_r+0xa64>
 8008bda:	d102      	bne.n	8008be2 <_dtoa_r+0xb0a>
 8008bdc:	f018 0f01 	tst.w	r8, #1
 8008be0:	d1ac      	bne.n	8008b3c <_dtoa_r+0xa64>
 8008be2:	4633      	mov	r3, r6
 8008be4:	461e      	mov	r6, r3
 8008be6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bea:	2a30      	cmp	r2, #48	@ 0x30
 8008bec:	d0fa      	beq.n	8008be4 <_dtoa_r+0xb0c>
 8008bee:	e5be      	b.n	800876e <_dtoa_r+0x696>
 8008bf0:	459a      	cmp	sl, r3
 8008bf2:	d1a4      	bne.n	8008b3e <_dtoa_r+0xa66>
 8008bf4:	9b04      	ldr	r3, [sp, #16]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	9304      	str	r3, [sp, #16]
 8008bfa:	2331      	movs	r3, #49	@ 0x31
 8008bfc:	f88a 3000 	strb.w	r3, [sl]
 8008c00:	e5b5      	b.n	800876e <_dtoa_r+0x696>
 8008c02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008c04:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008c64 <_dtoa_r+0xb8c>
 8008c08:	b11b      	cbz	r3, 8008c12 <_dtoa_r+0xb3a>
 8008c0a:	f10a 0308 	add.w	r3, sl, #8
 8008c0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	4650      	mov	r0, sl
 8008c14:	b017      	add	sp, #92	@ 0x5c
 8008c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	f77f ae3d 	ble.w	800889c <_dtoa_r+0x7c4>
 8008c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c24:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c26:	2001      	movs	r0, #1
 8008c28:	e65b      	b.n	80088e2 <_dtoa_r+0x80a>
 8008c2a:	9b08      	ldr	r3, [sp, #32]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f77f aed6 	ble.w	80089de <_dtoa_r+0x906>
 8008c32:	4656      	mov	r6, sl
 8008c34:	4621      	mov	r1, r4
 8008c36:	4648      	mov	r0, r9
 8008c38:	f7ff f9c4 	bl	8007fc4 <quorem>
 8008c3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c40:	9b08      	ldr	r3, [sp, #32]
 8008c42:	f806 8b01 	strb.w	r8, [r6], #1
 8008c46:	eba6 020a 	sub.w	r2, r6, sl
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	ddb3      	ble.n	8008bb6 <_dtoa_r+0xade>
 8008c4e:	4649      	mov	r1, r9
 8008c50:	2300      	movs	r3, #0
 8008c52:	220a      	movs	r2, #10
 8008c54:	4658      	mov	r0, fp
 8008c56:	f000 fe69 	bl	800992c <__multadd>
 8008c5a:	4681      	mov	r9, r0
 8008c5c:	e7ea      	b.n	8008c34 <_dtoa_r+0xb5c>
 8008c5e:	bf00      	nop
 8008c60:	0800ad7d 	.word	0x0800ad7d
 8008c64:	0800ad01 	.word	0x0800ad01

08008c68 <rshift>:
 8008c68:	6903      	ldr	r3, [r0, #16]
 8008c6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c72:	f100 0414 	add.w	r4, r0, #20
 8008c76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c7a:	dd46      	ble.n	8008d0a <rshift+0xa2>
 8008c7c:	f011 011f 	ands.w	r1, r1, #31
 8008c80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c88:	d10c      	bne.n	8008ca4 <rshift+0x3c>
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	f100 0710 	add.w	r7, r0, #16
 8008c90:	42b1      	cmp	r1, r6
 8008c92:	d335      	bcc.n	8008d00 <rshift+0x98>
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	1eea      	subs	r2, r5, #3
 8008c9a:	4296      	cmp	r6, r2
 8008c9c:	bf38      	it	cc
 8008c9e:	2300      	movcc	r3, #0
 8008ca0:	4423      	add	r3, r4
 8008ca2:	e015      	b.n	8008cd0 <rshift+0x68>
 8008ca4:	46a1      	mov	r9, r4
 8008ca6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008caa:	f1c1 0820 	rsb	r8, r1, #32
 8008cae:	40cf      	lsrs	r7, r1
 8008cb0:	f105 0e04 	add.w	lr, r5, #4
 8008cb4:	4576      	cmp	r6, lr
 8008cb6:	46f4      	mov	ip, lr
 8008cb8:	d816      	bhi.n	8008ce8 <rshift+0x80>
 8008cba:	1a9a      	subs	r2, r3, r2
 8008cbc:	0092      	lsls	r2, r2, #2
 8008cbe:	3a04      	subs	r2, #4
 8008cc0:	3501      	adds	r5, #1
 8008cc2:	42ae      	cmp	r6, r5
 8008cc4:	bf38      	it	cc
 8008cc6:	2200      	movcc	r2, #0
 8008cc8:	18a3      	adds	r3, r4, r2
 8008cca:	50a7      	str	r7, [r4, r2]
 8008ccc:	b107      	cbz	r7, 8008cd0 <rshift+0x68>
 8008cce:	3304      	adds	r3, #4
 8008cd0:	42a3      	cmp	r3, r4
 8008cd2:	eba3 0204 	sub.w	r2, r3, r4
 8008cd6:	bf08      	it	eq
 8008cd8:	2300      	moveq	r3, #0
 8008cda:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008cde:	6102      	str	r2, [r0, #16]
 8008ce0:	bf08      	it	eq
 8008ce2:	6143      	streq	r3, [r0, #20]
 8008ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ce8:	f8dc c000 	ldr.w	ip, [ip]
 8008cec:	fa0c fc08 	lsl.w	ip, ip, r8
 8008cf0:	ea4c 0707 	orr.w	r7, ip, r7
 8008cf4:	f849 7b04 	str.w	r7, [r9], #4
 8008cf8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cfc:	40cf      	lsrs	r7, r1
 8008cfe:	e7d9      	b.n	8008cb4 <rshift+0x4c>
 8008d00:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d04:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d08:	e7c2      	b.n	8008c90 <rshift+0x28>
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	e7e0      	b.n	8008cd0 <rshift+0x68>

08008d0e <__hexdig_fun>:
 8008d0e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008d12:	2b09      	cmp	r3, #9
 8008d14:	d802      	bhi.n	8008d1c <__hexdig_fun+0xe>
 8008d16:	3820      	subs	r0, #32
 8008d18:	b2c0      	uxtb	r0, r0
 8008d1a:	4770      	bx	lr
 8008d1c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008d20:	2b05      	cmp	r3, #5
 8008d22:	d801      	bhi.n	8008d28 <__hexdig_fun+0x1a>
 8008d24:	3847      	subs	r0, #71	@ 0x47
 8008d26:	e7f7      	b.n	8008d18 <__hexdig_fun+0xa>
 8008d28:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008d2c:	2b05      	cmp	r3, #5
 8008d2e:	d801      	bhi.n	8008d34 <__hexdig_fun+0x26>
 8008d30:	3827      	subs	r0, #39	@ 0x27
 8008d32:	e7f1      	b.n	8008d18 <__hexdig_fun+0xa>
 8008d34:	2000      	movs	r0, #0
 8008d36:	4770      	bx	lr

08008d38 <__gethex>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	468a      	mov	sl, r1
 8008d3e:	4690      	mov	r8, r2
 8008d40:	b085      	sub	sp, #20
 8008d42:	9302      	str	r3, [sp, #8]
 8008d44:	680b      	ldr	r3, [r1, #0]
 8008d46:	9001      	str	r0, [sp, #4]
 8008d48:	1c9c      	adds	r4, r3, #2
 8008d4a:	46a1      	mov	r9, r4
 8008d4c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008d50:	2830      	cmp	r0, #48	@ 0x30
 8008d52:	d0fa      	beq.n	8008d4a <__gethex+0x12>
 8008d54:	eba9 0303 	sub.w	r3, r9, r3
 8008d58:	f1a3 0b02 	sub.w	fp, r3, #2
 8008d5c:	f7ff ffd7 	bl	8008d0e <__hexdig_fun>
 8008d60:	4605      	mov	r5, r0
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d168      	bne.n	8008e38 <__gethex+0x100>
 8008d66:	2201      	movs	r2, #1
 8008d68:	4648      	mov	r0, r9
 8008d6a:	499f      	ldr	r1, [pc, #636]	@ (8008fe8 <__gethex+0x2b0>)
 8008d6c:	f7ff f8b8 	bl	8007ee0 <strncmp>
 8008d70:	4607      	mov	r7, r0
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d167      	bne.n	8008e46 <__gethex+0x10e>
 8008d76:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008d7a:	4626      	mov	r6, r4
 8008d7c:	f7ff ffc7 	bl	8008d0e <__hexdig_fun>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d062      	beq.n	8008e4a <__gethex+0x112>
 8008d84:	4623      	mov	r3, r4
 8008d86:	7818      	ldrb	r0, [r3, #0]
 8008d88:	4699      	mov	r9, r3
 8008d8a:	2830      	cmp	r0, #48	@ 0x30
 8008d8c:	f103 0301 	add.w	r3, r3, #1
 8008d90:	d0f9      	beq.n	8008d86 <__gethex+0x4e>
 8008d92:	f7ff ffbc 	bl	8008d0e <__hexdig_fun>
 8008d96:	fab0 f580 	clz	r5, r0
 8008d9a:	f04f 0b01 	mov.w	fp, #1
 8008d9e:	096d      	lsrs	r5, r5, #5
 8008da0:	464a      	mov	r2, r9
 8008da2:	4616      	mov	r6, r2
 8008da4:	7830      	ldrb	r0, [r6, #0]
 8008da6:	3201      	adds	r2, #1
 8008da8:	f7ff ffb1 	bl	8008d0e <__hexdig_fun>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d1f8      	bne.n	8008da2 <__gethex+0x6a>
 8008db0:	2201      	movs	r2, #1
 8008db2:	4630      	mov	r0, r6
 8008db4:	498c      	ldr	r1, [pc, #560]	@ (8008fe8 <__gethex+0x2b0>)
 8008db6:	f7ff f893 	bl	8007ee0 <strncmp>
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d13f      	bne.n	8008e3e <__gethex+0x106>
 8008dbe:	b944      	cbnz	r4, 8008dd2 <__gethex+0x9a>
 8008dc0:	1c74      	adds	r4, r6, #1
 8008dc2:	4622      	mov	r2, r4
 8008dc4:	4616      	mov	r6, r2
 8008dc6:	7830      	ldrb	r0, [r6, #0]
 8008dc8:	3201      	adds	r2, #1
 8008dca:	f7ff ffa0 	bl	8008d0e <__hexdig_fun>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d1f8      	bne.n	8008dc4 <__gethex+0x8c>
 8008dd2:	1ba4      	subs	r4, r4, r6
 8008dd4:	00a7      	lsls	r7, r4, #2
 8008dd6:	7833      	ldrb	r3, [r6, #0]
 8008dd8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ddc:	2b50      	cmp	r3, #80	@ 0x50
 8008dde:	d13e      	bne.n	8008e5e <__gethex+0x126>
 8008de0:	7873      	ldrb	r3, [r6, #1]
 8008de2:	2b2b      	cmp	r3, #43	@ 0x2b
 8008de4:	d033      	beq.n	8008e4e <__gethex+0x116>
 8008de6:	2b2d      	cmp	r3, #45	@ 0x2d
 8008de8:	d034      	beq.n	8008e54 <__gethex+0x11c>
 8008dea:	2400      	movs	r4, #0
 8008dec:	1c71      	adds	r1, r6, #1
 8008dee:	7808      	ldrb	r0, [r1, #0]
 8008df0:	f7ff ff8d 	bl	8008d0e <__hexdig_fun>
 8008df4:	1e43      	subs	r3, r0, #1
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b18      	cmp	r3, #24
 8008dfa:	d830      	bhi.n	8008e5e <__gethex+0x126>
 8008dfc:	f1a0 0210 	sub.w	r2, r0, #16
 8008e00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e04:	f7ff ff83 	bl	8008d0e <__hexdig_fun>
 8008e08:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008e0c:	fa5f fc8c 	uxtb.w	ip, ip
 8008e10:	f1bc 0f18 	cmp.w	ip, #24
 8008e14:	f04f 030a 	mov.w	r3, #10
 8008e18:	d91e      	bls.n	8008e58 <__gethex+0x120>
 8008e1a:	b104      	cbz	r4, 8008e1e <__gethex+0xe6>
 8008e1c:	4252      	negs	r2, r2
 8008e1e:	4417      	add	r7, r2
 8008e20:	f8ca 1000 	str.w	r1, [sl]
 8008e24:	b1ed      	cbz	r5, 8008e62 <__gethex+0x12a>
 8008e26:	f1bb 0f00 	cmp.w	fp, #0
 8008e2a:	bf0c      	ite	eq
 8008e2c:	2506      	moveq	r5, #6
 8008e2e:	2500      	movne	r5, #0
 8008e30:	4628      	mov	r0, r5
 8008e32:	b005      	add	sp, #20
 8008e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e38:	2500      	movs	r5, #0
 8008e3a:	462c      	mov	r4, r5
 8008e3c:	e7b0      	b.n	8008da0 <__gethex+0x68>
 8008e3e:	2c00      	cmp	r4, #0
 8008e40:	d1c7      	bne.n	8008dd2 <__gethex+0x9a>
 8008e42:	4627      	mov	r7, r4
 8008e44:	e7c7      	b.n	8008dd6 <__gethex+0x9e>
 8008e46:	464e      	mov	r6, r9
 8008e48:	462f      	mov	r7, r5
 8008e4a:	2501      	movs	r5, #1
 8008e4c:	e7c3      	b.n	8008dd6 <__gethex+0x9e>
 8008e4e:	2400      	movs	r4, #0
 8008e50:	1cb1      	adds	r1, r6, #2
 8008e52:	e7cc      	b.n	8008dee <__gethex+0xb6>
 8008e54:	2401      	movs	r4, #1
 8008e56:	e7fb      	b.n	8008e50 <__gethex+0x118>
 8008e58:	fb03 0002 	mla	r0, r3, r2, r0
 8008e5c:	e7ce      	b.n	8008dfc <__gethex+0xc4>
 8008e5e:	4631      	mov	r1, r6
 8008e60:	e7de      	b.n	8008e20 <__gethex+0xe8>
 8008e62:	4629      	mov	r1, r5
 8008e64:	eba6 0309 	sub.w	r3, r6, r9
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	2b07      	cmp	r3, #7
 8008e6c:	dc0a      	bgt.n	8008e84 <__gethex+0x14c>
 8008e6e:	9801      	ldr	r0, [sp, #4]
 8008e70:	f000 fcfa 	bl	8009868 <_Balloc>
 8008e74:	4604      	mov	r4, r0
 8008e76:	b940      	cbnz	r0, 8008e8a <__gethex+0x152>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	21e4      	movs	r1, #228	@ 0xe4
 8008e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8008fec <__gethex+0x2b4>)
 8008e7e:	485c      	ldr	r0, [pc, #368]	@ (8008ff0 <__gethex+0x2b8>)
 8008e80:	f001 fa86 	bl	800a390 <__assert_func>
 8008e84:	3101      	adds	r1, #1
 8008e86:	105b      	asrs	r3, r3, #1
 8008e88:	e7ef      	b.n	8008e6a <__gethex+0x132>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f100 0a14 	add.w	sl, r0, #20
 8008e90:	4655      	mov	r5, sl
 8008e92:	469b      	mov	fp, r3
 8008e94:	45b1      	cmp	r9, r6
 8008e96:	d337      	bcc.n	8008f08 <__gethex+0x1d0>
 8008e98:	f845 bb04 	str.w	fp, [r5], #4
 8008e9c:	eba5 050a 	sub.w	r5, r5, sl
 8008ea0:	10ad      	asrs	r5, r5, #2
 8008ea2:	6125      	str	r5, [r4, #16]
 8008ea4:	4658      	mov	r0, fp
 8008ea6:	f000 fdd1 	bl	8009a4c <__hi0bits>
 8008eaa:	016d      	lsls	r5, r5, #5
 8008eac:	f8d8 6000 	ldr.w	r6, [r8]
 8008eb0:	1a2d      	subs	r5, r5, r0
 8008eb2:	42b5      	cmp	r5, r6
 8008eb4:	dd54      	ble.n	8008f60 <__gethex+0x228>
 8008eb6:	1bad      	subs	r5, r5, r6
 8008eb8:	4629      	mov	r1, r5
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f001 f959 	bl	800a172 <__any_on>
 8008ec0:	4681      	mov	r9, r0
 8008ec2:	b178      	cbz	r0, 8008ee4 <__gethex+0x1ac>
 8008ec4:	f04f 0901 	mov.w	r9, #1
 8008ec8:	1e6b      	subs	r3, r5, #1
 8008eca:	1159      	asrs	r1, r3, #5
 8008ecc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008ed0:	f003 021f 	and.w	r2, r3, #31
 8008ed4:	fa09 f202 	lsl.w	r2, r9, r2
 8008ed8:	420a      	tst	r2, r1
 8008eda:	d003      	beq.n	8008ee4 <__gethex+0x1ac>
 8008edc:	454b      	cmp	r3, r9
 8008ede:	dc36      	bgt.n	8008f4e <__gethex+0x216>
 8008ee0:	f04f 0902 	mov.w	r9, #2
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f7ff febe 	bl	8008c68 <rshift>
 8008eec:	442f      	add	r7, r5
 8008eee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ef2:	42bb      	cmp	r3, r7
 8008ef4:	da42      	bge.n	8008f7c <__gethex+0x244>
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	9801      	ldr	r0, [sp, #4]
 8008efa:	f000 fcf5 	bl	80098e8 <_Bfree>
 8008efe:	2300      	movs	r3, #0
 8008f00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f02:	25a3      	movs	r5, #163	@ 0xa3
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	e793      	b.n	8008e30 <__gethex+0xf8>
 8008f08:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008f0c:	2a2e      	cmp	r2, #46	@ 0x2e
 8008f0e:	d012      	beq.n	8008f36 <__gethex+0x1fe>
 8008f10:	2b20      	cmp	r3, #32
 8008f12:	d104      	bne.n	8008f1e <__gethex+0x1e6>
 8008f14:	f845 bb04 	str.w	fp, [r5], #4
 8008f18:	f04f 0b00 	mov.w	fp, #0
 8008f1c:	465b      	mov	r3, fp
 8008f1e:	7830      	ldrb	r0, [r6, #0]
 8008f20:	9303      	str	r3, [sp, #12]
 8008f22:	f7ff fef4 	bl	8008d0e <__hexdig_fun>
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	f000 000f 	and.w	r0, r0, #15
 8008f2c:	4098      	lsls	r0, r3
 8008f2e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008f32:	3304      	adds	r3, #4
 8008f34:	e7ae      	b.n	8008e94 <__gethex+0x15c>
 8008f36:	45b1      	cmp	r9, r6
 8008f38:	d8ea      	bhi.n	8008f10 <__gethex+0x1d8>
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	492a      	ldr	r1, [pc, #168]	@ (8008fe8 <__gethex+0x2b0>)
 8008f40:	9303      	str	r3, [sp, #12]
 8008f42:	f7fe ffcd 	bl	8007ee0 <strncmp>
 8008f46:	9b03      	ldr	r3, [sp, #12]
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d1e1      	bne.n	8008f10 <__gethex+0x1d8>
 8008f4c:	e7a2      	b.n	8008e94 <__gethex+0x15c>
 8008f4e:	4620      	mov	r0, r4
 8008f50:	1ea9      	subs	r1, r5, #2
 8008f52:	f001 f90e 	bl	800a172 <__any_on>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d0c2      	beq.n	8008ee0 <__gethex+0x1a8>
 8008f5a:	f04f 0903 	mov.w	r9, #3
 8008f5e:	e7c1      	b.n	8008ee4 <__gethex+0x1ac>
 8008f60:	da09      	bge.n	8008f76 <__gethex+0x23e>
 8008f62:	1b75      	subs	r5, r6, r5
 8008f64:	4621      	mov	r1, r4
 8008f66:	462a      	mov	r2, r5
 8008f68:	9801      	ldr	r0, [sp, #4]
 8008f6a:	f000 fed3 	bl	8009d14 <__lshift>
 8008f6e:	4604      	mov	r4, r0
 8008f70:	1b7f      	subs	r7, r7, r5
 8008f72:	f100 0a14 	add.w	sl, r0, #20
 8008f76:	f04f 0900 	mov.w	r9, #0
 8008f7a:	e7b8      	b.n	8008eee <__gethex+0x1b6>
 8008f7c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f80:	42bd      	cmp	r5, r7
 8008f82:	dd6f      	ble.n	8009064 <__gethex+0x32c>
 8008f84:	1bed      	subs	r5, r5, r7
 8008f86:	42ae      	cmp	r6, r5
 8008f88:	dc34      	bgt.n	8008ff4 <__gethex+0x2bc>
 8008f8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d022      	beq.n	8008fd8 <__gethex+0x2a0>
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d024      	beq.n	8008fe0 <__gethex+0x2a8>
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d115      	bne.n	8008fc6 <__gethex+0x28e>
 8008f9a:	42ae      	cmp	r6, r5
 8008f9c:	d113      	bne.n	8008fc6 <__gethex+0x28e>
 8008f9e:	2e01      	cmp	r6, #1
 8008fa0:	d10b      	bne.n	8008fba <__gethex+0x282>
 8008fa2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008fa6:	9a02      	ldr	r2, [sp, #8]
 8008fa8:	2562      	movs	r5, #98	@ 0x62
 8008faa:	6013      	str	r3, [r2, #0]
 8008fac:	2301      	movs	r3, #1
 8008fae:	6123      	str	r3, [r4, #16]
 8008fb0:	f8ca 3000 	str.w	r3, [sl]
 8008fb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fb6:	601c      	str	r4, [r3, #0]
 8008fb8:	e73a      	b.n	8008e30 <__gethex+0xf8>
 8008fba:	4620      	mov	r0, r4
 8008fbc:	1e71      	subs	r1, r6, #1
 8008fbe:	f001 f8d8 	bl	800a172 <__any_on>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d1ed      	bne.n	8008fa2 <__gethex+0x26a>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	9801      	ldr	r0, [sp, #4]
 8008fca:	f000 fc8d 	bl	80098e8 <_Bfree>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fd2:	2550      	movs	r5, #80	@ 0x50
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	e72b      	b.n	8008e30 <__gethex+0xf8>
 8008fd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1f3      	bne.n	8008fc6 <__gethex+0x28e>
 8008fde:	e7e0      	b.n	8008fa2 <__gethex+0x26a>
 8008fe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1dd      	bne.n	8008fa2 <__gethex+0x26a>
 8008fe6:	e7ee      	b.n	8008fc6 <__gethex+0x28e>
 8008fe8:	0800aba3 	.word	0x0800aba3
 8008fec:	0800ad7d 	.word	0x0800ad7d
 8008ff0:	0800ad8e 	.word	0x0800ad8e
 8008ff4:	1e6f      	subs	r7, r5, #1
 8008ff6:	f1b9 0f00 	cmp.w	r9, #0
 8008ffa:	d130      	bne.n	800905e <__gethex+0x326>
 8008ffc:	b127      	cbz	r7, 8009008 <__gethex+0x2d0>
 8008ffe:	4639      	mov	r1, r7
 8009000:	4620      	mov	r0, r4
 8009002:	f001 f8b6 	bl	800a172 <__any_on>
 8009006:	4681      	mov	r9, r0
 8009008:	2301      	movs	r3, #1
 800900a:	4629      	mov	r1, r5
 800900c:	1b76      	subs	r6, r6, r5
 800900e:	2502      	movs	r5, #2
 8009010:	117a      	asrs	r2, r7, #5
 8009012:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009016:	f007 071f 	and.w	r7, r7, #31
 800901a:	40bb      	lsls	r3, r7
 800901c:	4213      	tst	r3, r2
 800901e:	4620      	mov	r0, r4
 8009020:	bf18      	it	ne
 8009022:	f049 0902 	orrne.w	r9, r9, #2
 8009026:	f7ff fe1f 	bl	8008c68 <rshift>
 800902a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800902e:	f1b9 0f00 	cmp.w	r9, #0
 8009032:	d047      	beq.n	80090c4 <__gethex+0x38c>
 8009034:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009038:	2b02      	cmp	r3, #2
 800903a:	d015      	beq.n	8009068 <__gethex+0x330>
 800903c:	2b03      	cmp	r3, #3
 800903e:	d017      	beq.n	8009070 <__gethex+0x338>
 8009040:	2b01      	cmp	r3, #1
 8009042:	d109      	bne.n	8009058 <__gethex+0x320>
 8009044:	f019 0f02 	tst.w	r9, #2
 8009048:	d006      	beq.n	8009058 <__gethex+0x320>
 800904a:	f8da 3000 	ldr.w	r3, [sl]
 800904e:	ea49 0903 	orr.w	r9, r9, r3
 8009052:	f019 0f01 	tst.w	r9, #1
 8009056:	d10e      	bne.n	8009076 <__gethex+0x33e>
 8009058:	f045 0510 	orr.w	r5, r5, #16
 800905c:	e032      	b.n	80090c4 <__gethex+0x38c>
 800905e:	f04f 0901 	mov.w	r9, #1
 8009062:	e7d1      	b.n	8009008 <__gethex+0x2d0>
 8009064:	2501      	movs	r5, #1
 8009066:	e7e2      	b.n	800902e <__gethex+0x2f6>
 8009068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800906a:	f1c3 0301 	rsb	r3, r3, #1
 800906e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009072:	2b00      	cmp	r3, #0
 8009074:	d0f0      	beq.n	8009058 <__gethex+0x320>
 8009076:	f04f 0c00 	mov.w	ip, #0
 800907a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800907e:	f104 0314 	add.w	r3, r4, #20
 8009082:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009086:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800908a:	4618      	mov	r0, r3
 800908c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009090:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009094:	d01b      	beq.n	80090ce <__gethex+0x396>
 8009096:	3201      	adds	r2, #1
 8009098:	6002      	str	r2, [r0, #0]
 800909a:	2d02      	cmp	r5, #2
 800909c:	f104 0314 	add.w	r3, r4, #20
 80090a0:	d13c      	bne.n	800911c <__gethex+0x3e4>
 80090a2:	f8d8 2000 	ldr.w	r2, [r8]
 80090a6:	3a01      	subs	r2, #1
 80090a8:	42b2      	cmp	r2, r6
 80090aa:	d109      	bne.n	80090c0 <__gethex+0x388>
 80090ac:	2201      	movs	r2, #1
 80090ae:	1171      	asrs	r1, r6, #5
 80090b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090b4:	f006 061f 	and.w	r6, r6, #31
 80090b8:	fa02 f606 	lsl.w	r6, r2, r6
 80090bc:	421e      	tst	r6, r3
 80090be:	d13a      	bne.n	8009136 <__gethex+0x3fe>
 80090c0:	f045 0520 	orr.w	r5, r5, #32
 80090c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090c6:	601c      	str	r4, [r3, #0]
 80090c8:	9b02      	ldr	r3, [sp, #8]
 80090ca:	601f      	str	r7, [r3, #0]
 80090cc:	e6b0      	b.n	8008e30 <__gethex+0xf8>
 80090ce:	4299      	cmp	r1, r3
 80090d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80090d4:	d8d9      	bhi.n	800908a <__gethex+0x352>
 80090d6:	68a3      	ldr	r3, [r4, #8]
 80090d8:	459b      	cmp	fp, r3
 80090da:	db17      	blt.n	800910c <__gethex+0x3d4>
 80090dc:	6861      	ldr	r1, [r4, #4]
 80090de:	9801      	ldr	r0, [sp, #4]
 80090e0:	3101      	adds	r1, #1
 80090e2:	f000 fbc1 	bl	8009868 <_Balloc>
 80090e6:	4681      	mov	r9, r0
 80090e8:	b918      	cbnz	r0, 80090f2 <__gethex+0x3ba>
 80090ea:	4602      	mov	r2, r0
 80090ec:	2184      	movs	r1, #132	@ 0x84
 80090ee:	4b19      	ldr	r3, [pc, #100]	@ (8009154 <__gethex+0x41c>)
 80090f0:	e6c5      	b.n	8008e7e <__gethex+0x146>
 80090f2:	6922      	ldr	r2, [r4, #16]
 80090f4:	f104 010c 	add.w	r1, r4, #12
 80090f8:	3202      	adds	r2, #2
 80090fa:	0092      	lsls	r2, r2, #2
 80090fc:	300c      	adds	r0, #12
 80090fe:	f7fe ff48 	bl	8007f92 <memcpy>
 8009102:	4621      	mov	r1, r4
 8009104:	9801      	ldr	r0, [sp, #4]
 8009106:	f000 fbef 	bl	80098e8 <_Bfree>
 800910a:	464c      	mov	r4, r9
 800910c:	6923      	ldr	r3, [r4, #16]
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	6122      	str	r2, [r4, #16]
 8009112:	2201      	movs	r2, #1
 8009114:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009118:	615a      	str	r2, [r3, #20]
 800911a:	e7be      	b.n	800909a <__gethex+0x362>
 800911c:	6922      	ldr	r2, [r4, #16]
 800911e:	455a      	cmp	r2, fp
 8009120:	dd0b      	ble.n	800913a <__gethex+0x402>
 8009122:	2101      	movs	r1, #1
 8009124:	4620      	mov	r0, r4
 8009126:	f7ff fd9f 	bl	8008c68 <rshift>
 800912a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800912e:	3701      	adds	r7, #1
 8009130:	42bb      	cmp	r3, r7
 8009132:	f6ff aee0 	blt.w	8008ef6 <__gethex+0x1be>
 8009136:	2501      	movs	r5, #1
 8009138:	e7c2      	b.n	80090c0 <__gethex+0x388>
 800913a:	f016 061f 	ands.w	r6, r6, #31
 800913e:	d0fa      	beq.n	8009136 <__gethex+0x3fe>
 8009140:	4453      	add	r3, sl
 8009142:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009146:	f000 fc81 	bl	8009a4c <__hi0bits>
 800914a:	f1c6 0620 	rsb	r6, r6, #32
 800914e:	42b0      	cmp	r0, r6
 8009150:	dbe7      	blt.n	8009122 <__gethex+0x3ea>
 8009152:	e7f0      	b.n	8009136 <__gethex+0x3fe>
 8009154:	0800ad7d 	.word	0x0800ad7d

08009158 <L_shift>:
 8009158:	f1c2 0208 	rsb	r2, r2, #8
 800915c:	0092      	lsls	r2, r2, #2
 800915e:	b570      	push	{r4, r5, r6, lr}
 8009160:	f1c2 0620 	rsb	r6, r2, #32
 8009164:	6843      	ldr	r3, [r0, #4]
 8009166:	6804      	ldr	r4, [r0, #0]
 8009168:	fa03 f506 	lsl.w	r5, r3, r6
 800916c:	432c      	orrs	r4, r5
 800916e:	40d3      	lsrs	r3, r2
 8009170:	6004      	str	r4, [r0, #0]
 8009172:	f840 3f04 	str.w	r3, [r0, #4]!
 8009176:	4288      	cmp	r0, r1
 8009178:	d3f4      	bcc.n	8009164 <L_shift+0xc>
 800917a:	bd70      	pop	{r4, r5, r6, pc}

0800917c <__match>:
 800917c:	b530      	push	{r4, r5, lr}
 800917e:	6803      	ldr	r3, [r0, #0]
 8009180:	3301      	adds	r3, #1
 8009182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009186:	b914      	cbnz	r4, 800918e <__match+0x12>
 8009188:	6003      	str	r3, [r0, #0]
 800918a:	2001      	movs	r0, #1
 800918c:	bd30      	pop	{r4, r5, pc}
 800918e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009192:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009196:	2d19      	cmp	r5, #25
 8009198:	bf98      	it	ls
 800919a:	3220      	addls	r2, #32
 800919c:	42a2      	cmp	r2, r4
 800919e:	d0f0      	beq.n	8009182 <__match+0x6>
 80091a0:	2000      	movs	r0, #0
 80091a2:	e7f3      	b.n	800918c <__match+0x10>

080091a4 <__hexnan>:
 80091a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a8:	2500      	movs	r5, #0
 80091aa:	680b      	ldr	r3, [r1, #0]
 80091ac:	4682      	mov	sl, r0
 80091ae:	115e      	asrs	r6, r3, #5
 80091b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80091b4:	f013 031f 	ands.w	r3, r3, #31
 80091b8:	bf18      	it	ne
 80091ba:	3604      	addne	r6, #4
 80091bc:	1f37      	subs	r7, r6, #4
 80091be:	4690      	mov	r8, r2
 80091c0:	46b9      	mov	r9, r7
 80091c2:	463c      	mov	r4, r7
 80091c4:	46ab      	mov	fp, r5
 80091c6:	b087      	sub	sp, #28
 80091c8:	6801      	ldr	r1, [r0, #0]
 80091ca:	9301      	str	r3, [sp, #4]
 80091cc:	f846 5c04 	str.w	r5, [r6, #-4]
 80091d0:	9502      	str	r5, [sp, #8]
 80091d2:	784a      	ldrb	r2, [r1, #1]
 80091d4:	1c4b      	adds	r3, r1, #1
 80091d6:	9303      	str	r3, [sp, #12]
 80091d8:	b342      	cbz	r2, 800922c <__hexnan+0x88>
 80091da:	4610      	mov	r0, r2
 80091dc:	9105      	str	r1, [sp, #20]
 80091de:	9204      	str	r2, [sp, #16]
 80091e0:	f7ff fd95 	bl	8008d0e <__hexdig_fun>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d151      	bne.n	800928c <__hexnan+0xe8>
 80091e8:	9a04      	ldr	r2, [sp, #16]
 80091ea:	9905      	ldr	r1, [sp, #20]
 80091ec:	2a20      	cmp	r2, #32
 80091ee:	d818      	bhi.n	8009222 <__hexnan+0x7e>
 80091f0:	9b02      	ldr	r3, [sp, #8]
 80091f2:	459b      	cmp	fp, r3
 80091f4:	dd13      	ble.n	800921e <__hexnan+0x7a>
 80091f6:	454c      	cmp	r4, r9
 80091f8:	d206      	bcs.n	8009208 <__hexnan+0x64>
 80091fa:	2d07      	cmp	r5, #7
 80091fc:	dc04      	bgt.n	8009208 <__hexnan+0x64>
 80091fe:	462a      	mov	r2, r5
 8009200:	4649      	mov	r1, r9
 8009202:	4620      	mov	r0, r4
 8009204:	f7ff ffa8 	bl	8009158 <L_shift>
 8009208:	4544      	cmp	r4, r8
 800920a:	d952      	bls.n	80092b2 <__hexnan+0x10e>
 800920c:	2300      	movs	r3, #0
 800920e:	f1a4 0904 	sub.w	r9, r4, #4
 8009212:	f844 3c04 	str.w	r3, [r4, #-4]
 8009216:	461d      	mov	r5, r3
 8009218:	464c      	mov	r4, r9
 800921a:	f8cd b008 	str.w	fp, [sp, #8]
 800921e:	9903      	ldr	r1, [sp, #12]
 8009220:	e7d7      	b.n	80091d2 <__hexnan+0x2e>
 8009222:	2a29      	cmp	r2, #41	@ 0x29
 8009224:	d157      	bne.n	80092d6 <__hexnan+0x132>
 8009226:	3102      	adds	r1, #2
 8009228:	f8ca 1000 	str.w	r1, [sl]
 800922c:	f1bb 0f00 	cmp.w	fp, #0
 8009230:	d051      	beq.n	80092d6 <__hexnan+0x132>
 8009232:	454c      	cmp	r4, r9
 8009234:	d206      	bcs.n	8009244 <__hexnan+0xa0>
 8009236:	2d07      	cmp	r5, #7
 8009238:	dc04      	bgt.n	8009244 <__hexnan+0xa0>
 800923a:	462a      	mov	r2, r5
 800923c:	4649      	mov	r1, r9
 800923e:	4620      	mov	r0, r4
 8009240:	f7ff ff8a 	bl	8009158 <L_shift>
 8009244:	4544      	cmp	r4, r8
 8009246:	d936      	bls.n	80092b6 <__hexnan+0x112>
 8009248:	4623      	mov	r3, r4
 800924a:	f1a8 0204 	sub.w	r2, r8, #4
 800924e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009252:	429f      	cmp	r7, r3
 8009254:	f842 1f04 	str.w	r1, [r2, #4]!
 8009258:	d2f9      	bcs.n	800924e <__hexnan+0xaa>
 800925a:	1b3b      	subs	r3, r7, r4
 800925c:	f023 0303 	bic.w	r3, r3, #3
 8009260:	3304      	adds	r3, #4
 8009262:	3401      	adds	r4, #1
 8009264:	3e03      	subs	r6, #3
 8009266:	42b4      	cmp	r4, r6
 8009268:	bf88      	it	hi
 800926a:	2304      	movhi	r3, #4
 800926c:	2200      	movs	r2, #0
 800926e:	4443      	add	r3, r8
 8009270:	f843 2b04 	str.w	r2, [r3], #4
 8009274:	429f      	cmp	r7, r3
 8009276:	d2fb      	bcs.n	8009270 <__hexnan+0xcc>
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	b91b      	cbnz	r3, 8009284 <__hexnan+0xe0>
 800927c:	4547      	cmp	r7, r8
 800927e:	d128      	bne.n	80092d2 <__hexnan+0x12e>
 8009280:	2301      	movs	r3, #1
 8009282:	603b      	str	r3, [r7, #0]
 8009284:	2005      	movs	r0, #5
 8009286:	b007      	add	sp, #28
 8009288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928c:	3501      	adds	r5, #1
 800928e:	2d08      	cmp	r5, #8
 8009290:	f10b 0b01 	add.w	fp, fp, #1
 8009294:	dd06      	ble.n	80092a4 <__hexnan+0x100>
 8009296:	4544      	cmp	r4, r8
 8009298:	d9c1      	bls.n	800921e <__hexnan+0x7a>
 800929a:	2300      	movs	r3, #0
 800929c:	2501      	movs	r5, #1
 800929e:	f844 3c04 	str.w	r3, [r4, #-4]
 80092a2:	3c04      	subs	r4, #4
 80092a4:	6822      	ldr	r2, [r4, #0]
 80092a6:	f000 000f 	and.w	r0, r0, #15
 80092aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80092ae:	6020      	str	r0, [r4, #0]
 80092b0:	e7b5      	b.n	800921e <__hexnan+0x7a>
 80092b2:	2508      	movs	r5, #8
 80092b4:	e7b3      	b.n	800921e <__hexnan+0x7a>
 80092b6:	9b01      	ldr	r3, [sp, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0dd      	beq.n	8009278 <__hexnan+0xd4>
 80092bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092c0:	f1c3 0320 	rsb	r3, r3, #32
 80092c4:	40da      	lsrs	r2, r3
 80092c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80092ca:	4013      	ands	r3, r2
 80092cc:	f846 3c04 	str.w	r3, [r6, #-4]
 80092d0:	e7d2      	b.n	8009278 <__hexnan+0xd4>
 80092d2:	3f04      	subs	r7, #4
 80092d4:	e7d0      	b.n	8009278 <__hexnan+0xd4>
 80092d6:	2004      	movs	r0, #4
 80092d8:	e7d5      	b.n	8009286 <__hexnan+0xe2>

080092da <__ssputs_r>:
 80092da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092de:	461f      	mov	r7, r3
 80092e0:	688e      	ldr	r6, [r1, #8]
 80092e2:	4682      	mov	sl, r0
 80092e4:	42be      	cmp	r6, r7
 80092e6:	460c      	mov	r4, r1
 80092e8:	4690      	mov	r8, r2
 80092ea:	680b      	ldr	r3, [r1, #0]
 80092ec:	d82d      	bhi.n	800934a <__ssputs_r+0x70>
 80092ee:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092f2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80092f6:	d026      	beq.n	8009346 <__ssputs_r+0x6c>
 80092f8:	6965      	ldr	r5, [r4, #20]
 80092fa:	6909      	ldr	r1, [r1, #16]
 80092fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009300:	eba3 0901 	sub.w	r9, r3, r1
 8009304:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009308:	1c7b      	adds	r3, r7, #1
 800930a:	444b      	add	r3, r9
 800930c:	106d      	asrs	r5, r5, #1
 800930e:	429d      	cmp	r5, r3
 8009310:	bf38      	it	cc
 8009312:	461d      	movcc	r5, r3
 8009314:	0553      	lsls	r3, r2, #21
 8009316:	d527      	bpl.n	8009368 <__ssputs_r+0x8e>
 8009318:	4629      	mov	r1, r5
 800931a:	f000 f95f 	bl	80095dc <_malloc_r>
 800931e:	4606      	mov	r6, r0
 8009320:	b360      	cbz	r0, 800937c <__ssputs_r+0xa2>
 8009322:	464a      	mov	r2, r9
 8009324:	6921      	ldr	r1, [r4, #16]
 8009326:	f7fe fe34 	bl	8007f92 <memcpy>
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009334:	81a3      	strh	r3, [r4, #12]
 8009336:	6126      	str	r6, [r4, #16]
 8009338:	444e      	add	r6, r9
 800933a:	6026      	str	r6, [r4, #0]
 800933c:	463e      	mov	r6, r7
 800933e:	6165      	str	r5, [r4, #20]
 8009340:	eba5 0509 	sub.w	r5, r5, r9
 8009344:	60a5      	str	r5, [r4, #8]
 8009346:	42be      	cmp	r6, r7
 8009348:	d900      	bls.n	800934c <__ssputs_r+0x72>
 800934a:	463e      	mov	r6, r7
 800934c:	4632      	mov	r2, r6
 800934e:	4641      	mov	r1, r8
 8009350:	6820      	ldr	r0, [r4, #0]
 8009352:	f000 ffad 	bl	800a2b0 <memmove>
 8009356:	2000      	movs	r0, #0
 8009358:	68a3      	ldr	r3, [r4, #8]
 800935a:	1b9b      	subs	r3, r3, r6
 800935c:	60a3      	str	r3, [r4, #8]
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	4433      	add	r3, r6
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009368:	462a      	mov	r2, r5
 800936a:	f000 ff66 	bl	800a23a <_realloc_r>
 800936e:	4606      	mov	r6, r0
 8009370:	2800      	cmp	r0, #0
 8009372:	d1e0      	bne.n	8009336 <__ssputs_r+0x5c>
 8009374:	4650      	mov	r0, sl
 8009376:	6921      	ldr	r1, [r4, #16]
 8009378:	f001 f83c 	bl	800a3f4 <_free_r>
 800937c:	230c      	movs	r3, #12
 800937e:	f8ca 3000 	str.w	r3, [sl]
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800938c:	81a3      	strh	r3, [r4, #12]
 800938e:	e7e9      	b.n	8009364 <__ssputs_r+0x8a>

08009390 <_svfiprintf_r>:
 8009390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	4698      	mov	r8, r3
 8009396:	898b      	ldrh	r3, [r1, #12]
 8009398:	4607      	mov	r7, r0
 800939a:	061b      	lsls	r3, r3, #24
 800939c:	460d      	mov	r5, r1
 800939e:	4614      	mov	r4, r2
 80093a0:	b09d      	sub	sp, #116	@ 0x74
 80093a2:	d510      	bpl.n	80093c6 <_svfiprintf_r+0x36>
 80093a4:	690b      	ldr	r3, [r1, #16]
 80093a6:	b973      	cbnz	r3, 80093c6 <_svfiprintf_r+0x36>
 80093a8:	2140      	movs	r1, #64	@ 0x40
 80093aa:	f000 f917 	bl	80095dc <_malloc_r>
 80093ae:	6028      	str	r0, [r5, #0]
 80093b0:	6128      	str	r0, [r5, #16]
 80093b2:	b930      	cbnz	r0, 80093c2 <_svfiprintf_r+0x32>
 80093b4:	230c      	movs	r3, #12
 80093b6:	603b      	str	r3, [r7, #0]
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093bc:	b01d      	add	sp, #116	@ 0x74
 80093be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c2:	2340      	movs	r3, #64	@ 0x40
 80093c4:	616b      	str	r3, [r5, #20]
 80093c6:	2300      	movs	r3, #0
 80093c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80093ca:	2320      	movs	r3, #32
 80093cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093d0:	2330      	movs	r3, #48	@ 0x30
 80093d2:	f04f 0901 	mov.w	r9, #1
 80093d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80093da:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009574 <_svfiprintf_r+0x1e4>
 80093de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093e2:	4623      	mov	r3, r4
 80093e4:	469a      	mov	sl, r3
 80093e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ea:	b10a      	cbz	r2, 80093f0 <_svfiprintf_r+0x60>
 80093ec:	2a25      	cmp	r2, #37	@ 0x25
 80093ee:	d1f9      	bne.n	80093e4 <_svfiprintf_r+0x54>
 80093f0:	ebba 0b04 	subs.w	fp, sl, r4
 80093f4:	d00b      	beq.n	800940e <_svfiprintf_r+0x7e>
 80093f6:	465b      	mov	r3, fp
 80093f8:	4622      	mov	r2, r4
 80093fa:	4629      	mov	r1, r5
 80093fc:	4638      	mov	r0, r7
 80093fe:	f7ff ff6c 	bl	80092da <__ssputs_r>
 8009402:	3001      	adds	r0, #1
 8009404:	f000 80a7 	beq.w	8009556 <_svfiprintf_r+0x1c6>
 8009408:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800940a:	445a      	add	r2, fp
 800940c:	9209      	str	r2, [sp, #36]	@ 0x24
 800940e:	f89a 3000 	ldrb.w	r3, [sl]
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 809f 	beq.w	8009556 <_svfiprintf_r+0x1c6>
 8009418:	2300      	movs	r3, #0
 800941a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800941e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009422:	f10a 0a01 	add.w	sl, sl, #1
 8009426:	9304      	str	r3, [sp, #16]
 8009428:	9307      	str	r3, [sp, #28]
 800942a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800942e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009430:	4654      	mov	r4, sl
 8009432:	2205      	movs	r2, #5
 8009434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009438:	484e      	ldr	r0, [pc, #312]	@ (8009574 <_svfiprintf_r+0x1e4>)
 800943a:	f7fe fd9c 	bl	8007f76 <memchr>
 800943e:	9a04      	ldr	r2, [sp, #16]
 8009440:	b9d8      	cbnz	r0, 800947a <_svfiprintf_r+0xea>
 8009442:	06d0      	lsls	r0, r2, #27
 8009444:	bf44      	itt	mi
 8009446:	2320      	movmi	r3, #32
 8009448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800944c:	0711      	lsls	r1, r2, #28
 800944e:	bf44      	itt	mi
 8009450:	232b      	movmi	r3, #43	@ 0x2b
 8009452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009456:	f89a 3000 	ldrb.w	r3, [sl]
 800945a:	2b2a      	cmp	r3, #42	@ 0x2a
 800945c:	d015      	beq.n	800948a <_svfiprintf_r+0xfa>
 800945e:	4654      	mov	r4, sl
 8009460:	2000      	movs	r0, #0
 8009462:	f04f 0c0a 	mov.w	ip, #10
 8009466:	9a07      	ldr	r2, [sp, #28]
 8009468:	4621      	mov	r1, r4
 800946a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800946e:	3b30      	subs	r3, #48	@ 0x30
 8009470:	2b09      	cmp	r3, #9
 8009472:	d94b      	bls.n	800950c <_svfiprintf_r+0x17c>
 8009474:	b1b0      	cbz	r0, 80094a4 <_svfiprintf_r+0x114>
 8009476:	9207      	str	r2, [sp, #28]
 8009478:	e014      	b.n	80094a4 <_svfiprintf_r+0x114>
 800947a:	eba0 0308 	sub.w	r3, r0, r8
 800947e:	fa09 f303 	lsl.w	r3, r9, r3
 8009482:	4313      	orrs	r3, r2
 8009484:	46a2      	mov	sl, r4
 8009486:	9304      	str	r3, [sp, #16]
 8009488:	e7d2      	b.n	8009430 <_svfiprintf_r+0xa0>
 800948a:	9b03      	ldr	r3, [sp, #12]
 800948c:	1d19      	adds	r1, r3, #4
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	9103      	str	r1, [sp, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	bfbb      	ittet	lt
 8009496:	425b      	neglt	r3, r3
 8009498:	f042 0202 	orrlt.w	r2, r2, #2
 800949c:	9307      	strge	r3, [sp, #28]
 800949e:	9307      	strlt	r3, [sp, #28]
 80094a0:	bfb8      	it	lt
 80094a2:	9204      	strlt	r2, [sp, #16]
 80094a4:	7823      	ldrb	r3, [r4, #0]
 80094a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80094a8:	d10a      	bne.n	80094c0 <_svfiprintf_r+0x130>
 80094aa:	7863      	ldrb	r3, [r4, #1]
 80094ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80094ae:	d132      	bne.n	8009516 <_svfiprintf_r+0x186>
 80094b0:	9b03      	ldr	r3, [sp, #12]
 80094b2:	3402      	adds	r4, #2
 80094b4:	1d1a      	adds	r2, r3, #4
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	9203      	str	r2, [sp, #12]
 80094ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094be:	9305      	str	r3, [sp, #20]
 80094c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009578 <_svfiprintf_r+0x1e8>
 80094c4:	2203      	movs	r2, #3
 80094c6:	4650      	mov	r0, sl
 80094c8:	7821      	ldrb	r1, [r4, #0]
 80094ca:	f7fe fd54 	bl	8007f76 <memchr>
 80094ce:	b138      	cbz	r0, 80094e0 <_svfiprintf_r+0x150>
 80094d0:	2240      	movs	r2, #64	@ 0x40
 80094d2:	9b04      	ldr	r3, [sp, #16]
 80094d4:	eba0 000a 	sub.w	r0, r0, sl
 80094d8:	4082      	lsls	r2, r0
 80094da:	4313      	orrs	r3, r2
 80094dc:	3401      	adds	r4, #1
 80094de:	9304      	str	r3, [sp, #16]
 80094e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e4:	2206      	movs	r2, #6
 80094e6:	4825      	ldr	r0, [pc, #148]	@ (800957c <_svfiprintf_r+0x1ec>)
 80094e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094ec:	f7fe fd43 	bl	8007f76 <memchr>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d036      	beq.n	8009562 <_svfiprintf_r+0x1d2>
 80094f4:	4b22      	ldr	r3, [pc, #136]	@ (8009580 <_svfiprintf_r+0x1f0>)
 80094f6:	bb1b      	cbnz	r3, 8009540 <_svfiprintf_r+0x1b0>
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	3307      	adds	r3, #7
 80094fc:	f023 0307 	bic.w	r3, r3, #7
 8009500:	3308      	adds	r3, #8
 8009502:	9303      	str	r3, [sp, #12]
 8009504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009506:	4433      	add	r3, r6
 8009508:	9309      	str	r3, [sp, #36]	@ 0x24
 800950a:	e76a      	b.n	80093e2 <_svfiprintf_r+0x52>
 800950c:	460c      	mov	r4, r1
 800950e:	2001      	movs	r0, #1
 8009510:	fb0c 3202 	mla	r2, ip, r2, r3
 8009514:	e7a8      	b.n	8009468 <_svfiprintf_r+0xd8>
 8009516:	2300      	movs	r3, #0
 8009518:	f04f 0c0a 	mov.w	ip, #10
 800951c:	4619      	mov	r1, r3
 800951e:	3401      	adds	r4, #1
 8009520:	9305      	str	r3, [sp, #20]
 8009522:	4620      	mov	r0, r4
 8009524:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009528:	3a30      	subs	r2, #48	@ 0x30
 800952a:	2a09      	cmp	r2, #9
 800952c:	d903      	bls.n	8009536 <_svfiprintf_r+0x1a6>
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0c6      	beq.n	80094c0 <_svfiprintf_r+0x130>
 8009532:	9105      	str	r1, [sp, #20]
 8009534:	e7c4      	b.n	80094c0 <_svfiprintf_r+0x130>
 8009536:	4604      	mov	r4, r0
 8009538:	2301      	movs	r3, #1
 800953a:	fb0c 2101 	mla	r1, ip, r1, r2
 800953e:	e7f0      	b.n	8009522 <_svfiprintf_r+0x192>
 8009540:	ab03      	add	r3, sp, #12
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	462a      	mov	r2, r5
 8009546:	4638      	mov	r0, r7
 8009548:	4b0e      	ldr	r3, [pc, #56]	@ (8009584 <_svfiprintf_r+0x1f4>)
 800954a:	a904      	add	r1, sp, #16
 800954c:	f7fc ff68 	bl	8006420 <_printf_float>
 8009550:	1c42      	adds	r2, r0, #1
 8009552:	4606      	mov	r6, r0
 8009554:	d1d6      	bne.n	8009504 <_svfiprintf_r+0x174>
 8009556:	89ab      	ldrh	r3, [r5, #12]
 8009558:	065b      	lsls	r3, r3, #25
 800955a:	f53f af2d 	bmi.w	80093b8 <_svfiprintf_r+0x28>
 800955e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009560:	e72c      	b.n	80093bc <_svfiprintf_r+0x2c>
 8009562:	ab03      	add	r3, sp, #12
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	462a      	mov	r2, r5
 8009568:	4638      	mov	r0, r7
 800956a:	4b06      	ldr	r3, [pc, #24]	@ (8009584 <_svfiprintf_r+0x1f4>)
 800956c:	a904      	add	r1, sp, #16
 800956e:	f7fd f9f5 	bl	800695c <_printf_i>
 8009572:	e7ed      	b.n	8009550 <_svfiprintf_r+0x1c0>
 8009574:	0800adee 	.word	0x0800adee
 8009578:	0800adf4 	.word	0x0800adf4
 800957c:	0800adf8 	.word	0x0800adf8
 8009580:	08006421 	.word	0x08006421
 8009584:	080092db 	.word	0x080092db

08009588 <malloc>:
 8009588:	4b02      	ldr	r3, [pc, #8]	@ (8009594 <malloc+0xc>)
 800958a:	4601      	mov	r1, r0
 800958c:	6818      	ldr	r0, [r3, #0]
 800958e:	f000 b825 	b.w	80095dc <_malloc_r>
 8009592:	bf00      	nop
 8009594:	20000184 	.word	0x20000184

08009598 <sbrk_aligned>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	4e0f      	ldr	r6, [pc, #60]	@ (80095d8 <sbrk_aligned+0x40>)
 800959c:	460c      	mov	r4, r1
 800959e:	6831      	ldr	r1, [r6, #0]
 80095a0:	4605      	mov	r5, r0
 80095a2:	b911      	cbnz	r1, 80095aa <sbrk_aligned+0x12>
 80095a4:	f000 fed2 	bl	800a34c <_sbrk_r>
 80095a8:	6030      	str	r0, [r6, #0]
 80095aa:	4621      	mov	r1, r4
 80095ac:	4628      	mov	r0, r5
 80095ae:	f000 fecd 	bl	800a34c <_sbrk_r>
 80095b2:	1c43      	adds	r3, r0, #1
 80095b4:	d103      	bne.n	80095be <sbrk_aligned+0x26>
 80095b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80095ba:	4620      	mov	r0, r4
 80095bc:	bd70      	pop	{r4, r5, r6, pc}
 80095be:	1cc4      	adds	r4, r0, #3
 80095c0:	f024 0403 	bic.w	r4, r4, #3
 80095c4:	42a0      	cmp	r0, r4
 80095c6:	d0f8      	beq.n	80095ba <sbrk_aligned+0x22>
 80095c8:	1a21      	subs	r1, r4, r0
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 febe 	bl	800a34c <_sbrk_r>
 80095d0:	3001      	adds	r0, #1
 80095d2:	d1f2      	bne.n	80095ba <sbrk_aligned+0x22>
 80095d4:	e7ef      	b.n	80095b6 <sbrk_aligned+0x1e>
 80095d6:	bf00      	nop
 80095d8:	200004ec 	.word	0x200004ec

080095dc <_malloc_r>:
 80095dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e0:	1ccd      	adds	r5, r1, #3
 80095e2:	f025 0503 	bic.w	r5, r5, #3
 80095e6:	3508      	adds	r5, #8
 80095e8:	2d0c      	cmp	r5, #12
 80095ea:	bf38      	it	cc
 80095ec:	250c      	movcc	r5, #12
 80095ee:	2d00      	cmp	r5, #0
 80095f0:	4606      	mov	r6, r0
 80095f2:	db01      	blt.n	80095f8 <_malloc_r+0x1c>
 80095f4:	42a9      	cmp	r1, r5
 80095f6:	d904      	bls.n	8009602 <_malloc_r+0x26>
 80095f8:	230c      	movs	r3, #12
 80095fa:	6033      	str	r3, [r6, #0]
 80095fc:	2000      	movs	r0, #0
 80095fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096d8 <_malloc_r+0xfc>
 8009606:	f000 f923 	bl	8009850 <__malloc_lock>
 800960a:	f8d8 3000 	ldr.w	r3, [r8]
 800960e:	461c      	mov	r4, r3
 8009610:	bb44      	cbnz	r4, 8009664 <_malloc_r+0x88>
 8009612:	4629      	mov	r1, r5
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff ffbf 	bl	8009598 <sbrk_aligned>
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	4604      	mov	r4, r0
 800961e:	d158      	bne.n	80096d2 <_malloc_r+0xf6>
 8009620:	f8d8 4000 	ldr.w	r4, [r8]
 8009624:	4627      	mov	r7, r4
 8009626:	2f00      	cmp	r7, #0
 8009628:	d143      	bne.n	80096b2 <_malloc_r+0xd6>
 800962a:	2c00      	cmp	r4, #0
 800962c:	d04b      	beq.n	80096c6 <_malloc_r+0xea>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	4639      	mov	r1, r7
 8009632:	4630      	mov	r0, r6
 8009634:	eb04 0903 	add.w	r9, r4, r3
 8009638:	f000 fe88 	bl	800a34c <_sbrk_r>
 800963c:	4581      	cmp	r9, r0
 800963e:	d142      	bne.n	80096c6 <_malloc_r+0xea>
 8009640:	6821      	ldr	r1, [r4, #0]
 8009642:	4630      	mov	r0, r6
 8009644:	1a6d      	subs	r5, r5, r1
 8009646:	4629      	mov	r1, r5
 8009648:	f7ff ffa6 	bl	8009598 <sbrk_aligned>
 800964c:	3001      	adds	r0, #1
 800964e:	d03a      	beq.n	80096c6 <_malloc_r+0xea>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	442b      	add	r3, r5
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	f8d8 3000 	ldr.w	r3, [r8]
 800965a:	685a      	ldr	r2, [r3, #4]
 800965c:	bb62      	cbnz	r2, 80096b8 <_malloc_r+0xdc>
 800965e:	f8c8 7000 	str.w	r7, [r8]
 8009662:	e00f      	b.n	8009684 <_malloc_r+0xa8>
 8009664:	6822      	ldr	r2, [r4, #0]
 8009666:	1b52      	subs	r2, r2, r5
 8009668:	d420      	bmi.n	80096ac <_malloc_r+0xd0>
 800966a:	2a0b      	cmp	r2, #11
 800966c:	d917      	bls.n	800969e <_malloc_r+0xc2>
 800966e:	1961      	adds	r1, r4, r5
 8009670:	42a3      	cmp	r3, r4
 8009672:	6025      	str	r5, [r4, #0]
 8009674:	bf18      	it	ne
 8009676:	6059      	strne	r1, [r3, #4]
 8009678:	6863      	ldr	r3, [r4, #4]
 800967a:	bf08      	it	eq
 800967c:	f8c8 1000 	streq.w	r1, [r8]
 8009680:	5162      	str	r2, [r4, r5]
 8009682:	604b      	str	r3, [r1, #4]
 8009684:	4630      	mov	r0, r6
 8009686:	f000 f8e9 	bl	800985c <__malloc_unlock>
 800968a:	f104 000b 	add.w	r0, r4, #11
 800968e:	1d23      	adds	r3, r4, #4
 8009690:	f020 0007 	bic.w	r0, r0, #7
 8009694:	1ac2      	subs	r2, r0, r3
 8009696:	bf1c      	itt	ne
 8009698:	1a1b      	subne	r3, r3, r0
 800969a:	50a3      	strne	r3, [r4, r2]
 800969c:	e7af      	b.n	80095fe <_malloc_r+0x22>
 800969e:	6862      	ldr	r2, [r4, #4]
 80096a0:	42a3      	cmp	r3, r4
 80096a2:	bf0c      	ite	eq
 80096a4:	f8c8 2000 	streq.w	r2, [r8]
 80096a8:	605a      	strne	r2, [r3, #4]
 80096aa:	e7eb      	b.n	8009684 <_malloc_r+0xa8>
 80096ac:	4623      	mov	r3, r4
 80096ae:	6864      	ldr	r4, [r4, #4]
 80096b0:	e7ae      	b.n	8009610 <_malloc_r+0x34>
 80096b2:	463c      	mov	r4, r7
 80096b4:	687f      	ldr	r7, [r7, #4]
 80096b6:	e7b6      	b.n	8009626 <_malloc_r+0x4a>
 80096b8:	461a      	mov	r2, r3
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	42a3      	cmp	r3, r4
 80096be:	d1fb      	bne.n	80096b8 <_malloc_r+0xdc>
 80096c0:	2300      	movs	r3, #0
 80096c2:	6053      	str	r3, [r2, #4]
 80096c4:	e7de      	b.n	8009684 <_malloc_r+0xa8>
 80096c6:	230c      	movs	r3, #12
 80096c8:	4630      	mov	r0, r6
 80096ca:	6033      	str	r3, [r6, #0]
 80096cc:	f000 f8c6 	bl	800985c <__malloc_unlock>
 80096d0:	e794      	b.n	80095fc <_malloc_r+0x20>
 80096d2:	6005      	str	r5, [r0, #0]
 80096d4:	e7d6      	b.n	8009684 <_malloc_r+0xa8>
 80096d6:	bf00      	nop
 80096d8:	200004f0 	.word	0x200004f0

080096dc <__ascii_mbtowc>:
 80096dc:	b082      	sub	sp, #8
 80096de:	b901      	cbnz	r1, 80096e2 <__ascii_mbtowc+0x6>
 80096e0:	a901      	add	r1, sp, #4
 80096e2:	b142      	cbz	r2, 80096f6 <__ascii_mbtowc+0x1a>
 80096e4:	b14b      	cbz	r3, 80096fa <__ascii_mbtowc+0x1e>
 80096e6:	7813      	ldrb	r3, [r2, #0]
 80096e8:	600b      	str	r3, [r1, #0]
 80096ea:	7812      	ldrb	r2, [r2, #0]
 80096ec:	1e10      	subs	r0, r2, #0
 80096ee:	bf18      	it	ne
 80096f0:	2001      	movne	r0, #1
 80096f2:	b002      	add	sp, #8
 80096f4:	4770      	bx	lr
 80096f6:	4610      	mov	r0, r2
 80096f8:	e7fb      	b.n	80096f2 <__ascii_mbtowc+0x16>
 80096fa:	f06f 0001 	mvn.w	r0, #1
 80096fe:	e7f8      	b.n	80096f2 <__ascii_mbtowc+0x16>

08009700 <__sflush_r>:
 8009700:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	0716      	lsls	r6, r2, #28
 8009708:	4605      	mov	r5, r0
 800970a:	460c      	mov	r4, r1
 800970c:	d454      	bmi.n	80097b8 <__sflush_r+0xb8>
 800970e:	684b      	ldr	r3, [r1, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	dc02      	bgt.n	800971a <__sflush_r+0x1a>
 8009714:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009716:	2b00      	cmp	r3, #0
 8009718:	dd48      	ble.n	80097ac <__sflush_r+0xac>
 800971a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800971c:	2e00      	cmp	r6, #0
 800971e:	d045      	beq.n	80097ac <__sflush_r+0xac>
 8009720:	2300      	movs	r3, #0
 8009722:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009726:	682f      	ldr	r7, [r5, #0]
 8009728:	6a21      	ldr	r1, [r4, #32]
 800972a:	602b      	str	r3, [r5, #0]
 800972c:	d030      	beq.n	8009790 <__sflush_r+0x90>
 800972e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009730:	89a3      	ldrh	r3, [r4, #12]
 8009732:	0759      	lsls	r1, r3, #29
 8009734:	d505      	bpl.n	8009742 <__sflush_r+0x42>
 8009736:	6863      	ldr	r3, [r4, #4]
 8009738:	1ad2      	subs	r2, r2, r3
 800973a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800973c:	b10b      	cbz	r3, 8009742 <__sflush_r+0x42>
 800973e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009740:	1ad2      	subs	r2, r2, r3
 8009742:	2300      	movs	r3, #0
 8009744:	4628      	mov	r0, r5
 8009746:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009748:	6a21      	ldr	r1, [r4, #32]
 800974a:	47b0      	blx	r6
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	d106      	bne.n	8009760 <__sflush_r+0x60>
 8009752:	6829      	ldr	r1, [r5, #0]
 8009754:	291d      	cmp	r1, #29
 8009756:	d82b      	bhi.n	80097b0 <__sflush_r+0xb0>
 8009758:	4a28      	ldr	r2, [pc, #160]	@ (80097fc <__sflush_r+0xfc>)
 800975a:	410a      	asrs	r2, r1
 800975c:	07d6      	lsls	r6, r2, #31
 800975e:	d427      	bmi.n	80097b0 <__sflush_r+0xb0>
 8009760:	2200      	movs	r2, #0
 8009762:	6062      	str	r2, [r4, #4]
 8009764:	6922      	ldr	r2, [r4, #16]
 8009766:	04d9      	lsls	r1, r3, #19
 8009768:	6022      	str	r2, [r4, #0]
 800976a:	d504      	bpl.n	8009776 <__sflush_r+0x76>
 800976c:	1c42      	adds	r2, r0, #1
 800976e:	d101      	bne.n	8009774 <__sflush_r+0x74>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	b903      	cbnz	r3, 8009776 <__sflush_r+0x76>
 8009774:	6560      	str	r0, [r4, #84]	@ 0x54
 8009776:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009778:	602f      	str	r7, [r5, #0]
 800977a:	b1b9      	cbz	r1, 80097ac <__sflush_r+0xac>
 800977c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009780:	4299      	cmp	r1, r3
 8009782:	d002      	beq.n	800978a <__sflush_r+0x8a>
 8009784:	4628      	mov	r0, r5
 8009786:	f000 fe35 	bl	800a3f4 <_free_r>
 800978a:	2300      	movs	r3, #0
 800978c:	6363      	str	r3, [r4, #52]	@ 0x34
 800978e:	e00d      	b.n	80097ac <__sflush_r+0xac>
 8009790:	2301      	movs	r3, #1
 8009792:	4628      	mov	r0, r5
 8009794:	47b0      	blx	r6
 8009796:	4602      	mov	r2, r0
 8009798:	1c50      	adds	r0, r2, #1
 800979a:	d1c9      	bne.n	8009730 <__sflush_r+0x30>
 800979c:	682b      	ldr	r3, [r5, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0c6      	beq.n	8009730 <__sflush_r+0x30>
 80097a2:	2b1d      	cmp	r3, #29
 80097a4:	d001      	beq.n	80097aa <__sflush_r+0xaa>
 80097a6:	2b16      	cmp	r3, #22
 80097a8:	d11d      	bne.n	80097e6 <__sflush_r+0xe6>
 80097aa:	602f      	str	r7, [r5, #0]
 80097ac:	2000      	movs	r0, #0
 80097ae:	e021      	b.n	80097f4 <__sflush_r+0xf4>
 80097b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097b4:	b21b      	sxth	r3, r3
 80097b6:	e01a      	b.n	80097ee <__sflush_r+0xee>
 80097b8:	690f      	ldr	r7, [r1, #16]
 80097ba:	2f00      	cmp	r7, #0
 80097bc:	d0f6      	beq.n	80097ac <__sflush_r+0xac>
 80097be:	0793      	lsls	r3, r2, #30
 80097c0:	bf18      	it	ne
 80097c2:	2300      	movne	r3, #0
 80097c4:	680e      	ldr	r6, [r1, #0]
 80097c6:	bf08      	it	eq
 80097c8:	694b      	ldreq	r3, [r1, #20]
 80097ca:	1bf6      	subs	r6, r6, r7
 80097cc:	600f      	str	r7, [r1, #0]
 80097ce:	608b      	str	r3, [r1, #8]
 80097d0:	2e00      	cmp	r6, #0
 80097d2:	ddeb      	ble.n	80097ac <__sflush_r+0xac>
 80097d4:	4633      	mov	r3, r6
 80097d6:	463a      	mov	r2, r7
 80097d8:	4628      	mov	r0, r5
 80097da:	6a21      	ldr	r1, [r4, #32]
 80097dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80097e0:	47e0      	blx	ip
 80097e2:	2800      	cmp	r0, #0
 80097e4:	dc07      	bgt.n	80097f6 <__sflush_r+0xf6>
 80097e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f6:	4407      	add	r7, r0
 80097f8:	1a36      	subs	r6, r6, r0
 80097fa:	e7e9      	b.n	80097d0 <__sflush_r+0xd0>
 80097fc:	dfbffffe 	.word	0xdfbffffe

08009800 <_fflush_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	690b      	ldr	r3, [r1, #16]
 8009804:	4605      	mov	r5, r0
 8009806:	460c      	mov	r4, r1
 8009808:	b913      	cbnz	r3, 8009810 <_fflush_r+0x10>
 800980a:	2500      	movs	r5, #0
 800980c:	4628      	mov	r0, r5
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	b118      	cbz	r0, 800981a <_fflush_r+0x1a>
 8009812:	6a03      	ldr	r3, [r0, #32]
 8009814:	b90b      	cbnz	r3, 800981a <_fflush_r+0x1a>
 8009816:	f7fd fcb1 	bl	800717c <__sinit>
 800981a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0f3      	beq.n	800980a <_fflush_r+0xa>
 8009822:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009824:	07d0      	lsls	r0, r2, #31
 8009826:	d404      	bmi.n	8009832 <_fflush_r+0x32>
 8009828:	0599      	lsls	r1, r3, #22
 800982a:	d402      	bmi.n	8009832 <_fflush_r+0x32>
 800982c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800982e:	f7fe fba0 	bl	8007f72 <__retarget_lock_acquire_recursive>
 8009832:	4628      	mov	r0, r5
 8009834:	4621      	mov	r1, r4
 8009836:	f7ff ff63 	bl	8009700 <__sflush_r>
 800983a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800983c:	4605      	mov	r5, r0
 800983e:	07da      	lsls	r2, r3, #31
 8009840:	d4e4      	bmi.n	800980c <_fflush_r+0xc>
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	059b      	lsls	r3, r3, #22
 8009846:	d4e1      	bmi.n	800980c <_fflush_r+0xc>
 8009848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800984a:	f7fe fb93 	bl	8007f74 <__retarget_lock_release_recursive>
 800984e:	e7dd      	b.n	800980c <_fflush_r+0xc>

08009850 <__malloc_lock>:
 8009850:	4801      	ldr	r0, [pc, #4]	@ (8009858 <__malloc_lock+0x8>)
 8009852:	f7fe bb8e 	b.w	8007f72 <__retarget_lock_acquire_recursive>
 8009856:	bf00      	nop
 8009858:	200004e8 	.word	0x200004e8

0800985c <__malloc_unlock>:
 800985c:	4801      	ldr	r0, [pc, #4]	@ (8009864 <__malloc_unlock+0x8>)
 800985e:	f7fe bb89 	b.w	8007f74 <__retarget_lock_release_recursive>
 8009862:	bf00      	nop
 8009864:	200004e8 	.word	0x200004e8

08009868 <_Balloc>:
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	69c6      	ldr	r6, [r0, #28]
 800986c:	4604      	mov	r4, r0
 800986e:	460d      	mov	r5, r1
 8009870:	b976      	cbnz	r6, 8009890 <_Balloc+0x28>
 8009872:	2010      	movs	r0, #16
 8009874:	f7ff fe88 	bl	8009588 <malloc>
 8009878:	4602      	mov	r2, r0
 800987a:	61e0      	str	r0, [r4, #28]
 800987c:	b920      	cbnz	r0, 8009888 <_Balloc+0x20>
 800987e:	216b      	movs	r1, #107	@ 0x6b
 8009880:	4b17      	ldr	r3, [pc, #92]	@ (80098e0 <_Balloc+0x78>)
 8009882:	4818      	ldr	r0, [pc, #96]	@ (80098e4 <_Balloc+0x7c>)
 8009884:	f000 fd84 	bl	800a390 <__assert_func>
 8009888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800988c:	6006      	str	r6, [r0, #0]
 800988e:	60c6      	str	r6, [r0, #12]
 8009890:	69e6      	ldr	r6, [r4, #28]
 8009892:	68f3      	ldr	r3, [r6, #12]
 8009894:	b183      	cbz	r3, 80098b8 <_Balloc+0x50>
 8009896:	69e3      	ldr	r3, [r4, #28]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800989e:	b9b8      	cbnz	r0, 80098d0 <_Balloc+0x68>
 80098a0:	2101      	movs	r1, #1
 80098a2:	fa01 f605 	lsl.w	r6, r1, r5
 80098a6:	1d72      	adds	r2, r6, #5
 80098a8:	4620      	mov	r0, r4
 80098aa:	0092      	lsls	r2, r2, #2
 80098ac:	f000 fd8e 	bl	800a3cc <_calloc_r>
 80098b0:	b160      	cbz	r0, 80098cc <_Balloc+0x64>
 80098b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098b6:	e00e      	b.n	80098d6 <_Balloc+0x6e>
 80098b8:	2221      	movs	r2, #33	@ 0x21
 80098ba:	2104      	movs	r1, #4
 80098bc:	4620      	mov	r0, r4
 80098be:	f000 fd85 	bl	800a3cc <_calloc_r>
 80098c2:	69e3      	ldr	r3, [r4, #28]
 80098c4:	60f0      	str	r0, [r6, #12]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1e4      	bne.n	8009896 <_Balloc+0x2e>
 80098cc:	2000      	movs	r0, #0
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	6802      	ldr	r2, [r0, #0]
 80098d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098d6:	2300      	movs	r3, #0
 80098d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098dc:	e7f7      	b.n	80098ce <_Balloc+0x66>
 80098de:	bf00      	nop
 80098e0:	0800ad0e 	.word	0x0800ad0e
 80098e4:	0800adff 	.word	0x0800adff

080098e8 <_Bfree>:
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	69c6      	ldr	r6, [r0, #28]
 80098ec:	4605      	mov	r5, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	b976      	cbnz	r6, 8009910 <_Bfree+0x28>
 80098f2:	2010      	movs	r0, #16
 80098f4:	f7ff fe48 	bl	8009588 <malloc>
 80098f8:	4602      	mov	r2, r0
 80098fa:	61e8      	str	r0, [r5, #28]
 80098fc:	b920      	cbnz	r0, 8009908 <_Bfree+0x20>
 80098fe:	218f      	movs	r1, #143	@ 0x8f
 8009900:	4b08      	ldr	r3, [pc, #32]	@ (8009924 <_Bfree+0x3c>)
 8009902:	4809      	ldr	r0, [pc, #36]	@ (8009928 <_Bfree+0x40>)
 8009904:	f000 fd44 	bl	800a390 <__assert_func>
 8009908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800990c:	6006      	str	r6, [r0, #0]
 800990e:	60c6      	str	r6, [r0, #12]
 8009910:	b13c      	cbz	r4, 8009922 <_Bfree+0x3a>
 8009912:	69eb      	ldr	r3, [r5, #28]
 8009914:	6862      	ldr	r2, [r4, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800991c:	6021      	str	r1, [r4, #0]
 800991e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009922:	bd70      	pop	{r4, r5, r6, pc}
 8009924:	0800ad0e 	.word	0x0800ad0e
 8009928:	0800adff 	.word	0x0800adff

0800992c <__multadd>:
 800992c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009930:	4607      	mov	r7, r0
 8009932:	460c      	mov	r4, r1
 8009934:	461e      	mov	r6, r3
 8009936:	2000      	movs	r0, #0
 8009938:	690d      	ldr	r5, [r1, #16]
 800993a:	f101 0c14 	add.w	ip, r1, #20
 800993e:	f8dc 3000 	ldr.w	r3, [ip]
 8009942:	3001      	adds	r0, #1
 8009944:	b299      	uxth	r1, r3
 8009946:	fb02 6101 	mla	r1, r2, r1, r6
 800994a:	0c1e      	lsrs	r6, r3, #16
 800994c:	0c0b      	lsrs	r3, r1, #16
 800994e:	fb02 3306 	mla	r3, r2, r6, r3
 8009952:	b289      	uxth	r1, r1
 8009954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009958:	4285      	cmp	r5, r0
 800995a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800995e:	f84c 1b04 	str.w	r1, [ip], #4
 8009962:	dcec      	bgt.n	800993e <__multadd+0x12>
 8009964:	b30e      	cbz	r6, 80099aa <__multadd+0x7e>
 8009966:	68a3      	ldr	r3, [r4, #8]
 8009968:	42ab      	cmp	r3, r5
 800996a:	dc19      	bgt.n	80099a0 <__multadd+0x74>
 800996c:	6861      	ldr	r1, [r4, #4]
 800996e:	4638      	mov	r0, r7
 8009970:	3101      	adds	r1, #1
 8009972:	f7ff ff79 	bl	8009868 <_Balloc>
 8009976:	4680      	mov	r8, r0
 8009978:	b928      	cbnz	r0, 8009986 <__multadd+0x5a>
 800997a:	4602      	mov	r2, r0
 800997c:	21ba      	movs	r1, #186	@ 0xba
 800997e:	4b0c      	ldr	r3, [pc, #48]	@ (80099b0 <__multadd+0x84>)
 8009980:	480c      	ldr	r0, [pc, #48]	@ (80099b4 <__multadd+0x88>)
 8009982:	f000 fd05 	bl	800a390 <__assert_func>
 8009986:	6922      	ldr	r2, [r4, #16]
 8009988:	f104 010c 	add.w	r1, r4, #12
 800998c:	3202      	adds	r2, #2
 800998e:	0092      	lsls	r2, r2, #2
 8009990:	300c      	adds	r0, #12
 8009992:	f7fe fafe 	bl	8007f92 <memcpy>
 8009996:	4621      	mov	r1, r4
 8009998:	4638      	mov	r0, r7
 800999a:	f7ff ffa5 	bl	80098e8 <_Bfree>
 800999e:	4644      	mov	r4, r8
 80099a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099a4:	3501      	adds	r5, #1
 80099a6:	615e      	str	r6, [r3, #20]
 80099a8:	6125      	str	r5, [r4, #16]
 80099aa:	4620      	mov	r0, r4
 80099ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b0:	0800ad7d 	.word	0x0800ad7d
 80099b4:	0800adff 	.word	0x0800adff

080099b8 <__s2b>:
 80099b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099bc:	4615      	mov	r5, r2
 80099be:	2209      	movs	r2, #9
 80099c0:	461f      	mov	r7, r3
 80099c2:	3308      	adds	r3, #8
 80099c4:	460c      	mov	r4, r1
 80099c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80099ca:	4606      	mov	r6, r0
 80099cc:	2201      	movs	r2, #1
 80099ce:	2100      	movs	r1, #0
 80099d0:	429a      	cmp	r2, r3
 80099d2:	db09      	blt.n	80099e8 <__s2b+0x30>
 80099d4:	4630      	mov	r0, r6
 80099d6:	f7ff ff47 	bl	8009868 <_Balloc>
 80099da:	b940      	cbnz	r0, 80099ee <__s2b+0x36>
 80099dc:	4602      	mov	r2, r0
 80099de:	21d3      	movs	r1, #211	@ 0xd3
 80099e0:	4b18      	ldr	r3, [pc, #96]	@ (8009a44 <__s2b+0x8c>)
 80099e2:	4819      	ldr	r0, [pc, #100]	@ (8009a48 <__s2b+0x90>)
 80099e4:	f000 fcd4 	bl	800a390 <__assert_func>
 80099e8:	0052      	lsls	r2, r2, #1
 80099ea:	3101      	adds	r1, #1
 80099ec:	e7f0      	b.n	80099d0 <__s2b+0x18>
 80099ee:	9b08      	ldr	r3, [sp, #32]
 80099f0:	2d09      	cmp	r5, #9
 80099f2:	6143      	str	r3, [r0, #20]
 80099f4:	f04f 0301 	mov.w	r3, #1
 80099f8:	6103      	str	r3, [r0, #16]
 80099fa:	dd16      	ble.n	8009a2a <__s2b+0x72>
 80099fc:	f104 0909 	add.w	r9, r4, #9
 8009a00:	46c8      	mov	r8, r9
 8009a02:	442c      	add	r4, r5
 8009a04:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a08:	4601      	mov	r1, r0
 8009a0a:	220a      	movs	r2, #10
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	3b30      	subs	r3, #48	@ 0x30
 8009a10:	f7ff ff8c 	bl	800992c <__multadd>
 8009a14:	45a0      	cmp	r8, r4
 8009a16:	d1f5      	bne.n	8009a04 <__s2b+0x4c>
 8009a18:	f1a5 0408 	sub.w	r4, r5, #8
 8009a1c:	444c      	add	r4, r9
 8009a1e:	1b2d      	subs	r5, r5, r4
 8009a20:	1963      	adds	r3, r4, r5
 8009a22:	42bb      	cmp	r3, r7
 8009a24:	db04      	blt.n	8009a30 <__s2b+0x78>
 8009a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a2a:	2509      	movs	r5, #9
 8009a2c:	340a      	adds	r4, #10
 8009a2e:	e7f6      	b.n	8009a1e <__s2b+0x66>
 8009a30:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a34:	4601      	mov	r1, r0
 8009a36:	220a      	movs	r2, #10
 8009a38:	4630      	mov	r0, r6
 8009a3a:	3b30      	subs	r3, #48	@ 0x30
 8009a3c:	f7ff ff76 	bl	800992c <__multadd>
 8009a40:	e7ee      	b.n	8009a20 <__s2b+0x68>
 8009a42:	bf00      	nop
 8009a44:	0800ad7d 	.word	0x0800ad7d
 8009a48:	0800adff 	.word	0x0800adff

08009a4c <__hi0bits>:
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a52:	bf3a      	itte	cc
 8009a54:	0403      	lslcc	r3, r0, #16
 8009a56:	2010      	movcc	r0, #16
 8009a58:	2000      	movcs	r0, #0
 8009a5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a5e:	bf3c      	itt	cc
 8009a60:	021b      	lslcc	r3, r3, #8
 8009a62:	3008      	addcc	r0, #8
 8009a64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a68:	bf3c      	itt	cc
 8009a6a:	011b      	lslcc	r3, r3, #4
 8009a6c:	3004      	addcc	r0, #4
 8009a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a72:	bf3c      	itt	cc
 8009a74:	009b      	lslcc	r3, r3, #2
 8009a76:	3002      	addcc	r0, #2
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	db05      	blt.n	8009a88 <__hi0bits+0x3c>
 8009a7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a80:	f100 0001 	add.w	r0, r0, #1
 8009a84:	bf08      	it	eq
 8009a86:	2020      	moveq	r0, #32
 8009a88:	4770      	bx	lr

08009a8a <__lo0bits>:
 8009a8a:	6803      	ldr	r3, [r0, #0]
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	f013 0007 	ands.w	r0, r3, #7
 8009a92:	d00b      	beq.n	8009aac <__lo0bits+0x22>
 8009a94:	07d9      	lsls	r1, r3, #31
 8009a96:	d421      	bmi.n	8009adc <__lo0bits+0x52>
 8009a98:	0798      	lsls	r0, r3, #30
 8009a9a:	bf49      	itett	mi
 8009a9c:	085b      	lsrmi	r3, r3, #1
 8009a9e:	089b      	lsrpl	r3, r3, #2
 8009aa0:	2001      	movmi	r0, #1
 8009aa2:	6013      	strmi	r3, [r2, #0]
 8009aa4:	bf5c      	itt	pl
 8009aa6:	2002      	movpl	r0, #2
 8009aa8:	6013      	strpl	r3, [r2, #0]
 8009aaa:	4770      	bx	lr
 8009aac:	b299      	uxth	r1, r3
 8009aae:	b909      	cbnz	r1, 8009ab4 <__lo0bits+0x2a>
 8009ab0:	2010      	movs	r0, #16
 8009ab2:	0c1b      	lsrs	r3, r3, #16
 8009ab4:	b2d9      	uxtb	r1, r3
 8009ab6:	b909      	cbnz	r1, 8009abc <__lo0bits+0x32>
 8009ab8:	3008      	adds	r0, #8
 8009aba:	0a1b      	lsrs	r3, r3, #8
 8009abc:	0719      	lsls	r1, r3, #28
 8009abe:	bf04      	itt	eq
 8009ac0:	091b      	lsreq	r3, r3, #4
 8009ac2:	3004      	addeq	r0, #4
 8009ac4:	0799      	lsls	r1, r3, #30
 8009ac6:	bf04      	itt	eq
 8009ac8:	089b      	lsreq	r3, r3, #2
 8009aca:	3002      	addeq	r0, #2
 8009acc:	07d9      	lsls	r1, r3, #31
 8009ace:	d403      	bmi.n	8009ad8 <__lo0bits+0x4e>
 8009ad0:	085b      	lsrs	r3, r3, #1
 8009ad2:	f100 0001 	add.w	r0, r0, #1
 8009ad6:	d003      	beq.n	8009ae0 <__lo0bits+0x56>
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	4770      	bx	lr
 8009adc:	2000      	movs	r0, #0
 8009ade:	4770      	bx	lr
 8009ae0:	2020      	movs	r0, #32
 8009ae2:	4770      	bx	lr

08009ae4 <__i2b>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	2101      	movs	r1, #1
 8009aea:	f7ff febd 	bl	8009868 <_Balloc>
 8009aee:	4602      	mov	r2, r0
 8009af0:	b928      	cbnz	r0, 8009afe <__i2b+0x1a>
 8009af2:	f240 1145 	movw	r1, #325	@ 0x145
 8009af6:	4b04      	ldr	r3, [pc, #16]	@ (8009b08 <__i2b+0x24>)
 8009af8:	4804      	ldr	r0, [pc, #16]	@ (8009b0c <__i2b+0x28>)
 8009afa:	f000 fc49 	bl	800a390 <__assert_func>
 8009afe:	2301      	movs	r3, #1
 8009b00:	6144      	str	r4, [r0, #20]
 8009b02:	6103      	str	r3, [r0, #16]
 8009b04:	bd10      	pop	{r4, pc}
 8009b06:	bf00      	nop
 8009b08:	0800ad7d 	.word	0x0800ad7d
 8009b0c:	0800adff 	.word	0x0800adff

08009b10 <__multiply>:
 8009b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	4614      	mov	r4, r2
 8009b16:	690a      	ldr	r2, [r1, #16]
 8009b18:	6923      	ldr	r3, [r4, #16]
 8009b1a:	460f      	mov	r7, r1
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	bfa2      	ittt	ge
 8009b20:	4623      	movge	r3, r4
 8009b22:	460c      	movge	r4, r1
 8009b24:	461f      	movge	r7, r3
 8009b26:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009b2a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009b2e:	68a3      	ldr	r3, [r4, #8]
 8009b30:	6861      	ldr	r1, [r4, #4]
 8009b32:	eb0a 0609 	add.w	r6, sl, r9
 8009b36:	42b3      	cmp	r3, r6
 8009b38:	b085      	sub	sp, #20
 8009b3a:	bfb8      	it	lt
 8009b3c:	3101      	addlt	r1, #1
 8009b3e:	f7ff fe93 	bl	8009868 <_Balloc>
 8009b42:	b930      	cbnz	r0, 8009b52 <__multiply+0x42>
 8009b44:	4602      	mov	r2, r0
 8009b46:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b4a:	4b43      	ldr	r3, [pc, #268]	@ (8009c58 <__multiply+0x148>)
 8009b4c:	4843      	ldr	r0, [pc, #268]	@ (8009c5c <__multiply+0x14c>)
 8009b4e:	f000 fc1f 	bl	800a390 <__assert_func>
 8009b52:	f100 0514 	add.w	r5, r0, #20
 8009b56:	462b      	mov	r3, r5
 8009b58:	2200      	movs	r2, #0
 8009b5a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b5e:	4543      	cmp	r3, r8
 8009b60:	d321      	bcc.n	8009ba6 <__multiply+0x96>
 8009b62:	f107 0114 	add.w	r1, r7, #20
 8009b66:	f104 0214 	add.w	r2, r4, #20
 8009b6a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009b6e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009b72:	9302      	str	r3, [sp, #8]
 8009b74:	1b13      	subs	r3, r2, r4
 8009b76:	3b15      	subs	r3, #21
 8009b78:	f023 0303 	bic.w	r3, r3, #3
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	f104 0715 	add.w	r7, r4, #21
 8009b82:	42ba      	cmp	r2, r7
 8009b84:	bf38      	it	cc
 8009b86:	2304      	movcc	r3, #4
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	9b02      	ldr	r3, [sp, #8]
 8009b8c:	9103      	str	r1, [sp, #12]
 8009b8e:	428b      	cmp	r3, r1
 8009b90:	d80c      	bhi.n	8009bac <__multiply+0x9c>
 8009b92:	2e00      	cmp	r6, #0
 8009b94:	dd03      	ble.n	8009b9e <__multiply+0x8e>
 8009b96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d05a      	beq.n	8009c54 <__multiply+0x144>
 8009b9e:	6106      	str	r6, [r0, #16]
 8009ba0:	b005      	add	sp, #20
 8009ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba6:	f843 2b04 	str.w	r2, [r3], #4
 8009baa:	e7d8      	b.n	8009b5e <__multiply+0x4e>
 8009bac:	f8b1 a000 	ldrh.w	sl, [r1]
 8009bb0:	f1ba 0f00 	cmp.w	sl, #0
 8009bb4:	d023      	beq.n	8009bfe <__multiply+0xee>
 8009bb6:	46a9      	mov	r9, r5
 8009bb8:	f04f 0c00 	mov.w	ip, #0
 8009bbc:	f104 0e14 	add.w	lr, r4, #20
 8009bc0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009bc4:	f8d9 3000 	ldr.w	r3, [r9]
 8009bc8:	fa1f fb87 	uxth.w	fp, r7
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	fb0a 330b 	mla	r3, sl, fp, r3
 8009bd2:	4463      	add	r3, ip
 8009bd4:	f8d9 c000 	ldr.w	ip, [r9]
 8009bd8:	0c3f      	lsrs	r7, r7, #16
 8009bda:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009bde:	fb0a c707 	mla	r7, sl, r7, ip
 8009be2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009bec:	4572      	cmp	r2, lr
 8009bee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009bf2:	f849 3b04 	str.w	r3, [r9], #4
 8009bf6:	d8e3      	bhi.n	8009bc0 <__multiply+0xb0>
 8009bf8:	9b01      	ldr	r3, [sp, #4]
 8009bfa:	f845 c003 	str.w	ip, [r5, r3]
 8009bfe:	9b03      	ldr	r3, [sp, #12]
 8009c00:	3104      	adds	r1, #4
 8009c02:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009c06:	f1b9 0f00 	cmp.w	r9, #0
 8009c0a:	d021      	beq.n	8009c50 <__multiply+0x140>
 8009c0c:	46ae      	mov	lr, r5
 8009c0e:	f04f 0a00 	mov.w	sl, #0
 8009c12:	682b      	ldr	r3, [r5, #0]
 8009c14:	f104 0c14 	add.w	ip, r4, #20
 8009c18:	f8bc b000 	ldrh.w	fp, [ip]
 8009c1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	fb09 770b 	mla	r7, r9, fp, r7
 8009c26:	4457      	add	r7, sl
 8009c28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c2c:	f84e 3b04 	str.w	r3, [lr], #4
 8009c30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c38:	f8be 3000 	ldrh.w	r3, [lr]
 8009c3c:	4562      	cmp	r2, ip
 8009c3e:	fb09 330a 	mla	r3, r9, sl, r3
 8009c42:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009c46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c4a:	d8e5      	bhi.n	8009c18 <__multiply+0x108>
 8009c4c:	9f01      	ldr	r7, [sp, #4]
 8009c4e:	51eb      	str	r3, [r5, r7]
 8009c50:	3504      	adds	r5, #4
 8009c52:	e79a      	b.n	8009b8a <__multiply+0x7a>
 8009c54:	3e01      	subs	r6, #1
 8009c56:	e79c      	b.n	8009b92 <__multiply+0x82>
 8009c58:	0800ad7d 	.word	0x0800ad7d
 8009c5c:	0800adff 	.word	0x0800adff

08009c60 <__pow5mult>:
 8009c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c64:	4615      	mov	r5, r2
 8009c66:	f012 0203 	ands.w	r2, r2, #3
 8009c6a:	4607      	mov	r7, r0
 8009c6c:	460e      	mov	r6, r1
 8009c6e:	d007      	beq.n	8009c80 <__pow5mult+0x20>
 8009c70:	4c25      	ldr	r4, [pc, #148]	@ (8009d08 <__pow5mult+0xa8>)
 8009c72:	3a01      	subs	r2, #1
 8009c74:	2300      	movs	r3, #0
 8009c76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c7a:	f7ff fe57 	bl	800992c <__multadd>
 8009c7e:	4606      	mov	r6, r0
 8009c80:	10ad      	asrs	r5, r5, #2
 8009c82:	d03d      	beq.n	8009d00 <__pow5mult+0xa0>
 8009c84:	69fc      	ldr	r4, [r7, #28]
 8009c86:	b97c      	cbnz	r4, 8009ca8 <__pow5mult+0x48>
 8009c88:	2010      	movs	r0, #16
 8009c8a:	f7ff fc7d 	bl	8009588 <malloc>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	61f8      	str	r0, [r7, #28]
 8009c92:	b928      	cbnz	r0, 8009ca0 <__pow5mult+0x40>
 8009c94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c98:	4b1c      	ldr	r3, [pc, #112]	@ (8009d0c <__pow5mult+0xac>)
 8009c9a:	481d      	ldr	r0, [pc, #116]	@ (8009d10 <__pow5mult+0xb0>)
 8009c9c:	f000 fb78 	bl	800a390 <__assert_func>
 8009ca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ca4:	6004      	str	r4, [r0, #0]
 8009ca6:	60c4      	str	r4, [r0, #12]
 8009ca8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009cac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cb0:	b94c      	cbnz	r4, 8009cc6 <__pow5mult+0x66>
 8009cb2:	f240 2171 	movw	r1, #625	@ 0x271
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	f7ff ff14 	bl	8009ae4 <__i2b>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cc4:	6003      	str	r3, [r0, #0]
 8009cc6:	f04f 0900 	mov.w	r9, #0
 8009cca:	07eb      	lsls	r3, r5, #31
 8009ccc:	d50a      	bpl.n	8009ce4 <__pow5mult+0x84>
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4622      	mov	r2, r4
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	f7ff ff1c 	bl	8009b10 <__multiply>
 8009cd8:	4680      	mov	r8, r0
 8009cda:	4631      	mov	r1, r6
 8009cdc:	4638      	mov	r0, r7
 8009cde:	f7ff fe03 	bl	80098e8 <_Bfree>
 8009ce2:	4646      	mov	r6, r8
 8009ce4:	106d      	asrs	r5, r5, #1
 8009ce6:	d00b      	beq.n	8009d00 <__pow5mult+0xa0>
 8009ce8:	6820      	ldr	r0, [r4, #0]
 8009cea:	b938      	cbnz	r0, 8009cfc <__pow5mult+0x9c>
 8009cec:	4622      	mov	r2, r4
 8009cee:	4621      	mov	r1, r4
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	f7ff ff0d 	bl	8009b10 <__multiply>
 8009cf6:	6020      	str	r0, [r4, #0]
 8009cf8:	f8c0 9000 	str.w	r9, [r0]
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	e7e4      	b.n	8009cca <__pow5mult+0x6a>
 8009d00:	4630      	mov	r0, r6
 8009d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d06:	bf00      	nop
 8009d08:	0800ae58 	.word	0x0800ae58
 8009d0c:	0800ad0e 	.word	0x0800ad0e
 8009d10:	0800adff 	.word	0x0800adff

08009d14 <__lshift>:
 8009d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d18:	460c      	mov	r4, r1
 8009d1a:	4607      	mov	r7, r0
 8009d1c:	4691      	mov	r9, r2
 8009d1e:	6923      	ldr	r3, [r4, #16]
 8009d20:	6849      	ldr	r1, [r1, #4]
 8009d22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d26:	68a3      	ldr	r3, [r4, #8]
 8009d28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d2c:	f108 0601 	add.w	r6, r8, #1
 8009d30:	42b3      	cmp	r3, r6
 8009d32:	db0b      	blt.n	8009d4c <__lshift+0x38>
 8009d34:	4638      	mov	r0, r7
 8009d36:	f7ff fd97 	bl	8009868 <_Balloc>
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	b948      	cbnz	r0, 8009d52 <__lshift+0x3e>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d44:	4b27      	ldr	r3, [pc, #156]	@ (8009de4 <__lshift+0xd0>)
 8009d46:	4828      	ldr	r0, [pc, #160]	@ (8009de8 <__lshift+0xd4>)
 8009d48:	f000 fb22 	bl	800a390 <__assert_func>
 8009d4c:	3101      	adds	r1, #1
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	e7ee      	b.n	8009d30 <__lshift+0x1c>
 8009d52:	2300      	movs	r3, #0
 8009d54:	f100 0114 	add.w	r1, r0, #20
 8009d58:	f100 0210 	add.w	r2, r0, #16
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	4553      	cmp	r3, sl
 8009d60:	db33      	blt.n	8009dca <__lshift+0xb6>
 8009d62:	6920      	ldr	r0, [r4, #16]
 8009d64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d68:	f104 0314 	add.w	r3, r4, #20
 8009d6c:	f019 091f 	ands.w	r9, r9, #31
 8009d70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d78:	d02b      	beq.n	8009dd2 <__lshift+0xbe>
 8009d7a:	468a      	mov	sl, r1
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f1c9 0e20 	rsb	lr, r9, #32
 8009d82:	6818      	ldr	r0, [r3, #0]
 8009d84:	fa00 f009 	lsl.w	r0, r0, r9
 8009d88:	4310      	orrs	r0, r2
 8009d8a:	f84a 0b04 	str.w	r0, [sl], #4
 8009d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d92:	459c      	cmp	ip, r3
 8009d94:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d98:	d8f3      	bhi.n	8009d82 <__lshift+0x6e>
 8009d9a:	ebac 0304 	sub.w	r3, ip, r4
 8009d9e:	3b15      	subs	r3, #21
 8009da0:	f023 0303 	bic.w	r3, r3, #3
 8009da4:	3304      	adds	r3, #4
 8009da6:	f104 0015 	add.w	r0, r4, #21
 8009daa:	4584      	cmp	ip, r0
 8009dac:	bf38      	it	cc
 8009dae:	2304      	movcc	r3, #4
 8009db0:	50ca      	str	r2, [r1, r3]
 8009db2:	b10a      	cbz	r2, 8009db8 <__lshift+0xa4>
 8009db4:	f108 0602 	add.w	r6, r8, #2
 8009db8:	3e01      	subs	r6, #1
 8009dba:	4638      	mov	r0, r7
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	612e      	str	r6, [r5, #16]
 8009dc0:	f7ff fd92 	bl	80098e8 <_Bfree>
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dca:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dce:	3301      	adds	r3, #1
 8009dd0:	e7c5      	b.n	8009d5e <__lshift+0x4a>
 8009dd2:	3904      	subs	r1, #4
 8009dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd8:	459c      	cmp	ip, r3
 8009dda:	f841 2f04 	str.w	r2, [r1, #4]!
 8009dde:	d8f9      	bhi.n	8009dd4 <__lshift+0xc0>
 8009de0:	e7ea      	b.n	8009db8 <__lshift+0xa4>
 8009de2:	bf00      	nop
 8009de4:	0800ad7d 	.word	0x0800ad7d
 8009de8:	0800adff 	.word	0x0800adff

08009dec <__mcmp>:
 8009dec:	4603      	mov	r3, r0
 8009dee:	690a      	ldr	r2, [r1, #16]
 8009df0:	6900      	ldr	r0, [r0, #16]
 8009df2:	b530      	push	{r4, r5, lr}
 8009df4:	1a80      	subs	r0, r0, r2
 8009df6:	d10e      	bne.n	8009e16 <__mcmp+0x2a>
 8009df8:	3314      	adds	r3, #20
 8009dfa:	3114      	adds	r1, #20
 8009dfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e0c:	4295      	cmp	r5, r2
 8009e0e:	d003      	beq.n	8009e18 <__mcmp+0x2c>
 8009e10:	d205      	bcs.n	8009e1e <__mcmp+0x32>
 8009e12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e16:	bd30      	pop	{r4, r5, pc}
 8009e18:	42a3      	cmp	r3, r4
 8009e1a:	d3f3      	bcc.n	8009e04 <__mcmp+0x18>
 8009e1c:	e7fb      	b.n	8009e16 <__mcmp+0x2a>
 8009e1e:	2001      	movs	r0, #1
 8009e20:	e7f9      	b.n	8009e16 <__mcmp+0x2a>
	...

08009e24 <__mdiff>:
 8009e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e28:	4689      	mov	r9, r1
 8009e2a:	4606      	mov	r6, r0
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	4648      	mov	r0, r9
 8009e30:	4614      	mov	r4, r2
 8009e32:	f7ff ffdb 	bl	8009dec <__mcmp>
 8009e36:	1e05      	subs	r5, r0, #0
 8009e38:	d112      	bne.n	8009e60 <__mdiff+0x3c>
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f7ff fd13 	bl	8009868 <_Balloc>
 8009e42:	4602      	mov	r2, r0
 8009e44:	b928      	cbnz	r0, 8009e52 <__mdiff+0x2e>
 8009e46:	f240 2137 	movw	r1, #567	@ 0x237
 8009e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8009f44 <__mdiff+0x120>)
 8009e4c:	483e      	ldr	r0, [pc, #248]	@ (8009f48 <__mdiff+0x124>)
 8009e4e:	f000 fa9f 	bl	800a390 <__assert_func>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e58:	4610      	mov	r0, r2
 8009e5a:	b003      	add	sp, #12
 8009e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e60:	bfbc      	itt	lt
 8009e62:	464b      	movlt	r3, r9
 8009e64:	46a1      	movlt	r9, r4
 8009e66:	4630      	mov	r0, r6
 8009e68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e6c:	bfba      	itte	lt
 8009e6e:	461c      	movlt	r4, r3
 8009e70:	2501      	movlt	r5, #1
 8009e72:	2500      	movge	r5, #0
 8009e74:	f7ff fcf8 	bl	8009868 <_Balloc>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	b918      	cbnz	r0, 8009e84 <__mdiff+0x60>
 8009e7c:	f240 2145 	movw	r1, #581	@ 0x245
 8009e80:	4b30      	ldr	r3, [pc, #192]	@ (8009f44 <__mdiff+0x120>)
 8009e82:	e7e3      	b.n	8009e4c <__mdiff+0x28>
 8009e84:	f100 0b14 	add.w	fp, r0, #20
 8009e88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e8c:	f109 0310 	add.w	r3, r9, #16
 8009e90:	60c5      	str	r5, [r0, #12]
 8009e92:	f04f 0c00 	mov.w	ip, #0
 8009e96:	f109 0514 	add.w	r5, r9, #20
 8009e9a:	46d9      	mov	r9, fp
 8009e9c:	6926      	ldr	r6, [r4, #16]
 8009e9e:	f104 0e14 	add.w	lr, r4, #20
 8009ea2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ea6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009eaa:	9301      	str	r3, [sp, #4]
 8009eac:	9b01      	ldr	r3, [sp, #4]
 8009eae:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009eb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009eb6:	b281      	uxth	r1, r0
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	fa1f f38a 	uxth.w	r3, sl
 8009ebe:	1a5b      	subs	r3, r3, r1
 8009ec0:	0c00      	lsrs	r0, r0, #16
 8009ec2:	4463      	add	r3, ip
 8009ec4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ec8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ed2:	4576      	cmp	r6, lr
 8009ed4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ed8:	f849 3b04 	str.w	r3, [r9], #4
 8009edc:	d8e6      	bhi.n	8009eac <__mdiff+0x88>
 8009ede:	1b33      	subs	r3, r6, r4
 8009ee0:	3b15      	subs	r3, #21
 8009ee2:	f023 0303 	bic.w	r3, r3, #3
 8009ee6:	3415      	adds	r4, #21
 8009ee8:	3304      	adds	r3, #4
 8009eea:	42a6      	cmp	r6, r4
 8009eec:	bf38      	it	cc
 8009eee:	2304      	movcc	r3, #4
 8009ef0:	441d      	add	r5, r3
 8009ef2:	445b      	add	r3, fp
 8009ef4:	461e      	mov	r6, r3
 8009ef6:	462c      	mov	r4, r5
 8009ef8:	4544      	cmp	r4, r8
 8009efa:	d30e      	bcc.n	8009f1a <__mdiff+0xf6>
 8009efc:	f108 0103 	add.w	r1, r8, #3
 8009f00:	1b49      	subs	r1, r1, r5
 8009f02:	f021 0103 	bic.w	r1, r1, #3
 8009f06:	3d03      	subs	r5, #3
 8009f08:	45a8      	cmp	r8, r5
 8009f0a:	bf38      	it	cc
 8009f0c:	2100      	movcc	r1, #0
 8009f0e:	440b      	add	r3, r1
 8009f10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f14:	b199      	cbz	r1, 8009f3e <__mdiff+0x11a>
 8009f16:	6117      	str	r7, [r2, #16]
 8009f18:	e79e      	b.n	8009e58 <__mdiff+0x34>
 8009f1a:	46e6      	mov	lr, ip
 8009f1c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009f20:	fa1f fc81 	uxth.w	ip, r1
 8009f24:	44f4      	add	ip, lr
 8009f26:	0c08      	lsrs	r0, r1, #16
 8009f28:	4471      	add	r1, lr
 8009f2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009f2e:	b289      	uxth	r1, r1
 8009f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f38:	f846 1b04 	str.w	r1, [r6], #4
 8009f3c:	e7dc      	b.n	8009ef8 <__mdiff+0xd4>
 8009f3e:	3f01      	subs	r7, #1
 8009f40:	e7e6      	b.n	8009f10 <__mdiff+0xec>
 8009f42:	bf00      	nop
 8009f44:	0800ad7d 	.word	0x0800ad7d
 8009f48:	0800adff 	.word	0x0800adff

08009f4c <__ulp>:
 8009f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009f88 <__ulp+0x3c>)
 8009f4e:	400b      	ands	r3, r1
 8009f50:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dc08      	bgt.n	8009f6a <__ulp+0x1e>
 8009f58:	425b      	negs	r3, r3
 8009f5a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009f5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f62:	da04      	bge.n	8009f6e <__ulp+0x22>
 8009f64:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f68:	4113      	asrs	r3, r2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	e008      	b.n	8009f80 <__ulp+0x34>
 8009f6e:	f1a2 0314 	sub.w	r3, r2, #20
 8009f72:	2b1e      	cmp	r3, #30
 8009f74:	bfd6      	itet	le
 8009f76:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009f7a:	2201      	movgt	r2, #1
 8009f7c:	40da      	lsrle	r2, r3
 8009f7e:	2300      	movs	r3, #0
 8009f80:	4619      	mov	r1, r3
 8009f82:	4610      	mov	r0, r2
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	7ff00000 	.word	0x7ff00000

08009f8c <__b2d>:
 8009f8c:	6902      	ldr	r2, [r0, #16]
 8009f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f90:	f100 0614 	add.w	r6, r0, #20
 8009f94:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009f98:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009f9c:	4f1e      	ldr	r7, [pc, #120]	@ (800a018 <__b2d+0x8c>)
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f7ff fd54 	bl	8009a4c <__hi0bits>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	f1c0 0020 	rsb	r0, r0, #32
 8009faa:	2b0a      	cmp	r3, #10
 8009fac:	f1a2 0504 	sub.w	r5, r2, #4
 8009fb0:	6008      	str	r0, [r1, #0]
 8009fb2:	dc12      	bgt.n	8009fda <__b2d+0x4e>
 8009fb4:	42ae      	cmp	r6, r5
 8009fb6:	bf2c      	ite	cs
 8009fb8:	2200      	movcs	r2, #0
 8009fba:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009fbe:	f1c3 0c0b 	rsb	ip, r3, #11
 8009fc2:	3315      	adds	r3, #21
 8009fc4:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009fc8:	fa04 f303 	lsl.w	r3, r4, r3
 8009fcc:	fa22 f20c 	lsr.w	r2, r2, ip
 8009fd0:	ea4e 0107 	orr.w	r1, lr, r7
 8009fd4:	431a      	orrs	r2, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fda:	42ae      	cmp	r6, r5
 8009fdc:	bf36      	itet	cc
 8009fde:	f1a2 0508 	subcc.w	r5, r2, #8
 8009fe2:	2200      	movcs	r2, #0
 8009fe4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009fe8:	3b0b      	subs	r3, #11
 8009fea:	d012      	beq.n	800a012 <__b2d+0x86>
 8009fec:	f1c3 0720 	rsb	r7, r3, #32
 8009ff0:	fa22 f107 	lsr.w	r1, r2, r7
 8009ff4:	409c      	lsls	r4, r3
 8009ff6:	430c      	orrs	r4, r1
 8009ff8:	42b5      	cmp	r5, r6
 8009ffa:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009ffe:	bf94      	ite	ls
 800a000:	2400      	movls	r4, #0
 800a002:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a006:	409a      	lsls	r2, r3
 800a008:	40fc      	lsrs	r4, r7
 800a00a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a00e:	4322      	orrs	r2, r4
 800a010:	e7e1      	b.n	8009fd6 <__b2d+0x4a>
 800a012:	ea44 0107 	orr.w	r1, r4, r7
 800a016:	e7de      	b.n	8009fd6 <__b2d+0x4a>
 800a018:	3ff00000 	.word	0x3ff00000

0800a01c <__d2b>:
 800a01c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a020:	2101      	movs	r1, #1
 800a022:	4690      	mov	r8, r2
 800a024:	4699      	mov	r9, r3
 800a026:	9e08      	ldr	r6, [sp, #32]
 800a028:	f7ff fc1e 	bl	8009868 <_Balloc>
 800a02c:	4604      	mov	r4, r0
 800a02e:	b930      	cbnz	r0, 800a03e <__d2b+0x22>
 800a030:	4602      	mov	r2, r0
 800a032:	f240 310f 	movw	r1, #783	@ 0x30f
 800a036:	4b23      	ldr	r3, [pc, #140]	@ (800a0c4 <__d2b+0xa8>)
 800a038:	4823      	ldr	r0, [pc, #140]	@ (800a0c8 <__d2b+0xac>)
 800a03a:	f000 f9a9 	bl	800a390 <__assert_func>
 800a03e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a042:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a046:	b10d      	cbz	r5, 800a04c <__d2b+0x30>
 800a048:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a04c:	9301      	str	r3, [sp, #4]
 800a04e:	f1b8 0300 	subs.w	r3, r8, #0
 800a052:	d024      	beq.n	800a09e <__d2b+0x82>
 800a054:	4668      	mov	r0, sp
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	f7ff fd17 	bl	8009a8a <__lo0bits>
 800a05c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a060:	b1d8      	cbz	r0, 800a09a <__d2b+0x7e>
 800a062:	f1c0 0320 	rsb	r3, r0, #32
 800a066:	fa02 f303 	lsl.w	r3, r2, r3
 800a06a:	430b      	orrs	r3, r1
 800a06c:	40c2      	lsrs	r2, r0
 800a06e:	6163      	str	r3, [r4, #20]
 800a070:	9201      	str	r2, [sp, #4]
 800a072:	9b01      	ldr	r3, [sp, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	bf0c      	ite	eq
 800a078:	2201      	moveq	r2, #1
 800a07a:	2202      	movne	r2, #2
 800a07c:	61a3      	str	r3, [r4, #24]
 800a07e:	6122      	str	r2, [r4, #16]
 800a080:	b1ad      	cbz	r5, 800a0ae <__d2b+0x92>
 800a082:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a086:	4405      	add	r5, r0
 800a088:	6035      	str	r5, [r6, #0]
 800a08a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a090:	6018      	str	r0, [r3, #0]
 800a092:	4620      	mov	r0, r4
 800a094:	b002      	add	sp, #8
 800a096:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a09a:	6161      	str	r1, [r4, #20]
 800a09c:	e7e9      	b.n	800a072 <__d2b+0x56>
 800a09e:	a801      	add	r0, sp, #4
 800a0a0:	f7ff fcf3 	bl	8009a8a <__lo0bits>
 800a0a4:	9b01      	ldr	r3, [sp, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	6163      	str	r3, [r4, #20]
 800a0aa:	3020      	adds	r0, #32
 800a0ac:	e7e7      	b.n	800a07e <__d2b+0x62>
 800a0ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a0b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0b6:	6030      	str	r0, [r6, #0]
 800a0b8:	6918      	ldr	r0, [r3, #16]
 800a0ba:	f7ff fcc7 	bl	8009a4c <__hi0bits>
 800a0be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0c2:	e7e4      	b.n	800a08e <__d2b+0x72>
 800a0c4:	0800ad7d 	.word	0x0800ad7d
 800a0c8:	0800adff 	.word	0x0800adff

0800a0cc <__ratio>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	e9cd 1000 	strd	r1, r0, [sp]
 800a0d6:	a902      	add	r1, sp, #8
 800a0d8:	f7ff ff58 	bl	8009f8c <__b2d>
 800a0dc:	468b      	mov	fp, r1
 800a0de:	4606      	mov	r6, r0
 800a0e0:	460f      	mov	r7, r1
 800a0e2:	9800      	ldr	r0, [sp, #0]
 800a0e4:	a903      	add	r1, sp, #12
 800a0e6:	f7ff ff51 	bl	8009f8c <__b2d>
 800a0ea:	460d      	mov	r5, r1
 800a0ec:	9b01      	ldr	r3, [sp, #4]
 800a0ee:	4689      	mov	r9, r1
 800a0f0:	6919      	ldr	r1, [r3, #16]
 800a0f2:	9b00      	ldr	r3, [sp, #0]
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	1ac9      	subs	r1, r1, r3
 800a0fc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a100:	1a9b      	subs	r3, r3, r2
 800a102:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a106:	2b00      	cmp	r3, #0
 800a108:	bfcd      	iteet	gt
 800a10a:	463a      	movgt	r2, r7
 800a10c:	462a      	movle	r2, r5
 800a10e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a112:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a116:	bfd8      	it	le
 800a118:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a11c:	464b      	mov	r3, r9
 800a11e:	4622      	mov	r2, r4
 800a120:	4659      	mov	r1, fp
 800a122:	f7f6 fb03 	bl	800072c <__aeabi_ddiv>
 800a126:	b005      	add	sp, #20
 800a128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a12c <__copybits>:
 800a12c:	3901      	subs	r1, #1
 800a12e:	b570      	push	{r4, r5, r6, lr}
 800a130:	1149      	asrs	r1, r1, #5
 800a132:	6914      	ldr	r4, [r2, #16]
 800a134:	3101      	adds	r1, #1
 800a136:	f102 0314 	add.w	r3, r2, #20
 800a13a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a13e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a142:	1f05      	subs	r5, r0, #4
 800a144:	42a3      	cmp	r3, r4
 800a146:	d30c      	bcc.n	800a162 <__copybits+0x36>
 800a148:	1aa3      	subs	r3, r4, r2
 800a14a:	3b11      	subs	r3, #17
 800a14c:	f023 0303 	bic.w	r3, r3, #3
 800a150:	3211      	adds	r2, #17
 800a152:	42a2      	cmp	r2, r4
 800a154:	bf88      	it	hi
 800a156:	2300      	movhi	r3, #0
 800a158:	4418      	add	r0, r3
 800a15a:	2300      	movs	r3, #0
 800a15c:	4288      	cmp	r0, r1
 800a15e:	d305      	bcc.n	800a16c <__copybits+0x40>
 800a160:	bd70      	pop	{r4, r5, r6, pc}
 800a162:	f853 6b04 	ldr.w	r6, [r3], #4
 800a166:	f845 6f04 	str.w	r6, [r5, #4]!
 800a16a:	e7eb      	b.n	800a144 <__copybits+0x18>
 800a16c:	f840 3b04 	str.w	r3, [r0], #4
 800a170:	e7f4      	b.n	800a15c <__copybits+0x30>

0800a172 <__any_on>:
 800a172:	f100 0214 	add.w	r2, r0, #20
 800a176:	6900      	ldr	r0, [r0, #16]
 800a178:	114b      	asrs	r3, r1, #5
 800a17a:	4298      	cmp	r0, r3
 800a17c:	b510      	push	{r4, lr}
 800a17e:	db11      	blt.n	800a1a4 <__any_on+0x32>
 800a180:	dd0a      	ble.n	800a198 <__any_on+0x26>
 800a182:	f011 011f 	ands.w	r1, r1, #31
 800a186:	d007      	beq.n	800a198 <__any_on+0x26>
 800a188:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a18c:	fa24 f001 	lsr.w	r0, r4, r1
 800a190:	fa00 f101 	lsl.w	r1, r0, r1
 800a194:	428c      	cmp	r4, r1
 800a196:	d10b      	bne.n	800a1b0 <__any_on+0x3e>
 800a198:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d803      	bhi.n	800a1a8 <__any_on+0x36>
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	bd10      	pop	{r4, pc}
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	e7f7      	b.n	800a198 <__any_on+0x26>
 800a1a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	d0f5      	beq.n	800a19c <__any_on+0x2a>
 800a1b0:	2001      	movs	r0, #1
 800a1b2:	e7f6      	b.n	800a1a2 <__any_on+0x30>

0800a1b4 <__sread>:
 800a1b4:	b510      	push	{r4, lr}
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1bc:	f000 f8b4 	bl	800a328 <_read_r>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	bfab      	itete	ge
 800a1c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a1c6:	89a3      	ldrhlt	r3, [r4, #12]
 800a1c8:	181b      	addge	r3, r3, r0
 800a1ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a1ce:	bfac      	ite	ge
 800a1d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a1d2:	81a3      	strhlt	r3, [r4, #12]
 800a1d4:	bd10      	pop	{r4, pc}

0800a1d6 <__swrite>:
 800a1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1da:	461f      	mov	r7, r3
 800a1dc:	898b      	ldrh	r3, [r1, #12]
 800a1de:	4605      	mov	r5, r0
 800a1e0:	05db      	lsls	r3, r3, #23
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	4616      	mov	r6, r2
 800a1e6:	d505      	bpl.n	800a1f4 <__swrite+0x1e>
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1f0:	f000 f888 	bl	800a304 <_lseek_r>
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	4632      	mov	r2, r6
 800a1f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a1fc:	81a3      	strh	r3, [r4, #12]
 800a1fe:	4628      	mov	r0, r5
 800a200:	463b      	mov	r3, r7
 800a202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a20a:	f000 b8af 	b.w	800a36c <_write_r>

0800a20e <__sseek>:
 800a20e:	b510      	push	{r4, lr}
 800a210:	460c      	mov	r4, r1
 800a212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a216:	f000 f875 	bl	800a304 <_lseek_r>
 800a21a:	1c43      	adds	r3, r0, #1
 800a21c:	89a3      	ldrh	r3, [r4, #12]
 800a21e:	bf15      	itete	ne
 800a220:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a222:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a226:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a22a:	81a3      	strheq	r3, [r4, #12]
 800a22c:	bf18      	it	ne
 800a22e:	81a3      	strhne	r3, [r4, #12]
 800a230:	bd10      	pop	{r4, pc}

0800a232 <__sclose>:
 800a232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a236:	f000 b855 	b.w	800a2e4 <_close_r>

0800a23a <_realloc_r>:
 800a23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a23e:	4680      	mov	r8, r0
 800a240:	4615      	mov	r5, r2
 800a242:	460c      	mov	r4, r1
 800a244:	b921      	cbnz	r1, 800a250 <_realloc_r+0x16>
 800a246:	4611      	mov	r1, r2
 800a248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a24c:	f7ff b9c6 	b.w	80095dc <_malloc_r>
 800a250:	b92a      	cbnz	r2, 800a25e <_realloc_r+0x24>
 800a252:	f000 f8cf 	bl	800a3f4 <_free_r>
 800a256:	2400      	movs	r4, #0
 800a258:	4620      	mov	r0, r4
 800a25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25e:	f000 f911 	bl	800a484 <_malloc_usable_size_r>
 800a262:	4285      	cmp	r5, r0
 800a264:	4606      	mov	r6, r0
 800a266:	d802      	bhi.n	800a26e <_realloc_r+0x34>
 800a268:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a26c:	d8f4      	bhi.n	800a258 <_realloc_r+0x1e>
 800a26e:	4629      	mov	r1, r5
 800a270:	4640      	mov	r0, r8
 800a272:	f7ff f9b3 	bl	80095dc <_malloc_r>
 800a276:	4607      	mov	r7, r0
 800a278:	2800      	cmp	r0, #0
 800a27a:	d0ec      	beq.n	800a256 <_realloc_r+0x1c>
 800a27c:	42b5      	cmp	r5, r6
 800a27e:	462a      	mov	r2, r5
 800a280:	4621      	mov	r1, r4
 800a282:	bf28      	it	cs
 800a284:	4632      	movcs	r2, r6
 800a286:	f7fd fe84 	bl	8007f92 <memcpy>
 800a28a:	4621      	mov	r1, r4
 800a28c:	4640      	mov	r0, r8
 800a28e:	f000 f8b1 	bl	800a3f4 <_free_r>
 800a292:	463c      	mov	r4, r7
 800a294:	e7e0      	b.n	800a258 <_realloc_r+0x1e>

0800a296 <__ascii_wctomb>:
 800a296:	4603      	mov	r3, r0
 800a298:	4608      	mov	r0, r1
 800a29a:	b141      	cbz	r1, 800a2ae <__ascii_wctomb+0x18>
 800a29c:	2aff      	cmp	r2, #255	@ 0xff
 800a29e:	d904      	bls.n	800a2aa <__ascii_wctomb+0x14>
 800a2a0:	228a      	movs	r2, #138	@ 0x8a
 800a2a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2a6:	601a      	str	r2, [r3, #0]
 800a2a8:	4770      	bx	lr
 800a2aa:	2001      	movs	r0, #1
 800a2ac:	700a      	strb	r2, [r1, #0]
 800a2ae:	4770      	bx	lr

0800a2b0 <memmove>:
 800a2b0:	4288      	cmp	r0, r1
 800a2b2:	b510      	push	{r4, lr}
 800a2b4:	eb01 0402 	add.w	r4, r1, r2
 800a2b8:	d902      	bls.n	800a2c0 <memmove+0x10>
 800a2ba:	4284      	cmp	r4, r0
 800a2bc:	4623      	mov	r3, r4
 800a2be:	d807      	bhi.n	800a2d0 <memmove+0x20>
 800a2c0:	1e43      	subs	r3, r0, #1
 800a2c2:	42a1      	cmp	r1, r4
 800a2c4:	d008      	beq.n	800a2d8 <memmove+0x28>
 800a2c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2ce:	e7f8      	b.n	800a2c2 <memmove+0x12>
 800a2d0:	4601      	mov	r1, r0
 800a2d2:	4402      	add	r2, r0
 800a2d4:	428a      	cmp	r2, r1
 800a2d6:	d100      	bne.n	800a2da <memmove+0x2a>
 800a2d8:	bd10      	pop	{r4, pc}
 800a2da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2e2:	e7f7      	b.n	800a2d4 <memmove+0x24>

0800a2e4 <_close_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	4d05      	ldr	r5, [pc, #20]	@ (800a300 <_close_r+0x1c>)
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	602b      	str	r3, [r5, #0]
 800a2f0:	f7f7 fb09 	bl	8001906 <_close>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	d102      	bne.n	800a2fe <_close_r+0x1a>
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	b103      	cbz	r3, 800a2fe <_close_r+0x1a>
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	200004f4 	.word	0x200004f4

0800a304 <_lseek_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4604      	mov	r4, r0
 800a308:	4608      	mov	r0, r1
 800a30a:	4611      	mov	r1, r2
 800a30c:	2200      	movs	r2, #0
 800a30e:	4d05      	ldr	r5, [pc, #20]	@ (800a324 <_lseek_r+0x20>)
 800a310:	602a      	str	r2, [r5, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	f7f7 fb1b 	bl	800194e <_lseek>
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	d102      	bne.n	800a322 <_lseek_r+0x1e>
 800a31c:	682b      	ldr	r3, [r5, #0]
 800a31e:	b103      	cbz	r3, 800a322 <_lseek_r+0x1e>
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	200004f4 	.word	0x200004f4

0800a328 <_read_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4604      	mov	r4, r0
 800a32c:	4608      	mov	r0, r1
 800a32e:	4611      	mov	r1, r2
 800a330:	2200      	movs	r2, #0
 800a332:	4d05      	ldr	r5, [pc, #20]	@ (800a348 <_read_r+0x20>)
 800a334:	602a      	str	r2, [r5, #0]
 800a336:	461a      	mov	r2, r3
 800a338:	f7f7 faac 	bl	8001894 <_read>
 800a33c:	1c43      	adds	r3, r0, #1
 800a33e:	d102      	bne.n	800a346 <_read_r+0x1e>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	b103      	cbz	r3, 800a346 <_read_r+0x1e>
 800a344:	6023      	str	r3, [r4, #0]
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	200004f4 	.word	0x200004f4

0800a34c <_sbrk_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	2300      	movs	r3, #0
 800a350:	4d05      	ldr	r5, [pc, #20]	@ (800a368 <_sbrk_r+0x1c>)
 800a352:	4604      	mov	r4, r0
 800a354:	4608      	mov	r0, r1
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	f7f7 fb06 	bl	8001968 <_sbrk>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d102      	bne.n	800a366 <_sbrk_r+0x1a>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	b103      	cbz	r3, 800a366 <_sbrk_r+0x1a>
 800a364:	6023      	str	r3, [r4, #0]
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	200004f4 	.word	0x200004f4

0800a36c <_write_r>:
 800a36c:	b538      	push	{r3, r4, r5, lr}
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	4611      	mov	r1, r2
 800a374:	2200      	movs	r2, #0
 800a376:	4d05      	ldr	r5, [pc, #20]	@ (800a38c <_write_r+0x20>)
 800a378:	602a      	str	r2, [r5, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	f7f7 faa7 	bl	80018ce <_write>
 800a380:	1c43      	adds	r3, r0, #1
 800a382:	d102      	bne.n	800a38a <_write_r+0x1e>
 800a384:	682b      	ldr	r3, [r5, #0]
 800a386:	b103      	cbz	r3, 800a38a <_write_r+0x1e>
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	200004f4 	.word	0x200004f4

0800a390 <__assert_func>:
 800a390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a392:	4614      	mov	r4, r2
 800a394:	461a      	mov	r2, r3
 800a396:	4b09      	ldr	r3, [pc, #36]	@ (800a3bc <__assert_func+0x2c>)
 800a398:	4605      	mov	r5, r0
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68d8      	ldr	r0, [r3, #12]
 800a39e:	b954      	cbnz	r4, 800a3b6 <__assert_func+0x26>
 800a3a0:	4b07      	ldr	r3, [pc, #28]	@ (800a3c0 <__assert_func+0x30>)
 800a3a2:	461c      	mov	r4, r3
 800a3a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3a8:	9100      	str	r1, [sp, #0]
 800a3aa:	462b      	mov	r3, r5
 800a3ac:	4905      	ldr	r1, [pc, #20]	@ (800a3c4 <__assert_func+0x34>)
 800a3ae:	f000 f871 	bl	800a494 <fiprintf>
 800a3b2:	f000 f881 	bl	800a4b8 <abort>
 800a3b6:	4b04      	ldr	r3, [pc, #16]	@ (800a3c8 <__assert_func+0x38>)
 800a3b8:	e7f4      	b.n	800a3a4 <__assert_func+0x14>
 800a3ba:	bf00      	nop
 800a3bc:	20000184 	.word	0x20000184
 800a3c0:	0800af93 	.word	0x0800af93
 800a3c4:	0800af65 	.word	0x0800af65
 800a3c8:	0800af58 	.word	0x0800af58

0800a3cc <_calloc_r>:
 800a3cc:	b570      	push	{r4, r5, r6, lr}
 800a3ce:	fba1 5402 	umull	r5, r4, r1, r2
 800a3d2:	b93c      	cbnz	r4, 800a3e4 <_calloc_r+0x18>
 800a3d4:	4629      	mov	r1, r5
 800a3d6:	f7ff f901 	bl	80095dc <_malloc_r>
 800a3da:	4606      	mov	r6, r0
 800a3dc:	b928      	cbnz	r0, 800a3ea <_calloc_r+0x1e>
 800a3de:	2600      	movs	r6, #0
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	bd70      	pop	{r4, r5, r6, pc}
 800a3e4:	220c      	movs	r2, #12
 800a3e6:	6002      	str	r2, [r0, #0]
 800a3e8:	e7f9      	b.n	800a3de <_calloc_r+0x12>
 800a3ea:	462a      	mov	r2, r5
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	f7fd fd89 	bl	8007f04 <memset>
 800a3f2:	e7f5      	b.n	800a3e0 <_calloc_r+0x14>

0800a3f4 <_free_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	2900      	cmp	r1, #0
 800a3fa:	d040      	beq.n	800a47e <_free_r+0x8a>
 800a3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a400:	1f0c      	subs	r4, r1, #4
 800a402:	2b00      	cmp	r3, #0
 800a404:	bfb8      	it	lt
 800a406:	18e4      	addlt	r4, r4, r3
 800a408:	f7ff fa22 	bl	8009850 <__malloc_lock>
 800a40c:	4a1c      	ldr	r2, [pc, #112]	@ (800a480 <_free_r+0x8c>)
 800a40e:	6813      	ldr	r3, [r2, #0]
 800a410:	b933      	cbnz	r3, 800a420 <_free_r+0x2c>
 800a412:	6063      	str	r3, [r4, #4]
 800a414:	6014      	str	r4, [r2, #0]
 800a416:	4628      	mov	r0, r5
 800a418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a41c:	f7ff ba1e 	b.w	800985c <__malloc_unlock>
 800a420:	42a3      	cmp	r3, r4
 800a422:	d908      	bls.n	800a436 <_free_r+0x42>
 800a424:	6820      	ldr	r0, [r4, #0]
 800a426:	1821      	adds	r1, r4, r0
 800a428:	428b      	cmp	r3, r1
 800a42a:	bf01      	itttt	eq
 800a42c:	6819      	ldreq	r1, [r3, #0]
 800a42e:	685b      	ldreq	r3, [r3, #4]
 800a430:	1809      	addeq	r1, r1, r0
 800a432:	6021      	streq	r1, [r4, #0]
 800a434:	e7ed      	b.n	800a412 <_free_r+0x1e>
 800a436:	461a      	mov	r2, r3
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	b10b      	cbz	r3, 800a440 <_free_r+0x4c>
 800a43c:	42a3      	cmp	r3, r4
 800a43e:	d9fa      	bls.n	800a436 <_free_r+0x42>
 800a440:	6811      	ldr	r1, [r2, #0]
 800a442:	1850      	adds	r0, r2, r1
 800a444:	42a0      	cmp	r0, r4
 800a446:	d10b      	bne.n	800a460 <_free_r+0x6c>
 800a448:	6820      	ldr	r0, [r4, #0]
 800a44a:	4401      	add	r1, r0
 800a44c:	1850      	adds	r0, r2, r1
 800a44e:	4283      	cmp	r3, r0
 800a450:	6011      	str	r1, [r2, #0]
 800a452:	d1e0      	bne.n	800a416 <_free_r+0x22>
 800a454:	6818      	ldr	r0, [r3, #0]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	4408      	add	r0, r1
 800a45a:	6010      	str	r0, [r2, #0]
 800a45c:	6053      	str	r3, [r2, #4]
 800a45e:	e7da      	b.n	800a416 <_free_r+0x22>
 800a460:	d902      	bls.n	800a468 <_free_r+0x74>
 800a462:	230c      	movs	r3, #12
 800a464:	602b      	str	r3, [r5, #0]
 800a466:	e7d6      	b.n	800a416 <_free_r+0x22>
 800a468:	6820      	ldr	r0, [r4, #0]
 800a46a:	1821      	adds	r1, r4, r0
 800a46c:	428b      	cmp	r3, r1
 800a46e:	bf01      	itttt	eq
 800a470:	6819      	ldreq	r1, [r3, #0]
 800a472:	685b      	ldreq	r3, [r3, #4]
 800a474:	1809      	addeq	r1, r1, r0
 800a476:	6021      	streq	r1, [r4, #0]
 800a478:	6063      	str	r3, [r4, #4]
 800a47a:	6054      	str	r4, [r2, #4]
 800a47c:	e7cb      	b.n	800a416 <_free_r+0x22>
 800a47e:	bd38      	pop	{r3, r4, r5, pc}
 800a480:	200004f0 	.word	0x200004f0

0800a484 <_malloc_usable_size_r>:
 800a484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a488:	1f18      	subs	r0, r3, #4
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	bfbc      	itt	lt
 800a48e:	580b      	ldrlt	r3, [r1, r0]
 800a490:	18c0      	addlt	r0, r0, r3
 800a492:	4770      	bx	lr

0800a494 <fiprintf>:
 800a494:	b40e      	push	{r1, r2, r3}
 800a496:	b503      	push	{r0, r1, lr}
 800a498:	4601      	mov	r1, r0
 800a49a:	ab03      	add	r3, sp, #12
 800a49c:	4805      	ldr	r0, [pc, #20]	@ (800a4b4 <fiprintf+0x20>)
 800a49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a2:	6800      	ldr	r0, [r0, #0]
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	f000 f835 	bl	800a514 <_vfiprintf_r>
 800a4aa:	b002      	add	sp, #8
 800a4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4b0:	b003      	add	sp, #12
 800a4b2:	4770      	bx	lr
 800a4b4:	20000184 	.word	0x20000184

0800a4b8 <abort>:
 800a4b8:	2006      	movs	r0, #6
 800a4ba:	b508      	push	{r3, lr}
 800a4bc:	f000 fa82 	bl	800a9c4 <raise>
 800a4c0:	2001      	movs	r0, #1
 800a4c2:	f7f7 f9dc 	bl	800187e <_exit>

0800a4c6 <__sfputc_r>:
 800a4c6:	6893      	ldr	r3, [r2, #8]
 800a4c8:	b410      	push	{r4}
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	6093      	str	r3, [r2, #8]
 800a4d0:	da07      	bge.n	800a4e2 <__sfputc_r+0x1c>
 800a4d2:	6994      	ldr	r4, [r2, #24]
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	db01      	blt.n	800a4dc <__sfputc_r+0x16>
 800a4d8:	290a      	cmp	r1, #10
 800a4da:	d102      	bne.n	800a4e2 <__sfputc_r+0x1c>
 800a4dc:	bc10      	pop	{r4}
 800a4de:	f000 b931 	b.w	800a744 <__swbuf_r>
 800a4e2:	6813      	ldr	r3, [r2, #0]
 800a4e4:	1c58      	adds	r0, r3, #1
 800a4e6:	6010      	str	r0, [r2, #0]
 800a4e8:	7019      	strb	r1, [r3, #0]
 800a4ea:	4608      	mov	r0, r1
 800a4ec:	bc10      	pop	{r4}
 800a4ee:	4770      	bx	lr

0800a4f0 <__sfputs_r>:
 800a4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	460f      	mov	r7, r1
 800a4f6:	4614      	mov	r4, r2
 800a4f8:	18d5      	adds	r5, r2, r3
 800a4fa:	42ac      	cmp	r4, r5
 800a4fc:	d101      	bne.n	800a502 <__sfputs_r+0x12>
 800a4fe:	2000      	movs	r0, #0
 800a500:	e007      	b.n	800a512 <__sfputs_r+0x22>
 800a502:	463a      	mov	r2, r7
 800a504:	4630      	mov	r0, r6
 800a506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50a:	f7ff ffdc 	bl	800a4c6 <__sfputc_r>
 800a50e:	1c43      	adds	r3, r0, #1
 800a510:	d1f3      	bne.n	800a4fa <__sfputs_r+0xa>
 800a512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a514 <_vfiprintf_r>:
 800a514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a518:	460d      	mov	r5, r1
 800a51a:	4614      	mov	r4, r2
 800a51c:	4698      	mov	r8, r3
 800a51e:	4606      	mov	r6, r0
 800a520:	b09d      	sub	sp, #116	@ 0x74
 800a522:	b118      	cbz	r0, 800a52c <_vfiprintf_r+0x18>
 800a524:	6a03      	ldr	r3, [r0, #32]
 800a526:	b90b      	cbnz	r3, 800a52c <_vfiprintf_r+0x18>
 800a528:	f7fc fe28 	bl	800717c <__sinit>
 800a52c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a52e:	07d9      	lsls	r1, r3, #31
 800a530:	d405      	bmi.n	800a53e <_vfiprintf_r+0x2a>
 800a532:	89ab      	ldrh	r3, [r5, #12]
 800a534:	059a      	lsls	r2, r3, #22
 800a536:	d402      	bmi.n	800a53e <_vfiprintf_r+0x2a>
 800a538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a53a:	f7fd fd1a 	bl	8007f72 <__retarget_lock_acquire_recursive>
 800a53e:	89ab      	ldrh	r3, [r5, #12]
 800a540:	071b      	lsls	r3, r3, #28
 800a542:	d501      	bpl.n	800a548 <_vfiprintf_r+0x34>
 800a544:	692b      	ldr	r3, [r5, #16]
 800a546:	b99b      	cbnz	r3, 800a570 <_vfiprintf_r+0x5c>
 800a548:	4629      	mov	r1, r5
 800a54a:	4630      	mov	r0, r6
 800a54c:	f000 f938 	bl	800a7c0 <__swsetup_r>
 800a550:	b170      	cbz	r0, 800a570 <_vfiprintf_r+0x5c>
 800a552:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a554:	07dc      	lsls	r4, r3, #31
 800a556:	d504      	bpl.n	800a562 <_vfiprintf_r+0x4e>
 800a558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a55c:	b01d      	add	sp, #116	@ 0x74
 800a55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a562:	89ab      	ldrh	r3, [r5, #12]
 800a564:	0598      	lsls	r0, r3, #22
 800a566:	d4f7      	bmi.n	800a558 <_vfiprintf_r+0x44>
 800a568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a56a:	f7fd fd03 	bl	8007f74 <__retarget_lock_release_recursive>
 800a56e:	e7f3      	b.n	800a558 <_vfiprintf_r+0x44>
 800a570:	2300      	movs	r3, #0
 800a572:	9309      	str	r3, [sp, #36]	@ 0x24
 800a574:	2320      	movs	r3, #32
 800a576:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a57a:	2330      	movs	r3, #48	@ 0x30
 800a57c:	f04f 0901 	mov.w	r9, #1
 800a580:	f8cd 800c 	str.w	r8, [sp, #12]
 800a584:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a730 <_vfiprintf_r+0x21c>
 800a588:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a58c:	4623      	mov	r3, r4
 800a58e:	469a      	mov	sl, r3
 800a590:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a594:	b10a      	cbz	r2, 800a59a <_vfiprintf_r+0x86>
 800a596:	2a25      	cmp	r2, #37	@ 0x25
 800a598:	d1f9      	bne.n	800a58e <_vfiprintf_r+0x7a>
 800a59a:	ebba 0b04 	subs.w	fp, sl, r4
 800a59e:	d00b      	beq.n	800a5b8 <_vfiprintf_r+0xa4>
 800a5a0:	465b      	mov	r3, fp
 800a5a2:	4622      	mov	r2, r4
 800a5a4:	4629      	mov	r1, r5
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	f7ff ffa2 	bl	800a4f0 <__sfputs_r>
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	f000 80a7 	beq.w	800a700 <_vfiprintf_r+0x1ec>
 800a5b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5b4:	445a      	add	r2, fp
 800a5b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 809f 	beq.w	800a700 <_vfiprintf_r+0x1ec>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5cc:	f10a 0a01 	add.w	sl, sl, #1
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	9307      	str	r3, [sp, #28]
 800a5d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5da:	4654      	mov	r4, sl
 800a5dc:	2205      	movs	r2, #5
 800a5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e2:	4853      	ldr	r0, [pc, #332]	@ (800a730 <_vfiprintf_r+0x21c>)
 800a5e4:	f7fd fcc7 	bl	8007f76 <memchr>
 800a5e8:	9a04      	ldr	r2, [sp, #16]
 800a5ea:	b9d8      	cbnz	r0, 800a624 <_vfiprintf_r+0x110>
 800a5ec:	06d1      	lsls	r1, r2, #27
 800a5ee:	bf44      	itt	mi
 800a5f0:	2320      	movmi	r3, #32
 800a5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5f6:	0713      	lsls	r3, r2, #28
 800a5f8:	bf44      	itt	mi
 800a5fa:	232b      	movmi	r3, #43	@ 0x2b
 800a5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a600:	f89a 3000 	ldrb.w	r3, [sl]
 800a604:	2b2a      	cmp	r3, #42	@ 0x2a
 800a606:	d015      	beq.n	800a634 <_vfiprintf_r+0x120>
 800a608:	4654      	mov	r4, sl
 800a60a:	2000      	movs	r0, #0
 800a60c:	f04f 0c0a 	mov.w	ip, #10
 800a610:	9a07      	ldr	r2, [sp, #28]
 800a612:	4621      	mov	r1, r4
 800a614:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a618:	3b30      	subs	r3, #48	@ 0x30
 800a61a:	2b09      	cmp	r3, #9
 800a61c:	d94b      	bls.n	800a6b6 <_vfiprintf_r+0x1a2>
 800a61e:	b1b0      	cbz	r0, 800a64e <_vfiprintf_r+0x13a>
 800a620:	9207      	str	r2, [sp, #28]
 800a622:	e014      	b.n	800a64e <_vfiprintf_r+0x13a>
 800a624:	eba0 0308 	sub.w	r3, r0, r8
 800a628:	fa09 f303 	lsl.w	r3, r9, r3
 800a62c:	4313      	orrs	r3, r2
 800a62e:	46a2      	mov	sl, r4
 800a630:	9304      	str	r3, [sp, #16]
 800a632:	e7d2      	b.n	800a5da <_vfiprintf_r+0xc6>
 800a634:	9b03      	ldr	r3, [sp, #12]
 800a636:	1d19      	adds	r1, r3, #4
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	9103      	str	r1, [sp, #12]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	bfbb      	ittet	lt
 800a640:	425b      	neglt	r3, r3
 800a642:	f042 0202 	orrlt.w	r2, r2, #2
 800a646:	9307      	strge	r3, [sp, #28]
 800a648:	9307      	strlt	r3, [sp, #28]
 800a64a:	bfb8      	it	lt
 800a64c:	9204      	strlt	r2, [sp, #16]
 800a64e:	7823      	ldrb	r3, [r4, #0]
 800a650:	2b2e      	cmp	r3, #46	@ 0x2e
 800a652:	d10a      	bne.n	800a66a <_vfiprintf_r+0x156>
 800a654:	7863      	ldrb	r3, [r4, #1]
 800a656:	2b2a      	cmp	r3, #42	@ 0x2a
 800a658:	d132      	bne.n	800a6c0 <_vfiprintf_r+0x1ac>
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	3402      	adds	r4, #2
 800a65e:	1d1a      	adds	r2, r3, #4
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	9203      	str	r2, [sp, #12]
 800a664:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a668:	9305      	str	r3, [sp, #20]
 800a66a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a734 <_vfiprintf_r+0x220>
 800a66e:	2203      	movs	r2, #3
 800a670:	4650      	mov	r0, sl
 800a672:	7821      	ldrb	r1, [r4, #0]
 800a674:	f7fd fc7f 	bl	8007f76 <memchr>
 800a678:	b138      	cbz	r0, 800a68a <_vfiprintf_r+0x176>
 800a67a:	2240      	movs	r2, #64	@ 0x40
 800a67c:	9b04      	ldr	r3, [sp, #16]
 800a67e:	eba0 000a 	sub.w	r0, r0, sl
 800a682:	4082      	lsls	r2, r0
 800a684:	4313      	orrs	r3, r2
 800a686:	3401      	adds	r4, #1
 800a688:	9304      	str	r3, [sp, #16]
 800a68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a68e:	2206      	movs	r2, #6
 800a690:	4829      	ldr	r0, [pc, #164]	@ (800a738 <_vfiprintf_r+0x224>)
 800a692:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a696:	f7fd fc6e 	bl	8007f76 <memchr>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d03f      	beq.n	800a71e <_vfiprintf_r+0x20a>
 800a69e:	4b27      	ldr	r3, [pc, #156]	@ (800a73c <_vfiprintf_r+0x228>)
 800a6a0:	bb1b      	cbnz	r3, 800a6ea <_vfiprintf_r+0x1d6>
 800a6a2:	9b03      	ldr	r3, [sp, #12]
 800a6a4:	3307      	adds	r3, #7
 800a6a6:	f023 0307 	bic.w	r3, r3, #7
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	9303      	str	r3, [sp, #12]
 800a6ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b0:	443b      	add	r3, r7
 800a6b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6b4:	e76a      	b.n	800a58c <_vfiprintf_r+0x78>
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	2001      	movs	r0, #1
 800a6ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6be:	e7a8      	b.n	800a612 <_vfiprintf_r+0xfe>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	f04f 0c0a 	mov.w	ip, #10
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	3401      	adds	r4, #1
 800a6ca:	9305      	str	r3, [sp, #20]
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6d2:	3a30      	subs	r2, #48	@ 0x30
 800a6d4:	2a09      	cmp	r2, #9
 800a6d6:	d903      	bls.n	800a6e0 <_vfiprintf_r+0x1cc>
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d0c6      	beq.n	800a66a <_vfiprintf_r+0x156>
 800a6dc:	9105      	str	r1, [sp, #20]
 800a6de:	e7c4      	b.n	800a66a <_vfiprintf_r+0x156>
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6e8:	e7f0      	b.n	800a6cc <_vfiprintf_r+0x1b8>
 800a6ea:	ab03      	add	r3, sp, #12
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	462a      	mov	r2, r5
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	4b13      	ldr	r3, [pc, #76]	@ (800a740 <_vfiprintf_r+0x22c>)
 800a6f4:	a904      	add	r1, sp, #16
 800a6f6:	f7fb fe93 	bl	8006420 <_printf_float>
 800a6fa:	4607      	mov	r7, r0
 800a6fc:	1c78      	adds	r0, r7, #1
 800a6fe:	d1d6      	bne.n	800a6ae <_vfiprintf_r+0x19a>
 800a700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a702:	07d9      	lsls	r1, r3, #31
 800a704:	d405      	bmi.n	800a712 <_vfiprintf_r+0x1fe>
 800a706:	89ab      	ldrh	r3, [r5, #12]
 800a708:	059a      	lsls	r2, r3, #22
 800a70a:	d402      	bmi.n	800a712 <_vfiprintf_r+0x1fe>
 800a70c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a70e:	f7fd fc31 	bl	8007f74 <__retarget_lock_release_recursive>
 800a712:	89ab      	ldrh	r3, [r5, #12]
 800a714:	065b      	lsls	r3, r3, #25
 800a716:	f53f af1f 	bmi.w	800a558 <_vfiprintf_r+0x44>
 800a71a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a71c:	e71e      	b.n	800a55c <_vfiprintf_r+0x48>
 800a71e:	ab03      	add	r3, sp, #12
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	462a      	mov	r2, r5
 800a724:	4630      	mov	r0, r6
 800a726:	4b06      	ldr	r3, [pc, #24]	@ (800a740 <_vfiprintf_r+0x22c>)
 800a728:	a904      	add	r1, sp, #16
 800a72a:	f7fc f917 	bl	800695c <_printf_i>
 800a72e:	e7e4      	b.n	800a6fa <_vfiprintf_r+0x1e6>
 800a730:	0800adee 	.word	0x0800adee
 800a734:	0800adf4 	.word	0x0800adf4
 800a738:	0800adf8 	.word	0x0800adf8
 800a73c:	08006421 	.word	0x08006421
 800a740:	0800a4f1 	.word	0x0800a4f1

0800a744 <__swbuf_r>:
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	460e      	mov	r6, r1
 800a748:	4614      	mov	r4, r2
 800a74a:	4605      	mov	r5, r0
 800a74c:	b118      	cbz	r0, 800a756 <__swbuf_r+0x12>
 800a74e:	6a03      	ldr	r3, [r0, #32]
 800a750:	b90b      	cbnz	r3, 800a756 <__swbuf_r+0x12>
 800a752:	f7fc fd13 	bl	800717c <__sinit>
 800a756:	69a3      	ldr	r3, [r4, #24]
 800a758:	60a3      	str	r3, [r4, #8]
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	071a      	lsls	r2, r3, #28
 800a75e:	d501      	bpl.n	800a764 <__swbuf_r+0x20>
 800a760:	6923      	ldr	r3, [r4, #16]
 800a762:	b943      	cbnz	r3, 800a776 <__swbuf_r+0x32>
 800a764:	4621      	mov	r1, r4
 800a766:	4628      	mov	r0, r5
 800a768:	f000 f82a 	bl	800a7c0 <__swsetup_r>
 800a76c:	b118      	cbz	r0, 800a776 <__swbuf_r+0x32>
 800a76e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a772:	4638      	mov	r0, r7
 800a774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	6922      	ldr	r2, [r4, #16]
 800a77a:	b2f6      	uxtb	r6, r6
 800a77c:	1a98      	subs	r0, r3, r2
 800a77e:	6963      	ldr	r3, [r4, #20]
 800a780:	4637      	mov	r7, r6
 800a782:	4283      	cmp	r3, r0
 800a784:	dc05      	bgt.n	800a792 <__swbuf_r+0x4e>
 800a786:	4621      	mov	r1, r4
 800a788:	4628      	mov	r0, r5
 800a78a:	f7ff f839 	bl	8009800 <_fflush_r>
 800a78e:	2800      	cmp	r0, #0
 800a790:	d1ed      	bne.n	800a76e <__swbuf_r+0x2a>
 800a792:	68a3      	ldr	r3, [r4, #8]
 800a794:	3b01      	subs	r3, #1
 800a796:	60a3      	str	r3, [r4, #8]
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	6022      	str	r2, [r4, #0]
 800a79e:	701e      	strb	r6, [r3, #0]
 800a7a0:	6962      	ldr	r2, [r4, #20]
 800a7a2:	1c43      	adds	r3, r0, #1
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d004      	beq.n	800a7b2 <__swbuf_r+0x6e>
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	07db      	lsls	r3, r3, #31
 800a7ac:	d5e1      	bpl.n	800a772 <__swbuf_r+0x2e>
 800a7ae:	2e0a      	cmp	r6, #10
 800a7b0:	d1df      	bne.n	800a772 <__swbuf_r+0x2e>
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	f7ff f823 	bl	8009800 <_fflush_r>
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d0d9      	beq.n	800a772 <__swbuf_r+0x2e>
 800a7be:	e7d6      	b.n	800a76e <__swbuf_r+0x2a>

0800a7c0 <__swsetup_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4b29      	ldr	r3, [pc, #164]	@ (800a868 <__swsetup_r+0xa8>)
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	6818      	ldr	r0, [r3, #0]
 800a7c8:	460c      	mov	r4, r1
 800a7ca:	b118      	cbz	r0, 800a7d4 <__swsetup_r+0x14>
 800a7cc:	6a03      	ldr	r3, [r0, #32]
 800a7ce:	b90b      	cbnz	r3, 800a7d4 <__swsetup_r+0x14>
 800a7d0:	f7fc fcd4 	bl	800717c <__sinit>
 800a7d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7d8:	0719      	lsls	r1, r3, #28
 800a7da:	d422      	bmi.n	800a822 <__swsetup_r+0x62>
 800a7dc:	06da      	lsls	r2, r3, #27
 800a7de:	d407      	bmi.n	800a7f0 <__swsetup_r+0x30>
 800a7e0:	2209      	movs	r2, #9
 800a7e2:	602a      	str	r2, [r5, #0]
 800a7e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	e033      	b.n	800a858 <__swsetup_r+0x98>
 800a7f0:	0758      	lsls	r0, r3, #29
 800a7f2:	d512      	bpl.n	800a81a <__swsetup_r+0x5a>
 800a7f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7f6:	b141      	cbz	r1, 800a80a <__swsetup_r+0x4a>
 800a7f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7fc:	4299      	cmp	r1, r3
 800a7fe:	d002      	beq.n	800a806 <__swsetup_r+0x46>
 800a800:	4628      	mov	r0, r5
 800a802:	f7ff fdf7 	bl	800a3f4 <_free_r>
 800a806:	2300      	movs	r3, #0
 800a808:	6363      	str	r3, [r4, #52]	@ 0x34
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a810:	81a3      	strh	r3, [r4, #12]
 800a812:	2300      	movs	r3, #0
 800a814:	6063      	str	r3, [r4, #4]
 800a816:	6923      	ldr	r3, [r4, #16]
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	f043 0308 	orr.w	r3, r3, #8
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	6923      	ldr	r3, [r4, #16]
 800a824:	b94b      	cbnz	r3, 800a83a <__swsetup_r+0x7a>
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a82c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a830:	d003      	beq.n	800a83a <__swsetup_r+0x7a>
 800a832:	4621      	mov	r1, r4
 800a834:	4628      	mov	r0, r5
 800a836:	f000 f83e 	bl	800a8b6 <__smakebuf_r>
 800a83a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a83e:	f013 0201 	ands.w	r2, r3, #1
 800a842:	d00a      	beq.n	800a85a <__swsetup_r+0x9a>
 800a844:	2200      	movs	r2, #0
 800a846:	60a2      	str	r2, [r4, #8]
 800a848:	6962      	ldr	r2, [r4, #20]
 800a84a:	4252      	negs	r2, r2
 800a84c:	61a2      	str	r2, [r4, #24]
 800a84e:	6922      	ldr	r2, [r4, #16]
 800a850:	b942      	cbnz	r2, 800a864 <__swsetup_r+0xa4>
 800a852:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a856:	d1c5      	bne.n	800a7e4 <__swsetup_r+0x24>
 800a858:	bd38      	pop	{r3, r4, r5, pc}
 800a85a:	0799      	lsls	r1, r3, #30
 800a85c:	bf58      	it	pl
 800a85e:	6962      	ldrpl	r2, [r4, #20]
 800a860:	60a2      	str	r2, [r4, #8]
 800a862:	e7f4      	b.n	800a84e <__swsetup_r+0x8e>
 800a864:	2000      	movs	r0, #0
 800a866:	e7f7      	b.n	800a858 <__swsetup_r+0x98>
 800a868:	20000184 	.word	0x20000184

0800a86c <__swhatbuf_r>:
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	460c      	mov	r4, r1
 800a870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a874:	4615      	mov	r5, r2
 800a876:	2900      	cmp	r1, #0
 800a878:	461e      	mov	r6, r3
 800a87a:	b096      	sub	sp, #88	@ 0x58
 800a87c:	da0c      	bge.n	800a898 <__swhatbuf_r+0x2c>
 800a87e:	89a3      	ldrh	r3, [r4, #12]
 800a880:	2100      	movs	r1, #0
 800a882:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a886:	bf14      	ite	ne
 800a888:	2340      	movne	r3, #64	@ 0x40
 800a88a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a88e:	2000      	movs	r0, #0
 800a890:	6031      	str	r1, [r6, #0]
 800a892:	602b      	str	r3, [r5, #0]
 800a894:	b016      	add	sp, #88	@ 0x58
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	466a      	mov	r2, sp
 800a89a:	f000 f849 	bl	800a930 <_fstat_r>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	dbed      	blt.n	800a87e <__swhatbuf_r+0x12>
 800a8a2:	9901      	ldr	r1, [sp, #4]
 800a8a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a8a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a8ac:	4259      	negs	r1, r3
 800a8ae:	4159      	adcs	r1, r3
 800a8b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8b4:	e7eb      	b.n	800a88e <__swhatbuf_r+0x22>

0800a8b6 <__smakebuf_r>:
 800a8b6:	898b      	ldrh	r3, [r1, #12]
 800a8b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8ba:	079d      	lsls	r5, r3, #30
 800a8bc:	4606      	mov	r6, r0
 800a8be:	460c      	mov	r4, r1
 800a8c0:	d507      	bpl.n	800a8d2 <__smakebuf_r+0x1c>
 800a8c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a8c6:	6023      	str	r3, [r4, #0]
 800a8c8:	6123      	str	r3, [r4, #16]
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	6163      	str	r3, [r4, #20]
 800a8ce:	b003      	add	sp, #12
 800a8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8d2:	466a      	mov	r2, sp
 800a8d4:	ab01      	add	r3, sp, #4
 800a8d6:	f7ff ffc9 	bl	800a86c <__swhatbuf_r>
 800a8da:	9f00      	ldr	r7, [sp, #0]
 800a8dc:	4605      	mov	r5, r0
 800a8de:	4639      	mov	r1, r7
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f7fe fe7b 	bl	80095dc <_malloc_r>
 800a8e6:	b948      	cbnz	r0, 800a8fc <__smakebuf_r+0x46>
 800a8e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ec:	059a      	lsls	r2, r3, #22
 800a8ee:	d4ee      	bmi.n	800a8ce <__smakebuf_r+0x18>
 800a8f0:	f023 0303 	bic.w	r3, r3, #3
 800a8f4:	f043 0302 	orr.w	r3, r3, #2
 800a8f8:	81a3      	strh	r3, [r4, #12]
 800a8fa:	e7e2      	b.n	800a8c2 <__smakebuf_r+0xc>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	9b01      	ldr	r3, [sp, #4]
 800a90a:	6020      	str	r0, [r4, #0]
 800a90c:	b15b      	cbz	r3, 800a926 <__smakebuf_r+0x70>
 800a90e:	4630      	mov	r0, r6
 800a910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a914:	f000 f81e 	bl	800a954 <_isatty_r>
 800a918:	b128      	cbz	r0, 800a926 <__smakebuf_r+0x70>
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	f023 0303 	bic.w	r3, r3, #3
 800a920:	f043 0301 	orr.w	r3, r3, #1
 800a924:	81a3      	strh	r3, [r4, #12]
 800a926:	89a3      	ldrh	r3, [r4, #12]
 800a928:	431d      	orrs	r5, r3
 800a92a:	81a5      	strh	r5, [r4, #12]
 800a92c:	e7cf      	b.n	800a8ce <__smakebuf_r+0x18>
	...

0800a930 <_fstat_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	2300      	movs	r3, #0
 800a934:	4d06      	ldr	r5, [pc, #24]	@ (800a950 <_fstat_r+0x20>)
 800a936:	4604      	mov	r4, r0
 800a938:	4608      	mov	r0, r1
 800a93a:	4611      	mov	r1, r2
 800a93c:	602b      	str	r3, [r5, #0]
 800a93e:	f7f6 ffed 	bl	800191c <_fstat>
 800a942:	1c43      	adds	r3, r0, #1
 800a944:	d102      	bne.n	800a94c <_fstat_r+0x1c>
 800a946:	682b      	ldr	r3, [r5, #0]
 800a948:	b103      	cbz	r3, 800a94c <_fstat_r+0x1c>
 800a94a:	6023      	str	r3, [r4, #0]
 800a94c:	bd38      	pop	{r3, r4, r5, pc}
 800a94e:	bf00      	nop
 800a950:	200004f4 	.word	0x200004f4

0800a954 <_isatty_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	2300      	movs	r3, #0
 800a958:	4d05      	ldr	r5, [pc, #20]	@ (800a970 <_isatty_r+0x1c>)
 800a95a:	4604      	mov	r4, r0
 800a95c:	4608      	mov	r0, r1
 800a95e:	602b      	str	r3, [r5, #0]
 800a960:	f7f6 ffeb 	bl	800193a <_isatty>
 800a964:	1c43      	adds	r3, r0, #1
 800a966:	d102      	bne.n	800a96e <_isatty_r+0x1a>
 800a968:	682b      	ldr	r3, [r5, #0]
 800a96a:	b103      	cbz	r3, 800a96e <_isatty_r+0x1a>
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	bd38      	pop	{r3, r4, r5, pc}
 800a970:	200004f4 	.word	0x200004f4

0800a974 <_raise_r>:
 800a974:	291f      	cmp	r1, #31
 800a976:	b538      	push	{r3, r4, r5, lr}
 800a978:	4605      	mov	r5, r0
 800a97a:	460c      	mov	r4, r1
 800a97c:	d904      	bls.n	800a988 <_raise_r+0x14>
 800a97e:	2316      	movs	r3, #22
 800a980:	6003      	str	r3, [r0, #0]
 800a982:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a986:	bd38      	pop	{r3, r4, r5, pc}
 800a988:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a98a:	b112      	cbz	r2, 800a992 <_raise_r+0x1e>
 800a98c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a990:	b94b      	cbnz	r3, 800a9a6 <_raise_r+0x32>
 800a992:	4628      	mov	r0, r5
 800a994:	f000 f830 	bl	800a9f8 <_getpid_r>
 800a998:	4622      	mov	r2, r4
 800a99a:	4601      	mov	r1, r0
 800a99c:	4628      	mov	r0, r5
 800a99e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9a2:	f000 b817 	b.w	800a9d4 <_kill_r>
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d00a      	beq.n	800a9c0 <_raise_r+0x4c>
 800a9aa:	1c59      	adds	r1, r3, #1
 800a9ac:	d103      	bne.n	800a9b6 <_raise_r+0x42>
 800a9ae:	2316      	movs	r3, #22
 800a9b0:	6003      	str	r3, [r0, #0]
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	e7e7      	b.n	800a986 <_raise_r+0x12>
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a9be:	4798      	blx	r3
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	e7e0      	b.n	800a986 <_raise_r+0x12>

0800a9c4 <raise>:
 800a9c4:	4b02      	ldr	r3, [pc, #8]	@ (800a9d0 <raise+0xc>)
 800a9c6:	4601      	mov	r1, r0
 800a9c8:	6818      	ldr	r0, [r3, #0]
 800a9ca:	f7ff bfd3 	b.w	800a974 <_raise_r>
 800a9ce:	bf00      	nop
 800a9d0:	20000184 	.word	0x20000184

0800a9d4 <_kill_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	4d06      	ldr	r5, [pc, #24]	@ (800a9f4 <_kill_r+0x20>)
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	4611      	mov	r1, r2
 800a9e0:	602b      	str	r3, [r5, #0]
 800a9e2:	f7f6 ff3c 	bl	800185e <_kill>
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	d102      	bne.n	800a9f0 <_kill_r+0x1c>
 800a9ea:	682b      	ldr	r3, [r5, #0]
 800a9ec:	b103      	cbz	r3, 800a9f0 <_kill_r+0x1c>
 800a9ee:	6023      	str	r3, [r4, #0]
 800a9f0:	bd38      	pop	{r3, r4, r5, pc}
 800a9f2:	bf00      	nop
 800a9f4:	200004f4 	.word	0x200004f4

0800a9f8 <_getpid_r>:
 800a9f8:	f7f6 bf2a 	b.w	8001850 <_getpid>

0800a9fc <_init>:
 800a9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fe:	bf00      	nop
 800aa00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa02:	bc08      	pop	{r3}
 800aa04:	469e      	mov	lr, r3
 800aa06:	4770      	bx	lr

0800aa08 <_fini>:
 800aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0a:	bf00      	nop
 800aa0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa0e:	bc08      	pop	{r3}
 800aa10:	469e      	mov	lr, r3
 800aa12:	4770      	bx	lr
