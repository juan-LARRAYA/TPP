
BLUEPILL ORIGINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a984  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800aa98  0800aa98  0000ba98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aef4  0800aef4  0000c1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aef4  0800aef4  0000bef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aefc  0800aefc  0000c1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aefc  0800aefc  0000befc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af00  0800af00  0000bf00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800af04  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  200001f0  0800b0f4  0000c1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800b0f4  0000c52c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013795  00000000  00000000  0000c219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003420  00000000  00000000  0001f9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00022dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e98  00000000  00000000  00024088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b42b  00000000  00000000  00024f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ec0  00000000  00000000  0004034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094743  00000000  00000000  0005920b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed94e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000625c  00000000  00000000  000ed994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f3bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa7c 	.word	0x0800aa7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800aa7c 	.word	0x0800aa7c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be4:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000be6:	4a21      	ldr	r2, [pc, #132]	@ (8000c6c <MX_ADC1_Init+0x98>)
 8000be8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c00:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c0e:	2202      	movs	r2, #2
 8000c10:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c12:	4815      	ldr	r0, [pc, #84]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c14:	f001 f8fe 	bl	8001e14 <HAL_ADC_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c1e:	f000 fdc9 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c34:	f001 fb7e 	bl	8002334 <HAL_ADC_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f000 fdb9 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c50:	f001 fb70 	bl	8002334 <HAL_ADC_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c5a:	f000 fdab 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000020c 	.word	0x2000020c
 8000c6c:	40012400 	.word	0x40012400

08000c70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d3c <HAL_ADC_MspInit+0xcc>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d151      	bne.n	8000d34 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a2a      	ldr	r2, [pc, #168]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b25      	ldr	r3, [pc, #148]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a24      	ldr	r2, [pc, #144]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VCellMas_Pin|VCellMenos_Pin;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481d      	ldr	r0, [pc, #116]	@ (8000d44 <HAL_ADC_MspInit+0xd4>)
 8000cd0:	f002 f82e 	bl	8002d30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8000d4c <HAL_ADC_MspInit+0xdc>)
 8000cd8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000ce8:	2280      	movs	r2, #128	@ 0x80
 8000cea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cf2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cfa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cfe:	2220      	movs	r2, #32
 8000d00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d08:	480f      	ldr	r0, [pc, #60]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d0a:	f001 fe23 	bl	8002954 <HAL_DMA_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000d14:	f000 fd4e 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d1c:	621a      	str	r2, [r3, #32]
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2101      	movs	r1, #1
 8000d28:	2012      	movs	r0, #18
 8000d2a:	f001 fddc 	bl	80028e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d2e:	2012      	movs	r0, #18
 8000d30:	f001 fdf5 	bl	800291e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40012400 	.word	0x40012400
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	2000023c 	.word	0x2000023c
 8000d4c:	40020008 	.word	0x40020008

08000d50 <BQ29330_ReadFunctionControl>:



// Lee el valor actual del registro FUNCTION_CONTROL (0x03) del BQ29330
HAL_StatusTypeDef BQ29330_ReadFunctionControl(BQ29330_Registers reg, uint8_t *valor_leido)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[1];
    buffer[0] = reg; 		// Dirección del registro
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	733b      	strb	r3, [r7, #12]
    // Paso 1: Enviar la dirección del registro que queremos leer (0x03)
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 1, HAL_MAX_DELAY);
 8000d60:	f107 020c 	add.w	r2, r7, #12
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2140      	movs	r1, #64	@ 0x40
 8000d6e:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <BQ29330_ReadFunctionControl+0x50>)
 8000d70:	f002 fad8 	bl	8003324 <HAL_I2C_Master_Transmit>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;  // Si falla al enviar la dirección del registro, retornamos el error
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <BQ29330_ReadFunctionControl+0x32>
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	e009      	b.n	8000d96 <BQ29330_ReadFunctionControl+0x46>
    // Paso 2: Leer un byte desde el dispositivo (valor del registro FUNCTION_CONTROL)
    return HAL_I2C_Master_Receive(&hi2c1, BMS_I2C_ADDRESS, valor_leido, 1, HAL_MAX_DELAY);  // Devolver el estado de la operación y el valor leído en *valor_leido
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	2140      	movs	r1, #64	@ 0x40
 8000d8e:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <BQ29330_ReadFunctionControl+0x50>)
 8000d90:	f002 fbc6 	bl	8003520 <HAL_I2C_Master_Receive>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000280 	.word	0x20000280

08000da4 <BQ29330_WriteRegister>:



// Función para escribir en un registro del BQ29330
HAL_StatusTypeDef BQ29330_WriteRegister(BQ29330_Registers reg, uint8_t data)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = reg; 		// Dirección del registro
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;        // Dato a escribir
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8000dbc:	f107 020c 	add.w	r2, r7, #12
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	2140      	movs	r1, #64	@ 0x40
 8000dca:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <BQ29330_WriteRegister+0x38>)
 8000dcc:	f002 faaa 	bl	8003324 <HAL_I2C_Master_Transmit>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000280 	.word	0x20000280

08000de0 <BQ29330_config>:

HAL_StatusTypeDef BQ29330_config(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, 0x07);
 8000de4:	2107      	movs	r1, #7
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff ffdc 	bl	8000da4 <BQ29330_WriteRegister>
	BQ29330_WriteRegister(BQ29330_STATE_CONTROL, 4);   // WDDIS = 1, all else = 0
 8000dec:	2104      	movs	r1, #4
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff ffd8 	bl	8000da4 <BQ29330_WriteRegister>
	BQ29330_WriteRegister(BQ29330_FUNCTION_CONTROL, 0x05); // BAT = 1 y vmem 1
 8000df4:	2105      	movs	r1, #5
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff ffd4 	bl	8000da4 <BQ29330_WriteRegister>
	BQ29330_WriteRegister(BQ29330_CELL, 0x01); 			   //
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	2004      	movs	r0, #4
 8000e00:	f7ff ffd0 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLV, 0x1F);              // 50 mV 0x00
 8000e04:	211f      	movs	r1, #31
 8000e06:	2005      	movs	r0, #5
 8000e08:	f7ff ffcc 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLD, 0x0F);              // 31 ms
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	2006      	movs	r0, #6
 8000e10:	f7ff ffc8 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCC, 0x0F);              // 475 mV y 915 μs
 8000e14:	210f      	movs	r1, #15
 8000e16:	2007      	movs	r0, #7
 8000e18:	f7ff ffc4 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCD, 0x0F);              // idem for discharge
 8000e1c:	210f      	movs	r1, #15
 8000e1e:	2008      	movs	r0, #8
 8000e20:	f7ff ffc0 	bl	8000da4 <BQ29330_WriteRegister>

}
 8000e24:	bf00      	nop
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <MX_DMA_Init+0x38>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <MX_DMA_Init+0x38>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <MX_DMA_Init+0x38>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	200b      	movs	r0, #11
 8000e50:	f001 fd49 	bl	80028e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e54:	200b      	movs	r0, #11
 8000e56:	f001 fd62 	bl	800291e <HAL_NVIC_EnableIRQ>

}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000

08000e68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7c:	4b24      	ldr	r3, [pc, #144]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a23      	ldr	r2, [pc, #140]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e94:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0320 	and.w	r3, r3, #32
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a17      	ldr	r2, [pc, #92]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a11      	ldr	r2, [pc, #68]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activador_GPIO_Port, activador_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ee2:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <MX_GPIO_Init+0xac>)
 8000ee4:	f002 f8a8 	bl	8003038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activador_Pin;
 8000ee8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(activador_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	4619      	mov	r1, r3
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_GPIO_Init+0xac>)
 8000f02:	f001 ff15 	bl	8002d30 <HAL_GPIO_Init>

}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40011000 	.word	0x40011000

08000f18 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	@ (8000f6c <MX_I2C1_Init+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f24:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <MX_I2C1_Init+0x58>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f56:	f002 f8a1 	bl	800309c <HAL_I2C_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f60:	f000 fc28 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000280 	.word	0x20000280
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	000186a0 	.word	0x000186a0

08000f74 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <MX_I2C2_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <MX_I2C2_Init+0x58>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fb2:	f002 f873 	bl	800309c <HAL_I2C_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f000 fbfa 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200002d4 	.word	0x200002d4
 8000fc8:	40005800 	.word	0x40005800
 8000fcc:	000186a0 	.word	0x000186a0

08000fd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0318 	add.w	r3, r7, #24
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a2b      	ldr	r2, [pc, #172]	@ (8001098 <HAL_I2C_MspInit+0xc8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d124      	bne.n	800103a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a29      	ldr	r2, [pc, #164]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b27      	ldr	r3, [pc, #156]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001008:	23c0      	movs	r3, #192	@ 0xc0
 800100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100c:	2312      	movs	r3, #18
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0318 	add.w	r3, r7, #24
 8001018:	4619      	mov	r1, r3
 800101a:	4821      	ldr	r0, [pc, #132]	@ (80010a0 <HAL_I2C_MspInit+0xd0>)
 800101c:	f001 fe88 	bl	8002d30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001020:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	4a1d      	ldr	r2, [pc, #116]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8001026:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800102a:	61d3      	str	r3, [r2, #28]
 800102c:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001038:	e029      	b.n	800108e <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a19      	ldr	r2, [pc, #100]	@ (80010a4 <HAL_I2C_MspInit+0xd4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d124      	bne.n	800108e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a14      	ldr	r2, [pc, #80]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800105c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001062:	2312      	movs	r3, #18
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	4619      	mov	r1, r3
 8001070:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <HAL_I2C_MspInit+0xd0>)
 8001072:	f001 fe5d 	bl	8002d30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a08      	ldr	r2, [pc, #32]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 800107c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	@ 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40005400 	.word	0x40005400
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	40005800 	.word	0x40005800

080010a8 <Read16>:
uint16_t ina219_calibrationValue;
int16_t  ina219_currentDivider_mA;
int16_t  ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2302      	movs	r3, #2
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2180      	movs	r1, #128	@ 0x80
 80010d0:	f002 fd8c 	bl	8003bec <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7b7b      	ldrb	r3, [r7, #13]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	b29b      	uxth	r3, r3
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
 80010f8:	4613      	mov	r3, r2
 80010fa:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80010fc:	883b      	ldrh	r3, [r7, #0]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8001106:	883b      	ldrh	r3, [r7, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	b29a      	uxth	r2, r3
 8001114:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2302      	movs	r3, #2
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	2180      	movs	r1, #128	@ 0x80
 8001128:	f002 fc66 	bl	80039f8 <HAL_I2C_Mem_Write>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 800113c:	2102      	movs	r1, #2
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffb2 	bl	80010a8 <Read16>
 8001144:	4603      	mov	r3, r0
 8001146:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001148:	89fb      	ldrh	r3, [r7, #14]
 800114a:	08db      	lsrs	r3, r3, #3
 800114c:	b29b      	uxth	r3, r3
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	b29b      	uxth	r3, r3

}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001162:	2104      	movs	r1, #4
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff9f 	bl	80010a8 <Read16>
 800116a:	4603      	mov	r3, r0
 800116c:	81fb      	strh	r3, [r7, #14]

	return (result );
 800116e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	0000      	movs	r0, r0
 800117c:	0000      	movs	r0, r0
	...

08001180 <INA219_ReadShuntVolage>:

	return (result);// / ina219_currentDivider_mA );
}

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001188:	2101      	movs	r1, #1
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff8c 	bl	80010a8 <Read16>
 8001190:	4603      	mov	r3, r0
 8001192:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01);
 8001194:	89fb      	ldrh	r3, [r7, #14]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f934 	bl	8000404 <__aeabi_i2d>
 800119c:	a308      	add	r3, pc, #32	@ (adr r3, 80011c0 <INA219_ReadShuntVolage+0x40>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff f999 	bl	80004d8 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fc6b 	bl	8000a88 <__aeabi_d2uiz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29b      	uxth	r3, r3
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	47ae147b 	.word	0x47ae147b
 80011c4:	3f847ae1 	.word	0x3f847ae1

080011c8 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 80011d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011d4:	2100      	movs	r1, #0
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff88 	bl	80010ec <Write16>
	HAL_Delay(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f000 fdf5 	bl	8001dcc <HAL_Delay>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	461a      	mov	r2, r3
 80011fa:	2105      	movs	r1, #5
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff75 	bl	80010ec <Write16>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	461a      	mov	r2, r3
 800121a:	2100      	movs	r1, #0
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff65 	bl	80010ec <Write16>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <INA219_setCalibration_32V_1A>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_32V_1A(INA219_t *ina219)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001234:	f643 139f 	movw	r3, #14751	@ 0x399f
 8001238:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 10240;
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <INA219_setCalibration_32V_1A+0x40>)
 800123c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8001240:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 25;    // Current LSB = 40uA per bit (1000/40 = 25)
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <INA219_setCalibration_32V_1A+0x44>)
 8001244:	2219      	movs	r2, #25
 8001246:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0.8f; // Power LSB = 800uW per bit
 8001248:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <INA219_setCalibration_32V_1A+0x48>)
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 800124e:	4b07      	ldr	r3, [pc, #28]	@ (800126c <INA219_setCalibration_32V_1A+0x40>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ffc8 	bl	80011ea <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800125a:	89fb      	ldrh	r3, [r7, #14]
 800125c:	4619      	mov	r1, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffd3 	bl	800120a <INA219_setConfig>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000328 	.word	0x20000328
 8001270:	2000032a 	.word	0x2000032a
 8001274:	2000032c 	.word	0x2000032c

08001278 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	4613      	mov	r3, r2
 8001284:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	79fa      	ldrb	r2, [r7, #7]
 8001290:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <INA219_Init+0x5c>)
 8001294:	2200      	movs	r2, #0
 8001296:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <INA219_Init+0x60>)
 800129a:	2200      	movs	r2, #0
 800129c:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	b299      	uxth	r1, r3
 80012a6:	2302      	movs	r3, #2
 80012a8:	2203      	movs	r2, #3
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f002 ff12 	bl	80040d4 <HAL_I2C_IsDeviceReady>
 80012b0:	4603      	mov	r3, r0
 80012b2:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d107      	bne.n	80012ca <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff ff84 	bl	80011c8 <INA219_Reset>
		INA219_setCalibration_32V_1A(ina219);
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff ffb3 	bl	800122c <INA219_setCalibration_32V_1A>

		return 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <INA219_Init+0x54>
	}

	else
	{
		return 0;
 80012ca:	2300      	movs	r3, #0
	}
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000032a 	.word	0x2000032a
 80012d8:	2000032c 	.word	0x2000032c

080012dc <HAL_ADC_ConvCpltCallback>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


uint8_t conv_complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){ conv_complete=1; }
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x18>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	20000346 	.word	0x20000346

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b092      	sub	sp, #72	@ 0x48
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f000 fd03 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f8f3 	bl	80014ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f7ff fdaf 	bl	8000e68 <MX_GPIO_Init>
  MX_DMA_Init();
 800130a:	f7ff fd8f 	bl	8000e2c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800130e:	f000 fc5f 	bl	8001bd0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001312:	f7ff fc5f 	bl	8000bd4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001316:	f000 fbb1 	bl	8001a7c <MX_TIM3_Init>
  MX_I2C1_Init();
 800131a:	f7ff fdfd 	bl	8000f18 <MX_I2C1_Init>
  MX_I2C2_Init();
 800131e:	f7ff fe29 	bl	8000f74 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
//timer
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001322:	210c      	movs	r1, #12
 8001324:	4864      	ldr	r0, [pc, #400]	@ (80014b8 <main+0x1c0>)
 8001326:	f004 fa1d 	bl	8005764 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, htim3.Init.Period/2);
 800132a:	4b63      	ldr	r3, [pc, #396]	@ (80014b8 <main+0x1c0>)
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	4b62      	ldr	r3, [pc, #392]	@ (80014b8 <main+0x1c0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	0852      	lsrs	r2, r2, #1
 8001334:	641a      	str	r2, [r3, #64]	@ 0x40

  //adc
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8001336:	2202      	movs	r2, #2
 8001338:	4960      	ldr	r1, [pc, #384]	@ (80014bc <main+0x1c4>)
 800133a:	4861      	ldr	r0, [pc, #388]	@ (80014c0 <main+0x1c8>)
 800133c:	f000 fe42 	bl	8001fc4 <HAL_ADC_Start_DMA>

// INA219
  //while(!INA219_Init(&ina219, &hi2c2, INA219_ADDRESS));
  INA219_Init(&ina219, &hi2c2, INA219_ADDRESS);
 8001340:	2240      	movs	r2, #64	@ 0x40
 8001342:	4960      	ldr	r1, [pc, #384]	@ (80014c4 <main+0x1cc>)
 8001344:	4860      	ldr	r0, [pc, #384]	@ (80014c8 <main+0x1d0>)
 8001346:	f7ff ff97 	bl	8001278 <INA219_Init>
  //INA219_setCalibration_32V_2A(&ina219);
  INA219_setCalibration_32V_1A(&ina219);
 800134a:	485f      	ldr	r0, [pc, #380]	@ (80014c8 <main+0x1d0>)
 800134c:	f7ff ff6e 	bl	800122c <INA219_setCalibration_32V_1A>
  //INA219_setCalibration_16V_400mA(&ina219);
  HAL_StatusTypeDef statusI2c = 0x00;
 8001350:	2300      	movs	r3, #0
 8001352:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1) {

	leer_promediado(&cell_mas, &cell_menos);
 8001356:	495d      	ldr	r1, [pc, #372]	@ (80014cc <main+0x1d4>)
 8001358:	485d      	ldr	r0, [pc, #372]	@ (80014d0 <main+0x1d8>)
 800135a:	f000 f923 	bl	80015a4 <leer_promediado>
	cell_menos = cell_menos * 3.3 / 4.096 * 1.1;
 800135e:	4b5b      	ldr	r3, [pc, #364]	@ (80014cc <main+0x1d4>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f84e 	bl	8000404 <__aeabi_i2d>
 8001368:	a34d      	add	r3, pc, #308	@ (adr r3, 80014a0 <main+0x1a8>)
 800136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136e:	f7ff f8b3 	bl	80004d8 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	a34b      	add	r3, pc, #300	@ (adr r3, 80014a8 <main+0x1b0>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff f9d4 	bl	800072c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	a348      	add	r3, pc, #288	@ (adr r3, 80014b0 <main+0x1b8>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7ff f8a1 	bl	80004d8 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fb73 	bl	8000a88 <__aeabi_d2uiz>
 80013a2:	4603      	mov	r3, r0
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b49      	ldr	r3, [pc, #292]	@ (80014cc <main+0x1d4>)
 80013a8:	801a      	strh	r2, [r3, #0]
	cell_mas = cell_mas * 3.3 / 4.096 * 1.1;
 80013aa:	4b49      	ldr	r3, [pc, #292]	@ (80014d0 <main+0x1d8>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f828 	bl	8000404 <__aeabi_i2d>
 80013b4:	a33a      	add	r3, pc, #232	@ (adr r3, 80014a0 <main+0x1a8>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff f88d 	bl	80004d8 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	a338      	add	r3, pc, #224	@ (adr r3, 80014a8 <main+0x1b0>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7ff f9ae 	bl	800072c <__aeabi_ddiv>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4610      	mov	r0, r2
 80013d6:	4619      	mov	r1, r3
 80013d8:	a335      	add	r3, pc, #212	@ (adr r3, 80014b0 <main+0x1b8>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f87b 	bl	80004d8 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff fb4d 	bl	8000a88 <__aeabi_d2uiz>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b37      	ldr	r3, [pc, #220]	@ (80014d0 <main+0x1d8>)
 80013f4:	801a      	strh	r2, [r3, #0]

	//escribo
	BQ29330_config();
 80013f6:	f7ff fcf3 	bl	8000de0 <BQ29330_config>

    char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "%u \n", cell_mas);
 80013fa:	4b35      	ldr	r3, [pc, #212]	@ (80014d0 <main+0x1d8>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	1d38      	adds	r0, r7, #4
 8001400:	4a34      	ldr	r2, [pc, #208]	@ (80014d4 <main+0x1dc>)
 8001402:	2140      	movs	r1, #64	@ 0x40
 8001404:	f005 fe1a 	bl	800703c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe fea0 	bl	8000150 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	1d39      	adds	r1, r7, #4
 8001416:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800141a:	482f      	ldr	r0, [pc, #188]	@ (80014d8 <main+0x1e0>)
 800141c:	f004 fdce 	bl	8005fbc <HAL_UART_Transmit>

    snprintf(buffer, BUFFER_SIZE, "%u \n", current);
 8001420:	4b2e      	ldr	r3, [pc, #184]	@ (80014dc <main+0x1e4>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	1d38      	adds	r0, r7, #4
 8001426:	4a2b      	ldr	r2, [pc, #172]	@ (80014d4 <main+0x1dc>)
 8001428:	2140      	movs	r1, #64	@ 0x40
 800142a:	f005 fe07 	bl	800703c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe fe8d 	bl	8000150 <strlen>
 8001436:	4603      	mov	r3, r0
 8001438:	b29a      	uxth	r2, r3
 800143a:	1d39      	adds	r1, r7, #4
 800143c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001440:	4825      	ldr	r0, [pc, #148]	@ (80014d8 <main+0x1e0>)
 8001442:	f004 fdbb 	bl	8005fbc <HAL_UART_Transmit>

    //update the struct with the values in the bq reading them with I2c
	statusI2c = BMSreadAll();
 8001446:	f000 f8f7 	bl	8001638 <BMSreadAll>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	sendMSGS(statusI2c);
 8001450:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f95d 	bl	8001714 <sendMSGS>

	BMSlogic();
 800145a:	f000 f965 	bl	8001728 <BMSlogic>

    //INA219_setPowerMode(&ina219, INA219_CONFIG_MODE_ADCOFF);//apago el adc para guardar energia
    vbus = INA219_ReadBusVoltage(&ina219);
 800145e:	481a      	ldr	r0, [pc, #104]	@ (80014c8 <main+0x1d0>)
 8001460:	f7ff fe68 	bl	8001134 <INA219_ReadBusVoltage>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <main+0x1e8>)
 800146a:	801a      	strh	r2, [r3, #0]
    vshunt = INA219_ReadShuntVolage(&ina219);
 800146c:	4816      	ldr	r0, [pc, #88]	@ (80014c8 <main+0x1d0>)
 800146e:	f7ff fe87 	bl	8001180 <INA219_ReadShuntVolage>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <main+0x1ec>)
 8001478:	801a      	strh	r2, [r3, #0]
    current = INA219_ReadCurrent_raw(&ina219) ;
 800147a:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <main+0x1d0>)
 800147c:	f7ff fe6d 	bl	800115a <INA219_ReadCurrent_raw>
 8001480:	4603      	mov	r3, r0
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <main+0x1e4>)
 8001486:	801a      	strh	r2, [r3, #0]



	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001488:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800148c:	4816      	ldr	r0, [pc, #88]	@ (80014e8 <main+0x1f0>)
 800148e:	f001 fdeb 	bl	8003068 <HAL_GPIO_TogglePin>
	HAL_Delay(2000); // 1 segundo de delay
 8001492:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001496:	f000 fc99 	bl	8001dcc <HAL_Delay>
while (1) {
 800149a:	bf00      	nop
 800149c:	e75b      	b.n	8001356 <main+0x5e>
 800149e:	bf00      	nop
 80014a0:	66666666 	.word	0x66666666
 80014a4:	400a6666 	.word	0x400a6666
 80014a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80014ac:	4010624d 	.word	0x4010624d
 80014b0:	9999999a 	.word	0x9999999a
 80014b4:	3ff19999 	.word	0x3ff19999
 80014b8:	2000034c 	.word	0x2000034c
 80014bc:	20000330 	.word	0x20000330
 80014c0:	2000020c 	.word	0x2000020c
 80014c4:	200002d4 	.word	0x200002d4
 80014c8:	20000338 	.word	0x20000338
 80014cc:	20000336 	.word	0x20000336
 80014d0:	20000334 	.word	0x20000334
 80014d4:	0800aa98 	.word	0x0800aa98
 80014d8:	20000394 	.word	0x20000394
 80014dc:	20000344 	.word	0x20000344
 80014e0:	20000340 	.word	0x20000340
 80014e4:	20000342 	.word	0x20000342
 80014e8:	40011000 	.word	0x40011000

080014ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b094      	sub	sp, #80	@ 0x50
 80014f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014f6:	2228      	movs	r2, #40	@ 0x28
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f006 fd42 	bl	8007f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151c:	2301      	movs	r3, #1
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001520:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152a:	2301      	movs	r3, #1
 800152c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152e:	2302      	movs	r3, #2
 8001530:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001532:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001536:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001538:	2300      	movs	r3, #0
 800153a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001540:	4618      	mov	r0, r3
 8001542:	f003 fbf9 	bl	8004d38 <HAL_RCC_OscConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800154c:	f000 f932 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001550:	230f      	movs	r3, #15
 8001552:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001560:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001562:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fe64 	bl	800523c <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800157a:	f000 f91b 	bl	80017b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800157e:	2302      	movs	r3, #2
 8001580:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001582:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001586:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	4618      	mov	r0, r3
 800158c:	f003 ffe4 	bl	8005558 <HAL_RCCEx_PeriphCLKConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001596:	f000 f90d 	bl	80017b4 <Error_Handler>
  }
}
 800159a:	bf00      	nop
 800159c:	3750      	adds	r7, #80	@ 0x50
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <leer_promediado>:

/* USER CODE BEGIN 4 */


void leer_promediado(uint16_t *cell_mas,uint16_t *cell_menos) {
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
	uint32_t cell_mas_total = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
	uint32_t cell_menos_total = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < NUM_SAMPLES ; i++) {
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	e01e      	b.n	80015fa <leer_promediado+0x56>
	    while(!conv_complete);
 80015bc:	bf00      	nop
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <leer_promediado+0x88>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0fb      	beq.n	80015be <leer_promediado+0x1a>

	    *cell_mas = (uint16_t) rawValues[0];
 80015c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <leer_promediado+0x8c>)
 80015c8:	881a      	ldrh	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	801a      	strh	r2, [r3, #0]
	    *cell_menos = (uint16_t) rawValues[1];
 80015ce:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <leer_promediado+0x8c>)
 80015d0:	885a      	ldrh	r2, [r3, #2]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	801a      	strh	r2, [r3, #0]

	    cell_mas_total += *cell_mas;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	4413      	add	r3, r2
 80015e0:	617b      	str	r3, [r7, #20]
	    cell_menos_total += *cell_menos;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4413      	add	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]

	    conv_complete = 0;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <leer_promediado+0x88>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_SAMPLES ; i++) {
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	3301      	adds	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80015fe:	d9dd      	bls.n	80015bc <leer_promediado+0x18>
	}

	// Promedio final
	*cell_mas = cell_mas_total / NUM_SAMPLES;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	4a0c      	ldr	r2, [pc, #48]	@ (8001634 <leer_promediado+0x90>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	801a      	strh	r2, [r3, #0]
	*cell_menos = cell_menos_total / NUM_SAMPLES;
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <leer_promediado+0x90>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	099b      	lsrs	r3, r3, #6
 800161a:	b29a      	uxth	r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	801a      	strh	r2, [r3, #0]

}
 8001620:	bf00      	nop
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000346 	.word	0x20000346
 8001630:	20000330 	.word	0x20000330
 8001634:	51eb851f 	.word	0x51eb851f

08001638 <BMSreadAll>:


HAL_StatusTypeDef BMSreadAll(){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef statusI2c = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_STATUS, 					&bq.BQ29330_status);
 8001642:	492b      	ldr	r1, [pc, #172]	@ (80016f0 <BMSreadAll+0xb8>)
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff fb83 	bl	8000d50 <BQ29330_ReadFunctionControl>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4313      	orrs	r3, r2
 8001652:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_OUTPUT_CONTROL, 			&bq.BQ29330_output_countrol);
 8001654:	4927      	ldr	r1, [pc, #156]	@ (80016f4 <BMSreadAll+0xbc>)
 8001656:	2001      	movs	r0, #1
 8001658:	f7ff fb7a 	bl	8000d50 <BQ29330_ReadFunctionControl>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	4313      	orrs	r3, r2
 8001664:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_STATE_CONTROL, 			&bq.BQ29330_state_countrol);
 8001666:	4924      	ldr	r1, [pc, #144]	@ (80016f8 <BMSreadAll+0xc0>)
 8001668:	2002      	movs	r0, #2
 800166a:	f7ff fb71 	bl	8000d50 <BQ29330_ReadFunctionControl>
 800166e:	4603      	mov	r3, r0
 8001670:	461a      	mov	r2, r3
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4313      	orrs	r3, r2
 8001676:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_FUNCTION_CONTROL, 		&bq.BQ29330_function_control);
 8001678:	4920      	ldr	r1, [pc, #128]	@ (80016fc <BMSreadAll+0xc4>)
 800167a:	2003      	movs	r0, #3
 800167c:	f7ff fb68 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001680:	4603      	mov	r3, r0
 8001682:	461a      	mov	r2, r3
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	4313      	orrs	r3, r2
 8001688:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_CELL, 					&bq.BQ29330_cell);
 800168a:	491d      	ldr	r1, [pc, #116]	@ (8001700 <BMSreadAll+0xc8>)
 800168c:	2004      	movs	r0, #4
 800168e:	f7ff fb5f 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4313      	orrs	r3, r2
 800169a:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_OLV, 						&bq.BQ29330_OLV);
 800169c:	4919      	ldr	r1, [pc, #100]	@ (8001704 <BMSreadAll+0xcc>)
 800169e:	2005      	movs	r0, #5
 80016a0:	f7ff fb56 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_OLD, 						&bq.BQ29330_OLD);
 80016ae:	4916      	ldr	r1, [pc, #88]	@ (8001708 <BMSreadAll+0xd0>)
 80016b0:	2006      	movs	r0, #6
 80016b2:	f7ff fb4d 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	4313      	orrs	r3, r2
 80016be:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_SCC, 						&bq.BQ29330_SCC);
 80016c0:	4912      	ldr	r1, [pc, #72]	@ (800170c <BMSreadAll+0xd4>)
 80016c2:	2007      	movs	r0, #7
 80016c4:	f7ff fb44 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_SCD, 						&bq.BQ29330_SCD);
 80016d2:	490f      	ldr	r1, [pc, #60]	@ (8001710 <BMSreadAll+0xd8>)
 80016d4:	2008      	movs	r0, #8
 80016d6:	f7ff fb3b 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	71fb      	strb	r3, [r7, #7]

	return statusI2c;
 80016e4:	79fb      	ldrb	r3, [r7, #7]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000010 	.word	0x20000010
 80016f4:	20000011 	.word	0x20000011
 80016f8:	20000012 	.word	0x20000012
 80016fc:	20000013 	.word	0x20000013
 8001700:	20000014 	.word	0x20000014
 8001704:	20000015 	.word	0x20000015
 8001708:	20000016 	.word	0x20000016
 800170c:	20000017 	.word	0x20000017
 8001710:	20000018 	.word	0x20000018

08001714 <sendMSGS>:

void sendMSGS(HAL_StatusTypeDef statusI2c) {
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
	//ina219
	sendUsartMsg("\nvbus ", 								vbus);
	sendUsartMsg("shunt ", 								vshunt * 4);
	sendUsartMsg("current ", 							current * 0.95);
	*/
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <BMSlogic>:

void BMSlogic(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	//reseteo el estatus register
    if(bq.BQ29330_status != 0){
 800172c:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <BMSlogic+0x80>)
 800172e:	7c1b      	ldrb	r3, [r3, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00a      	beq.n	800174a <BMSlogic+0x22>
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, 0x06);
 8001734:	2106      	movs	r1, #6
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff fb34 	bl	8000da4 <BQ29330_WriteRegister>
        HAL_Delay(10);
 800173c:	200a      	movs	r0, #10
 800173e:	f000 fb45 	bl	8001dcc <HAL_Delay>
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, 0x07);
 8001742:	2107      	movs	r1, #7
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff fb2d 	bl	8000da4 <BQ29330_WriteRegister>
    }

    //cierro las llaves por OV o UV
    if(cell_mas - cell_menos < 6000/18){
 800174a:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <BMSlogic+0x84>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <BMSlogic+0x88>)
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 800175a:	dc0c      	bgt.n	8001776 <BMSlogic+0x4e>
    	bq.BQ29330_output_countrol  &= ~(1U << 1);
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <BMSlogic+0x80>)
 800175e:	7c5b      	ldrb	r3, [r3, #17]
 8001760:	f023 0302 	bic.w	r3, r3, #2
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <BMSlogic+0x80>)
 8001768:	745a      	strb	r2, [r3, #17]
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, bq.BQ29330_output_countrol);
 800176a:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <BMSlogic+0x80>)
 800176c:	7c5b      	ldrb	r3, [r3, #17]
 800176e:	4619      	mov	r1, r3
 8001770:	2001      	movs	r0, #1
 8001772:	f7ff fb17 	bl	8000da4 <BQ29330_WriteRegister>
    }

    if(cell_mas - cell_menos > 8400/18){
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <BMSlogic+0x84>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <BMSlogic+0x88>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f5b3 7fe9 	cmp.w	r3, #466	@ 0x1d2
 8001786:	dd0c      	ble.n	80017a2 <BMSlogic+0x7a>
    	bq.BQ29330_output_countrol &= ~(1U << 2);
 8001788:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <BMSlogic+0x80>)
 800178a:	7c5b      	ldrb	r3, [r3, #17]
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <BMSlogic+0x80>)
 8001794:	745a      	strb	r2, [r3, #17]
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, bq.BQ29330_output_countrol);
 8001796:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <BMSlogic+0x80>)
 8001798:	7c5b      	ldrb	r3, [r3, #17]
 800179a:	4619      	mov	r1, r3
 800179c:	2001      	movs	r0, #1
 800179e:	f7ff fb01 	bl	8000da4 <BQ29330_WriteRegister>
    }

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000334 	.word	0x20000334
 80017b0:	20000336 	.word	0x20000336

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <Error_Handler+0x8>

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017c6:	4b27      	ldr	r3, [pc, #156]	@ (8001864 <HAL_MspInit+0xa4>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	4a26      	ldr	r2, [pc, #152]	@ (8001864 <HAL_MspInit+0xa4>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6193      	str	r3, [r2, #24]
 80017d2:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <HAL_MspInit+0xa4>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <HAL_MspInit+0xa4>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a20      	ldr	r2, [pc, #128]	@ (8001864 <HAL_MspInit+0xa4>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	61d3      	str	r3, [r2, #28]
 80017ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001864 <HAL_MspInit+0xa4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 2, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2102      	movs	r1, #2
 80017fa:	f06f 000b 	mvn.w	r0, #11
 80017fe:	f001 f872 	bl	80028e6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2102      	movs	r1, #2
 8001806:	f06f 000a 	mvn.w	r0, #10
 800180a:	f001 f86c 	bl	80028e6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 2, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2102      	movs	r1, #2
 8001812:	f06f 0009 	mvn.w	r0, #9
 8001816:	f001 f866 	bl	80028e6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2102      	movs	r1, #2
 800181e:	f06f 0004 	mvn.w	r0, #4
 8001822:	f001 f860 	bl	80028e6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2102      	movs	r1, #2
 800182a:	f06f 0003 	mvn.w	r0, #3
 800182e:	f001 f85a 	bl	80028e6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2102      	movs	r1, #2
 8001836:	f06f 0001 	mvn.w	r0, #1
 800183a:	f001 f854 	bl	80028e6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_MspInit+0xa8>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	4a04      	ldr	r2, [pc, #16]	@ (8001868 <HAL_MspInit+0xa8>)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <NMI_Handler+0x4>

08001874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <MemManage_Handler+0x4>

08001884 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <UsageFault_Handler+0x4>

08001894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018bc:	f000 fa6a 	bl	8001d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <DMA1_Channel1_IRQHandler+0x10>)
 80018ca:	f001 f8fd 	bl	8002ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000023c 	.word	0x2000023c

080018d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <ADC1_2_IRQHandler+0x10>)
 80018de:	f000 fc4f 	bl	8002180 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000020c 	.word	0x2000020c

080018ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return 1;
 80018f0:	2301      	movs	r3, #1
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <_kill>:

int _kill(int pid, int sig)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001904:	f006 fb4a 	bl	8007f9c <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	2216      	movs	r2, #22
 800190c:	601a      	str	r2, [r3, #0]
  return -1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_exit>:

void _exit (int status)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001922:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ffe7 	bl	80018fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <_exit+0x12>

08001930 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	e00a      	b.n	8001958 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001942:	f3af 8000 	nop.w
 8001946:	4601      	mov	r1, r0
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	60ba      	str	r2, [r7, #8]
 800194e:	b2ca      	uxtb	r2, r1
 8001950:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf0      	blt.n	8001942 <_read+0x12>
  }

  return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e009      	b.n	8001990 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf1      	blt.n	800197c <_write+0x12>
  }
  return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_close>:

int _close(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c8:	605a      	str	r2, [r3, #4]
  return 0;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <_isatty>:

int _isatty(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b085      	sub	sp, #20
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
	...

08001a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a0c:	4a14      	ldr	r2, [pc, #80]	@ (8001a60 <_sbrk+0x5c>)
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <_sbrk+0x60>)
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a18:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a20:	4b11      	ldr	r3, [pc, #68]	@ (8001a68 <_sbrk+0x64>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <_sbrk+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d207      	bcs.n	8001a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a34:	f006 fab2 	bl	8007f9c <__errno>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a42:	e009      	b.n	8001a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a44:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <_sbrk+0x64>)
 8001a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20005000 	.word	0x20005000
 8001a64:	00000400 	.word	0x00000400
 8001a68:	20000348 	.word	0x20000348
 8001a6c:	20000530 	.word	0x20000530

08001a70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr

08001a7c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	@ 0x28
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a82:	f107 0320 	add.w	r3, r7, #32
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
 8001a9a:	615a      	str	r2, [r3, #20]
 8001a9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <MX_TIM3_Init+0xac>)
 8001aa0:	4a22      	ldr	r2, [pc, #136]	@ (8001b2c <MX_TIM3_Init+0xb0>)
 8001aa2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <MX_TIM3_Init+0xac>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <MX_TIM3_Init+0xac>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 490;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <MX_TIM3_Init+0xac>)
 8001ab2:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8001ab6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <MX_TIM3_Init+0xac>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <MX_TIM3_Init+0xac>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ac4:	4818      	ldr	r0, [pc, #96]	@ (8001b28 <MX_TIM3_Init+0xac>)
 8001ac6:	f003 fdfd 	bl	80056c4 <HAL_TIM_PWM_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001ad0:	f7ff fe70 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001adc:	f107 0320 	add.w	r3, r7, #32
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4811      	ldr	r0, [pc, #68]	@ (8001b28 <MX_TIM3_Init+0xac>)
 8001ae4:	f004 f9bc 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001aee:	f7ff fe61 	bl	80017b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af2:	2360      	movs	r3, #96	@ 0x60
 8001af4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	220c      	movs	r2, #12
 8001b06:	4619      	mov	r1, r3
 8001b08:	4807      	ldr	r0, [pc, #28]	@ (8001b28 <MX_TIM3_Init+0xac>)
 8001b0a:	f003 fecd 	bl	80058a8 <HAL_TIM_PWM_ConfigChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b14:	f7ff fe4e 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b18:	4803      	ldr	r0, [pc, #12]	@ (8001b28 <MX_TIM3_Init+0xac>)
 8001b1a:	f000 f827 	bl	8001b6c <HAL_TIM_MspPostInit>

}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	@ 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000034c 	.word	0x2000034c
 8001b2c:	40000400 	.word	0x40000400

08001b30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a09      	ldr	r2, [pc, #36]	@ (8001b64 <HAL_TIM_PWM_MspInit+0x34>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d10b      	bne.n	8001b5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <HAL_TIM_PWM_MspInit+0x38>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a08      	ldr	r2, [pc, #32]	@ (8001b68 <HAL_TIM_PWM_MspInit+0x38>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_TIM_PWM_MspInit+0x38>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	40000400 	.word	0x40000400
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc4 <HAL_TIM_MspPostInit+0x58>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d117      	bne.n	8001bbc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <HAL_TIM_MspPostInit+0x5c>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc8 <HAL_TIM_MspPostInit+0x5c>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <HAL_TIM_MspPostInit+0x5c>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2302      	movs	r3, #2
 8001bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4805      	ldr	r0, [pc, #20]	@ (8001bcc <HAL_TIM_MspPostInit+0x60>)
 8001bb8:	f001 f8ba 	bl	8002d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40000400 	.word	0x40000400
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40010c00 	.word	0x40010c00

08001bd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <MX_USART1_UART_Init+0x50>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bdc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001c08:	f004 f988 	bl	8005f1c <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c12:	f7ff fdcf 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000394 	.word	0x20000394
 8001c20:	40013800 	.word	0x40013800

08001c24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb0 <HAL_UART_MspInit+0x8c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d131      	bne.n	8001ca8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_UART_MspInit+0x90>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb4 <HAL_UART_MspInit+0x90>)
 8001c4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_UART_MspInit+0x90>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <HAL_UART_MspInit+0x90>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a14      	ldr	r2, [pc, #80]	@ (8001cb4 <HAL_UART_MspInit+0x90>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <HAL_UART_MspInit+0x90>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 0310 	add.w	r3, r7, #16
 8001c86:	4619      	mov	r1, r3
 8001c88:	480b      	ldr	r0, [pc, #44]	@ (8001cb8 <HAL_UART_MspInit+0x94>)
 8001c8a:	f001 f851 	bl	8002d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <HAL_UART_MspInit+0x94>)
 8001ca4:	f001 f844 	bl	8002d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010800 	.word	0x40010800

08001cbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cbc:	f7ff fed8 	bl	8001a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc0:	480b      	ldr	r0, [pc, #44]	@ (8001cf0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cc2:	490c      	ldr	r1, [pc, #48]	@ (8001cf4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a09      	ldr	r2, [pc, #36]	@ (8001cfc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cd8:	4c09      	ldr	r4, [pc, #36]	@ (8001d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f006 f95f 	bl	8007fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cea:	f7ff fb05 	bl	80012f8 <main>
  bx lr
 8001cee:	4770      	bx	lr
  ldr r0, =_sdata
 8001cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001cf8:	0800af04 	.word	0x0800af04
  ldr r2, =_sbss
 8001cfc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001d00:	2000052c 	.word	0x2000052c

08001d04 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d04:	e7fe      	b.n	8001d04 <CAN1_RX1_IRQHandler>
	...

08001d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <HAL_Init+0x28>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a07      	ldr	r2, [pc, #28]	@ (8001d30 <HAL_Init+0x28>)
 8001d12:	f043 0310 	orr.w	r3, r3, #16
 8001d16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f000 fdd9 	bl	80028d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1e:	200f      	movs	r0, #15
 8001d20:	f000 f808 	bl	8001d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d24:	f7ff fd4c 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40022000 	.word	0x40022000

08001d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d3c:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_InitTick+0x54>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_InitTick+0x58>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fdf1 	bl	800293a <HAL_SYSTICK_Config>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00e      	b.n	8001d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d80a      	bhi.n	8001d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d70:	f000 fdb9 	bl	80028e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d74:	4a06      	ldr	r2, [pc, #24]	@ (8001d90 <HAL_InitTick+0x5c>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2000001c 	.word	0x2000001c
 8001d8c:	20000024 	.word	0x20000024
 8001d90:	20000020 	.word	0x20000020

08001d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <HAL_IncTick+0x1c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <HAL_IncTick+0x20>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	4a03      	ldr	r2, [pc, #12]	@ (8001db4 <HAL_IncTick+0x20>)
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	20000024 	.word	0x20000024
 8001db4:	200003dc 	.word	0x200003dc

08001db8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b02      	ldr	r3, [pc, #8]	@ (8001dc8 <HAL_GetTick+0x10>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	200003dc 	.word	0x200003dc

08001dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff fff0 	bl	8001db8 <HAL_GetTick>
 8001dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001de4:	d005      	beq.n	8001df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_Delay+0x44>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df2:	bf00      	nop
 8001df4:	f7ff ffe0 	bl	8001db8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d8f7      	bhi.n	8001df4 <HAL_Delay+0x28>
  {
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000024 	.word	0x20000024

08001e14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0be      	b.n	8001fb4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d109      	bne.n	8001e58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe ff0c 	bl	8000c70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fbbd 	bl	80025d8 <ADC_ConversionStop_Disable>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f040 8099 	bne.w	8001fa2 <HAL_ADC_Init+0x18e>
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 8095 	bne.w	8001fa2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e80:	f023 0302 	bic.w	r3, r3, #2
 8001e84:	f043 0202 	orr.w	r2, r3, #2
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	7b1b      	ldrb	r3, [r3, #12]
 8001e9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eac:	d003      	beq.n	8001eb6 <HAL_ADC_Init+0xa2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d102      	bne.n	8001ebc <HAL_ADC_Init+0xa8>
 8001eb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eba:	e000      	b.n	8001ebe <HAL_ADC_Init+0xaa>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7d1b      	ldrb	r3, [r3, #20]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d119      	bne.n	8001f00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7b1b      	ldrb	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	035a      	lsls	r2, r3, #13
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	e00b      	b.n	8001f00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eec:	f043 0220 	orr.w	r2, r3, #32
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef8:	f043 0201 	orr.w	r2, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	4b28      	ldr	r3, [pc, #160]	@ (8001fbc <HAL_ADC_Init+0x1a8>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	68b9      	ldr	r1, [r7, #8]
 8001f24:	430b      	orrs	r3, r1
 8001f26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f30:	d003      	beq.n	8001f3a <HAL_ADC_Init+0x126>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d104      	bne.n	8001f44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	051b      	lsls	r3, r3, #20
 8001f42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f4a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <HAL_ADC_Init+0x1ac>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d10b      	bne.n	8001f80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f7e:	e018      	b.n	8001fb2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f84:	f023 0312 	bic.w	r3, r3, #18
 8001f88:	f043 0210 	orr.w	r2, r3, #16
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fa0:	e007      	b.n	8001fb2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	f043 0210 	orr.w	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	ffe1f7fd 	.word	0xffe1f7fd
 8001fc0:	ff1f0efe 	.word	0xff1f0efe

08001fc4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a64      	ldr	r2, [pc, #400]	@ (800216c <HAL_ADC_Start_DMA+0x1a8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d004      	beq.n	8001fe8 <HAL_ADC_Start_DMA+0x24>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a63      	ldr	r2, [pc, #396]	@ (8002170 <HAL_ADC_Start_DMA+0x1ac>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d106      	bne.n	8001ff6 <HAL_ADC_Start_DMA+0x32>
 8001fe8:	4b60      	ldr	r3, [pc, #384]	@ (800216c <HAL_ADC_Start_DMA+0x1a8>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 80b3 	bne.w	800215c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_Start_DMA+0x40>
 8002000:	2302      	movs	r3, #2
 8002002:	e0ae      	b.n	8002162 <HAL_ADC_Start_DMA+0x19e>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fa89 	bl	8002524 <ADC_Enable>
 8002012:	4603      	mov	r3, r0
 8002014:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002016:	7dfb      	ldrb	r3, [r7, #23]
 8002018:	2b00      	cmp	r3, #0
 800201a:	f040 809a 	bne.w	8002152 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002022:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002026:	f023 0301 	bic.w	r3, r3, #1
 800202a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a4e      	ldr	r2, [pc, #312]	@ (8002170 <HAL_ADC_Start_DMA+0x1ac>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d105      	bne.n	8002048 <HAL_ADC_Start_DMA+0x84>
 800203c:	4b4b      	ldr	r3, [pc, #300]	@ (800216c <HAL_ADC_Start_DMA+0x1a8>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d115      	bne.n	8002074 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205e:	2b00      	cmp	r3, #0
 8002060:	d026      	beq.n	80020b0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002066:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800206a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002072:	e01d      	b.n	80020b0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002078:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a39      	ldr	r2, [pc, #228]	@ (800216c <HAL_ADC_Start_DMA+0x1a8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d004      	beq.n	8002094 <HAL_ADC_Start_DMA+0xd0>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a38      	ldr	r2, [pc, #224]	@ (8002170 <HAL_ADC_Start_DMA+0x1ac>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d10d      	bne.n	80020b0 <HAL_ADC_Start_DMA+0xec>
 8002094:	4b35      	ldr	r3, [pc, #212]	@ (800216c <HAL_ADC_Start_DMA+0x1a8>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020a8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c0:	f023 0206 	bic.w	r2, r3, #6
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020c8:	e002      	b.n	80020d0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a25      	ldr	r2, [pc, #148]	@ (8002174 <HAL_ADC_Start_DMA+0x1b0>)
 80020de:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4a24      	ldr	r2, [pc, #144]	@ (8002178 <HAL_ADC_Start_DMA+0x1b4>)
 80020e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4a23      	ldr	r2, [pc, #140]	@ (800217c <HAL_ADC_Start_DMA+0x1b8>)
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0202 	mvn.w	r2, #2
 80020f8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002108:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a18      	ldr	r0, [r3, #32]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	334c      	adds	r3, #76	@ 0x4c
 8002114:	4619      	mov	r1, r3
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f000 fc75 	bl	8002a08 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002128:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800212c:	d108      	bne.n	8002140 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800213c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800213e:	e00f      	b.n	8002160 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800214e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002150:	e006      	b.n	8002160 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800215a:	e001      	b.n	8002160 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002160:	7dfb      	ldrb	r3, [r7, #23]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40012400 	.word	0x40012400
 8002170:	40012800 	.word	0x40012800
 8002174:	0800265b 	.word	0x0800265b
 8002178:	080026d7 	.word	0x080026d7
 800217c:	080026f3 	.word	0x080026f3

08002180 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d03e      	beq.n	8002220 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d039      	beq.n	8002220 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021d2:	d11d      	bne.n	8002210 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d119      	bne.n	8002210 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0220 	bic.w	r2, r2, #32
 80021ea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff f863 	bl	80012dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f06f 0212 	mvn.w	r2, #18
 800221e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002226:	2b00      	cmp	r3, #0
 8002228:	d04d      	beq.n	80022c6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d048      	beq.n	80022c6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002244:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002256:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800225a:	d012      	beq.n	8002282 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002266:	2b00      	cmp	r3, #0
 8002268:	d125      	bne.n	80022b6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002274:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002278:	d11d      	bne.n	80022b6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800227e:	2b00      	cmp	r3, #0
 8002280:	d119      	bne.n	80022b6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002290:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002296:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fa35 	bl	8002726 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 020c 	mvn.w	r2, #12
 80022c4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d012      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00d      	beq.n	80022f6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f812 	bl	8002310 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0201 	mvn.w	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x20>
 8002350:	2302      	movs	r3, #2
 8002352:	e0dc      	b.n	800250e <HAL_ADC_ConfigChannel+0x1da>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b06      	cmp	r3, #6
 8002362:	d81c      	bhi.n	800239e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	3b05      	subs	r3, #5
 8002376:	221f      	movs	r2, #31
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	4019      	ands	r1, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3b05      	subs	r3, #5
 8002390:	fa00 f203 	lsl.w	r2, r0, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	635a      	str	r2, [r3, #52]	@ 0x34
 800239c:	e03c      	b.n	8002418 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d81c      	bhi.n	80023e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	3b23      	subs	r3, #35	@ 0x23
 80023b8:	221f      	movs	r2, #31
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	4019      	ands	r1, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	3b23      	subs	r3, #35	@ 0x23
 80023d2:	fa00 f203 	lsl.w	r2, r0, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80023de:	e01b      	b.n	8002418 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	3b41      	subs	r3, #65	@ 0x41
 80023f2:	221f      	movs	r2, #31
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4019      	ands	r1, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	3b41      	subs	r3, #65	@ 0x41
 800240c:	fa00 f203 	lsl.w	r2, r0, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b09      	cmp	r3, #9
 800241e:	d91c      	bls.n	800245a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68d9      	ldr	r1, [r3, #12]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	3b1e      	subs	r3, #30
 8002432:	2207      	movs	r2, #7
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	4019      	ands	r1, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6898      	ldr	r0, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	3b1e      	subs	r3, #30
 800244c:	fa00 f203 	lsl.w	r2, r0, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	e019      	b.n	800248e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6919      	ldr	r1, [r3, #16]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	2207      	movs	r2, #7
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	4019      	ands	r1, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6898      	ldr	r0, [r3, #8]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	fa00 f203 	lsl.w	r2, r0, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b10      	cmp	r3, #16
 8002494:	d003      	beq.n	800249e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800249a:	2b11      	cmp	r3, #17
 800249c:	d132      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002518 <HAL_ADC_ConfigChannel+0x1e4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d125      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d126      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80024c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d11a      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ce:	4b13      	ldr	r3, [pc, #76]	@ (800251c <HAL_ADC_ConfigChannel+0x1e8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a13      	ldr	r2, [pc, #76]	@ (8002520 <HAL_ADC_ConfigChannel+0x1ec>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	0c9a      	lsrs	r2, r3, #18
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024e4:	e002      	b.n	80024ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f9      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x1b2>
 80024f2:	e007      	b.n	8002504 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	f043 0220 	orr.w	r2, r3, #32
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	40012400 	.word	0x40012400
 800251c:	2000001c 	.word	0x2000001c
 8002520:	431bde83 	.word	0x431bde83

08002524 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b01      	cmp	r3, #1
 8002540:	d040      	beq.n	80025c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002552:	4b1f      	ldr	r3, [pc, #124]	@ (80025d0 <ADC_Enable+0xac>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1f      	ldr	r2, [pc, #124]	@ (80025d4 <ADC_Enable+0xb0>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	0c9b      	lsrs	r3, r3, #18
 800255e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002560:	e002      	b.n	8002568 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	3b01      	subs	r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f9      	bne.n	8002562 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800256e:	f7ff fc23 	bl	8001db8 <HAL_GetTick>
 8002572:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002574:	e01f      	b.n	80025b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002576:	f7ff fc1f 	bl	8001db8 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d918      	bls.n	80025b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d011      	beq.n	80025b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002596:	f043 0210 	orr.w	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e007      	b.n	80025c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d1d8      	bne.n	8002576 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	2000001c 	.word	0x2000001c
 80025d4:	431bde83 	.word	0x431bde83

080025d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d12e      	bne.n	8002650 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 0201 	bic.w	r2, r2, #1
 8002600:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002602:	f7ff fbd9 	bl	8001db8 <HAL_GetTick>
 8002606:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002608:	e01b      	b.n	8002642 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800260a:	f7ff fbd5 	bl	8001db8 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d914      	bls.n	8002642 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10d      	bne.n	8002642 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	f043 0210 	orr.w	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e007      	b.n	8002652 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d0dc      	beq.n	800260a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002670:	2b00      	cmp	r3, #0
 8002672:	d127      	bne.n	80026c4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002678:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800268a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800268e:	d115      	bne.n	80026bc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002694:	2b00      	cmp	r3, #0
 8002696:	d111      	bne.n	80026bc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d105      	bne.n	80026bc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b4:	f043 0201 	orr.w	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7fe fe0d 	bl	80012dc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80026c2:	e004      	b.n	80026ce <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4798      	blx	r3
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f7ff fe0a 	bl	80022fe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002704:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002710:	f043 0204 	orr.w	r2, r3, #4
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff fe02 	bl	8002322 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002748:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002760:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800276a:	4a04      	ldr	r2, [pc, #16]	@ (800277c <__NVIC_SetPriorityGrouping+0x44>)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60d3      	str	r3, [r2, #12]
}
 8002770:	bf00      	nop
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002784:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <__NVIC_GetPriorityGrouping+0x18>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	0a1b      	lsrs	r3, r3, #8
 800278a:	f003 0307 	and.w	r3, r3, #7
}
 800278e:	4618      	mov	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	db0b      	blt.n	80027c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4906      	ldr	r1, [pc, #24]	@ (80027d0 <__NVIC_EnableIRQ+0x34>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2001      	movs	r0, #1
 80027be:	fa00 f202 	lsl.w	r2, r0, r2
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db0a      	blt.n	80027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	490c      	ldr	r1, [pc, #48]	@ (8002820 <__NVIC_SetPriority+0x4c>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027fc:	e00a      	b.n	8002814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4908      	ldr	r1, [pc, #32]	@ (8002824 <__NVIC_SetPriority+0x50>)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3b04      	subs	r3, #4
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	440b      	add	r3, r1
 8002812:	761a      	strb	r2, [r3, #24]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	e000e100 	.word	0xe000e100
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	@ 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	bf28      	it	cs
 8002846:	2304      	movcs	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	2b06      	cmp	r3, #6
 8002850:	d902      	bls.n	8002858 <NVIC_EncodePriority+0x30>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3b03      	subs	r3, #3
 8002856:	e000      	b.n	800285a <NVIC_EncodePriority+0x32>
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	401a      	ands	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43d9      	mvns	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	4313      	orrs	r3, r2
         );
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	@ 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800289c:	d301      	bcc.n	80028a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800289e:	2301      	movs	r3, #1
 80028a0:	e00f      	b.n	80028c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028a2:	4a0a      	ldr	r2, [pc, #40]	@ (80028cc <SysTick_Config+0x40>)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028aa:	210f      	movs	r1, #15
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028b0:	f7ff ff90 	bl	80027d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b4:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <SysTick_Config+0x40>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ba:	4b04      	ldr	r3, [pc, #16]	@ (80028cc <SysTick_Config+0x40>)
 80028bc:	2207      	movs	r2, #7
 80028be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	e000e010 	.word	0xe000e010

080028d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff2d 	bl	8002738 <__NVIC_SetPriorityGrouping>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b086      	sub	sp, #24
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028f8:	f7ff ff42 	bl	8002780 <__NVIC_GetPriorityGrouping>
 80028fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	6978      	ldr	r0, [r7, #20]
 8002904:	f7ff ff90 	bl	8002828 <NVIC_EncodePriority>
 8002908:	4602      	mov	r2, r0
 800290a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff5f 	bl	80027d4 <__NVIC_SetPriority>
}
 8002916:	bf00      	nop
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff35 	bl	800279c <__NVIC_EnableIRQ>
}
 8002932:	bf00      	nop
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ffa2 	bl	800288c <SysTick_Config>
 8002948:	4603      	mov	r3, r0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e043      	b.n	80029f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <HAL_DMA_Init+0xa8>)
 8002972:	4413      	add	r3, r2
 8002974:	4a22      	ldr	r2, [pc, #136]	@ (8002a00 <HAL_DMA_Init+0xac>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	009a      	lsls	r2, r3, #2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a1f      	ldr	r2, [pc, #124]	@ (8002a04 <HAL_DMA_Init+0xb0>)
 8002986:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800299e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80029a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	bffdfff8 	.word	0xbffdfff8
 8002a00:	cccccccd 	.word	0xcccccccd
 8002a04:	40020000 	.word	0x40020000

08002a08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_DMA_Start_IT+0x20>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e04b      	b.n	8002ac0 <HAL_DMA_Start_IT+0xb8>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d13a      	bne.n	8002ab2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 f937 	bl	8002cd4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 020e 	orr.w	r2, r2, #14
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e00f      	b.n	8002aa0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0204 	bic.w	r2, r2, #4
 8002a8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 020a 	orr.w	r2, r2, #10
 8002a9e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e005      	b.n	8002abe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
 8002abc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d04f      	beq.n	8002b90 <HAL_DMA_IRQHandler+0xc8>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d04a      	beq.n	8002b90 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d107      	bne.n	8002b18 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0204 	bic.w	r2, r2, #4
 8002b16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a66      	ldr	r2, [pc, #408]	@ (8002cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d029      	beq.n	8002b76 <HAL_DMA_IRQHandler+0xae>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a65      	ldr	r2, [pc, #404]	@ (8002cbc <HAL_DMA_IRQHandler+0x1f4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d022      	beq.n	8002b72 <HAL_DMA_IRQHandler+0xaa>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a63      	ldr	r2, [pc, #396]	@ (8002cc0 <HAL_DMA_IRQHandler+0x1f8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01a      	beq.n	8002b6c <HAL_DMA_IRQHandler+0xa4>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a62      	ldr	r2, [pc, #392]	@ (8002cc4 <HAL_DMA_IRQHandler+0x1fc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d012      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x9e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a60      	ldr	r2, [pc, #384]	@ (8002cc8 <HAL_DMA_IRQHandler+0x200>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00a      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x98>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a5f      	ldr	r2, [pc, #380]	@ (8002ccc <HAL_DMA_IRQHandler+0x204>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d102      	bne.n	8002b5a <HAL_DMA_IRQHandler+0x92>
 8002b54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b58:	e00e      	b.n	8002b78 <HAL_DMA_IRQHandler+0xb0>
 8002b5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b5e:	e00b      	b.n	8002b78 <HAL_DMA_IRQHandler+0xb0>
 8002b60:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b64:	e008      	b.n	8002b78 <HAL_DMA_IRQHandler+0xb0>
 8002b66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b6a:	e005      	b.n	8002b78 <HAL_DMA_IRQHandler+0xb0>
 8002b6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b70:	e002      	b.n	8002b78 <HAL_DMA_IRQHandler+0xb0>
 8002b72:	2340      	movs	r3, #64	@ 0x40
 8002b74:	e000      	b.n	8002b78 <HAL_DMA_IRQHandler+0xb0>
 8002b76:	2304      	movs	r3, #4
 8002b78:	4a55      	ldr	r2, [pc, #340]	@ (8002cd0 <HAL_DMA_IRQHandler+0x208>)
 8002b7a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8094 	beq.w	8002cae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b8e:	e08e      	b.n	8002cae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	2202      	movs	r2, #2
 8002b96:	409a      	lsls	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d056      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x186>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d051      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 020a 	bic.w	r2, r2, #10
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a38      	ldr	r2, [pc, #224]	@ (8002cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d029      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x166>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a37      	ldr	r2, [pc, #220]	@ (8002cbc <HAL_DMA_IRQHandler+0x1f4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d022      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x162>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a35      	ldr	r2, [pc, #212]	@ (8002cc0 <HAL_DMA_IRQHandler+0x1f8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01a      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x15c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a34      	ldr	r2, [pc, #208]	@ (8002cc4 <HAL_DMA_IRQHandler+0x1fc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d012      	beq.n	8002c1e <HAL_DMA_IRQHandler+0x156>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a32      	ldr	r2, [pc, #200]	@ (8002cc8 <HAL_DMA_IRQHandler+0x200>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00a      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x150>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a31      	ldr	r2, [pc, #196]	@ (8002ccc <HAL_DMA_IRQHandler+0x204>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d102      	bne.n	8002c12 <HAL_DMA_IRQHandler+0x14a>
 8002c0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c10:	e00e      	b.n	8002c30 <HAL_DMA_IRQHandler+0x168>
 8002c12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c16:	e00b      	b.n	8002c30 <HAL_DMA_IRQHandler+0x168>
 8002c18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c1c:	e008      	b.n	8002c30 <HAL_DMA_IRQHandler+0x168>
 8002c1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c22:	e005      	b.n	8002c30 <HAL_DMA_IRQHandler+0x168>
 8002c24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c28:	e002      	b.n	8002c30 <HAL_DMA_IRQHandler+0x168>
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e000      	b.n	8002c30 <HAL_DMA_IRQHandler+0x168>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	4a27      	ldr	r2, [pc, #156]	@ (8002cd0 <HAL_DMA_IRQHandler+0x208>)
 8002c32:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d034      	beq.n	8002cae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c4c:	e02f      	b.n	8002cae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	2208      	movs	r2, #8
 8002c54:	409a      	lsls	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d028      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x1e8>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d023      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 020e 	bic.w	r2, r2, #14
 8002c76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c80:	2101      	movs	r1, #1
 8002c82:	fa01 f202 	lsl.w	r2, r1, r2
 8002c86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
    }
  }
  return;
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
}
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40020008 	.word	0x40020008
 8002cbc:	4002001c 	.word	0x4002001c
 8002cc0:	40020030 	.word	0x40020030
 8002cc4:	40020044 	.word	0x40020044
 8002cc8:	40020058 	.word	0x40020058
 8002ccc:	4002006c 	.word	0x4002006c
 8002cd0:	40020000 	.word	0x40020000

08002cd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cea:	2101      	movs	r1, #1
 8002cec:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d108      	bne.n	8002d14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d12:	e007      	b.n	8002d24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	60da      	str	r2, [r3, #12]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b08b      	sub	sp, #44	@ 0x2c
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d42:	e169      	b.n	8003018 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d44:	2201      	movs	r2, #1
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	f040 8158 	bne.w	8003012 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4a9a      	ldr	r2, [pc, #616]	@ (8002fd0 <HAL_GPIO_Init+0x2a0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d05e      	beq.n	8002e2a <HAL_GPIO_Init+0xfa>
 8002d6c:	4a98      	ldr	r2, [pc, #608]	@ (8002fd0 <HAL_GPIO_Init+0x2a0>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d875      	bhi.n	8002e5e <HAL_GPIO_Init+0x12e>
 8002d72:	4a98      	ldr	r2, [pc, #608]	@ (8002fd4 <HAL_GPIO_Init+0x2a4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d058      	beq.n	8002e2a <HAL_GPIO_Init+0xfa>
 8002d78:	4a96      	ldr	r2, [pc, #600]	@ (8002fd4 <HAL_GPIO_Init+0x2a4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d86f      	bhi.n	8002e5e <HAL_GPIO_Init+0x12e>
 8002d7e:	4a96      	ldr	r2, [pc, #600]	@ (8002fd8 <HAL_GPIO_Init+0x2a8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d052      	beq.n	8002e2a <HAL_GPIO_Init+0xfa>
 8002d84:	4a94      	ldr	r2, [pc, #592]	@ (8002fd8 <HAL_GPIO_Init+0x2a8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d869      	bhi.n	8002e5e <HAL_GPIO_Init+0x12e>
 8002d8a:	4a94      	ldr	r2, [pc, #592]	@ (8002fdc <HAL_GPIO_Init+0x2ac>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d04c      	beq.n	8002e2a <HAL_GPIO_Init+0xfa>
 8002d90:	4a92      	ldr	r2, [pc, #584]	@ (8002fdc <HAL_GPIO_Init+0x2ac>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d863      	bhi.n	8002e5e <HAL_GPIO_Init+0x12e>
 8002d96:	4a92      	ldr	r2, [pc, #584]	@ (8002fe0 <HAL_GPIO_Init+0x2b0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d046      	beq.n	8002e2a <HAL_GPIO_Init+0xfa>
 8002d9c:	4a90      	ldr	r2, [pc, #576]	@ (8002fe0 <HAL_GPIO_Init+0x2b0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d85d      	bhi.n	8002e5e <HAL_GPIO_Init+0x12e>
 8002da2:	2b12      	cmp	r3, #18
 8002da4:	d82a      	bhi.n	8002dfc <HAL_GPIO_Init+0xcc>
 8002da6:	2b12      	cmp	r3, #18
 8002da8:	d859      	bhi.n	8002e5e <HAL_GPIO_Init+0x12e>
 8002daa:	a201      	add	r2, pc, #4	@ (adr r2, 8002db0 <HAL_GPIO_Init+0x80>)
 8002dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db0:	08002e2b 	.word	0x08002e2b
 8002db4:	08002e05 	.word	0x08002e05
 8002db8:	08002e17 	.word	0x08002e17
 8002dbc:	08002e59 	.word	0x08002e59
 8002dc0:	08002e5f 	.word	0x08002e5f
 8002dc4:	08002e5f 	.word	0x08002e5f
 8002dc8:	08002e5f 	.word	0x08002e5f
 8002dcc:	08002e5f 	.word	0x08002e5f
 8002dd0:	08002e5f 	.word	0x08002e5f
 8002dd4:	08002e5f 	.word	0x08002e5f
 8002dd8:	08002e5f 	.word	0x08002e5f
 8002ddc:	08002e5f 	.word	0x08002e5f
 8002de0:	08002e5f 	.word	0x08002e5f
 8002de4:	08002e5f 	.word	0x08002e5f
 8002de8:	08002e5f 	.word	0x08002e5f
 8002dec:	08002e5f 	.word	0x08002e5f
 8002df0:	08002e5f 	.word	0x08002e5f
 8002df4:	08002e0d 	.word	0x08002e0d
 8002df8:	08002e21 	.word	0x08002e21
 8002dfc:	4a79      	ldr	r2, [pc, #484]	@ (8002fe4 <HAL_GPIO_Init+0x2b4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e02:	e02c      	b.n	8002e5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	623b      	str	r3, [r7, #32]
          break;
 8002e0a:	e029      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	3304      	adds	r3, #4
 8002e12:	623b      	str	r3, [r7, #32]
          break;
 8002e14:	e024      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	3308      	adds	r3, #8
 8002e1c:	623b      	str	r3, [r7, #32]
          break;
 8002e1e:	e01f      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	330c      	adds	r3, #12
 8002e26:	623b      	str	r3, [r7, #32]
          break;
 8002e28:	e01a      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d102      	bne.n	8002e38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e32:	2304      	movs	r3, #4
 8002e34:	623b      	str	r3, [r7, #32]
          break;
 8002e36:	e013      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d105      	bne.n	8002e4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e40:	2308      	movs	r3, #8
 8002e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	611a      	str	r2, [r3, #16]
          break;
 8002e4a:	e009      	b.n	8002e60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	615a      	str	r2, [r3, #20]
          break;
 8002e56:	e003      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	623b      	str	r3, [r7, #32]
          break;
 8002e5c:	e000      	b.n	8002e60 <HAL_GPIO_Init+0x130>
          break;
 8002e5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2bff      	cmp	r3, #255	@ 0xff
 8002e64:	d801      	bhi.n	8002e6a <HAL_GPIO_Init+0x13a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	e001      	b.n	8002e6e <HAL_GPIO_Init+0x13e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2bff      	cmp	r3, #255	@ 0xff
 8002e74:	d802      	bhi.n	8002e7c <HAL_GPIO_Init+0x14c>
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	e002      	b.n	8002e82 <HAL_GPIO_Init+0x152>
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	3b08      	subs	r3, #8
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	210f      	movs	r1, #15
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	401a      	ands	r2, r3
 8002e94:	6a39      	ldr	r1, [r7, #32]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80b1 	beq.w	8003012 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8002fe8 <HAL_GPIO_Init+0x2b8>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	4a4c      	ldr	r2, [pc, #304]	@ (8002fe8 <HAL_GPIO_Init+0x2b8>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6193      	str	r3, [r2, #24]
 8002ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe8 <HAL_GPIO_Init+0x2b8>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ec8:	4a48      	ldr	r2, [pc, #288]	@ (8002fec <HAL_GPIO_Init+0x2bc>)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ecc:	089b      	lsrs	r3, r3, #2
 8002ece:	3302      	adds	r3, #2
 8002ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	220f      	movs	r2, #15
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a40      	ldr	r2, [pc, #256]	@ (8002ff0 <HAL_GPIO_Init+0x2c0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <HAL_GPIO_Init+0x1ec>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ff4 <HAL_GPIO_Init+0x2c4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00d      	beq.n	8002f18 <HAL_GPIO_Init+0x1e8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a3e      	ldr	r2, [pc, #248]	@ (8002ff8 <HAL_GPIO_Init+0x2c8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d007      	beq.n	8002f14 <HAL_GPIO_Init+0x1e4>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a3d      	ldr	r2, [pc, #244]	@ (8002ffc <HAL_GPIO_Init+0x2cc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d101      	bne.n	8002f10 <HAL_GPIO_Init+0x1e0>
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e006      	b.n	8002f1e <HAL_GPIO_Init+0x1ee>
 8002f10:	2304      	movs	r3, #4
 8002f12:	e004      	b.n	8002f1e <HAL_GPIO_Init+0x1ee>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e002      	b.n	8002f1e <HAL_GPIO_Init+0x1ee>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <HAL_GPIO_Init+0x1ee>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f20:	f002 0203 	and.w	r2, r2, #3
 8002f24:	0092      	lsls	r2, r2, #2
 8002f26:	4093      	lsls	r3, r2
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f2e:	492f      	ldr	r1, [pc, #188]	@ (8002fec <HAL_GPIO_Init+0x2bc>)
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	089b      	lsrs	r3, r3, #2
 8002f34:	3302      	adds	r3, #2
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d006      	beq.n	8002f56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f48:	4b2d      	ldr	r3, [pc, #180]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	492c      	ldr	r1, [pc, #176]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]
 8002f54:	e006      	b.n	8002f64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f56:	4b2a      	ldr	r3, [pc, #168]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	4928      	ldr	r1, [pc, #160]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d006      	beq.n	8002f7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f70:	4b23      	ldr	r3, [pc, #140]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	4922      	ldr	r1, [pc, #136]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60cb      	str	r3, [r1, #12]
 8002f7c:	e006      	b.n	8002f8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f7e:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	491e      	ldr	r1, [pc, #120]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d006      	beq.n	8002fa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f98:	4b19      	ldr	r3, [pc, #100]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	4918      	ldr	r1, [pc, #96]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	604b      	str	r3, [r1, #4]
 8002fa4:	e006      	b.n	8002fb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fa6:	4b16      	ldr	r3, [pc, #88]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	4914      	ldr	r1, [pc, #80]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d021      	beq.n	8003004 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	490e      	ldr	r1, [pc, #56]	@ (8003000 <HAL_GPIO_Init+0x2d0>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e021      	b.n	8003012 <HAL_GPIO_Init+0x2e2>
 8002fce:	bf00      	nop
 8002fd0:	10320000 	.word	0x10320000
 8002fd4:	10310000 	.word	0x10310000
 8002fd8:	10220000 	.word	0x10220000
 8002fdc:	10210000 	.word	0x10210000
 8002fe0:	10120000 	.word	0x10120000
 8002fe4:	10110000 	.word	0x10110000
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	40010800 	.word	0x40010800
 8002ff4:	40010c00 	.word	0x40010c00
 8002ff8:	40011000 	.word	0x40011000
 8002ffc:	40011400 	.word	0x40011400
 8003000:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003004:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <HAL_GPIO_Init+0x304>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	43db      	mvns	r3, r3
 800300c:	4909      	ldr	r1, [pc, #36]	@ (8003034 <HAL_GPIO_Init+0x304>)
 800300e:	4013      	ands	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	3301      	adds	r3, #1
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301e:	fa22 f303 	lsr.w	r3, r2, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	f47f ae8e 	bne.w	8002d44 <HAL_GPIO_Init+0x14>
  }
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	372c      	adds	r7, #44	@ 0x2c
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	40010400 	.word	0x40010400

08003038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	807b      	strh	r3, [r7, #2]
 8003044:	4613      	mov	r3, r2
 8003046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003048:	787b      	ldrb	r3, [r7, #1]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800304e:	887a      	ldrh	r2, [r7, #2]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003054:	e003      	b.n	800305e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003056:	887b      	ldrh	r3, [r7, #2]
 8003058:	041a      	lsls	r2, r3, #16
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	611a      	str	r2, [r3, #16]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4013      	ands	r3, r2
 8003080:	041a      	lsls	r2, r3, #16
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	43d9      	mvns	r1, r3
 8003086:	887b      	ldrh	r3, [r7, #2]
 8003088:	400b      	ands	r3, r1
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	611a      	str	r2, [r3, #16]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
	...

0800309c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e12b      	b.n	8003306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd ff84 	bl	8000fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2224      	movs	r2, #36	@ 0x24
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003100:	f002 f9e4 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 8003104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a81      	ldr	r2, [pc, #516]	@ (8003310 <HAL_I2C_Init+0x274>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d807      	bhi.n	8003120 <HAL_I2C_Init+0x84>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a80      	ldr	r2, [pc, #512]	@ (8003314 <HAL_I2C_Init+0x278>)
 8003114:	4293      	cmp	r3, r2
 8003116:	bf94      	ite	ls
 8003118:	2301      	movls	r3, #1
 800311a:	2300      	movhi	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e006      	b.n	800312e <HAL_I2C_Init+0x92>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	4a7d      	ldr	r2, [pc, #500]	@ (8003318 <HAL_I2C_Init+0x27c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	bf94      	ite	ls
 8003128:	2301      	movls	r3, #1
 800312a:	2300      	movhi	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e0e7      	b.n	8003306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4a78      	ldr	r2, [pc, #480]	@ (800331c <HAL_I2C_Init+0x280>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	0c9b      	lsrs	r3, r3, #18
 8003140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4a6a      	ldr	r2, [pc, #424]	@ (8003310 <HAL_I2C_Init+0x274>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d802      	bhi.n	8003170 <HAL_I2C_Init+0xd4>
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	3301      	adds	r3, #1
 800316e:	e009      	b.n	8003184 <HAL_I2C_Init+0xe8>
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	4a69      	ldr	r2, [pc, #420]	@ (8003320 <HAL_I2C_Init+0x284>)
 800317c:	fba2 2303 	umull	r2, r3, r2, r3
 8003180:	099b      	lsrs	r3, r3, #6
 8003182:	3301      	adds	r3, #1
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	430b      	orrs	r3, r1
 800318a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003196:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	495c      	ldr	r1, [pc, #368]	@ (8003310 <HAL_I2C_Init+0x274>)
 80031a0:	428b      	cmp	r3, r1
 80031a2:	d819      	bhi.n	80031d8 <HAL_I2C_Init+0x13c>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1e59      	subs	r1, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b2:	1c59      	adds	r1, r3, #1
 80031b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031b8:	400b      	ands	r3, r1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_I2C_Init+0x138>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1e59      	subs	r1, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031cc:	3301      	adds	r3, #1
 80031ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d2:	e051      	b.n	8003278 <HAL_I2C_Init+0x1dc>
 80031d4:	2304      	movs	r3, #4
 80031d6:	e04f      	b.n	8003278 <HAL_I2C_Init+0x1dc>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d111      	bne.n	8003204 <HAL_I2C_Init+0x168>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1e58      	subs	r0, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	440b      	add	r3, r1
 80031ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e012      	b.n	800322a <HAL_I2C_Init+0x18e>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1e58      	subs	r0, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	0099      	lsls	r1, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	fbb0 f3f3 	udiv	r3, r0, r3
 800321a:	3301      	adds	r3, #1
 800321c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Init+0x196>
 800322e:	2301      	movs	r3, #1
 8003230:	e022      	b.n	8003278 <HAL_I2C_Init+0x1dc>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10e      	bne.n	8003258 <HAL_I2C_Init+0x1bc>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1e58      	subs	r0, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6859      	ldr	r1, [r3, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	440b      	add	r3, r1
 8003248:	fbb0 f3f3 	udiv	r3, r0, r3
 800324c:	3301      	adds	r3, #1
 800324e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003256:	e00f      	b.n	8003278 <HAL_I2C_Init+0x1dc>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1e58      	subs	r0, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6859      	ldr	r1, [r3, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	0099      	lsls	r1, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	fbb0 f3f3 	udiv	r3, r0, r3
 800326e:	3301      	adds	r3, #1
 8003270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003274:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	6809      	ldr	r1, [r1, #0]
 800327c:	4313      	orrs	r3, r2
 800327e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6911      	ldr	r1, [r2, #16]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68d2      	ldr	r2, [r2, #12]
 80032b2:	4311      	orrs	r1, r2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	430b      	orrs	r3, r1
 80032ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	000186a0 	.word	0x000186a0
 8003314:	001e847f 	.word	0x001e847f
 8003318:	003d08ff 	.word	0x003d08ff
 800331c:	431bde83 	.word	0x431bde83
 8003320:	10624dd3 	.word	0x10624dd3

08003324 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af02      	add	r7, sp, #8
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	607a      	str	r2, [r7, #4]
 800332e:	461a      	mov	r2, r3
 8003330:	460b      	mov	r3, r1
 8003332:	817b      	strh	r3, [r7, #10]
 8003334:	4613      	mov	r3, r2
 8003336:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7fe fd3e 	bl	8001db8 <HAL_GetTick>
 800333c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b20      	cmp	r3, #32
 8003348:	f040 80e0 	bne.w	800350c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	2319      	movs	r3, #25
 8003352:	2201      	movs	r2, #1
 8003354:	4970      	ldr	r1, [pc, #448]	@ (8003518 <HAL_I2C_Master_Transmit+0x1f4>)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f001 fab8 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003362:	2302      	movs	r3, #2
 8003364:	e0d3      	b.n	800350e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_I2C_Master_Transmit+0x50>
 8003370:	2302      	movs	r3, #2
 8003372:	e0cc      	b.n	800350e <HAL_I2C_Master_Transmit+0x1ea>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d007      	beq.n	800339a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2221      	movs	r2, #33	@ 0x21
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2210      	movs	r2, #16
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	893a      	ldrh	r2, [r7, #8]
 80033ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4a50      	ldr	r2, [pc, #320]	@ (800351c <HAL_I2C_Master_Transmit+0x1f8>)
 80033da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033dc:	8979      	ldrh	r1, [r7, #10]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	6a3a      	ldr	r2, [r7, #32]
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 ffa4 	bl	8004330 <I2C_MasterRequestWrite>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e08d      	b.n	800350e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003408:	e066      	b.n	80034d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	6a39      	ldr	r1, [r7, #32]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f001 fb76 	bl	8004b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00d      	beq.n	8003436 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	2b04      	cmp	r3, #4
 8003420:	d107      	bne.n	8003432 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003430:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e06b      	b.n	800350e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343a:	781a      	ldrb	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d11b      	bne.n	80034ac <HAL_I2C_Master_Transmit+0x188>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	d017      	beq.n	80034ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	6a39      	ldr	r1, [r7, #32]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f001 fb6d 	bl	8004b90 <I2C_WaitOnBTFFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00d      	beq.n	80034d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d107      	bne.n	80034d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e01a      	b.n	800350e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d194      	bne.n	800340a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
  }
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	00100002 	.word	0x00100002
 800351c:	ffff0000 	.word	0xffff0000

08003520 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	@ 0x30
 8003524:	af02      	add	r7, sp, #8
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	461a      	mov	r2, r3
 800352c:	460b      	mov	r3, r1
 800352e:	817b      	strh	r3, [r7, #10]
 8003530:	4613      	mov	r3, r2
 8003532:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003538:	f7fe fc3e 	bl	8001db8 <HAL_GetTick>
 800353c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b20      	cmp	r3, #32
 8003548:	f040 824b 	bne.w	80039e2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	2319      	movs	r3, #25
 8003552:	2201      	movs	r2, #1
 8003554:	497f      	ldr	r1, [pc, #508]	@ (8003754 <HAL_I2C_Master_Receive+0x234>)
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f001 f9b8 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	e23e      	b.n	80039e4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_I2C_Master_Receive+0x54>
 8003570:	2302      	movs	r3, #2
 8003572:	e237      	b.n	80039e4 <HAL_I2C_Master_Receive+0x4c4>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b01      	cmp	r3, #1
 8003588:	d007      	beq.n	800359a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2222      	movs	r2, #34	@ 0x22
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2210      	movs	r2, #16
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	893a      	ldrh	r2, [r7, #8]
 80035ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a5f      	ldr	r2, [pc, #380]	@ (8003758 <HAL_I2C_Master_Receive+0x238>)
 80035da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035dc:	8979      	ldrh	r1, [r7, #10]
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 ff26 	bl	8004434 <I2C_MasterRequestRead>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e1f8      	b.n	80039e4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d113      	bne.n	8003622 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	e1cc      	b.n	80039bc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003626:	2b01      	cmp	r3, #1
 8003628:	d11e      	bne.n	8003668 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003638:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800363a:	b672      	cpsid	i
}
 800363c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003662:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003664:	b662      	cpsie	i
}
 8003666:	e035      	b.n	80036d4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366c:	2b02      	cmp	r3, #2
 800366e:	d11e      	bne.n	80036ae <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800367e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003680:	b672      	cpsid	i
}
 8003682:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036aa:	b662      	cpsie	i
}
 80036ac:	e012      	b.n	80036d4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80036d4:	e172      	b.n	80039bc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036da:	2b03      	cmp	r3, #3
 80036dc:	f200 811f 	bhi.w	800391e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d123      	bne.n	8003730 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f001 fa97 	bl	8004c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e173      	b.n	80039e4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800372e:	e145      	b.n	80039bc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003734:	2b02      	cmp	r3, #2
 8003736:	d152      	bne.n	80037de <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	2200      	movs	r2, #0
 8003740:	4906      	ldr	r1, [pc, #24]	@ (800375c <HAL_I2C_Master_Receive+0x23c>)
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f001 f8c2 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d008      	beq.n	8003760 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e148      	b.n	80039e4 <HAL_I2C_Master_Receive+0x4c4>
 8003752:	bf00      	nop
 8003754:	00100002 	.word	0x00100002
 8003758:	ffff0000 	.word	0xffff0000
 800375c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003760:	b672      	cpsid	i
}
 8003762:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037a6:	b662      	cpsie	i
}
 80037a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037dc:	e0ee      	b.n	80039bc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e4:	2200      	movs	r2, #0
 80037e6:	4981      	ldr	r1, [pc, #516]	@ (80039ec <HAL_I2C_Master_Receive+0x4cc>)
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f001 f86f 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0f5      	b.n	80039e4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003806:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003808:	b672      	cpsid	i
}
 800380a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800383e:	4b6c      	ldr	r3, [pc, #432]	@ (80039f0 <HAL_I2C_Master_Receive+0x4d0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	08db      	lsrs	r3, r3, #3
 8003844:	4a6b      	ldr	r2, [pc, #428]	@ (80039f4 <HAL_I2C_Master_Receive+0x4d4>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0a1a      	lsrs	r2, r3, #8
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	00da      	lsls	r2, r3, #3
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	3b01      	subs	r3, #1
 800385c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d118      	bne.n	8003896 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	f043 0220 	orr.w	r2, r3, #32
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003886:	b662      	cpsie	i
}
 8003888:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0a6      	b.n	80039e4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d1d9      	bne.n	8003858 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80038e6:	b662      	cpsie	i
}
 80038e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800391c:	e04e      	b.n	80039bc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003920:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f001 f97c 	bl	8004c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e058      	b.n	80039e4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b04      	cmp	r3, #4
 8003970:	d124      	bne.n	80039bc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003976:	2b03      	cmp	r3, #3
 8003978:	d107      	bne.n	800398a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003988:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f47f ae88 	bne.w	80036d6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e000      	b.n	80039e4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
  }
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3728      	adds	r7, #40	@ 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	00010004 	.word	0x00010004
 80039f0:	2000001c 	.word	0x2000001c
 80039f4:	14f8b589 	.word	0x14f8b589

080039f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	4608      	mov	r0, r1
 8003a02:	4611      	mov	r1, r2
 8003a04:	461a      	mov	r2, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	817b      	strh	r3, [r7, #10]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	813b      	strh	r3, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a12:	f7fe f9d1 	bl	8001db8 <HAL_GetTick>
 8003a16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	f040 80d9 	bne.w	8003bd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	2319      	movs	r3, #25
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	496d      	ldr	r1, [pc, #436]	@ (8003be4 <HAL_I2C_Mem_Write+0x1ec>)
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 ff4b 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e0cc      	b.n	8003bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <HAL_I2C_Mem_Write+0x56>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e0c5      	b.n	8003bda <HAL_I2C_Mem_Write+0x1e2>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d007      	beq.n	8003a74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2221      	movs	r2, #33	@ 0x21
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2240      	movs	r2, #64	@ 0x40
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a4d      	ldr	r2, [pc, #308]	@ (8003be8 <HAL_I2C_Mem_Write+0x1f0>)
 8003ab4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ab6:	88f8      	ldrh	r0, [r7, #6]
 8003ab8:	893a      	ldrh	r2, [r7, #8]
 8003aba:	8979      	ldrh	r1, [r7, #10]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	9301      	str	r3, [sp, #4]
 8003ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fd82 	bl	80045d0 <I2C_RequestMemoryWrite>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d052      	beq.n	8003b78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e081      	b.n	8003bda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f001 f810 	bl	8004b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00d      	beq.n	8003b02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d107      	bne.n	8003afe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e06b      	b.n	8003bda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	781a      	ldrb	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d11b      	bne.n	8003b78 <HAL_I2C_Mem_Write+0x180>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d017      	beq.n	8003b78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	781a      	ldrb	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b62:	3b01      	subs	r3, #1
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1aa      	bne.n	8003ad6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f001 f803 	bl	8004b90 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00d      	beq.n	8003bac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d107      	bne.n	8003ba8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e016      	b.n	8003bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	00100002 	.word	0x00100002
 8003be8:	ffff0000 	.word	0xffff0000

08003bec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08c      	sub	sp, #48	@ 0x30
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	817b      	strh	r3, [r7, #10]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	813b      	strh	r3, [r7, #8]
 8003c02:	4613      	mov	r3, r2
 8003c04:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c0a:	f7fe f8d5 	bl	8001db8 <HAL_GetTick>
 8003c0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	f040 8250 	bne.w	80040be <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2319      	movs	r3, #25
 8003c24:	2201      	movs	r2, #1
 8003c26:	4982      	ldr	r1, [pc, #520]	@ (8003e30 <HAL_I2C_Mem_Read+0x244>)
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fe4f 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
 8003c36:	e243      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_I2C_Mem_Read+0x5a>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e23c      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4d4>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d007      	beq.n	8003c6c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2222      	movs	r2, #34	@ 0x22
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2240      	movs	r2, #64	@ 0x40
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a62      	ldr	r2, [pc, #392]	@ (8003e34 <HAL_I2C_Mem_Read+0x248>)
 8003cac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cae:	88f8      	ldrh	r0, [r7, #6]
 8003cb0:	893a      	ldrh	r2, [r7, #8]
 8003cb2:	8979      	ldrh	r1, [r7, #10]
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fd1c 	bl	80046fc <I2C_RequestMemoryRead>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e1f8      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d113      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e1cc      	b.n	8004098 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d11e      	bne.n	8003d44 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d16:	b672      	cpsid	i
}
 8003d18:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d40:	b662      	cpsie	i
}
 8003d42:	e035      	b.n	8003db0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d11e      	bne.n	8003d8a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d5c:	b672      	cpsid	i
}
 8003d5e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d86:	b662      	cpsie	i
}
 8003d88:	e012      	b.n	8003db0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d98:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003db0:	e172      	b.n	8004098 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	f200 811f 	bhi.w	8003ffa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d123      	bne.n	8003e0c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 ff29 	bl	8004c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e173      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e0a:	e145      	b.n	8004098 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d152      	bne.n	8003eba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	4906      	ldr	r1, [pc, #24]	@ (8003e38 <HAL_I2C_Mem_Read+0x24c>)
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 fd54 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e148      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4d4>
 8003e2e:	bf00      	nop
 8003e30:	00100002 	.word	0x00100002
 8003e34:	ffff0000 	.word	0xffff0000
 8003e38:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003e3c:	b672      	cpsid	i
}
 8003e3e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e82:	b662      	cpsie	i
}
 8003e84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003eb8:	e0ee      	b.n	8004098 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	4981      	ldr	r1, [pc, #516]	@ (80040c8 <HAL_I2C_Mem_Read+0x4dc>)
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fd01 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0f5      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ee2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee4:	b672      	cpsid	i
}
 8003ee6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f1a:	4b6c      	ldr	r3, [pc, #432]	@ (80040cc <HAL_I2C_Mem_Read+0x4e0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	08db      	lsrs	r3, r3, #3
 8003f20:	4a6b      	ldr	r2, [pc, #428]	@ (80040d0 <HAL_I2C_Mem_Read+0x4e4>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	0a1a      	lsrs	r2, r3, #8
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	00da      	lsls	r2, r3, #3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d118      	bne.n	8003f72 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	f043 0220 	orr.w	r2, r3, #32
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003f62:	b662      	cpsie	i
}
 8003f64:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0a6      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d1d9      	bne.n	8003f34 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691a      	ldr	r2, [r3, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	1c5a      	adds	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003fc2:	b662      	cpsie	i
}
 8003fc4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ff8:	e04e      	b.n	8004098 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ffc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f000 fe0e 	bl	8004c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e058      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b04      	cmp	r3, #4
 800404c:	d124      	bne.n	8004098 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004052:	2b03      	cmp	r3, #3
 8004054:	d107      	bne.n	8004066 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004064:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	f47f ae88 	bne.w	8003db2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3728      	adds	r7, #40	@ 0x28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	00010004 	.word	0x00010004
 80040cc:	2000001c 	.word	0x2000001c
 80040d0:	14f8b589 	.word	0x14f8b589

080040d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	@ 0x28
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	460b      	mov	r3, r1
 80040e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80040e4:	f7fd fe68 	bl	8001db8 <HAL_GetTick>
 80040e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	f040 8111 	bne.w	800431e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2319      	movs	r3, #25
 8004102:	2201      	movs	r2, #1
 8004104:	4988      	ldr	r1, [pc, #544]	@ (8004328 <HAL_I2C_IsDeviceReady+0x254>)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fbe0 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004112:	2302      	movs	r3, #2
 8004114:	e104      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_I2C_IsDeviceReady+0x50>
 8004120:	2302      	movs	r3, #2
 8004122:	e0fd      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x24c>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b01      	cmp	r3, #1
 8004138:	d007      	beq.n	800414a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0201 	orr.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004158:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2224      	movs	r2, #36	@ 0x24
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a70      	ldr	r2, [pc, #448]	@ (800432c <HAL_I2C_IsDeviceReady+0x258>)
 800416c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800417c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2200      	movs	r2, #0
 8004186:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fb9e 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041a4:	d103      	bne.n	80041ae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e0b6      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041b2:	897b      	ldrh	r3, [r7, #10]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80041c2:	f7fd fdf9 	bl	8001db8 <HAL_GetTick>
 80041c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695b      	ldr	r3, [r3, #20]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ec:	bf0c      	ite	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	2300      	movne	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80041f6:	e025      	b.n	8004244 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041f8:	f7fd fdde 	bl	8001db8 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d302      	bcc.n	800420e <HAL_I2C_IsDeviceReady+0x13a>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d103      	bne.n	8004216 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	22a0      	movs	r2, #160	@ 0xa0
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b02      	cmp	r3, #2
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423a:	bf0c      	ite	eq
 800423c:	2301      	moveq	r3, #1
 800423e:	2300      	movne	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2ba0      	cmp	r3, #160	@ 0xa0
 800424e:	d005      	beq.n	800425c <HAL_I2C_IsDeviceReady+0x188>
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <HAL_I2C_IsDeviceReady+0x188>
 8004256:	7dbb      	ldrb	r3, [r7, #22]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0cd      	beq.n	80041f8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b02      	cmp	r3, #2
 8004270:	d129      	bne.n	80042c6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004280:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	613b      	str	r3, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	2319      	movs	r3, #25
 800429e:	2201      	movs	r2, #1
 80042a0:	4921      	ldr	r1, [pc, #132]	@ (8004328 <HAL_I2C_IsDeviceReady+0x254>)
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fb12 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e036      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e02c      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042de:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	2319      	movs	r3, #25
 80042e6:	2201      	movs	r2, #1
 80042e8:	490f      	ldr	r1, [pc, #60]	@ (8004328 <HAL_I2C_IsDeviceReady+0x254>)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 faee 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e012      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	3301      	adds	r3, #1
 80042fe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	429a      	cmp	r2, r3
 8004306:	f4ff af32 	bcc.w	800416e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800431e:	2302      	movs	r3, #2
  }
}
 8004320:	4618      	mov	r0, r3
 8004322:	3720      	adds	r7, #32
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	00100002 	.word	0x00100002
 800432c:	ffff0000 	.word	0xffff0000

08004330 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	607a      	str	r2, [r7, #4]
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	460b      	mov	r3, r1
 800433e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d006      	beq.n	800435a <I2C_MasterRequestWrite+0x2a>
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d003      	beq.n	800435a <I2C_MasterRequestWrite+0x2a>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004358:	d108      	bne.n	800436c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	e00b      	b.n	8004384 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004370:	2b12      	cmp	r3, #18
 8004372:	d107      	bne.n	8004384 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004382:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fa9b 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043aa:	d103      	bne.n	80043b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e035      	b.n	8004424 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043c0:	d108      	bne.n	80043d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043c2:	897b      	ldrh	r3, [r7, #10]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043d0:	611a      	str	r2, [r3, #16]
 80043d2:	e01b      	b.n	800440c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043d4:	897b      	ldrh	r3, [r7, #10]
 80043d6:	11db      	asrs	r3, r3, #7
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	f003 0306 	and.w	r3, r3, #6
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f063 030f 	orn	r3, r3, #15
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	490e      	ldr	r1, [pc, #56]	@ (800442c <I2C_MasterRequestWrite+0xfc>)
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fae4 	bl	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e010      	b.n	8004424 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004402:	897b      	ldrh	r3, [r7, #10]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4907      	ldr	r1, [pc, #28]	@ (8004430 <I2C_MasterRequestWrite+0x100>)
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 fad4 	bl	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	00010008 	.word	0x00010008
 8004430:	00010002 	.word	0x00010002

08004434 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	607a      	str	r2, [r7, #4]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	460b      	mov	r3, r1
 8004442:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004458:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d006      	beq.n	800446e <I2C_MasterRequestRead+0x3a>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d003      	beq.n	800446e <I2C_MasterRequestRead+0x3a>
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800446c:	d108      	bne.n	8004480 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	e00b      	b.n	8004498 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004484:	2b11      	cmp	r3, #17
 8004486:	d107      	bne.n	8004498 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004496:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fa11 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00d      	beq.n	80044cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044be:	d103      	bne.n	80044c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e079      	b.n	80045c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044d4:	d108      	bne.n	80044e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044d6:	897b      	ldrh	r3, [r7, #10]
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	611a      	str	r2, [r3, #16]
 80044e6:	e05f      	b.n	80045a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044e8:	897b      	ldrh	r3, [r7, #10]
 80044ea:	11db      	asrs	r3, r3, #7
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	f003 0306 	and.w	r3, r3, #6
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f063 030f 	orn	r3, r3, #15
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4930      	ldr	r1, [pc, #192]	@ (80045c8 <I2C_MasterRequestRead+0x194>)
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fa5a 	bl	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e054      	b.n	80045c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004516:	897b      	ldrh	r3, [r7, #10]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	4929      	ldr	r1, [pc, #164]	@ (80045cc <I2C_MasterRequestRead+0x198>)
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fa4a 	bl	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e044      	b.n	80045c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800455a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f9af 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00d      	beq.n	8004590 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800457e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004582:	d103      	bne.n	800458c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800458a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e017      	b.n	80045c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004590:	897b      	ldrh	r3, [r7, #10]
 8004592:	11db      	asrs	r3, r3, #7
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0306 	and.w	r3, r3, #6
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f063 030e 	orn	r3, r3, #14
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	4907      	ldr	r1, [pc, #28]	@ (80045cc <I2C_MasterRequestRead+0x198>)
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fa06 	bl	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	00010008 	.word	0x00010008
 80045cc:	00010002 	.word	0x00010002

080045d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	4608      	mov	r0, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	817b      	strh	r3, [r7, #10]
 80045e2:	460b      	mov	r3, r1
 80045e4:	813b      	strh	r3, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	2200      	movs	r2, #0
 8004602:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f960 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004620:	d103      	bne.n	800462a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004628:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e05f      	b.n	80046ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800462e:	897b      	ldrh	r3, [r7, #10]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800463c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	6a3a      	ldr	r2, [r7, #32]
 8004642:	492d      	ldr	r1, [pc, #180]	@ (80046f8 <I2C_RequestMemoryWrite+0x128>)
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f9bb 	bl	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e04c      	b.n	80046ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800466c:	6a39      	ldr	r1, [r7, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fa46 	bl	8004b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	2b04      	cmp	r3, #4
 8004680:	d107      	bne.n	8004692 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004690:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e02b      	b.n	80046ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d105      	bne.n	80046a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800469c:	893b      	ldrh	r3, [r7, #8]
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	611a      	str	r2, [r3, #16]
 80046a6:	e021      	b.n	80046ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046a8:	893b      	ldrh	r3, [r7, #8]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b8:	6a39      	ldr	r1, [r7, #32]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fa20 	bl	8004b00 <I2C_WaitOnTXEFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d107      	bne.n	80046de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e005      	b.n	80046ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046e2:	893b      	ldrh	r3, [r7, #8]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	00010002 	.word	0x00010002

080046fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	4608      	mov	r0, r1
 8004706:	4611      	mov	r1, r2
 8004708:	461a      	mov	r2, r3
 800470a:	4603      	mov	r3, r0
 800470c:	817b      	strh	r3, [r7, #10]
 800470e:	460b      	mov	r3, r1
 8004710:	813b      	strh	r3, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004724:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004734:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	2200      	movs	r2, #0
 800473e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f8c2 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00d      	beq.n	800476a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800475c:	d103      	bne.n	8004766 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004764:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e0aa      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800476a:	897b      	ldrh	r3, [r7, #10]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004778:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	6a3a      	ldr	r2, [r7, #32]
 800477e:	4952      	ldr	r1, [pc, #328]	@ (80048c8 <I2C_RequestMemoryRead+0x1cc>)
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f91d 	bl	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e097      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a8:	6a39      	ldr	r1, [r7, #32]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f9a8 	bl	8004b00 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d107      	bne.n	80047ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e076      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d105      	bne.n	80047e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047d8:	893b      	ldrh	r3, [r7, #8]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	611a      	str	r2, [r3, #16]
 80047e2:	e021      	b.n	8004828 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047e4:	893b      	ldrh	r3, [r7, #8]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047f4:	6a39      	ldr	r1, [r7, #32]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f982 	bl	8004b00 <I2C_WaitOnTXEFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00d      	beq.n	800481e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	2b04      	cmp	r3, #4
 8004808:	d107      	bne.n	800481a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004818:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e050      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800481e:	893b      	ldrh	r3, [r7, #8]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800482a:	6a39      	ldr	r1, [r7, #32]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f967 	bl	8004b00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00d      	beq.n	8004854 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	2b04      	cmp	r3, #4
 800483e:	d107      	bne.n	8004850 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800484e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e035      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004862:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	2200      	movs	r2, #0
 800486c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f82b 	bl	80048cc <I2C_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00d      	beq.n	8004898 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800488a:	d103      	bne.n	8004894 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004892:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e013      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004898:	897b      	ldrh	r3, [r7, #10]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048aa:	6a3a      	ldr	r2, [r7, #32]
 80048ac:	4906      	ldr	r1, [pc, #24]	@ (80048c8 <I2C_RequestMemoryRead+0x1cc>)
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f886 	bl	80049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	00010002 	.word	0x00010002

080048cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	4613      	mov	r3, r2
 80048da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048dc:	e048      	b.n	8004970 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048e4:	d044      	beq.n	8004970 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e6:	f7fd fa67 	bl	8001db8 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d302      	bcc.n	80048fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d139      	bne.n	8004970 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	0c1b      	lsrs	r3, r3, #16
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	d10d      	bne.n	8004922 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	43da      	mvns	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4013      	ands	r3, r2
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	e00c      	b.n	800493c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	43da      	mvns	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	4013      	ands	r3, r2
 800492e:	b29b      	uxth	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	429a      	cmp	r2, r3
 8004940:	d116      	bne.n	8004970 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	f043 0220 	orr.w	r2, r3, #32
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e023      	b.n	80049b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	0c1b      	lsrs	r3, r3, #16
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	d10d      	bne.n	8004996 <I2C_WaitOnFlagUntilTimeout+0xca>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	43da      	mvns	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4013      	ands	r3, r2
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	e00c      	b.n	80049b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	43da      	mvns	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4013      	ands	r3, r2
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d093      	beq.n	80048de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049ce:	e071      	b.n	8004ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049de:	d123      	bne.n	8004a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	f043 0204 	orr.w	r2, r3, #4
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e067      	b.n	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a2e:	d041      	beq.n	8004ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a30:	f7fd f9c2 	bl	8001db8 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d302      	bcc.n	8004a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d136      	bne.n	8004ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d10c      	bne.n	8004a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	43da      	mvns	r2, r3
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bf14      	ite	ne
 8004a62:	2301      	movne	r3, #1
 8004a64:	2300      	moveq	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	e00b      	b.n	8004a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	43da      	mvns	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	4013      	ands	r3, r2
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d016      	beq.n	8004ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa0:	f043 0220 	orr.w	r2, r3, #32
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e021      	b.n	8004af8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	0c1b      	lsrs	r3, r3, #16
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d10c      	bne.n	8004ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	43da      	mvns	r2, r3
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf14      	ite	ne
 8004ad0:	2301      	movne	r3, #1
 8004ad2:	2300      	moveq	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	e00b      	b.n	8004af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	43da      	mvns	r2, r3
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bf14      	ite	ne
 8004aea:	2301      	movne	r3, #1
 8004aec:	2300      	moveq	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f47f af6d 	bne.w	80049d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b0c:	e034      	b.n	8004b78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f8e3 	bl	8004cda <I2C_IsAcknowledgeFailed>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e034      	b.n	8004b88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b24:	d028      	beq.n	8004b78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fd f947 	bl	8001db8 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d11d      	bne.n	8004b78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b46:	2b80      	cmp	r3, #128	@ 0x80
 8004b48:	d016      	beq.n	8004b78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e007      	b.n	8004b88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b82:	2b80      	cmp	r3, #128	@ 0x80
 8004b84:	d1c3      	bne.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b9c:	e034      	b.n	8004c08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f89b 	bl	8004cda <I2C_IsAcknowledgeFailed>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e034      	b.n	8004c18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bb4:	d028      	beq.n	8004c08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb6:	f7fd f8ff 	bl	8001db8 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d11d      	bne.n	8004c08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d016      	beq.n	8004c08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e007      	b.n	8004c18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d1c3      	bne.n	8004b9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c2c:	e049      	b.n	8004cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d119      	bne.n	8004c70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0210 	mvn.w	r2, #16
 8004c44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e030      	b.n	8004cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c70:	f7fd f8a2 	bl	8001db8 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d302      	bcc.n	8004c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d11d      	bne.n	8004cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c90:	2b40      	cmp	r3, #64	@ 0x40
 8004c92:	d016      	beq.n	8004cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e007      	b.n	8004cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ccc:	2b40      	cmp	r3, #64	@ 0x40
 8004cce:	d1ae      	bne.n	8004c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cf0:	d11b      	bne.n	8004d2a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cfa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	f043 0204 	orr.w	r2, r3, #4
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	4770      	bx	lr
	...

08004d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e272      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 8087 	beq.w	8004e66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d58:	4b92      	ldr	r3, [pc, #584]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f003 030c 	and.w	r3, r3, #12
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d00c      	beq.n	8004d7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d64:	4b8f      	ldr	r3, [pc, #572]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 030c 	and.w	r3, r3, #12
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d112      	bne.n	8004d96 <HAL_RCC_OscConfig+0x5e>
 8004d70:	4b8c      	ldr	r3, [pc, #560]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d7c:	d10b      	bne.n	8004d96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d7e:	4b89      	ldr	r3, [pc, #548]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d06c      	beq.n	8004e64 <HAL_RCC_OscConfig+0x12c>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d168      	bne.n	8004e64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e24c      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d9e:	d106      	bne.n	8004dae <HAL_RCC_OscConfig+0x76>
 8004da0:	4b80      	ldr	r3, [pc, #512]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a7f      	ldr	r2, [pc, #508]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004da6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004daa:	6013      	str	r3, [r2, #0]
 8004dac:	e02e      	b.n	8004e0c <HAL_RCC_OscConfig+0xd4>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x98>
 8004db6:	4b7b      	ldr	r3, [pc, #492]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a7a      	ldr	r2, [pc, #488]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004dbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	4b78      	ldr	r3, [pc, #480]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a77      	ldr	r2, [pc, #476]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004dc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e01d      	b.n	8004e0c <HAL_RCC_OscConfig+0xd4>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dd8:	d10c      	bne.n	8004df4 <HAL_RCC_OscConfig+0xbc>
 8004dda:	4b72      	ldr	r3, [pc, #456]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a71      	ldr	r2, [pc, #452]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004de0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	4b6f      	ldr	r3, [pc, #444]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a6e      	ldr	r2, [pc, #440]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	e00b      	b.n	8004e0c <HAL_RCC_OscConfig+0xd4>
 8004df4:	4b6b      	ldr	r3, [pc, #428]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a6a      	ldr	r2, [pc, #424]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	4b68      	ldr	r3, [pc, #416]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a67      	ldr	r2, [pc, #412]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d013      	beq.n	8004e3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e14:	f7fc ffd0 	bl	8001db8 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fc ffcc 	bl	8001db8 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	@ 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e200      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0xe4>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fc ffbc 	bl	8001db8 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e44:	f7fc ffb8 	bl	8001db8 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	@ 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e1ec      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e56:	4b53      	ldr	r3, [pc, #332]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0x10c>
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d063      	beq.n	8004f3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e72:	4b4c      	ldr	r3, [pc, #304]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f003 030c 	and.w	r3, r3, #12
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00b      	beq.n	8004e96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e7e:	4b49      	ldr	r3, [pc, #292]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b08      	cmp	r3, #8
 8004e88:	d11c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x18c>
 8004e8a:	4b46      	ldr	r3, [pc, #280]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d116      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e96:	4b43      	ldr	r3, [pc, #268]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_RCC_OscConfig+0x176>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d001      	beq.n	8004eae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e1c0      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eae:	4b3d      	ldr	r3, [pc, #244]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4939      	ldr	r1, [pc, #228]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ec2:	e03a      	b.n	8004f3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d020      	beq.n	8004f0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ecc:	4b36      	ldr	r3, [pc, #216]	@ (8004fa8 <HAL_RCC_OscConfig+0x270>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed2:	f7fc ff71 	bl	8001db8 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eda:	f7fc ff6d 	bl	8001db8 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e1a1      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eec:	4b2d      	ldr	r3, [pc, #180]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4927      	ldr	r1, [pc, #156]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	600b      	str	r3, [r1, #0]
 8004f0c:	e015      	b.n	8004f3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f0e:	4b26      	ldr	r3, [pc, #152]	@ (8004fa8 <HAL_RCC_OscConfig+0x270>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f14:	f7fc ff50 	bl	8001db8 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f1c:	f7fc ff4c 	bl	8001db8 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e180      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f0      	bne.n	8004f1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d03a      	beq.n	8004fbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d019      	beq.n	8004f82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f4e:	4b17      	ldr	r3, [pc, #92]	@ (8004fac <HAL_RCC_OscConfig+0x274>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f54:	f7fc ff30 	bl	8001db8 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f5c:	f7fc ff2c 	bl	8001db8 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e160      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa4 <HAL_RCC_OscConfig+0x26c>)
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f000 face 	bl	800551c <RCC_Delay>
 8004f80:	e01c      	b.n	8004fbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f82:	4b0a      	ldr	r3, [pc, #40]	@ (8004fac <HAL_RCC_OscConfig+0x274>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f88:	f7fc ff16 	bl	8001db8 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f8e:	e00f      	b.n	8004fb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f90:	f7fc ff12 	bl	8001db8 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d908      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e146      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
 8004fa2:	bf00      	nop
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	42420000 	.word	0x42420000
 8004fac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb0:	4b92      	ldr	r3, [pc, #584]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1e9      	bne.n	8004f90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80a6 	beq.w	8005116 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fce:	4b8b      	ldr	r3, [pc, #556]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10d      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fda:	4b88      	ldr	r3, [pc, #544]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	4a87      	ldr	r2, [pc, #540]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fe4:	61d3      	str	r3, [r2, #28]
 8004fe6:	4b85      	ldr	r3, [pc, #532]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fee:	60bb      	str	r3, [r7, #8]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff6:	4b82      	ldr	r3, [pc, #520]	@ (8005200 <HAL_RCC_OscConfig+0x4c8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d118      	bne.n	8005034 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005002:	4b7f      	ldr	r3, [pc, #508]	@ (8005200 <HAL_RCC_OscConfig+0x4c8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a7e      	ldr	r2, [pc, #504]	@ (8005200 <HAL_RCC_OscConfig+0x4c8>)
 8005008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800500c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500e:	f7fc fed3 	bl	8001db8 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005016:	f7fc fecf 	bl	8001db8 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b64      	cmp	r3, #100	@ 0x64
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e103      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005028:	4b75      	ldr	r3, [pc, #468]	@ (8005200 <HAL_RCC_OscConfig+0x4c8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d106      	bne.n	800504a <HAL_RCC_OscConfig+0x312>
 800503c:	4b6f      	ldr	r3, [pc, #444]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	4a6e      	ldr	r2, [pc, #440]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	6213      	str	r3, [r2, #32]
 8005048:	e02d      	b.n	80050a6 <HAL_RCC_OscConfig+0x36e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10c      	bne.n	800506c <HAL_RCC_OscConfig+0x334>
 8005052:	4b6a      	ldr	r3, [pc, #424]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	4a69      	ldr	r2, [pc, #420]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	6213      	str	r3, [r2, #32]
 800505e:	4b67      	ldr	r3, [pc, #412]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	4a66      	ldr	r2, [pc, #408]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005064:	f023 0304 	bic.w	r3, r3, #4
 8005068:	6213      	str	r3, [r2, #32]
 800506a:	e01c      	b.n	80050a6 <HAL_RCC_OscConfig+0x36e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b05      	cmp	r3, #5
 8005072:	d10c      	bne.n	800508e <HAL_RCC_OscConfig+0x356>
 8005074:	4b61      	ldr	r3, [pc, #388]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	4a60      	ldr	r2, [pc, #384]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 800507a:	f043 0304 	orr.w	r3, r3, #4
 800507e:	6213      	str	r3, [r2, #32]
 8005080:	4b5e      	ldr	r3, [pc, #376]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	4a5d      	ldr	r2, [pc, #372]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	6213      	str	r3, [r2, #32]
 800508c:	e00b      	b.n	80050a6 <HAL_RCC_OscConfig+0x36e>
 800508e:	4b5b      	ldr	r3, [pc, #364]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	4a5a      	ldr	r2, [pc, #360]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	6213      	str	r3, [r2, #32]
 800509a:	4b58      	ldr	r3, [pc, #352]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	4a57      	ldr	r2, [pc, #348]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 80050a0:	f023 0304 	bic.w	r3, r3, #4
 80050a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d015      	beq.n	80050da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ae:	f7fc fe83 	bl	8001db8 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b4:	e00a      	b.n	80050cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b6:	f7fc fe7f 	bl	8001db8 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e0b1      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050cc:	4b4b      	ldr	r3, [pc, #300]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0ee      	beq.n	80050b6 <HAL_RCC_OscConfig+0x37e>
 80050d8:	e014      	b.n	8005104 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050da:	f7fc fe6d 	bl	8001db8 <HAL_GetTick>
 80050de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e0:	e00a      	b.n	80050f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e2:	f7fc fe69 	bl	8001db8 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e09b      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f8:	4b40      	ldr	r3, [pc, #256]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1ee      	bne.n	80050e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d105      	bne.n	8005116 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800510a:	4b3c      	ldr	r3, [pc, #240]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	4a3b      	ldr	r2, [pc, #236]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005110:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005114:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8087 	beq.w	800522e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005120:	4b36      	ldr	r3, [pc, #216]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b08      	cmp	r3, #8
 800512a:	d061      	beq.n	80051f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d146      	bne.n	80051c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005134:	4b33      	ldr	r3, [pc, #204]	@ (8005204 <HAL_RCC_OscConfig+0x4cc>)
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513a:	f7fc fe3d 	bl	8001db8 <HAL_GetTick>
 800513e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005140:	e008      	b.n	8005154 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005142:	f7fc fe39 	bl	8001db8 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e06d      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005154:	4b29      	ldr	r3, [pc, #164]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1f0      	bne.n	8005142 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005168:	d108      	bne.n	800517c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800516a:	4b24      	ldr	r3, [pc, #144]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	4921      	ldr	r1, [pc, #132]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005178:	4313      	orrs	r3, r2
 800517a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800517c:	4b1f      	ldr	r3, [pc, #124]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a19      	ldr	r1, [r3, #32]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	430b      	orrs	r3, r1
 800518e:	491b      	ldr	r1, [pc, #108]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 8005190:	4313      	orrs	r3, r2
 8005192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005194:	4b1b      	ldr	r3, [pc, #108]	@ (8005204 <HAL_RCC_OscConfig+0x4cc>)
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519a:	f7fc fe0d 	bl	8001db8 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a2:	f7fc fe09 	bl	8001db8 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e03d      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051b4:	4b11      	ldr	r3, [pc, #68]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0f0      	beq.n	80051a2 <HAL_RCC_OscConfig+0x46a>
 80051c0:	e035      	b.n	800522e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c2:	4b10      	ldr	r3, [pc, #64]	@ (8005204 <HAL_RCC_OscConfig+0x4cc>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c8:	f7fc fdf6 	bl	8001db8 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fc fdf2 	bl	8001db8 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e026      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051e2:	4b06      	ldr	r3, [pc, #24]	@ (80051fc <HAL_RCC_OscConfig+0x4c4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x498>
 80051ee:	e01e      	b.n	800522e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d107      	bne.n	8005208 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e019      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
 80051fc:	40021000 	.word	0x40021000
 8005200:	40007000 	.word	0x40007000
 8005204:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005208:	4b0b      	ldr	r3, [pc, #44]	@ (8005238 <HAL_RCC_OscConfig+0x500>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	429a      	cmp	r2, r3
 800521a:	d106      	bne.n	800522a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005226:	429a      	cmp	r2, r3
 8005228:	d001      	beq.n	800522e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40021000 	.word	0x40021000

0800523c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e0d0      	b.n	80053f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005250:	4b6a      	ldr	r3, [pc, #424]	@ (80053fc <HAL_RCC_ClockConfig+0x1c0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d910      	bls.n	8005280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b67      	ldr	r3, [pc, #412]	@ (80053fc <HAL_RCC_ClockConfig+0x1c0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 0207 	bic.w	r2, r3, #7
 8005266:	4965      	ldr	r1, [pc, #404]	@ (80053fc <HAL_RCC_ClockConfig+0x1c0>)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800526e:	4b63      	ldr	r3, [pc, #396]	@ (80053fc <HAL_RCC_ClockConfig+0x1c0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0b8      	b.n	80053f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d020      	beq.n	80052ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005298:	4b59      	ldr	r3, [pc, #356]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4a58      	ldr	r2, [pc, #352]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 800529e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80052a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052b0:	4b53      	ldr	r3, [pc, #332]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4a52      	ldr	r2, [pc, #328]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80052b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80052ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052bc:	4b50      	ldr	r3, [pc, #320]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	494d      	ldr	r1, [pc, #308]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d040      	beq.n	800535c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d107      	bne.n	80052f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e2:	4b47      	ldr	r3, [pc, #284]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d115      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e07f      	b.n	80053f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d107      	bne.n	800530a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fa:	4b41      	ldr	r3, [pc, #260]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e073      	b.n	80053f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530a:	4b3d      	ldr	r3, [pc, #244]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e06b      	b.n	80053f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800531a:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f023 0203 	bic.w	r2, r3, #3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4936      	ldr	r1, [pc, #216]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 8005328:	4313      	orrs	r3, r2
 800532a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800532c:	f7fc fd44 	bl	8001db8 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005332:	e00a      	b.n	800534a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005334:	f7fc fd40 	bl	8001db8 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e053      	b.n	80053f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534a:	4b2d      	ldr	r3, [pc, #180]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f003 020c 	and.w	r2, r3, #12
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	429a      	cmp	r2, r3
 800535a:	d1eb      	bne.n	8005334 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800535c:	4b27      	ldr	r3, [pc, #156]	@ (80053fc <HAL_RCC_ClockConfig+0x1c0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d210      	bcs.n	800538c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536a:	4b24      	ldr	r3, [pc, #144]	@ (80053fc <HAL_RCC_ClockConfig+0x1c0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f023 0207 	bic.w	r2, r3, #7
 8005372:	4922      	ldr	r1, [pc, #136]	@ (80053fc <HAL_RCC_ClockConfig+0x1c0>)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	4313      	orrs	r3, r2
 8005378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800537a:	4b20      	ldr	r3, [pc, #128]	@ (80053fc <HAL_RCC_ClockConfig+0x1c0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d001      	beq.n	800538c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e032      	b.n	80053f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005398:	4b19      	ldr	r3, [pc, #100]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	4916      	ldr	r1, [pc, #88]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053b6:	4b12      	ldr	r3, [pc, #72]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	490e      	ldr	r1, [pc, #56]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053ca:	f000 f821 	bl	8005410 <HAL_RCC_GetSysClockFreq>
 80053ce:	4602      	mov	r2, r0
 80053d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	091b      	lsrs	r3, r3, #4
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	490a      	ldr	r1, [pc, #40]	@ (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80053dc:	5ccb      	ldrb	r3, [r1, r3]
 80053de:	fa22 f303 	lsr.w	r3, r2, r3
 80053e2:	4a09      	ldr	r2, [pc, #36]	@ (8005408 <HAL_RCC_ClockConfig+0x1cc>)
 80053e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053e6:	4b09      	ldr	r3, [pc, #36]	@ (800540c <HAL_RCC_ClockConfig+0x1d0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fc fca2 	bl	8001d34 <HAL_InitTick>

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40022000 	.word	0x40022000
 8005400:	40021000 	.word	0x40021000
 8005404:	0800aaa0 	.word	0x0800aaa0
 8005408:	2000001c 	.word	0x2000001c
 800540c:	20000020 	.word	0x20000020

08005410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	2300      	movs	r3, #0
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	2300      	movs	r3, #0
 8005424:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800542a:	4b1e      	ldr	r3, [pc, #120]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 030c 	and.w	r3, r3, #12
 8005436:	2b04      	cmp	r3, #4
 8005438:	d002      	beq.n	8005440 <HAL_RCC_GetSysClockFreq+0x30>
 800543a:	2b08      	cmp	r3, #8
 800543c:	d003      	beq.n	8005446 <HAL_RCC_GetSysClockFreq+0x36>
 800543e:	e027      	b.n	8005490 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005440:	4b19      	ldr	r3, [pc, #100]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005442:	613b      	str	r3, [r7, #16]
      break;
 8005444:	e027      	b.n	8005496 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	0c9b      	lsrs	r3, r3, #18
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	4a17      	ldr	r2, [pc, #92]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8005450:	5cd3      	ldrb	r3, [r2, r3]
 8005452:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d010      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800545e:	4b11      	ldr	r3, [pc, #68]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	0c5b      	lsrs	r3, r3, #17
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	4a11      	ldr	r2, [pc, #68]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800546a:	5cd3      	ldrb	r3, [r2, r3]
 800546c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a0d      	ldr	r2, [pc, #52]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005472:	fb03 f202 	mul.w	r2, r3, r2
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	fbb2 f3f3 	udiv	r3, r2, r3
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	e004      	b.n	800548a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a0c      	ldr	r2, [pc, #48]	@ (80054b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005484:	fb02 f303 	mul.w	r3, r2, r3
 8005488:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	613b      	str	r3, [r7, #16]
      break;
 800548e:	e002      	b.n	8005496 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005490:	4b05      	ldr	r3, [pc, #20]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005492:	613b      	str	r3, [r7, #16]
      break;
 8005494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005496:	693b      	ldr	r3, [r7, #16]
}
 8005498:	4618      	mov	r0, r3
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40021000 	.word	0x40021000
 80054a8:	007a1200 	.word	0x007a1200
 80054ac:	0800aab8 	.word	0x0800aab8
 80054b0:	0800aac8 	.word	0x0800aac8
 80054b4:	003d0900 	.word	0x003d0900

080054b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054bc:	4b02      	ldr	r3, [pc, #8]	@ (80054c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80054be:	681b      	ldr	r3, [r3, #0]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr
 80054c8:	2000001c 	.word	0x2000001c

080054cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054d0:	f7ff fff2 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b05      	ldr	r3, [pc, #20]	@ (80054ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4903      	ldr	r1, [pc, #12]	@ (80054f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054e2:	5ccb      	ldrb	r3, [r1, r3]
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40021000 	.word	0x40021000
 80054f0:	0800aab0 	.word	0x0800aab0

080054f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054f8:	f7ff ffde 	bl	80054b8 <HAL_RCC_GetHCLKFreq>
 80054fc:	4602      	mov	r2, r0
 80054fe:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	0adb      	lsrs	r3, r3, #11
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	4903      	ldr	r1, [pc, #12]	@ (8005518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800550a:	5ccb      	ldrb	r3, [r1, r3]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005510:	4618      	mov	r0, r3
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021000 	.word	0x40021000
 8005518:	0800aab0 	.word	0x0800aab0

0800551c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005524:	4b0a      	ldr	r3, [pc, #40]	@ (8005550 <RCC_Delay+0x34>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a0a      	ldr	r2, [pc, #40]	@ (8005554 <RCC_Delay+0x38>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	0a5b      	lsrs	r3, r3, #9
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005538:	bf00      	nop
  }
  while (Delay --);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1e5a      	subs	r2, r3, #1
 800553e:	60fa      	str	r2, [r7, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1f9      	bne.n	8005538 <RCC_Delay+0x1c>
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr
 8005550:	2000001c 	.word	0x2000001c
 8005554:	10624dd3 	.word	0x10624dd3

08005558 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d07d      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005574:	2300      	movs	r3, #0
 8005576:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005578:	4b4f      	ldr	r3, [pc, #316]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10d      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005584:	4b4c      	ldr	r3, [pc, #304]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	4a4b      	ldr	r2, [pc, #300]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800558a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800558e:	61d3      	str	r3, [r2, #28]
 8005590:	4b49      	ldr	r3, [pc, #292]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800559c:	2301      	movs	r3, #1
 800559e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a0:	4b46      	ldr	r3, [pc, #280]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d118      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ac:	4b43      	ldr	r3, [pc, #268]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a42      	ldr	r2, [pc, #264]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055b8:	f7fc fbfe 	bl	8001db8 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055be:	e008      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c0:	f7fc fbfa 	bl	8001db8 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	@ 0x64
 80055cc:	d901      	bls.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e06d      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d2:	4b3a      	ldr	r3, [pc, #232]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055de:	4b36      	ldr	r3, [pc, #216]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d02e      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d027      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055fc:	4b2e      	ldr	r3, [pc, #184]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005604:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005606:	4b2e      	ldr	r3, [pc, #184]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005608:	2201      	movs	r2, #1
 800560a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800560c:	4b2c      	ldr	r3, [pc, #176]	@ (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005612:	4a29      	ldr	r2, [pc, #164]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d014      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005622:	f7fc fbc9 	bl	8001db8 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005628:	e00a      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800562a:	f7fc fbc5 	bl	8001db8 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005638:	4293      	cmp	r3, r2
 800563a:	d901      	bls.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e036      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005640:	4b1d      	ldr	r3, [pc, #116]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ee      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800564c:	4b1a      	ldr	r3, [pc, #104]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	4917      	ldr	r1, [pc, #92]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565a:	4313      	orrs	r3, r2
 800565c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800565e:	7dfb      	ldrb	r3, [r7, #23]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d105      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005664:	4b14      	ldr	r3, [pc, #80]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	4a13      	ldr	r2, [pc, #76]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800566e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0302 	and.w	r3, r3, #2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800567c:	4b0e      	ldr	r3, [pc, #56]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	490b      	ldr	r1, [pc, #44]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568a:	4313      	orrs	r3, r2
 800568c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b00      	cmp	r3, #0
 8005698:	d008      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800569a:	4b07      	ldr	r3, [pc, #28]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	4904      	ldr	r1, [pc, #16]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40007000 	.word	0x40007000
 80056c0:	42420440 	.word	0x42420440

080056c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e041      	b.n	800575a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fc fa20 	bl	8001b30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f000 f992 	bl	8005a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
	...

08005764 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d109      	bne.n	8005788 <HAL_TIM_PWM_Start+0x24>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	e022      	b.n	80057ce <HAL_TIM_PWM_Start+0x6a>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b04      	cmp	r3, #4
 800578c:	d109      	bne.n	80057a2 <HAL_TIM_PWM_Start+0x3e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	bf14      	ite	ne
 800579a:	2301      	movne	r3, #1
 800579c:	2300      	moveq	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	e015      	b.n	80057ce <HAL_TIM_PWM_Start+0x6a>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d109      	bne.n	80057bc <HAL_TIM_PWM_Start+0x58>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e008      	b.n	80057ce <HAL_TIM_PWM_Start+0x6a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	bf14      	ite	ne
 80057c8:	2301      	movne	r3, #1
 80057ca:	2300      	moveq	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e05e      	b.n	8005894 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_PWM_Start+0x82>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e4:	e013      	b.n	800580e <HAL_TIM_PWM_Start+0xaa>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_PWM_Start+0x92>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057f4:	e00b      	b.n	800580e <HAL_TIM_PWM_Start+0xaa>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Start+0xa2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005804:	e003      	b.n	800580e <HAL_TIM_PWM_Start+0xaa>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2201      	movs	r2, #1
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fafe 	bl	8005e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1e      	ldr	r2, [pc, #120]	@ (800589c <HAL_TIM_PWM_Start+0x138>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d107      	bne.n	8005836 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005834:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a18      	ldr	r2, [pc, #96]	@ (800589c <HAL_TIM_PWM_Start+0x138>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00e      	beq.n	800585e <HAL_TIM_PWM_Start+0xfa>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005848:	d009      	beq.n	800585e <HAL_TIM_PWM_Start+0xfa>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a14      	ldr	r2, [pc, #80]	@ (80058a0 <HAL_TIM_PWM_Start+0x13c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d004      	beq.n	800585e <HAL_TIM_PWM_Start+0xfa>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a12      	ldr	r2, [pc, #72]	@ (80058a4 <HAL_TIM_PWM_Start+0x140>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d111      	bne.n	8005882 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b06      	cmp	r3, #6
 800586e:	d010      	beq.n	8005892 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005880:	e007      	b.n	8005892 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0201 	orr.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800

080058a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058c2:	2302      	movs	r3, #2
 80058c4:	e0ae      	b.n	8005a24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b0c      	cmp	r3, #12
 80058d2:	f200 809f 	bhi.w	8005a14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058d6:	a201      	add	r2, pc, #4	@ (adr r2, 80058dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058dc:	08005911 	.word	0x08005911
 80058e0:	08005a15 	.word	0x08005a15
 80058e4:	08005a15 	.word	0x08005a15
 80058e8:	08005a15 	.word	0x08005a15
 80058ec:	08005951 	.word	0x08005951
 80058f0:	08005a15 	.word	0x08005a15
 80058f4:	08005a15 	.word	0x08005a15
 80058f8:	08005a15 	.word	0x08005a15
 80058fc:	08005993 	.word	0x08005993
 8005900:	08005a15 	.word	0x08005a15
 8005904:	08005a15 	.word	0x08005a15
 8005908:	08005a15 	.word	0x08005a15
 800590c:	080059d3 	.word	0x080059d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 f8f6 	bl	8005b08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0208 	orr.w	r2, r2, #8
 800592a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0204 	bic.w	r2, r2, #4
 800593a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6999      	ldr	r1, [r3, #24]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	691a      	ldr	r2, [r3, #16]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	619a      	str	r2, [r3, #24]
      break;
 800594e:	e064      	b.n	8005a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f93c 	bl	8005bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800596a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800597a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6999      	ldr	r1, [r3, #24]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	021a      	lsls	r2, r3, #8
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	619a      	str	r2, [r3, #24]
      break;
 8005990:	e043      	b.n	8005a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 f985 	bl	8005ca8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0208 	orr.w	r2, r2, #8
 80059ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0204 	bic.w	r2, r2, #4
 80059bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69d9      	ldr	r1, [r3, #28]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	61da      	str	r2, [r3, #28]
      break;
 80059d0:	e023      	b.n	8005a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 f9cf 	bl	8005d7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69d9      	ldr	r1, [r3, #28]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	021a      	lsls	r2, r3, #8
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	61da      	str	r2, [r3, #28]
      break;
 8005a12:	e002      	b.n	8005a1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	75fb      	strb	r3, [r7, #23]
      break;
 8005a18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a2f      	ldr	r2, [pc, #188]	@ (8005afc <TIM_Base_SetConfig+0xd0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00b      	beq.n	8005a5c <TIM_Base_SetConfig+0x30>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a4a:	d007      	beq.n	8005a5c <TIM_Base_SetConfig+0x30>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8005b00 <TIM_Base_SetConfig+0xd4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d003      	beq.n	8005a5c <TIM_Base_SetConfig+0x30>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a2b      	ldr	r2, [pc, #172]	@ (8005b04 <TIM_Base_SetConfig+0xd8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d108      	bne.n	8005a6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a22      	ldr	r2, [pc, #136]	@ (8005afc <TIM_Base_SetConfig+0xd0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00b      	beq.n	8005a8e <TIM_Base_SetConfig+0x62>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a7c:	d007      	beq.n	8005a8e <TIM_Base_SetConfig+0x62>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a1f      	ldr	r2, [pc, #124]	@ (8005b00 <TIM_Base_SetConfig+0xd4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_Base_SetConfig+0x62>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a1e      	ldr	r2, [pc, #120]	@ (8005b04 <TIM_Base_SetConfig+0xd8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d108      	bne.n	8005aa0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a0d      	ldr	r2, [pc, #52]	@ (8005afc <TIM_Base_SetConfig+0xd0>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d103      	bne.n	8005ad4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f023 0201 	bic.w	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	611a      	str	r2, [r3, #16]
  }
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40000400 	.word	0x40000400
 8005b04:	40000800 	.word	0x40000800

08005b08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	f023 0201 	bic.w	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f023 0302 	bic.w	r3, r3, #2
 8005b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd0 <TIM_OC1_SetConfig+0xc8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d10c      	bne.n	8005b7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f023 0308 	bic.w	r3, r3, #8
 8005b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f023 0304 	bic.w	r3, r3, #4
 8005b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a13      	ldr	r2, [pc, #76]	@ (8005bd0 <TIM_OC1_SetConfig+0xc8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d111      	bne.n	8005baa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	621a      	str	r2, [r3, #32]
}
 8005bc4:	bf00      	nop
 8005bc6:	371c      	adds	r7, #28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40012c00 	.word	0x40012c00

08005bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f023 0210 	bic.w	r2, r3, #16
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	021b      	lsls	r3, r3, #8
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f023 0320 	bic.w	r3, r3, #32
 8005c1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ca4 <TIM_OC2_SetConfig+0xd0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d10d      	bne.n	8005c50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a14      	ldr	r2, [pc, #80]	@ (8005ca4 <TIM_OC2_SetConfig+0xd0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d113      	bne.n	8005c80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr
 8005ca4:	40012c00 	.word	0x40012c00

08005ca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0303 	bic.w	r3, r3, #3
 8005cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a1d      	ldr	r2, [pc, #116]	@ (8005d78 <TIM_OC3_SetConfig+0xd0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d10d      	bne.n	8005d22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	021b      	lsls	r3, r3, #8
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a14      	ldr	r2, [pc, #80]	@ (8005d78 <TIM_OC3_SetConfig+0xd0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d113      	bne.n	8005d52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	621a      	str	r2, [r3, #32]
}
 8005d6c:	bf00      	nop
 8005d6e:	371c      	adds	r7, #28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40012c00 	.word	0x40012c00

08005d7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	031b      	lsls	r3, r3, #12
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a0f      	ldr	r2, [pc, #60]	@ (8005e14 <TIM_OC4_SetConfig+0x98>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d109      	bne.n	8005df0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005de2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	019b      	lsls	r3, r3, #6
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bc80      	pop	{r7}
 8005e12:	4770      	bx	lr
 8005e14:	40012c00 	.word	0x40012c00

08005e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 031f 	and.w	r3, r3, #31
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1a      	ldr	r2, [r3, #32]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a1a      	ldr	r2, [r3, #32]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e50:	431a      	orrs	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e046      	b.n	8005f06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a16      	ldr	r2, [pc, #88]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00e      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec4:	d009      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a12      	ldr	r2, [pc, #72]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d004      	beq.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a10      	ldr	r2, [pc, #64]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bc80      	pop	{r7}
 8005f0e:	4770      	bx	lr
 8005f10:	40012c00 	.word	0x40012c00
 8005f14:	40000400 	.word	0x40000400
 8005f18:	40000800 	.word	0x40000800

08005f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e042      	b.n	8005fb4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fb fe6e 	bl	8001c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2224      	movs	r2, #36	@ 0x24
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f971 	bl	8006248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695a      	ldr	r2, [r3, #20]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68da      	ldr	r2, [r3, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08a      	sub	sp, #40	@ 0x28
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d175      	bne.n	80060c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <HAL_UART_Transmit+0x2c>
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e06e      	b.n	80060ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2221      	movs	r2, #33	@ 0x21
 8005ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ffa:	f7fb fedd 	bl	8001db8 <HAL_GetTick>
 8005ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	88fa      	ldrh	r2, [r7, #6]
 800600a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006014:	d108      	bne.n	8006028 <HAL_UART_Transmit+0x6c>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	e003      	b.n	8006030 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006030:	e02e      	b.n	8006090 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2200      	movs	r2, #0
 800603a:	2180      	movs	r1, #128	@ 0x80
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f848 	bl	80060d2 <UART_WaitOnFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e03a      	b.n	80060ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006068:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	3302      	adds	r3, #2
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	e007      	b.n	8006082 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	781a      	ldrb	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	3301      	adds	r3, #1
 8006080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1cb      	bne.n	8006032 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2200      	movs	r2, #0
 80060a2:	2140      	movs	r1, #64	@ 0x40
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f814 	bl	80060d2 <UART_WaitOnFlagUntilTimeout>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e006      	b.n	80060ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e000      	b.n	80060ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80060c8:	2302      	movs	r3, #2
  }
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3720      	adds	r7, #32
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	603b      	str	r3, [r7, #0]
 80060de:	4613      	mov	r3, r2
 80060e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e2:	e03b      	b.n	800615c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060ea:	d037      	beq.n	800615c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ec:	f7fb fe64 	bl	8001db8 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d302      	bcc.n	8006102 <UART_WaitOnFlagUntilTimeout+0x30>
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e03a      	b.n	800617c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d023      	beq.n	800615c <UART_WaitOnFlagUntilTimeout+0x8a>
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b80      	cmp	r3, #128	@ 0x80
 8006118:	d020      	beq.n	800615c <UART_WaitOnFlagUntilTimeout+0x8a>
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b40      	cmp	r3, #64	@ 0x40
 800611e:	d01d      	beq.n	800615c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b08      	cmp	r3, #8
 800612c:	d116      	bne.n	800615c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f81d 	bl	8006184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2208      	movs	r2, #8
 800614e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e00f      	b.n	800617c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	4013      	ands	r3, r2
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	429a      	cmp	r2, r3
 800616a:	bf0c      	ite	eq
 800616c:	2301      	moveq	r3, #1
 800616e:	2300      	movne	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	461a      	mov	r2, r3
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	429a      	cmp	r2, r3
 8006178:	d0b4      	beq.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b095      	sub	sp, #84	@ 0x54
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80061ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e5      	bne.n	800618c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3314      	adds	r3, #20
 80061c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f023 0301 	bic.w	r3, r3, #1
 80061d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3314      	adds	r3, #20
 80061de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e5      	bne.n	80061c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d119      	bne.n	8006230 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	330c      	adds	r3, #12
 8006202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	e853 3f00 	ldrex	r3, [r3]
 800620a:	60bb      	str	r3, [r7, #8]
   return(result);
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f023 0310 	bic.w	r3, r3, #16
 8006212:	647b      	str	r3, [r7, #68]	@ 0x44
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	330c      	adds	r3, #12
 800621a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800621c:	61ba      	str	r2, [r7, #24]
 800621e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	6979      	ldr	r1, [r7, #20]
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	613b      	str	r3, [r7, #16]
   return(result);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e5      	bne.n	80061fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800623e:	bf00      	nop
 8006240:	3754      	adds	r7, #84	@ 0x54
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	4313      	orrs	r3, r2
 8006276:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006282:	f023 030c 	bic.w	r3, r3, #12
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6812      	ldr	r2, [r2, #0]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	430b      	orrs	r3, r1
 800628e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a2c      	ldr	r2, [pc, #176]	@ (800635c <UART_SetConfig+0x114>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d103      	bne.n	80062b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062b0:	f7ff f920 	bl	80054f4 <HAL_RCC_GetPCLK2Freq>
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	e002      	b.n	80062be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80062b8:	f7ff f908 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 80062bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009a      	lsls	r2, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d4:	4a22      	ldr	r2, [pc, #136]	@ (8006360 <UART_SetConfig+0x118>)
 80062d6:	fba2 2303 	umull	r2, r3, r2, r3
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	0119      	lsls	r1, r3, #4
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009a      	lsls	r2, r3, #2
 80062e8:	441a      	add	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80062f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006360 <UART_SetConfig+0x118>)
 80062f6:	fba3 0302 	umull	r0, r3, r3, r2
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	2064      	movs	r0, #100	@ 0x64
 80062fe:	fb00 f303 	mul.w	r3, r0, r3
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	3332      	adds	r3, #50	@ 0x32
 8006308:	4a15      	ldr	r2, [pc, #84]	@ (8006360 <UART_SetConfig+0x118>)
 800630a:	fba2 2303 	umull	r2, r3, r2, r3
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006314:	4419      	add	r1, r3
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4613      	mov	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	009a      	lsls	r2, r3, #2
 8006320:	441a      	add	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	fbb2 f2f3 	udiv	r2, r2, r3
 800632c:	4b0c      	ldr	r3, [pc, #48]	@ (8006360 <UART_SetConfig+0x118>)
 800632e:	fba3 0302 	umull	r0, r3, r3, r2
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	2064      	movs	r0, #100	@ 0x64
 8006336:	fb00 f303 	mul.w	r3, r0, r3
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	3332      	adds	r3, #50	@ 0x32
 8006340:	4a07      	ldr	r2, [pc, #28]	@ (8006360 <UART_SetConfig+0x118>)
 8006342:	fba2 2303 	umull	r2, r3, r2, r3
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	f003 020f 	and.w	r2, r3, #15
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	440a      	add	r2, r1
 8006352:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006354:	bf00      	nop
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40013800 	.word	0x40013800
 8006360:	51eb851f 	.word	0x51eb851f

08006364 <__cvt>:
 8006364:	2b00      	cmp	r3, #0
 8006366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800636a:	461d      	mov	r5, r3
 800636c:	bfbb      	ittet	lt
 800636e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006372:	461d      	movlt	r5, r3
 8006374:	2300      	movge	r3, #0
 8006376:	232d      	movlt	r3, #45	@ 0x2d
 8006378:	b088      	sub	sp, #32
 800637a:	4614      	mov	r4, r2
 800637c:	bfb8      	it	lt
 800637e:	4614      	movlt	r4, r2
 8006380:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006382:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006384:	7013      	strb	r3, [r2, #0]
 8006386:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006388:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800638c:	f023 0820 	bic.w	r8, r3, #32
 8006390:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006394:	d005      	beq.n	80063a2 <__cvt+0x3e>
 8006396:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800639a:	d100      	bne.n	800639e <__cvt+0x3a>
 800639c:	3601      	adds	r6, #1
 800639e:	2302      	movs	r3, #2
 80063a0:	e000      	b.n	80063a4 <__cvt+0x40>
 80063a2:	2303      	movs	r3, #3
 80063a4:	aa07      	add	r2, sp, #28
 80063a6:	9204      	str	r2, [sp, #16]
 80063a8:	aa06      	add	r2, sp, #24
 80063aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80063ae:	e9cd 3600 	strd	r3, r6, [sp]
 80063b2:	4622      	mov	r2, r4
 80063b4:	462b      	mov	r3, r5
 80063b6:	f001 fecf 	bl	8008158 <_dtoa_r>
 80063ba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80063be:	4607      	mov	r7, r0
 80063c0:	d119      	bne.n	80063f6 <__cvt+0x92>
 80063c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063c4:	07db      	lsls	r3, r3, #31
 80063c6:	d50e      	bpl.n	80063e6 <__cvt+0x82>
 80063c8:	eb00 0906 	add.w	r9, r0, r6
 80063cc:	2200      	movs	r2, #0
 80063ce:	2300      	movs	r3, #0
 80063d0:	4620      	mov	r0, r4
 80063d2:	4629      	mov	r1, r5
 80063d4:	f7fa fae8 	bl	80009a8 <__aeabi_dcmpeq>
 80063d8:	b108      	cbz	r0, 80063de <__cvt+0x7a>
 80063da:	f8cd 901c 	str.w	r9, [sp, #28]
 80063de:	2230      	movs	r2, #48	@ 0x30
 80063e0:	9b07      	ldr	r3, [sp, #28]
 80063e2:	454b      	cmp	r3, r9
 80063e4:	d31e      	bcc.n	8006424 <__cvt+0xc0>
 80063e6:	4638      	mov	r0, r7
 80063e8:	9b07      	ldr	r3, [sp, #28]
 80063ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80063ec:	1bdb      	subs	r3, r3, r7
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	b008      	add	sp, #32
 80063f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063fa:	eb00 0906 	add.w	r9, r0, r6
 80063fe:	d1e5      	bne.n	80063cc <__cvt+0x68>
 8006400:	7803      	ldrb	r3, [r0, #0]
 8006402:	2b30      	cmp	r3, #48	@ 0x30
 8006404:	d10a      	bne.n	800641c <__cvt+0xb8>
 8006406:	2200      	movs	r2, #0
 8006408:	2300      	movs	r3, #0
 800640a:	4620      	mov	r0, r4
 800640c:	4629      	mov	r1, r5
 800640e:	f7fa facb 	bl	80009a8 <__aeabi_dcmpeq>
 8006412:	b918      	cbnz	r0, 800641c <__cvt+0xb8>
 8006414:	f1c6 0601 	rsb	r6, r6, #1
 8006418:	f8ca 6000 	str.w	r6, [sl]
 800641c:	f8da 3000 	ldr.w	r3, [sl]
 8006420:	4499      	add	r9, r3
 8006422:	e7d3      	b.n	80063cc <__cvt+0x68>
 8006424:	1c59      	adds	r1, r3, #1
 8006426:	9107      	str	r1, [sp, #28]
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	e7d9      	b.n	80063e0 <__cvt+0x7c>

0800642c <__exponent>:
 800642c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800642e:	2900      	cmp	r1, #0
 8006430:	bfb6      	itet	lt
 8006432:	232d      	movlt	r3, #45	@ 0x2d
 8006434:	232b      	movge	r3, #43	@ 0x2b
 8006436:	4249      	neglt	r1, r1
 8006438:	2909      	cmp	r1, #9
 800643a:	7002      	strb	r2, [r0, #0]
 800643c:	7043      	strb	r3, [r0, #1]
 800643e:	dd29      	ble.n	8006494 <__exponent+0x68>
 8006440:	f10d 0307 	add.w	r3, sp, #7
 8006444:	461d      	mov	r5, r3
 8006446:	270a      	movs	r7, #10
 8006448:	fbb1 f6f7 	udiv	r6, r1, r7
 800644c:	461a      	mov	r2, r3
 800644e:	fb07 1416 	mls	r4, r7, r6, r1
 8006452:	3430      	adds	r4, #48	@ 0x30
 8006454:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006458:	460c      	mov	r4, r1
 800645a:	2c63      	cmp	r4, #99	@ 0x63
 800645c:	4631      	mov	r1, r6
 800645e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006462:	dcf1      	bgt.n	8006448 <__exponent+0x1c>
 8006464:	3130      	adds	r1, #48	@ 0x30
 8006466:	1e94      	subs	r4, r2, #2
 8006468:	f803 1c01 	strb.w	r1, [r3, #-1]
 800646c:	4623      	mov	r3, r4
 800646e:	1c41      	adds	r1, r0, #1
 8006470:	42ab      	cmp	r3, r5
 8006472:	d30a      	bcc.n	800648a <__exponent+0x5e>
 8006474:	f10d 0309 	add.w	r3, sp, #9
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	42ac      	cmp	r4, r5
 800647c:	bf88      	it	hi
 800647e:	2300      	movhi	r3, #0
 8006480:	3302      	adds	r3, #2
 8006482:	4403      	add	r3, r0
 8006484:	1a18      	subs	r0, r3, r0
 8006486:	b003      	add	sp, #12
 8006488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800648a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800648e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006492:	e7ed      	b.n	8006470 <__exponent+0x44>
 8006494:	2330      	movs	r3, #48	@ 0x30
 8006496:	3130      	adds	r1, #48	@ 0x30
 8006498:	7083      	strb	r3, [r0, #2]
 800649a:	70c1      	strb	r1, [r0, #3]
 800649c:	1d03      	adds	r3, r0, #4
 800649e:	e7f1      	b.n	8006484 <__exponent+0x58>

080064a0 <_printf_float>:
 80064a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a4:	b091      	sub	sp, #68	@ 0x44
 80064a6:	460c      	mov	r4, r1
 80064a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80064ac:	4616      	mov	r6, r2
 80064ae:	461f      	mov	r7, r3
 80064b0:	4605      	mov	r5, r0
 80064b2:	f001 fd6f 	bl	8007f94 <_localeconv_r>
 80064b6:	6803      	ldr	r3, [r0, #0]
 80064b8:	4618      	mov	r0, r3
 80064ba:	9308      	str	r3, [sp, #32]
 80064bc:	f7f9 fe48 	bl	8000150 <strlen>
 80064c0:	2300      	movs	r3, #0
 80064c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80064c4:	f8d8 3000 	ldr.w	r3, [r8]
 80064c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80064ca:	3307      	adds	r3, #7
 80064cc:	f023 0307 	bic.w	r3, r3, #7
 80064d0:	f103 0208 	add.w	r2, r3, #8
 80064d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80064d8:	f8d4 b000 	ldr.w	fp, [r4]
 80064dc:	f8c8 2000 	str.w	r2, [r8]
 80064e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80064e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064ea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80064ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80064fa:	4b9c      	ldr	r3, [pc, #624]	@ (800676c <_printf_float+0x2cc>)
 80064fc:	f7fa fa86 	bl	8000a0c <__aeabi_dcmpun>
 8006500:	bb70      	cbnz	r0, 8006560 <_printf_float+0xc0>
 8006502:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006506:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800650a:	4b98      	ldr	r3, [pc, #608]	@ (800676c <_printf_float+0x2cc>)
 800650c:	f7fa fa60 	bl	80009d0 <__aeabi_dcmple>
 8006510:	bb30      	cbnz	r0, 8006560 <_printf_float+0xc0>
 8006512:	2200      	movs	r2, #0
 8006514:	2300      	movs	r3, #0
 8006516:	4640      	mov	r0, r8
 8006518:	4649      	mov	r1, r9
 800651a:	f7fa fa4f 	bl	80009bc <__aeabi_dcmplt>
 800651e:	b110      	cbz	r0, 8006526 <_printf_float+0x86>
 8006520:	232d      	movs	r3, #45	@ 0x2d
 8006522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006526:	4a92      	ldr	r2, [pc, #584]	@ (8006770 <_printf_float+0x2d0>)
 8006528:	4b92      	ldr	r3, [pc, #584]	@ (8006774 <_printf_float+0x2d4>)
 800652a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800652e:	bf94      	ite	ls
 8006530:	4690      	movls	r8, r2
 8006532:	4698      	movhi	r8, r3
 8006534:	2303      	movs	r3, #3
 8006536:	f04f 0900 	mov.w	r9, #0
 800653a:	6123      	str	r3, [r4, #16]
 800653c:	f02b 0304 	bic.w	r3, fp, #4
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	4633      	mov	r3, r6
 8006544:	4621      	mov	r1, r4
 8006546:	4628      	mov	r0, r5
 8006548:	9700      	str	r7, [sp, #0]
 800654a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800654c:	f000 f9d4 	bl	80068f8 <_printf_common>
 8006550:	3001      	adds	r0, #1
 8006552:	f040 8090 	bne.w	8006676 <_printf_float+0x1d6>
 8006556:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800655a:	b011      	add	sp, #68	@ 0x44
 800655c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006560:	4642      	mov	r2, r8
 8006562:	464b      	mov	r3, r9
 8006564:	4640      	mov	r0, r8
 8006566:	4649      	mov	r1, r9
 8006568:	f7fa fa50 	bl	8000a0c <__aeabi_dcmpun>
 800656c:	b148      	cbz	r0, 8006582 <_printf_float+0xe2>
 800656e:	464b      	mov	r3, r9
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfb8      	it	lt
 8006574:	232d      	movlt	r3, #45	@ 0x2d
 8006576:	4a80      	ldr	r2, [pc, #512]	@ (8006778 <_printf_float+0x2d8>)
 8006578:	bfb8      	it	lt
 800657a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800657e:	4b7f      	ldr	r3, [pc, #508]	@ (800677c <_printf_float+0x2dc>)
 8006580:	e7d3      	b.n	800652a <_printf_float+0x8a>
 8006582:	6863      	ldr	r3, [r4, #4]
 8006584:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	d13f      	bne.n	800660c <_printf_float+0x16c>
 800658c:	2306      	movs	r3, #6
 800658e:	6063      	str	r3, [r4, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006596:	6023      	str	r3, [r4, #0]
 8006598:	9206      	str	r2, [sp, #24]
 800659a:	aa0e      	add	r2, sp, #56	@ 0x38
 800659c:	e9cd a204 	strd	sl, r2, [sp, #16]
 80065a0:	aa0d      	add	r2, sp, #52	@ 0x34
 80065a2:	9203      	str	r2, [sp, #12]
 80065a4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80065a8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80065ac:	6863      	ldr	r3, [r4, #4]
 80065ae:	4642      	mov	r2, r8
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	4628      	mov	r0, r5
 80065b4:	464b      	mov	r3, r9
 80065b6:	910a      	str	r1, [sp, #40]	@ 0x28
 80065b8:	f7ff fed4 	bl	8006364 <__cvt>
 80065bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065be:	4680      	mov	r8, r0
 80065c0:	2947      	cmp	r1, #71	@ 0x47
 80065c2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80065c4:	d128      	bne.n	8006618 <_printf_float+0x178>
 80065c6:	1cc8      	adds	r0, r1, #3
 80065c8:	db02      	blt.n	80065d0 <_printf_float+0x130>
 80065ca:	6863      	ldr	r3, [r4, #4]
 80065cc:	4299      	cmp	r1, r3
 80065ce:	dd40      	ble.n	8006652 <_printf_float+0x1b2>
 80065d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80065d4:	fa5f fa8a 	uxtb.w	sl, sl
 80065d8:	4652      	mov	r2, sl
 80065da:	3901      	subs	r1, #1
 80065dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80065e0:	910d      	str	r1, [sp, #52]	@ 0x34
 80065e2:	f7ff ff23 	bl	800642c <__exponent>
 80065e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065e8:	4681      	mov	r9, r0
 80065ea:	1813      	adds	r3, r2, r0
 80065ec:	2a01      	cmp	r2, #1
 80065ee:	6123      	str	r3, [r4, #16]
 80065f0:	dc02      	bgt.n	80065f8 <_printf_float+0x158>
 80065f2:	6822      	ldr	r2, [r4, #0]
 80065f4:	07d2      	lsls	r2, r2, #31
 80065f6:	d501      	bpl.n	80065fc <_printf_float+0x15c>
 80065f8:	3301      	adds	r3, #1
 80065fa:	6123      	str	r3, [r4, #16]
 80065fc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006600:	2b00      	cmp	r3, #0
 8006602:	d09e      	beq.n	8006542 <_printf_float+0xa2>
 8006604:	232d      	movs	r3, #45	@ 0x2d
 8006606:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800660a:	e79a      	b.n	8006542 <_printf_float+0xa2>
 800660c:	2947      	cmp	r1, #71	@ 0x47
 800660e:	d1bf      	bne.n	8006590 <_printf_float+0xf0>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1bd      	bne.n	8006590 <_printf_float+0xf0>
 8006614:	2301      	movs	r3, #1
 8006616:	e7ba      	b.n	800658e <_printf_float+0xee>
 8006618:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800661c:	d9dc      	bls.n	80065d8 <_printf_float+0x138>
 800661e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006622:	d118      	bne.n	8006656 <_printf_float+0x1b6>
 8006624:	2900      	cmp	r1, #0
 8006626:	6863      	ldr	r3, [r4, #4]
 8006628:	dd0b      	ble.n	8006642 <_printf_float+0x1a2>
 800662a:	6121      	str	r1, [r4, #16]
 800662c:	b913      	cbnz	r3, 8006634 <_printf_float+0x194>
 800662e:	6822      	ldr	r2, [r4, #0]
 8006630:	07d0      	lsls	r0, r2, #31
 8006632:	d502      	bpl.n	800663a <_printf_float+0x19a>
 8006634:	3301      	adds	r3, #1
 8006636:	440b      	add	r3, r1
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	f04f 0900 	mov.w	r9, #0
 800663e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006640:	e7dc      	b.n	80065fc <_printf_float+0x15c>
 8006642:	b913      	cbnz	r3, 800664a <_printf_float+0x1aa>
 8006644:	6822      	ldr	r2, [r4, #0]
 8006646:	07d2      	lsls	r2, r2, #31
 8006648:	d501      	bpl.n	800664e <_printf_float+0x1ae>
 800664a:	3302      	adds	r3, #2
 800664c:	e7f4      	b.n	8006638 <_printf_float+0x198>
 800664e:	2301      	movs	r3, #1
 8006650:	e7f2      	b.n	8006638 <_printf_float+0x198>
 8006652:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006656:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006658:	4299      	cmp	r1, r3
 800665a:	db05      	blt.n	8006668 <_printf_float+0x1c8>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	6121      	str	r1, [r4, #16]
 8006660:	07d8      	lsls	r0, r3, #31
 8006662:	d5ea      	bpl.n	800663a <_printf_float+0x19a>
 8006664:	1c4b      	adds	r3, r1, #1
 8006666:	e7e7      	b.n	8006638 <_printf_float+0x198>
 8006668:	2900      	cmp	r1, #0
 800666a:	bfcc      	ite	gt
 800666c:	2201      	movgt	r2, #1
 800666e:	f1c1 0202 	rsble	r2, r1, #2
 8006672:	4413      	add	r3, r2
 8006674:	e7e0      	b.n	8006638 <_printf_float+0x198>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	055a      	lsls	r2, r3, #21
 800667a:	d407      	bmi.n	800668c <_printf_float+0x1ec>
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	4642      	mov	r2, r8
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	d12b      	bne.n	80066e2 <_printf_float+0x242>
 800668a:	e764      	b.n	8006556 <_printf_float+0xb6>
 800668c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006690:	f240 80dc 	bls.w	800684c <_printf_float+0x3ac>
 8006694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006698:	2200      	movs	r2, #0
 800669a:	2300      	movs	r3, #0
 800669c:	f7fa f984 	bl	80009a8 <__aeabi_dcmpeq>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d033      	beq.n	800670c <_printf_float+0x26c>
 80066a4:	2301      	movs	r3, #1
 80066a6:	4631      	mov	r1, r6
 80066a8:	4628      	mov	r0, r5
 80066aa:	4a35      	ldr	r2, [pc, #212]	@ (8006780 <_printf_float+0x2e0>)
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	f43f af51 	beq.w	8006556 <_printf_float+0xb6>
 80066b4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80066b8:	4543      	cmp	r3, r8
 80066ba:	db02      	blt.n	80066c2 <_printf_float+0x222>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	07d8      	lsls	r0, r3, #31
 80066c0:	d50f      	bpl.n	80066e2 <_printf_float+0x242>
 80066c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066c6:	4631      	mov	r1, r6
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b8      	blx	r7
 80066cc:	3001      	adds	r0, #1
 80066ce:	f43f af42 	beq.w	8006556 <_printf_float+0xb6>
 80066d2:	f04f 0900 	mov.w	r9, #0
 80066d6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80066da:	f104 0a1a 	add.w	sl, r4, #26
 80066de:	45c8      	cmp	r8, r9
 80066e0:	dc09      	bgt.n	80066f6 <_printf_float+0x256>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	079b      	lsls	r3, r3, #30
 80066e6:	f100 8102 	bmi.w	80068ee <_printf_float+0x44e>
 80066ea:	68e0      	ldr	r0, [r4, #12]
 80066ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066ee:	4298      	cmp	r0, r3
 80066f0:	bfb8      	it	lt
 80066f2:	4618      	movlt	r0, r3
 80066f4:	e731      	b.n	800655a <_printf_float+0xba>
 80066f6:	2301      	movs	r3, #1
 80066f8:	4652      	mov	r2, sl
 80066fa:	4631      	mov	r1, r6
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b8      	blx	r7
 8006700:	3001      	adds	r0, #1
 8006702:	f43f af28 	beq.w	8006556 <_printf_float+0xb6>
 8006706:	f109 0901 	add.w	r9, r9, #1
 800670a:	e7e8      	b.n	80066de <_printf_float+0x23e>
 800670c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800670e:	2b00      	cmp	r3, #0
 8006710:	dc38      	bgt.n	8006784 <_printf_float+0x2e4>
 8006712:	2301      	movs	r3, #1
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	4a19      	ldr	r2, [pc, #100]	@ (8006780 <_printf_float+0x2e0>)
 800671a:	47b8      	blx	r7
 800671c:	3001      	adds	r0, #1
 800671e:	f43f af1a 	beq.w	8006556 <_printf_float+0xb6>
 8006722:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006726:	ea59 0303 	orrs.w	r3, r9, r3
 800672a:	d102      	bne.n	8006732 <_printf_float+0x292>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	07d9      	lsls	r1, r3, #31
 8006730:	d5d7      	bpl.n	80066e2 <_printf_float+0x242>
 8006732:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
 800673a:	47b8      	blx	r7
 800673c:	3001      	adds	r0, #1
 800673e:	f43f af0a 	beq.w	8006556 <_printf_float+0xb6>
 8006742:	f04f 0a00 	mov.w	sl, #0
 8006746:	f104 0b1a 	add.w	fp, r4, #26
 800674a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800674c:	425b      	negs	r3, r3
 800674e:	4553      	cmp	r3, sl
 8006750:	dc01      	bgt.n	8006756 <_printf_float+0x2b6>
 8006752:	464b      	mov	r3, r9
 8006754:	e793      	b.n	800667e <_printf_float+0x1de>
 8006756:	2301      	movs	r3, #1
 8006758:	465a      	mov	r2, fp
 800675a:	4631      	mov	r1, r6
 800675c:	4628      	mov	r0, r5
 800675e:	47b8      	blx	r7
 8006760:	3001      	adds	r0, #1
 8006762:	f43f aef8 	beq.w	8006556 <_printf_float+0xb6>
 8006766:	f10a 0a01 	add.w	sl, sl, #1
 800676a:	e7ee      	b.n	800674a <_printf_float+0x2aa>
 800676c:	7fefffff 	.word	0x7fefffff
 8006770:	0800aaca 	.word	0x0800aaca
 8006774:	0800aace 	.word	0x0800aace
 8006778:	0800aad2 	.word	0x0800aad2
 800677c:	0800aad6 	.word	0x0800aad6
 8006780:	0800aada 	.word	0x0800aada
 8006784:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006786:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800678a:	4553      	cmp	r3, sl
 800678c:	bfa8      	it	ge
 800678e:	4653      	movge	r3, sl
 8006790:	2b00      	cmp	r3, #0
 8006792:	4699      	mov	r9, r3
 8006794:	dc36      	bgt.n	8006804 <_printf_float+0x364>
 8006796:	f04f 0b00 	mov.w	fp, #0
 800679a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800679e:	f104 021a 	add.w	r2, r4, #26
 80067a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80067a6:	eba3 0309 	sub.w	r3, r3, r9
 80067aa:	455b      	cmp	r3, fp
 80067ac:	dc31      	bgt.n	8006812 <_printf_float+0x372>
 80067ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067b0:	459a      	cmp	sl, r3
 80067b2:	dc3a      	bgt.n	800682a <_printf_float+0x38a>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	07da      	lsls	r2, r3, #31
 80067b8:	d437      	bmi.n	800682a <_printf_float+0x38a>
 80067ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067bc:	ebaa 0903 	sub.w	r9, sl, r3
 80067c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067c2:	ebaa 0303 	sub.w	r3, sl, r3
 80067c6:	4599      	cmp	r9, r3
 80067c8:	bfa8      	it	ge
 80067ca:	4699      	movge	r9, r3
 80067cc:	f1b9 0f00 	cmp.w	r9, #0
 80067d0:	dc33      	bgt.n	800683a <_printf_float+0x39a>
 80067d2:	f04f 0800 	mov.w	r8, #0
 80067d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067da:	f104 0b1a 	add.w	fp, r4, #26
 80067de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067e0:	ebaa 0303 	sub.w	r3, sl, r3
 80067e4:	eba3 0309 	sub.w	r3, r3, r9
 80067e8:	4543      	cmp	r3, r8
 80067ea:	f77f af7a 	ble.w	80066e2 <_printf_float+0x242>
 80067ee:	2301      	movs	r3, #1
 80067f0:	465a      	mov	r2, fp
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	f43f aeac 	beq.w	8006556 <_printf_float+0xb6>
 80067fe:	f108 0801 	add.w	r8, r8, #1
 8006802:	e7ec      	b.n	80067de <_printf_float+0x33e>
 8006804:	4642      	mov	r2, r8
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	d1c2      	bne.n	8006796 <_printf_float+0x2f6>
 8006810:	e6a1      	b.n	8006556 <_printf_float+0xb6>
 8006812:	2301      	movs	r3, #1
 8006814:	4631      	mov	r1, r6
 8006816:	4628      	mov	r0, r5
 8006818:	920a      	str	r2, [sp, #40]	@ 0x28
 800681a:	47b8      	blx	r7
 800681c:	3001      	adds	r0, #1
 800681e:	f43f ae9a 	beq.w	8006556 <_printf_float+0xb6>
 8006822:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006824:	f10b 0b01 	add.w	fp, fp, #1
 8006828:	e7bb      	b.n	80067a2 <_printf_float+0x302>
 800682a:	4631      	mov	r1, r6
 800682c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006830:	4628      	mov	r0, r5
 8006832:	47b8      	blx	r7
 8006834:	3001      	adds	r0, #1
 8006836:	d1c0      	bne.n	80067ba <_printf_float+0x31a>
 8006838:	e68d      	b.n	8006556 <_printf_float+0xb6>
 800683a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800683c:	464b      	mov	r3, r9
 800683e:	4631      	mov	r1, r6
 8006840:	4628      	mov	r0, r5
 8006842:	4442      	add	r2, r8
 8006844:	47b8      	blx	r7
 8006846:	3001      	adds	r0, #1
 8006848:	d1c3      	bne.n	80067d2 <_printf_float+0x332>
 800684a:	e684      	b.n	8006556 <_printf_float+0xb6>
 800684c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006850:	f1ba 0f01 	cmp.w	sl, #1
 8006854:	dc01      	bgt.n	800685a <_printf_float+0x3ba>
 8006856:	07db      	lsls	r3, r3, #31
 8006858:	d536      	bpl.n	80068c8 <_printf_float+0x428>
 800685a:	2301      	movs	r3, #1
 800685c:	4642      	mov	r2, r8
 800685e:	4631      	mov	r1, r6
 8006860:	4628      	mov	r0, r5
 8006862:	47b8      	blx	r7
 8006864:	3001      	adds	r0, #1
 8006866:	f43f ae76 	beq.w	8006556 <_printf_float+0xb6>
 800686a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800686e:	4631      	mov	r1, r6
 8006870:	4628      	mov	r0, r5
 8006872:	47b8      	blx	r7
 8006874:	3001      	adds	r0, #1
 8006876:	f43f ae6e 	beq.w	8006556 <_printf_float+0xb6>
 800687a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800687e:	2200      	movs	r2, #0
 8006880:	2300      	movs	r3, #0
 8006882:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006886:	f7fa f88f 	bl	80009a8 <__aeabi_dcmpeq>
 800688a:	b9c0      	cbnz	r0, 80068be <_printf_float+0x41e>
 800688c:	4653      	mov	r3, sl
 800688e:	f108 0201 	add.w	r2, r8, #1
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	d10c      	bne.n	80068b6 <_printf_float+0x416>
 800689c:	e65b      	b.n	8006556 <_printf_float+0xb6>
 800689e:	2301      	movs	r3, #1
 80068a0:	465a      	mov	r2, fp
 80068a2:	4631      	mov	r1, r6
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b8      	blx	r7
 80068a8:	3001      	adds	r0, #1
 80068aa:	f43f ae54 	beq.w	8006556 <_printf_float+0xb6>
 80068ae:	f108 0801 	add.w	r8, r8, #1
 80068b2:	45d0      	cmp	r8, sl
 80068b4:	dbf3      	blt.n	800689e <_printf_float+0x3fe>
 80068b6:	464b      	mov	r3, r9
 80068b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068bc:	e6e0      	b.n	8006680 <_printf_float+0x1e0>
 80068be:	f04f 0800 	mov.w	r8, #0
 80068c2:	f104 0b1a 	add.w	fp, r4, #26
 80068c6:	e7f4      	b.n	80068b2 <_printf_float+0x412>
 80068c8:	2301      	movs	r3, #1
 80068ca:	4642      	mov	r2, r8
 80068cc:	e7e1      	b.n	8006892 <_printf_float+0x3f2>
 80068ce:	2301      	movs	r3, #1
 80068d0:	464a      	mov	r2, r9
 80068d2:	4631      	mov	r1, r6
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b8      	blx	r7
 80068d8:	3001      	adds	r0, #1
 80068da:	f43f ae3c 	beq.w	8006556 <_printf_float+0xb6>
 80068de:	f108 0801 	add.w	r8, r8, #1
 80068e2:	68e3      	ldr	r3, [r4, #12]
 80068e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80068e6:	1a5b      	subs	r3, r3, r1
 80068e8:	4543      	cmp	r3, r8
 80068ea:	dcf0      	bgt.n	80068ce <_printf_float+0x42e>
 80068ec:	e6fd      	b.n	80066ea <_printf_float+0x24a>
 80068ee:	f04f 0800 	mov.w	r8, #0
 80068f2:	f104 0919 	add.w	r9, r4, #25
 80068f6:	e7f4      	b.n	80068e2 <_printf_float+0x442>

080068f8 <_printf_common>:
 80068f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068fc:	4616      	mov	r6, r2
 80068fe:	4698      	mov	r8, r3
 8006900:	688a      	ldr	r2, [r1, #8]
 8006902:	690b      	ldr	r3, [r1, #16]
 8006904:	4607      	mov	r7, r0
 8006906:	4293      	cmp	r3, r2
 8006908:	bfb8      	it	lt
 800690a:	4613      	movlt	r3, r2
 800690c:	6033      	str	r3, [r6, #0]
 800690e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006912:	460c      	mov	r4, r1
 8006914:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006918:	b10a      	cbz	r2, 800691e <_printf_common+0x26>
 800691a:	3301      	adds	r3, #1
 800691c:	6033      	str	r3, [r6, #0]
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	0699      	lsls	r1, r3, #26
 8006922:	bf42      	ittt	mi
 8006924:	6833      	ldrmi	r3, [r6, #0]
 8006926:	3302      	addmi	r3, #2
 8006928:	6033      	strmi	r3, [r6, #0]
 800692a:	6825      	ldr	r5, [r4, #0]
 800692c:	f015 0506 	ands.w	r5, r5, #6
 8006930:	d106      	bne.n	8006940 <_printf_common+0x48>
 8006932:	f104 0a19 	add.w	sl, r4, #25
 8006936:	68e3      	ldr	r3, [r4, #12]
 8006938:	6832      	ldr	r2, [r6, #0]
 800693a:	1a9b      	subs	r3, r3, r2
 800693c:	42ab      	cmp	r3, r5
 800693e:	dc2b      	bgt.n	8006998 <_printf_common+0xa0>
 8006940:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006944:	6822      	ldr	r2, [r4, #0]
 8006946:	3b00      	subs	r3, #0
 8006948:	bf18      	it	ne
 800694a:	2301      	movne	r3, #1
 800694c:	0692      	lsls	r2, r2, #26
 800694e:	d430      	bmi.n	80069b2 <_printf_common+0xba>
 8006950:	4641      	mov	r1, r8
 8006952:	4638      	mov	r0, r7
 8006954:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006958:	47c8      	blx	r9
 800695a:	3001      	adds	r0, #1
 800695c:	d023      	beq.n	80069a6 <_printf_common+0xae>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	6922      	ldr	r2, [r4, #16]
 8006962:	f003 0306 	and.w	r3, r3, #6
 8006966:	2b04      	cmp	r3, #4
 8006968:	bf14      	ite	ne
 800696a:	2500      	movne	r5, #0
 800696c:	6833      	ldreq	r3, [r6, #0]
 800696e:	f04f 0600 	mov.w	r6, #0
 8006972:	bf08      	it	eq
 8006974:	68e5      	ldreq	r5, [r4, #12]
 8006976:	f104 041a 	add.w	r4, r4, #26
 800697a:	bf08      	it	eq
 800697c:	1aed      	subeq	r5, r5, r3
 800697e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006982:	bf08      	it	eq
 8006984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006988:	4293      	cmp	r3, r2
 800698a:	bfc4      	itt	gt
 800698c:	1a9b      	subgt	r3, r3, r2
 800698e:	18ed      	addgt	r5, r5, r3
 8006990:	42b5      	cmp	r5, r6
 8006992:	d11a      	bne.n	80069ca <_printf_common+0xd2>
 8006994:	2000      	movs	r0, #0
 8006996:	e008      	b.n	80069aa <_printf_common+0xb2>
 8006998:	2301      	movs	r3, #1
 800699a:	4652      	mov	r2, sl
 800699c:	4641      	mov	r1, r8
 800699e:	4638      	mov	r0, r7
 80069a0:	47c8      	blx	r9
 80069a2:	3001      	adds	r0, #1
 80069a4:	d103      	bne.n	80069ae <_printf_common+0xb6>
 80069a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ae:	3501      	adds	r5, #1
 80069b0:	e7c1      	b.n	8006936 <_printf_common+0x3e>
 80069b2:	2030      	movs	r0, #48	@ 0x30
 80069b4:	18e1      	adds	r1, r4, r3
 80069b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069c0:	4422      	add	r2, r4
 80069c2:	3302      	adds	r3, #2
 80069c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069c8:	e7c2      	b.n	8006950 <_printf_common+0x58>
 80069ca:	2301      	movs	r3, #1
 80069cc:	4622      	mov	r2, r4
 80069ce:	4641      	mov	r1, r8
 80069d0:	4638      	mov	r0, r7
 80069d2:	47c8      	blx	r9
 80069d4:	3001      	adds	r0, #1
 80069d6:	d0e6      	beq.n	80069a6 <_printf_common+0xae>
 80069d8:	3601      	adds	r6, #1
 80069da:	e7d9      	b.n	8006990 <_printf_common+0x98>

080069dc <_printf_i>:
 80069dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	7e0f      	ldrb	r7, [r1, #24]
 80069e2:	4691      	mov	r9, r2
 80069e4:	2f78      	cmp	r7, #120	@ 0x78
 80069e6:	4680      	mov	r8, r0
 80069e8:	460c      	mov	r4, r1
 80069ea:	469a      	mov	sl, r3
 80069ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069f2:	d807      	bhi.n	8006a04 <_printf_i+0x28>
 80069f4:	2f62      	cmp	r7, #98	@ 0x62
 80069f6:	d80a      	bhi.n	8006a0e <_printf_i+0x32>
 80069f8:	2f00      	cmp	r7, #0
 80069fa:	f000 80d3 	beq.w	8006ba4 <_printf_i+0x1c8>
 80069fe:	2f58      	cmp	r7, #88	@ 0x58
 8006a00:	f000 80ba 	beq.w	8006b78 <_printf_i+0x19c>
 8006a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a0c:	e03a      	b.n	8006a84 <_printf_i+0xa8>
 8006a0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a12:	2b15      	cmp	r3, #21
 8006a14:	d8f6      	bhi.n	8006a04 <_printf_i+0x28>
 8006a16:	a101      	add	r1, pc, #4	@ (adr r1, 8006a1c <_printf_i+0x40>)
 8006a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a1c:	08006a75 	.word	0x08006a75
 8006a20:	08006a89 	.word	0x08006a89
 8006a24:	08006a05 	.word	0x08006a05
 8006a28:	08006a05 	.word	0x08006a05
 8006a2c:	08006a05 	.word	0x08006a05
 8006a30:	08006a05 	.word	0x08006a05
 8006a34:	08006a89 	.word	0x08006a89
 8006a38:	08006a05 	.word	0x08006a05
 8006a3c:	08006a05 	.word	0x08006a05
 8006a40:	08006a05 	.word	0x08006a05
 8006a44:	08006a05 	.word	0x08006a05
 8006a48:	08006b8b 	.word	0x08006b8b
 8006a4c:	08006ab3 	.word	0x08006ab3
 8006a50:	08006b45 	.word	0x08006b45
 8006a54:	08006a05 	.word	0x08006a05
 8006a58:	08006a05 	.word	0x08006a05
 8006a5c:	08006bad 	.word	0x08006bad
 8006a60:	08006a05 	.word	0x08006a05
 8006a64:	08006ab3 	.word	0x08006ab3
 8006a68:	08006a05 	.word	0x08006a05
 8006a6c:	08006a05 	.word	0x08006a05
 8006a70:	08006b4d 	.word	0x08006b4d
 8006a74:	6833      	ldr	r3, [r6, #0]
 8006a76:	1d1a      	adds	r2, r3, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6032      	str	r2, [r6, #0]
 8006a7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a84:	2301      	movs	r3, #1
 8006a86:	e09e      	b.n	8006bc6 <_printf_i+0x1ea>
 8006a88:	6833      	ldr	r3, [r6, #0]
 8006a8a:	6820      	ldr	r0, [r4, #0]
 8006a8c:	1d19      	adds	r1, r3, #4
 8006a8e:	6031      	str	r1, [r6, #0]
 8006a90:	0606      	lsls	r6, r0, #24
 8006a92:	d501      	bpl.n	8006a98 <_printf_i+0xbc>
 8006a94:	681d      	ldr	r5, [r3, #0]
 8006a96:	e003      	b.n	8006aa0 <_printf_i+0xc4>
 8006a98:	0645      	lsls	r5, r0, #25
 8006a9a:	d5fb      	bpl.n	8006a94 <_printf_i+0xb8>
 8006a9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	da03      	bge.n	8006aac <_printf_i+0xd0>
 8006aa4:	232d      	movs	r3, #45	@ 0x2d
 8006aa6:	426d      	negs	r5, r5
 8006aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006aac:	230a      	movs	r3, #10
 8006aae:	4859      	ldr	r0, [pc, #356]	@ (8006c14 <_printf_i+0x238>)
 8006ab0:	e011      	b.n	8006ad6 <_printf_i+0xfa>
 8006ab2:	6821      	ldr	r1, [r4, #0]
 8006ab4:	6833      	ldr	r3, [r6, #0]
 8006ab6:	0608      	lsls	r0, r1, #24
 8006ab8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006abc:	d402      	bmi.n	8006ac4 <_printf_i+0xe8>
 8006abe:	0649      	lsls	r1, r1, #25
 8006ac0:	bf48      	it	mi
 8006ac2:	b2ad      	uxthmi	r5, r5
 8006ac4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ac6:	6033      	str	r3, [r6, #0]
 8006ac8:	bf14      	ite	ne
 8006aca:	230a      	movne	r3, #10
 8006acc:	2308      	moveq	r3, #8
 8006ace:	4851      	ldr	r0, [pc, #324]	@ (8006c14 <_printf_i+0x238>)
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ad6:	6866      	ldr	r6, [r4, #4]
 8006ad8:	2e00      	cmp	r6, #0
 8006ada:	bfa8      	it	ge
 8006adc:	6821      	ldrge	r1, [r4, #0]
 8006ade:	60a6      	str	r6, [r4, #8]
 8006ae0:	bfa4      	itt	ge
 8006ae2:	f021 0104 	bicge.w	r1, r1, #4
 8006ae6:	6021      	strge	r1, [r4, #0]
 8006ae8:	b90d      	cbnz	r5, 8006aee <_printf_i+0x112>
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	d04b      	beq.n	8006b86 <_printf_i+0x1aa>
 8006aee:	4616      	mov	r6, r2
 8006af0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006af4:	fb03 5711 	mls	r7, r3, r1, r5
 8006af8:	5dc7      	ldrb	r7, [r0, r7]
 8006afa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006afe:	462f      	mov	r7, r5
 8006b00:	42bb      	cmp	r3, r7
 8006b02:	460d      	mov	r5, r1
 8006b04:	d9f4      	bls.n	8006af0 <_printf_i+0x114>
 8006b06:	2b08      	cmp	r3, #8
 8006b08:	d10b      	bne.n	8006b22 <_printf_i+0x146>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	07df      	lsls	r7, r3, #31
 8006b0e:	d508      	bpl.n	8006b22 <_printf_i+0x146>
 8006b10:	6923      	ldr	r3, [r4, #16]
 8006b12:	6861      	ldr	r1, [r4, #4]
 8006b14:	4299      	cmp	r1, r3
 8006b16:	bfde      	ittt	le
 8006b18:	2330      	movle	r3, #48	@ 0x30
 8006b1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b1e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006b22:	1b92      	subs	r2, r2, r6
 8006b24:	6122      	str	r2, [r4, #16]
 8006b26:	464b      	mov	r3, r9
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	f8cd a000 	str.w	sl, [sp]
 8006b30:	aa03      	add	r2, sp, #12
 8006b32:	f7ff fee1 	bl	80068f8 <_printf_common>
 8006b36:	3001      	adds	r0, #1
 8006b38:	d14a      	bne.n	8006bd0 <_printf_i+0x1f4>
 8006b3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b3e:	b004      	add	sp, #16
 8006b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	f043 0320 	orr.w	r3, r3, #32
 8006b4a:	6023      	str	r3, [r4, #0]
 8006b4c:	2778      	movs	r7, #120	@ 0x78
 8006b4e:	4832      	ldr	r0, [pc, #200]	@ (8006c18 <_printf_i+0x23c>)
 8006b50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	6831      	ldr	r1, [r6, #0]
 8006b58:	061f      	lsls	r7, r3, #24
 8006b5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b5e:	d402      	bmi.n	8006b66 <_printf_i+0x18a>
 8006b60:	065f      	lsls	r7, r3, #25
 8006b62:	bf48      	it	mi
 8006b64:	b2ad      	uxthmi	r5, r5
 8006b66:	6031      	str	r1, [r6, #0]
 8006b68:	07d9      	lsls	r1, r3, #31
 8006b6a:	bf44      	itt	mi
 8006b6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006b70:	6023      	strmi	r3, [r4, #0]
 8006b72:	b11d      	cbz	r5, 8006b7c <_printf_i+0x1a0>
 8006b74:	2310      	movs	r3, #16
 8006b76:	e7ab      	b.n	8006ad0 <_printf_i+0xf4>
 8006b78:	4826      	ldr	r0, [pc, #152]	@ (8006c14 <_printf_i+0x238>)
 8006b7a:	e7e9      	b.n	8006b50 <_printf_i+0x174>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	f023 0320 	bic.w	r3, r3, #32
 8006b82:	6023      	str	r3, [r4, #0]
 8006b84:	e7f6      	b.n	8006b74 <_printf_i+0x198>
 8006b86:	4616      	mov	r6, r2
 8006b88:	e7bd      	b.n	8006b06 <_printf_i+0x12a>
 8006b8a:	6833      	ldr	r3, [r6, #0]
 8006b8c:	6825      	ldr	r5, [r4, #0]
 8006b8e:	1d18      	adds	r0, r3, #4
 8006b90:	6961      	ldr	r1, [r4, #20]
 8006b92:	6030      	str	r0, [r6, #0]
 8006b94:	062e      	lsls	r6, r5, #24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	d501      	bpl.n	8006b9e <_printf_i+0x1c2>
 8006b9a:	6019      	str	r1, [r3, #0]
 8006b9c:	e002      	b.n	8006ba4 <_printf_i+0x1c8>
 8006b9e:	0668      	lsls	r0, r5, #25
 8006ba0:	d5fb      	bpl.n	8006b9a <_printf_i+0x1be>
 8006ba2:	8019      	strh	r1, [r3, #0]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	4616      	mov	r6, r2
 8006ba8:	6123      	str	r3, [r4, #16]
 8006baa:	e7bc      	b.n	8006b26 <_printf_i+0x14a>
 8006bac:	6833      	ldr	r3, [r6, #0]
 8006bae:	2100      	movs	r1, #0
 8006bb0:	1d1a      	adds	r2, r3, #4
 8006bb2:	6032      	str	r2, [r6, #0]
 8006bb4:	681e      	ldr	r6, [r3, #0]
 8006bb6:	6862      	ldr	r2, [r4, #4]
 8006bb8:	4630      	mov	r0, r6
 8006bba:	f001 fa1c 	bl	8007ff6 <memchr>
 8006bbe:	b108      	cbz	r0, 8006bc4 <_printf_i+0x1e8>
 8006bc0:	1b80      	subs	r0, r0, r6
 8006bc2:	6060      	str	r0, [r4, #4]
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bce:	e7aa      	b.n	8006b26 <_printf_i+0x14a>
 8006bd0:	4632      	mov	r2, r6
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	47d0      	blx	sl
 8006bda:	3001      	adds	r0, #1
 8006bdc:	d0ad      	beq.n	8006b3a <_printf_i+0x15e>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	079b      	lsls	r3, r3, #30
 8006be2:	d413      	bmi.n	8006c0c <_printf_i+0x230>
 8006be4:	68e0      	ldr	r0, [r4, #12]
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	4298      	cmp	r0, r3
 8006bea:	bfb8      	it	lt
 8006bec:	4618      	movlt	r0, r3
 8006bee:	e7a6      	b.n	8006b3e <_printf_i+0x162>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4632      	mov	r2, r6
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	4640      	mov	r0, r8
 8006bf8:	47d0      	blx	sl
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d09d      	beq.n	8006b3a <_printf_i+0x15e>
 8006bfe:	3501      	adds	r5, #1
 8006c00:	68e3      	ldr	r3, [r4, #12]
 8006c02:	9903      	ldr	r1, [sp, #12]
 8006c04:	1a5b      	subs	r3, r3, r1
 8006c06:	42ab      	cmp	r3, r5
 8006c08:	dcf2      	bgt.n	8006bf0 <_printf_i+0x214>
 8006c0a:	e7eb      	b.n	8006be4 <_printf_i+0x208>
 8006c0c:	2500      	movs	r5, #0
 8006c0e:	f104 0619 	add.w	r6, r4, #25
 8006c12:	e7f5      	b.n	8006c00 <_printf_i+0x224>
 8006c14:	0800aadc 	.word	0x0800aadc
 8006c18:	0800aaed 	.word	0x0800aaed

08006c1c <_scanf_float>:
 8006c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c20:	b087      	sub	sp, #28
 8006c22:	9303      	str	r3, [sp, #12]
 8006c24:	688b      	ldr	r3, [r1, #8]
 8006c26:	4617      	mov	r7, r2
 8006c28:	1e5a      	subs	r2, r3, #1
 8006c2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c2e:	bf82      	ittt	hi
 8006c30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c34:	eb03 0b05 	addhi.w	fp, r3, r5
 8006c38:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006c3c:	460a      	mov	r2, r1
 8006c3e:	f04f 0500 	mov.w	r5, #0
 8006c42:	bf88      	it	hi
 8006c44:	608b      	strhi	r3, [r1, #8]
 8006c46:	680b      	ldr	r3, [r1, #0]
 8006c48:	4680      	mov	r8, r0
 8006c4a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006c4e:	f842 3b1c 	str.w	r3, [r2], #28
 8006c52:	460c      	mov	r4, r1
 8006c54:	bf98      	it	ls
 8006c56:	f04f 0b00 	movls.w	fp, #0
 8006c5a:	4616      	mov	r6, r2
 8006c5c:	46aa      	mov	sl, r5
 8006c5e:	46a9      	mov	r9, r5
 8006c60:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c64:	9201      	str	r2, [sp, #4]
 8006c66:	9502      	str	r5, [sp, #8]
 8006c68:	68a2      	ldr	r2, [r4, #8]
 8006c6a:	b152      	cbz	r2, 8006c82 <_scanf_float+0x66>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b4e      	cmp	r3, #78	@ 0x4e
 8006c72:	d865      	bhi.n	8006d40 <_scanf_float+0x124>
 8006c74:	2b40      	cmp	r3, #64	@ 0x40
 8006c76:	d83d      	bhi.n	8006cf4 <_scanf_float+0xd8>
 8006c78:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006c7c:	b2c8      	uxtb	r0, r1
 8006c7e:	280e      	cmp	r0, #14
 8006c80:	d93b      	bls.n	8006cfa <_scanf_float+0xde>
 8006c82:	f1b9 0f00 	cmp.w	r9, #0
 8006c86:	d003      	beq.n	8006c90 <_scanf_float+0x74>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c8e:	6023      	str	r3, [r4, #0]
 8006c90:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006c94:	f1ba 0f01 	cmp.w	sl, #1
 8006c98:	f200 8118 	bhi.w	8006ecc <_scanf_float+0x2b0>
 8006c9c:	9b01      	ldr	r3, [sp, #4]
 8006c9e:	429e      	cmp	r6, r3
 8006ca0:	f200 8109 	bhi.w	8006eb6 <_scanf_float+0x29a>
 8006ca4:	2001      	movs	r0, #1
 8006ca6:	b007      	add	sp, #28
 8006ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cac:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006cb0:	2a0d      	cmp	r2, #13
 8006cb2:	d8e6      	bhi.n	8006c82 <_scanf_float+0x66>
 8006cb4:	a101      	add	r1, pc, #4	@ (adr r1, 8006cbc <_scanf_float+0xa0>)
 8006cb6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006e03 	.word	0x08006e03
 8006cc0:	08006c83 	.word	0x08006c83
 8006cc4:	08006c83 	.word	0x08006c83
 8006cc8:	08006c83 	.word	0x08006c83
 8006ccc:	08006e63 	.word	0x08006e63
 8006cd0:	08006e3b 	.word	0x08006e3b
 8006cd4:	08006c83 	.word	0x08006c83
 8006cd8:	08006c83 	.word	0x08006c83
 8006cdc:	08006e11 	.word	0x08006e11
 8006ce0:	08006c83 	.word	0x08006c83
 8006ce4:	08006c83 	.word	0x08006c83
 8006ce8:	08006c83 	.word	0x08006c83
 8006cec:	08006c83 	.word	0x08006c83
 8006cf0:	08006dc9 	.word	0x08006dc9
 8006cf4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006cf8:	e7da      	b.n	8006cb0 <_scanf_float+0x94>
 8006cfa:	290e      	cmp	r1, #14
 8006cfc:	d8c1      	bhi.n	8006c82 <_scanf_float+0x66>
 8006cfe:	a001      	add	r0, pc, #4	@ (adr r0, 8006d04 <_scanf_float+0xe8>)
 8006d00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d04:	08006db9 	.word	0x08006db9
 8006d08:	08006c83 	.word	0x08006c83
 8006d0c:	08006db9 	.word	0x08006db9
 8006d10:	08006e4f 	.word	0x08006e4f
 8006d14:	08006c83 	.word	0x08006c83
 8006d18:	08006d61 	.word	0x08006d61
 8006d1c:	08006d9f 	.word	0x08006d9f
 8006d20:	08006d9f 	.word	0x08006d9f
 8006d24:	08006d9f 	.word	0x08006d9f
 8006d28:	08006d9f 	.word	0x08006d9f
 8006d2c:	08006d9f 	.word	0x08006d9f
 8006d30:	08006d9f 	.word	0x08006d9f
 8006d34:	08006d9f 	.word	0x08006d9f
 8006d38:	08006d9f 	.word	0x08006d9f
 8006d3c:	08006d9f 	.word	0x08006d9f
 8006d40:	2b6e      	cmp	r3, #110	@ 0x6e
 8006d42:	d809      	bhi.n	8006d58 <_scanf_float+0x13c>
 8006d44:	2b60      	cmp	r3, #96	@ 0x60
 8006d46:	d8b1      	bhi.n	8006cac <_scanf_float+0x90>
 8006d48:	2b54      	cmp	r3, #84	@ 0x54
 8006d4a:	d07b      	beq.n	8006e44 <_scanf_float+0x228>
 8006d4c:	2b59      	cmp	r3, #89	@ 0x59
 8006d4e:	d198      	bne.n	8006c82 <_scanf_float+0x66>
 8006d50:	2d07      	cmp	r5, #7
 8006d52:	d196      	bne.n	8006c82 <_scanf_float+0x66>
 8006d54:	2508      	movs	r5, #8
 8006d56:	e02c      	b.n	8006db2 <_scanf_float+0x196>
 8006d58:	2b74      	cmp	r3, #116	@ 0x74
 8006d5a:	d073      	beq.n	8006e44 <_scanf_float+0x228>
 8006d5c:	2b79      	cmp	r3, #121	@ 0x79
 8006d5e:	e7f6      	b.n	8006d4e <_scanf_float+0x132>
 8006d60:	6821      	ldr	r1, [r4, #0]
 8006d62:	05c8      	lsls	r0, r1, #23
 8006d64:	d51b      	bpl.n	8006d9e <_scanf_float+0x182>
 8006d66:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006d6a:	6021      	str	r1, [r4, #0]
 8006d6c:	f109 0901 	add.w	r9, r9, #1
 8006d70:	f1bb 0f00 	cmp.w	fp, #0
 8006d74:	d003      	beq.n	8006d7e <_scanf_float+0x162>
 8006d76:	3201      	adds	r2, #1
 8006d78:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006d7c:	60a2      	str	r2, [r4, #8]
 8006d7e:	68a3      	ldr	r3, [r4, #8]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	60a3      	str	r3, [r4, #8]
 8006d84:	6923      	ldr	r3, [r4, #16]
 8006d86:	3301      	adds	r3, #1
 8006d88:	6123      	str	r3, [r4, #16]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	607b      	str	r3, [r7, #4]
 8006d92:	f340 8087 	ble.w	8006ea4 <_scanf_float+0x288>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	e764      	b.n	8006c68 <_scanf_float+0x4c>
 8006d9e:	eb1a 0105 	adds.w	r1, sl, r5
 8006da2:	f47f af6e 	bne.w	8006c82 <_scanf_float+0x66>
 8006da6:	460d      	mov	r5, r1
 8006da8:	468a      	mov	sl, r1
 8006daa:	6822      	ldr	r2, [r4, #0]
 8006dac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006db0:	6022      	str	r2, [r4, #0]
 8006db2:	f806 3b01 	strb.w	r3, [r6], #1
 8006db6:	e7e2      	b.n	8006d7e <_scanf_float+0x162>
 8006db8:	6822      	ldr	r2, [r4, #0]
 8006dba:	0610      	lsls	r0, r2, #24
 8006dbc:	f57f af61 	bpl.w	8006c82 <_scanf_float+0x66>
 8006dc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dc4:	6022      	str	r2, [r4, #0]
 8006dc6:	e7f4      	b.n	8006db2 <_scanf_float+0x196>
 8006dc8:	f1ba 0f00 	cmp.w	sl, #0
 8006dcc:	d10e      	bne.n	8006dec <_scanf_float+0x1d0>
 8006dce:	f1b9 0f00 	cmp.w	r9, #0
 8006dd2:	d10e      	bne.n	8006df2 <_scanf_float+0x1d6>
 8006dd4:	6822      	ldr	r2, [r4, #0]
 8006dd6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006dda:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006dde:	d108      	bne.n	8006df2 <_scanf_float+0x1d6>
 8006de0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006de4:	f04f 0a01 	mov.w	sl, #1
 8006de8:	6022      	str	r2, [r4, #0]
 8006dea:	e7e2      	b.n	8006db2 <_scanf_float+0x196>
 8006dec:	f1ba 0f02 	cmp.w	sl, #2
 8006df0:	d055      	beq.n	8006e9e <_scanf_float+0x282>
 8006df2:	2d01      	cmp	r5, #1
 8006df4:	d002      	beq.n	8006dfc <_scanf_float+0x1e0>
 8006df6:	2d04      	cmp	r5, #4
 8006df8:	f47f af43 	bne.w	8006c82 <_scanf_float+0x66>
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	b2ed      	uxtb	r5, r5
 8006e00:	e7d7      	b.n	8006db2 <_scanf_float+0x196>
 8006e02:	f1ba 0f01 	cmp.w	sl, #1
 8006e06:	f47f af3c 	bne.w	8006c82 <_scanf_float+0x66>
 8006e0a:	f04f 0a02 	mov.w	sl, #2
 8006e0e:	e7d0      	b.n	8006db2 <_scanf_float+0x196>
 8006e10:	b97d      	cbnz	r5, 8006e32 <_scanf_float+0x216>
 8006e12:	f1b9 0f00 	cmp.w	r9, #0
 8006e16:	f47f af37 	bne.w	8006c88 <_scanf_float+0x6c>
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e24:	f040 8103 	bne.w	800702e <_scanf_float+0x412>
 8006e28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e2c:	2501      	movs	r5, #1
 8006e2e:	6022      	str	r2, [r4, #0]
 8006e30:	e7bf      	b.n	8006db2 <_scanf_float+0x196>
 8006e32:	2d03      	cmp	r5, #3
 8006e34:	d0e2      	beq.n	8006dfc <_scanf_float+0x1e0>
 8006e36:	2d05      	cmp	r5, #5
 8006e38:	e7de      	b.n	8006df8 <_scanf_float+0x1dc>
 8006e3a:	2d02      	cmp	r5, #2
 8006e3c:	f47f af21 	bne.w	8006c82 <_scanf_float+0x66>
 8006e40:	2503      	movs	r5, #3
 8006e42:	e7b6      	b.n	8006db2 <_scanf_float+0x196>
 8006e44:	2d06      	cmp	r5, #6
 8006e46:	f47f af1c 	bne.w	8006c82 <_scanf_float+0x66>
 8006e4a:	2507      	movs	r5, #7
 8006e4c:	e7b1      	b.n	8006db2 <_scanf_float+0x196>
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	0591      	lsls	r1, r2, #22
 8006e52:	f57f af16 	bpl.w	8006c82 <_scanf_float+0x66>
 8006e56:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006e5a:	6022      	str	r2, [r4, #0]
 8006e5c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e60:	e7a7      	b.n	8006db2 <_scanf_float+0x196>
 8006e62:	6822      	ldr	r2, [r4, #0]
 8006e64:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006e68:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006e6c:	d006      	beq.n	8006e7c <_scanf_float+0x260>
 8006e6e:	0550      	lsls	r0, r2, #21
 8006e70:	f57f af07 	bpl.w	8006c82 <_scanf_float+0x66>
 8006e74:	f1b9 0f00 	cmp.w	r9, #0
 8006e78:	f000 80d9 	beq.w	800702e <_scanf_float+0x412>
 8006e7c:	0591      	lsls	r1, r2, #22
 8006e7e:	bf58      	it	pl
 8006e80:	9902      	ldrpl	r1, [sp, #8]
 8006e82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e86:	bf58      	it	pl
 8006e88:	eba9 0101 	subpl.w	r1, r9, r1
 8006e8c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006e90:	f04f 0900 	mov.w	r9, #0
 8006e94:	bf58      	it	pl
 8006e96:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e9a:	6022      	str	r2, [r4, #0]
 8006e9c:	e789      	b.n	8006db2 <_scanf_float+0x196>
 8006e9e:	f04f 0a03 	mov.w	sl, #3
 8006ea2:	e786      	b.n	8006db2 <_scanf_float+0x196>
 8006ea4:	4639      	mov	r1, r7
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006eac:	4798      	blx	r3
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f43f aeda 	beq.w	8006c68 <_scanf_float+0x4c>
 8006eb4:	e6e5      	b.n	8006c82 <_scanf_float+0x66>
 8006eb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006eba:	463a      	mov	r2, r7
 8006ebc:	4640      	mov	r0, r8
 8006ebe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ec2:	4798      	blx	r3
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	6123      	str	r3, [r4, #16]
 8006eca:	e6e7      	b.n	8006c9c <_scanf_float+0x80>
 8006ecc:	1e6b      	subs	r3, r5, #1
 8006ece:	2b06      	cmp	r3, #6
 8006ed0:	d824      	bhi.n	8006f1c <_scanf_float+0x300>
 8006ed2:	2d02      	cmp	r5, #2
 8006ed4:	d836      	bhi.n	8006f44 <_scanf_float+0x328>
 8006ed6:	9b01      	ldr	r3, [sp, #4]
 8006ed8:	429e      	cmp	r6, r3
 8006eda:	f67f aee3 	bls.w	8006ca4 <_scanf_float+0x88>
 8006ede:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ee2:	463a      	mov	r2, r7
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eea:	4798      	blx	r3
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	e7f0      	b.n	8006ed6 <_scanf_float+0x2ba>
 8006ef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ef8:	463a      	mov	r2, r7
 8006efa:	4640      	mov	r0, r8
 8006efc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006f00:	4798      	blx	r3
 8006f02:	6923      	ldr	r3, [r4, #16]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006f0c:	fa5f fa8a 	uxtb.w	sl, sl
 8006f10:	f1ba 0f02 	cmp.w	sl, #2
 8006f14:	d1ee      	bne.n	8006ef4 <_scanf_float+0x2d8>
 8006f16:	3d03      	subs	r5, #3
 8006f18:	b2ed      	uxtb	r5, r5
 8006f1a:	1b76      	subs	r6, r6, r5
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	05da      	lsls	r2, r3, #23
 8006f20:	d530      	bpl.n	8006f84 <_scanf_float+0x368>
 8006f22:	055b      	lsls	r3, r3, #21
 8006f24:	d511      	bpl.n	8006f4a <_scanf_float+0x32e>
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	429e      	cmp	r6, r3
 8006f2a:	f67f aebb 	bls.w	8006ca4 <_scanf_float+0x88>
 8006f2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f32:	463a      	mov	r2, r7
 8006f34:	4640      	mov	r0, r8
 8006f36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f3a:	4798      	blx	r3
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	6123      	str	r3, [r4, #16]
 8006f42:	e7f0      	b.n	8006f26 <_scanf_float+0x30a>
 8006f44:	46aa      	mov	sl, r5
 8006f46:	46b3      	mov	fp, r6
 8006f48:	e7de      	b.n	8006f08 <_scanf_float+0x2ec>
 8006f4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	2965      	cmp	r1, #101	@ 0x65
 8006f52:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006f56:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	d00c      	beq.n	8006f78 <_scanf_float+0x35c>
 8006f5e:	2945      	cmp	r1, #69	@ 0x45
 8006f60:	d00a      	beq.n	8006f78 <_scanf_float+0x35c>
 8006f62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f66:	463a      	mov	r2, r7
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4798      	blx	r3
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	1eb5      	subs	r5, r6, #2
 8006f76:	6123      	str	r3, [r4, #16]
 8006f78:	463a      	mov	r2, r7
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f80:	4798      	blx	r3
 8006f82:	462e      	mov	r6, r5
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	f012 0210 	ands.w	r2, r2, #16
 8006f8a:	d001      	beq.n	8006f90 <_scanf_float+0x374>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	e68a      	b.n	8006ca6 <_scanf_float+0x8a>
 8006f90:	7032      	strb	r2, [r6, #0]
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f9c:	d11c      	bne.n	8006fd8 <_scanf_float+0x3bc>
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	454b      	cmp	r3, r9
 8006fa2:	eba3 0209 	sub.w	r2, r3, r9
 8006fa6:	d123      	bne.n	8006ff0 <_scanf_float+0x3d4>
 8006fa8:	2200      	movs	r2, #0
 8006faa:	4640      	mov	r0, r8
 8006fac:	9901      	ldr	r1, [sp, #4]
 8006fae:	f000 ff37 	bl	8007e20 <_strtod_r>
 8006fb2:	9b03      	ldr	r3, [sp, #12]
 8006fb4:	6825      	ldr	r5, [r4, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f015 0f02 	tst.w	r5, #2
 8006fbc:	4606      	mov	r6, r0
 8006fbe:	460f      	mov	r7, r1
 8006fc0:	f103 0204 	add.w	r2, r3, #4
 8006fc4:	d01f      	beq.n	8007006 <_scanf_float+0x3ea>
 8006fc6:	9903      	ldr	r1, [sp, #12]
 8006fc8:	600a      	str	r2, [r1, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	e9c3 6700 	strd	r6, r7, [r3]
 8006fd0:	68e3      	ldr	r3, [r4, #12]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	60e3      	str	r3, [r4, #12]
 8006fd6:	e7d9      	b.n	8006f8c <_scanf_float+0x370>
 8006fd8:	9b04      	ldr	r3, [sp, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0e4      	beq.n	8006fa8 <_scanf_float+0x38c>
 8006fde:	9905      	ldr	r1, [sp, #20]
 8006fe0:	230a      	movs	r3, #10
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	3101      	adds	r1, #1
 8006fe6:	f000 ff9b 	bl	8007f20 <_strtol_r>
 8006fea:	9b04      	ldr	r3, [sp, #16]
 8006fec:	9e05      	ldr	r6, [sp, #20]
 8006fee:	1ac2      	subs	r2, r0, r3
 8006ff0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006ff4:	429e      	cmp	r6, r3
 8006ff6:	bf28      	it	cs
 8006ff8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	490d      	ldr	r1, [pc, #52]	@ (8007034 <_scanf_float+0x418>)
 8007000:	f000 f850 	bl	80070a4 <siprintf>
 8007004:	e7d0      	b.n	8006fa8 <_scanf_float+0x38c>
 8007006:	076d      	lsls	r5, r5, #29
 8007008:	d4dd      	bmi.n	8006fc6 <_scanf_float+0x3aa>
 800700a:	9d03      	ldr	r5, [sp, #12]
 800700c:	602a      	str	r2, [r5, #0]
 800700e:	681d      	ldr	r5, [r3, #0]
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	f7f9 fcfa 	bl	8000a0c <__aeabi_dcmpun>
 8007018:	b120      	cbz	r0, 8007024 <_scanf_float+0x408>
 800701a:	4807      	ldr	r0, [pc, #28]	@ (8007038 <_scanf_float+0x41c>)
 800701c:	f001 f80e 	bl	800803c <nanf>
 8007020:	6028      	str	r0, [r5, #0]
 8007022:	e7d5      	b.n	8006fd0 <_scanf_float+0x3b4>
 8007024:	4630      	mov	r0, r6
 8007026:	4639      	mov	r1, r7
 8007028:	f7f9 fd4e 	bl	8000ac8 <__aeabi_d2f>
 800702c:	e7f8      	b.n	8007020 <_scanf_float+0x404>
 800702e:	f04f 0900 	mov.w	r9, #0
 8007032:	e62d      	b.n	8006c90 <_scanf_float+0x74>
 8007034:	0800aafe 	.word	0x0800aafe
 8007038:	0800aef3 	.word	0x0800aef3

0800703c <sniprintf>:
 800703c:	b40c      	push	{r2, r3}
 800703e:	b530      	push	{r4, r5, lr}
 8007040:	4b17      	ldr	r3, [pc, #92]	@ (80070a0 <sniprintf+0x64>)
 8007042:	1e0c      	subs	r4, r1, #0
 8007044:	681d      	ldr	r5, [r3, #0]
 8007046:	b09d      	sub	sp, #116	@ 0x74
 8007048:	da08      	bge.n	800705c <sniprintf+0x20>
 800704a:	238b      	movs	r3, #139	@ 0x8b
 800704c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007050:	602b      	str	r3, [r5, #0]
 8007052:	b01d      	add	sp, #116	@ 0x74
 8007054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007058:	b002      	add	sp, #8
 800705a:	4770      	bx	lr
 800705c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007060:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007064:	bf0c      	ite	eq
 8007066:	4623      	moveq	r3, r4
 8007068:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800706c:	9304      	str	r3, [sp, #16]
 800706e:	9307      	str	r3, [sp, #28]
 8007070:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007074:	9002      	str	r0, [sp, #8]
 8007076:	9006      	str	r0, [sp, #24]
 8007078:	f8ad 3016 	strh.w	r3, [sp, #22]
 800707c:	4628      	mov	r0, r5
 800707e:	ab21      	add	r3, sp, #132	@ 0x84
 8007080:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007082:	a902      	add	r1, sp, #8
 8007084:	9301      	str	r3, [sp, #4]
 8007086:	f002 f9c3 	bl	8009410 <_svfiprintf_r>
 800708a:	1c43      	adds	r3, r0, #1
 800708c:	bfbc      	itt	lt
 800708e:	238b      	movlt	r3, #139	@ 0x8b
 8007090:	602b      	strlt	r3, [r5, #0]
 8007092:	2c00      	cmp	r4, #0
 8007094:	d0dd      	beq.n	8007052 <sniprintf+0x16>
 8007096:	2200      	movs	r2, #0
 8007098:	9b02      	ldr	r3, [sp, #8]
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	e7d9      	b.n	8007052 <sniprintf+0x16>
 800709e:	bf00      	nop
 80070a0:	200001a0 	.word	0x200001a0

080070a4 <siprintf>:
 80070a4:	b40e      	push	{r1, r2, r3}
 80070a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80070aa:	b500      	push	{lr}
 80070ac:	b09c      	sub	sp, #112	@ 0x70
 80070ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80070b0:	9002      	str	r0, [sp, #8]
 80070b2:	9006      	str	r0, [sp, #24]
 80070b4:	9107      	str	r1, [sp, #28]
 80070b6:	9104      	str	r1, [sp, #16]
 80070b8:	4808      	ldr	r0, [pc, #32]	@ (80070dc <siprintf+0x38>)
 80070ba:	4909      	ldr	r1, [pc, #36]	@ (80070e0 <siprintf+0x3c>)
 80070bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c0:	9105      	str	r1, [sp, #20]
 80070c2:	6800      	ldr	r0, [r0, #0]
 80070c4:	a902      	add	r1, sp, #8
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	f002 f9a2 	bl	8009410 <_svfiprintf_r>
 80070cc:	2200      	movs	r2, #0
 80070ce:	9b02      	ldr	r3, [sp, #8]
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	b01c      	add	sp, #112	@ 0x70
 80070d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070d8:	b003      	add	sp, #12
 80070da:	4770      	bx	lr
 80070dc:	200001a0 	.word	0x200001a0
 80070e0:	ffff0208 	.word	0xffff0208

080070e4 <std>:
 80070e4:	2300      	movs	r3, #0
 80070e6:	b510      	push	{r4, lr}
 80070e8:	4604      	mov	r4, r0
 80070ea:	e9c0 3300 	strd	r3, r3, [r0]
 80070ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070f2:	6083      	str	r3, [r0, #8]
 80070f4:	8181      	strh	r1, [r0, #12]
 80070f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80070f8:	81c2      	strh	r2, [r0, #14]
 80070fa:	6183      	str	r3, [r0, #24]
 80070fc:	4619      	mov	r1, r3
 80070fe:	2208      	movs	r2, #8
 8007100:	305c      	adds	r0, #92	@ 0x5c
 8007102:	f000 ff3f 	bl	8007f84 <memset>
 8007106:	4b0d      	ldr	r3, [pc, #52]	@ (800713c <std+0x58>)
 8007108:	6224      	str	r4, [r4, #32]
 800710a:	6263      	str	r3, [r4, #36]	@ 0x24
 800710c:	4b0c      	ldr	r3, [pc, #48]	@ (8007140 <std+0x5c>)
 800710e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007110:	4b0c      	ldr	r3, [pc, #48]	@ (8007144 <std+0x60>)
 8007112:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007114:	4b0c      	ldr	r3, [pc, #48]	@ (8007148 <std+0x64>)
 8007116:	6323      	str	r3, [r4, #48]	@ 0x30
 8007118:	4b0c      	ldr	r3, [pc, #48]	@ (800714c <std+0x68>)
 800711a:	429c      	cmp	r4, r3
 800711c:	d006      	beq.n	800712c <std+0x48>
 800711e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007122:	4294      	cmp	r4, r2
 8007124:	d002      	beq.n	800712c <std+0x48>
 8007126:	33d0      	adds	r3, #208	@ 0xd0
 8007128:	429c      	cmp	r4, r3
 800712a:	d105      	bne.n	8007138 <std+0x54>
 800712c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007134:	f000 bf5c 	b.w	8007ff0 <__retarget_lock_init_recursive>
 8007138:	bd10      	pop	{r4, pc}
 800713a:	bf00      	nop
 800713c:	0800a235 	.word	0x0800a235
 8007140:	0800a257 	.word	0x0800a257
 8007144:	0800a28f 	.word	0x0800a28f
 8007148:	0800a2b3 	.word	0x0800a2b3
 800714c:	200003e0 	.word	0x200003e0

08007150 <stdio_exit_handler>:
 8007150:	4a02      	ldr	r2, [pc, #8]	@ (800715c <stdio_exit_handler+0xc>)
 8007152:	4903      	ldr	r1, [pc, #12]	@ (8007160 <stdio_exit_handler+0x10>)
 8007154:	4803      	ldr	r0, [pc, #12]	@ (8007164 <stdio_exit_handler+0x14>)
 8007156:	f000 bee5 	b.w	8007f24 <_fwalk_sglue>
 800715a:	bf00      	nop
 800715c:	20000028 	.word	0x20000028
 8007160:	08009881 	.word	0x08009881
 8007164:	200001a4 	.word	0x200001a4

08007168 <cleanup_stdio>:
 8007168:	6841      	ldr	r1, [r0, #4]
 800716a:	4b0c      	ldr	r3, [pc, #48]	@ (800719c <cleanup_stdio+0x34>)
 800716c:	b510      	push	{r4, lr}
 800716e:	4299      	cmp	r1, r3
 8007170:	4604      	mov	r4, r0
 8007172:	d001      	beq.n	8007178 <cleanup_stdio+0x10>
 8007174:	f002 fb84 	bl	8009880 <_fflush_r>
 8007178:	68a1      	ldr	r1, [r4, #8]
 800717a:	4b09      	ldr	r3, [pc, #36]	@ (80071a0 <cleanup_stdio+0x38>)
 800717c:	4299      	cmp	r1, r3
 800717e:	d002      	beq.n	8007186 <cleanup_stdio+0x1e>
 8007180:	4620      	mov	r0, r4
 8007182:	f002 fb7d 	bl	8009880 <_fflush_r>
 8007186:	68e1      	ldr	r1, [r4, #12]
 8007188:	4b06      	ldr	r3, [pc, #24]	@ (80071a4 <cleanup_stdio+0x3c>)
 800718a:	4299      	cmp	r1, r3
 800718c:	d004      	beq.n	8007198 <cleanup_stdio+0x30>
 800718e:	4620      	mov	r0, r4
 8007190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007194:	f002 bb74 	b.w	8009880 <_fflush_r>
 8007198:	bd10      	pop	{r4, pc}
 800719a:	bf00      	nop
 800719c:	200003e0 	.word	0x200003e0
 80071a0:	20000448 	.word	0x20000448
 80071a4:	200004b0 	.word	0x200004b0

080071a8 <global_stdio_init.part.0>:
 80071a8:	b510      	push	{r4, lr}
 80071aa:	4b0b      	ldr	r3, [pc, #44]	@ (80071d8 <global_stdio_init.part.0+0x30>)
 80071ac:	4c0b      	ldr	r4, [pc, #44]	@ (80071dc <global_stdio_init.part.0+0x34>)
 80071ae:	4a0c      	ldr	r2, [pc, #48]	@ (80071e0 <global_stdio_init.part.0+0x38>)
 80071b0:	4620      	mov	r0, r4
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	2104      	movs	r1, #4
 80071b6:	2200      	movs	r2, #0
 80071b8:	f7ff ff94 	bl	80070e4 <std>
 80071bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071c0:	2201      	movs	r2, #1
 80071c2:	2109      	movs	r1, #9
 80071c4:	f7ff ff8e 	bl	80070e4 <std>
 80071c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80071cc:	2202      	movs	r2, #2
 80071ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071d2:	2112      	movs	r1, #18
 80071d4:	f7ff bf86 	b.w	80070e4 <std>
 80071d8:	20000518 	.word	0x20000518
 80071dc:	200003e0 	.word	0x200003e0
 80071e0:	08007151 	.word	0x08007151

080071e4 <__sfp_lock_acquire>:
 80071e4:	4801      	ldr	r0, [pc, #4]	@ (80071ec <__sfp_lock_acquire+0x8>)
 80071e6:	f000 bf04 	b.w	8007ff2 <__retarget_lock_acquire_recursive>
 80071ea:	bf00      	nop
 80071ec:	2000051d 	.word	0x2000051d

080071f0 <__sfp_lock_release>:
 80071f0:	4801      	ldr	r0, [pc, #4]	@ (80071f8 <__sfp_lock_release+0x8>)
 80071f2:	f000 beff 	b.w	8007ff4 <__retarget_lock_release_recursive>
 80071f6:	bf00      	nop
 80071f8:	2000051d 	.word	0x2000051d

080071fc <__sinit>:
 80071fc:	b510      	push	{r4, lr}
 80071fe:	4604      	mov	r4, r0
 8007200:	f7ff fff0 	bl	80071e4 <__sfp_lock_acquire>
 8007204:	6a23      	ldr	r3, [r4, #32]
 8007206:	b11b      	cbz	r3, 8007210 <__sinit+0x14>
 8007208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800720c:	f7ff bff0 	b.w	80071f0 <__sfp_lock_release>
 8007210:	4b04      	ldr	r3, [pc, #16]	@ (8007224 <__sinit+0x28>)
 8007212:	6223      	str	r3, [r4, #32]
 8007214:	4b04      	ldr	r3, [pc, #16]	@ (8007228 <__sinit+0x2c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1f5      	bne.n	8007208 <__sinit+0xc>
 800721c:	f7ff ffc4 	bl	80071a8 <global_stdio_init.part.0>
 8007220:	e7f2      	b.n	8007208 <__sinit+0xc>
 8007222:	bf00      	nop
 8007224:	08007169 	.word	0x08007169
 8007228:	20000518 	.word	0x20000518

0800722c <sulp>:
 800722c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007230:	460f      	mov	r7, r1
 8007232:	4690      	mov	r8, r2
 8007234:	f002 feca 	bl	8009fcc <__ulp>
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	f1b8 0f00 	cmp.w	r8, #0
 8007240:	d011      	beq.n	8007266 <sulp+0x3a>
 8007242:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007246:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800724a:	2b00      	cmp	r3, #0
 800724c:	dd0b      	ble.n	8007266 <sulp+0x3a>
 800724e:	2400      	movs	r4, #0
 8007250:	051b      	lsls	r3, r3, #20
 8007252:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007256:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800725a:	4622      	mov	r2, r4
 800725c:	462b      	mov	r3, r5
 800725e:	f7f9 f93b 	bl	80004d8 <__aeabi_dmul>
 8007262:	4604      	mov	r4, r0
 8007264:	460d      	mov	r5, r1
 8007266:	4620      	mov	r0, r4
 8007268:	4629      	mov	r1, r5
 800726a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007270 <_strtod_l>:
 8007270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007274:	b09f      	sub	sp, #124	@ 0x7c
 8007276:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007278:	2200      	movs	r2, #0
 800727a:	460c      	mov	r4, r1
 800727c:	921a      	str	r2, [sp, #104]	@ 0x68
 800727e:	f04f 0a00 	mov.w	sl, #0
 8007282:	f04f 0b00 	mov.w	fp, #0
 8007286:	460a      	mov	r2, r1
 8007288:	9005      	str	r0, [sp, #20]
 800728a:	9219      	str	r2, [sp, #100]	@ 0x64
 800728c:	7811      	ldrb	r1, [r2, #0]
 800728e:	292b      	cmp	r1, #43	@ 0x2b
 8007290:	d048      	beq.n	8007324 <_strtod_l+0xb4>
 8007292:	d836      	bhi.n	8007302 <_strtod_l+0x92>
 8007294:	290d      	cmp	r1, #13
 8007296:	d830      	bhi.n	80072fa <_strtod_l+0x8a>
 8007298:	2908      	cmp	r1, #8
 800729a:	d830      	bhi.n	80072fe <_strtod_l+0x8e>
 800729c:	2900      	cmp	r1, #0
 800729e:	d039      	beq.n	8007314 <_strtod_l+0xa4>
 80072a0:	2200      	movs	r2, #0
 80072a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80072a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80072a6:	782a      	ldrb	r2, [r5, #0]
 80072a8:	2a30      	cmp	r2, #48	@ 0x30
 80072aa:	f040 80b1 	bne.w	8007410 <_strtod_l+0x1a0>
 80072ae:	786a      	ldrb	r2, [r5, #1]
 80072b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80072b4:	2a58      	cmp	r2, #88	@ 0x58
 80072b6:	d16c      	bne.n	8007392 <_strtod_l+0x122>
 80072b8:	9302      	str	r3, [sp, #8]
 80072ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072bc:	4a8e      	ldr	r2, [pc, #568]	@ (80074f8 <_strtod_l+0x288>)
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	ab1a      	add	r3, sp, #104	@ 0x68
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	9805      	ldr	r0, [sp, #20]
 80072c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80072c8:	a919      	add	r1, sp, #100	@ 0x64
 80072ca:	f001 fd75 	bl	8008db8 <__gethex>
 80072ce:	f010 060f 	ands.w	r6, r0, #15
 80072d2:	4604      	mov	r4, r0
 80072d4:	d005      	beq.n	80072e2 <_strtod_l+0x72>
 80072d6:	2e06      	cmp	r6, #6
 80072d8:	d126      	bne.n	8007328 <_strtod_l+0xb8>
 80072da:	2300      	movs	r3, #0
 80072dc:	3501      	adds	r5, #1
 80072de:	9519      	str	r5, [sp, #100]	@ 0x64
 80072e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f040 8584 	bne.w	8007df2 <_strtod_l+0xb82>
 80072ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072ec:	b1bb      	cbz	r3, 800731e <_strtod_l+0xae>
 80072ee:	4650      	mov	r0, sl
 80072f0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80072f4:	b01f      	add	sp, #124	@ 0x7c
 80072f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fa:	2920      	cmp	r1, #32
 80072fc:	d1d0      	bne.n	80072a0 <_strtod_l+0x30>
 80072fe:	3201      	adds	r2, #1
 8007300:	e7c3      	b.n	800728a <_strtod_l+0x1a>
 8007302:	292d      	cmp	r1, #45	@ 0x2d
 8007304:	d1cc      	bne.n	80072a0 <_strtod_l+0x30>
 8007306:	2101      	movs	r1, #1
 8007308:	910b      	str	r1, [sp, #44]	@ 0x2c
 800730a:	1c51      	adds	r1, r2, #1
 800730c:	9119      	str	r1, [sp, #100]	@ 0x64
 800730e:	7852      	ldrb	r2, [r2, #1]
 8007310:	2a00      	cmp	r2, #0
 8007312:	d1c7      	bne.n	80072a4 <_strtod_l+0x34>
 8007314:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007316:	9419      	str	r4, [sp, #100]	@ 0x64
 8007318:	2b00      	cmp	r3, #0
 800731a:	f040 8568 	bne.w	8007dee <_strtod_l+0xb7e>
 800731e:	4650      	mov	r0, sl
 8007320:	4659      	mov	r1, fp
 8007322:	e7e7      	b.n	80072f4 <_strtod_l+0x84>
 8007324:	2100      	movs	r1, #0
 8007326:	e7ef      	b.n	8007308 <_strtod_l+0x98>
 8007328:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800732a:	b13a      	cbz	r2, 800733c <_strtod_l+0xcc>
 800732c:	2135      	movs	r1, #53	@ 0x35
 800732e:	a81c      	add	r0, sp, #112	@ 0x70
 8007330:	f002 ff3c 	bl	800a1ac <__copybits>
 8007334:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007336:	9805      	ldr	r0, [sp, #20]
 8007338:	f002 fb16 	bl	8009968 <_Bfree>
 800733c:	3e01      	subs	r6, #1
 800733e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007340:	2e04      	cmp	r6, #4
 8007342:	d806      	bhi.n	8007352 <_strtod_l+0xe2>
 8007344:	e8df f006 	tbb	[pc, r6]
 8007348:	201d0314 	.word	0x201d0314
 800734c:	14          	.byte	0x14
 800734d:	00          	.byte	0x00
 800734e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007352:	05e1      	lsls	r1, r4, #23
 8007354:	bf48      	it	mi
 8007356:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800735a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800735e:	0d1b      	lsrs	r3, r3, #20
 8007360:	051b      	lsls	r3, r3, #20
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1bd      	bne.n	80072e2 <_strtod_l+0x72>
 8007366:	f000 fe19 	bl	8007f9c <__errno>
 800736a:	2322      	movs	r3, #34	@ 0x22
 800736c:	6003      	str	r3, [r0, #0]
 800736e:	e7b8      	b.n	80072e2 <_strtod_l+0x72>
 8007370:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007374:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007378:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800737c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007380:	e7e7      	b.n	8007352 <_strtod_l+0xe2>
 8007382:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80074fc <_strtod_l+0x28c>
 8007386:	e7e4      	b.n	8007352 <_strtod_l+0xe2>
 8007388:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800738c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007390:	e7df      	b.n	8007352 <_strtod_l+0xe2>
 8007392:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	9219      	str	r2, [sp, #100]	@ 0x64
 8007398:	785b      	ldrb	r3, [r3, #1]
 800739a:	2b30      	cmp	r3, #48	@ 0x30
 800739c:	d0f9      	beq.n	8007392 <_strtod_l+0x122>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d09f      	beq.n	80072e2 <_strtod_l+0x72>
 80073a2:	2301      	movs	r3, #1
 80073a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073a8:	220a      	movs	r2, #10
 80073aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80073ac:	2300      	movs	r3, #0
 80073ae:	461f      	mov	r7, r3
 80073b0:	9308      	str	r3, [sp, #32]
 80073b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80073b4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80073b6:	7805      	ldrb	r5, [r0, #0]
 80073b8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80073bc:	b2d9      	uxtb	r1, r3
 80073be:	2909      	cmp	r1, #9
 80073c0:	d928      	bls.n	8007414 <_strtod_l+0x1a4>
 80073c2:	2201      	movs	r2, #1
 80073c4:	494e      	ldr	r1, [pc, #312]	@ (8007500 <_strtod_l+0x290>)
 80073c6:	f000 fdcb 	bl	8007f60 <strncmp>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d032      	beq.n	8007434 <_strtod_l+0x1c4>
 80073ce:	2000      	movs	r0, #0
 80073d0:	462a      	mov	r2, r5
 80073d2:	4681      	mov	r9, r0
 80073d4:	463d      	mov	r5, r7
 80073d6:	4603      	mov	r3, r0
 80073d8:	2a65      	cmp	r2, #101	@ 0x65
 80073da:	d001      	beq.n	80073e0 <_strtod_l+0x170>
 80073dc:	2a45      	cmp	r2, #69	@ 0x45
 80073de:	d114      	bne.n	800740a <_strtod_l+0x19a>
 80073e0:	b91d      	cbnz	r5, 80073ea <_strtod_l+0x17a>
 80073e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073e4:	4302      	orrs	r2, r0
 80073e6:	d095      	beq.n	8007314 <_strtod_l+0xa4>
 80073e8:	2500      	movs	r5, #0
 80073ea:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80073ec:	1c62      	adds	r2, r4, #1
 80073ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80073f0:	7862      	ldrb	r2, [r4, #1]
 80073f2:	2a2b      	cmp	r2, #43	@ 0x2b
 80073f4:	d077      	beq.n	80074e6 <_strtod_l+0x276>
 80073f6:	2a2d      	cmp	r2, #45	@ 0x2d
 80073f8:	d07b      	beq.n	80074f2 <_strtod_l+0x282>
 80073fa:	f04f 0c00 	mov.w	ip, #0
 80073fe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007402:	2909      	cmp	r1, #9
 8007404:	f240 8082 	bls.w	800750c <_strtod_l+0x29c>
 8007408:	9419      	str	r4, [sp, #100]	@ 0x64
 800740a:	f04f 0800 	mov.w	r8, #0
 800740e:	e0a2      	b.n	8007556 <_strtod_l+0x2e6>
 8007410:	2300      	movs	r3, #0
 8007412:	e7c7      	b.n	80073a4 <_strtod_l+0x134>
 8007414:	2f08      	cmp	r7, #8
 8007416:	bfd5      	itete	le
 8007418:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800741a:	9908      	ldrgt	r1, [sp, #32]
 800741c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007420:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007424:	f100 0001 	add.w	r0, r0, #1
 8007428:	bfd4      	ite	le
 800742a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800742c:	9308      	strgt	r3, [sp, #32]
 800742e:	3701      	adds	r7, #1
 8007430:	9019      	str	r0, [sp, #100]	@ 0x64
 8007432:	e7bf      	b.n	80073b4 <_strtod_l+0x144>
 8007434:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	9219      	str	r2, [sp, #100]	@ 0x64
 800743a:	785a      	ldrb	r2, [r3, #1]
 800743c:	b37f      	cbz	r7, 800749e <_strtod_l+0x22e>
 800743e:	4681      	mov	r9, r0
 8007440:	463d      	mov	r5, r7
 8007442:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007446:	2b09      	cmp	r3, #9
 8007448:	d912      	bls.n	8007470 <_strtod_l+0x200>
 800744a:	2301      	movs	r3, #1
 800744c:	e7c4      	b.n	80073d8 <_strtod_l+0x168>
 800744e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007450:	3001      	adds	r0, #1
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	9219      	str	r2, [sp, #100]	@ 0x64
 8007456:	785a      	ldrb	r2, [r3, #1]
 8007458:	2a30      	cmp	r2, #48	@ 0x30
 800745a:	d0f8      	beq.n	800744e <_strtod_l+0x1de>
 800745c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007460:	2b08      	cmp	r3, #8
 8007462:	f200 84cb 	bhi.w	8007dfc <_strtod_l+0xb8c>
 8007466:	4681      	mov	r9, r0
 8007468:	2000      	movs	r0, #0
 800746a:	4605      	mov	r5, r0
 800746c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800746e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007470:	3a30      	subs	r2, #48	@ 0x30
 8007472:	f100 0301 	add.w	r3, r0, #1
 8007476:	d02a      	beq.n	80074ce <_strtod_l+0x25e>
 8007478:	4499      	add	r9, r3
 800747a:	210a      	movs	r1, #10
 800747c:	462b      	mov	r3, r5
 800747e:	eb00 0c05 	add.w	ip, r0, r5
 8007482:	4563      	cmp	r3, ip
 8007484:	d10d      	bne.n	80074a2 <_strtod_l+0x232>
 8007486:	1c69      	adds	r1, r5, #1
 8007488:	4401      	add	r1, r0
 800748a:	4428      	add	r0, r5
 800748c:	2808      	cmp	r0, #8
 800748e:	dc16      	bgt.n	80074be <_strtod_l+0x24e>
 8007490:	230a      	movs	r3, #10
 8007492:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007494:	fb03 2300 	mla	r3, r3, r0, r2
 8007498:	930a      	str	r3, [sp, #40]	@ 0x28
 800749a:	2300      	movs	r3, #0
 800749c:	e018      	b.n	80074d0 <_strtod_l+0x260>
 800749e:	4638      	mov	r0, r7
 80074a0:	e7da      	b.n	8007458 <_strtod_l+0x1e8>
 80074a2:	2b08      	cmp	r3, #8
 80074a4:	f103 0301 	add.w	r3, r3, #1
 80074a8:	dc03      	bgt.n	80074b2 <_strtod_l+0x242>
 80074aa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80074ac:	434e      	muls	r6, r1
 80074ae:	960a      	str	r6, [sp, #40]	@ 0x28
 80074b0:	e7e7      	b.n	8007482 <_strtod_l+0x212>
 80074b2:	2b10      	cmp	r3, #16
 80074b4:	bfde      	ittt	le
 80074b6:	9e08      	ldrle	r6, [sp, #32]
 80074b8:	434e      	mulle	r6, r1
 80074ba:	9608      	strle	r6, [sp, #32]
 80074bc:	e7e1      	b.n	8007482 <_strtod_l+0x212>
 80074be:	280f      	cmp	r0, #15
 80074c0:	dceb      	bgt.n	800749a <_strtod_l+0x22a>
 80074c2:	230a      	movs	r3, #10
 80074c4:	9808      	ldr	r0, [sp, #32]
 80074c6:	fb03 2300 	mla	r3, r3, r0, r2
 80074ca:	9308      	str	r3, [sp, #32]
 80074cc:	e7e5      	b.n	800749a <_strtod_l+0x22a>
 80074ce:	4629      	mov	r1, r5
 80074d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80074d2:	460d      	mov	r5, r1
 80074d4:	1c50      	adds	r0, r2, #1
 80074d6:	9019      	str	r0, [sp, #100]	@ 0x64
 80074d8:	7852      	ldrb	r2, [r2, #1]
 80074da:	4618      	mov	r0, r3
 80074dc:	e7b1      	b.n	8007442 <_strtod_l+0x1d2>
 80074de:	f04f 0900 	mov.w	r9, #0
 80074e2:	2301      	movs	r3, #1
 80074e4:	e77d      	b.n	80073e2 <_strtod_l+0x172>
 80074e6:	f04f 0c00 	mov.w	ip, #0
 80074ea:	1ca2      	adds	r2, r4, #2
 80074ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80074ee:	78a2      	ldrb	r2, [r4, #2]
 80074f0:	e785      	b.n	80073fe <_strtod_l+0x18e>
 80074f2:	f04f 0c01 	mov.w	ip, #1
 80074f6:	e7f8      	b.n	80074ea <_strtod_l+0x27a>
 80074f8:	0800ab1c 	.word	0x0800ab1c
 80074fc:	7ff00000 	.word	0x7ff00000
 8007500:	0800ab03 	.word	0x0800ab03
 8007504:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007506:	1c51      	adds	r1, r2, #1
 8007508:	9119      	str	r1, [sp, #100]	@ 0x64
 800750a:	7852      	ldrb	r2, [r2, #1]
 800750c:	2a30      	cmp	r2, #48	@ 0x30
 800750e:	d0f9      	beq.n	8007504 <_strtod_l+0x294>
 8007510:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007514:	2908      	cmp	r1, #8
 8007516:	f63f af78 	bhi.w	800740a <_strtod_l+0x19a>
 800751a:	f04f 080a 	mov.w	r8, #10
 800751e:	3a30      	subs	r2, #48	@ 0x30
 8007520:	920e      	str	r2, [sp, #56]	@ 0x38
 8007522:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007524:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007526:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007528:	1c56      	adds	r6, r2, #1
 800752a:	9619      	str	r6, [sp, #100]	@ 0x64
 800752c:	7852      	ldrb	r2, [r2, #1]
 800752e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007532:	f1be 0f09 	cmp.w	lr, #9
 8007536:	d939      	bls.n	80075ac <_strtod_l+0x33c>
 8007538:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800753a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800753e:	1a76      	subs	r6, r6, r1
 8007540:	2e08      	cmp	r6, #8
 8007542:	dc03      	bgt.n	800754c <_strtod_l+0x2dc>
 8007544:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007546:	4588      	cmp	r8, r1
 8007548:	bfa8      	it	ge
 800754a:	4688      	movge	r8, r1
 800754c:	f1bc 0f00 	cmp.w	ip, #0
 8007550:	d001      	beq.n	8007556 <_strtod_l+0x2e6>
 8007552:	f1c8 0800 	rsb	r8, r8, #0
 8007556:	2d00      	cmp	r5, #0
 8007558:	d14e      	bne.n	80075f8 <_strtod_l+0x388>
 800755a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800755c:	4308      	orrs	r0, r1
 800755e:	f47f aec0 	bne.w	80072e2 <_strtod_l+0x72>
 8007562:	2b00      	cmp	r3, #0
 8007564:	f47f aed6 	bne.w	8007314 <_strtod_l+0xa4>
 8007568:	2a69      	cmp	r2, #105	@ 0x69
 800756a:	d028      	beq.n	80075be <_strtod_l+0x34e>
 800756c:	dc25      	bgt.n	80075ba <_strtod_l+0x34a>
 800756e:	2a49      	cmp	r2, #73	@ 0x49
 8007570:	d025      	beq.n	80075be <_strtod_l+0x34e>
 8007572:	2a4e      	cmp	r2, #78	@ 0x4e
 8007574:	f47f aece 	bne.w	8007314 <_strtod_l+0xa4>
 8007578:	499a      	ldr	r1, [pc, #616]	@ (80077e4 <_strtod_l+0x574>)
 800757a:	a819      	add	r0, sp, #100	@ 0x64
 800757c:	f001 fe3e 	bl	80091fc <__match>
 8007580:	2800      	cmp	r0, #0
 8007582:	f43f aec7 	beq.w	8007314 <_strtod_l+0xa4>
 8007586:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b28      	cmp	r3, #40	@ 0x28
 800758c:	d12e      	bne.n	80075ec <_strtod_l+0x37c>
 800758e:	4996      	ldr	r1, [pc, #600]	@ (80077e8 <_strtod_l+0x578>)
 8007590:	aa1c      	add	r2, sp, #112	@ 0x70
 8007592:	a819      	add	r0, sp, #100	@ 0x64
 8007594:	f001 fe46 	bl	8009224 <__hexnan>
 8007598:	2805      	cmp	r0, #5
 800759a:	d127      	bne.n	80075ec <_strtod_l+0x37c>
 800759c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800759e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80075a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80075a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80075aa:	e69a      	b.n	80072e2 <_strtod_l+0x72>
 80075ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80075ae:	fb08 2101 	mla	r1, r8, r1, r2
 80075b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80075b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80075b8:	e7b5      	b.n	8007526 <_strtod_l+0x2b6>
 80075ba:	2a6e      	cmp	r2, #110	@ 0x6e
 80075bc:	e7da      	b.n	8007574 <_strtod_l+0x304>
 80075be:	498b      	ldr	r1, [pc, #556]	@ (80077ec <_strtod_l+0x57c>)
 80075c0:	a819      	add	r0, sp, #100	@ 0x64
 80075c2:	f001 fe1b 	bl	80091fc <__match>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f43f aea4 	beq.w	8007314 <_strtod_l+0xa4>
 80075cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075ce:	4988      	ldr	r1, [pc, #544]	@ (80077f0 <_strtod_l+0x580>)
 80075d0:	3b01      	subs	r3, #1
 80075d2:	a819      	add	r0, sp, #100	@ 0x64
 80075d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80075d6:	f001 fe11 	bl	80091fc <__match>
 80075da:	b910      	cbnz	r0, 80075e2 <_strtod_l+0x372>
 80075dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075de:	3301      	adds	r3, #1
 80075e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80075e2:	f04f 0a00 	mov.w	sl, #0
 80075e6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80077f4 <_strtod_l+0x584>
 80075ea:	e67a      	b.n	80072e2 <_strtod_l+0x72>
 80075ec:	4882      	ldr	r0, [pc, #520]	@ (80077f8 <_strtod_l+0x588>)
 80075ee:	f000 fd1f 	bl	8008030 <nan>
 80075f2:	4682      	mov	sl, r0
 80075f4:	468b      	mov	fp, r1
 80075f6:	e674      	b.n	80072e2 <_strtod_l+0x72>
 80075f8:	eba8 0309 	sub.w	r3, r8, r9
 80075fc:	2f00      	cmp	r7, #0
 80075fe:	bf08      	it	eq
 8007600:	462f      	moveq	r7, r5
 8007602:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007604:	2d10      	cmp	r5, #16
 8007606:	462c      	mov	r4, r5
 8007608:	9309      	str	r3, [sp, #36]	@ 0x24
 800760a:	bfa8      	it	ge
 800760c:	2410      	movge	r4, #16
 800760e:	f7f8 fee9 	bl	80003e4 <__aeabi_ui2d>
 8007612:	2d09      	cmp	r5, #9
 8007614:	4682      	mov	sl, r0
 8007616:	468b      	mov	fp, r1
 8007618:	dc11      	bgt.n	800763e <_strtod_l+0x3ce>
 800761a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800761c:	2b00      	cmp	r3, #0
 800761e:	f43f ae60 	beq.w	80072e2 <_strtod_l+0x72>
 8007622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007624:	dd76      	ble.n	8007714 <_strtod_l+0x4a4>
 8007626:	2b16      	cmp	r3, #22
 8007628:	dc5d      	bgt.n	80076e6 <_strtod_l+0x476>
 800762a:	4974      	ldr	r1, [pc, #464]	@ (80077fc <_strtod_l+0x58c>)
 800762c:	4652      	mov	r2, sl
 800762e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007632:	465b      	mov	r3, fp
 8007634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007638:	f7f8 ff4e 	bl	80004d8 <__aeabi_dmul>
 800763c:	e7d9      	b.n	80075f2 <_strtod_l+0x382>
 800763e:	4b6f      	ldr	r3, [pc, #444]	@ (80077fc <_strtod_l+0x58c>)
 8007640:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007644:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007648:	f7f8 ff46 	bl	80004d8 <__aeabi_dmul>
 800764c:	4682      	mov	sl, r0
 800764e:	9808      	ldr	r0, [sp, #32]
 8007650:	468b      	mov	fp, r1
 8007652:	f7f8 fec7 	bl	80003e4 <__aeabi_ui2d>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	4650      	mov	r0, sl
 800765c:	4659      	mov	r1, fp
 800765e:	f7f8 fd85 	bl	800016c <__adddf3>
 8007662:	2d0f      	cmp	r5, #15
 8007664:	4682      	mov	sl, r0
 8007666:	468b      	mov	fp, r1
 8007668:	ddd7      	ble.n	800761a <_strtod_l+0x3aa>
 800766a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800766c:	1b2c      	subs	r4, r5, r4
 800766e:	441c      	add	r4, r3
 8007670:	2c00      	cmp	r4, #0
 8007672:	f340 8096 	ble.w	80077a2 <_strtod_l+0x532>
 8007676:	f014 030f 	ands.w	r3, r4, #15
 800767a:	d00a      	beq.n	8007692 <_strtod_l+0x422>
 800767c:	495f      	ldr	r1, [pc, #380]	@ (80077fc <_strtod_l+0x58c>)
 800767e:	4652      	mov	r2, sl
 8007680:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007684:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007688:	465b      	mov	r3, fp
 800768a:	f7f8 ff25 	bl	80004d8 <__aeabi_dmul>
 800768e:	4682      	mov	sl, r0
 8007690:	468b      	mov	fp, r1
 8007692:	f034 040f 	bics.w	r4, r4, #15
 8007696:	d073      	beq.n	8007780 <_strtod_l+0x510>
 8007698:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800769c:	dd48      	ble.n	8007730 <_strtod_l+0x4c0>
 800769e:	2400      	movs	r4, #0
 80076a0:	46a0      	mov	r8, r4
 80076a2:	46a1      	mov	r9, r4
 80076a4:	940a      	str	r4, [sp, #40]	@ 0x28
 80076a6:	2322      	movs	r3, #34	@ 0x22
 80076a8:	f04f 0a00 	mov.w	sl, #0
 80076ac:	9a05      	ldr	r2, [sp, #20]
 80076ae:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80077f4 <_strtod_l+0x584>
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f43f ae13 	beq.w	80072e2 <_strtod_l+0x72>
 80076bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076be:	9805      	ldr	r0, [sp, #20]
 80076c0:	f002 f952 	bl	8009968 <_Bfree>
 80076c4:	4649      	mov	r1, r9
 80076c6:	9805      	ldr	r0, [sp, #20]
 80076c8:	f002 f94e 	bl	8009968 <_Bfree>
 80076cc:	4641      	mov	r1, r8
 80076ce:	9805      	ldr	r0, [sp, #20]
 80076d0:	f002 f94a 	bl	8009968 <_Bfree>
 80076d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076d6:	9805      	ldr	r0, [sp, #20]
 80076d8:	f002 f946 	bl	8009968 <_Bfree>
 80076dc:	4621      	mov	r1, r4
 80076de:	9805      	ldr	r0, [sp, #20]
 80076e0:	f002 f942 	bl	8009968 <_Bfree>
 80076e4:	e5fd      	b.n	80072e2 <_strtod_l+0x72>
 80076e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80076ec:	4293      	cmp	r3, r2
 80076ee:	dbbc      	blt.n	800766a <_strtod_l+0x3fa>
 80076f0:	4c42      	ldr	r4, [pc, #264]	@ (80077fc <_strtod_l+0x58c>)
 80076f2:	f1c5 050f 	rsb	r5, r5, #15
 80076f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80076fa:	4652      	mov	r2, sl
 80076fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007700:	465b      	mov	r3, fp
 8007702:	f7f8 fee9 	bl	80004d8 <__aeabi_dmul>
 8007706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007708:	1b5d      	subs	r5, r3, r5
 800770a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800770e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007712:	e791      	b.n	8007638 <_strtod_l+0x3c8>
 8007714:	3316      	adds	r3, #22
 8007716:	dba8      	blt.n	800766a <_strtod_l+0x3fa>
 8007718:	4b38      	ldr	r3, [pc, #224]	@ (80077fc <_strtod_l+0x58c>)
 800771a:	eba9 0808 	sub.w	r8, r9, r8
 800771e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007722:	4650      	mov	r0, sl
 8007724:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007728:	4659      	mov	r1, fp
 800772a:	f7f8 ffff 	bl	800072c <__aeabi_ddiv>
 800772e:	e760      	b.n	80075f2 <_strtod_l+0x382>
 8007730:	4b33      	ldr	r3, [pc, #204]	@ (8007800 <_strtod_l+0x590>)
 8007732:	4650      	mov	r0, sl
 8007734:	9308      	str	r3, [sp, #32]
 8007736:	2300      	movs	r3, #0
 8007738:	4659      	mov	r1, fp
 800773a:	461e      	mov	r6, r3
 800773c:	1124      	asrs	r4, r4, #4
 800773e:	2c01      	cmp	r4, #1
 8007740:	dc21      	bgt.n	8007786 <_strtod_l+0x516>
 8007742:	b10b      	cbz	r3, 8007748 <_strtod_l+0x4d8>
 8007744:	4682      	mov	sl, r0
 8007746:	468b      	mov	fp, r1
 8007748:	492d      	ldr	r1, [pc, #180]	@ (8007800 <_strtod_l+0x590>)
 800774a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800774e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007752:	4652      	mov	r2, sl
 8007754:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007758:	465b      	mov	r3, fp
 800775a:	f7f8 febd 	bl	80004d8 <__aeabi_dmul>
 800775e:	4b25      	ldr	r3, [pc, #148]	@ (80077f4 <_strtod_l+0x584>)
 8007760:	460a      	mov	r2, r1
 8007762:	400b      	ands	r3, r1
 8007764:	4927      	ldr	r1, [pc, #156]	@ (8007804 <_strtod_l+0x594>)
 8007766:	4682      	mov	sl, r0
 8007768:	428b      	cmp	r3, r1
 800776a:	d898      	bhi.n	800769e <_strtod_l+0x42e>
 800776c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007770:	428b      	cmp	r3, r1
 8007772:	bf86      	itte	hi
 8007774:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007778:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007808 <_strtod_l+0x598>
 800777c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007780:	2300      	movs	r3, #0
 8007782:	9308      	str	r3, [sp, #32]
 8007784:	e07a      	b.n	800787c <_strtod_l+0x60c>
 8007786:	07e2      	lsls	r2, r4, #31
 8007788:	d505      	bpl.n	8007796 <_strtod_l+0x526>
 800778a:	9b08      	ldr	r3, [sp, #32]
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	f7f8 fea2 	bl	80004d8 <__aeabi_dmul>
 8007794:	2301      	movs	r3, #1
 8007796:	9a08      	ldr	r2, [sp, #32]
 8007798:	3601      	adds	r6, #1
 800779a:	3208      	adds	r2, #8
 800779c:	1064      	asrs	r4, r4, #1
 800779e:	9208      	str	r2, [sp, #32]
 80077a0:	e7cd      	b.n	800773e <_strtod_l+0x4ce>
 80077a2:	d0ed      	beq.n	8007780 <_strtod_l+0x510>
 80077a4:	4264      	negs	r4, r4
 80077a6:	f014 020f 	ands.w	r2, r4, #15
 80077aa:	d00a      	beq.n	80077c2 <_strtod_l+0x552>
 80077ac:	4b13      	ldr	r3, [pc, #76]	@ (80077fc <_strtod_l+0x58c>)
 80077ae:	4650      	mov	r0, sl
 80077b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077b4:	4659      	mov	r1, fp
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	f7f8 ffb7 	bl	800072c <__aeabi_ddiv>
 80077be:	4682      	mov	sl, r0
 80077c0:	468b      	mov	fp, r1
 80077c2:	1124      	asrs	r4, r4, #4
 80077c4:	d0dc      	beq.n	8007780 <_strtod_l+0x510>
 80077c6:	2c1f      	cmp	r4, #31
 80077c8:	dd20      	ble.n	800780c <_strtod_l+0x59c>
 80077ca:	2400      	movs	r4, #0
 80077cc:	46a0      	mov	r8, r4
 80077ce:	46a1      	mov	r9, r4
 80077d0:	940a      	str	r4, [sp, #40]	@ 0x28
 80077d2:	2322      	movs	r3, #34	@ 0x22
 80077d4:	9a05      	ldr	r2, [sp, #20]
 80077d6:	f04f 0a00 	mov.w	sl, #0
 80077da:	f04f 0b00 	mov.w	fp, #0
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	e768      	b.n	80076b4 <_strtod_l+0x444>
 80077e2:	bf00      	nop
 80077e4:	0800aad7 	.word	0x0800aad7
 80077e8:	0800ab08 	.word	0x0800ab08
 80077ec:	0800aacf 	.word	0x0800aacf
 80077f0:	0800ac64 	.word	0x0800ac64
 80077f4:	7ff00000 	.word	0x7ff00000
 80077f8:	0800aef3 	.word	0x0800aef3
 80077fc:	0800adf0 	.word	0x0800adf0
 8007800:	0800adc8 	.word	0x0800adc8
 8007804:	7ca00000 	.word	0x7ca00000
 8007808:	7fefffff 	.word	0x7fefffff
 800780c:	f014 0310 	ands.w	r3, r4, #16
 8007810:	bf18      	it	ne
 8007812:	236a      	movne	r3, #106	@ 0x6a
 8007814:	4650      	mov	r0, sl
 8007816:	9308      	str	r3, [sp, #32]
 8007818:	4659      	mov	r1, fp
 800781a:	2300      	movs	r3, #0
 800781c:	4ea9      	ldr	r6, [pc, #676]	@ (8007ac4 <_strtod_l+0x854>)
 800781e:	07e2      	lsls	r2, r4, #31
 8007820:	d504      	bpl.n	800782c <_strtod_l+0x5bc>
 8007822:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007826:	f7f8 fe57 	bl	80004d8 <__aeabi_dmul>
 800782a:	2301      	movs	r3, #1
 800782c:	1064      	asrs	r4, r4, #1
 800782e:	f106 0608 	add.w	r6, r6, #8
 8007832:	d1f4      	bne.n	800781e <_strtod_l+0x5ae>
 8007834:	b10b      	cbz	r3, 800783a <_strtod_l+0x5ca>
 8007836:	4682      	mov	sl, r0
 8007838:	468b      	mov	fp, r1
 800783a:	9b08      	ldr	r3, [sp, #32]
 800783c:	b1b3      	cbz	r3, 800786c <_strtod_l+0x5fc>
 800783e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007842:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007846:	2b00      	cmp	r3, #0
 8007848:	4659      	mov	r1, fp
 800784a:	dd0f      	ble.n	800786c <_strtod_l+0x5fc>
 800784c:	2b1f      	cmp	r3, #31
 800784e:	dd57      	ble.n	8007900 <_strtod_l+0x690>
 8007850:	2b34      	cmp	r3, #52	@ 0x34
 8007852:	bfd8      	it	le
 8007854:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007858:	f04f 0a00 	mov.w	sl, #0
 800785c:	bfcf      	iteee	gt
 800785e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007862:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007866:	4093      	lslle	r3, r2
 8007868:	ea03 0b01 	andle.w	fp, r3, r1
 800786c:	2200      	movs	r2, #0
 800786e:	2300      	movs	r3, #0
 8007870:	4650      	mov	r0, sl
 8007872:	4659      	mov	r1, fp
 8007874:	f7f9 f898 	bl	80009a8 <__aeabi_dcmpeq>
 8007878:	2800      	cmp	r0, #0
 800787a:	d1a6      	bne.n	80077ca <_strtod_l+0x55a>
 800787c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800787e:	463a      	mov	r2, r7
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007884:	462b      	mov	r3, r5
 8007886:	9805      	ldr	r0, [sp, #20]
 8007888:	f002 f8d6 	bl	8009a38 <__s2b>
 800788c:	900a      	str	r0, [sp, #40]	@ 0x28
 800788e:	2800      	cmp	r0, #0
 8007890:	f43f af05 	beq.w	800769e <_strtod_l+0x42e>
 8007894:	2400      	movs	r4, #0
 8007896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007898:	eba9 0308 	sub.w	r3, r9, r8
 800789c:	2a00      	cmp	r2, #0
 800789e:	bfa8      	it	ge
 80078a0:	2300      	movge	r3, #0
 80078a2:	46a0      	mov	r8, r4
 80078a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80078a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80078aa:	9316      	str	r3, [sp, #88]	@ 0x58
 80078ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ae:	9805      	ldr	r0, [sp, #20]
 80078b0:	6859      	ldr	r1, [r3, #4]
 80078b2:	f002 f819 	bl	80098e8 <_Balloc>
 80078b6:	4681      	mov	r9, r0
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f43f aef4 	beq.w	80076a6 <_strtod_l+0x436>
 80078be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078c0:	300c      	adds	r0, #12
 80078c2:	691a      	ldr	r2, [r3, #16]
 80078c4:	f103 010c 	add.w	r1, r3, #12
 80078c8:	3202      	adds	r2, #2
 80078ca:	0092      	lsls	r2, r2, #2
 80078cc:	f000 fba1 	bl	8008012 <memcpy>
 80078d0:	ab1c      	add	r3, sp, #112	@ 0x70
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80078d6:	9300      	str	r3, [sp, #0]
 80078d8:	4652      	mov	r2, sl
 80078da:	465b      	mov	r3, fp
 80078dc:	9805      	ldr	r0, [sp, #20]
 80078de:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80078e2:	f002 fbdb 	bl	800a09c <__d2b>
 80078e6:	901a      	str	r0, [sp, #104]	@ 0x68
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f43f aedc 	beq.w	80076a6 <_strtod_l+0x436>
 80078ee:	2101      	movs	r1, #1
 80078f0:	9805      	ldr	r0, [sp, #20]
 80078f2:	f002 f937 	bl	8009b64 <__i2b>
 80078f6:	4680      	mov	r8, r0
 80078f8:	b948      	cbnz	r0, 800790e <_strtod_l+0x69e>
 80078fa:	f04f 0800 	mov.w	r8, #0
 80078fe:	e6d2      	b.n	80076a6 <_strtod_l+0x436>
 8007900:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007904:	fa02 f303 	lsl.w	r3, r2, r3
 8007908:	ea03 0a0a 	and.w	sl, r3, sl
 800790c:	e7ae      	b.n	800786c <_strtod_l+0x5fc>
 800790e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007910:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007912:	2d00      	cmp	r5, #0
 8007914:	bfab      	itete	ge
 8007916:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007918:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800791a:	18ef      	addge	r7, r5, r3
 800791c:	1b5e      	sublt	r6, r3, r5
 800791e:	9b08      	ldr	r3, [sp, #32]
 8007920:	bfa8      	it	ge
 8007922:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007924:	eba5 0503 	sub.w	r5, r5, r3
 8007928:	4415      	add	r5, r2
 800792a:	4b67      	ldr	r3, [pc, #412]	@ (8007ac8 <_strtod_l+0x858>)
 800792c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8007930:	bfb8      	it	lt
 8007932:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007934:	429d      	cmp	r5, r3
 8007936:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800793a:	da50      	bge.n	80079de <_strtod_l+0x76e>
 800793c:	1b5b      	subs	r3, r3, r5
 800793e:	2b1f      	cmp	r3, #31
 8007940:	f04f 0101 	mov.w	r1, #1
 8007944:	eba2 0203 	sub.w	r2, r2, r3
 8007948:	dc3d      	bgt.n	80079c6 <_strtod_l+0x756>
 800794a:	fa01 f303 	lsl.w	r3, r1, r3
 800794e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007950:	2300      	movs	r3, #0
 8007952:	9310      	str	r3, [sp, #64]	@ 0x40
 8007954:	18bd      	adds	r5, r7, r2
 8007956:	9b08      	ldr	r3, [sp, #32]
 8007958:	42af      	cmp	r7, r5
 800795a:	4416      	add	r6, r2
 800795c:	441e      	add	r6, r3
 800795e:	463b      	mov	r3, r7
 8007960:	bfa8      	it	ge
 8007962:	462b      	movge	r3, r5
 8007964:	42b3      	cmp	r3, r6
 8007966:	bfa8      	it	ge
 8007968:	4633      	movge	r3, r6
 800796a:	2b00      	cmp	r3, #0
 800796c:	bfc2      	ittt	gt
 800796e:	1aed      	subgt	r5, r5, r3
 8007970:	1af6      	subgt	r6, r6, r3
 8007972:	1aff      	subgt	r7, r7, r3
 8007974:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007976:	2b00      	cmp	r3, #0
 8007978:	dd16      	ble.n	80079a8 <_strtod_l+0x738>
 800797a:	4641      	mov	r1, r8
 800797c:	461a      	mov	r2, r3
 800797e:	9805      	ldr	r0, [sp, #20]
 8007980:	f002 f9ae 	bl	8009ce0 <__pow5mult>
 8007984:	4680      	mov	r8, r0
 8007986:	2800      	cmp	r0, #0
 8007988:	d0b7      	beq.n	80078fa <_strtod_l+0x68a>
 800798a:	4601      	mov	r1, r0
 800798c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800798e:	9805      	ldr	r0, [sp, #20]
 8007990:	f002 f8fe 	bl	8009b90 <__multiply>
 8007994:	900e      	str	r0, [sp, #56]	@ 0x38
 8007996:	2800      	cmp	r0, #0
 8007998:	f43f ae85 	beq.w	80076a6 <_strtod_l+0x436>
 800799c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800799e:	9805      	ldr	r0, [sp, #20]
 80079a0:	f001 ffe2 	bl	8009968 <_Bfree>
 80079a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80079a8:	2d00      	cmp	r5, #0
 80079aa:	dc1d      	bgt.n	80079e8 <_strtod_l+0x778>
 80079ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	dd23      	ble.n	80079fa <_strtod_l+0x78a>
 80079b2:	4649      	mov	r1, r9
 80079b4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80079b6:	9805      	ldr	r0, [sp, #20]
 80079b8:	f002 f992 	bl	8009ce0 <__pow5mult>
 80079bc:	4681      	mov	r9, r0
 80079be:	b9e0      	cbnz	r0, 80079fa <_strtod_l+0x78a>
 80079c0:	f04f 0900 	mov.w	r9, #0
 80079c4:	e66f      	b.n	80076a6 <_strtod_l+0x436>
 80079c6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80079ca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80079ce:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80079d2:	35e2      	adds	r5, #226	@ 0xe2
 80079d4:	fa01 f305 	lsl.w	r3, r1, r5
 80079d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80079da:	9113      	str	r1, [sp, #76]	@ 0x4c
 80079dc:	e7ba      	b.n	8007954 <_strtod_l+0x6e4>
 80079de:	2300      	movs	r3, #0
 80079e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80079e2:	2301      	movs	r3, #1
 80079e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80079e6:	e7b5      	b.n	8007954 <_strtod_l+0x6e4>
 80079e8:	462a      	mov	r2, r5
 80079ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079ec:	9805      	ldr	r0, [sp, #20]
 80079ee:	f002 f9d1 	bl	8009d94 <__lshift>
 80079f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d1d9      	bne.n	80079ac <_strtod_l+0x73c>
 80079f8:	e655      	b.n	80076a6 <_strtod_l+0x436>
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	dd07      	ble.n	8007a0e <_strtod_l+0x79e>
 80079fe:	4649      	mov	r1, r9
 8007a00:	4632      	mov	r2, r6
 8007a02:	9805      	ldr	r0, [sp, #20]
 8007a04:	f002 f9c6 	bl	8009d94 <__lshift>
 8007a08:	4681      	mov	r9, r0
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d0d8      	beq.n	80079c0 <_strtod_l+0x750>
 8007a0e:	2f00      	cmp	r7, #0
 8007a10:	dd08      	ble.n	8007a24 <_strtod_l+0x7b4>
 8007a12:	4641      	mov	r1, r8
 8007a14:	463a      	mov	r2, r7
 8007a16:	9805      	ldr	r0, [sp, #20]
 8007a18:	f002 f9bc 	bl	8009d94 <__lshift>
 8007a1c:	4680      	mov	r8, r0
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f43f ae41 	beq.w	80076a6 <_strtod_l+0x436>
 8007a24:	464a      	mov	r2, r9
 8007a26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a28:	9805      	ldr	r0, [sp, #20]
 8007a2a:	f002 fa3b 	bl	8009ea4 <__mdiff>
 8007a2e:	4604      	mov	r4, r0
 8007a30:	2800      	cmp	r0, #0
 8007a32:	f43f ae38 	beq.w	80076a6 <_strtod_l+0x436>
 8007a36:	68c3      	ldr	r3, [r0, #12]
 8007a38:	4641      	mov	r1, r8
 8007a3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60c3      	str	r3, [r0, #12]
 8007a40:	f002 fa14 	bl	8009e6c <__mcmp>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	da45      	bge.n	8007ad4 <_strtod_l+0x864>
 8007a48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a4a:	ea53 030a 	orrs.w	r3, r3, sl
 8007a4e:	d16b      	bne.n	8007b28 <_strtod_l+0x8b8>
 8007a50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d167      	bne.n	8007b28 <_strtod_l+0x8b8>
 8007a58:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a5c:	0d1b      	lsrs	r3, r3, #20
 8007a5e:	051b      	lsls	r3, r3, #20
 8007a60:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007a64:	d960      	bls.n	8007b28 <_strtod_l+0x8b8>
 8007a66:	6963      	ldr	r3, [r4, #20]
 8007a68:	b913      	cbnz	r3, 8007a70 <_strtod_l+0x800>
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	dd5b      	ble.n	8007b28 <_strtod_l+0x8b8>
 8007a70:	4621      	mov	r1, r4
 8007a72:	2201      	movs	r2, #1
 8007a74:	9805      	ldr	r0, [sp, #20]
 8007a76:	f002 f98d 	bl	8009d94 <__lshift>
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	f002 f9f5 	bl	8009e6c <__mcmp>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	dd50      	ble.n	8007b28 <_strtod_l+0x8b8>
 8007a86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a8a:	9a08      	ldr	r2, [sp, #32]
 8007a8c:	0d1b      	lsrs	r3, r3, #20
 8007a8e:	051b      	lsls	r3, r3, #20
 8007a90:	2a00      	cmp	r2, #0
 8007a92:	d06a      	beq.n	8007b6a <_strtod_l+0x8fa>
 8007a94:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007a98:	d867      	bhi.n	8007b6a <_strtod_l+0x8fa>
 8007a9a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007a9e:	f67f ae98 	bls.w	80077d2 <_strtod_l+0x562>
 8007aa2:	4650      	mov	r0, sl
 8007aa4:	4659      	mov	r1, fp
 8007aa6:	4b09      	ldr	r3, [pc, #36]	@ (8007acc <_strtod_l+0x85c>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f7f8 fd15 	bl	80004d8 <__aeabi_dmul>
 8007aae:	4b08      	ldr	r3, [pc, #32]	@ (8007ad0 <_strtod_l+0x860>)
 8007ab0:	4682      	mov	sl, r0
 8007ab2:	400b      	ands	r3, r1
 8007ab4:	468b      	mov	fp, r1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f47f ae00 	bne.w	80076bc <_strtod_l+0x44c>
 8007abc:	2322      	movs	r3, #34	@ 0x22
 8007abe:	9a05      	ldr	r2, [sp, #20]
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	e5fb      	b.n	80076bc <_strtod_l+0x44c>
 8007ac4:	0800ab30 	.word	0x0800ab30
 8007ac8:	fffffc02 	.word	0xfffffc02
 8007acc:	39500000 	.word	0x39500000
 8007ad0:	7ff00000 	.word	0x7ff00000
 8007ad4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007ad8:	d165      	bne.n	8007ba6 <_strtod_l+0x936>
 8007ada:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007adc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ae0:	b35a      	cbz	r2, 8007b3a <_strtod_l+0x8ca>
 8007ae2:	4a99      	ldr	r2, [pc, #612]	@ (8007d48 <_strtod_l+0xad8>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d12b      	bne.n	8007b40 <_strtod_l+0x8d0>
 8007ae8:	9b08      	ldr	r3, [sp, #32]
 8007aea:	4651      	mov	r1, sl
 8007aec:	b303      	cbz	r3, 8007b30 <_strtod_l+0x8c0>
 8007aee:	465a      	mov	r2, fp
 8007af0:	4b96      	ldr	r3, [pc, #600]	@ (8007d4c <_strtod_l+0xadc>)
 8007af2:	4013      	ands	r3, r2
 8007af4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007af8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007afc:	d81b      	bhi.n	8007b36 <_strtod_l+0x8c6>
 8007afe:	0d1b      	lsrs	r3, r3, #20
 8007b00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007b04:	fa02 f303 	lsl.w	r3, r2, r3
 8007b08:	4299      	cmp	r1, r3
 8007b0a:	d119      	bne.n	8007b40 <_strtod_l+0x8d0>
 8007b0c:	4b90      	ldr	r3, [pc, #576]	@ (8007d50 <_strtod_l+0xae0>)
 8007b0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d102      	bne.n	8007b1a <_strtod_l+0x8aa>
 8007b14:	3101      	adds	r1, #1
 8007b16:	f43f adc6 	beq.w	80076a6 <_strtod_l+0x436>
 8007b1a:	f04f 0a00 	mov.w	sl, #0
 8007b1e:	4b8b      	ldr	r3, [pc, #556]	@ (8007d4c <_strtod_l+0xadc>)
 8007b20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b22:	401a      	ands	r2, r3
 8007b24:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007b28:	9b08      	ldr	r3, [sp, #32]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1b9      	bne.n	8007aa2 <_strtod_l+0x832>
 8007b2e:	e5c5      	b.n	80076bc <_strtod_l+0x44c>
 8007b30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b34:	e7e8      	b.n	8007b08 <_strtod_l+0x898>
 8007b36:	4613      	mov	r3, r2
 8007b38:	e7e6      	b.n	8007b08 <_strtod_l+0x898>
 8007b3a:	ea53 030a 	orrs.w	r3, r3, sl
 8007b3e:	d0a2      	beq.n	8007a86 <_strtod_l+0x816>
 8007b40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b42:	b1db      	cbz	r3, 8007b7c <_strtod_l+0x90c>
 8007b44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b46:	4213      	tst	r3, r2
 8007b48:	d0ee      	beq.n	8007b28 <_strtod_l+0x8b8>
 8007b4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b4c:	4650      	mov	r0, sl
 8007b4e:	4659      	mov	r1, fp
 8007b50:	9a08      	ldr	r2, [sp, #32]
 8007b52:	b1bb      	cbz	r3, 8007b84 <_strtod_l+0x914>
 8007b54:	f7ff fb6a 	bl	800722c <sulp>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b60:	f7f8 fb04 	bl	800016c <__adddf3>
 8007b64:	4682      	mov	sl, r0
 8007b66:	468b      	mov	fp, r1
 8007b68:	e7de      	b.n	8007b28 <_strtod_l+0x8b8>
 8007b6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007b6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007b72:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007b76:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007b7a:	e7d5      	b.n	8007b28 <_strtod_l+0x8b8>
 8007b7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007b7e:	ea13 0f0a 	tst.w	r3, sl
 8007b82:	e7e1      	b.n	8007b48 <_strtod_l+0x8d8>
 8007b84:	f7ff fb52 	bl	800722c <sulp>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b90:	f7f8 faea 	bl	8000168 <__aeabi_dsub>
 8007b94:	2200      	movs	r2, #0
 8007b96:	2300      	movs	r3, #0
 8007b98:	4682      	mov	sl, r0
 8007b9a:	468b      	mov	fp, r1
 8007b9c:	f7f8 ff04 	bl	80009a8 <__aeabi_dcmpeq>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d0c1      	beq.n	8007b28 <_strtod_l+0x8b8>
 8007ba4:	e615      	b.n	80077d2 <_strtod_l+0x562>
 8007ba6:	4641      	mov	r1, r8
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f002 facf 	bl	800a14c <__ratio>
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	460f      	mov	r7, r1
 8007bb8:	f7f8 ff0a 	bl	80009d0 <__aeabi_dcmple>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d06d      	beq.n	8007c9c <_strtod_l+0xa2c>
 8007bc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d178      	bne.n	8007cb8 <_strtod_l+0xa48>
 8007bc6:	f1ba 0f00 	cmp.w	sl, #0
 8007bca:	d156      	bne.n	8007c7a <_strtod_l+0xa0a>
 8007bcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d158      	bne.n	8007c88 <_strtod_l+0xa18>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4630      	mov	r0, r6
 8007bda:	4639      	mov	r1, r7
 8007bdc:	4b5d      	ldr	r3, [pc, #372]	@ (8007d54 <_strtod_l+0xae4>)
 8007bde:	f7f8 feed 	bl	80009bc <__aeabi_dcmplt>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d157      	bne.n	8007c96 <_strtod_l+0xa26>
 8007be6:	4630      	mov	r0, r6
 8007be8:	4639      	mov	r1, r7
 8007bea:	2200      	movs	r2, #0
 8007bec:	4b5a      	ldr	r3, [pc, #360]	@ (8007d58 <_strtod_l+0xae8>)
 8007bee:	f7f8 fc73 	bl	80004d8 <__aeabi_dmul>
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	460f      	mov	r7, r1
 8007bf6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007bfa:	9606      	str	r6, [sp, #24]
 8007bfc:	9307      	str	r3, [sp, #28]
 8007bfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c02:	4d52      	ldr	r5, [pc, #328]	@ (8007d4c <_strtod_l+0xadc>)
 8007c04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007c08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c0a:	401d      	ands	r5, r3
 8007c0c:	4b53      	ldr	r3, [pc, #332]	@ (8007d5c <_strtod_l+0xaec>)
 8007c0e:	429d      	cmp	r5, r3
 8007c10:	f040 80aa 	bne.w	8007d68 <_strtod_l+0xaf8>
 8007c14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c16:	4650      	mov	r0, sl
 8007c18:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007c1c:	4659      	mov	r1, fp
 8007c1e:	f002 f9d5 	bl	8009fcc <__ulp>
 8007c22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c26:	f7f8 fc57 	bl	80004d8 <__aeabi_dmul>
 8007c2a:	4652      	mov	r2, sl
 8007c2c:	465b      	mov	r3, fp
 8007c2e:	f7f8 fa9d 	bl	800016c <__adddf3>
 8007c32:	460b      	mov	r3, r1
 8007c34:	4945      	ldr	r1, [pc, #276]	@ (8007d4c <_strtod_l+0xadc>)
 8007c36:	4a4a      	ldr	r2, [pc, #296]	@ (8007d60 <_strtod_l+0xaf0>)
 8007c38:	4019      	ands	r1, r3
 8007c3a:	4291      	cmp	r1, r2
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	d942      	bls.n	8007cc6 <_strtod_l+0xa56>
 8007c40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007c42:	4b43      	ldr	r3, [pc, #268]	@ (8007d50 <_strtod_l+0xae0>)
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d103      	bne.n	8007c50 <_strtod_l+0x9e0>
 8007c48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	f43f ad2b 	beq.w	80076a6 <_strtod_l+0x436>
 8007c50:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007c54:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007d50 <_strtod_l+0xae0>
 8007c58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c5a:	9805      	ldr	r0, [sp, #20]
 8007c5c:	f001 fe84 	bl	8009968 <_Bfree>
 8007c60:	4649      	mov	r1, r9
 8007c62:	9805      	ldr	r0, [sp, #20]
 8007c64:	f001 fe80 	bl	8009968 <_Bfree>
 8007c68:	4641      	mov	r1, r8
 8007c6a:	9805      	ldr	r0, [sp, #20]
 8007c6c:	f001 fe7c 	bl	8009968 <_Bfree>
 8007c70:	4621      	mov	r1, r4
 8007c72:	9805      	ldr	r0, [sp, #20]
 8007c74:	f001 fe78 	bl	8009968 <_Bfree>
 8007c78:	e618      	b.n	80078ac <_strtod_l+0x63c>
 8007c7a:	f1ba 0f01 	cmp.w	sl, #1
 8007c7e:	d103      	bne.n	8007c88 <_strtod_l+0xa18>
 8007c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f43f ada5 	beq.w	80077d2 <_strtod_l+0x562>
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4b36      	ldr	r3, [pc, #216]	@ (8007d64 <_strtod_l+0xaf4>)
 8007c8c:	2600      	movs	r6, #0
 8007c8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c92:	4f30      	ldr	r7, [pc, #192]	@ (8007d54 <_strtod_l+0xae4>)
 8007c94:	e7b3      	b.n	8007bfe <_strtod_l+0x98e>
 8007c96:	2600      	movs	r6, #0
 8007c98:	4f2f      	ldr	r7, [pc, #188]	@ (8007d58 <_strtod_l+0xae8>)
 8007c9a:	e7ac      	b.n	8007bf6 <_strtod_l+0x986>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	4b2d      	ldr	r3, [pc, #180]	@ (8007d58 <_strtod_l+0xae8>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f7f8 fc18 	bl	80004d8 <__aeabi_dmul>
 8007ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007caa:	4606      	mov	r6, r0
 8007cac:	460f      	mov	r7, r1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0a1      	beq.n	8007bf6 <_strtod_l+0x986>
 8007cb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007cb6:	e7a2      	b.n	8007bfe <_strtod_l+0x98e>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	4b26      	ldr	r3, [pc, #152]	@ (8007d54 <_strtod_l+0xae4>)
 8007cbc:	4616      	mov	r6, r2
 8007cbe:	461f      	mov	r7, r3
 8007cc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007cc4:	e79b      	b.n	8007bfe <_strtod_l+0x98e>
 8007cc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007cca:	9b08      	ldr	r3, [sp, #32]
 8007ccc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1c1      	bne.n	8007c58 <_strtod_l+0x9e8>
 8007cd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007cd8:	0d1b      	lsrs	r3, r3, #20
 8007cda:	051b      	lsls	r3, r3, #20
 8007cdc:	429d      	cmp	r5, r3
 8007cde:	d1bb      	bne.n	8007c58 <_strtod_l+0x9e8>
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	4639      	mov	r1, r7
 8007ce4:	f7f8 ff40 	bl	8000b68 <__aeabi_d2lz>
 8007ce8:	f7f8 fbc8 	bl	800047c <__aeabi_l2d>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	f7f8 fa38 	bl	8000168 <__aeabi_dsub>
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007d00:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d06:	ea46 060a 	orr.w	r6, r6, sl
 8007d0a:	431e      	orrs	r6, r3
 8007d0c:	d069      	beq.n	8007de2 <_strtod_l+0xb72>
 8007d0e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007d38 <_strtod_l+0xac8>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 fe52 	bl	80009bc <__aeabi_dcmplt>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f47f accf 	bne.w	80076bc <_strtod_l+0x44c>
 8007d1e:	a308      	add	r3, pc, #32	@ (adr r3, 8007d40 <_strtod_l+0xad0>)
 8007d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d28:	f7f8 fe66 	bl	80009f8 <__aeabi_dcmpgt>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d093      	beq.n	8007c58 <_strtod_l+0x9e8>
 8007d30:	e4c4      	b.n	80076bc <_strtod_l+0x44c>
 8007d32:	bf00      	nop
 8007d34:	f3af 8000 	nop.w
 8007d38:	94a03595 	.word	0x94a03595
 8007d3c:	3fdfffff 	.word	0x3fdfffff
 8007d40:	35afe535 	.word	0x35afe535
 8007d44:	3fe00000 	.word	0x3fe00000
 8007d48:	000fffff 	.word	0x000fffff
 8007d4c:	7ff00000 	.word	0x7ff00000
 8007d50:	7fefffff 	.word	0x7fefffff
 8007d54:	3ff00000 	.word	0x3ff00000
 8007d58:	3fe00000 	.word	0x3fe00000
 8007d5c:	7fe00000 	.word	0x7fe00000
 8007d60:	7c9fffff 	.word	0x7c9fffff
 8007d64:	bff00000 	.word	0xbff00000
 8007d68:	9b08      	ldr	r3, [sp, #32]
 8007d6a:	b323      	cbz	r3, 8007db6 <_strtod_l+0xb46>
 8007d6c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007d70:	d821      	bhi.n	8007db6 <_strtod_l+0xb46>
 8007d72:	a327      	add	r3, pc, #156	@ (adr r3, 8007e10 <_strtod_l+0xba0>)
 8007d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d78:	4630      	mov	r0, r6
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7f8 fe28 	bl	80009d0 <__aeabi_dcmple>
 8007d80:	b1a0      	cbz	r0, 8007dac <_strtod_l+0xb3c>
 8007d82:	4639      	mov	r1, r7
 8007d84:	4630      	mov	r0, r6
 8007d86:	f7f8 fe7f 	bl	8000a88 <__aeabi_d2uiz>
 8007d8a:	2801      	cmp	r0, #1
 8007d8c:	bf38      	it	cc
 8007d8e:	2001      	movcc	r0, #1
 8007d90:	f7f8 fb28 	bl	80003e4 <__aeabi_ui2d>
 8007d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d96:	4606      	mov	r6, r0
 8007d98:	460f      	mov	r7, r1
 8007d9a:	b9fb      	cbnz	r3, 8007ddc <_strtod_l+0xb6c>
 8007d9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007da0:	9014      	str	r0, [sp, #80]	@ 0x50
 8007da2:	9315      	str	r3, [sp, #84]	@ 0x54
 8007da4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007da8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007dac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007dae:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007db2:	1b5b      	subs	r3, r3, r5
 8007db4:	9311      	str	r3, [sp, #68]	@ 0x44
 8007db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dba:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007dbe:	f002 f905 	bl	8009fcc <__ulp>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4650      	mov	r0, sl
 8007dc8:	4659      	mov	r1, fp
 8007dca:	f7f8 fb85 	bl	80004d8 <__aeabi_dmul>
 8007dce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007dd2:	f7f8 f9cb 	bl	800016c <__adddf3>
 8007dd6:	4682      	mov	sl, r0
 8007dd8:	468b      	mov	fp, r1
 8007dda:	e776      	b.n	8007cca <_strtod_l+0xa5a>
 8007ddc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007de0:	e7e0      	b.n	8007da4 <_strtod_l+0xb34>
 8007de2:	a30d      	add	r3, pc, #52	@ (adr r3, 8007e18 <_strtod_l+0xba8>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	f7f8 fde8 	bl	80009bc <__aeabi_dcmplt>
 8007dec:	e79e      	b.n	8007d2c <_strtod_l+0xabc>
 8007dee:	2300      	movs	r3, #0
 8007df0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007df2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007df4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	f7ff ba77 	b.w	80072ea <_strtod_l+0x7a>
 8007dfc:	2a65      	cmp	r2, #101	@ 0x65
 8007dfe:	f43f ab6e 	beq.w	80074de <_strtod_l+0x26e>
 8007e02:	2a45      	cmp	r2, #69	@ 0x45
 8007e04:	f43f ab6b 	beq.w	80074de <_strtod_l+0x26e>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	f7ff bba6 	b.w	800755a <_strtod_l+0x2ea>
 8007e0e:	bf00      	nop
 8007e10:	ffc00000 	.word	0xffc00000
 8007e14:	41dfffff 	.word	0x41dfffff
 8007e18:	94a03595 	.word	0x94a03595
 8007e1c:	3fcfffff 	.word	0x3fcfffff

08007e20 <_strtod_r>:
 8007e20:	4b01      	ldr	r3, [pc, #4]	@ (8007e28 <_strtod_r+0x8>)
 8007e22:	f7ff ba25 	b.w	8007270 <_strtod_l>
 8007e26:	bf00      	nop
 8007e28:	20000034 	.word	0x20000034

08007e2c <_strtol_l.constprop.0>:
 8007e2c:	2b24      	cmp	r3, #36	@ 0x24
 8007e2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e32:	4686      	mov	lr, r0
 8007e34:	4690      	mov	r8, r2
 8007e36:	d801      	bhi.n	8007e3c <_strtol_l.constprop.0+0x10>
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d106      	bne.n	8007e4a <_strtol_l.constprop.0+0x1e>
 8007e3c:	f000 f8ae 	bl	8007f9c <__errno>
 8007e40:	2316      	movs	r3, #22
 8007e42:	6003      	str	r3, [r0, #0]
 8007e44:	2000      	movs	r0, #0
 8007e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4a:	460d      	mov	r5, r1
 8007e4c:	4833      	ldr	r0, [pc, #204]	@ (8007f1c <_strtol_l.constprop.0+0xf0>)
 8007e4e:	462a      	mov	r2, r5
 8007e50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e54:	5d06      	ldrb	r6, [r0, r4]
 8007e56:	f016 0608 	ands.w	r6, r6, #8
 8007e5a:	d1f8      	bne.n	8007e4e <_strtol_l.constprop.0+0x22>
 8007e5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007e5e:	d12d      	bne.n	8007ebc <_strtol_l.constprop.0+0x90>
 8007e60:	2601      	movs	r6, #1
 8007e62:	782c      	ldrb	r4, [r5, #0]
 8007e64:	1c95      	adds	r5, r2, #2
 8007e66:	f033 0210 	bics.w	r2, r3, #16
 8007e6a:	d109      	bne.n	8007e80 <_strtol_l.constprop.0+0x54>
 8007e6c:	2c30      	cmp	r4, #48	@ 0x30
 8007e6e:	d12a      	bne.n	8007ec6 <_strtol_l.constprop.0+0x9a>
 8007e70:	782a      	ldrb	r2, [r5, #0]
 8007e72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007e76:	2a58      	cmp	r2, #88	@ 0x58
 8007e78:	d125      	bne.n	8007ec6 <_strtol_l.constprop.0+0x9a>
 8007e7a:	2310      	movs	r3, #16
 8007e7c:	786c      	ldrb	r4, [r5, #1]
 8007e7e:	3502      	adds	r5, #2
 8007e80:	2200      	movs	r2, #0
 8007e82:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007e86:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007e8a:	fbbc f9f3 	udiv	r9, ip, r3
 8007e8e:	4610      	mov	r0, r2
 8007e90:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007e98:	2f09      	cmp	r7, #9
 8007e9a:	d81b      	bhi.n	8007ed4 <_strtol_l.constprop.0+0xa8>
 8007e9c:	463c      	mov	r4, r7
 8007e9e:	42a3      	cmp	r3, r4
 8007ea0:	dd27      	ble.n	8007ef2 <_strtol_l.constprop.0+0xc6>
 8007ea2:	1c57      	adds	r7, r2, #1
 8007ea4:	d007      	beq.n	8007eb6 <_strtol_l.constprop.0+0x8a>
 8007ea6:	4581      	cmp	r9, r0
 8007ea8:	d320      	bcc.n	8007eec <_strtol_l.constprop.0+0xc0>
 8007eaa:	d101      	bne.n	8007eb0 <_strtol_l.constprop.0+0x84>
 8007eac:	45a2      	cmp	sl, r4
 8007eae:	db1d      	blt.n	8007eec <_strtol_l.constprop.0+0xc0>
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	fb00 4003 	mla	r0, r0, r3, r4
 8007eb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007eba:	e7eb      	b.n	8007e94 <_strtol_l.constprop.0+0x68>
 8007ebc:	2c2b      	cmp	r4, #43	@ 0x2b
 8007ebe:	bf04      	itt	eq
 8007ec0:	782c      	ldrbeq	r4, [r5, #0]
 8007ec2:	1c95      	addeq	r5, r2, #2
 8007ec4:	e7cf      	b.n	8007e66 <_strtol_l.constprop.0+0x3a>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1da      	bne.n	8007e80 <_strtol_l.constprop.0+0x54>
 8007eca:	2c30      	cmp	r4, #48	@ 0x30
 8007ecc:	bf0c      	ite	eq
 8007ece:	2308      	moveq	r3, #8
 8007ed0:	230a      	movne	r3, #10
 8007ed2:	e7d5      	b.n	8007e80 <_strtol_l.constprop.0+0x54>
 8007ed4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007ed8:	2f19      	cmp	r7, #25
 8007eda:	d801      	bhi.n	8007ee0 <_strtol_l.constprop.0+0xb4>
 8007edc:	3c37      	subs	r4, #55	@ 0x37
 8007ede:	e7de      	b.n	8007e9e <_strtol_l.constprop.0+0x72>
 8007ee0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007ee4:	2f19      	cmp	r7, #25
 8007ee6:	d804      	bhi.n	8007ef2 <_strtol_l.constprop.0+0xc6>
 8007ee8:	3c57      	subs	r4, #87	@ 0x57
 8007eea:	e7d8      	b.n	8007e9e <_strtol_l.constprop.0+0x72>
 8007eec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ef0:	e7e1      	b.n	8007eb6 <_strtol_l.constprop.0+0x8a>
 8007ef2:	1c53      	adds	r3, r2, #1
 8007ef4:	d108      	bne.n	8007f08 <_strtol_l.constprop.0+0xdc>
 8007ef6:	2322      	movs	r3, #34	@ 0x22
 8007ef8:	4660      	mov	r0, ip
 8007efa:	f8ce 3000 	str.w	r3, [lr]
 8007efe:	f1b8 0f00 	cmp.w	r8, #0
 8007f02:	d0a0      	beq.n	8007e46 <_strtol_l.constprop.0+0x1a>
 8007f04:	1e69      	subs	r1, r5, #1
 8007f06:	e006      	b.n	8007f16 <_strtol_l.constprop.0+0xea>
 8007f08:	b106      	cbz	r6, 8007f0c <_strtol_l.constprop.0+0xe0>
 8007f0a:	4240      	negs	r0, r0
 8007f0c:	f1b8 0f00 	cmp.w	r8, #0
 8007f10:	d099      	beq.n	8007e46 <_strtol_l.constprop.0+0x1a>
 8007f12:	2a00      	cmp	r2, #0
 8007f14:	d1f6      	bne.n	8007f04 <_strtol_l.constprop.0+0xd8>
 8007f16:	f8c8 1000 	str.w	r1, [r8]
 8007f1a:	e794      	b.n	8007e46 <_strtol_l.constprop.0+0x1a>
 8007f1c:	0800ab61 	.word	0x0800ab61

08007f20 <_strtol_r>:
 8007f20:	f7ff bf84 	b.w	8007e2c <_strtol_l.constprop.0>

08007f24 <_fwalk_sglue>:
 8007f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f28:	4607      	mov	r7, r0
 8007f2a:	4688      	mov	r8, r1
 8007f2c:	4614      	mov	r4, r2
 8007f2e:	2600      	movs	r6, #0
 8007f30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f34:	f1b9 0901 	subs.w	r9, r9, #1
 8007f38:	d505      	bpl.n	8007f46 <_fwalk_sglue+0x22>
 8007f3a:	6824      	ldr	r4, [r4, #0]
 8007f3c:	2c00      	cmp	r4, #0
 8007f3e:	d1f7      	bne.n	8007f30 <_fwalk_sglue+0xc>
 8007f40:	4630      	mov	r0, r6
 8007f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f46:	89ab      	ldrh	r3, [r5, #12]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d907      	bls.n	8007f5c <_fwalk_sglue+0x38>
 8007f4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f50:	3301      	adds	r3, #1
 8007f52:	d003      	beq.n	8007f5c <_fwalk_sglue+0x38>
 8007f54:	4629      	mov	r1, r5
 8007f56:	4638      	mov	r0, r7
 8007f58:	47c0      	blx	r8
 8007f5a:	4306      	orrs	r6, r0
 8007f5c:	3568      	adds	r5, #104	@ 0x68
 8007f5e:	e7e9      	b.n	8007f34 <_fwalk_sglue+0x10>

08007f60 <strncmp>:
 8007f60:	b510      	push	{r4, lr}
 8007f62:	b16a      	cbz	r2, 8007f80 <strncmp+0x20>
 8007f64:	3901      	subs	r1, #1
 8007f66:	1884      	adds	r4, r0, r2
 8007f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d103      	bne.n	8007f7c <strncmp+0x1c>
 8007f74:	42a0      	cmp	r0, r4
 8007f76:	d001      	beq.n	8007f7c <strncmp+0x1c>
 8007f78:	2a00      	cmp	r2, #0
 8007f7a:	d1f5      	bne.n	8007f68 <strncmp+0x8>
 8007f7c:	1ad0      	subs	r0, r2, r3
 8007f7e:	bd10      	pop	{r4, pc}
 8007f80:	4610      	mov	r0, r2
 8007f82:	e7fc      	b.n	8007f7e <strncmp+0x1e>

08007f84 <memset>:
 8007f84:	4603      	mov	r3, r0
 8007f86:	4402      	add	r2, r0
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d100      	bne.n	8007f8e <memset+0xa>
 8007f8c:	4770      	bx	lr
 8007f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f92:	e7f9      	b.n	8007f88 <memset+0x4>

08007f94 <_localeconv_r>:
 8007f94:	4800      	ldr	r0, [pc, #0]	@ (8007f98 <_localeconv_r+0x4>)
 8007f96:	4770      	bx	lr
 8007f98:	20000124 	.word	0x20000124

08007f9c <__errno>:
 8007f9c:	4b01      	ldr	r3, [pc, #4]	@ (8007fa4 <__errno+0x8>)
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	200001a0 	.word	0x200001a0

08007fa8 <__libc_init_array>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	2600      	movs	r6, #0
 8007fac:	4d0c      	ldr	r5, [pc, #48]	@ (8007fe0 <__libc_init_array+0x38>)
 8007fae:	4c0d      	ldr	r4, [pc, #52]	@ (8007fe4 <__libc_init_array+0x3c>)
 8007fb0:	1b64      	subs	r4, r4, r5
 8007fb2:	10a4      	asrs	r4, r4, #2
 8007fb4:	42a6      	cmp	r6, r4
 8007fb6:	d109      	bne.n	8007fcc <__libc_init_array+0x24>
 8007fb8:	f002 fd60 	bl	800aa7c <_init>
 8007fbc:	2600      	movs	r6, #0
 8007fbe:	4d0a      	ldr	r5, [pc, #40]	@ (8007fe8 <__libc_init_array+0x40>)
 8007fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8007fec <__libc_init_array+0x44>)
 8007fc2:	1b64      	subs	r4, r4, r5
 8007fc4:	10a4      	asrs	r4, r4, #2
 8007fc6:	42a6      	cmp	r6, r4
 8007fc8:	d105      	bne.n	8007fd6 <__libc_init_array+0x2e>
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd0:	4798      	blx	r3
 8007fd2:	3601      	adds	r6, #1
 8007fd4:	e7ee      	b.n	8007fb4 <__libc_init_array+0xc>
 8007fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fda:	4798      	blx	r3
 8007fdc:	3601      	adds	r6, #1
 8007fde:	e7f2      	b.n	8007fc6 <__libc_init_array+0x1e>
 8007fe0:	0800aefc 	.word	0x0800aefc
 8007fe4:	0800aefc 	.word	0x0800aefc
 8007fe8:	0800aefc 	.word	0x0800aefc
 8007fec:	0800af00 	.word	0x0800af00

08007ff0 <__retarget_lock_init_recursive>:
 8007ff0:	4770      	bx	lr

08007ff2 <__retarget_lock_acquire_recursive>:
 8007ff2:	4770      	bx	lr

08007ff4 <__retarget_lock_release_recursive>:
 8007ff4:	4770      	bx	lr

08007ff6 <memchr>:
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	b2c9      	uxtb	r1, r1
 8007ffc:	4402      	add	r2, r0
 8007ffe:	4293      	cmp	r3, r2
 8008000:	4618      	mov	r0, r3
 8008002:	d101      	bne.n	8008008 <memchr+0x12>
 8008004:	2000      	movs	r0, #0
 8008006:	e003      	b.n	8008010 <memchr+0x1a>
 8008008:	7804      	ldrb	r4, [r0, #0]
 800800a:	3301      	adds	r3, #1
 800800c:	428c      	cmp	r4, r1
 800800e:	d1f6      	bne.n	8007ffe <memchr+0x8>
 8008010:	bd10      	pop	{r4, pc}

08008012 <memcpy>:
 8008012:	440a      	add	r2, r1
 8008014:	4291      	cmp	r1, r2
 8008016:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800801a:	d100      	bne.n	800801e <memcpy+0xc>
 800801c:	4770      	bx	lr
 800801e:	b510      	push	{r4, lr}
 8008020:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008024:	4291      	cmp	r1, r2
 8008026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800802a:	d1f9      	bne.n	8008020 <memcpy+0xe>
 800802c:	bd10      	pop	{r4, pc}
	...

08008030 <nan>:
 8008030:	2000      	movs	r0, #0
 8008032:	4901      	ldr	r1, [pc, #4]	@ (8008038 <nan+0x8>)
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	7ff80000 	.word	0x7ff80000

0800803c <nanf>:
 800803c:	4800      	ldr	r0, [pc, #0]	@ (8008040 <nanf+0x4>)
 800803e:	4770      	bx	lr
 8008040:	7fc00000 	.word	0x7fc00000

08008044 <quorem>:
 8008044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008048:	6903      	ldr	r3, [r0, #16]
 800804a:	690c      	ldr	r4, [r1, #16]
 800804c:	4607      	mov	r7, r0
 800804e:	42a3      	cmp	r3, r4
 8008050:	db7e      	blt.n	8008150 <quorem+0x10c>
 8008052:	3c01      	subs	r4, #1
 8008054:	00a3      	lsls	r3, r4, #2
 8008056:	f100 0514 	add.w	r5, r0, #20
 800805a:	f101 0814 	add.w	r8, r1, #20
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800806a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800806e:	3301      	adds	r3, #1
 8008070:	429a      	cmp	r2, r3
 8008072:	fbb2 f6f3 	udiv	r6, r2, r3
 8008076:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800807a:	d32e      	bcc.n	80080da <quorem+0x96>
 800807c:	f04f 0a00 	mov.w	sl, #0
 8008080:	46c4      	mov	ip, r8
 8008082:	46ae      	mov	lr, r5
 8008084:	46d3      	mov	fp, sl
 8008086:	f85c 3b04 	ldr.w	r3, [ip], #4
 800808a:	b298      	uxth	r0, r3
 800808c:	fb06 a000 	mla	r0, r6, r0, sl
 8008090:	0c1b      	lsrs	r3, r3, #16
 8008092:	0c02      	lsrs	r2, r0, #16
 8008094:	fb06 2303 	mla	r3, r6, r3, r2
 8008098:	f8de 2000 	ldr.w	r2, [lr]
 800809c:	b280      	uxth	r0, r0
 800809e:	b292      	uxth	r2, r2
 80080a0:	1a12      	subs	r2, r2, r0
 80080a2:	445a      	add	r2, fp
 80080a4:	f8de 0000 	ldr.w	r0, [lr]
 80080a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80080b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80080b6:	b292      	uxth	r2, r2
 80080b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80080bc:	45e1      	cmp	r9, ip
 80080be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80080c2:	f84e 2b04 	str.w	r2, [lr], #4
 80080c6:	d2de      	bcs.n	8008086 <quorem+0x42>
 80080c8:	9b00      	ldr	r3, [sp, #0]
 80080ca:	58eb      	ldr	r3, [r5, r3]
 80080cc:	b92b      	cbnz	r3, 80080da <quorem+0x96>
 80080ce:	9b01      	ldr	r3, [sp, #4]
 80080d0:	3b04      	subs	r3, #4
 80080d2:	429d      	cmp	r5, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	d32f      	bcc.n	8008138 <quorem+0xf4>
 80080d8:	613c      	str	r4, [r7, #16]
 80080da:	4638      	mov	r0, r7
 80080dc:	f001 fec6 	bl	8009e6c <__mcmp>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	db25      	blt.n	8008130 <quorem+0xec>
 80080e4:	4629      	mov	r1, r5
 80080e6:	2000      	movs	r0, #0
 80080e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80080ec:	f8d1 c000 	ldr.w	ip, [r1]
 80080f0:	fa1f fe82 	uxth.w	lr, r2
 80080f4:	fa1f f38c 	uxth.w	r3, ip
 80080f8:	eba3 030e 	sub.w	r3, r3, lr
 80080fc:	4403      	add	r3, r0
 80080fe:	0c12      	lsrs	r2, r2, #16
 8008100:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008104:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008108:	b29b      	uxth	r3, r3
 800810a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800810e:	45c1      	cmp	r9, r8
 8008110:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008114:	f841 3b04 	str.w	r3, [r1], #4
 8008118:	d2e6      	bcs.n	80080e8 <quorem+0xa4>
 800811a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800811e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008122:	b922      	cbnz	r2, 800812e <quorem+0xea>
 8008124:	3b04      	subs	r3, #4
 8008126:	429d      	cmp	r5, r3
 8008128:	461a      	mov	r2, r3
 800812a:	d30b      	bcc.n	8008144 <quorem+0x100>
 800812c:	613c      	str	r4, [r7, #16]
 800812e:	3601      	adds	r6, #1
 8008130:	4630      	mov	r0, r6
 8008132:	b003      	add	sp, #12
 8008134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008138:	6812      	ldr	r2, [r2, #0]
 800813a:	3b04      	subs	r3, #4
 800813c:	2a00      	cmp	r2, #0
 800813e:	d1cb      	bne.n	80080d8 <quorem+0x94>
 8008140:	3c01      	subs	r4, #1
 8008142:	e7c6      	b.n	80080d2 <quorem+0x8e>
 8008144:	6812      	ldr	r2, [r2, #0]
 8008146:	3b04      	subs	r3, #4
 8008148:	2a00      	cmp	r2, #0
 800814a:	d1ef      	bne.n	800812c <quorem+0xe8>
 800814c:	3c01      	subs	r4, #1
 800814e:	e7ea      	b.n	8008126 <quorem+0xe2>
 8008150:	2000      	movs	r0, #0
 8008152:	e7ee      	b.n	8008132 <quorem+0xee>
 8008154:	0000      	movs	r0, r0
	...

08008158 <_dtoa_r>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	4614      	mov	r4, r2
 800815e:	461d      	mov	r5, r3
 8008160:	69c7      	ldr	r7, [r0, #28]
 8008162:	b097      	sub	sp, #92	@ 0x5c
 8008164:	4683      	mov	fp, r0
 8008166:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800816a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800816c:	b97f      	cbnz	r7, 800818e <_dtoa_r+0x36>
 800816e:	2010      	movs	r0, #16
 8008170:	f001 fa4a 	bl	8009608 <malloc>
 8008174:	4602      	mov	r2, r0
 8008176:	f8cb 001c 	str.w	r0, [fp, #28]
 800817a:	b920      	cbnz	r0, 8008186 <_dtoa_r+0x2e>
 800817c:	21ef      	movs	r1, #239	@ 0xef
 800817e:	4ba8      	ldr	r3, [pc, #672]	@ (8008420 <_dtoa_r+0x2c8>)
 8008180:	48a8      	ldr	r0, [pc, #672]	@ (8008424 <_dtoa_r+0x2cc>)
 8008182:	f002 f945 	bl	800a410 <__assert_func>
 8008186:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800818a:	6007      	str	r7, [r0, #0]
 800818c:	60c7      	str	r7, [r0, #12]
 800818e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	b159      	cbz	r1, 80081ae <_dtoa_r+0x56>
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	2301      	movs	r3, #1
 800819a:	4093      	lsls	r3, r2
 800819c:	604a      	str	r2, [r1, #4]
 800819e:	608b      	str	r3, [r1, #8]
 80081a0:	4658      	mov	r0, fp
 80081a2:	f001 fbe1 	bl	8009968 <_Bfree>
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	1e2b      	subs	r3, r5, #0
 80081b0:	bfaf      	iteee	ge
 80081b2:	2300      	movge	r3, #0
 80081b4:	2201      	movlt	r2, #1
 80081b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80081ba:	9303      	strlt	r3, [sp, #12]
 80081bc:	bfa8      	it	ge
 80081be:	6033      	strge	r3, [r6, #0]
 80081c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80081c4:	4b98      	ldr	r3, [pc, #608]	@ (8008428 <_dtoa_r+0x2d0>)
 80081c6:	bfb8      	it	lt
 80081c8:	6032      	strlt	r2, [r6, #0]
 80081ca:	ea33 0308 	bics.w	r3, r3, r8
 80081ce:	d112      	bne.n	80081f6 <_dtoa_r+0x9e>
 80081d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80081d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80081dc:	4323      	orrs	r3, r4
 80081de:	f000 8550 	beq.w	8008c82 <_dtoa_r+0xb2a>
 80081e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081e4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800842c <_dtoa_r+0x2d4>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 8552 	beq.w	8008c92 <_dtoa_r+0xb3a>
 80081ee:	f10a 0303 	add.w	r3, sl, #3
 80081f2:	f000 bd4c 	b.w	8008c8e <_dtoa_r+0xb36>
 80081f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80081fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008202:	2200      	movs	r2, #0
 8008204:	2300      	movs	r3, #0
 8008206:	f7f8 fbcf 	bl	80009a8 <__aeabi_dcmpeq>
 800820a:	4607      	mov	r7, r0
 800820c:	b158      	cbz	r0, 8008226 <_dtoa_r+0xce>
 800820e:	2301      	movs	r3, #1
 8008210:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008212:	6013      	str	r3, [r2, #0]
 8008214:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008216:	b113      	cbz	r3, 800821e <_dtoa_r+0xc6>
 8008218:	4b85      	ldr	r3, [pc, #532]	@ (8008430 <_dtoa_r+0x2d8>)
 800821a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800821c:	6013      	str	r3, [r2, #0]
 800821e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008434 <_dtoa_r+0x2dc>
 8008222:	f000 bd36 	b.w	8008c92 <_dtoa_r+0xb3a>
 8008226:	ab14      	add	r3, sp, #80	@ 0x50
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	ab15      	add	r3, sp, #84	@ 0x54
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	4658      	mov	r0, fp
 8008230:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008234:	f001 ff32 	bl	800a09c <__d2b>
 8008238:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800823c:	4681      	mov	r9, r0
 800823e:	2e00      	cmp	r6, #0
 8008240:	d077      	beq.n	8008332 <_dtoa_r+0x1da>
 8008242:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008248:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800824c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008250:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008254:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008258:	9712      	str	r7, [sp, #72]	@ 0x48
 800825a:	4619      	mov	r1, r3
 800825c:	2200      	movs	r2, #0
 800825e:	4b76      	ldr	r3, [pc, #472]	@ (8008438 <_dtoa_r+0x2e0>)
 8008260:	f7f7 ff82 	bl	8000168 <__aeabi_dsub>
 8008264:	a368      	add	r3, pc, #416	@ (adr r3, 8008408 <_dtoa_r+0x2b0>)
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	f7f8 f935 	bl	80004d8 <__aeabi_dmul>
 800826e:	a368      	add	r3, pc, #416	@ (adr r3, 8008410 <_dtoa_r+0x2b8>)
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f7f7 ff7a 	bl	800016c <__adddf3>
 8008278:	4604      	mov	r4, r0
 800827a:	4630      	mov	r0, r6
 800827c:	460d      	mov	r5, r1
 800827e:	f7f8 f8c1 	bl	8000404 <__aeabi_i2d>
 8008282:	a365      	add	r3, pc, #404	@ (adr r3, 8008418 <_dtoa_r+0x2c0>)
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f7f8 f926 	bl	80004d8 <__aeabi_dmul>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4620      	mov	r0, r4
 8008292:	4629      	mov	r1, r5
 8008294:	f7f7 ff6a 	bl	800016c <__adddf3>
 8008298:	4604      	mov	r4, r0
 800829a:	460d      	mov	r5, r1
 800829c:	f7f8 fbcc 	bl	8000a38 <__aeabi_d2iz>
 80082a0:	2200      	movs	r2, #0
 80082a2:	4607      	mov	r7, r0
 80082a4:	2300      	movs	r3, #0
 80082a6:	4620      	mov	r0, r4
 80082a8:	4629      	mov	r1, r5
 80082aa:	f7f8 fb87 	bl	80009bc <__aeabi_dcmplt>
 80082ae:	b140      	cbz	r0, 80082c2 <_dtoa_r+0x16a>
 80082b0:	4638      	mov	r0, r7
 80082b2:	f7f8 f8a7 	bl	8000404 <__aeabi_i2d>
 80082b6:	4622      	mov	r2, r4
 80082b8:	462b      	mov	r3, r5
 80082ba:	f7f8 fb75 	bl	80009a8 <__aeabi_dcmpeq>
 80082be:	b900      	cbnz	r0, 80082c2 <_dtoa_r+0x16a>
 80082c0:	3f01      	subs	r7, #1
 80082c2:	2f16      	cmp	r7, #22
 80082c4:	d853      	bhi.n	800836e <_dtoa_r+0x216>
 80082c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082ca:	4b5c      	ldr	r3, [pc, #368]	@ (800843c <_dtoa_r+0x2e4>)
 80082cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	f7f8 fb72 	bl	80009bc <__aeabi_dcmplt>
 80082d8:	2800      	cmp	r0, #0
 80082da:	d04a      	beq.n	8008372 <_dtoa_r+0x21a>
 80082dc:	2300      	movs	r3, #0
 80082de:	3f01      	subs	r7, #1
 80082e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80082e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082e4:	1b9b      	subs	r3, r3, r6
 80082e6:	1e5a      	subs	r2, r3, #1
 80082e8:	bf46      	itte	mi
 80082ea:	f1c3 0801 	rsbmi	r8, r3, #1
 80082ee:	2300      	movmi	r3, #0
 80082f0:	f04f 0800 	movpl.w	r8, #0
 80082f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80082f6:	bf48      	it	mi
 80082f8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80082fa:	2f00      	cmp	r7, #0
 80082fc:	db3b      	blt.n	8008376 <_dtoa_r+0x21e>
 80082fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008300:	970e      	str	r7, [sp, #56]	@ 0x38
 8008302:	443b      	add	r3, r7
 8008304:	9309      	str	r3, [sp, #36]	@ 0x24
 8008306:	2300      	movs	r3, #0
 8008308:	930a      	str	r3, [sp, #40]	@ 0x28
 800830a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800830c:	2b09      	cmp	r3, #9
 800830e:	d866      	bhi.n	80083de <_dtoa_r+0x286>
 8008310:	2b05      	cmp	r3, #5
 8008312:	bfc4      	itt	gt
 8008314:	3b04      	subgt	r3, #4
 8008316:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008318:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800831a:	bfc8      	it	gt
 800831c:	2400      	movgt	r4, #0
 800831e:	f1a3 0302 	sub.w	r3, r3, #2
 8008322:	bfd8      	it	le
 8008324:	2401      	movle	r4, #1
 8008326:	2b03      	cmp	r3, #3
 8008328:	d864      	bhi.n	80083f4 <_dtoa_r+0x29c>
 800832a:	e8df f003 	tbb	[pc, r3]
 800832e:	382b      	.short	0x382b
 8008330:	5636      	.short	0x5636
 8008332:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008336:	441e      	add	r6, r3
 8008338:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800833c:	2b20      	cmp	r3, #32
 800833e:	bfc1      	itttt	gt
 8008340:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008344:	fa08 f803 	lslgt.w	r8, r8, r3
 8008348:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800834c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008350:	bfd6      	itet	le
 8008352:	f1c3 0320 	rsble	r3, r3, #32
 8008356:	ea48 0003 	orrgt.w	r0, r8, r3
 800835a:	fa04 f003 	lslle.w	r0, r4, r3
 800835e:	f7f8 f841 	bl	80003e4 <__aeabi_ui2d>
 8008362:	2201      	movs	r2, #1
 8008364:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008368:	3e01      	subs	r6, #1
 800836a:	9212      	str	r2, [sp, #72]	@ 0x48
 800836c:	e775      	b.n	800825a <_dtoa_r+0x102>
 800836e:	2301      	movs	r3, #1
 8008370:	e7b6      	b.n	80082e0 <_dtoa_r+0x188>
 8008372:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008374:	e7b5      	b.n	80082e2 <_dtoa_r+0x18a>
 8008376:	427b      	negs	r3, r7
 8008378:	930a      	str	r3, [sp, #40]	@ 0x28
 800837a:	2300      	movs	r3, #0
 800837c:	eba8 0807 	sub.w	r8, r8, r7
 8008380:	930e      	str	r3, [sp, #56]	@ 0x38
 8008382:	e7c2      	b.n	800830a <_dtoa_r+0x1b2>
 8008384:	2300      	movs	r3, #0
 8008386:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008388:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800838a:	2b00      	cmp	r3, #0
 800838c:	dc35      	bgt.n	80083fa <_dtoa_r+0x2a2>
 800838e:	2301      	movs	r3, #1
 8008390:	461a      	mov	r2, r3
 8008392:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008396:	9221      	str	r2, [sp, #132]	@ 0x84
 8008398:	e00b      	b.n	80083b2 <_dtoa_r+0x25a>
 800839a:	2301      	movs	r3, #1
 800839c:	e7f3      	b.n	8008386 <_dtoa_r+0x22e>
 800839e:	2300      	movs	r3, #0
 80083a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083a4:	18fb      	adds	r3, r7, r3
 80083a6:	9308      	str	r3, [sp, #32]
 80083a8:	3301      	adds	r3, #1
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	9307      	str	r3, [sp, #28]
 80083ae:	bfb8      	it	lt
 80083b0:	2301      	movlt	r3, #1
 80083b2:	2100      	movs	r1, #0
 80083b4:	2204      	movs	r2, #4
 80083b6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80083ba:	f102 0514 	add.w	r5, r2, #20
 80083be:	429d      	cmp	r5, r3
 80083c0:	d91f      	bls.n	8008402 <_dtoa_r+0x2aa>
 80083c2:	6041      	str	r1, [r0, #4]
 80083c4:	4658      	mov	r0, fp
 80083c6:	f001 fa8f 	bl	80098e8 <_Balloc>
 80083ca:	4682      	mov	sl, r0
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d139      	bne.n	8008444 <_dtoa_r+0x2ec>
 80083d0:	4602      	mov	r2, r0
 80083d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80083d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008440 <_dtoa_r+0x2e8>)
 80083d8:	e6d2      	b.n	8008180 <_dtoa_r+0x28>
 80083da:	2301      	movs	r3, #1
 80083dc:	e7e0      	b.n	80083a0 <_dtoa_r+0x248>
 80083de:	2401      	movs	r4, #1
 80083e0:	2300      	movs	r3, #0
 80083e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80083e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80083e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083ea:	2200      	movs	r2, #0
 80083ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80083f0:	2312      	movs	r3, #18
 80083f2:	e7d0      	b.n	8008396 <_dtoa_r+0x23e>
 80083f4:	2301      	movs	r3, #1
 80083f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083f8:	e7f5      	b.n	80083e6 <_dtoa_r+0x28e>
 80083fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008400:	e7d7      	b.n	80083b2 <_dtoa_r+0x25a>
 8008402:	3101      	adds	r1, #1
 8008404:	0052      	lsls	r2, r2, #1
 8008406:	e7d8      	b.n	80083ba <_dtoa_r+0x262>
 8008408:	636f4361 	.word	0x636f4361
 800840c:	3fd287a7 	.word	0x3fd287a7
 8008410:	8b60c8b3 	.word	0x8b60c8b3
 8008414:	3fc68a28 	.word	0x3fc68a28
 8008418:	509f79fb 	.word	0x509f79fb
 800841c:	3fd34413 	.word	0x3fd34413
 8008420:	0800ac6e 	.word	0x0800ac6e
 8008424:	0800ac85 	.word	0x0800ac85
 8008428:	7ff00000 	.word	0x7ff00000
 800842c:	0800ac6a 	.word	0x0800ac6a
 8008430:	0800aadb 	.word	0x0800aadb
 8008434:	0800aada 	.word	0x0800aada
 8008438:	3ff80000 	.word	0x3ff80000
 800843c:	0800adf0 	.word	0x0800adf0
 8008440:	0800acdd 	.word	0x0800acdd
 8008444:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008448:	6018      	str	r0, [r3, #0]
 800844a:	9b07      	ldr	r3, [sp, #28]
 800844c:	2b0e      	cmp	r3, #14
 800844e:	f200 80a4 	bhi.w	800859a <_dtoa_r+0x442>
 8008452:	2c00      	cmp	r4, #0
 8008454:	f000 80a1 	beq.w	800859a <_dtoa_r+0x442>
 8008458:	2f00      	cmp	r7, #0
 800845a:	dd33      	ble.n	80084c4 <_dtoa_r+0x36c>
 800845c:	4b86      	ldr	r3, [pc, #536]	@ (8008678 <_dtoa_r+0x520>)
 800845e:	f007 020f 	and.w	r2, r7, #15
 8008462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008466:	05f8      	lsls	r0, r7, #23
 8008468:	e9d3 3400 	ldrd	r3, r4, [r3]
 800846c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008470:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008474:	d516      	bpl.n	80084a4 <_dtoa_r+0x34c>
 8008476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800847a:	4b80      	ldr	r3, [pc, #512]	@ (800867c <_dtoa_r+0x524>)
 800847c:	2603      	movs	r6, #3
 800847e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008482:	f7f8 f953 	bl	800072c <__aeabi_ddiv>
 8008486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800848a:	f004 040f 	and.w	r4, r4, #15
 800848e:	4d7b      	ldr	r5, [pc, #492]	@ (800867c <_dtoa_r+0x524>)
 8008490:	b954      	cbnz	r4, 80084a8 <_dtoa_r+0x350>
 8008492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800849a:	f7f8 f947 	bl	800072c <__aeabi_ddiv>
 800849e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084a2:	e028      	b.n	80084f6 <_dtoa_r+0x39e>
 80084a4:	2602      	movs	r6, #2
 80084a6:	e7f2      	b.n	800848e <_dtoa_r+0x336>
 80084a8:	07e1      	lsls	r1, r4, #31
 80084aa:	d508      	bpl.n	80084be <_dtoa_r+0x366>
 80084ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084b4:	f7f8 f810 	bl	80004d8 <__aeabi_dmul>
 80084b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084bc:	3601      	adds	r6, #1
 80084be:	1064      	asrs	r4, r4, #1
 80084c0:	3508      	adds	r5, #8
 80084c2:	e7e5      	b.n	8008490 <_dtoa_r+0x338>
 80084c4:	f000 80d2 	beq.w	800866c <_dtoa_r+0x514>
 80084c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084cc:	427c      	negs	r4, r7
 80084ce:	4b6a      	ldr	r3, [pc, #424]	@ (8008678 <_dtoa_r+0x520>)
 80084d0:	f004 020f 	and.w	r2, r4, #15
 80084d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f7f7 fffc 	bl	80004d8 <__aeabi_dmul>
 80084e0:	2602      	movs	r6, #2
 80084e2:	2300      	movs	r3, #0
 80084e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084e8:	4d64      	ldr	r5, [pc, #400]	@ (800867c <_dtoa_r+0x524>)
 80084ea:	1124      	asrs	r4, r4, #4
 80084ec:	2c00      	cmp	r4, #0
 80084ee:	f040 80b2 	bne.w	8008656 <_dtoa_r+0x4fe>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1d3      	bne.n	800849e <_dtoa_r+0x346>
 80084f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 80b7 	beq.w	8008670 <_dtoa_r+0x518>
 8008502:	2200      	movs	r2, #0
 8008504:	4620      	mov	r0, r4
 8008506:	4629      	mov	r1, r5
 8008508:	4b5d      	ldr	r3, [pc, #372]	@ (8008680 <_dtoa_r+0x528>)
 800850a:	f7f8 fa57 	bl	80009bc <__aeabi_dcmplt>
 800850e:	2800      	cmp	r0, #0
 8008510:	f000 80ae 	beq.w	8008670 <_dtoa_r+0x518>
 8008514:	9b07      	ldr	r3, [sp, #28]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 80aa 	beq.w	8008670 <_dtoa_r+0x518>
 800851c:	9b08      	ldr	r3, [sp, #32]
 800851e:	2b00      	cmp	r3, #0
 8008520:	dd37      	ble.n	8008592 <_dtoa_r+0x43a>
 8008522:	1e7b      	subs	r3, r7, #1
 8008524:	4620      	mov	r0, r4
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	2200      	movs	r2, #0
 800852a:	4629      	mov	r1, r5
 800852c:	4b55      	ldr	r3, [pc, #340]	@ (8008684 <_dtoa_r+0x52c>)
 800852e:	f7f7 ffd3 	bl	80004d8 <__aeabi_dmul>
 8008532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008536:	9c08      	ldr	r4, [sp, #32]
 8008538:	3601      	adds	r6, #1
 800853a:	4630      	mov	r0, r6
 800853c:	f7f7 ff62 	bl	8000404 <__aeabi_i2d>
 8008540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008544:	f7f7 ffc8 	bl	80004d8 <__aeabi_dmul>
 8008548:	2200      	movs	r2, #0
 800854a:	4b4f      	ldr	r3, [pc, #316]	@ (8008688 <_dtoa_r+0x530>)
 800854c:	f7f7 fe0e 	bl	800016c <__adddf3>
 8008550:	4605      	mov	r5, r0
 8008552:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008556:	2c00      	cmp	r4, #0
 8008558:	f040 809a 	bne.w	8008690 <_dtoa_r+0x538>
 800855c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008560:	2200      	movs	r2, #0
 8008562:	4b4a      	ldr	r3, [pc, #296]	@ (800868c <_dtoa_r+0x534>)
 8008564:	f7f7 fe00 	bl	8000168 <__aeabi_dsub>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008570:	462a      	mov	r2, r5
 8008572:	4633      	mov	r3, r6
 8008574:	f7f8 fa40 	bl	80009f8 <__aeabi_dcmpgt>
 8008578:	2800      	cmp	r0, #0
 800857a:	f040 828e 	bne.w	8008a9a <_dtoa_r+0x942>
 800857e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008582:	462a      	mov	r2, r5
 8008584:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008588:	f7f8 fa18 	bl	80009bc <__aeabi_dcmplt>
 800858c:	2800      	cmp	r0, #0
 800858e:	f040 8127 	bne.w	80087e0 <_dtoa_r+0x688>
 8008592:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008596:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800859a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800859c:	2b00      	cmp	r3, #0
 800859e:	f2c0 8163 	blt.w	8008868 <_dtoa_r+0x710>
 80085a2:	2f0e      	cmp	r7, #14
 80085a4:	f300 8160 	bgt.w	8008868 <_dtoa_r+0x710>
 80085a8:	4b33      	ldr	r3, [pc, #204]	@ (8008678 <_dtoa_r+0x520>)
 80085aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80085b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	da03      	bge.n	80085c4 <_dtoa_r+0x46c>
 80085bc:	9b07      	ldr	r3, [sp, #28]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f340 8100 	ble.w	80087c4 <_dtoa_r+0x66c>
 80085c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085c8:	4656      	mov	r6, sl
 80085ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ce:	4620      	mov	r0, r4
 80085d0:	4629      	mov	r1, r5
 80085d2:	f7f8 f8ab 	bl	800072c <__aeabi_ddiv>
 80085d6:	f7f8 fa2f 	bl	8000a38 <__aeabi_d2iz>
 80085da:	4680      	mov	r8, r0
 80085dc:	f7f7 ff12 	bl	8000404 <__aeabi_i2d>
 80085e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085e4:	f7f7 ff78 	bl	80004d8 <__aeabi_dmul>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4620      	mov	r0, r4
 80085ee:	4629      	mov	r1, r5
 80085f0:	f7f7 fdba 	bl	8000168 <__aeabi_dsub>
 80085f4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80085f8:	9d07      	ldr	r5, [sp, #28]
 80085fa:	f806 4b01 	strb.w	r4, [r6], #1
 80085fe:	eba6 040a 	sub.w	r4, r6, sl
 8008602:	42a5      	cmp	r5, r4
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	f040 8116 	bne.w	8008838 <_dtoa_r+0x6e0>
 800860c:	f7f7 fdae 	bl	800016c <__adddf3>
 8008610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008614:	4604      	mov	r4, r0
 8008616:	460d      	mov	r5, r1
 8008618:	f7f8 f9ee 	bl	80009f8 <__aeabi_dcmpgt>
 800861c:	2800      	cmp	r0, #0
 800861e:	f040 80f8 	bne.w	8008812 <_dtoa_r+0x6ba>
 8008622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008626:	4620      	mov	r0, r4
 8008628:	4629      	mov	r1, r5
 800862a:	f7f8 f9bd 	bl	80009a8 <__aeabi_dcmpeq>
 800862e:	b118      	cbz	r0, 8008638 <_dtoa_r+0x4e0>
 8008630:	f018 0f01 	tst.w	r8, #1
 8008634:	f040 80ed 	bne.w	8008812 <_dtoa_r+0x6ba>
 8008638:	4649      	mov	r1, r9
 800863a:	4658      	mov	r0, fp
 800863c:	f001 f994 	bl	8009968 <_Bfree>
 8008640:	2300      	movs	r3, #0
 8008642:	7033      	strb	r3, [r6, #0]
 8008644:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008646:	3701      	adds	r7, #1
 8008648:	601f      	str	r7, [r3, #0]
 800864a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 8320 	beq.w	8008c92 <_dtoa_r+0xb3a>
 8008652:	601e      	str	r6, [r3, #0]
 8008654:	e31d      	b.n	8008c92 <_dtoa_r+0xb3a>
 8008656:	07e2      	lsls	r2, r4, #31
 8008658:	d505      	bpl.n	8008666 <_dtoa_r+0x50e>
 800865a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800865e:	f7f7 ff3b 	bl	80004d8 <__aeabi_dmul>
 8008662:	2301      	movs	r3, #1
 8008664:	3601      	adds	r6, #1
 8008666:	1064      	asrs	r4, r4, #1
 8008668:	3508      	adds	r5, #8
 800866a:	e73f      	b.n	80084ec <_dtoa_r+0x394>
 800866c:	2602      	movs	r6, #2
 800866e:	e742      	b.n	80084f6 <_dtoa_r+0x39e>
 8008670:	9c07      	ldr	r4, [sp, #28]
 8008672:	9704      	str	r7, [sp, #16]
 8008674:	e761      	b.n	800853a <_dtoa_r+0x3e2>
 8008676:	bf00      	nop
 8008678:	0800adf0 	.word	0x0800adf0
 800867c:	0800adc8 	.word	0x0800adc8
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	40240000 	.word	0x40240000
 8008688:	401c0000 	.word	0x401c0000
 800868c:	40140000 	.word	0x40140000
 8008690:	4b70      	ldr	r3, [pc, #448]	@ (8008854 <_dtoa_r+0x6fc>)
 8008692:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008694:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008698:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800869c:	4454      	add	r4, sl
 800869e:	2900      	cmp	r1, #0
 80086a0:	d045      	beq.n	800872e <_dtoa_r+0x5d6>
 80086a2:	2000      	movs	r0, #0
 80086a4:	496c      	ldr	r1, [pc, #432]	@ (8008858 <_dtoa_r+0x700>)
 80086a6:	f7f8 f841 	bl	800072c <__aeabi_ddiv>
 80086aa:	4633      	mov	r3, r6
 80086ac:	462a      	mov	r2, r5
 80086ae:	f7f7 fd5b 	bl	8000168 <__aeabi_dsub>
 80086b2:	4656      	mov	r6, sl
 80086b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086bc:	f7f8 f9bc 	bl	8000a38 <__aeabi_d2iz>
 80086c0:	4605      	mov	r5, r0
 80086c2:	f7f7 fe9f 	bl	8000404 <__aeabi_i2d>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ce:	f7f7 fd4b 	bl	8000168 <__aeabi_dsub>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	3530      	adds	r5, #48	@ 0x30
 80086d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086e0:	f806 5b01 	strb.w	r5, [r6], #1
 80086e4:	f7f8 f96a 	bl	80009bc <__aeabi_dcmplt>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d163      	bne.n	80087b4 <_dtoa_r+0x65c>
 80086ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086f0:	2000      	movs	r0, #0
 80086f2:	495a      	ldr	r1, [pc, #360]	@ (800885c <_dtoa_r+0x704>)
 80086f4:	f7f7 fd38 	bl	8000168 <__aeabi_dsub>
 80086f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086fc:	f7f8 f95e 	bl	80009bc <__aeabi_dcmplt>
 8008700:	2800      	cmp	r0, #0
 8008702:	f040 8087 	bne.w	8008814 <_dtoa_r+0x6bc>
 8008706:	42a6      	cmp	r6, r4
 8008708:	f43f af43 	beq.w	8008592 <_dtoa_r+0x43a>
 800870c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008710:	2200      	movs	r2, #0
 8008712:	4b53      	ldr	r3, [pc, #332]	@ (8008860 <_dtoa_r+0x708>)
 8008714:	f7f7 fee0 	bl	80004d8 <__aeabi_dmul>
 8008718:	2200      	movs	r2, #0
 800871a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800871e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008722:	4b4f      	ldr	r3, [pc, #316]	@ (8008860 <_dtoa_r+0x708>)
 8008724:	f7f7 fed8 	bl	80004d8 <__aeabi_dmul>
 8008728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800872c:	e7c4      	b.n	80086b8 <_dtoa_r+0x560>
 800872e:	4631      	mov	r1, r6
 8008730:	4628      	mov	r0, r5
 8008732:	f7f7 fed1 	bl	80004d8 <__aeabi_dmul>
 8008736:	4656      	mov	r6, sl
 8008738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800873c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800873e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008742:	f7f8 f979 	bl	8000a38 <__aeabi_d2iz>
 8008746:	4605      	mov	r5, r0
 8008748:	f7f7 fe5c 	bl	8000404 <__aeabi_i2d>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008754:	f7f7 fd08 	bl	8000168 <__aeabi_dsub>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	3530      	adds	r5, #48	@ 0x30
 800875e:	f806 5b01 	strb.w	r5, [r6], #1
 8008762:	42a6      	cmp	r6, r4
 8008764:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	d124      	bne.n	80087b8 <_dtoa_r+0x660>
 800876e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008772:	4b39      	ldr	r3, [pc, #228]	@ (8008858 <_dtoa_r+0x700>)
 8008774:	f7f7 fcfa 	bl	800016c <__adddf3>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008780:	f7f8 f93a 	bl	80009f8 <__aeabi_dcmpgt>
 8008784:	2800      	cmp	r0, #0
 8008786:	d145      	bne.n	8008814 <_dtoa_r+0x6bc>
 8008788:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800878c:	2000      	movs	r0, #0
 800878e:	4932      	ldr	r1, [pc, #200]	@ (8008858 <_dtoa_r+0x700>)
 8008790:	f7f7 fcea 	bl	8000168 <__aeabi_dsub>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800879c:	f7f8 f90e 	bl	80009bc <__aeabi_dcmplt>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f43f aef6 	beq.w	8008592 <_dtoa_r+0x43a>
 80087a6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80087a8:	1e73      	subs	r3, r6, #1
 80087aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80087b0:	2b30      	cmp	r3, #48	@ 0x30
 80087b2:	d0f8      	beq.n	80087a6 <_dtoa_r+0x64e>
 80087b4:	9f04      	ldr	r7, [sp, #16]
 80087b6:	e73f      	b.n	8008638 <_dtoa_r+0x4e0>
 80087b8:	4b29      	ldr	r3, [pc, #164]	@ (8008860 <_dtoa_r+0x708>)
 80087ba:	f7f7 fe8d 	bl	80004d8 <__aeabi_dmul>
 80087be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087c2:	e7bc      	b.n	800873e <_dtoa_r+0x5e6>
 80087c4:	d10c      	bne.n	80087e0 <_dtoa_r+0x688>
 80087c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087ca:	2200      	movs	r2, #0
 80087cc:	4b25      	ldr	r3, [pc, #148]	@ (8008864 <_dtoa_r+0x70c>)
 80087ce:	f7f7 fe83 	bl	80004d8 <__aeabi_dmul>
 80087d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087d6:	f7f8 f905 	bl	80009e4 <__aeabi_dcmpge>
 80087da:	2800      	cmp	r0, #0
 80087dc:	f000 815b 	beq.w	8008a96 <_dtoa_r+0x93e>
 80087e0:	2400      	movs	r4, #0
 80087e2:	4625      	mov	r5, r4
 80087e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087e6:	4656      	mov	r6, sl
 80087e8:	43db      	mvns	r3, r3
 80087ea:	9304      	str	r3, [sp, #16]
 80087ec:	2700      	movs	r7, #0
 80087ee:	4621      	mov	r1, r4
 80087f0:	4658      	mov	r0, fp
 80087f2:	f001 f8b9 	bl	8009968 <_Bfree>
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	d0dc      	beq.n	80087b4 <_dtoa_r+0x65c>
 80087fa:	b12f      	cbz	r7, 8008808 <_dtoa_r+0x6b0>
 80087fc:	42af      	cmp	r7, r5
 80087fe:	d003      	beq.n	8008808 <_dtoa_r+0x6b0>
 8008800:	4639      	mov	r1, r7
 8008802:	4658      	mov	r0, fp
 8008804:	f001 f8b0 	bl	8009968 <_Bfree>
 8008808:	4629      	mov	r1, r5
 800880a:	4658      	mov	r0, fp
 800880c:	f001 f8ac 	bl	8009968 <_Bfree>
 8008810:	e7d0      	b.n	80087b4 <_dtoa_r+0x65c>
 8008812:	9704      	str	r7, [sp, #16]
 8008814:	4633      	mov	r3, r6
 8008816:	461e      	mov	r6, r3
 8008818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800881c:	2a39      	cmp	r2, #57	@ 0x39
 800881e:	d107      	bne.n	8008830 <_dtoa_r+0x6d8>
 8008820:	459a      	cmp	sl, r3
 8008822:	d1f8      	bne.n	8008816 <_dtoa_r+0x6be>
 8008824:	9a04      	ldr	r2, [sp, #16]
 8008826:	3201      	adds	r2, #1
 8008828:	9204      	str	r2, [sp, #16]
 800882a:	2230      	movs	r2, #48	@ 0x30
 800882c:	f88a 2000 	strb.w	r2, [sl]
 8008830:	781a      	ldrb	r2, [r3, #0]
 8008832:	3201      	adds	r2, #1
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	e7bd      	b.n	80087b4 <_dtoa_r+0x65c>
 8008838:	2200      	movs	r2, #0
 800883a:	4b09      	ldr	r3, [pc, #36]	@ (8008860 <_dtoa_r+0x708>)
 800883c:	f7f7 fe4c 	bl	80004d8 <__aeabi_dmul>
 8008840:	2200      	movs	r2, #0
 8008842:	2300      	movs	r3, #0
 8008844:	4604      	mov	r4, r0
 8008846:	460d      	mov	r5, r1
 8008848:	f7f8 f8ae 	bl	80009a8 <__aeabi_dcmpeq>
 800884c:	2800      	cmp	r0, #0
 800884e:	f43f aebc 	beq.w	80085ca <_dtoa_r+0x472>
 8008852:	e6f1      	b.n	8008638 <_dtoa_r+0x4e0>
 8008854:	0800adf0 	.word	0x0800adf0
 8008858:	3fe00000 	.word	0x3fe00000
 800885c:	3ff00000 	.word	0x3ff00000
 8008860:	40240000 	.word	0x40240000
 8008864:	40140000 	.word	0x40140000
 8008868:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800886a:	2a00      	cmp	r2, #0
 800886c:	f000 80db 	beq.w	8008a26 <_dtoa_r+0x8ce>
 8008870:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008872:	2a01      	cmp	r2, #1
 8008874:	f300 80bf 	bgt.w	80089f6 <_dtoa_r+0x89e>
 8008878:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800887a:	2a00      	cmp	r2, #0
 800887c:	f000 80b7 	beq.w	80089ee <_dtoa_r+0x896>
 8008880:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008884:	4646      	mov	r6, r8
 8008886:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800888a:	2101      	movs	r1, #1
 800888c:	441a      	add	r2, r3
 800888e:	4658      	mov	r0, fp
 8008890:	4498      	add	r8, r3
 8008892:	9209      	str	r2, [sp, #36]	@ 0x24
 8008894:	f001 f966 	bl	8009b64 <__i2b>
 8008898:	4605      	mov	r5, r0
 800889a:	b15e      	cbz	r6, 80088b4 <_dtoa_r+0x75c>
 800889c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800889e:	2b00      	cmp	r3, #0
 80088a0:	dd08      	ble.n	80088b4 <_dtoa_r+0x75c>
 80088a2:	42b3      	cmp	r3, r6
 80088a4:	bfa8      	it	ge
 80088a6:	4633      	movge	r3, r6
 80088a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088aa:	eba8 0803 	sub.w	r8, r8, r3
 80088ae:	1af6      	subs	r6, r6, r3
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80088b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088b6:	b1f3      	cbz	r3, 80088f6 <_dtoa_r+0x79e>
 80088b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 80b7 	beq.w	8008a2e <_dtoa_r+0x8d6>
 80088c0:	b18c      	cbz	r4, 80088e6 <_dtoa_r+0x78e>
 80088c2:	4629      	mov	r1, r5
 80088c4:	4622      	mov	r2, r4
 80088c6:	4658      	mov	r0, fp
 80088c8:	f001 fa0a 	bl	8009ce0 <__pow5mult>
 80088cc:	464a      	mov	r2, r9
 80088ce:	4601      	mov	r1, r0
 80088d0:	4605      	mov	r5, r0
 80088d2:	4658      	mov	r0, fp
 80088d4:	f001 f95c 	bl	8009b90 <__multiply>
 80088d8:	4649      	mov	r1, r9
 80088da:	9004      	str	r0, [sp, #16]
 80088dc:	4658      	mov	r0, fp
 80088de:	f001 f843 	bl	8009968 <_Bfree>
 80088e2:	9b04      	ldr	r3, [sp, #16]
 80088e4:	4699      	mov	r9, r3
 80088e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088e8:	1b1a      	subs	r2, r3, r4
 80088ea:	d004      	beq.n	80088f6 <_dtoa_r+0x79e>
 80088ec:	4649      	mov	r1, r9
 80088ee:	4658      	mov	r0, fp
 80088f0:	f001 f9f6 	bl	8009ce0 <__pow5mult>
 80088f4:	4681      	mov	r9, r0
 80088f6:	2101      	movs	r1, #1
 80088f8:	4658      	mov	r0, fp
 80088fa:	f001 f933 	bl	8009b64 <__i2b>
 80088fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008900:	4604      	mov	r4, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 81c9 	beq.w	8008c9a <_dtoa_r+0xb42>
 8008908:	461a      	mov	r2, r3
 800890a:	4601      	mov	r1, r0
 800890c:	4658      	mov	r0, fp
 800890e:	f001 f9e7 	bl	8009ce0 <__pow5mult>
 8008912:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008914:	4604      	mov	r4, r0
 8008916:	2b01      	cmp	r3, #1
 8008918:	f300 808f 	bgt.w	8008a3a <_dtoa_r+0x8e2>
 800891c:	9b02      	ldr	r3, [sp, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f040 8087 	bne.w	8008a32 <_dtoa_r+0x8da>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800892a:	2b00      	cmp	r3, #0
 800892c:	f040 8083 	bne.w	8008a36 <_dtoa_r+0x8de>
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008936:	0d1b      	lsrs	r3, r3, #20
 8008938:	051b      	lsls	r3, r3, #20
 800893a:	b12b      	cbz	r3, 8008948 <_dtoa_r+0x7f0>
 800893c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800893e:	f108 0801 	add.w	r8, r8, #1
 8008942:	3301      	adds	r3, #1
 8008944:	9309      	str	r3, [sp, #36]	@ 0x24
 8008946:	2301      	movs	r3, #1
 8008948:	930a      	str	r3, [sp, #40]	@ 0x28
 800894a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 81aa 	beq.w	8008ca6 <_dtoa_r+0xb4e>
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008958:	6918      	ldr	r0, [r3, #16]
 800895a:	f001 f8b7 	bl	8009acc <__hi0bits>
 800895e:	f1c0 0020 	rsb	r0, r0, #32
 8008962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008964:	4418      	add	r0, r3
 8008966:	f010 001f 	ands.w	r0, r0, #31
 800896a:	d071      	beq.n	8008a50 <_dtoa_r+0x8f8>
 800896c:	f1c0 0320 	rsb	r3, r0, #32
 8008970:	2b04      	cmp	r3, #4
 8008972:	dd65      	ble.n	8008a40 <_dtoa_r+0x8e8>
 8008974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008976:	f1c0 001c 	rsb	r0, r0, #28
 800897a:	4403      	add	r3, r0
 800897c:	4480      	add	r8, r0
 800897e:	4406      	add	r6, r0
 8008980:	9309      	str	r3, [sp, #36]	@ 0x24
 8008982:	f1b8 0f00 	cmp.w	r8, #0
 8008986:	dd05      	ble.n	8008994 <_dtoa_r+0x83c>
 8008988:	4649      	mov	r1, r9
 800898a:	4642      	mov	r2, r8
 800898c:	4658      	mov	r0, fp
 800898e:	f001 fa01 	bl	8009d94 <__lshift>
 8008992:	4681      	mov	r9, r0
 8008994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008996:	2b00      	cmp	r3, #0
 8008998:	dd05      	ble.n	80089a6 <_dtoa_r+0x84e>
 800899a:	4621      	mov	r1, r4
 800899c:	461a      	mov	r2, r3
 800899e:	4658      	mov	r0, fp
 80089a0:	f001 f9f8 	bl	8009d94 <__lshift>
 80089a4:	4604      	mov	r4, r0
 80089a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d053      	beq.n	8008a54 <_dtoa_r+0x8fc>
 80089ac:	4621      	mov	r1, r4
 80089ae:	4648      	mov	r0, r9
 80089b0:	f001 fa5c 	bl	8009e6c <__mcmp>
 80089b4:	2800      	cmp	r0, #0
 80089b6:	da4d      	bge.n	8008a54 <_dtoa_r+0x8fc>
 80089b8:	1e7b      	subs	r3, r7, #1
 80089ba:	4649      	mov	r1, r9
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	220a      	movs	r2, #10
 80089c0:	2300      	movs	r3, #0
 80089c2:	4658      	mov	r0, fp
 80089c4:	f000 fff2 	bl	80099ac <__multadd>
 80089c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089ca:	4681      	mov	r9, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 816c 	beq.w	8008caa <_dtoa_r+0xb52>
 80089d2:	2300      	movs	r3, #0
 80089d4:	4629      	mov	r1, r5
 80089d6:	220a      	movs	r2, #10
 80089d8:	4658      	mov	r0, fp
 80089da:	f000 ffe7 	bl	80099ac <__multadd>
 80089de:	9b08      	ldr	r3, [sp, #32]
 80089e0:	4605      	mov	r5, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dc61      	bgt.n	8008aaa <_dtoa_r+0x952>
 80089e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	dc3b      	bgt.n	8008a64 <_dtoa_r+0x90c>
 80089ec:	e05d      	b.n	8008aaa <_dtoa_r+0x952>
 80089ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80089f0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80089f4:	e746      	b.n	8008884 <_dtoa_r+0x72c>
 80089f6:	9b07      	ldr	r3, [sp, #28]
 80089f8:	1e5c      	subs	r4, r3, #1
 80089fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	bfbf      	itttt	lt
 8008a00:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008a02:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008a04:	1ae3      	sublt	r3, r4, r3
 8008a06:	18d2      	addlt	r2, r2, r3
 8008a08:	bfa8      	it	ge
 8008a0a:	1b1c      	subge	r4, r3, r4
 8008a0c:	9b07      	ldr	r3, [sp, #28]
 8008a0e:	bfbe      	ittt	lt
 8008a10:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008a12:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008a14:	2400      	movlt	r4, #0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	bfb5      	itete	lt
 8008a1a:	eba8 0603 	sublt.w	r6, r8, r3
 8008a1e:	4646      	movge	r6, r8
 8008a20:	2300      	movlt	r3, #0
 8008a22:	9b07      	ldrge	r3, [sp, #28]
 8008a24:	e730      	b.n	8008888 <_dtoa_r+0x730>
 8008a26:	4646      	mov	r6, r8
 8008a28:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a2a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008a2c:	e735      	b.n	800889a <_dtoa_r+0x742>
 8008a2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a30:	e75c      	b.n	80088ec <_dtoa_r+0x794>
 8008a32:	2300      	movs	r3, #0
 8008a34:	e788      	b.n	8008948 <_dtoa_r+0x7f0>
 8008a36:	9b02      	ldr	r3, [sp, #8]
 8008a38:	e786      	b.n	8008948 <_dtoa_r+0x7f0>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a3e:	e788      	b.n	8008952 <_dtoa_r+0x7fa>
 8008a40:	d09f      	beq.n	8008982 <_dtoa_r+0x82a>
 8008a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a44:	331c      	adds	r3, #28
 8008a46:	441a      	add	r2, r3
 8008a48:	4498      	add	r8, r3
 8008a4a:	441e      	add	r6, r3
 8008a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a4e:	e798      	b.n	8008982 <_dtoa_r+0x82a>
 8008a50:	4603      	mov	r3, r0
 8008a52:	e7f6      	b.n	8008a42 <_dtoa_r+0x8ea>
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	9704      	str	r7, [sp, #16]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dc20      	bgt.n	8008a9e <_dtoa_r+0x946>
 8008a5c:	9308      	str	r3, [sp, #32]
 8008a5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	dd1e      	ble.n	8008aa2 <_dtoa_r+0x94a>
 8008a64:	9b08      	ldr	r3, [sp, #32]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f47f aebc 	bne.w	80087e4 <_dtoa_r+0x68c>
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	2205      	movs	r2, #5
 8008a70:	4658      	mov	r0, fp
 8008a72:	f000 ff9b 	bl	80099ac <__multadd>
 8008a76:	4601      	mov	r1, r0
 8008a78:	4604      	mov	r4, r0
 8008a7a:	4648      	mov	r0, r9
 8008a7c:	f001 f9f6 	bl	8009e6c <__mcmp>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	f77f aeaf 	ble.w	80087e4 <_dtoa_r+0x68c>
 8008a86:	2331      	movs	r3, #49	@ 0x31
 8008a88:	4656      	mov	r6, sl
 8008a8a:	f806 3b01 	strb.w	r3, [r6], #1
 8008a8e:	9b04      	ldr	r3, [sp, #16]
 8008a90:	3301      	adds	r3, #1
 8008a92:	9304      	str	r3, [sp, #16]
 8008a94:	e6aa      	b.n	80087ec <_dtoa_r+0x694>
 8008a96:	9c07      	ldr	r4, [sp, #28]
 8008a98:	9704      	str	r7, [sp, #16]
 8008a9a:	4625      	mov	r5, r4
 8008a9c:	e7f3      	b.n	8008a86 <_dtoa_r+0x92e>
 8008a9e:	9b07      	ldr	r3, [sp, #28]
 8008aa0:	9308      	str	r3, [sp, #32]
 8008aa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 8104 	beq.w	8008cb2 <_dtoa_r+0xb5a>
 8008aaa:	2e00      	cmp	r6, #0
 8008aac:	dd05      	ble.n	8008aba <_dtoa_r+0x962>
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4632      	mov	r2, r6
 8008ab2:	4658      	mov	r0, fp
 8008ab4:	f001 f96e 	bl	8009d94 <__lshift>
 8008ab8:	4605      	mov	r5, r0
 8008aba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d05a      	beq.n	8008b76 <_dtoa_r+0xa1e>
 8008ac0:	4658      	mov	r0, fp
 8008ac2:	6869      	ldr	r1, [r5, #4]
 8008ac4:	f000 ff10 	bl	80098e8 <_Balloc>
 8008ac8:	4606      	mov	r6, r0
 8008aca:	b928      	cbnz	r0, 8008ad8 <_dtoa_r+0x980>
 8008acc:	4602      	mov	r2, r0
 8008ace:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ad2:	4b83      	ldr	r3, [pc, #524]	@ (8008ce0 <_dtoa_r+0xb88>)
 8008ad4:	f7ff bb54 	b.w	8008180 <_dtoa_r+0x28>
 8008ad8:	692a      	ldr	r2, [r5, #16]
 8008ada:	f105 010c 	add.w	r1, r5, #12
 8008ade:	3202      	adds	r2, #2
 8008ae0:	0092      	lsls	r2, r2, #2
 8008ae2:	300c      	adds	r0, #12
 8008ae4:	f7ff fa95 	bl	8008012 <memcpy>
 8008ae8:	2201      	movs	r2, #1
 8008aea:	4631      	mov	r1, r6
 8008aec:	4658      	mov	r0, fp
 8008aee:	f001 f951 	bl	8009d94 <__lshift>
 8008af2:	462f      	mov	r7, r5
 8008af4:	4605      	mov	r5, r0
 8008af6:	f10a 0301 	add.w	r3, sl, #1
 8008afa:	9307      	str	r3, [sp, #28]
 8008afc:	9b08      	ldr	r3, [sp, #32]
 8008afe:	4453      	add	r3, sl
 8008b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b0a:	9b07      	ldr	r3, [sp, #28]
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	4648      	mov	r0, r9
 8008b12:	9302      	str	r3, [sp, #8]
 8008b14:	f7ff fa96 	bl	8008044 <quorem>
 8008b18:	4639      	mov	r1, r7
 8008b1a:	9008      	str	r0, [sp, #32]
 8008b1c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b20:	4648      	mov	r0, r9
 8008b22:	f001 f9a3 	bl	8009e6c <__mcmp>
 8008b26:	462a      	mov	r2, r5
 8008b28:	9009      	str	r0, [sp, #36]	@ 0x24
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4658      	mov	r0, fp
 8008b2e:	f001 f9b9 	bl	8009ea4 <__mdiff>
 8008b32:	68c2      	ldr	r2, [r0, #12]
 8008b34:	4606      	mov	r6, r0
 8008b36:	bb02      	cbnz	r2, 8008b7a <_dtoa_r+0xa22>
 8008b38:	4601      	mov	r1, r0
 8008b3a:	4648      	mov	r0, r9
 8008b3c:	f001 f996 	bl	8009e6c <__mcmp>
 8008b40:	4602      	mov	r2, r0
 8008b42:	4631      	mov	r1, r6
 8008b44:	4658      	mov	r0, fp
 8008b46:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b48:	f000 ff0e 	bl	8009968 <_Bfree>
 8008b4c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b4e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b50:	9e07      	ldr	r6, [sp, #28]
 8008b52:	ea43 0102 	orr.w	r1, r3, r2
 8008b56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b58:	4319      	orrs	r1, r3
 8008b5a:	d110      	bne.n	8008b7e <_dtoa_r+0xa26>
 8008b5c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008b60:	d029      	beq.n	8008bb6 <_dtoa_r+0xa5e>
 8008b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	dd02      	ble.n	8008b6e <_dtoa_r+0xa16>
 8008b68:	9b08      	ldr	r3, [sp, #32]
 8008b6a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008b6e:	9b02      	ldr	r3, [sp, #8]
 8008b70:	f883 8000 	strb.w	r8, [r3]
 8008b74:	e63b      	b.n	80087ee <_dtoa_r+0x696>
 8008b76:	4628      	mov	r0, r5
 8008b78:	e7bb      	b.n	8008af2 <_dtoa_r+0x99a>
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	e7e1      	b.n	8008b42 <_dtoa_r+0x9ea>
 8008b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	db04      	blt.n	8008b8e <_dtoa_r+0xa36>
 8008b84:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008b86:	430b      	orrs	r3, r1
 8008b88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b8a:	430b      	orrs	r3, r1
 8008b8c:	d120      	bne.n	8008bd0 <_dtoa_r+0xa78>
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	dded      	ble.n	8008b6e <_dtoa_r+0xa16>
 8008b92:	4649      	mov	r1, r9
 8008b94:	2201      	movs	r2, #1
 8008b96:	4658      	mov	r0, fp
 8008b98:	f001 f8fc 	bl	8009d94 <__lshift>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4681      	mov	r9, r0
 8008ba0:	f001 f964 	bl	8009e6c <__mcmp>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	dc03      	bgt.n	8008bb0 <_dtoa_r+0xa58>
 8008ba8:	d1e1      	bne.n	8008b6e <_dtoa_r+0xa16>
 8008baa:	f018 0f01 	tst.w	r8, #1
 8008bae:	d0de      	beq.n	8008b6e <_dtoa_r+0xa16>
 8008bb0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008bb4:	d1d8      	bne.n	8008b68 <_dtoa_r+0xa10>
 8008bb6:	2339      	movs	r3, #57	@ 0x39
 8008bb8:	9a02      	ldr	r2, [sp, #8]
 8008bba:	7013      	strb	r3, [r2, #0]
 8008bbc:	4633      	mov	r3, r6
 8008bbe:	461e      	mov	r6, r3
 8008bc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	2a39      	cmp	r2, #57	@ 0x39
 8008bc8:	d052      	beq.n	8008c70 <_dtoa_r+0xb18>
 8008bca:	3201      	adds	r2, #1
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	e60e      	b.n	80087ee <_dtoa_r+0x696>
 8008bd0:	2a00      	cmp	r2, #0
 8008bd2:	dd07      	ble.n	8008be4 <_dtoa_r+0xa8c>
 8008bd4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008bd8:	d0ed      	beq.n	8008bb6 <_dtoa_r+0xa5e>
 8008bda:	9a02      	ldr	r2, [sp, #8]
 8008bdc:	f108 0301 	add.w	r3, r8, #1
 8008be0:	7013      	strb	r3, [r2, #0]
 8008be2:	e604      	b.n	80087ee <_dtoa_r+0x696>
 8008be4:	9b07      	ldr	r3, [sp, #28]
 8008be6:	9a07      	ldr	r2, [sp, #28]
 8008be8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008bec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d028      	beq.n	8008c44 <_dtoa_r+0xaec>
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	220a      	movs	r2, #10
 8008bf8:	4658      	mov	r0, fp
 8008bfa:	f000 fed7 	bl	80099ac <__multadd>
 8008bfe:	42af      	cmp	r7, r5
 8008c00:	4681      	mov	r9, r0
 8008c02:	f04f 0300 	mov.w	r3, #0
 8008c06:	f04f 020a 	mov.w	r2, #10
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	4658      	mov	r0, fp
 8008c0e:	d107      	bne.n	8008c20 <_dtoa_r+0xac8>
 8008c10:	f000 fecc 	bl	80099ac <__multadd>
 8008c14:	4607      	mov	r7, r0
 8008c16:	4605      	mov	r5, r0
 8008c18:	9b07      	ldr	r3, [sp, #28]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	9307      	str	r3, [sp, #28]
 8008c1e:	e774      	b.n	8008b0a <_dtoa_r+0x9b2>
 8008c20:	f000 fec4 	bl	80099ac <__multadd>
 8008c24:	4629      	mov	r1, r5
 8008c26:	4607      	mov	r7, r0
 8008c28:	2300      	movs	r3, #0
 8008c2a:	220a      	movs	r2, #10
 8008c2c:	4658      	mov	r0, fp
 8008c2e:	f000 febd 	bl	80099ac <__multadd>
 8008c32:	4605      	mov	r5, r0
 8008c34:	e7f0      	b.n	8008c18 <_dtoa_r+0xac0>
 8008c36:	9b08      	ldr	r3, [sp, #32]
 8008c38:	2700      	movs	r7, #0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	bfcc      	ite	gt
 8008c3e:	461e      	movgt	r6, r3
 8008c40:	2601      	movle	r6, #1
 8008c42:	4456      	add	r6, sl
 8008c44:	4649      	mov	r1, r9
 8008c46:	2201      	movs	r2, #1
 8008c48:	4658      	mov	r0, fp
 8008c4a:	f001 f8a3 	bl	8009d94 <__lshift>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4681      	mov	r9, r0
 8008c52:	f001 f90b 	bl	8009e6c <__mcmp>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	dcb0      	bgt.n	8008bbc <_dtoa_r+0xa64>
 8008c5a:	d102      	bne.n	8008c62 <_dtoa_r+0xb0a>
 8008c5c:	f018 0f01 	tst.w	r8, #1
 8008c60:	d1ac      	bne.n	8008bbc <_dtoa_r+0xa64>
 8008c62:	4633      	mov	r3, r6
 8008c64:	461e      	mov	r6, r3
 8008c66:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c6a:	2a30      	cmp	r2, #48	@ 0x30
 8008c6c:	d0fa      	beq.n	8008c64 <_dtoa_r+0xb0c>
 8008c6e:	e5be      	b.n	80087ee <_dtoa_r+0x696>
 8008c70:	459a      	cmp	sl, r3
 8008c72:	d1a4      	bne.n	8008bbe <_dtoa_r+0xa66>
 8008c74:	9b04      	ldr	r3, [sp, #16]
 8008c76:	3301      	adds	r3, #1
 8008c78:	9304      	str	r3, [sp, #16]
 8008c7a:	2331      	movs	r3, #49	@ 0x31
 8008c7c:	f88a 3000 	strb.w	r3, [sl]
 8008c80:	e5b5      	b.n	80087ee <_dtoa_r+0x696>
 8008c82:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008c84:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008ce4 <_dtoa_r+0xb8c>
 8008c88:	b11b      	cbz	r3, 8008c92 <_dtoa_r+0xb3a>
 8008c8a:	f10a 0308 	add.w	r3, sl, #8
 8008c8e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	4650      	mov	r0, sl
 8008c94:	b017      	add	sp, #92	@ 0x5c
 8008c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	f77f ae3d 	ble.w	800891c <_dtoa_r+0x7c4>
 8008ca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	e65b      	b.n	8008962 <_dtoa_r+0x80a>
 8008caa:	9b08      	ldr	r3, [sp, #32]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f77f aed6 	ble.w	8008a5e <_dtoa_r+0x906>
 8008cb2:	4656      	mov	r6, sl
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	4648      	mov	r0, r9
 8008cb8:	f7ff f9c4 	bl	8008044 <quorem>
 8008cbc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008cc0:	9b08      	ldr	r3, [sp, #32]
 8008cc2:	f806 8b01 	strb.w	r8, [r6], #1
 8008cc6:	eba6 020a 	sub.w	r2, r6, sl
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	ddb3      	ble.n	8008c36 <_dtoa_r+0xade>
 8008cce:	4649      	mov	r1, r9
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	220a      	movs	r2, #10
 8008cd4:	4658      	mov	r0, fp
 8008cd6:	f000 fe69 	bl	80099ac <__multadd>
 8008cda:	4681      	mov	r9, r0
 8008cdc:	e7ea      	b.n	8008cb4 <_dtoa_r+0xb5c>
 8008cde:	bf00      	nop
 8008ce0:	0800acdd 	.word	0x0800acdd
 8008ce4:	0800ac61 	.word	0x0800ac61

08008ce8 <rshift>:
 8008ce8:	6903      	ldr	r3, [r0, #16]
 8008cea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008cf2:	f100 0414 	add.w	r4, r0, #20
 8008cf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008cfa:	dd46      	ble.n	8008d8a <rshift+0xa2>
 8008cfc:	f011 011f 	ands.w	r1, r1, #31
 8008d00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d08:	d10c      	bne.n	8008d24 <rshift+0x3c>
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	f100 0710 	add.w	r7, r0, #16
 8008d10:	42b1      	cmp	r1, r6
 8008d12:	d335      	bcc.n	8008d80 <rshift+0x98>
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	1eea      	subs	r2, r5, #3
 8008d1a:	4296      	cmp	r6, r2
 8008d1c:	bf38      	it	cc
 8008d1e:	2300      	movcc	r3, #0
 8008d20:	4423      	add	r3, r4
 8008d22:	e015      	b.n	8008d50 <rshift+0x68>
 8008d24:	46a1      	mov	r9, r4
 8008d26:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d2a:	f1c1 0820 	rsb	r8, r1, #32
 8008d2e:	40cf      	lsrs	r7, r1
 8008d30:	f105 0e04 	add.w	lr, r5, #4
 8008d34:	4576      	cmp	r6, lr
 8008d36:	46f4      	mov	ip, lr
 8008d38:	d816      	bhi.n	8008d68 <rshift+0x80>
 8008d3a:	1a9a      	subs	r2, r3, r2
 8008d3c:	0092      	lsls	r2, r2, #2
 8008d3e:	3a04      	subs	r2, #4
 8008d40:	3501      	adds	r5, #1
 8008d42:	42ae      	cmp	r6, r5
 8008d44:	bf38      	it	cc
 8008d46:	2200      	movcc	r2, #0
 8008d48:	18a3      	adds	r3, r4, r2
 8008d4a:	50a7      	str	r7, [r4, r2]
 8008d4c:	b107      	cbz	r7, 8008d50 <rshift+0x68>
 8008d4e:	3304      	adds	r3, #4
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	eba3 0204 	sub.w	r2, r3, r4
 8008d56:	bf08      	it	eq
 8008d58:	2300      	moveq	r3, #0
 8008d5a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d5e:	6102      	str	r2, [r0, #16]
 8008d60:	bf08      	it	eq
 8008d62:	6143      	streq	r3, [r0, #20]
 8008d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d68:	f8dc c000 	ldr.w	ip, [ip]
 8008d6c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d70:	ea4c 0707 	orr.w	r7, ip, r7
 8008d74:	f849 7b04 	str.w	r7, [r9], #4
 8008d78:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d7c:	40cf      	lsrs	r7, r1
 8008d7e:	e7d9      	b.n	8008d34 <rshift+0x4c>
 8008d80:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d84:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d88:	e7c2      	b.n	8008d10 <rshift+0x28>
 8008d8a:	4623      	mov	r3, r4
 8008d8c:	e7e0      	b.n	8008d50 <rshift+0x68>

08008d8e <__hexdig_fun>:
 8008d8e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008d92:	2b09      	cmp	r3, #9
 8008d94:	d802      	bhi.n	8008d9c <__hexdig_fun+0xe>
 8008d96:	3820      	subs	r0, #32
 8008d98:	b2c0      	uxtb	r0, r0
 8008d9a:	4770      	bx	lr
 8008d9c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008da0:	2b05      	cmp	r3, #5
 8008da2:	d801      	bhi.n	8008da8 <__hexdig_fun+0x1a>
 8008da4:	3847      	subs	r0, #71	@ 0x47
 8008da6:	e7f7      	b.n	8008d98 <__hexdig_fun+0xa>
 8008da8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008dac:	2b05      	cmp	r3, #5
 8008dae:	d801      	bhi.n	8008db4 <__hexdig_fun+0x26>
 8008db0:	3827      	subs	r0, #39	@ 0x27
 8008db2:	e7f1      	b.n	8008d98 <__hexdig_fun+0xa>
 8008db4:	2000      	movs	r0, #0
 8008db6:	4770      	bx	lr

08008db8 <__gethex>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	468a      	mov	sl, r1
 8008dbe:	4690      	mov	r8, r2
 8008dc0:	b085      	sub	sp, #20
 8008dc2:	9302      	str	r3, [sp, #8]
 8008dc4:	680b      	ldr	r3, [r1, #0]
 8008dc6:	9001      	str	r0, [sp, #4]
 8008dc8:	1c9c      	adds	r4, r3, #2
 8008dca:	46a1      	mov	r9, r4
 8008dcc:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008dd0:	2830      	cmp	r0, #48	@ 0x30
 8008dd2:	d0fa      	beq.n	8008dca <__gethex+0x12>
 8008dd4:	eba9 0303 	sub.w	r3, r9, r3
 8008dd8:	f1a3 0b02 	sub.w	fp, r3, #2
 8008ddc:	f7ff ffd7 	bl	8008d8e <__hexdig_fun>
 8008de0:	4605      	mov	r5, r0
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d168      	bne.n	8008eb8 <__gethex+0x100>
 8008de6:	2201      	movs	r2, #1
 8008de8:	4648      	mov	r0, r9
 8008dea:	499f      	ldr	r1, [pc, #636]	@ (8009068 <__gethex+0x2b0>)
 8008dec:	f7ff f8b8 	bl	8007f60 <strncmp>
 8008df0:	4607      	mov	r7, r0
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d167      	bne.n	8008ec6 <__gethex+0x10e>
 8008df6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008dfa:	4626      	mov	r6, r4
 8008dfc:	f7ff ffc7 	bl	8008d8e <__hexdig_fun>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d062      	beq.n	8008eca <__gethex+0x112>
 8008e04:	4623      	mov	r3, r4
 8008e06:	7818      	ldrb	r0, [r3, #0]
 8008e08:	4699      	mov	r9, r3
 8008e0a:	2830      	cmp	r0, #48	@ 0x30
 8008e0c:	f103 0301 	add.w	r3, r3, #1
 8008e10:	d0f9      	beq.n	8008e06 <__gethex+0x4e>
 8008e12:	f7ff ffbc 	bl	8008d8e <__hexdig_fun>
 8008e16:	fab0 f580 	clz	r5, r0
 8008e1a:	f04f 0b01 	mov.w	fp, #1
 8008e1e:	096d      	lsrs	r5, r5, #5
 8008e20:	464a      	mov	r2, r9
 8008e22:	4616      	mov	r6, r2
 8008e24:	7830      	ldrb	r0, [r6, #0]
 8008e26:	3201      	adds	r2, #1
 8008e28:	f7ff ffb1 	bl	8008d8e <__hexdig_fun>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d1f8      	bne.n	8008e22 <__gethex+0x6a>
 8008e30:	2201      	movs	r2, #1
 8008e32:	4630      	mov	r0, r6
 8008e34:	498c      	ldr	r1, [pc, #560]	@ (8009068 <__gethex+0x2b0>)
 8008e36:	f7ff f893 	bl	8007f60 <strncmp>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	d13f      	bne.n	8008ebe <__gethex+0x106>
 8008e3e:	b944      	cbnz	r4, 8008e52 <__gethex+0x9a>
 8008e40:	1c74      	adds	r4, r6, #1
 8008e42:	4622      	mov	r2, r4
 8008e44:	4616      	mov	r6, r2
 8008e46:	7830      	ldrb	r0, [r6, #0]
 8008e48:	3201      	adds	r2, #1
 8008e4a:	f7ff ffa0 	bl	8008d8e <__hexdig_fun>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d1f8      	bne.n	8008e44 <__gethex+0x8c>
 8008e52:	1ba4      	subs	r4, r4, r6
 8008e54:	00a7      	lsls	r7, r4, #2
 8008e56:	7833      	ldrb	r3, [r6, #0]
 8008e58:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008e5c:	2b50      	cmp	r3, #80	@ 0x50
 8008e5e:	d13e      	bne.n	8008ede <__gethex+0x126>
 8008e60:	7873      	ldrb	r3, [r6, #1]
 8008e62:	2b2b      	cmp	r3, #43	@ 0x2b
 8008e64:	d033      	beq.n	8008ece <__gethex+0x116>
 8008e66:	2b2d      	cmp	r3, #45	@ 0x2d
 8008e68:	d034      	beq.n	8008ed4 <__gethex+0x11c>
 8008e6a:	2400      	movs	r4, #0
 8008e6c:	1c71      	adds	r1, r6, #1
 8008e6e:	7808      	ldrb	r0, [r1, #0]
 8008e70:	f7ff ff8d 	bl	8008d8e <__hexdig_fun>
 8008e74:	1e43      	subs	r3, r0, #1
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	2b18      	cmp	r3, #24
 8008e7a:	d830      	bhi.n	8008ede <__gethex+0x126>
 8008e7c:	f1a0 0210 	sub.w	r2, r0, #16
 8008e80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e84:	f7ff ff83 	bl	8008d8e <__hexdig_fun>
 8008e88:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008e8c:	fa5f fc8c 	uxtb.w	ip, ip
 8008e90:	f1bc 0f18 	cmp.w	ip, #24
 8008e94:	f04f 030a 	mov.w	r3, #10
 8008e98:	d91e      	bls.n	8008ed8 <__gethex+0x120>
 8008e9a:	b104      	cbz	r4, 8008e9e <__gethex+0xe6>
 8008e9c:	4252      	negs	r2, r2
 8008e9e:	4417      	add	r7, r2
 8008ea0:	f8ca 1000 	str.w	r1, [sl]
 8008ea4:	b1ed      	cbz	r5, 8008ee2 <__gethex+0x12a>
 8008ea6:	f1bb 0f00 	cmp.w	fp, #0
 8008eaa:	bf0c      	ite	eq
 8008eac:	2506      	moveq	r5, #6
 8008eae:	2500      	movne	r5, #0
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	b005      	add	sp, #20
 8008eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb8:	2500      	movs	r5, #0
 8008eba:	462c      	mov	r4, r5
 8008ebc:	e7b0      	b.n	8008e20 <__gethex+0x68>
 8008ebe:	2c00      	cmp	r4, #0
 8008ec0:	d1c7      	bne.n	8008e52 <__gethex+0x9a>
 8008ec2:	4627      	mov	r7, r4
 8008ec4:	e7c7      	b.n	8008e56 <__gethex+0x9e>
 8008ec6:	464e      	mov	r6, r9
 8008ec8:	462f      	mov	r7, r5
 8008eca:	2501      	movs	r5, #1
 8008ecc:	e7c3      	b.n	8008e56 <__gethex+0x9e>
 8008ece:	2400      	movs	r4, #0
 8008ed0:	1cb1      	adds	r1, r6, #2
 8008ed2:	e7cc      	b.n	8008e6e <__gethex+0xb6>
 8008ed4:	2401      	movs	r4, #1
 8008ed6:	e7fb      	b.n	8008ed0 <__gethex+0x118>
 8008ed8:	fb03 0002 	mla	r0, r3, r2, r0
 8008edc:	e7ce      	b.n	8008e7c <__gethex+0xc4>
 8008ede:	4631      	mov	r1, r6
 8008ee0:	e7de      	b.n	8008ea0 <__gethex+0xe8>
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	eba6 0309 	sub.w	r3, r6, r9
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	2b07      	cmp	r3, #7
 8008eec:	dc0a      	bgt.n	8008f04 <__gethex+0x14c>
 8008eee:	9801      	ldr	r0, [sp, #4]
 8008ef0:	f000 fcfa 	bl	80098e8 <_Balloc>
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	b940      	cbnz	r0, 8008f0a <__gethex+0x152>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	21e4      	movs	r1, #228	@ 0xe4
 8008efc:	4b5b      	ldr	r3, [pc, #364]	@ (800906c <__gethex+0x2b4>)
 8008efe:	485c      	ldr	r0, [pc, #368]	@ (8009070 <__gethex+0x2b8>)
 8008f00:	f001 fa86 	bl	800a410 <__assert_func>
 8008f04:	3101      	adds	r1, #1
 8008f06:	105b      	asrs	r3, r3, #1
 8008f08:	e7ef      	b.n	8008eea <__gethex+0x132>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f100 0a14 	add.w	sl, r0, #20
 8008f10:	4655      	mov	r5, sl
 8008f12:	469b      	mov	fp, r3
 8008f14:	45b1      	cmp	r9, r6
 8008f16:	d337      	bcc.n	8008f88 <__gethex+0x1d0>
 8008f18:	f845 bb04 	str.w	fp, [r5], #4
 8008f1c:	eba5 050a 	sub.w	r5, r5, sl
 8008f20:	10ad      	asrs	r5, r5, #2
 8008f22:	6125      	str	r5, [r4, #16]
 8008f24:	4658      	mov	r0, fp
 8008f26:	f000 fdd1 	bl	8009acc <__hi0bits>
 8008f2a:	016d      	lsls	r5, r5, #5
 8008f2c:	f8d8 6000 	ldr.w	r6, [r8]
 8008f30:	1a2d      	subs	r5, r5, r0
 8008f32:	42b5      	cmp	r5, r6
 8008f34:	dd54      	ble.n	8008fe0 <__gethex+0x228>
 8008f36:	1bad      	subs	r5, r5, r6
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f001 f959 	bl	800a1f2 <__any_on>
 8008f40:	4681      	mov	r9, r0
 8008f42:	b178      	cbz	r0, 8008f64 <__gethex+0x1ac>
 8008f44:	f04f 0901 	mov.w	r9, #1
 8008f48:	1e6b      	subs	r3, r5, #1
 8008f4a:	1159      	asrs	r1, r3, #5
 8008f4c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008f50:	f003 021f 	and.w	r2, r3, #31
 8008f54:	fa09 f202 	lsl.w	r2, r9, r2
 8008f58:	420a      	tst	r2, r1
 8008f5a:	d003      	beq.n	8008f64 <__gethex+0x1ac>
 8008f5c:	454b      	cmp	r3, r9
 8008f5e:	dc36      	bgt.n	8008fce <__gethex+0x216>
 8008f60:	f04f 0902 	mov.w	r9, #2
 8008f64:	4629      	mov	r1, r5
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7ff febe 	bl	8008ce8 <rshift>
 8008f6c:	442f      	add	r7, r5
 8008f6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f72:	42bb      	cmp	r3, r7
 8008f74:	da42      	bge.n	8008ffc <__gethex+0x244>
 8008f76:	4621      	mov	r1, r4
 8008f78:	9801      	ldr	r0, [sp, #4]
 8008f7a:	f000 fcf5 	bl	8009968 <_Bfree>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f82:	25a3      	movs	r5, #163	@ 0xa3
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	e793      	b.n	8008eb0 <__gethex+0xf8>
 8008f88:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008f8c:	2a2e      	cmp	r2, #46	@ 0x2e
 8008f8e:	d012      	beq.n	8008fb6 <__gethex+0x1fe>
 8008f90:	2b20      	cmp	r3, #32
 8008f92:	d104      	bne.n	8008f9e <__gethex+0x1e6>
 8008f94:	f845 bb04 	str.w	fp, [r5], #4
 8008f98:	f04f 0b00 	mov.w	fp, #0
 8008f9c:	465b      	mov	r3, fp
 8008f9e:	7830      	ldrb	r0, [r6, #0]
 8008fa0:	9303      	str	r3, [sp, #12]
 8008fa2:	f7ff fef4 	bl	8008d8e <__hexdig_fun>
 8008fa6:	9b03      	ldr	r3, [sp, #12]
 8008fa8:	f000 000f 	and.w	r0, r0, #15
 8008fac:	4098      	lsls	r0, r3
 8008fae:	ea4b 0b00 	orr.w	fp, fp, r0
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	e7ae      	b.n	8008f14 <__gethex+0x15c>
 8008fb6:	45b1      	cmp	r9, r6
 8008fb8:	d8ea      	bhi.n	8008f90 <__gethex+0x1d8>
 8008fba:	2201      	movs	r2, #1
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	492a      	ldr	r1, [pc, #168]	@ (8009068 <__gethex+0x2b0>)
 8008fc0:	9303      	str	r3, [sp, #12]
 8008fc2:	f7fe ffcd 	bl	8007f60 <strncmp>
 8008fc6:	9b03      	ldr	r3, [sp, #12]
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d1e1      	bne.n	8008f90 <__gethex+0x1d8>
 8008fcc:	e7a2      	b.n	8008f14 <__gethex+0x15c>
 8008fce:	4620      	mov	r0, r4
 8008fd0:	1ea9      	subs	r1, r5, #2
 8008fd2:	f001 f90e 	bl	800a1f2 <__any_on>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d0c2      	beq.n	8008f60 <__gethex+0x1a8>
 8008fda:	f04f 0903 	mov.w	r9, #3
 8008fde:	e7c1      	b.n	8008f64 <__gethex+0x1ac>
 8008fe0:	da09      	bge.n	8008ff6 <__gethex+0x23e>
 8008fe2:	1b75      	subs	r5, r6, r5
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	462a      	mov	r2, r5
 8008fe8:	9801      	ldr	r0, [sp, #4]
 8008fea:	f000 fed3 	bl	8009d94 <__lshift>
 8008fee:	4604      	mov	r4, r0
 8008ff0:	1b7f      	subs	r7, r7, r5
 8008ff2:	f100 0a14 	add.w	sl, r0, #20
 8008ff6:	f04f 0900 	mov.w	r9, #0
 8008ffa:	e7b8      	b.n	8008f6e <__gethex+0x1b6>
 8008ffc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009000:	42bd      	cmp	r5, r7
 8009002:	dd6f      	ble.n	80090e4 <__gethex+0x32c>
 8009004:	1bed      	subs	r5, r5, r7
 8009006:	42ae      	cmp	r6, r5
 8009008:	dc34      	bgt.n	8009074 <__gethex+0x2bc>
 800900a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800900e:	2b02      	cmp	r3, #2
 8009010:	d022      	beq.n	8009058 <__gethex+0x2a0>
 8009012:	2b03      	cmp	r3, #3
 8009014:	d024      	beq.n	8009060 <__gethex+0x2a8>
 8009016:	2b01      	cmp	r3, #1
 8009018:	d115      	bne.n	8009046 <__gethex+0x28e>
 800901a:	42ae      	cmp	r6, r5
 800901c:	d113      	bne.n	8009046 <__gethex+0x28e>
 800901e:	2e01      	cmp	r6, #1
 8009020:	d10b      	bne.n	800903a <__gethex+0x282>
 8009022:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009026:	9a02      	ldr	r2, [sp, #8]
 8009028:	2562      	movs	r5, #98	@ 0x62
 800902a:	6013      	str	r3, [r2, #0]
 800902c:	2301      	movs	r3, #1
 800902e:	6123      	str	r3, [r4, #16]
 8009030:	f8ca 3000 	str.w	r3, [sl]
 8009034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009036:	601c      	str	r4, [r3, #0]
 8009038:	e73a      	b.n	8008eb0 <__gethex+0xf8>
 800903a:	4620      	mov	r0, r4
 800903c:	1e71      	subs	r1, r6, #1
 800903e:	f001 f8d8 	bl	800a1f2 <__any_on>
 8009042:	2800      	cmp	r0, #0
 8009044:	d1ed      	bne.n	8009022 <__gethex+0x26a>
 8009046:	4621      	mov	r1, r4
 8009048:	9801      	ldr	r0, [sp, #4]
 800904a:	f000 fc8d 	bl	8009968 <_Bfree>
 800904e:	2300      	movs	r3, #0
 8009050:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009052:	2550      	movs	r5, #80	@ 0x50
 8009054:	6013      	str	r3, [r2, #0]
 8009056:	e72b      	b.n	8008eb0 <__gethex+0xf8>
 8009058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f3      	bne.n	8009046 <__gethex+0x28e>
 800905e:	e7e0      	b.n	8009022 <__gethex+0x26a>
 8009060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1dd      	bne.n	8009022 <__gethex+0x26a>
 8009066:	e7ee      	b.n	8009046 <__gethex+0x28e>
 8009068:	0800ab03 	.word	0x0800ab03
 800906c:	0800acdd 	.word	0x0800acdd
 8009070:	0800acee 	.word	0x0800acee
 8009074:	1e6f      	subs	r7, r5, #1
 8009076:	f1b9 0f00 	cmp.w	r9, #0
 800907a:	d130      	bne.n	80090de <__gethex+0x326>
 800907c:	b127      	cbz	r7, 8009088 <__gethex+0x2d0>
 800907e:	4639      	mov	r1, r7
 8009080:	4620      	mov	r0, r4
 8009082:	f001 f8b6 	bl	800a1f2 <__any_on>
 8009086:	4681      	mov	r9, r0
 8009088:	2301      	movs	r3, #1
 800908a:	4629      	mov	r1, r5
 800908c:	1b76      	subs	r6, r6, r5
 800908e:	2502      	movs	r5, #2
 8009090:	117a      	asrs	r2, r7, #5
 8009092:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009096:	f007 071f 	and.w	r7, r7, #31
 800909a:	40bb      	lsls	r3, r7
 800909c:	4213      	tst	r3, r2
 800909e:	4620      	mov	r0, r4
 80090a0:	bf18      	it	ne
 80090a2:	f049 0902 	orrne.w	r9, r9, #2
 80090a6:	f7ff fe1f 	bl	8008ce8 <rshift>
 80090aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80090ae:	f1b9 0f00 	cmp.w	r9, #0
 80090b2:	d047      	beq.n	8009144 <__gethex+0x38c>
 80090b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d015      	beq.n	80090e8 <__gethex+0x330>
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d017      	beq.n	80090f0 <__gethex+0x338>
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d109      	bne.n	80090d8 <__gethex+0x320>
 80090c4:	f019 0f02 	tst.w	r9, #2
 80090c8:	d006      	beq.n	80090d8 <__gethex+0x320>
 80090ca:	f8da 3000 	ldr.w	r3, [sl]
 80090ce:	ea49 0903 	orr.w	r9, r9, r3
 80090d2:	f019 0f01 	tst.w	r9, #1
 80090d6:	d10e      	bne.n	80090f6 <__gethex+0x33e>
 80090d8:	f045 0510 	orr.w	r5, r5, #16
 80090dc:	e032      	b.n	8009144 <__gethex+0x38c>
 80090de:	f04f 0901 	mov.w	r9, #1
 80090e2:	e7d1      	b.n	8009088 <__gethex+0x2d0>
 80090e4:	2501      	movs	r5, #1
 80090e6:	e7e2      	b.n	80090ae <__gethex+0x2f6>
 80090e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090ea:	f1c3 0301 	rsb	r3, r3, #1
 80090ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0f0      	beq.n	80090d8 <__gethex+0x320>
 80090f6:	f04f 0c00 	mov.w	ip, #0
 80090fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80090fe:	f104 0314 	add.w	r3, r4, #20
 8009102:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009106:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800910a:	4618      	mov	r0, r3
 800910c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009110:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009114:	d01b      	beq.n	800914e <__gethex+0x396>
 8009116:	3201      	adds	r2, #1
 8009118:	6002      	str	r2, [r0, #0]
 800911a:	2d02      	cmp	r5, #2
 800911c:	f104 0314 	add.w	r3, r4, #20
 8009120:	d13c      	bne.n	800919c <__gethex+0x3e4>
 8009122:	f8d8 2000 	ldr.w	r2, [r8]
 8009126:	3a01      	subs	r2, #1
 8009128:	42b2      	cmp	r2, r6
 800912a:	d109      	bne.n	8009140 <__gethex+0x388>
 800912c:	2201      	movs	r2, #1
 800912e:	1171      	asrs	r1, r6, #5
 8009130:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009134:	f006 061f 	and.w	r6, r6, #31
 8009138:	fa02 f606 	lsl.w	r6, r2, r6
 800913c:	421e      	tst	r6, r3
 800913e:	d13a      	bne.n	80091b6 <__gethex+0x3fe>
 8009140:	f045 0520 	orr.w	r5, r5, #32
 8009144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009146:	601c      	str	r4, [r3, #0]
 8009148:	9b02      	ldr	r3, [sp, #8]
 800914a:	601f      	str	r7, [r3, #0]
 800914c:	e6b0      	b.n	8008eb0 <__gethex+0xf8>
 800914e:	4299      	cmp	r1, r3
 8009150:	f843 cc04 	str.w	ip, [r3, #-4]
 8009154:	d8d9      	bhi.n	800910a <__gethex+0x352>
 8009156:	68a3      	ldr	r3, [r4, #8]
 8009158:	459b      	cmp	fp, r3
 800915a:	db17      	blt.n	800918c <__gethex+0x3d4>
 800915c:	6861      	ldr	r1, [r4, #4]
 800915e:	9801      	ldr	r0, [sp, #4]
 8009160:	3101      	adds	r1, #1
 8009162:	f000 fbc1 	bl	80098e8 <_Balloc>
 8009166:	4681      	mov	r9, r0
 8009168:	b918      	cbnz	r0, 8009172 <__gethex+0x3ba>
 800916a:	4602      	mov	r2, r0
 800916c:	2184      	movs	r1, #132	@ 0x84
 800916e:	4b19      	ldr	r3, [pc, #100]	@ (80091d4 <__gethex+0x41c>)
 8009170:	e6c5      	b.n	8008efe <__gethex+0x146>
 8009172:	6922      	ldr	r2, [r4, #16]
 8009174:	f104 010c 	add.w	r1, r4, #12
 8009178:	3202      	adds	r2, #2
 800917a:	0092      	lsls	r2, r2, #2
 800917c:	300c      	adds	r0, #12
 800917e:	f7fe ff48 	bl	8008012 <memcpy>
 8009182:	4621      	mov	r1, r4
 8009184:	9801      	ldr	r0, [sp, #4]
 8009186:	f000 fbef 	bl	8009968 <_Bfree>
 800918a:	464c      	mov	r4, r9
 800918c:	6923      	ldr	r3, [r4, #16]
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	6122      	str	r2, [r4, #16]
 8009192:	2201      	movs	r2, #1
 8009194:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009198:	615a      	str	r2, [r3, #20]
 800919a:	e7be      	b.n	800911a <__gethex+0x362>
 800919c:	6922      	ldr	r2, [r4, #16]
 800919e:	455a      	cmp	r2, fp
 80091a0:	dd0b      	ble.n	80091ba <__gethex+0x402>
 80091a2:	2101      	movs	r1, #1
 80091a4:	4620      	mov	r0, r4
 80091a6:	f7ff fd9f 	bl	8008ce8 <rshift>
 80091aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091ae:	3701      	adds	r7, #1
 80091b0:	42bb      	cmp	r3, r7
 80091b2:	f6ff aee0 	blt.w	8008f76 <__gethex+0x1be>
 80091b6:	2501      	movs	r5, #1
 80091b8:	e7c2      	b.n	8009140 <__gethex+0x388>
 80091ba:	f016 061f 	ands.w	r6, r6, #31
 80091be:	d0fa      	beq.n	80091b6 <__gethex+0x3fe>
 80091c0:	4453      	add	r3, sl
 80091c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80091c6:	f000 fc81 	bl	8009acc <__hi0bits>
 80091ca:	f1c6 0620 	rsb	r6, r6, #32
 80091ce:	42b0      	cmp	r0, r6
 80091d0:	dbe7      	blt.n	80091a2 <__gethex+0x3ea>
 80091d2:	e7f0      	b.n	80091b6 <__gethex+0x3fe>
 80091d4:	0800acdd 	.word	0x0800acdd

080091d8 <L_shift>:
 80091d8:	f1c2 0208 	rsb	r2, r2, #8
 80091dc:	0092      	lsls	r2, r2, #2
 80091de:	b570      	push	{r4, r5, r6, lr}
 80091e0:	f1c2 0620 	rsb	r6, r2, #32
 80091e4:	6843      	ldr	r3, [r0, #4]
 80091e6:	6804      	ldr	r4, [r0, #0]
 80091e8:	fa03 f506 	lsl.w	r5, r3, r6
 80091ec:	432c      	orrs	r4, r5
 80091ee:	40d3      	lsrs	r3, r2
 80091f0:	6004      	str	r4, [r0, #0]
 80091f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80091f6:	4288      	cmp	r0, r1
 80091f8:	d3f4      	bcc.n	80091e4 <L_shift+0xc>
 80091fa:	bd70      	pop	{r4, r5, r6, pc}

080091fc <__match>:
 80091fc:	b530      	push	{r4, r5, lr}
 80091fe:	6803      	ldr	r3, [r0, #0]
 8009200:	3301      	adds	r3, #1
 8009202:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009206:	b914      	cbnz	r4, 800920e <__match+0x12>
 8009208:	6003      	str	r3, [r0, #0]
 800920a:	2001      	movs	r0, #1
 800920c:	bd30      	pop	{r4, r5, pc}
 800920e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009212:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009216:	2d19      	cmp	r5, #25
 8009218:	bf98      	it	ls
 800921a:	3220      	addls	r2, #32
 800921c:	42a2      	cmp	r2, r4
 800921e:	d0f0      	beq.n	8009202 <__match+0x6>
 8009220:	2000      	movs	r0, #0
 8009222:	e7f3      	b.n	800920c <__match+0x10>

08009224 <__hexnan>:
 8009224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009228:	2500      	movs	r5, #0
 800922a:	680b      	ldr	r3, [r1, #0]
 800922c:	4682      	mov	sl, r0
 800922e:	115e      	asrs	r6, r3, #5
 8009230:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009234:	f013 031f 	ands.w	r3, r3, #31
 8009238:	bf18      	it	ne
 800923a:	3604      	addne	r6, #4
 800923c:	1f37      	subs	r7, r6, #4
 800923e:	4690      	mov	r8, r2
 8009240:	46b9      	mov	r9, r7
 8009242:	463c      	mov	r4, r7
 8009244:	46ab      	mov	fp, r5
 8009246:	b087      	sub	sp, #28
 8009248:	6801      	ldr	r1, [r0, #0]
 800924a:	9301      	str	r3, [sp, #4]
 800924c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009250:	9502      	str	r5, [sp, #8]
 8009252:	784a      	ldrb	r2, [r1, #1]
 8009254:	1c4b      	adds	r3, r1, #1
 8009256:	9303      	str	r3, [sp, #12]
 8009258:	b342      	cbz	r2, 80092ac <__hexnan+0x88>
 800925a:	4610      	mov	r0, r2
 800925c:	9105      	str	r1, [sp, #20]
 800925e:	9204      	str	r2, [sp, #16]
 8009260:	f7ff fd95 	bl	8008d8e <__hexdig_fun>
 8009264:	2800      	cmp	r0, #0
 8009266:	d151      	bne.n	800930c <__hexnan+0xe8>
 8009268:	9a04      	ldr	r2, [sp, #16]
 800926a:	9905      	ldr	r1, [sp, #20]
 800926c:	2a20      	cmp	r2, #32
 800926e:	d818      	bhi.n	80092a2 <__hexnan+0x7e>
 8009270:	9b02      	ldr	r3, [sp, #8]
 8009272:	459b      	cmp	fp, r3
 8009274:	dd13      	ble.n	800929e <__hexnan+0x7a>
 8009276:	454c      	cmp	r4, r9
 8009278:	d206      	bcs.n	8009288 <__hexnan+0x64>
 800927a:	2d07      	cmp	r5, #7
 800927c:	dc04      	bgt.n	8009288 <__hexnan+0x64>
 800927e:	462a      	mov	r2, r5
 8009280:	4649      	mov	r1, r9
 8009282:	4620      	mov	r0, r4
 8009284:	f7ff ffa8 	bl	80091d8 <L_shift>
 8009288:	4544      	cmp	r4, r8
 800928a:	d952      	bls.n	8009332 <__hexnan+0x10e>
 800928c:	2300      	movs	r3, #0
 800928e:	f1a4 0904 	sub.w	r9, r4, #4
 8009292:	f844 3c04 	str.w	r3, [r4, #-4]
 8009296:	461d      	mov	r5, r3
 8009298:	464c      	mov	r4, r9
 800929a:	f8cd b008 	str.w	fp, [sp, #8]
 800929e:	9903      	ldr	r1, [sp, #12]
 80092a0:	e7d7      	b.n	8009252 <__hexnan+0x2e>
 80092a2:	2a29      	cmp	r2, #41	@ 0x29
 80092a4:	d157      	bne.n	8009356 <__hexnan+0x132>
 80092a6:	3102      	adds	r1, #2
 80092a8:	f8ca 1000 	str.w	r1, [sl]
 80092ac:	f1bb 0f00 	cmp.w	fp, #0
 80092b0:	d051      	beq.n	8009356 <__hexnan+0x132>
 80092b2:	454c      	cmp	r4, r9
 80092b4:	d206      	bcs.n	80092c4 <__hexnan+0xa0>
 80092b6:	2d07      	cmp	r5, #7
 80092b8:	dc04      	bgt.n	80092c4 <__hexnan+0xa0>
 80092ba:	462a      	mov	r2, r5
 80092bc:	4649      	mov	r1, r9
 80092be:	4620      	mov	r0, r4
 80092c0:	f7ff ff8a 	bl	80091d8 <L_shift>
 80092c4:	4544      	cmp	r4, r8
 80092c6:	d936      	bls.n	8009336 <__hexnan+0x112>
 80092c8:	4623      	mov	r3, r4
 80092ca:	f1a8 0204 	sub.w	r2, r8, #4
 80092ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80092d2:	429f      	cmp	r7, r3
 80092d4:	f842 1f04 	str.w	r1, [r2, #4]!
 80092d8:	d2f9      	bcs.n	80092ce <__hexnan+0xaa>
 80092da:	1b3b      	subs	r3, r7, r4
 80092dc:	f023 0303 	bic.w	r3, r3, #3
 80092e0:	3304      	adds	r3, #4
 80092e2:	3401      	adds	r4, #1
 80092e4:	3e03      	subs	r6, #3
 80092e6:	42b4      	cmp	r4, r6
 80092e8:	bf88      	it	hi
 80092ea:	2304      	movhi	r3, #4
 80092ec:	2200      	movs	r2, #0
 80092ee:	4443      	add	r3, r8
 80092f0:	f843 2b04 	str.w	r2, [r3], #4
 80092f4:	429f      	cmp	r7, r3
 80092f6:	d2fb      	bcs.n	80092f0 <__hexnan+0xcc>
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	b91b      	cbnz	r3, 8009304 <__hexnan+0xe0>
 80092fc:	4547      	cmp	r7, r8
 80092fe:	d128      	bne.n	8009352 <__hexnan+0x12e>
 8009300:	2301      	movs	r3, #1
 8009302:	603b      	str	r3, [r7, #0]
 8009304:	2005      	movs	r0, #5
 8009306:	b007      	add	sp, #28
 8009308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930c:	3501      	adds	r5, #1
 800930e:	2d08      	cmp	r5, #8
 8009310:	f10b 0b01 	add.w	fp, fp, #1
 8009314:	dd06      	ble.n	8009324 <__hexnan+0x100>
 8009316:	4544      	cmp	r4, r8
 8009318:	d9c1      	bls.n	800929e <__hexnan+0x7a>
 800931a:	2300      	movs	r3, #0
 800931c:	2501      	movs	r5, #1
 800931e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009322:	3c04      	subs	r4, #4
 8009324:	6822      	ldr	r2, [r4, #0]
 8009326:	f000 000f 	and.w	r0, r0, #15
 800932a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800932e:	6020      	str	r0, [r4, #0]
 8009330:	e7b5      	b.n	800929e <__hexnan+0x7a>
 8009332:	2508      	movs	r5, #8
 8009334:	e7b3      	b.n	800929e <__hexnan+0x7a>
 8009336:	9b01      	ldr	r3, [sp, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d0dd      	beq.n	80092f8 <__hexnan+0xd4>
 800933c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009340:	f1c3 0320 	rsb	r3, r3, #32
 8009344:	40da      	lsrs	r2, r3
 8009346:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800934a:	4013      	ands	r3, r2
 800934c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009350:	e7d2      	b.n	80092f8 <__hexnan+0xd4>
 8009352:	3f04      	subs	r7, #4
 8009354:	e7d0      	b.n	80092f8 <__hexnan+0xd4>
 8009356:	2004      	movs	r0, #4
 8009358:	e7d5      	b.n	8009306 <__hexnan+0xe2>

0800935a <__ssputs_r>:
 800935a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800935e:	461f      	mov	r7, r3
 8009360:	688e      	ldr	r6, [r1, #8]
 8009362:	4682      	mov	sl, r0
 8009364:	42be      	cmp	r6, r7
 8009366:	460c      	mov	r4, r1
 8009368:	4690      	mov	r8, r2
 800936a:	680b      	ldr	r3, [r1, #0]
 800936c:	d82d      	bhi.n	80093ca <__ssputs_r+0x70>
 800936e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009372:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009376:	d026      	beq.n	80093c6 <__ssputs_r+0x6c>
 8009378:	6965      	ldr	r5, [r4, #20]
 800937a:	6909      	ldr	r1, [r1, #16]
 800937c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009380:	eba3 0901 	sub.w	r9, r3, r1
 8009384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009388:	1c7b      	adds	r3, r7, #1
 800938a:	444b      	add	r3, r9
 800938c:	106d      	asrs	r5, r5, #1
 800938e:	429d      	cmp	r5, r3
 8009390:	bf38      	it	cc
 8009392:	461d      	movcc	r5, r3
 8009394:	0553      	lsls	r3, r2, #21
 8009396:	d527      	bpl.n	80093e8 <__ssputs_r+0x8e>
 8009398:	4629      	mov	r1, r5
 800939a:	f000 f95f 	bl	800965c <_malloc_r>
 800939e:	4606      	mov	r6, r0
 80093a0:	b360      	cbz	r0, 80093fc <__ssputs_r+0xa2>
 80093a2:	464a      	mov	r2, r9
 80093a4:	6921      	ldr	r1, [r4, #16]
 80093a6:	f7fe fe34 	bl	8008012 <memcpy>
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80093b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093b4:	81a3      	strh	r3, [r4, #12]
 80093b6:	6126      	str	r6, [r4, #16]
 80093b8:	444e      	add	r6, r9
 80093ba:	6026      	str	r6, [r4, #0]
 80093bc:	463e      	mov	r6, r7
 80093be:	6165      	str	r5, [r4, #20]
 80093c0:	eba5 0509 	sub.w	r5, r5, r9
 80093c4:	60a5      	str	r5, [r4, #8]
 80093c6:	42be      	cmp	r6, r7
 80093c8:	d900      	bls.n	80093cc <__ssputs_r+0x72>
 80093ca:	463e      	mov	r6, r7
 80093cc:	4632      	mov	r2, r6
 80093ce:	4641      	mov	r1, r8
 80093d0:	6820      	ldr	r0, [r4, #0]
 80093d2:	f000 ffad 	bl	800a330 <memmove>
 80093d6:	2000      	movs	r0, #0
 80093d8:	68a3      	ldr	r3, [r4, #8]
 80093da:	1b9b      	subs	r3, r3, r6
 80093dc:	60a3      	str	r3, [r4, #8]
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	4433      	add	r3, r6
 80093e2:	6023      	str	r3, [r4, #0]
 80093e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e8:	462a      	mov	r2, r5
 80093ea:	f000 ff66 	bl	800a2ba <_realloc_r>
 80093ee:	4606      	mov	r6, r0
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d1e0      	bne.n	80093b6 <__ssputs_r+0x5c>
 80093f4:	4650      	mov	r0, sl
 80093f6:	6921      	ldr	r1, [r4, #16]
 80093f8:	f001 f83c 	bl	800a474 <_free_r>
 80093fc:	230c      	movs	r3, #12
 80093fe:	f8ca 3000 	str.w	r3, [sl]
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800940c:	81a3      	strh	r3, [r4, #12]
 800940e:	e7e9      	b.n	80093e4 <__ssputs_r+0x8a>

08009410 <_svfiprintf_r>:
 8009410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009414:	4698      	mov	r8, r3
 8009416:	898b      	ldrh	r3, [r1, #12]
 8009418:	4607      	mov	r7, r0
 800941a:	061b      	lsls	r3, r3, #24
 800941c:	460d      	mov	r5, r1
 800941e:	4614      	mov	r4, r2
 8009420:	b09d      	sub	sp, #116	@ 0x74
 8009422:	d510      	bpl.n	8009446 <_svfiprintf_r+0x36>
 8009424:	690b      	ldr	r3, [r1, #16]
 8009426:	b973      	cbnz	r3, 8009446 <_svfiprintf_r+0x36>
 8009428:	2140      	movs	r1, #64	@ 0x40
 800942a:	f000 f917 	bl	800965c <_malloc_r>
 800942e:	6028      	str	r0, [r5, #0]
 8009430:	6128      	str	r0, [r5, #16]
 8009432:	b930      	cbnz	r0, 8009442 <_svfiprintf_r+0x32>
 8009434:	230c      	movs	r3, #12
 8009436:	603b      	str	r3, [r7, #0]
 8009438:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800943c:	b01d      	add	sp, #116	@ 0x74
 800943e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009442:	2340      	movs	r3, #64	@ 0x40
 8009444:	616b      	str	r3, [r5, #20]
 8009446:	2300      	movs	r3, #0
 8009448:	9309      	str	r3, [sp, #36]	@ 0x24
 800944a:	2320      	movs	r3, #32
 800944c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009450:	2330      	movs	r3, #48	@ 0x30
 8009452:	f04f 0901 	mov.w	r9, #1
 8009456:	f8cd 800c 	str.w	r8, [sp, #12]
 800945a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80095f4 <_svfiprintf_r+0x1e4>
 800945e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009462:	4623      	mov	r3, r4
 8009464:	469a      	mov	sl, r3
 8009466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800946a:	b10a      	cbz	r2, 8009470 <_svfiprintf_r+0x60>
 800946c:	2a25      	cmp	r2, #37	@ 0x25
 800946e:	d1f9      	bne.n	8009464 <_svfiprintf_r+0x54>
 8009470:	ebba 0b04 	subs.w	fp, sl, r4
 8009474:	d00b      	beq.n	800948e <_svfiprintf_r+0x7e>
 8009476:	465b      	mov	r3, fp
 8009478:	4622      	mov	r2, r4
 800947a:	4629      	mov	r1, r5
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff ff6c 	bl	800935a <__ssputs_r>
 8009482:	3001      	adds	r0, #1
 8009484:	f000 80a7 	beq.w	80095d6 <_svfiprintf_r+0x1c6>
 8009488:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800948a:	445a      	add	r2, fp
 800948c:	9209      	str	r2, [sp, #36]	@ 0x24
 800948e:	f89a 3000 	ldrb.w	r3, [sl]
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 809f 	beq.w	80095d6 <_svfiprintf_r+0x1c6>
 8009498:	2300      	movs	r3, #0
 800949a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800949e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094a2:	f10a 0a01 	add.w	sl, sl, #1
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	9307      	str	r3, [sp, #28]
 80094aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80094b0:	4654      	mov	r4, sl
 80094b2:	2205      	movs	r2, #5
 80094b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b8:	484e      	ldr	r0, [pc, #312]	@ (80095f4 <_svfiprintf_r+0x1e4>)
 80094ba:	f7fe fd9c 	bl	8007ff6 <memchr>
 80094be:	9a04      	ldr	r2, [sp, #16]
 80094c0:	b9d8      	cbnz	r0, 80094fa <_svfiprintf_r+0xea>
 80094c2:	06d0      	lsls	r0, r2, #27
 80094c4:	bf44      	itt	mi
 80094c6:	2320      	movmi	r3, #32
 80094c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094cc:	0711      	lsls	r1, r2, #28
 80094ce:	bf44      	itt	mi
 80094d0:	232b      	movmi	r3, #43	@ 0x2b
 80094d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094d6:	f89a 3000 	ldrb.w	r3, [sl]
 80094da:	2b2a      	cmp	r3, #42	@ 0x2a
 80094dc:	d015      	beq.n	800950a <_svfiprintf_r+0xfa>
 80094de:	4654      	mov	r4, sl
 80094e0:	2000      	movs	r0, #0
 80094e2:	f04f 0c0a 	mov.w	ip, #10
 80094e6:	9a07      	ldr	r2, [sp, #28]
 80094e8:	4621      	mov	r1, r4
 80094ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094ee:	3b30      	subs	r3, #48	@ 0x30
 80094f0:	2b09      	cmp	r3, #9
 80094f2:	d94b      	bls.n	800958c <_svfiprintf_r+0x17c>
 80094f4:	b1b0      	cbz	r0, 8009524 <_svfiprintf_r+0x114>
 80094f6:	9207      	str	r2, [sp, #28]
 80094f8:	e014      	b.n	8009524 <_svfiprintf_r+0x114>
 80094fa:	eba0 0308 	sub.w	r3, r0, r8
 80094fe:	fa09 f303 	lsl.w	r3, r9, r3
 8009502:	4313      	orrs	r3, r2
 8009504:	46a2      	mov	sl, r4
 8009506:	9304      	str	r3, [sp, #16]
 8009508:	e7d2      	b.n	80094b0 <_svfiprintf_r+0xa0>
 800950a:	9b03      	ldr	r3, [sp, #12]
 800950c:	1d19      	adds	r1, r3, #4
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	9103      	str	r1, [sp, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	bfbb      	ittet	lt
 8009516:	425b      	neglt	r3, r3
 8009518:	f042 0202 	orrlt.w	r2, r2, #2
 800951c:	9307      	strge	r3, [sp, #28]
 800951e:	9307      	strlt	r3, [sp, #28]
 8009520:	bfb8      	it	lt
 8009522:	9204      	strlt	r2, [sp, #16]
 8009524:	7823      	ldrb	r3, [r4, #0]
 8009526:	2b2e      	cmp	r3, #46	@ 0x2e
 8009528:	d10a      	bne.n	8009540 <_svfiprintf_r+0x130>
 800952a:	7863      	ldrb	r3, [r4, #1]
 800952c:	2b2a      	cmp	r3, #42	@ 0x2a
 800952e:	d132      	bne.n	8009596 <_svfiprintf_r+0x186>
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	3402      	adds	r4, #2
 8009534:	1d1a      	adds	r2, r3, #4
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	9203      	str	r2, [sp, #12]
 800953a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800953e:	9305      	str	r3, [sp, #20]
 8009540:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80095f8 <_svfiprintf_r+0x1e8>
 8009544:	2203      	movs	r2, #3
 8009546:	4650      	mov	r0, sl
 8009548:	7821      	ldrb	r1, [r4, #0]
 800954a:	f7fe fd54 	bl	8007ff6 <memchr>
 800954e:	b138      	cbz	r0, 8009560 <_svfiprintf_r+0x150>
 8009550:	2240      	movs	r2, #64	@ 0x40
 8009552:	9b04      	ldr	r3, [sp, #16]
 8009554:	eba0 000a 	sub.w	r0, r0, sl
 8009558:	4082      	lsls	r2, r0
 800955a:	4313      	orrs	r3, r2
 800955c:	3401      	adds	r4, #1
 800955e:	9304      	str	r3, [sp, #16]
 8009560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009564:	2206      	movs	r2, #6
 8009566:	4825      	ldr	r0, [pc, #148]	@ (80095fc <_svfiprintf_r+0x1ec>)
 8009568:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800956c:	f7fe fd43 	bl	8007ff6 <memchr>
 8009570:	2800      	cmp	r0, #0
 8009572:	d036      	beq.n	80095e2 <_svfiprintf_r+0x1d2>
 8009574:	4b22      	ldr	r3, [pc, #136]	@ (8009600 <_svfiprintf_r+0x1f0>)
 8009576:	bb1b      	cbnz	r3, 80095c0 <_svfiprintf_r+0x1b0>
 8009578:	9b03      	ldr	r3, [sp, #12]
 800957a:	3307      	adds	r3, #7
 800957c:	f023 0307 	bic.w	r3, r3, #7
 8009580:	3308      	adds	r3, #8
 8009582:	9303      	str	r3, [sp, #12]
 8009584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009586:	4433      	add	r3, r6
 8009588:	9309      	str	r3, [sp, #36]	@ 0x24
 800958a:	e76a      	b.n	8009462 <_svfiprintf_r+0x52>
 800958c:	460c      	mov	r4, r1
 800958e:	2001      	movs	r0, #1
 8009590:	fb0c 3202 	mla	r2, ip, r2, r3
 8009594:	e7a8      	b.n	80094e8 <_svfiprintf_r+0xd8>
 8009596:	2300      	movs	r3, #0
 8009598:	f04f 0c0a 	mov.w	ip, #10
 800959c:	4619      	mov	r1, r3
 800959e:	3401      	adds	r4, #1
 80095a0:	9305      	str	r3, [sp, #20]
 80095a2:	4620      	mov	r0, r4
 80095a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095a8:	3a30      	subs	r2, #48	@ 0x30
 80095aa:	2a09      	cmp	r2, #9
 80095ac:	d903      	bls.n	80095b6 <_svfiprintf_r+0x1a6>
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0c6      	beq.n	8009540 <_svfiprintf_r+0x130>
 80095b2:	9105      	str	r1, [sp, #20]
 80095b4:	e7c4      	b.n	8009540 <_svfiprintf_r+0x130>
 80095b6:	4604      	mov	r4, r0
 80095b8:	2301      	movs	r3, #1
 80095ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80095be:	e7f0      	b.n	80095a2 <_svfiprintf_r+0x192>
 80095c0:	ab03      	add	r3, sp, #12
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	462a      	mov	r2, r5
 80095c6:	4638      	mov	r0, r7
 80095c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009604 <_svfiprintf_r+0x1f4>)
 80095ca:	a904      	add	r1, sp, #16
 80095cc:	f7fc ff68 	bl	80064a0 <_printf_float>
 80095d0:	1c42      	adds	r2, r0, #1
 80095d2:	4606      	mov	r6, r0
 80095d4:	d1d6      	bne.n	8009584 <_svfiprintf_r+0x174>
 80095d6:	89ab      	ldrh	r3, [r5, #12]
 80095d8:	065b      	lsls	r3, r3, #25
 80095da:	f53f af2d 	bmi.w	8009438 <_svfiprintf_r+0x28>
 80095de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095e0:	e72c      	b.n	800943c <_svfiprintf_r+0x2c>
 80095e2:	ab03      	add	r3, sp, #12
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	462a      	mov	r2, r5
 80095e8:	4638      	mov	r0, r7
 80095ea:	4b06      	ldr	r3, [pc, #24]	@ (8009604 <_svfiprintf_r+0x1f4>)
 80095ec:	a904      	add	r1, sp, #16
 80095ee:	f7fd f9f5 	bl	80069dc <_printf_i>
 80095f2:	e7ed      	b.n	80095d0 <_svfiprintf_r+0x1c0>
 80095f4:	0800ad4e 	.word	0x0800ad4e
 80095f8:	0800ad54 	.word	0x0800ad54
 80095fc:	0800ad58 	.word	0x0800ad58
 8009600:	080064a1 	.word	0x080064a1
 8009604:	0800935b 	.word	0x0800935b

08009608 <malloc>:
 8009608:	4b02      	ldr	r3, [pc, #8]	@ (8009614 <malloc+0xc>)
 800960a:	4601      	mov	r1, r0
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	f000 b825 	b.w	800965c <_malloc_r>
 8009612:	bf00      	nop
 8009614:	200001a0 	.word	0x200001a0

08009618 <sbrk_aligned>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	4e0f      	ldr	r6, [pc, #60]	@ (8009658 <sbrk_aligned+0x40>)
 800961c:	460c      	mov	r4, r1
 800961e:	6831      	ldr	r1, [r6, #0]
 8009620:	4605      	mov	r5, r0
 8009622:	b911      	cbnz	r1, 800962a <sbrk_aligned+0x12>
 8009624:	f000 fed2 	bl	800a3cc <_sbrk_r>
 8009628:	6030      	str	r0, [r6, #0]
 800962a:	4621      	mov	r1, r4
 800962c:	4628      	mov	r0, r5
 800962e:	f000 fecd 	bl	800a3cc <_sbrk_r>
 8009632:	1c43      	adds	r3, r0, #1
 8009634:	d103      	bne.n	800963e <sbrk_aligned+0x26>
 8009636:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800963a:	4620      	mov	r0, r4
 800963c:	bd70      	pop	{r4, r5, r6, pc}
 800963e:	1cc4      	adds	r4, r0, #3
 8009640:	f024 0403 	bic.w	r4, r4, #3
 8009644:	42a0      	cmp	r0, r4
 8009646:	d0f8      	beq.n	800963a <sbrk_aligned+0x22>
 8009648:	1a21      	subs	r1, r4, r0
 800964a:	4628      	mov	r0, r5
 800964c:	f000 febe 	bl	800a3cc <_sbrk_r>
 8009650:	3001      	adds	r0, #1
 8009652:	d1f2      	bne.n	800963a <sbrk_aligned+0x22>
 8009654:	e7ef      	b.n	8009636 <sbrk_aligned+0x1e>
 8009656:	bf00      	nop
 8009658:	20000520 	.word	0x20000520

0800965c <_malloc_r>:
 800965c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009660:	1ccd      	adds	r5, r1, #3
 8009662:	f025 0503 	bic.w	r5, r5, #3
 8009666:	3508      	adds	r5, #8
 8009668:	2d0c      	cmp	r5, #12
 800966a:	bf38      	it	cc
 800966c:	250c      	movcc	r5, #12
 800966e:	2d00      	cmp	r5, #0
 8009670:	4606      	mov	r6, r0
 8009672:	db01      	blt.n	8009678 <_malloc_r+0x1c>
 8009674:	42a9      	cmp	r1, r5
 8009676:	d904      	bls.n	8009682 <_malloc_r+0x26>
 8009678:	230c      	movs	r3, #12
 800967a:	6033      	str	r3, [r6, #0]
 800967c:	2000      	movs	r0, #0
 800967e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009758 <_malloc_r+0xfc>
 8009686:	f000 f923 	bl	80098d0 <__malloc_lock>
 800968a:	f8d8 3000 	ldr.w	r3, [r8]
 800968e:	461c      	mov	r4, r3
 8009690:	bb44      	cbnz	r4, 80096e4 <_malloc_r+0x88>
 8009692:	4629      	mov	r1, r5
 8009694:	4630      	mov	r0, r6
 8009696:	f7ff ffbf 	bl	8009618 <sbrk_aligned>
 800969a:	1c43      	adds	r3, r0, #1
 800969c:	4604      	mov	r4, r0
 800969e:	d158      	bne.n	8009752 <_malloc_r+0xf6>
 80096a0:	f8d8 4000 	ldr.w	r4, [r8]
 80096a4:	4627      	mov	r7, r4
 80096a6:	2f00      	cmp	r7, #0
 80096a8:	d143      	bne.n	8009732 <_malloc_r+0xd6>
 80096aa:	2c00      	cmp	r4, #0
 80096ac:	d04b      	beq.n	8009746 <_malloc_r+0xea>
 80096ae:	6823      	ldr	r3, [r4, #0]
 80096b0:	4639      	mov	r1, r7
 80096b2:	4630      	mov	r0, r6
 80096b4:	eb04 0903 	add.w	r9, r4, r3
 80096b8:	f000 fe88 	bl	800a3cc <_sbrk_r>
 80096bc:	4581      	cmp	r9, r0
 80096be:	d142      	bne.n	8009746 <_malloc_r+0xea>
 80096c0:	6821      	ldr	r1, [r4, #0]
 80096c2:	4630      	mov	r0, r6
 80096c4:	1a6d      	subs	r5, r5, r1
 80096c6:	4629      	mov	r1, r5
 80096c8:	f7ff ffa6 	bl	8009618 <sbrk_aligned>
 80096cc:	3001      	adds	r0, #1
 80096ce:	d03a      	beq.n	8009746 <_malloc_r+0xea>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	442b      	add	r3, r5
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	f8d8 3000 	ldr.w	r3, [r8]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	bb62      	cbnz	r2, 8009738 <_malloc_r+0xdc>
 80096de:	f8c8 7000 	str.w	r7, [r8]
 80096e2:	e00f      	b.n	8009704 <_malloc_r+0xa8>
 80096e4:	6822      	ldr	r2, [r4, #0]
 80096e6:	1b52      	subs	r2, r2, r5
 80096e8:	d420      	bmi.n	800972c <_malloc_r+0xd0>
 80096ea:	2a0b      	cmp	r2, #11
 80096ec:	d917      	bls.n	800971e <_malloc_r+0xc2>
 80096ee:	1961      	adds	r1, r4, r5
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	6025      	str	r5, [r4, #0]
 80096f4:	bf18      	it	ne
 80096f6:	6059      	strne	r1, [r3, #4]
 80096f8:	6863      	ldr	r3, [r4, #4]
 80096fa:	bf08      	it	eq
 80096fc:	f8c8 1000 	streq.w	r1, [r8]
 8009700:	5162      	str	r2, [r4, r5]
 8009702:	604b      	str	r3, [r1, #4]
 8009704:	4630      	mov	r0, r6
 8009706:	f000 f8e9 	bl	80098dc <__malloc_unlock>
 800970a:	f104 000b 	add.w	r0, r4, #11
 800970e:	1d23      	adds	r3, r4, #4
 8009710:	f020 0007 	bic.w	r0, r0, #7
 8009714:	1ac2      	subs	r2, r0, r3
 8009716:	bf1c      	itt	ne
 8009718:	1a1b      	subne	r3, r3, r0
 800971a:	50a3      	strne	r3, [r4, r2]
 800971c:	e7af      	b.n	800967e <_malloc_r+0x22>
 800971e:	6862      	ldr	r2, [r4, #4]
 8009720:	42a3      	cmp	r3, r4
 8009722:	bf0c      	ite	eq
 8009724:	f8c8 2000 	streq.w	r2, [r8]
 8009728:	605a      	strne	r2, [r3, #4]
 800972a:	e7eb      	b.n	8009704 <_malloc_r+0xa8>
 800972c:	4623      	mov	r3, r4
 800972e:	6864      	ldr	r4, [r4, #4]
 8009730:	e7ae      	b.n	8009690 <_malloc_r+0x34>
 8009732:	463c      	mov	r4, r7
 8009734:	687f      	ldr	r7, [r7, #4]
 8009736:	e7b6      	b.n	80096a6 <_malloc_r+0x4a>
 8009738:	461a      	mov	r2, r3
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	42a3      	cmp	r3, r4
 800973e:	d1fb      	bne.n	8009738 <_malloc_r+0xdc>
 8009740:	2300      	movs	r3, #0
 8009742:	6053      	str	r3, [r2, #4]
 8009744:	e7de      	b.n	8009704 <_malloc_r+0xa8>
 8009746:	230c      	movs	r3, #12
 8009748:	4630      	mov	r0, r6
 800974a:	6033      	str	r3, [r6, #0]
 800974c:	f000 f8c6 	bl	80098dc <__malloc_unlock>
 8009750:	e794      	b.n	800967c <_malloc_r+0x20>
 8009752:	6005      	str	r5, [r0, #0]
 8009754:	e7d6      	b.n	8009704 <_malloc_r+0xa8>
 8009756:	bf00      	nop
 8009758:	20000524 	.word	0x20000524

0800975c <__ascii_mbtowc>:
 800975c:	b082      	sub	sp, #8
 800975e:	b901      	cbnz	r1, 8009762 <__ascii_mbtowc+0x6>
 8009760:	a901      	add	r1, sp, #4
 8009762:	b142      	cbz	r2, 8009776 <__ascii_mbtowc+0x1a>
 8009764:	b14b      	cbz	r3, 800977a <__ascii_mbtowc+0x1e>
 8009766:	7813      	ldrb	r3, [r2, #0]
 8009768:	600b      	str	r3, [r1, #0]
 800976a:	7812      	ldrb	r2, [r2, #0]
 800976c:	1e10      	subs	r0, r2, #0
 800976e:	bf18      	it	ne
 8009770:	2001      	movne	r0, #1
 8009772:	b002      	add	sp, #8
 8009774:	4770      	bx	lr
 8009776:	4610      	mov	r0, r2
 8009778:	e7fb      	b.n	8009772 <__ascii_mbtowc+0x16>
 800977a:	f06f 0001 	mvn.w	r0, #1
 800977e:	e7f8      	b.n	8009772 <__ascii_mbtowc+0x16>

08009780 <__sflush_r>:
 8009780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009786:	0716      	lsls	r6, r2, #28
 8009788:	4605      	mov	r5, r0
 800978a:	460c      	mov	r4, r1
 800978c:	d454      	bmi.n	8009838 <__sflush_r+0xb8>
 800978e:	684b      	ldr	r3, [r1, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	dc02      	bgt.n	800979a <__sflush_r+0x1a>
 8009794:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009796:	2b00      	cmp	r3, #0
 8009798:	dd48      	ble.n	800982c <__sflush_r+0xac>
 800979a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800979c:	2e00      	cmp	r6, #0
 800979e:	d045      	beq.n	800982c <__sflush_r+0xac>
 80097a0:	2300      	movs	r3, #0
 80097a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097a6:	682f      	ldr	r7, [r5, #0]
 80097a8:	6a21      	ldr	r1, [r4, #32]
 80097aa:	602b      	str	r3, [r5, #0]
 80097ac:	d030      	beq.n	8009810 <__sflush_r+0x90>
 80097ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	0759      	lsls	r1, r3, #29
 80097b4:	d505      	bpl.n	80097c2 <__sflush_r+0x42>
 80097b6:	6863      	ldr	r3, [r4, #4]
 80097b8:	1ad2      	subs	r2, r2, r3
 80097ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097bc:	b10b      	cbz	r3, 80097c2 <__sflush_r+0x42>
 80097be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097c0:	1ad2      	subs	r2, r2, r3
 80097c2:	2300      	movs	r3, #0
 80097c4:	4628      	mov	r0, r5
 80097c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097c8:	6a21      	ldr	r1, [r4, #32]
 80097ca:	47b0      	blx	r6
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	d106      	bne.n	80097e0 <__sflush_r+0x60>
 80097d2:	6829      	ldr	r1, [r5, #0]
 80097d4:	291d      	cmp	r1, #29
 80097d6:	d82b      	bhi.n	8009830 <__sflush_r+0xb0>
 80097d8:	4a28      	ldr	r2, [pc, #160]	@ (800987c <__sflush_r+0xfc>)
 80097da:	410a      	asrs	r2, r1
 80097dc:	07d6      	lsls	r6, r2, #31
 80097de:	d427      	bmi.n	8009830 <__sflush_r+0xb0>
 80097e0:	2200      	movs	r2, #0
 80097e2:	6062      	str	r2, [r4, #4]
 80097e4:	6922      	ldr	r2, [r4, #16]
 80097e6:	04d9      	lsls	r1, r3, #19
 80097e8:	6022      	str	r2, [r4, #0]
 80097ea:	d504      	bpl.n	80097f6 <__sflush_r+0x76>
 80097ec:	1c42      	adds	r2, r0, #1
 80097ee:	d101      	bne.n	80097f4 <__sflush_r+0x74>
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	b903      	cbnz	r3, 80097f6 <__sflush_r+0x76>
 80097f4:	6560      	str	r0, [r4, #84]	@ 0x54
 80097f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097f8:	602f      	str	r7, [r5, #0]
 80097fa:	b1b9      	cbz	r1, 800982c <__sflush_r+0xac>
 80097fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009800:	4299      	cmp	r1, r3
 8009802:	d002      	beq.n	800980a <__sflush_r+0x8a>
 8009804:	4628      	mov	r0, r5
 8009806:	f000 fe35 	bl	800a474 <_free_r>
 800980a:	2300      	movs	r3, #0
 800980c:	6363      	str	r3, [r4, #52]	@ 0x34
 800980e:	e00d      	b.n	800982c <__sflush_r+0xac>
 8009810:	2301      	movs	r3, #1
 8009812:	4628      	mov	r0, r5
 8009814:	47b0      	blx	r6
 8009816:	4602      	mov	r2, r0
 8009818:	1c50      	adds	r0, r2, #1
 800981a:	d1c9      	bne.n	80097b0 <__sflush_r+0x30>
 800981c:	682b      	ldr	r3, [r5, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0c6      	beq.n	80097b0 <__sflush_r+0x30>
 8009822:	2b1d      	cmp	r3, #29
 8009824:	d001      	beq.n	800982a <__sflush_r+0xaa>
 8009826:	2b16      	cmp	r3, #22
 8009828:	d11d      	bne.n	8009866 <__sflush_r+0xe6>
 800982a:	602f      	str	r7, [r5, #0]
 800982c:	2000      	movs	r0, #0
 800982e:	e021      	b.n	8009874 <__sflush_r+0xf4>
 8009830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009834:	b21b      	sxth	r3, r3
 8009836:	e01a      	b.n	800986e <__sflush_r+0xee>
 8009838:	690f      	ldr	r7, [r1, #16]
 800983a:	2f00      	cmp	r7, #0
 800983c:	d0f6      	beq.n	800982c <__sflush_r+0xac>
 800983e:	0793      	lsls	r3, r2, #30
 8009840:	bf18      	it	ne
 8009842:	2300      	movne	r3, #0
 8009844:	680e      	ldr	r6, [r1, #0]
 8009846:	bf08      	it	eq
 8009848:	694b      	ldreq	r3, [r1, #20]
 800984a:	1bf6      	subs	r6, r6, r7
 800984c:	600f      	str	r7, [r1, #0]
 800984e:	608b      	str	r3, [r1, #8]
 8009850:	2e00      	cmp	r6, #0
 8009852:	ddeb      	ble.n	800982c <__sflush_r+0xac>
 8009854:	4633      	mov	r3, r6
 8009856:	463a      	mov	r2, r7
 8009858:	4628      	mov	r0, r5
 800985a:	6a21      	ldr	r1, [r4, #32]
 800985c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009860:	47e0      	blx	ip
 8009862:	2800      	cmp	r0, #0
 8009864:	dc07      	bgt.n	8009876 <__sflush_r+0xf6>
 8009866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800986a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800986e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009872:	81a3      	strh	r3, [r4, #12]
 8009874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009876:	4407      	add	r7, r0
 8009878:	1a36      	subs	r6, r6, r0
 800987a:	e7e9      	b.n	8009850 <__sflush_r+0xd0>
 800987c:	dfbffffe 	.word	0xdfbffffe

08009880 <_fflush_r>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	690b      	ldr	r3, [r1, #16]
 8009884:	4605      	mov	r5, r0
 8009886:	460c      	mov	r4, r1
 8009888:	b913      	cbnz	r3, 8009890 <_fflush_r+0x10>
 800988a:	2500      	movs	r5, #0
 800988c:	4628      	mov	r0, r5
 800988e:	bd38      	pop	{r3, r4, r5, pc}
 8009890:	b118      	cbz	r0, 800989a <_fflush_r+0x1a>
 8009892:	6a03      	ldr	r3, [r0, #32]
 8009894:	b90b      	cbnz	r3, 800989a <_fflush_r+0x1a>
 8009896:	f7fd fcb1 	bl	80071fc <__sinit>
 800989a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0f3      	beq.n	800988a <_fflush_r+0xa>
 80098a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098a4:	07d0      	lsls	r0, r2, #31
 80098a6:	d404      	bmi.n	80098b2 <_fflush_r+0x32>
 80098a8:	0599      	lsls	r1, r3, #22
 80098aa:	d402      	bmi.n	80098b2 <_fflush_r+0x32>
 80098ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098ae:	f7fe fba0 	bl	8007ff2 <__retarget_lock_acquire_recursive>
 80098b2:	4628      	mov	r0, r5
 80098b4:	4621      	mov	r1, r4
 80098b6:	f7ff ff63 	bl	8009780 <__sflush_r>
 80098ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098bc:	4605      	mov	r5, r0
 80098be:	07da      	lsls	r2, r3, #31
 80098c0:	d4e4      	bmi.n	800988c <_fflush_r+0xc>
 80098c2:	89a3      	ldrh	r3, [r4, #12]
 80098c4:	059b      	lsls	r3, r3, #22
 80098c6:	d4e1      	bmi.n	800988c <_fflush_r+0xc>
 80098c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098ca:	f7fe fb93 	bl	8007ff4 <__retarget_lock_release_recursive>
 80098ce:	e7dd      	b.n	800988c <_fflush_r+0xc>

080098d0 <__malloc_lock>:
 80098d0:	4801      	ldr	r0, [pc, #4]	@ (80098d8 <__malloc_lock+0x8>)
 80098d2:	f7fe bb8e 	b.w	8007ff2 <__retarget_lock_acquire_recursive>
 80098d6:	bf00      	nop
 80098d8:	2000051c 	.word	0x2000051c

080098dc <__malloc_unlock>:
 80098dc:	4801      	ldr	r0, [pc, #4]	@ (80098e4 <__malloc_unlock+0x8>)
 80098de:	f7fe bb89 	b.w	8007ff4 <__retarget_lock_release_recursive>
 80098e2:	bf00      	nop
 80098e4:	2000051c 	.word	0x2000051c

080098e8 <_Balloc>:
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	69c6      	ldr	r6, [r0, #28]
 80098ec:	4604      	mov	r4, r0
 80098ee:	460d      	mov	r5, r1
 80098f0:	b976      	cbnz	r6, 8009910 <_Balloc+0x28>
 80098f2:	2010      	movs	r0, #16
 80098f4:	f7ff fe88 	bl	8009608 <malloc>
 80098f8:	4602      	mov	r2, r0
 80098fa:	61e0      	str	r0, [r4, #28]
 80098fc:	b920      	cbnz	r0, 8009908 <_Balloc+0x20>
 80098fe:	216b      	movs	r1, #107	@ 0x6b
 8009900:	4b17      	ldr	r3, [pc, #92]	@ (8009960 <_Balloc+0x78>)
 8009902:	4818      	ldr	r0, [pc, #96]	@ (8009964 <_Balloc+0x7c>)
 8009904:	f000 fd84 	bl	800a410 <__assert_func>
 8009908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800990c:	6006      	str	r6, [r0, #0]
 800990e:	60c6      	str	r6, [r0, #12]
 8009910:	69e6      	ldr	r6, [r4, #28]
 8009912:	68f3      	ldr	r3, [r6, #12]
 8009914:	b183      	cbz	r3, 8009938 <_Balloc+0x50>
 8009916:	69e3      	ldr	r3, [r4, #28]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800991e:	b9b8      	cbnz	r0, 8009950 <_Balloc+0x68>
 8009920:	2101      	movs	r1, #1
 8009922:	fa01 f605 	lsl.w	r6, r1, r5
 8009926:	1d72      	adds	r2, r6, #5
 8009928:	4620      	mov	r0, r4
 800992a:	0092      	lsls	r2, r2, #2
 800992c:	f000 fd8e 	bl	800a44c <_calloc_r>
 8009930:	b160      	cbz	r0, 800994c <_Balloc+0x64>
 8009932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009936:	e00e      	b.n	8009956 <_Balloc+0x6e>
 8009938:	2221      	movs	r2, #33	@ 0x21
 800993a:	2104      	movs	r1, #4
 800993c:	4620      	mov	r0, r4
 800993e:	f000 fd85 	bl	800a44c <_calloc_r>
 8009942:	69e3      	ldr	r3, [r4, #28]
 8009944:	60f0      	str	r0, [r6, #12]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1e4      	bne.n	8009916 <_Balloc+0x2e>
 800994c:	2000      	movs	r0, #0
 800994e:	bd70      	pop	{r4, r5, r6, pc}
 8009950:	6802      	ldr	r2, [r0, #0]
 8009952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009956:	2300      	movs	r3, #0
 8009958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800995c:	e7f7      	b.n	800994e <_Balloc+0x66>
 800995e:	bf00      	nop
 8009960:	0800ac6e 	.word	0x0800ac6e
 8009964:	0800ad5f 	.word	0x0800ad5f

08009968 <_Bfree>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	69c6      	ldr	r6, [r0, #28]
 800996c:	4605      	mov	r5, r0
 800996e:	460c      	mov	r4, r1
 8009970:	b976      	cbnz	r6, 8009990 <_Bfree+0x28>
 8009972:	2010      	movs	r0, #16
 8009974:	f7ff fe48 	bl	8009608 <malloc>
 8009978:	4602      	mov	r2, r0
 800997a:	61e8      	str	r0, [r5, #28]
 800997c:	b920      	cbnz	r0, 8009988 <_Bfree+0x20>
 800997e:	218f      	movs	r1, #143	@ 0x8f
 8009980:	4b08      	ldr	r3, [pc, #32]	@ (80099a4 <_Bfree+0x3c>)
 8009982:	4809      	ldr	r0, [pc, #36]	@ (80099a8 <_Bfree+0x40>)
 8009984:	f000 fd44 	bl	800a410 <__assert_func>
 8009988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800998c:	6006      	str	r6, [r0, #0]
 800998e:	60c6      	str	r6, [r0, #12]
 8009990:	b13c      	cbz	r4, 80099a2 <_Bfree+0x3a>
 8009992:	69eb      	ldr	r3, [r5, #28]
 8009994:	6862      	ldr	r2, [r4, #4]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800999c:	6021      	str	r1, [r4, #0]
 800999e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099a2:	bd70      	pop	{r4, r5, r6, pc}
 80099a4:	0800ac6e 	.word	0x0800ac6e
 80099a8:	0800ad5f 	.word	0x0800ad5f

080099ac <__multadd>:
 80099ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b0:	4607      	mov	r7, r0
 80099b2:	460c      	mov	r4, r1
 80099b4:	461e      	mov	r6, r3
 80099b6:	2000      	movs	r0, #0
 80099b8:	690d      	ldr	r5, [r1, #16]
 80099ba:	f101 0c14 	add.w	ip, r1, #20
 80099be:	f8dc 3000 	ldr.w	r3, [ip]
 80099c2:	3001      	adds	r0, #1
 80099c4:	b299      	uxth	r1, r3
 80099c6:	fb02 6101 	mla	r1, r2, r1, r6
 80099ca:	0c1e      	lsrs	r6, r3, #16
 80099cc:	0c0b      	lsrs	r3, r1, #16
 80099ce:	fb02 3306 	mla	r3, r2, r6, r3
 80099d2:	b289      	uxth	r1, r1
 80099d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099d8:	4285      	cmp	r5, r0
 80099da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099de:	f84c 1b04 	str.w	r1, [ip], #4
 80099e2:	dcec      	bgt.n	80099be <__multadd+0x12>
 80099e4:	b30e      	cbz	r6, 8009a2a <__multadd+0x7e>
 80099e6:	68a3      	ldr	r3, [r4, #8]
 80099e8:	42ab      	cmp	r3, r5
 80099ea:	dc19      	bgt.n	8009a20 <__multadd+0x74>
 80099ec:	6861      	ldr	r1, [r4, #4]
 80099ee:	4638      	mov	r0, r7
 80099f0:	3101      	adds	r1, #1
 80099f2:	f7ff ff79 	bl	80098e8 <_Balloc>
 80099f6:	4680      	mov	r8, r0
 80099f8:	b928      	cbnz	r0, 8009a06 <__multadd+0x5a>
 80099fa:	4602      	mov	r2, r0
 80099fc:	21ba      	movs	r1, #186	@ 0xba
 80099fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009a30 <__multadd+0x84>)
 8009a00:	480c      	ldr	r0, [pc, #48]	@ (8009a34 <__multadd+0x88>)
 8009a02:	f000 fd05 	bl	800a410 <__assert_func>
 8009a06:	6922      	ldr	r2, [r4, #16]
 8009a08:	f104 010c 	add.w	r1, r4, #12
 8009a0c:	3202      	adds	r2, #2
 8009a0e:	0092      	lsls	r2, r2, #2
 8009a10:	300c      	adds	r0, #12
 8009a12:	f7fe fafe 	bl	8008012 <memcpy>
 8009a16:	4621      	mov	r1, r4
 8009a18:	4638      	mov	r0, r7
 8009a1a:	f7ff ffa5 	bl	8009968 <_Bfree>
 8009a1e:	4644      	mov	r4, r8
 8009a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a24:	3501      	adds	r5, #1
 8009a26:	615e      	str	r6, [r3, #20]
 8009a28:	6125      	str	r5, [r4, #16]
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a30:	0800acdd 	.word	0x0800acdd
 8009a34:	0800ad5f 	.word	0x0800ad5f

08009a38 <__s2b>:
 8009a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a3c:	4615      	mov	r5, r2
 8009a3e:	2209      	movs	r2, #9
 8009a40:	461f      	mov	r7, r3
 8009a42:	3308      	adds	r3, #8
 8009a44:	460c      	mov	r4, r1
 8009a46:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	2100      	movs	r1, #0
 8009a50:	429a      	cmp	r2, r3
 8009a52:	db09      	blt.n	8009a68 <__s2b+0x30>
 8009a54:	4630      	mov	r0, r6
 8009a56:	f7ff ff47 	bl	80098e8 <_Balloc>
 8009a5a:	b940      	cbnz	r0, 8009a6e <__s2b+0x36>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	21d3      	movs	r1, #211	@ 0xd3
 8009a60:	4b18      	ldr	r3, [pc, #96]	@ (8009ac4 <__s2b+0x8c>)
 8009a62:	4819      	ldr	r0, [pc, #100]	@ (8009ac8 <__s2b+0x90>)
 8009a64:	f000 fcd4 	bl	800a410 <__assert_func>
 8009a68:	0052      	lsls	r2, r2, #1
 8009a6a:	3101      	adds	r1, #1
 8009a6c:	e7f0      	b.n	8009a50 <__s2b+0x18>
 8009a6e:	9b08      	ldr	r3, [sp, #32]
 8009a70:	2d09      	cmp	r5, #9
 8009a72:	6143      	str	r3, [r0, #20]
 8009a74:	f04f 0301 	mov.w	r3, #1
 8009a78:	6103      	str	r3, [r0, #16]
 8009a7a:	dd16      	ble.n	8009aaa <__s2b+0x72>
 8009a7c:	f104 0909 	add.w	r9, r4, #9
 8009a80:	46c8      	mov	r8, r9
 8009a82:	442c      	add	r4, r5
 8009a84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a88:	4601      	mov	r1, r0
 8009a8a:	220a      	movs	r2, #10
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	3b30      	subs	r3, #48	@ 0x30
 8009a90:	f7ff ff8c 	bl	80099ac <__multadd>
 8009a94:	45a0      	cmp	r8, r4
 8009a96:	d1f5      	bne.n	8009a84 <__s2b+0x4c>
 8009a98:	f1a5 0408 	sub.w	r4, r5, #8
 8009a9c:	444c      	add	r4, r9
 8009a9e:	1b2d      	subs	r5, r5, r4
 8009aa0:	1963      	adds	r3, r4, r5
 8009aa2:	42bb      	cmp	r3, r7
 8009aa4:	db04      	blt.n	8009ab0 <__s2b+0x78>
 8009aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aaa:	2509      	movs	r5, #9
 8009aac:	340a      	adds	r4, #10
 8009aae:	e7f6      	b.n	8009a9e <__s2b+0x66>
 8009ab0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ab4:	4601      	mov	r1, r0
 8009ab6:	220a      	movs	r2, #10
 8009ab8:	4630      	mov	r0, r6
 8009aba:	3b30      	subs	r3, #48	@ 0x30
 8009abc:	f7ff ff76 	bl	80099ac <__multadd>
 8009ac0:	e7ee      	b.n	8009aa0 <__s2b+0x68>
 8009ac2:	bf00      	nop
 8009ac4:	0800acdd 	.word	0x0800acdd
 8009ac8:	0800ad5f 	.word	0x0800ad5f

08009acc <__hi0bits>:
 8009acc:	4603      	mov	r3, r0
 8009ace:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009ad2:	bf3a      	itte	cc
 8009ad4:	0403      	lslcc	r3, r0, #16
 8009ad6:	2010      	movcc	r0, #16
 8009ad8:	2000      	movcs	r0, #0
 8009ada:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ade:	bf3c      	itt	cc
 8009ae0:	021b      	lslcc	r3, r3, #8
 8009ae2:	3008      	addcc	r0, #8
 8009ae4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ae8:	bf3c      	itt	cc
 8009aea:	011b      	lslcc	r3, r3, #4
 8009aec:	3004      	addcc	r0, #4
 8009aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009af2:	bf3c      	itt	cc
 8009af4:	009b      	lslcc	r3, r3, #2
 8009af6:	3002      	addcc	r0, #2
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	db05      	blt.n	8009b08 <__hi0bits+0x3c>
 8009afc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009b00:	f100 0001 	add.w	r0, r0, #1
 8009b04:	bf08      	it	eq
 8009b06:	2020      	moveq	r0, #32
 8009b08:	4770      	bx	lr

08009b0a <__lo0bits>:
 8009b0a:	6803      	ldr	r3, [r0, #0]
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	f013 0007 	ands.w	r0, r3, #7
 8009b12:	d00b      	beq.n	8009b2c <__lo0bits+0x22>
 8009b14:	07d9      	lsls	r1, r3, #31
 8009b16:	d421      	bmi.n	8009b5c <__lo0bits+0x52>
 8009b18:	0798      	lsls	r0, r3, #30
 8009b1a:	bf49      	itett	mi
 8009b1c:	085b      	lsrmi	r3, r3, #1
 8009b1e:	089b      	lsrpl	r3, r3, #2
 8009b20:	2001      	movmi	r0, #1
 8009b22:	6013      	strmi	r3, [r2, #0]
 8009b24:	bf5c      	itt	pl
 8009b26:	2002      	movpl	r0, #2
 8009b28:	6013      	strpl	r3, [r2, #0]
 8009b2a:	4770      	bx	lr
 8009b2c:	b299      	uxth	r1, r3
 8009b2e:	b909      	cbnz	r1, 8009b34 <__lo0bits+0x2a>
 8009b30:	2010      	movs	r0, #16
 8009b32:	0c1b      	lsrs	r3, r3, #16
 8009b34:	b2d9      	uxtb	r1, r3
 8009b36:	b909      	cbnz	r1, 8009b3c <__lo0bits+0x32>
 8009b38:	3008      	adds	r0, #8
 8009b3a:	0a1b      	lsrs	r3, r3, #8
 8009b3c:	0719      	lsls	r1, r3, #28
 8009b3e:	bf04      	itt	eq
 8009b40:	091b      	lsreq	r3, r3, #4
 8009b42:	3004      	addeq	r0, #4
 8009b44:	0799      	lsls	r1, r3, #30
 8009b46:	bf04      	itt	eq
 8009b48:	089b      	lsreq	r3, r3, #2
 8009b4a:	3002      	addeq	r0, #2
 8009b4c:	07d9      	lsls	r1, r3, #31
 8009b4e:	d403      	bmi.n	8009b58 <__lo0bits+0x4e>
 8009b50:	085b      	lsrs	r3, r3, #1
 8009b52:	f100 0001 	add.w	r0, r0, #1
 8009b56:	d003      	beq.n	8009b60 <__lo0bits+0x56>
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	4770      	bx	lr
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	4770      	bx	lr
 8009b60:	2020      	movs	r0, #32
 8009b62:	4770      	bx	lr

08009b64 <__i2b>:
 8009b64:	b510      	push	{r4, lr}
 8009b66:	460c      	mov	r4, r1
 8009b68:	2101      	movs	r1, #1
 8009b6a:	f7ff febd 	bl	80098e8 <_Balloc>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	b928      	cbnz	r0, 8009b7e <__i2b+0x1a>
 8009b72:	f240 1145 	movw	r1, #325	@ 0x145
 8009b76:	4b04      	ldr	r3, [pc, #16]	@ (8009b88 <__i2b+0x24>)
 8009b78:	4804      	ldr	r0, [pc, #16]	@ (8009b8c <__i2b+0x28>)
 8009b7a:	f000 fc49 	bl	800a410 <__assert_func>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	6144      	str	r4, [r0, #20]
 8009b82:	6103      	str	r3, [r0, #16]
 8009b84:	bd10      	pop	{r4, pc}
 8009b86:	bf00      	nop
 8009b88:	0800acdd 	.word	0x0800acdd
 8009b8c:	0800ad5f 	.word	0x0800ad5f

08009b90 <__multiply>:
 8009b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	4614      	mov	r4, r2
 8009b96:	690a      	ldr	r2, [r1, #16]
 8009b98:	6923      	ldr	r3, [r4, #16]
 8009b9a:	460f      	mov	r7, r1
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	bfa2      	ittt	ge
 8009ba0:	4623      	movge	r3, r4
 8009ba2:	460c      	movge	r4, r1
 8009ba4:	461f      	movge	r7, r3
 8009ba6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009baa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009bae:	68a3      	ldr	r3, [r4, #8]
 8009bb0:	6861      	ldr	r1, [r4, #4]
 8009bb2:	eb0a 0609 	add.w	r6, sl, r9
 8009bb6:	42b3      	cmp	r3, r6
 8009bb8:	b085      	sub	sp, #20
 8009bba:	bfb8      	it	lt
 8009bbc:	3101      	addlt	r1, #1
 8009bbe:	f7ff fe93 	bl	80098e8 <_Balloc>
 8009bc2:	b930      	cbnz	r0, 8009bd2 <__multiply+0x42>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009bca:	4b43      	ldr	r3, [pc, #268]	@ (8009cd8 <__multiply+0x148>)
 8009bcc:	4843      	ldr	r0, [pc, #268]	@ (8009cdc <__multiply+0x14c>)
 8009bce:	f000 fc1f 	bl	800a410 <__assert_func>
 8009bd2:	f100 0514 	add.w	r5, r0, #20
 8009bd6:	462b      	mov	r3, r5
 8009bd8:	2200      	movs	r2, #0
 8009bda:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009bde:	4543      	cmp	r3, r8
 8009be0:	d321      	bcc.n	8009c26 <__multiply+0x96>
 8009be2:	f107 0114 	add.w	r1, r7, #20
 8009be6:	f104 0214 	add.w	r2, r4, #20
 8009bea:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009bee:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009bf2:	9302      	str	r3, [sp, #8]
 8009bf4:	1b13      	subs	r3, r2, r4
 8009bf6:	3b15      	subs	r3, #21
 8009bf8:	f023 0303 	bic.w	r3, r3, #3
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	f104 0715 	add.w	r7, r4, #21
 8009c02:	42ba      	cmp	r2, r7
 8009c04:	bf38      	it	cc
 8009c06:	2304      	movcc	r3, #4
 8009c08:	9301      	str	r3, [sp, #4]
 8009c0a:	9b02      	ldr	r3, [sp, #8]
 8009c0c:	9103      	str	r1, [sp, #12]
 8009c0e:	428b      	cmp	r3, r1
 8009c10:	d80c      	bhi.n	8009c2c <__multiply+0x9c>
 8009c12:	2e00      	cmp	r6, #0
 8009c14:	dd03      	ble.n	8009c1e <__multiply+0x8e>
 8009c16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d05a      	beq.n	8009cd4 <__multiply+0x144>
 8009c1e:	6106      	str	r6, [r0, #16]
 8009c20:	b005      	add	sp, #20
 8009c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c26:	f843 2b04 	str.w	r2, [r3], #4
 8009c2a:	e7d8      	b.n	8009bde <__multiply+0x4e>
 8009c2c:	f8b1 a000 	ldrh.w	sl, [r1]
 8009c30:	f1ba 0f00 	cmp.w	sl, #0
 8009c34:	d023      	beq.n	8009c7e <__multiply+0xee>
 8009c36:	46a9      	mov	r9, r5
 8009c38:	f04f 0c00 	mov.w	ip, #0
 8009c3c:	f104 0e14 	add.w	lr, r4, #20
 8009c40:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c44:	f8d9 3000 	ldr.w	r3, [r9]
 8009c48:	fa1f fb87 	uxth.w	fp, r7
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	fb0a 330b 	mla	r3, sl, fp, r3
 8009c52:	4463      	add	r3, ip
 8009c54:	f8d9 c000 	ldr.w	ip, [r9]
 8009c58:	0c3f      	lsrs	r7, r7, #16
 8009c5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009c5e:	fb0a c707 	mla	r7, sl, r7, ip
 8009c62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c6c:	4572      	cmp	r2, lr
 8009c6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c72:	f849 3b04 	str.w	r3, [r9], #4
 8009c76:	d8e3      	bhi.n	8009c40 <__multiply+0xb0>
 8009c78:	9b01      	ldr	r3, [sp, #4]
 8009c7a:	f845 c003 	str.w	ip, [r5, r3]
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	3104      	adds	r1, #4
 8009c82:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009c86:	f1b9 0f00 	cmp.w	r9, #0
 8009c8a:	d021      	beq.n	8009cd0 <__multiply+0x140>
 8009c8c:	46ae      	mov	lr, r5
 8009c8e:	f04f 0a00 	mov.w	sl, #0
 8009c92:	682b      	ldr	r3, [r5, #0]
 8009c94:	f104 0c14 	add.w	ip, r4, #20
 8009c98:	f8bc b000 	ldrh.w	fp, [ip]
 8009c9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	fb09 770b 	mla	r7, r9, fp, r7
 8009ca6:	4457      	add	r7, sl
 8009ca8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009cac:	f84e 3b04 	str.w	r3, [lr], #4
 8009cb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009cb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009cb8:	f8be 3000 	ldrh.w	r3, [lr]
 8009cbc:	4562      	cmp	r2, ip
 8009cbe:	fb09 330a 	mla	r3, r9, sl, r3
 8009cc2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009cc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009cca:	d8e5      	bhi.n	8009c98 <__multiply+0x108>
 8009ccc:	9f01      	ldr	r7, [sp, #4]
 8009cce:	51eb      	str	r3, [r5, r7]
 8009cd0:	3504      	adds	r5, #4
 8009cd2:	e79a      	b.n	8009c0a <__multiply+0x7a>
 8009cd4:	3e01      	subs	r6, #1
 8009cd6:	e79c      	b.n	8009c12 <__multiply+0x82>
 8009cd8:	0800acdd 	.word	0x0800acdd
 8009cdc:	0800ad5f 	.word	0x0800ad5f

08009ce0 <__pow5mult>:
 8009ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce4:	4615      	mov	r5, r2
 8009ce6:	f012 0203 	ands.w	r2, r2, #3
 8009cea:	4607      	mov	r7, r0
 8009cec:	460e      	mov	r6, r1
 8009cee:	d007      	beq.n	8009d00 <__pow5mult+0x20>
 8009cf0:	4c25      	ldr	r4, [pc, #148]	@ (8009d88 <__pow5mult+0xa8>)
 8009cf2:	3a01      	subs	r2, #1
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cfa:	f7ff fe57 	bl	80099ac <__multadd>
 8009cfe:	4606      	mov	r6, r0
 8009d00:	10ad      	asrs	r5, r5, #2
 8009d02:	d03d      	beq.n	8009d80 <__pow5mult+0xa0>
 8009d04:	69fc      	ldr	r4, [r7, #28]
 8009d06:	b97c      	cbnz	r4, 8009d28 <__pow5mult+0x48>
 8009d08:	2010      	movs	r0, #16
 8009d0a:	f7ff fc7d 	bl	8009608 <malloc>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	61f8      	str	r0, [r7, #28]
 8009d12:	b928      	cbnz	r0, 8009d20 <__pow5mult+0x40>
 8009d14:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009d18:	4b1c      	ldr	r3, [pc, #112]	@ (8009d8c <__pow5mult+0xac>)
 8009d1a:	481d      	ldr	r0, [pc, #116]	@ (8009d90 <__pow5mult+0xb0>)
 8009d1c:	f000 fb78 	bl	800a410 <__assert_func>
 8009d20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d24:	6004      	str	r4, [r0, #0]
 8009d26:	60c4      	str	r4, [r0, #12]
 8009d28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009d2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d30:	b94c      	cbnz	r4, 8009d46 <__pow5mult+0x66>
 8009d32:	f240 2171 	movw	r1, #625	@ 0x271
 8009d36:	4638      	mov	r0, r7
 8009d38:	f7ff ff14 	bl	8009b64 <__i2b>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4604      	mov	r4, r0
 8009d40:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d44:	6003      	str	r3, [r0, #0]
 8009d46:	f04f 0900 	mov.w	r9, #0
 8009d4a:	07eb      	lsls	r3, r5, #31
 8009d4c:	d50a      	bpl.n	8009d64 <__pow5mult+0x84>
 8009d4e:	4631      	mov	r1, r6
 8009d50:	4622      	mov	r2, r4
 8009d52:	4638      	mov	r0, r7
 8009d54:	f7ff ff1c 	bl	8009b90 <__multiply>
 8009d58:	4680      	mov	r8, r0
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	f7ff fe03 	bl	8009968 <_Bfree>
 8009d62:	4646      	mov	r6, r8
 8009d64:	106d      	asrs	r5, r5, #1
 8009d66:	d00b      	beq.n	8009d80 <__pow5mult+0xa0>
 8009d68:	6820      	ldr	r0, [r4, #0]
 8009d6a:	b938      	cbnz	r0, 8009d7c <__pow5mult+0x9c>
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	4621      	mov	r1, r4
 8009d70:	4638      	mov	r0, r7
 8009d72:	f7ff ff0d 	bl	8009b90 <__multiply>
 8009d76:	6020      	str	r0, [r4, #0]
 8009d78:	f8c0 9000 	str.w	r9, [r0]
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	e7e4      	b.n	8009d4a <__pow5mult+0x6a>
 8009d80:	4630      	mov	r0, r6
 8009d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d86:	bf00      	nop
 8009d88:	0800adb8 	.word	0x0800adb8
 8009d8c:	0800ac6e 	.word	0x0800ac6e
 8009d90:	0800ad5f 	.word	0x0800ad5f

08009d94 <__lshift>:
 8009d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d98:	460c      	mov	r4, r1
 8009d9a:	4607      	mov	r7, r0
 8009d9c:	4691      	mov	r9, r2
 8009d9e:	6923      	ldr	r3, [r4, #16]
 8009da0:	6849      	ldr	r1, [r1, #4]
 8009da2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009da6:	68a3      	ldr	r3, [r4, #8]
 8009da8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009dac:	f108 0601 	add.w	r6, r8, #1
 8009db0:	42b3      	cmp	r3, r6
 8009db2:	db0b      	blt.n	8009dcc <__lshift+0x38>
 8009db4:	4638      	mov	r0, r7
 8009db6:	f7ff fd97 	bl	80098e8 <_Balloc>
 8009dba:	4605      	mov	r5, r0
 8009dbc:	b948      	cbnz	r0, 8009dd2 <__lshift+0x3e>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009dc4:	4b27      	ldr	r3, [pc, #156]	@ (8009e64 <__lshift+0xd0>)
 8009dc6:	4828      	ldr	r0, [pc, #160]	@ (8009e68 <__lshift+0xd4>)
 8009dc8:	f000 fb22 	bl	800a410 <__assert_func>
 8009dcc:	3101      	adds	r1, #1
 8009dce:	005b      	lsls	r3, r3, #1
 8009dd0:	e7ee      	b.n	8009db0 <__lshift+0x1c>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	f100 0114 	add.w	r1, r0, #20
 8009dd8:	f100 0210 	add.w	r2, r0, #16
 8009ddc:	4618      	mov	r0, r3
 8009dde:	4553      	cmp	r3, sl
 8009de0:	db33      	blt.n	8009e4a <__lshift+0xb6>
 8009de2:	6920      	ldr	r0, [r4, #16]
 8009de4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009de8:	f104 0314 	add.w	r3, r4, #20
 8009dec:	f019 091f 	ands.w	r9, r9, #31
 8009df0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009df4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009df8:	d02b      	beq.n	8009e52 <__lshift+0xbe>
 8009dfa:	468a      	mov	sl, r1
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f1c9 0e20 	rsb	lr, r9, #32
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	fa00 f009 	lsl.w	r0, r0, r9
 8009e08:	4310      	orrs	r0, r2
 8009e0a:	f84a 0b04 	str.w	r0, [sl], #4
 8009e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e12:	459c      	cmp	ip, r3
 8009e14:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e18:	d8f3      	bhi.n	8009e02 <__lshift+0x6e>
 8009e1a:	ebac 0304 	sub.w	r3, ip, r4
 8009e1e:	3b15      	subs	r3, #21
 8009e20:	f023 0303 	bic.w	r3, r3, #3
 8009e24:	3304      	adds	r3, #4
 8009e26:	f104 0015 	add.w	r0, r4, #21
 8009e2a:	4584      	cmp	ip, r0
 8009e2c:	bf38      	it	cc
 8009e2e:	2304      	movcc	r3, #4
 8009e30:	50ca      	str	r2, [r1, r3]
 8009e32:	b10a      	cbz	r2, 8009e38 <__lshift+0xa4>
 8009e34:	f108 0602 	add.w	r6, r8, #2
 8009e38:	3e01      	subs	r6, #1
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	612e      	str	r6, [r5, #16]
 8009e40:	f7ff fd92 	bl	8009968 <_Bfree>
 8009e44:	4628      	mov	r0, r5
 8009e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e4e:	3301      	adds	r3, #1
 8009e50:	e7c5      	b.n	8009dde <__lshift+0x4a>
 8009e52:	3904      	subs	r1, #4
 8009e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e58:	459c      	cmp	ip, r3
 8009e5a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e5e:	d8f9      	bhi.n	8009e54 <__lshift+0xc0>
 8009e60:	e7ea      	b.n	8009e38 <__lshift+0xa4>
 8009e62:	bf00      	nop
 8009e64:	0800acdd 	.word	0x0800acdd
 8009e68:	0800ad5f 	.word	0x0800ad5f

08009e6c <__mcmp>:
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	690a      	ldr	r2, [r1, #16]
 8009e70:	6900      	ldr	r0, [r0, #16]
 8009e72:	b530      	push	{r4, r5, lr}
 8009e74:	1a80      	subs	r0, r0, r2
 8009e76:	d10e      	bne.n	8009e96 <__mcmp+0x2a>
 8009e78:	3314      	adds	r3, #20
 8009e7a:	3114      	adds	r1, #20
 8009e7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e8c:	4295      	cmp	r5, r2
 8009e8e:	d003      	beq.n	8009e98 <__mcmp+0x2c>
 8009e90:	d205      	bcs.n	8009e9e <__mcmp+0x32>
 8009e92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e96:	bd30      	pop	{r4, r5, pc}
 8009e98:	42a3      	cmp	r3, r4
 8009e9a:	d3f3      	bcc.n	8009e84 <__mcmp+0x18>
 8009e9c:	e7fb      	b.n	8009e96 <__mcmp+0x2a>
 8009e9e:	2001      	movs	r0, #1
 8009ea0:	e7f9      	b.n	8009e96 <__mcmp+0x2a>
	...

08009ea4 <__mdiff>:
 8009ea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea8:	4689      	mov	r9, r1
 8009eaa:	4606      	mov	r6, r0
 8009eac:	4611      	mov	r1, r2
 8009eae:	4648      	mov	r0, r9
 8009eb0:	4614      	mov	r4, r2
 8009eb2:	f7ff ffdb 	bl	8009e6c <__mcmp>
 8009eb6:	1e05      	subs	r5, r0, #0
 8009eb8:	d112      	bne.n	8009ee0 <__mdiff+0x3c>
 8009eba:	4629      	mov	r1, r5
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	f7ff fd13 	bl	80098e8 <_Balloc>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	b928      	cbnz	r0, 8009ed2 <__mdiff+0x2e>
 8009ec6:	f240 2137 	movw	r1, #567	@ 0x237
 8009eca:	4b3e      	ldr	r3, [pc, #248]	@ (8009fc4 <__mdiff+0x120>)
 8009ecc:	483e      	ldr	r0, [pc, #248]	@ (8009fc8 <__mdiff+0x124>)
 8009ece:	f000 fa9f 	bl	800a410 <__assert_func>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ed8:	4610      	mov	r0, r2
 8009eda:	b003      	add	sp, #12
 8009edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee0:	bfbc      	itt	lt
 8009ee2:	464b      	movlt	r3, r9
 8009ee4:	46a1      	movlt	r9, r4
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009eec:	bfba      	itte	lt
 8009eee:	461c      	movlt	r4, r3
 8009ef0:	2501      	movlt	r5, #1
 8009ef2:	2500      	movge	r5, #0
 8009ef4:	f7ff fcf8 	bl	80098e8 <_Balloc>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	b918      	cbnz	r0, 8009f04 <__mdiff+0x60>
 8009efc:	f240 2145 	movw	r1, #581	@ 0x245
 8009f00:	4b30      	ldr	r3, [pc, #192]	@ (8009fc4 <__mdiff+0x120>)
 8009f02:	e7e3      	b.n	8009ecc <__mdiff+0x28>
 8009f04:	f100 0b14 	add.w	fp, r0, #20
 8009f08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009f0c:	f109 0310 	add.w	r3, r9, #16
 8009f10:	60c5      	str	r5, [r0, #12]
 8009f12:	f04f 0c00 	mov.w	ip, #0
 8009f16:	f109 0514 	add.w	r5, r9, #20
 8009f1a:	46d9      	mov	r9, fp
 8009f1c:	6926      	ldr	r6, [r4, #16]
 8009f1e:	f104 0e14 	add.w	lr, r4, #20
 8009f22:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009f26:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	9b01      	ldr	r3, [sp, #4]
 8009f2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009f32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009f36:	b281      	uxth	r1, r0
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	fa1f f38a 	uxth.w	r3, sl
 8009f3e:	1a5b      	subs	r3, r3, r1
 8009f40:	0c00      	lsrs	r0, r0, #16
 8009f42:	4463      	add	r3, ip
 8009f44:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009f48:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009f52:	4576      	cmp	r6, lr
 8009f54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f58:	f849 3b04 	str.w	r3, [r9], #4
 8009f5c:	d8e6      	bhi.n	8009f2c <__mdiff+0x88>
 8009f5e:	1b33      	subs	r3, r6, r4
 8009f60:	3b15      	subs	r3, #21
 8009f62:	f023 0303 	bic.w	r3, r3, #3
 8009f66:	3415      	adds	r4, #21
 8009f68:	3304      	adds	r3, #4
 8009f6a:	42a6      	cmp	r6, r4
 8009f6c:	bf38      	it	cc
 8009f6e:	2304      	movcc	r3, #4
 8009f70:	441d      	add	r5, r3
 8009f72:	445b      	add	r3, fp
 8009f74:	461e      	mov	r6, r3
 8009f76:	462c      	mov	r4, r5
 8009f78:	4544      	cmp	r4, r8
 8009f7a:	d30e      	bcc.n	8009f9a <__mdiff+0xf6>
 8009f7c:	f108 0103 	add.w	r1, r8, #3
 8009f80:	1b49      	subs	r1, r1, r5
 8009f82:	f021 0103 	bic.w	r1, r1, #3
 8009f86:	3d03      	subs	r5, #3
 8009f88:	45a8      	cmp	r8, r5
 8009f8a:	bf38      	it	cc
 8009f8c:	2100      	movcc	r1, #0
 8009f8e:	440b      	add	r3, r1
 8009f90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f94:	b199      	cbz	r1, 8009fbe <__mdiff+0x11a>
 8009f96:	6117      	str	r7, [r2, #16]
 8009f98:	e79e      	b.n	8009ed8 <__mdiff+0x34>
 8009f9a:	46e6      	mov	lr, ip
 8009f9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009fa0:	fa1f fc81 	uxth.w	ip, r1
 8009fa4:	44f4      	add	ip, lr
 8009fa6:	0c08      	lsrs	r0, r1, #16
 8009fa8:	4471      	add	r1, lr
 8009faa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009fae:	b289      	uxth	r1, r1
 8009fb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009fb4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009fb8:	f846 1b04 	str.w	r1, [r6], #4
 8009fbc:	e7dc      	b.n	8009f78 <__mdiff+0xd4>
 8009fbe:	3f01      	subs	r7, #1
 8009fc0:	e7e6      	b.n	8009f90 <__mdiff+0xec>
 8009fc2:	bf00      	nop
 8009fc4:	0800acdd 	.word	0x0800acdd
 8009fc8:	0800ad5f 	.word	0x0800ad5f

08009fcc <__ulp>:
 8009fcc:	4b0e      	ldr	r3, [pc, #56]	@ (800a008 <__ulp+0x3c>)
 8009fce:	400b      	ands	r3, r1
 8009fd0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	dc08      	bgt.n	8009fea <__ulp+0x1e>
 8009fd8:	425b      	negs	r3, r3
 8009fda:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009fde:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009fe2:	da04      	bge.n	8009fee <__ulp+0x22>
 8009fe4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009fe8:	4113      	asrs	r3, r2
 8009fea:	2200      	movs	r2, #0
 8009fec:	e008      	b.n	800a000 <__ulp+0x34>
 8009fee:	f1a2 0314 	sub.w	r3, r2, #20
 8009ff2:	2b1e      	cmp	r3, #30
 8009ff4:	bfd6      	itet	le
 8009ff6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009ffa:	2201      	movgt	r2, #1
 8009ffc:	40da      	lsrle	r2, r3
 8009ffe:	2300      	movs	r3, #0
 800a000:	4619      	mov	r1, r3
 800a002:	4610      	mov	r0, r2
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	7ff00000 	.word	0x7ff00000

0800a00c <__b2d>:
 800a00c:	6902      	ldr	r2, [r0, #16]
 800a00e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a010:	f100 0614 	add.w	r6, r0, #20
 800a014:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a018:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a01c:	4f1e      	ldr	r7, [pc, #120]	@ (800a098 <__b2d+0x8c>)
 800a01e:	4620      	mov	r0, r4
 800a020:	f7ff fd54 	bl	8009acc <__hi0bits>
 800a024:	4603      	mov	r3, r0
 800a026:	f1c0 0020 	rsb	r0, r0, #32
 800a02a:	2b0a      	cmp	r3, #10
 800a02c:	f1a2 0504 	sub.w	r5, r2, #4
 800a030:	6008      	str	r0, [r1, #0]
 800a032:	dc12      	bgt.n	800a05a <__b2d+0x4e>
 800a034:	42ae      	cmp	r6, r5
 800a036:	bf2c      	ite	cs
 800a038:	2200      	movcs	r2, #0
 800a03a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a03e:	f1c3 0c0b 	rsb	ip, r3, #11
 800a042:	3315      	adds	r3, #21
 800a044:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a048:	fa04 f303 	lsl.w	r3, r4, r3
 800a04c:	fa22 f20c 	lsr.w	r2, r2, ip
 800a050:	ea4e 0107 	orr.w	r1, lr, r7
 800a054:	431a      	orrs	r2, r3
 800a056:	4610      	mov	r0, r2
 800a058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a05a:	42ae      	cmp	r6, r5
 800a05c:	bf36      	itet	cc
 800a05e:	f1a2 0508 	subcc.w	r5, r2, #8
 800a062:	2200      	movcs	r2, #0
 800a064:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a068:	3b0b      	subs	r3, #11
 800a06a:	d012      	beq.n	800a092 <__b2d+0x86>
 800a06c:	f1c3 0720 	rsb	r7, r3, #32
 800a070:	fa22 f107 	lsr.w	r1, r2, r7
 800a074:	409c      	lsls	r4, r3
 800a076:	430c      	orrs	r4, r1
 800a078:	42b5      	cmp	r5, r6
 800a07a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a07e:	bf94      	ite	ls
 800a080:	2400      	movls	r4, #0
 800a082:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a086:	409a      	lsls	r2, r3
 800a088:	40fc      	lsrs	r4, r7
 800a08a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a08e:	4322      	orrs	r2, r4
 800a090:	e7e1      	b.n	800a056 <__b2d+0x4a>
 800a092:	ea44 0107 	orr.w	r1, r4, r7
 800a096:	e7de      	b.n	800a056 <__b2d+0x4a>
 800a098:	3ff00000 	.word	0x3ff00000

0800a09c <__d2b>:
 800a09c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	4690      	mov	r8, r2
 800a0a4:	4699      	mov	r9, r3
 800a0a6:	9e08      	ldr	r6, [sp, #32]
 800a0a8:	f7ff fc1e 	bl	80098e8 <_Balloc>
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	b930      	cbnz	r0, 800a0be <__d2b+0x22>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	f240 310f 	movw	r1, #783	@ 0x30f
 800a0b6:	4b23      	ldr	r3, [pc, #140]	@ (800a144 <__d2b+0xa8>)
 800a0b8:	4823      	ldr	r0, [pc, #140]	@ (800a148 <__d2b+0xac>)
 800a0ba:	f000 f9a9 	bl	800a410 <__assert_func>
 800a0be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a0c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0c6:	b10d      	cbz	r5, 800a0cc <__d2b+0x30>
 800a0c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	f1b8 0300 	subs.w	r3, r8, #0
 800a0d2:	d024      	beq.n	800a11e <__d2b+0x82>
 800a0d4:	4668      	mov	r0, sp
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	f7ff fd17 	bl	8009b0a <__lo0bits>
 800a0dc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a0e0:	b1d8      	cbz	r0, 800a11a <__d2b+0x7e>
 800a0e2:	f1c0 0320 	rsb	r3, r0, #32
 800a0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ea:	430b      	orrs	r3, r1
 800a0ec:	40c2      	lsrs	r2, r0
 800a0ee:	6163      	str	r3, [r4, #20]
 800a0f0:	9201      	str	r2, [sp, #4]
 800a0f2:	9b01      	ldr	r3, [sp, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	bf0c      	ite	eq
 800a0f8:	2201      	moveq	r2, #1
 800a0fa:	2202      	movne	r2, #2
 800a0fc:	61a3      	str	r3, [r4, #24]
 800a0fe:	6122      	str	r2, [r4, #16]
 800a100:	b1ad      	cbz	r5, 800a12e <__d2b+0x92>
 800a102:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a106:	4405      	add	r5, r0
 800a108:	6035      	str	r5, [r6, #0]
 800a10a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a110:	6018      	str	r0, [r3, #0]
 800a112:	4620      	mov	r0, r4
 800a114:	b002      	add	sp, #8
 800a116:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a11a:	6161      	str	r1, [r4, #20]
 800a11c:	e7e9      	b.n	800a0f2 <__d2b+0x56>
 800a11e:	a801      	add	r0, sp, #4
 800a120:	f7ff fcf3 	bl	8009b0a <__lo0bits>
 800a124:	9b01      	ldr	r3, [sp, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	6163      	str	r3, [r4, #20]
 800a12a:	3020      	adds	r0, #32
 800a12c:	e7e7      	b.n	800a0fe <__d2b+0x62>
 800a12e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a132:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a136:	6030      	str	r0, [r6, #0]
 800a138:	6918      	ldr	r0, [r3, #16]
 800a13a:	f7ff fcc7 	bl	8009acc <__hi0bits>
 800a13e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a142:	e7e4      	b.n	800a10e <__d2b+0x72>
 800a144:	0800acdd 	.word	0x0800acdd
 800a148:	0800ad5f 	.word	0x0800ad5f

0800a14c <__ratio>:
 800a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a150:	b085      	sub	sp, #20
 800a152:	e9cd 1000 	strd	r1, r0, [sp]
 800a156:	a902      	add	r1, sp, #8
 800a158:	f7ff ff58 	bl	800a00c <__b2d>
 800a15c:	468b      	mov	fp, r1
 800a15e:	4606      	mov	r6, r0
 800a160:	460f      	mov	r7, r1
 800a162:	9800      	ldr	r0, [sp, #0]
 800a164:	a903      	add	r1, sp, #12
 800a166:	f7ff ff51 	bl	800a00c <__b2d>
 800a16a:	460d      	mov	r5, r1
 800a16c:	9b01      	ldr	r3, [sp, #4]
 800a16e:	4689      	mov	r9, r1
 800a170:	6919      	ldr	r1, [r3, #16]
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	4604      	mov	r4, r0
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	4630      	mov	r0, r6
 800a17a:	1ac9      	subs	r1, r1, r3
 800a17c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a180:	1a9b      	subs	r3, r3, r2
 800a182:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a186:	2b00      	cmp	r3, #0
 800a188:	bfcd      	iteet	gt
 800a18a:	463a      	movgt	r2, r7
 800a18c:	462a      	movle	r2, r5
 800a18e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a192:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a196:	bfd8      	it	le
 800a198:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a19c:	464b      	mov	r3, r9
 800a19e:	4622      	mov	r2, r4
 800a1a0:	4659      	mov	r1, fp
 800a1a2:	f7f6 fac3 	bl	800072c <__aeabi_ddiv>
 800a1a6:	b005      	add	sp, #20
 800a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a1ac <__copybits>:
 800a1ac:	3901      	subs	r1, #1
 800a1ae:	b570      	push	{r4, r5, r6, lr}
 800a1b0:	1149      	asrs	r1, r1, #5
 800a1b2:	6914      	ldr	r4, [r2, #16]
 800a1b4:	3101      	adds	r1, #1
 800a1b6:	f102 0314 	add.w	r3, r2, #20
 800a1ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a1be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a1c2:	1f05      	subs	r5, r0, #4
 800a1c4:	42a3      	cmp	r3, r4
 800a1c6:	d30c      	bcc.n	800a1e2 <__copybits+0x36>
 800a1c8:	1aa3      	subs	r3, r4, r2
 800a1ca:	3b11      	subs	r3, #17
 800a1cc:	f023 0303 	bic.w	r3, r3, #3
 800a1d0:	3211      	adds	r2, #17
 800a1d2:	42a2      	cmp	r2, r4
 800a1d4:	bf88      	it	hi
 800a1d6:	2300      	movhi	r3, #0
 800a1d8:	4418      	add	r0, r3
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4288      	cmp	r0, r1
 800a1de:	d305      	bcc.n	800a1ec <__copybits+0x40>
 800a1e0:	bd70      	pop	{r4, r5, r6, pc}
 800a1e2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1e6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1ea:	e7eb      	b.n	800a1c4 <__copybits+0x18>
 800a1ec:	f840 3b04 	str.w	r3, [r0], #4
 800a1f0:	e7f4      	b.n	800a1dc <__copybits+0x30>

0800a1f2 <__any_on>:
 800a1f2:	f100 0214 	add.w	r2, r0, #20
 800a1f6:	6900      	ldr	r0, [r0, #16]
 800a1f8:	114b      	asrs	r3, r1, #5
 800a1fa:	4298      	cmp	r0, r3
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	db11      	blt.n	800a224 <__any_on+0x32>
 800a200:	dd0a      	ble.n	800a218 <__any_on+0x26>
 800a202:	f011 011f 	ands.w	r1, r1, #31
 800a206:	d007      	beq.n	800a218 <__any_on+0x26>
 800a208:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a20c:	fa24 f001 	lsr.w	r0, r4, r1
 800a210:	fa00 f101 	lsl.w	r1, r0, r1
 800a214:	428c      	cmp	r4, r1
 800a216:	d10b      	bne.n	800a230 <__any_on+0x3e>
 800a218:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d803      	bhi.n	800a228 <__any_on+0x36>
 800a220:	2000      	movs	r0, #0
 800a222:	bd10      	pop	{r4, pc}
 800a224:	4603      	mov	r3, r0
 800a226:	e7f7      	b.n	800a218 <__any_on+0x26>
 800a228:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a22c:	2900      	cmp	r1, #0
 800a22e:	d0f5      	beq.n	800a21c <__any_on+0x2a>
 800a230:	2001      	movs	r0, #1
 800a232:	e7f6      	b.n	800a222 <__any_on+0x30>

0800a234 <__sread>:
 800a234:	b510      	push	{r4, lr}
 800a236:	460c      	mov	r4, r1
 800a238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a23c:	f000 f8b4 	bl	800a3a8 <_read_r>
 800a240:	2800      	cmp	r0, #0
 800a242:	bfab      	itete	ge
 800a244:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a246:	89a3      	ldrhlt	r3, [r4, #12]
 800a248:	181b      	addge	r3, r3, r0
 800a24a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a24e:	bfac      	ite	ge
 800a250:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a252:	81a3      	strhlt	r3, [r4, #12]
 800a254:	bd10      	pop	{r4, pc}

0800a256 <__swrite>:
 800a256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a25a:	461f      	mov	r7, r3
 800a25c:	898b      	ldrh	r3, [r1, #12]
 800a25e:	4605      	mov	r5, r0
 800a260:	05db      	lsls	r3, r3, #23
 800a262:	460c      	mov	r4, r1
 800a264:	4616      	mov	r6, r2
 800a266:	d505      	bpl.n	800a274 <__swrite+0x1e>
 800a268:	2302      	movs	r3, #2
 800a26a:	2200      	movs	r2, #0
 800a26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a270:	f000 f888 	bl	800a384 <_lseek_r>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	4632      	mov	r2, r6
 800a278:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a27c:	81a3      	strh	r3, [r4, #12]
 800a27e:	4628      	mov	r0, r5
 800a280:	463b      	mov	r3, r7
 800a282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a28a:	f000 b8af 	b.w	800a3ec <_write_r>

0800a28e <__sseek>:
 800a28e:	b510      	push	{r4, lr}
 800a290:	460c      	mov	r4, r1
 800a292:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a296:	f000 f875 	bl	800a384 <_lseek_r>
 800a29a:	1c43      	adds	r3, r0, #1
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	bf15      	itete	ne
 800a2a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a2a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a2a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a2aa:	81a3      	strheq	r3, [r4, #12]
 800a2ac:	bf18      	it	ne
 800a2ae:	81a3      	strhne	r3, [r4, #12]
 800a2b0:	bd10      	pop	{r4, pc}

0800a2b2 <__sclose>:
 800a2b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b6:	f000 b855 	b.w	800a364 <_close_r>

0800a2ba <_realloc_r>:
 800a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2be:	4680      	mov	r8, r0
 800a2c0:	4615      	mov	r5, r2
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	b921      	cbnz	r1, 800a2d0 <_realloc_r+0x16>
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2cc:	f7ff b9c6 	b.w	800965c <_malloc_r>
 800a2d0:	b92a      	cbnz	r2, 800a2de <_realloc_r+0x24>
 800a2d2:	f000 f8cf 	bl	800a474 <_free_r>
 800a2d6:	2400      	movs	r4, #0
 800a2d8:	4620      	mov	r0, r4
 800a2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2de:	f000 f911 	bl	800a504 <_malloc_usable_size_r>
 800a2e2:	4285      	cmp	r5, r0
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	d802      	bhi.n	800a2ee <_realloc_r+0x34>
 800a2e8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a2ec:	d8f4      	bhi.n	800a2d8 <_realloc_r+0x1e>
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	f7ff f9b3 	bl	800965c <_malloc_r>
 800a2f6:	4607      	mov	r7, r0
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	d0ec      	beq.n	800a2d6 <_realloc_r+0x1c>
 800a2fc:	42b5      	cmp	r5, r6
 800a2fe:	462a      	mov	r2, r5
 800a300:	4621      	mov	r1, r4
 800a302:	bf28      	it	cs
 800a304:	4632      	movcs	r2, r6
 800a306:	f7fd fe84 	bl	8008012 <memcpy>
 800a30a:	4621      	mov	r1, r4
 800a30c:	4640      	mov	r0, r8
 800a30e:	f000 f8b1 	bl	800a474 <_free_r>
 800a312:	463c      	mov	r4, r7
 800a314:	e7e0      	b.n	800a2d8 <_realloc_r+0x1e>

0800a316 <__ascii_wctomb>:
 800a316:	4603      	mov	r3, r0
 800a318:	4608      	mov	r0, r1
 800a31a:	b141      	cbz	r1, 800a32e <__ascii_wctomb+0x18>
 800a31c:	2aff      	cmp	r2, #255	@ 0xff
 800a31e:	d904      	bls.n	800a32a <__ascii_wctomb+0x14>
 800a320:	228a      	movs	r2, #138	@ 0x8a
 800a322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	4770      	bx	lr
 800a32a:	2001      	movs	r0, #1
 800a32c:	700a      	strb	r2, [r1, #0]
 800a32e:	4770      	bx	lr

0800a330 <memmove>:
 800a330:	4288      	cmp	r0, r1
 800a332:	b510      	push	{r4, lr}
 800a334:	eb01 0402 	add.w	r4, r1, r2
 800a338:	d902      	bls.n	800a340 <memmove+0x10>
 800a33a:	4284      	cmp	r4, r0
 800a33c:	4623      	mov	r3, r4
 800a33e:	d807      	bhi.n	800a350 <memmove+0x20>
 800a340:	1e43      	subs	r3, r0, #1
 800a342:	42a1      	cmp	r1, r4
 800a344:	d008      	beq.n	800a358 <memmove+0x28>
 800a346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a34a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a34e:	e7f8      	b.n	800a342 <memmove+0x12>
 800a350:	4601      	mov	r1, r0
 800a352:	4402      	add	r2, r0
 800a354:	428a      	cmp	r2, r1
 800a356:	d100      	bne.n	800a35a <memmove+0x2a>
 800a358:	bd10      	pop	{r4, pc}
 800a35a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a35e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a362:	e7f7      	b.n	800a354 <memmove+0x24>

0800a364 <_close_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	2300      	movs	r3, #0
 800a368:	4d05      	ldr	r5, [pc, #20]	@ (800a380 <_close_r+0x1c>)
 800a36a:	4604      	mov	r4, r0
 800a36c:	4608      	mov	r0, r1
 800a36e:	602b      	str	r3, [r5, #0]
 800a370:	f7f7 fb17 	bl	80019a2 <_close>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_close_r+0x1a>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_close_r+0x1a>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	20000528 	.word	0x20000528

0800a384 <_lseek_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4604      	mov	r4, r0
 800a388:	4608      	mov	r0, r1
 800a38a:	4611      	mov	r1, r2
 800a38c:	2200      	movs	r2, #0
 800a38e:	4d05      	ldr	r5, [pc, #20]	@ (800a3a4 <_lseek_r+0x20>)
 800a390:	602a      	str	r2, [r5, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	f7f7 fb29 	bl	80019ea <_lseek>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_lseek_r+0x1e>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_lseek_r+0x1e>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	20000528 	.word	0x20000528

0800a3a8 <_read_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	4608      	mov	r0, r1
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	4d05      	ldr	r5, [pc, #20]	@ (800a3c8 <_read_r+0x20>)
 800a3b4:	602a      	str	r2, [r5, #0]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f7f7 faba 	bl	8001930 <_read>
 800a3bc:	1c43      	adds	r3, r0, #1
 800a3be:	d102      	bne.n	800a3c6 <_read_r+0x1e>
 800a3c0:	682b      	ldr	r3, [r5, #0]
 800a3c2:	b103      	cbz	r3, 800a3c6 <_read_r+0x1e>
 800a3c4:	6023      	str	r3, [r4, #0]
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}
 800a3c8:	20000528 	.word	0x20000528

0800a3cc <_sbrk_r>:
 800a3cc:	b538      	push	{r3, r4, r5, lr}
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	4d05      	ldr	r5, [pc, #20]	@ (800a3e8 <_sbrk_r+0x1c>)
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	4608      	mov	r0, r1
 800a3d6:	602b      	str	r3, [r5, #0]
 800a3d8:	f7f7 fb14 	bl	8001a04 <_sbrk>
 800a3dc:	1c43      	adds	r3, r0, #1
 800a3de:	d102      	bne.n	800a3e6 <_sbrk_r+0x1a>
 800a3e0:	682b      	ldr	r3, [r5, #0]
 800a3e2:	b103      	cbz	r3, 800a3e6 <_sbrk_r+0x1a>
 800a3e4:	6023      	str	r3, [r4, #0]
 800a3e6:	bd38      	pop	{r3, r4, r5, pc}
 800a3e8:	20000528 	.word	0x20000528

0800a3ec <_write_r>:
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	4d05      	ldr	r5, [pc, #20]	@ (800a40c <_write_r+0x20>)
 800a3f8:	602a      	str	r2, [r5, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	f7f7 fab5 	bl	800196a <_write>
 800a400:	1c43      	adds	r3, r0, #1
 800a402:	d102      	bne.n	800a40a <_write_r+0x1e>
 800a404:	682b      	ldr	r3, [r5, #0]
 800a406:	b103      	cbz	r3, 800a40a <_write_r+0x1e>
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	bd38      	pop	{r3, r4, r5, pc}
 800a40c:	20000528 	.word	0x20000528

0800a410 <__assert_func>:
 800a410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a412:	4614      	mov	r4, r2
 800a414:	461a      	mov	r2, r3
 800a416:	4b09      	ldr	r3, [pc, #36]	@ (800a43c <__assert_func+0x2c>)
 800a418:	4605      	mov	r5, r0
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68d8      	ldr	r0, [r3, #12]
 800a41e:	b954      	cbnz	r4, 800a436 <__assert_func+0x26>
 800a420:	4b07      	ldr	r3, [pc, #28]	@ (800a440 <__assert_func+0x30>)
 800a422:	461c      	mov	r4, r3
 800a424:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a428:	9100      	str	r1, [sp, #0]
 800a42a:	462b      	mov	r3, r5
 800a42c:	4905      	ldr	r1, [pc, #20]	@ (800a444 <__assert_func+0x34>)
 800a42e:	f000 f871 	bl	800a514 <fiprintf>
 800a432:	f000 f881 	bl	800a538 <abort>
 800a436:	4b04      	ldr	r3, [pc, #16]	@ (800a448 <__assert_func+0x38>)
 800a438:	e7f4      	b.n	800a424 <__assert_func+0x14>
 800a43a:	bf00      	nop
 800a43c:	200001a0 	.word	0x200001a0
 800a440:	0800aef3 	.word	0x0800aef3
 800a444:	0800aec5 	.word	0x0800aec5
 800a448:	0800aeb8 	.word	0x0800aeb8

0800a44c <_calloc_r>:
 800a44c:	b570      	push	{r4, r5, r6, lr}
 800a44e:	fba1 5402 	umull	r5, r4, r1, r2
 800a452:	b93c      	cbnz	r4, 800a464 <_calloc_r+0x18>
 800a454:	4629      	mov	r1, r5
 800a456:	f7ff f901 	bl	800965c <_malloc_r>
 800a45a:	4606      	mov	r6, r0
 800a45c:	b928      	cbnz	r0, 800a46a <_calloc_r+0x1e>
 800a45e:	2600      	movs	r6, #0
 800a460:	4630      	mov	r0, r6
 800a462:	bd70      	pop	{r4, r5, r6, pc}
 800a464:	220c      	movs	r2, #12
 800a466:	6002      	str	r2, [r0, #0]
 800a468:	e7f9      	b.n	800a45e <_calloc_r+0x12>
 800a46a:	462a      	mov	r2, r5
 800a46c:	4621      	mov	r1, r4
 800a46e:	f7fd fd89 	bl	8007f84 <memset>
 800a472:	e7f5      	b.n	800a460 <_calloc_r+0x14>

0800a474 <_free_r>:
 800a474:	b538      	push	{r3, r4, r5, lr}
 800a476:	4605      	mov	r5, r0
 800a478:	2900      	cmp	r1, #0
 800a47a:	d040      	beq.n	800a4fe <_free_r+0x8a>
 800a47c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a480:	1f0c      	subs	r4, r1, #4
 800a482:	2b00      	cmp	r3, #0
 800a484:	bfb8      	it	lt
 800a486:	18e4      	addlt	r4, r4, r3
 800a488:	f7ff fa22 	bl	80098d0 <__malloc_lock>
 800a48c:	4a1c      	ldr	r2, [pc, #112]	@ (800a500 <_free_r+0x8c>)
 800a48e:	6813      	ldr	r3, [r2, #0]
 800a490:	b933      	cbnz	r3, 800a4a0 <_free_r+0x2c>
 800a492:	6063      	str	r3, [r4, #4]
 800a494:	6014      	str	r4, [r2, #0]
 800a496:	4628      	mov	r0, r5
 800a498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a49c:	f7ff ba1e 	b.w	80098dc <__malloc_unlock>
 800a4a0:	42a3      	cmp	r3, r4
 800a4a2:	d908      	bls.n	800a4b6 <_free_r+0x42>
 800a4a4:	6820      	ldr	r0, [r4, #0]
 800a4a6:	1821      	adds	r1, r4, r0
 800a4a8:	428b      	cmp	r3, r1
 800a4aa:	bf01      	itttt	eq
 800a4ac:	6819      	ldreq	r1, [r3, #0]
 800a4ae:	685b      	ldreq	r3, [r3, #4]
 800a4b0:	1809      	addeq	r1, r1, r0
 800a4b2:	6021      	streq	r1, [r4, #0]
 800a4b4:	e7ed      	b.n	800a492 <_free_r+0x1e>
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	b10b      	cbz	r3, 800a4c0 <_free_r+0x4c>
 800a4bc:	42a3      	cmp	r3, r4
 800a4be:	d9fa      	bls.n	800a4b6 <_free_r+0x42>
 800a4c0:	6811      	ldr	r1, [r2, #0]
 800a4c2:	1850      	adds	r0, r2, r1
 800a4c4:	42a0      	cmp	r0, r4
 800a4c6:	d10b      	bne.n	800a4e0 <_free_r+0x6c>
 800a4c8:	6820      	ldr	r0, [r4, #0]
 800a4ca:	4401      	add	r1, r0
 800a4cc:	1850      	adds	r0, r2, r1
 800a4ce:	4283      	cmp	r3, r0
 800a4d0:	6011      	str	r1, [r2, #0]
 800a4d2:	d1e0      	bne.n	800a496 <_free_r+0x22>
 800a4d4:	6818      	ldr	r0, [r3, #0]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	4408      	add	r0, r1
 800a4da:	6010      	str	r0, [r2, #0]
 800a4dc:	6053      	str	r3, [r2, #4]
 800a4de:	e7da      	b.n	800a496 <_free_r+0x22>
 800a4e0:	d902      	bls.n	800a4e8 <_free_r+0x74>
 800a4e2:	230c      	movs	r3, #12
 800a4e4:	602b      	str	r3, [r5, #0]
 800a4e6:	e7d6      	b.n	800a496 <_free_r+0x22>
 800a4e8:	6820      	ldr	r0, [r4, #0]
 800a4ea:	1821      	adds	r1, r4, r0
 800a4ec:	428b      	cmp	r3, r1
 800a4ee:	bf01      	itttt	eq
 800a4f0:	6819      	ldreq	r1, [r3, #0]
 800a4f2:	685b      	ldreq	r3, [r3, #4]
 800a4f4:	1809      	addeq	r1, r1, r0
 800a4f6:	6021      	streq	r1, [r4, #0]
 800a4f8:	6063      	str	r3, [r4, #4]
 800a4fa:	6054      	str	r4, [r2, #4]
 800a4fc:	e7cb      	b.n	800a496 <_free_r+0x22>
 800a4fe:	bd38      	pop	{r3, r4, r5, pc}
 800a500:	20000524 	.word	0x20000524

0800a504 <_malloc_usable_size_r>:
 800a504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a508:	1f18      	subs	r0, r3, #4
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	bfbc      	itt	lt
 800a50e:	580b      	ldrlt	r3, [r1, r0]
 800a510:	18c0      	addlt	r0, r0, r3
 800a512:	4770      	bx	lr

0800a514 <fiprintf>:
 800a514:	b40e      	push	{r1, r2, r3}
 800a516:	b503      	push	{r0, r1, lr}
 800a518:	4601      	mov	r1, r0
 800a51a:	ab03      	add	r3, sp, #12
 800a51c:	4805      	ldr	r0, [pc, #20]	@ (800a534 <fiprintf+0x20>)
 800a51e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a522:	6800      	ldr	r0, [r0, #0]
 800a524:	9301      	str	r3, [sp, #4]
 800a526:	f000 f835 	bl	800a594 <_vfiprintf_r>
 800a52a:	b002      	add	sp, #8
 800a52c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a530:	b003      	add	sp, #12
 800a532:	4770      	bx	lr
 800a534:	200001a0 	.word	0x200001a0

0800a538 <abort>:
 800a538:	2006      	movs	r0, #6
 800a53a:	b508      	push	{r3, lr}
 800a53c:	f000 fa82 	bl	800aa44 <raise>
 800a540:	2001      	movs	r0, #1
 800a542:	f7f7 f9ea 	bl	800191a <_exit>

0800a546 <__sfputc_r>:
 800a546:	6893      	ldr	r3, [r2, #8]
 800a548:	b410      	push	{r4}
 800a54a:	3b01      	subs	r3, #1
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	6093      	str	r3, [r2, #8]
 800a550:	da07      	bge.n	800a562 <__sfputc_r+0x1c>
 800a552:	6994      	ldr	r4, [r2, #24]
 800a554:	42a3      	cmp	r3, r4
 800a556:	db01      	blt.n	800a55c <__sfputc_r+0x16>
 800a558:	290a      	cmp	r1, #10
 800a55a:	d102      	bne.n	800a562 <__sfputc_r+0x1c>
 800a55c:	bc10      	pop	{r4}
 800a55e:	f000 b931 	b.w	800a7c4 <__swbuf_r>
 800a562:	6813      	ldr	r3, [r2, #0]
 800a564:	1c58      	adds	r0, r3, #1
 800a566:	6010      	str	r0, [r2, #0]
 800a568:	7019      	strb	r1, [r3, #0]
 800a56a:	4608      	mov	r0, r1
 800a56c:	bc10      	pop	{r4}
 800a56e:	4770      	bx	lr

0800a570 <__sfputs_r>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	4606      	mov	r6, r0
 800a574:	460f      	mov	r7, r1
 800a576:	4614      	mov	r4, r2
 800a578:	18d5      	adds	r5, r2, r3
 800a57a:	42ac      	cmp	r4, r5
 800a57c:	d101      	bne.n	800a582 <__sfputs_r+0x12>
 800a57e:	2000      	movs	r0, #0
 800a580:	e007      	b.n	800a592 <__sfputs_r+0x22>
 800a582:	463a      	mov	r2, r7
 800a584:	4630      	mov	r0, r6
 800a586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a58a:	f7ff ffdc 	bl	800a546 <__sfputc_r>
 800a58e:	1c43      	adds	r3, r0, #1
 800a590:	d1f3      	bne.n	800a57a <__sfputs_r+0xa>
 800a592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a594 <_vfiprintf_r>:
 800a594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a598:	460d      	mov	r5, r1
 800a59a:	4614      	mov	r4, r2
 800a59c:	4698      	mov	r8, r3
 800a59e:	4606      	mov	r6, r0
 800a5a0:	b09d      	sub	sp, #116	@ 0x74
 800a5a2:	b118      	cbz	r0, 800a5ac <_vfiprintf_r+0x18>
 800a5a4:	6a03      	ldr	r3, [r0, #32]
 800a5a6:	b90b      	cbnz	r3, 800a5ac <_vfiprintf_r+0x18>
 800a5a8:	f7fc fe28 	bl	80071fc <__sinit>
 800a5ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5ae:	07d9      	lsls	r1, r3, #31
 800a5b0:	d405      	bmi.n	800a5be <_vfiprintf_r+0x2a>
 800a5b2:	89ab      	ldrh	r3, [r5, #12]
 800a5b4:	059a      	lsls	r2, r3, #22
 800a5b6:	d402      	bmi.n	800a5be <_vfiprintf_r+0x2a>
 800a5b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5ba:	f7fd fd1a 	bl	8007ff2 <__retarget_lock_acquire_recursive>
 800a5be:	89ab      	ldrh	r3, [r5, #12]
 800a5c0:	071b      	lsls	r3, r3, #28
 800a5c2:	d501      	bpl.n	800a5c8 <_vfiprintf_r+0x34>
 800a5c4:	692b      	ldr	r3, [r5, #16]
 800a5c6:	b99b      	cbnz	r3, 800a5f0 <_vfiprintf_r+0x5c>
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f000 f938 	bl	800a840 <__swsetup_r>
 800a5d0:	b170      	cbz	r0, 800a5f0 <_vfiprintf_r+0x5c>
 800a5d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5d4:	07dc      	lsls	r4, r3, #31
 800a5d6:	d504      	bpl.n	800a5e2 <_vfiprintf_r+0x4e>
 800a5d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5dc:	b01d      	add	sp, #116	@ 0x74
 800a5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e2:	89ab      	ldrh	r3, [r5, #12]
 800a5e4:	0598      	lsls	r0, r3, #22
 800a5e6:	d4f7      	bmi.n	800a5d8 <_vfiprintf_r+0x44>
 800a5e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5ea:	f7fd fd03 	bl	8007ff4 <__retarget_lock_release_recursive>
 800a5ee:	e7f3      	b.n	800a5d8 <_vfiprintf_r+0x44>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5f4:	2320      	movs	r3, #32
 800a5f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5fa:	2330      	movs	r3, #48	@ 0x30
 800a5fc:	f04f 0901 	mov.w	r9, #1
 800a600:	f8cd 800c 	str.w	r8, [sp, #12]
 800a604:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a7b0 <_vfiprintf_r+0x21c>
 800a608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a60c:	4623      	mov	r3, r4
 800a60e:	469a      	mov	sl, r3
 800a610:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a614:	b10a      	cbz	r2, 800a61a <_vfiprintf_r+0x86>
 800a616:	2a25      	cmp	r2, #37	@ 0x25
 800a618:	d1f9      	bne.n	800a60e <_vfiprintf_r+0x7a>
 800a61a:	ebba 0b04 	subs.w	fp, sl, r4
 800a61e:	d00b      	beq.n	800a638 <_vfiprintf_r+0xa4>
 800a620:	465b      	mov	r3, fp
 800a622:	4622      	mov	r2, r4
 800a624:	4629      	mov	r1, r5
 800a626:	4630      	mov	r0, r6
 800a628:	f7ff ffa2 	bl	800a570 <__sfputs_r>
 800a62c:	3001      	adds	r0, #1
 800a62e:	f000 80a7 	beq.w	800a780 <_vfiprintf_r+0x1ec>
 800a632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a634:	445a      	add	r2, fp
 800a636:	9209      	str	r2, [sp, #36]	@ 0x24
 800a638:	f89a 3000 	ldrb.w	r3, [sl]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 809f 	beq.w	800a780 <_vfiprintf_r+0x1ec>
 800a642:	2300      	movs	r3, #0
 800a644:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a64c:	f10a 0a01 	add.w	sl, sl, #1
 800a650:	9304      	str	r3, [sp, #16]
 800a652:	9307      	str	r3, [sp, #28]
 800a654:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a658:	931a      	str	r3, [sp, #104]	@ 0x68
 800a65a:	4654      	mov	r4, sl
 800a65c:	2205      	movs	r2, #5
 800a65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a662:	4853      	ldr	r0, [pc, #332]	@ (800a7b0 <_vfiprintf_r+0x21c>)
 800a664:	f7fd fcc7 	bl	8007ff6 <memchr>
 800a668:	9a04      	ldr	r2, [sp, #16]
 800a66a:	b9d8      	cbnz	r0, 800a6a4 <_vfiprintf_r+0x110>
 800a66c:	06d1      	lsls	r1, r2, #27
 800a66e:	bf44      	itt	mi
 800a670:	2320      	movmi	r3, #32
 800a672:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a676:	0713      	lsls	r3, r2, #28
 800a678:	bf44      	itt	mi
 800a67a:	232b      	movmi	r3, #43	@ 0x2b
 800a67c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a680:	f89a 3000 	ldrb.w	r3, [sl]
 800a684:	2b2a      	cmp	r3, #42	@ 0x2a
 800a686:	d015      	beq.n	800a6b4 <_vfiprintf_r+0x120>
 800a688:	4654      	mov	r4, sl
 800a68a:	2000      	movs	r0, #0
 800a68c:	f04f 0c0a 	mov.w	ip, #10
 800a690:	9a07      	ldr	r2, [sp, #28]
 800a692:	4621      	mov	r1, r4
 800a694:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a698:	3b30      	subs	r3, #48	@ 0x30
 800a69a:	2b09      	cmp	r3, #9
 800a69c:	d94b      	bls.n	800a736 <_vfiprintf_r+0x1a2>
 800a69e:	b1b0      	cbz	r0, 800a6ce <_vfiprintf_r+0x13a>
 800a6a0:	9207      	str	r2, [sp, #28]
 800a6a2:	e014      	b.n	800a6ce <_vfiprintf_r+0x13a>
 800a6a4:	eba0 0308 	sub.w	r3, r0, r8
 800a6a8:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	46a2      	mov	sl, r4
 800a6b0:	9304      	str	r3, [sp, #16]
 800a6b2:	e7d2      	b.n	800a65a <_vfiprintf_r+0xc6>
 800a6b4:	9b03      	ldr	r3, [sp, #12]
 800a6b6:	1d19      	adds	r1, r3, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	9103      	str	r1, [sp, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	bfbb      	ittet	lt
 800a6c0:	425b      	neglt	r3, r3
 800a6c2:	f042 0202 	orrlt.w	r2, r2, #2
 800a6c6:	9307      	strge	r3, [sp, #28]
 800a6c8:	9307      	strlt	r3, [sp, #28]
 800a6ca:	bfb8      	it	lt
 800a6cc:	9204      	strlt	r2, [sp, #16]
 800a6ce:	7823      	ldrb	r3, [r4, #0]
 800a6d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6d2:	d10a      	bne.n	800a6ea <_vfiprintf_r+0x156>
 800a6d4:	7863      	ldrb	r3, [r4, #1]
 800a6d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6d8:	d132      	bne.n	800a740 <_vfiprintf_r+0x1ac>
 800a6da:	9b03      	ldr	r3, [sp, #12]
 800a6dc:	3402      	adds	r4, #2
 800a6de:	1d1a      	adds	r2, r3, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	9203      	str	r2, [sp, #12]
 800a6e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6e8:	9305      	str	r3, [sp, #20]
 800a6ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a7b4 <_vfiprintf_r+0x220>
 800a6ee:	2203      	movs	r2, #3
 800a6f0:	4650      	mov	r0, sl
 800a6f2:	7821      	ldrb	r1, [r4, #0]
 800a6f4:	f7fd fc7f 	bl	8007ff6 <memchr>
 800a6f8:	b138      	cbz	r0, 800a70a <_vfiprintf_r+0x176>
 800a6fa:	2240      	movs	r2, #64	@ 0x40
 800a6fc:	9b04      	ldr	r3, [sp, #16]
 800a6fe:	eba0 000a 	sub.w	r0, r0, sl
 800a702:	4082      	lsls	r2, r0
 800a704:	4313      	orrs	r3, r2
 800a706:	3401      	adds	r4, #1
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a70e:	2206      	movs	r2, #6
 800a710:	4829      	ldr	r0, [pc, #164]	@ (800a7b8 <_vfiprintf_r+0x224>)
 800a712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a716:	f7fd fc6e 	bl	8007ff6 <memchr>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d03f      	beq.n	800a79e <_vfiprintf_r+0x20a>
 800a71e:	4b27      	ldr	r3, [pc, #156]	@ (800a7bc <_vfiprintf_r+0x228>)
 800a720:	bb1b      	cbnz	r3, 800a76a <_vfiprintf_r+0x1d6>
 800a722:	9b03      	ldr	r3, [sp, #12]
 800a724:	3307      	adds	r3, #7
 800a726:	f023 0307 	bic.w	r3, r3, #7
 800a72a:	3308      	adds	r3, #8
 800a72c:	9303      	str	r3, [sp, #12]
 800a72e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a730:	443b      	add	r3, r7
 800a732:	9309      	str	r3, [sp, #36]	@ 0x24
 800a734:	e76a      	b.n	800a60c <_vfiprintf_r+0x78>
 800a736:	460c      	mov	r4, r1
 800a738:	2001      	movs	r0, #1
 800a73a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a73e:	e7a8      	b.n	800a692 <_vfiprintf_r+0xfe>
 800a740:	2300      	movs	r3, #0
 800a742:	f04f 0c0a 	mov.w	ip, #10
 800a746:	4619      	mov	r1, r3
 800a748:	3401      	adds	r4, #1
 800a74a:	9305      	str	r3, [sp, #20]
 800a74c:	4620      	mov	r0, r4
 800a74e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a752:	3a30      	subs	r2, #48	@ 0x30
 800a754:	2a09      	cmp	r2, #9
 800a756:	d903      	bls.n	800a760 <_vfiprintf_r+0x1cc>
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d0c6      	beq.n	800a6ea <_vfiprintf_r+0x156>
 800a75c:	9105      	str	r1, [sp, #20]
 800a75e:	e7c4      	b.n	800a6ea <_vfiprintf_r+0x156>
 800a760:	4604      	mov	r4, r0
 800a762:	2301      	movs	r3, #1
 800a764:	fb0c 2101 	mla	r1, ip, r1, r2
 800a768:	e7f0      	b.n	800a74c <_vfiprintf_r+0x1b8>
 800a76a:	ab03      	add	r3, sp, #12
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	462a      	mov	r2, r5
 800a770:	4630      	mov	r0, r6
 800a772:	4b13      	ldr	r3, [pc, #76]	@ (800a7c0 <_vfiprintf_r+0x22c>)
 800a774:	a904      	add	r1, sp, #16
 800a776:	f7fb fe93 	bl	80064a0 <_printf_float>
 800a77a:	4607      	mov	r7, r0
 800a77c:	1c78      	adds	r0, r7, #1
 800a77e:	d1d6      	bne.n	800a72e <_vfiprintf_r+0x19a>
 800a780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a782:	07d9      	lsls	r1, r3, #31
 800a784:	d405      	bmi.n	800a792 <_vfiprintf_r+0x1fe>
 800a786:	89ab      	ldrh	r3, [r5, #12]
 800a788:	059a      	lsls	r2, r3, #22
 800a78a:	d402      	bmi.n	800a792 <_vfiprintf_r+0x1fe>
 800a78c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a78e:	f7fd fc31 	bl	8007ff4 <__retarget_lock_release_recursive>
 800a792:	89ab      	ldrh	r3, [r5, #12]
 800a794:	065b      	lsls	r3, r3, #25
 800a796:	f53f af1f 	bmi.w	800a5d8 <_vfiprintf_r+0x44>
 800a79a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a79c:	e71e      	b.n	800a5dc <_vfiprintf_r+0x48>
 800a79e:	ab03      	add	r3, sp, #12
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	462a      	mov	r2, r5
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	4b06      	ldr	r3, [pc, #24]	@ (800a7c0 <_vfiprintf_r+0x22c>)
 800a7a8:	a904      	add	r1, sp, #16
 800a7aa:	f7fc f917 	bl	80069dc <_printf_i>
 800a7ae:	e7e4      	b.n	800a77a <_vfiprintf_r+0x1e6>
 800a7b0:	0800ad4e 	.word	0x0800ad4e
 800a7b4:	0800ad54 	.word	0x0800ad54
 800a7b8:	0800ad58 	.word	0x0800ad58
 800a7bc:	080064a1 	.word	0x080064a1
 800a7c0:	0800a571 	.word	0x0800a571

0800a7c4 <__swbuf_r>:
 800a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7c6:	460e      	mov	r6, r1
 800a7c8:	4614      	mov	r4, r2
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	b118      	cbz	r0, 800a7d6 <__swbuf_r+0x12>
 800a7ce:	6a03      	ldr	r3, [r0, #32]
 800a7d0:	b90b      	cbnz	r3, 800a7d6 <__swbuf_r+0x12>
 800a7d2:	f7fc fd13 	bl	80071fc <__sinit>
 800a7d6:	69a3      	ldr	r3, [r4, #24]
 800a7d8:	60a3      	str	r3, [r4, #8]
 800a7da:	89a3      	ldrh	r3, [r4, #12]
 800a7dc:	071a      	lsls	r2, r3, #28
 800a7de:	d501      	bpl.n	800a7e4 <__swbuf_r+0x20>
 800a7e0:	6923      	ldr	r3, [r4, #16]
 800a7e2:	b943      	cbnz	r3, 800a7f6 <__swbuf_r+0x32>
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f000 f82a 	bl	800a840 <__swsetup_r>
 800a7ec:	b118      	cbz	r0, 800a7f6 <__swbuf_r+0x32>
 800a7ee:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	6922      	ldr	r2, [r4, #16]
 800a7fa:	b2f6      	uxtb	r6, r6
 800a7fc:	1a98      	subs	r0, r3, r2
 800a7fe:	6963      	ldr	r3, [r4, #20]
 800a800:	4637      	mov	r7, r6
 800a802:	4283      	cmp	r3, r0
 800a804:	dc05      	bgt.n	800a812 <__swbuf_r+0x4e>
 800a806:	4621      	mov	r1, r4
 800a808:	4628      	mov	r0, r5
 800a80a:	f7ff f839 	bl	8009880 <_fflush_r>
 800a80e:	2800      	cmp	r0, #0
 800a810:	d1ed      	bne.n	800a7ee <__swbuf_r+0x2a>
 800a812:	68a3      	ldr	r3, [r4, #8]
 800a814:	3b01      	subs	r3, #1
 800a816:	60a3      	str	r3, [r4, #8]
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	1c5a      	adds	r2, r3, #1
 800a81c:	6022      	str	r2, [r4, #0]
 800a81e:	701e      	strb	r6, [r3, #0]
 800a820:	6962      	ldr	r2, [r4, #20]
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	429a      	cmp	r2, r3
 800a826:	d004      	beq.n	800a832 <__swbuf_r+0x6e>
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	07db      	lsls	r3, r3, #31
 800a82c:	d5e1      	bpl.n	800a7f2 <__swbuf_r+0x2e>
 800a82e:	2e0a      	cmp	r6, #10
 800a830:	d1df      	bne.n	800a7f2 <__swbuf_r+0x2e>
 800a832:	4621      	mov	r1, r4
 800a834:	4628      	mov	r0, r5
 800a836:	f7ff f823 	bl	8009880 <_fflush_r>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d0d9      	beq.n	800a7f2 <__swbuf_r+0x2e>
 800a83e:	e7d6      	b.n	800a7ee <__swbuf_r+0x2a>

0800a840 <__swsetup_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4b29      	ldr	r3, [pc, #164]	@ (800a8e8 <__swsetup_r+0xa8>)
 800a844:	4605      	mov	r5, r0
 800a846:	6818      	ldr	r0, [r3, #0]
 800a848:	460c      	mov	r4, r1
 800a84a:	b118      	cbz	r0, 800a854 <__swsetup_r+0x14>
 800a84c:	6a03      	ldr	r3, [r0, #32]
 800a84e:	b90b      	cbnz	r3, 800a854 <__swsetup_r+0x14>
 800a850:	f7fc fcd4 	bl	80071fc <__sinit>
 800a854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a858:	0719      	lsls	r1, r3, #28
 800a85a:	d422      	bmi.n	800a8a2 <__swsetup_r+0x62>
 800a85c:	06da      	lsls	r2, r3, #27
 800a85e:	d407      	bmi.n	800a870 <__swsetup_r+0x30>
 800a860:	2209      	movs	r2, #9
 800a862:	602a      	str	r2, [r5, #0]
 800a864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a86c:	81a3      	strh	r3, [r4, #12]
 800a86e:	e033      	b.n	800a8d8 <__swsetup_r+0x98>
 800a870:	0758      	lsls	r0, r3, #29
 800a872:	d512      	bpl.n	800a89a <__swsetup_r+0x5a>
 800a874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a876:	b141      	cbz	r1, 800a88a <__swsetup_r+0x4a>
 800a878:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a87c:	4299      	cmp	r1, r3
 800a87e:	d002      	beq.n	800a886 <__swsetup_r+0x46>
 800a880:	4628      	mov	r0, r5
 800a882:	f7ff fdf7 	bl	800a474 <_free_r>
 800a886:	2300      	movs	r3, #0
 800a888:	6363      	str	r3, [r4, #52]	@ 0x34
 800a88a:	89a3      	ldrh	r3, [r4, #12]
 800a88c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a890:	81a3      	strh	r3, [r4, #12]
 800a892:	2300      	movs	r3, #0
 800a894:	6063      	str	r3, [r4, #4]
 800a896:	6923      	ldr	r3, [r4, #16]
 800a898:	6023      	str	r3, [r4, #0]
 800a89a:	89a3      	ldrh	r3, [r4, #12]
 800a89c:	f043 0308 	orr.w	r3, r3, #8
 800a8a0:	81a3      	strh	r3, [r4, #12]
 800a8a2:	6923      	ldr	r3, [r4, #16]
 800a8a4:	b94b      	cbnz	r3, 800a8ba <__swsetup_r+0x7a>
 800a8a6:	89a3      	ldrh	r3, [r4, #12]
 800a8a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a8ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8b0:	d003      	beq.n	800a8ba <__swsetup_r+0x7a>
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f000 f83e 	bl	800a936 <__smakebuf_r>
 800a8ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8be:	f013 0201 	ands.w	r2, r3, #1
 800a8c2:	d00a      	beq.n	800a8da <__swsetup_r+0x9a>
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	60a2      	str	r2, [r4, #8]
 800a8c8:	6962      	ldr	r2, [r4, #20]
 800a8ca:	4252      	negs	r2, r2
 800a8cc:	61a2      	str	r2, [r4, #24]
 800a8ce:	6922      	ldr	r2, [r4, #16]
 800a8d0:	b942      	cbnz	r2, 800a8e4 <__swsetup_r+0xa4>
 800a8d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a8d6:	d1c5      	bne.n	800a864 <__swsetup_r+0x24>
 800a8d8:	bd38      	pop	{r3, r4, r5, pc}
 800a8da:	0799      	lsls	r1, r3, #30
 800a8dc:	bf58      	it	pl
 800a8de:	6962      	ldrpl	r2, [r4, #20]
 800a8e0:	60a2      	str	r2, [r4, #8]
 800a8e2:	e7f4      	b.n	800a8ce <__swsetup_r+0x8e>
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	e7f7      	b.n	800a8d8 <__swsetup_r+0x98>
 800a8e8:	200001a0 	.word	0x200001a0

0800a8ec <__swhatbuf_r>:
 800a8ec:	b570      	push	{r4, r5, r6, lr}
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f4:	4615      	mov	r5, r2
 800a8f6:	2900      	cmp	r1, #0
 800a8f8:	461e      	mov	r6, r3
 800a8fa:	b096      	sub	sp, #88	@ 0x58
 800a8fc:	da0c      	bge.n	800a918 <__swhatbuf_r+0x2c>
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	2100      	movs	r1, #0
 800a902:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a906:	bf14      	ite	ne
 800a908:	2340      	movne	r3, #64	@ 0x40
 800a90a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a90e:	2000      	movs	r0, #0
 800a910:	6031      	str	r1, [r6, #0]
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	b016      	add	sp, #88	@ 0x58
 800a916:	bd70      	pop	{r4, r5, r6, pc}
 800a918:	466a      	mov	r2, sp
 800a91a:	f000 f849 	bl	800a9b0 <_fstat_r>
 800a91e:	2800      	cmp	r0, #0
 800a920:	dbed      	blt.n	800a8fe <__swhatbuf_r+0x12>
 800a922:	9901      	ldr	r1, [sp, #4]
 800a924:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a928:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a92c:	4259      	negs	r1, r3
 800a92e:	4159      	adcs	r1, r3
 800a930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a934:	e7eb      	b.n	800a90e <__swhatbuf_r+0x22>

0800a936 <__smakebuf_r>:
 800a936:	898b      	ldrh	r3, [r1, #12]
 800a938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a93a:	079d      	lsls	r5, r3, #30
 800a93c:	4606      	mov	r6, r0
 800a93e:	460c      	mov	r4, r1
 800a940:	d507      	bpl.n	800a952 <__smakebuf_r+0x1c>
 800a942:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a946:	6023      	str	r3, [r4, #0]
 800a948:	6123      	str	r3, [r4, #16]
 800a94a:	2301      	movs	r3, #1
 800a94c:	6163      	str	r3, [r4, #20]
 800a94e:	b003      	add	sp, #12
 800a950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a952:	466a      	mov	r2, sp
 800a954:	ab01      	add	r3, sp, #4
 800a956:	f7ff ffc9 	bl	800a8ec <__swhatbuf_r>
 800a95a:	9f00      	ldr	r7, [sp, #0]
 800a95c:	4605      	mov	r5, r0
 800a95e:	4639      	mov	r1, r7
 800a960:	4630      	mov	r0, r6
 800a962:	f7fe fe7b 	bl	800965c <_malloc_r>
 800a966:	b948      	cbnz	r0, 800a97c <__smakebuf_r+0x46>
 800a968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a96c:	059a      	lsls	r2, r3, #22
 800a96e:	d4ee      	bmi.n	800a94e <__smakebuf_r+0x18>
 800a970:	f023 0303 	bic.w	r3, r3, #3
 800a974:	f043 0302 	orr.w	r3, r3, #2
 800a978:	81a3      	strh	r3, [r4, #12]
 800a97a:	e7e2      	b.n	800a942 <__smakebuf_r+0xc>
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a986:	81a3      	strh	r3, [r4, #12]
 800a988:	9b01      	ldr	r3, [sp, #4]
 800a98a:	6020      	str	r0, [r4, #0]
 800a98c:	b15b      	cbz	r3, 800a9a6 <__smakebuf_r+0x70>
 800a98e:	4630      	mov	r0, r6
 800a990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a994:	f000 f81e 	bl	800a9d4 <_isatty_r>
 800a998:	b128      	cbz	r0, 800a9a6 <__smakebuf_r+0x70>
 800a99a:	89a3      	ldrh	r3, [r4, #12]
 800a99c:	f023 0303 	bic.w	r3, r3, #3
 800a9a0:	f043 0301 	orr.w	r3, r3, #1
 800a9a4:	81a3      	strh	r3, [r4, #12]
 800a9a6:	89a3      	ldrh	r3, [r4, #12]
 800a9a8:	431d      	orrs	r5, r3
 800a9aa:	81a5      	strh	r5, [r4, #12]
 800a9ac:	e7cf      	b.n	800a94e <__smakebuf_r+0x18>
	...

0800a9b0 <_fstat_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	4d06      	ldr	r5, [pc, #24]	@ (800a9d0 <_fstat_r+0x20>)
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	f7f6 fffb 	bl	80019b8 <_fstat>
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	d102      	bne.n	800a9cc <_fstat_r+0x1c>
 800a9c6:	682b      	ldr	r3, [r5, #0]
 800a9c8:	b103      	cbz	r3, 800a9cc <_fstat_r+0x1c>
 800a9ca:	6023      	str	r3, [r4, #0]
 800a9cc:	bd38      	pop	{r3, r4, r5, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000528 	.word	0x20000528

0800a9d4 <_isatty_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	4d05      	ldr	r5, [pc, #20]	@ (800a9f0 <_isatty_r+0x1c>)
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	f7f6 fff9 	bl	80019d6 <_isatty>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d102      	bne.n	800a9ee <_isatty_r+0x1a>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	b103      	cbz	r3, 800a9ee <_isatty_r+0x1a>
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	20000528 	.word	0x20000528

0800a9f4 <_raise_r>:
 800a9f4:	291f      	cmp	r1, #31
 800a9f6:	b538      	push	{r3, r4, r5, lr}
 800a9f8:	4605      	mov	r5, r0
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	d904      	bls.n	800aa08 <_raise_r+0x14>
 800a9fe:	2316      	movs	r3, #22
 800aa00:	6003      	str	r3, [r0, #0]
 800aa02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa0a:	b112      	cbz	r2, 800aa12 <_raise_r+0x1e>
 800aa0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa10:	b94b      	cbnz	r3, 800aa26 <_raise_r+0x32>
 800aa12:	4628      	mov	r0, r5
 800aa14:	f000 f830 	bl	800aa78 <_getpid_r>
 800aa18:	4622      	mov	r2, r4
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa22:	f000 b817 	b.w	800aa54 <_kill_r>
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d00a      	beq.n	800aa40 <_raise_r+0x4c>
 800aa2a:	1c59      	adds	r1, r3, #1
 800aa2c:	d103      	bne.n	800aa36 <_raise_r+0x42>
 800aa2e:	2316      	movs	r3, #22
 800aa30:	6003      	str	r3, [r0, #0]
 800aa32:	2001      	movs	r0, #1
 800aa34:	e7e7      	b.n	800aa06 <_raise_r+0x12>
 800aa36:	2100      	movs	r1, #0
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa3e:	4798      	blx	r3
 800aa40:	2000      	movs	r0, #0
 800aa42:	e7e0      	b.n	800aa06 <_raise_r+0x12>

0800aa44 <raise>:
 800aa44:	4b02      	ldr	r3, [pc, #8]	@ (800aa50 <raise+0xc>)
 800aa46:	4601      	mov	r1, r0
 800aa48:	6818      	ldr	r0, [r3, #0]
 800aa4a:	f7ff bfd3 	b.w	800a9f4 <_raise_r>
 800aa4e:	bf00      	nop
 800aa50:	200001a0 	.word	0x200001a0

0800aa54 <_kill_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	2300      	movs	r3, #0
 800aa58:	4d06      	ldr	r5, [pc, #24]	@ (800aa74 <_kill_r+0x20>)
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	4608      	mov	r0, r1
 800aa5e:	4611      	mov	r1, r2
 800aa60:	602b      	str	r3, [r5, #0]
 800aa62:	f7f6 ff4a 	bl	80018fa <_kill>
 800aa66:	1c43      	adds	r3, r0, #1
 800aa68:	d102      	bne.n	800aa70 <_kill_r+0x1c>
 800aa6a:	682b      	ldr	r3, [r5, #0]
 800aa6c:	b103      	cbz	r3, 800aa70 <_kill_r+0x1c>
 800aa6e:	6023      	str	r3, [r4, #0]
 800aa70:	bd38      	pop	{r3, r4, r5, pc}
 800aa72:	bf00      	nop
 800aa74:	20000528 	.word	0x20000528

0800aa78 <_getpid_r>:
 800aa78:	f7f6 bf38 	b.w	80018ec <_getpid>

0800aa7c <_init>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	bf00      	nop
 800aa80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa82:	bc08      	pop	{r3}
 800aa84:	469e      	mov	lr, r3
 800aa86:	4770      	bx	lr

0800aa88 <_fini>:
 800aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8a:	bf00      	nop
 800aa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8e:	bc08      	pop	{r3}
 800aa90:	469e      	mov	lr, r3
 800aa92:	4770      	bx	lr
