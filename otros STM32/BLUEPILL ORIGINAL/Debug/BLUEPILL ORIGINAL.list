
BLUEPILL ORIGINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db1c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800dc30  0800dc30  0000ec30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0ec  0800e0ec  00010350  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0ec  0800e0ec  0000f0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0f4  0800e0f4  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0f4  0800e0f4  0000f0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e0f8  0800e0f8  0000f0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000350  20000000  0800e0fc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  20000350  0800e44c  00010350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017ac  0800e44c  000107ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b53  00000000  00000000  00010379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d17  00000000  00000000  00025ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00029be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f57  00000000  00000000  0002b008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c626  00000000  00000000  0002bf5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019919  00000000  00000000  00048585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096127  00000000  00000000  00061e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7fc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066e0  00000000  00000000  000f8008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000fe6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dc14 	.word	0x0800dc14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800dc14 	.word	0x0800dc14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000be6:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <MX_ADC1_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bfe:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c04:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c10:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c12:	f000 fd91 	bl	8001738 <HAL_ADC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 f9d2 	bl	8000fc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c32:	f000 fe59 	bl	80018e8 <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c3c:	f000 f9c2 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2000036c 	.word	0x2000036c
 8000c4c:	40012400 	.word	0x40012400

08000c50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a14      	ldr	r2, [pc, #80]	@ (8000cbc <HAL_ADC_MspInit+0x6c>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d121      	bne.n	8000cb4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Vpanel_Pin|prueba_adc_Pin|Ipanel_Pin;
 8000ca0:	2362      	movs	r3, #98	@ 0x62
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <HAL_ADC_MspInit+0x74>)
 8000cb0:	f001 f862 	bl	8001d78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40012400 	.word	0x40012400
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010800 	.word	0x40010800

08000cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cdc:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <MX_GPIO_Init+0xbc>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a28      	ldr	r2, [pc, #160]	@ (8000d84 <MX_GPIO_Init+0xbc>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <MX_GPIO_Init+0xbc>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf4:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <MX_GPIO_Init+0xbc>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a22      	ldr	r2, [pc, #136]	@ (8000d84 <MX_GPIO_Init+0xbc>)
 8000cfa:	f043 0320 	orr.w	r3, r3, #32
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <MX_GPIO_Init+0xbc>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0320 	and.w	r3, r3, #32
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_GPIO_Init+0xbc>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a1c      	ldr	r2, [pc, #112]	@ (8000d84 <MX_GPIO_Init+0xbc>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_GPIO_Init+0xbc>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_GPIO_Init+0xbc>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a16      	ldr	r2, [pc, #88]	@ (8000d84 <MX_GPIO_Init+0xbc>)
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_GPIO_Init+0xbc>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0308 	and.w	r3, r3, #8
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activador_GPIO_Port, activador_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d42:	4811      	ldr	r0, [pc, #68]	@ (8000d88 <MX_GPIO_Init+0xc0>)
 8000d44:	f001 f99c 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activador_Pin;
 8000d48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(activador_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <MX_GPIO_Init+0xc0>)
 8000d62:	f001 f809 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	4619      	mov	r1, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_GPIO_Init+0xc4>)
 8000d78:	f000 fffe 	bl	8001d78 <HAL_GPIO_Init>

}
 8000d7c:	bf00      	nop
 8000d7e:	3720      	adds	r7, #32
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40011000 	.word	0x40011000
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 fc4a 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f8b6 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f7ff ff94 	bl	8000cc8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000da0:	f000 fba8 	bl	80014f4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000da4:	f7ff ff16 	bl	8000bd4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000da8:	f000 fa42 	bl	8001230 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000dac:	f000 fac2 	bl	8001334 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000db0:	f007 ff3a 	bl	8008c28 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1) {

	sprintf(charData, "%s\n", "While reached");
 8000db4:	4a48      	ldr	r2, [pc, #288]	@ (8000ed8 <main+0x148>)
 8000db6:	4949      	ldr	r1, [pc, #292]	@ (8000edc <main+0x14c>)
 8000db8:	4849      	ldr	r0, [pc, #292]	@ (8000ee0 <main+0x150>)
 8000dba:	f009 fa3d 	bl	800a238 <siprintf>
	CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000dbe:	4848      	ldr	r0, [pc, #288]	@ (8000ee0 <main+0x150>)
 8000dc0:	f7ff f9c6 	bl	8000150 <strlen>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4845      	ldr	r0, [pc, #276]	@ (8000ee0 <main+0x150>)
 8000dcc:	f007 ffea 	bl	8008da4 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000dd0:	2064      	movs	r0, #100	@ 0x64
 8000dd2:	f000 fc8d 	bl	80016f0 <HAL_Delay>

	sprintf(charData, "%d\n", myNum);
 8000dd6:	4b43      	ldr	r3, [pc, #268]	@ (8000ee4 <main+0x154>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4942      	ldr	r1, [pc, #264]	@ (8000ee8 <main+0x158>)
 8000dde:	4840      	ldr	r0, [pc, #256]	@ (8000ee0 <main+0x150>)
 8000de0:	f009 fa2a 	bl	800a238 <siprintf>
	CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000de4:	483e      	ldr	r0, [pc, #248]	@ (8000ee0 <main+0x150>)
 8000de6:	f7ff f9b3 	bl	8000150 <strlen>
 8000dea:	4603      	mov	r3, r0
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	4619      	mov	r1, r3
 8000df0:	483b      	ldr	r0, [pc, #236]	@ (8000ee0 <main+0x150>)
 8000df2:	f007 ffd7 	bl	8008da4 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000df6:	2064      	movs	r0, #100	@ 0x64
 8000df8:	f000 fc7a 	bl	80016f0 <HAL_Delay>

	sprintf(charData, "%f\n", myFloatNum);
 8000dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8000eec <main+0x15c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fb11 	bl	8000428 <__aeabi_f2d>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4939      	ldr	r1, [pc, #228]	@ (8000ef0 <main+0x160>)
 8000e0c:	4834      	ldr	r0, [pc, #208]	@ (8000ee0 <main+0x150>)
 8000e0e:	f009 fa13 	bl	800a238 <siprintf>
	CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000e12:	4833      	ldr	r0, [pc, #204]	@ (8000ee0 <main+0x150>)
 8000e14:	f7ff f99c 	bl	8000150 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4830      	ldr	r0, [pc, #192]	@ (8000ee0 <main+0x150>)
 8000e20:	f007 ffc0 	bl	8008da4 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000e24:	2064      	movs	r0, #100	@ 0x64
 8000e26:	f000 fc63 	bl	80016f0 <HAL_Delay>

	sprintf(charData, "%c\n", myLetter);
 8000e2a:	4b32      	ldr	r3, [pc, #200]	@ (8000ef4 <main+0x164>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4931      	ldr	r1, [pc, #196]	@ (8000ef8 <main+0x168>)
 8000e32:	482b      	ldr	r0, [pc, #172]	@ (8000ee0 <main+0x150>)
 8000e34:	f009 fa00 	bl	800a238 <siprintf>
	CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000e38:	4829      	ldr	r0, [pc, #164]	@ (8000ee0 <main+0x150>)
 8000e3a:	f7ff f989 	bl	8000150 <strlen>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	4619      	mov	r1, r3
 8000e44:	4826      	ldr	r0, [pc, #152]	@ (8000ee0 <main+0x150>)
 8000e46:	f007 ffad 	bl	8008da4 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000e4a:	2064      	movs	r0, #100	@ 0x64
 8000e4c:	f000 fc50 	bl	80016f0 <HAL_Delay>

	sprintf(charData, "%d\n", myUint);
 8000e50:	4b2a      	ldr	r3, [pc, #168]	@ (8000efc <main+0x16c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4924      	ldr	r1, [pc, #144]	@ (8000ee8 <main+0x158>)
 8000e58:	4821      	ldr	r0, [pc, #132]	@ (8000ee0 <main+0x150>)
 8000e5a:	f009 f9ed 	bl	800a238 <siprintf>
	CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000e5e:	4820      	ldr	r0, [pc, #128]	@ (8000ee0 <main+0x150>)
 8000e60:	f7ff f976 	bl	8000150 <strlen>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481d      	ldr	r0, [pc, #116]	@ (8000ee0 <main+0x150>)
 8000e6c:	f007 ff9a 	bl	8008da4 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000e70:	2064      	movs	r0, #100	@ 0x64
 8000e72:	f000 fc3d 	bl	80016f0 <HAL_Delay>

	myArray[5]=7;
 8000e76:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <main+0x170>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	715a      	strb	r2, [r3, #5]
	sprintf(charData, "%d\n", myArray[5]);
 8000e7c:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <main+0x170>)
 8000e7e:	795b      	ldrb	r3, [r3, #5]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4919      	ldr	r1, [pc, #100]	@ (8000ee8 <main+0x158>)
 8000e84:	4816      	ldr	r0, [pc, #88]	@ (8000ee0 <main+0x150>)
 8000e86:	f009 f9d7 	bl	800a238 <siprintf>
	CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000e8a:	4815      	ldr	r0, [pc, #84]	@ (8000ee0 <main+0x150>)
 8000e8c:	f7ff f960 	bl	8000150 <strlen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4619      	mov	r1, r3
 8000e96:	4812      	ldr	r0, [pc, #72]	@ (8000ee0 <main+0x150>)
 8000e98:	f007 ff84 	bl	8008da4 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000e9c:	2064      	movs	r0, #100	@ 0x64
 8000e9e:	f000 fc27 	bl	80016f0 <HAL_Delay>

	myNum++;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <main+0x154>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee4 <main+0x154>)
 8000eaa:	6013      	str	r3, [r2, #0]


//		Para prender y apagar el led que viene en la bluepil
	HAL_GPIO_WritePin(GPIOC, ACTIVADOR_PIN, GPIO_PIN_SET);
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eb2:	4814      	ldr	r0, [pc, #80]	@ (8000f04 <main+0x174>)
 8000eb4:	f001 f8e4 	bl	8002080 <HAL_GPIO_WritePin>
	HAL_Delay(500); // 1 segundo de delay
 8000eb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ebc:	f000 fc18 	bl	80016f0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, ACTIVADOR_PIN, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec6:	480f      	ldr	r0, [pc, #60]	@ (8000f04 <main+0x174>)
 8000ec8:	f001 f8da 	bl	8002080 <HAL_GPIO_WritePin>
	HAL_Delay(500); // 1 segundo de delay
 8000ecc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ed0:	f000 fc0e 	bl	80016f0 <HAL_Delay>
	sprintf(charData, "%s\n", "While reached");
 8000ed4:	bf00      	nop
 8000ed6:	e76d      	b.n	8000db4 <main+0x24>
 8000ed8:	0800dc30 	.word	0x0800dc30
 8000edc:	0800dc40 	.word	0x0800dc40
 8000ee0:	200003b0 	.word	0x200003b0
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	0800dc44 	.word	0x0800dc44
 8000eec:	20000004 	.word	0x20000004
 8000ef0:	0800dc48 	.word	0x0800dc48
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	0800dc4c 	.word	0x0800dc4c
 8000efc:	20000009 	.word	0x20000009
 8000f00:	2000039c 	.word	0x2000039c
 8000f04:	40011000 	.word	0x40011000

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b094      	sub	sp, #80	@ 0x50
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f12:	2228      	movs	r2, #40	@ 0x28
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00a f900 	bl	800b11c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f46:	2301      	movs	r3, #1
 8000f48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f54:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f002 fe06 	bl	8003b70 <HAL_RCC_OscConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f6a:	f000 f82b 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6e:	230f      	movs	r3, #15
 8000f70:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 f872 	bl	8004074 <HAL_RCC_ClockConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f96:	f000 f815 	bl	8000fc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000f9a:	2312      	movs	r3, #18
 8000f9c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000f9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fa2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000fa4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fa8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 f9ef 	bl	8004390 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fb8:	f000 f804 	bl	8000fc4 <Error_Handler>
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	3750      	adds	r7, #80	@ 0x50
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <Error_Handler+0x8>

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_MspInit+0x5c>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a14      	ldr	r2, [pc, #80]	@ (800102c <HAL_MspInit+0x5c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_MspInit+0x5c>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_MspInit+0x5c>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800102c <HAL_MspInit+0x5c>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <HAL_MspInit+0x5c>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_MspInit+0x60>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <HAL_MspInit+0x60>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 fb18 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001092:	f001 f929 	bl	80022e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20001168 	.word	0x20001168

080010a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return 1;
 80010a4:	2301      	movs	r3, #1
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <_kill>:

int _kill(int pid, int sig)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010b8:	f00a f83c 	bl	800b134 <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	2216      	movs	r2, #22
 80010c0:	601a      	str	r2, [r3, #0]
  return -1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_exit>:

void _exit (int status)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010d6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffe7 	bl	80010ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <_exit+0x12>

080010e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e00a      	b.n	800110c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010f6:	f3af 8000 	nop.w
 80010fa:	4601      	mov	r1, r0
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	60ba      	str	r2, [r7, #8]
 8001102:	b2ca      	uxtb	r2, r1
 8001104:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbf0      	blt.n	80010f6 <_read+0x12>
  }

  return len;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e009      	b.n	8001144 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbf1      	blt.n	8001130 <_write+0x12>
  }
  return len;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_close>:

int _close(int file)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800117c:	605a      	str	r2, [r3, #4]
  return 0;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <_isatty>:

int _isatty(int file)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
	...

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c0:	4a14      	ldr	r2, [pc, #80]	@ (8001214 <_sbrk+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <_sbrk+0x60>)
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <_sbrk+0x64>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <_sbrk+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d207      	bcs.n	80011f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e8:	f009 ffa4 	bl	800b134 <__errno>
 80011ec:	4603      	mov	r3, r0
 80011ee:	220c      	movs	r2, #12
 80011f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011f6:	e009      	b.n	800120c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <_sbrk+0x64>)
 8001208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20005000 	.word	0x20005000
 8001218:	00000400 	.word	0x00000400
 800121c:	200003c0 	.word	0x200003c0
 8001220:	200017b0 	.word	0x200017b0

08001224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b092      	sub	sp, #72	@ 0x48
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001236:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2220      	movs	r2, #32
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f009 ff5e 	bl	800b11c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001260:	4b32      	ldr	r3, [pc, #200]	@ (800132c <MX_TIM1_Init+0xfc>)
 8001262:	4a33      	ldr	r2, [pc, #204]	@ (8001330 <MX_TIM1_Init+0x100>)
 8001264:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8001266:	4b31      	ldr	r3, [pc, #196]	@ (800132c <MX_TIM1_Init+0xfc>)
 8001268:	2204      	movs	r2, #4
 800126a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <MX_TIM1_Init+0xfc>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001272:	4b2e      	ldr	r3, [pc, #184]	@ (800132c <MX_TIM1_Init+0xfc>)
 8001274:	22ff      	movs	r2, #255	@ 0xff
 8001276:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b2c      	ldr	r3, [pc, #176]	@ (800132c <MX_TIM1_Init+0xfc>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800127e:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <MX_TIM1_Init+0xfc>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <MX_TIM1_Init+0xfc>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800128a:	4828      	ldr	r0, [pc, #160]	@ (800132c <MX_TIM1_Init+0xfc>)
 800128c:	f003 f936 	bl	80044fc <HAL_TIM_PWM_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001296:	f7ff fe95 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012a6:	4619      	mov	r1, r3
 80012a8:	4820      	ldr	r0, [pc, #128]	@ (800132c <MX_TIM1_Init+0xfc>)
 80012aa:	f003 fc2f 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80012b4:	f7ff fe86 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b8:	2360      	movs	r3, #96	@ 0x60
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012c4:	2300      	movs	r3, #0
 80012c6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	4813      	ldr	r0, [pc, #76]	@ (800132c <MX_TIM1_Init+0xfc>)
 80012de:	f003 f95d 	bl	800459c <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80012e8:	f7ff fe6c 	bl	8000fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001304:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4807      	ldr	r0, [pc, #28]	@ (800132c <MX_TIM1_Init+0xfc>)
 8001310:	f003 fc5a 	bl	8004bc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800131a:	f7ff fe53 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800131e:	4803      	ldr	r0, [pc, #12]	@ (800132c <MX_TIM1_Init+0xfc>)
 8001320:	f000 f892 	bl	8001448 <HAL_TIM_MspPostInit>

}
 8001324:	bf00      	nop
 8001326:	3748      	adds	r7, #72	@ 0x48
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200003c4 	.word	0x200003c4
 8001330:	40012c00 	.word	0x40012c00

08001334 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001356:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <MX_TIM3_Init+0xa8>)
 8001358:	4a21      	ldr	r2, [pc, #132]	@ (80013e0 <MX_TIM3_Init+0xac>)
 800135a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 800135c:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <MX_TIM3_Init+0xa8>)
 800135e:	2204      	movs	r2, #4
 8001360:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b1e      	ldr	r3, [pc, #120]	@ (80013dc <MX_TIM3_Init+0xa8>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001368:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <MX_TIM3_Init+0xa8>)
 800136a:	22ff      	movs	r2, #255	@ 0xff
 800136c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_TIM3_Init+0xa8>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <MX_TIM3_Init+0xa8>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800137a:	4818      	ldr	r0, [pc, #96]	@ (80013dc <MX_TIM3_Init+0xa8>)
 800137c:	f003 f8be 	bl	80044fc <HAL_TIM_PWM_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001386:	f7ff fe1d 	bl	8000fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001392:	f107 0320 	add.w	r3, r7, #32
 8001396:	4619      	mov	r1, r3
 8001398:	4810      	ldr	r0, [pc, #64]	@ (80013dc <MX_TIM3_Init+0xa8>)
 800139a:	f003 fbb7 	bl	8004b0c <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80013a4:	f7ff fe0e 	bl	8000fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013a8:	2360      	movs	r3, #96	@ 0x60
 80013aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	220c      	movs	r2, #12
 80013bc:	4619      	mov	r1, r3
 80013be:	4807      	ldr	r0, [pc, #28]	@ (80013dc <MX_TIM3_Init+0xa8>)
 80013c0:	f003 f8ec 	bl	800459c <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013ca:	f7ff fdfb 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013ce:	4803      	ldr	r0, [pc, #12]	@ (80013dc <MX_TIM3_Init+0xa8>)
 80013d0:	f000 f83a 	bl	8001448 <HAL_TIM_MspPostInit>

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	@ 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000040c 	.word	0x2000040c
 80013e0:	40000400 	.word	0x40000400

080013e4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a12      	ldr	r2, [pc, #72]	@ (800143c <HAL_TIM_PWM_MspInit+0x58>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10c      	bne.n	8001410 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <HAL_TIM_PWM_MspInit+0x5c>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a11      	ldr	r2, [pc, #68]	@ (8001440 <HAL_TIM_PWM_MspInit+0x5c>)
 80013fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <HAL_TIM_PWM_MspInit+0x5c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800140e:	e010      	b.n	8001432 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <HAL_TIM_PWM_MspInit+0x60>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10b      	bne.n	8001432 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_TIM_PWM_MspInit+0x5c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <HAL_TIM_PWM_MspInit+0x5c>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_TIM_PWM_MspInit+0x5c>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	40012c00 	.word	0x40012c00
 8001440:	40021000 	.word	0x40021000
 8001444:	40000400 	.word	0x40000400

08001448 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1f      	ldr	r2, [pc, #124]	@ (80014e0 <HAL_TIM_MspPostInit+0x98>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d119      	bne.n	800149c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <HAL_TIM_MspPostInit+0x9c>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a1d      	ldr	r2, [pc, #116]	@ (80014e4 <HAL_TIM_MspPostInit+0x9c>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <HAL_TIM_MspPostInit+0x9c>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PwmMppt_Pin;
 8001480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001484:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2302      	movs	r3, #2
 800148c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PwmMppt_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4619      	mov	r1, r3
 8001494:	4814      	ldr	r0, [pc, #80]	@ (80014e8 <HAL_TIM_MspPostInit+0xa0>)
 8001496:	f000 fc6f 	bl	8001d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800149a:	e01c      	b.n	80014d6 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM3)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <HAL_TIM_MspPostInit+0xa4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d117      	bne.n	80014d6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <HAL_TIM_MspPostInit+0x9c>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	4a0e      	ldr	r2, [pc, #56]	@ (80014e4 <HAL_TIM_MspPostInit+0x9c>)
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	6193      	str	r3, [r2, #24]
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <HAL_TIM_MspPostInit+0x9c>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014be:	2302      	movs	r3, #2
 80014c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2302      	movs	r3, #2
 80014c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	4619      	mov	r1, r3
 80014d0:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <HAL_TIM_MspPostInit+0xa8>)
 80014d2:	f000 fc51 	bl	8001d78 <HAL_GPIO_Init>
}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40012c00 	.word	0x40012c00
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010800 	.word	0x40010800
 80014ec:	40000400 	.word	0x40000400
 80014f0:	40010c00 	.word	0x40010c00

080014f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_USART1_UART_Init+0x4c>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <MX_USART1_UART_Init+0x50>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <MX_USART1_UART_Init+0x4c>)
 8001500:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_USART1_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_USART1_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <MX_USART1_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_USART1_UART_Init+0x4c>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <MX_USART1_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_USART1_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_USART1_UART_Init+0x4c>)
 800152c:	f003 fb9d 	bl	8004c6a <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001536:	f7ff fd45 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000454 	.word	0x20000454
 8001544:	40013800 	.word	0x40013800

08001548 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a1c      	ldr	r2, [pc, #112]	@ (80015d4 <HAL_UART_MspInit+0x8c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d131      	bne.n	80015cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_UART_MspInit+0x90>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <HAL_UART_MspInit+0x90>)
 800156e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <HAL_UART_MspInit+0x90>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_UART_MspInit+0x90>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <HAL_UART_MspInit+0x90>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_UART_MspInit+0x90>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001598:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800159c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4619      	mov	r1, r3
 80015ac:	480b      	ldr	r0, [pc, #44]	@ (80015dc <HAL_UART_MspInit+0x94>)
 80015ae:	f000 fbe3 	bl	8001d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	4619      	mov	r1, r3
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <HAL_UART_MspInit+0x94>)
 80015c8:	f000 fbd6 	bl	8001d78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015cc:	bf00      	nop
 80015ce:	3720      	adds	r7, #32
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40013800 	.word	0x40013800
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010800 	.word	0x40010800

080015e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e0:	f7ff fe20 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480b      	ldr	r0, [pc, #44]	@ (8001614 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015e6:	490c      	ldr	r1, [pc, #48]	@ (8001618 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015e8:	4a0c      	ldr	r2, [pc, #48]	@ (800161c <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a09      	ldr	r2, [pc, #36]	@ (8001620 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015fc:	4c09      	ldr	r4, [pc, #36]	@ (8001624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160a:	f009 fd99 	bl	800b140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160e:	f7ff fbbf 	bl	8000d90 <main>
  bx lr
 8001612:	4770      	bx	lr
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 800161c:	0800e0fc 	.word	0x0800e0fc
  ldr r2, =_sbss
 8001620:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001624:	200017ac 	.word	0x200017ac

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <HAL_Init+0x28>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	@ (8001654 <HAL_Init+0x28>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 fb59 	bl	8001cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	200f      	movs	r0, #15
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fcc2 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40022000 	.word	0x40022000

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fb71 	bl	8001d5e <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001694:	f000 fb39 	bl	8001d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	@ (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000000c 	.word	0x2000000c
 80016b0:	20000014 	.word	0x20000014
 80016b4:	20000010 	.word	0x20000010

080016b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <HAL_IncTick+0x1c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <HAL_IncTick+0x20>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a03      	ldr	r2, [pc, #12]	@ (80016d8 <HAL_IncTick+0x20>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000014 	.word	0x20000014
 80016d8:	2000049c 	.word	0x2000049c

080016dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b02      	ldr	r3, [pc, #8]	@ (80016ec <HAL_GetTick+0x10>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	2000049c 	.word	0x2000049c

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff fff0 	bl	80016dc <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_Delay+0x44>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffe0 	bl	80016dc <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000014 	.word	0x20000014

08001738 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0be      	b.n	80018d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fa6a 	bl	8000c50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f9ab 	bl	8001ad8 <ADC_ConversionStop_Disable>
 8001782:	4603      	mov	r3, r0
 8001784:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	2b00      	cmp	r3, #0
 8001790:	f040 8099 	bne.w	80018c6 <HAL_ADC_Init+0x18e>
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 8095 	bne.w	80018c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017a4:	f023 0302 	bic.w	r3, r3, #2
 80017a8:	f043 0202 	orr.w	r2, r3, #2
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	7b1b      	ldrb	r3, [r3, #12]
 80017be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80017c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017d0:	d003      	beq.n	80017da <HAL_ADC_Init+0xa2>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d102      	bne.n	80017e0 <HAL_ADC_Init+0xa8>
 80017da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017de:	e000      	b.n	80017e2 <HAL_ADC_Init+0xaa>
 80017e0:	2300      	movs	r3, #0
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7d1b      	ldrb	r3, [r3, #20]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d119      	bne.n	8001824 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7b1b      	ldrb	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	035a      	lsls	r2, r3, #13
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	e00b      	b.n	8001824 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001810:	f043 0220 	orr.w	r2, r3, #32
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181c:	f043 0201 	orr.w	r2, r3, #1
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	430a      	orrs	r2, r1
 8001836:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <HAL_ADC_Init+0x1a8>)
 8001840:	4013      	ands	r3, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	68b9      	ldr	r1, [r7, #8]
 8001848:	430b      	orrs	r3, r1
 800184a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001854:	d003      	beq.n	800185e <HAL_ADC_Init+0x126>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d104      	bne.n	8001868 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	3b01      	subs	r3, #1
 8001864:	051b      	lsls	r3, r3, #20
 8001866:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	430a      	orrs	r2, r1
 800187a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <HAL_ADC_Init+0x1ac>)
 8001884:	4013      	ands	r3, r2
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	429a      	cmp	r2, r3
 800188a:	d10b      	bne.n	80018a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018a2:	e018      	b.n	80018d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	f023 0312 	bic.w	r3, r3, #18
 80018ac:	f043 0210 	orr.w	r2, r3, #16
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018c4:	e007      	b.n	80018d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ca:	f043 0210 	orr.w	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	ffe1f7fd 	.word	0xffe1f7fd
 80018e4:	ff1f0efe 	.word	0xff1f0efe

080018e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x20>
 8001904:	2302      	movs	r3, #2
 8001906:	e0dc      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x1da>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b06      	cmp	r3, #6
 8001916:	d81c      	bhi.n	8001952 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3b05      	subs	r3, #5
 800192a:	221f      	movs	r2, #31
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	4019      	ands	r1, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	3b05      	subs	r3, #5
 8001944:	fa00 f203 	lsl.w	r2, r0, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001950:	e03c      	b.n	80019cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d81c      	bhi.n	8001994 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3b23      	subs	r3, #35	@ 0x23
 800196c:	221f      	movs	r2, #31
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	4019      	ands	r1, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	3b23      	subs	r3, #35	@ 0x23
 8001986:	fa00 f203 	lsl.w	r2, r0, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	631a      	str	r2, [r3, #48]	@ 0x30
 8001992:	e01b      	b.n	80019cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	3b41      	subs	r3, #65	@ 0x41
 80019a6:	221f      	movs	r2, #31
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4019      	ands	r1, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	3b41      	subs	r3, #65	@ 0x41
 80019c0:	fa00 f203 	lsl.w	r2, r0, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	d91c      	bls.n	8001a0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68d9      	ldr	r1, [r3, #12]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	3b1e      	subs	r3, #30
 80019e6:	2207      	movs	r2, #7
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4019      	ands	r1, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6898      	ldr	r0, [r3, #8]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	3b1e      	subs	r3, #30
 8001a00:	fa00 f203 	lsl.w	r2, r0, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	e019      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6919      	ldr	r1, [r3, #16]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	2207      	movs	r2, #7
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4019      	ands	r1, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6898      	ldr	r0, [r3, #8]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b10      	cmp	r3, #16
 8001a48:	d003      	beq.n	8001a52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a4e:	2b11      	cmp	r3, #17
 8001a50:	d132      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1d      	ldr	r2, [pc, #116]	@ (8001acc <HAL_ADC_ConfigChannel+0x1e4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d125      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d126      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a78:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d11a      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a13      	ldr	r2, [pc, #76]	@ (8001ad4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	0c9a      	lsrs	r2, r3, #18
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a98:	e002      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f9      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x1b2>
 8001aa6:	e007      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aac:	f043 0220 	orr.w	r2, r3, #32
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40012400 	.word	0x40012400
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	431bde83 	.word	0x431bde83

08001ad8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d12e      	bne.n	8001b50 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b02:	f7ff fdeb 	bl	80016dc <HAL_GetTick>
 8001b06:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b08:	e01b      	b.n	8001b42 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b0a:	f7ff fde7 	bl	80016dc <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d914      	bls.n	8001b42 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10d      	bne.n	8001b42 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2a:	f043 0210 	orr.w	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e007      	b.n	8001b52 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d0dc      	beq.n	8001b0a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0b      	blt.n	8001bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4906      	ldr	r1, [pc, #24]	@ (8001bf4 <__NVIC_EnableIRQ+0x34>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2001      	movs	r0, #1
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	@ (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	@ (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	@ 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cc0:	d301      	bcc.n	8001cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00f      	b.n	8001ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <SysTick_Config+0x40>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cce:	210f      	movs	r1, #15
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cd4:	f7ff ff90 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <SysTick_Config+0x40>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cde:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <SysTick_Config+0x40>)
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	e000e010 	.word	0xe000e010

08001cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff2d 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1c:	f7ff ff42 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	6978      	ldr	r0, [r7, #20]
 8001d28:	f7ff ff90 	bl	8001c4c <NVIC_EncodePriority>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff5f 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff35 	bl	8001bc0 <__NVIC_EnableIRQ>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffa2 	bl	8001cb0 <SysTick_Config>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b08b      	sub	sp, #44	@ 0x2c
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8a:	e169      	b.n	8002060 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	f040 8158 	bne.w	800205a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a9a      	ldr	r2, [pc, #616]	@ (8002018 <HAL_GPIO_Init+0x2a0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d05e      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001db4:	4a98      	ldr	r2, [pc, #608]	@ (8002018 <HAL_GPIO_Init+0x2a0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d875      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dba:	4a98      	ldr	r2, [pc, #608]	@ (800201c <HAL_GPIO_Init+0x2a4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d058      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001dc0:	4a96      	ldr	r2, [pc, #600]	@ (800201c <HAL_GPIO_Init+0x2a4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d86f      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dc6:	4a96      	ldr	r2, [pc, #600]	@ (8002020 <HAL_GPIO_Init+0x2a8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d052      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001dcc:	4a94      	ldr	r2, [pc, #592]	@ (8002020 <HAL_GPIO_Init+0x2a8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d869      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dd2:	4a94      	ldr	r2, [pc, #592]	@ (8002024 <HAL_GPIO_Init+0x2ac>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d04c      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001dd8:	4a92      	ldr	r2, [pc, #584]	@ (8002024 <HAL_GPIO_Init+0x2ac>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d863      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dde:	4a92      	ldr	r2, [pc, #584]	@ (8002028 <HAL_GPIO_Init+0x2b0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d046      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001de4:	4a90      	ldr	r2, [pc, #576]	@ (8002028 <HAL_GPIO_Init+0x2b0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d85d      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	d82a      	bhi.n	8001e44 <HAL_GPIO_Init+0xcc>
 8001dee:	2b12      	cmp	r3, #18
 8001df0:	d859      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001df2:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <HAL_GPIO_Init+0x80>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e73 	.word	0x08001e73
 8001dfc:	08001e4d 	.word	0x08001e4d
 8001e00:	08001e5f 	.word	0x08001e5f
 8001e04:	08001ea1 	.word	0x08001ea1
 8001e08:	08001ea7 	.word	0x08001ea7
 8001e0c:	08001ea7 	.word	0x08001ea7
 8001e10:	08001ea7 	.word	0x08001ea7
 8001e14:	08001ea7 	.word	0x08001ea7
 8001e18:	08001ea7 	.word	0x08001ea7
 8001e1c:	08001ea7 	.word	0x08001ea7
 8001e20:	08001ea7 	.word	0x08001ea7
 8001e24:	08001ea7 	.word	0x08001ea7
 8001e28:	08001ea7 	.word	0x08001ea7
 8001e2c:	08001ea7 	.word	0x08001ea7
 8001e30:	08001ea7 	.word	0x08001ea7
 8001e34:	08001ea7 	.word	0x08001ea7
 8001e38:	08001ea7 	.word	0x08001ea7
 8001e3c:	08001e55 	.word	0x08001e55
 8001e40:	08001e69 	.word	0x08001e69
 8001e44:	4a79      	ldr	r2, [pc, #484]	@ (800202c <HAL_GPIO_Init+0x2b4>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e4a:	e02c      	b.n	8001ea6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	623b      	str	r3, [r7, #32]
          break;
 8001e52:	e029      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	e024      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	3308      	adds	r3, #8
 8001e64:	623b      	str	r3, [r7, #32]
          break;
 8001e66:	e01f      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e01a      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	623b      	str	r3, [r7, #32]
          break;
 8001e7e:	e013      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d105      	bne.n	8001e94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	611a      	str	r2, [r3, #16]
          break;
 8001e92:	e009      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e94:	2308      	movs	r3, #8
 8001e96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	615a      	str	r2, [r3, #20]
          break;
 8001e9e:	e003      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]
          break;
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          break;
 8001ea6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2bff      	cmp	r3, #255	@ 0xff
 8001eac:	d801      	bhi.n	8001eb2 <HAL_GPIO_Init+0x13a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	e001      	b.n	8001eb6 <HAL_GPIO_Init+0x13e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2bff      	cmp	r3, #255	@ 0xff
 8001ebc:	d802      	bhi.n	8001ec4 <HAL_GPIO_Init+0x14c>
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	e002      	b.n	8001eca <HAL_GPIO_Init+0x152>
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	3b08      	subs	r3, #8
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	210f      	movs	r1, #15
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	401a      	ands	r2, r3
 8001edc:	6a39      	ldr	r1, [r7, #32]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80b1 	beq.w	800205a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8002030 <HAL_GPIO_Init+0x2b8>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a4c      	ldr	r2, [pc, #304]	@ (8002030 <HAL_GPIO_Init+0x2b8>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b4a      	ldr	r3, [pc, #296]	@ (8002030 <HAL_GPIO_Init+0x2b8>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f10:	4a48      	ldr	r2, [pc, #288]	@ (8002034 <HAL_GPIO_Init+0x2bc>)
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	220f      	movs	r2, #15
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a40      	ldr	r2, [pc, #256]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d013      	beq.n	8001f64 <HAL_GPIO_Init+0x1ec>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3f      	ldr	r2, [pc, #252]	@ (800203c <HAL_GPIO_Init+0x2c4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00d      	beq.n	8001f60 <HAL_GPIO_Init+0x1e8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3e      	ldr	r2, [pc, #248]	@ (8002040 <HAL_GPIO_Init+0x2c8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d007      	beq.n	8001f5c <HAL_GPIO_Init+0x1e4>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3d      	ldr	r2, [pc, #244]	@ (8002044 <HAL_GPIO_Init+0x2cc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d101      	bne.n	8001f58 <HAL_GPIO_Init+0x1e0>
 8001f54:	2303      	movs	r3, #3
 8001f56:	e006      	b.n	8001f66 <HAL_GPIO_Init+0x1ee>
 8001f58:	2304      	movs	r3, #4
 8001f5a:	e004      	b.n	8001f66 <HAL_GPIO_Init+0x1ee>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_Init+0x1ee>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_GPIO_Init+0x1ee>
 8001f64:	2300      	movs	r3, #0
 8001f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f68:	f002 0203 	and.w	r2, r2, #3
 8001f6c:	0092      	lsls	r2, r2, #2
 8001f6e:	4093      	lsls	r3, r2
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f76:	492f      	ldr	r1, [pc, #188]	@ (8002034 <HAL_GPIO_Init+0x2bc>)
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f90:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	492c      	ldr	r1, [pc, #176]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	608b      	str	r3, [r1, #8]
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	4928      	ldr	r1, [pc, #160]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fb8:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	4922      	ldr	r1, [pc, #136]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60cb      	str	r3, [r1, #12]
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fc6:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	491e      	ldr	r1, [pc, #120]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	4918      	ldr	r1, [pc, #96]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
 8001fec:	e006      	b.n	8001ffc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fee:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	4914      	ldr	r1, [pc, #80]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d021      	beq.n	800204c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002008:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	490e      	ldr	r1, [pc, #56]	@ (8002048 <HAL_GPIO_Init+0x2d0>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e021      	b.n	800205a <HAL_GPIO_Init+0x2e2>
 8002016:	bf00      	nop
 8002018:	10320000 	.word	0x10320000
 800201c:	10310000 	.word	0x10310000
 8002020:	10220000 	.word	0x10220000
 8002024:	10210000 	.word	0x10210000
 8002028:	10120000 	.word	0x10120000
 800202c:	10110000 	.word	0x10110000
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000
 8002038:	40010800 	.word	0x40010800
 800203c:	40010c00 	.word	0x40010c00
 8002040:	40011000 	.word	0x40011000
 8002044:	40011400 	.word	0x40011400
 8002048:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_GPIO_Init+0x304>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	43db      	mvns	r3, r3
 8002054:	4909      	ldr	r1, [pc, #36]	@ (800207c <HAL_GPIO_Init+0x304>)
 8002056:	4013      	ands	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	3301      	adds	r3, #1
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	fa22 f303 	lsr.w	r3, r2, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	f47f ae8e 	bne.w	8001d8c <HAL_GPIO_Init+0x14>
  }
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	372c      	adds	r7, #44	@ 0x2c
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	40010400 	.word	0x40010400

08002080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800209c:	e003      	b.n	80020a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800209e:	887b      	ldrh	r3, [r7, #2]
 80020a0:	041a      	lsls	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	611a      	str	r2, [r3, #16]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0e8      	b.n	8002294 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f006 ff98 	bl	800900c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2203      	movs	r2, #3
 80020e0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 febd 	bl	8004e6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3304      	adds	r3, #4
 80020fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fe:	f002 fe93 	bl	8004e28 <USB_CoreInit>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0bf      	b.n	8002294 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f002 fec1 	bl	8004ea2 <USB_SetCurrentMode>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0b0      	b.n	8002294 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
 8002136:	e03e      	b.n	80021b6 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	440b      	add	r3, r1
 8002146:	3311      	adds	r3, #17
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	3310      	adds	r3, #16
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	3313      	adds	r3, #19
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	3320      	adds	r3, #32
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	3324      	adds	r3, #36	@ 0x24
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	3301      	adds	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	791b      	ldrb	r3, [r3, #4]
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d3bb      	bcc.n	8002138 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e044      	b.n	8002250 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	440b      	add	r3, r1
 8002216:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	3301      	adds	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	791b      	ldrb	r3, [r3, #4]
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	429a      	cmp	r2, r3
 8002258:	d3b5      	bcc.n	80021c6 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3304      	adds	r3, #4
 8002262:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002264:	f002 fe29 	bl	8004eba <USB_DevInit>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e00c      	b.n	8002294 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f005 f8a8 	bl	80073e2 <USB_DevDisconnect>

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_PCD_Start+0x16>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e016      	b.n	80022e0 <HAL_PCD_Start+0x44>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 fdbf 	bl	8004e42 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80022c4:	2101      	movs	r1, #1
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f007 f913 	bl	80094f2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f005 f87c 	bl	80073ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f005 f87e 	bl	80073f6 <USB_ReadInterrupts>
 80022fa:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fb1a 	bl	8002940 <PCD_EP_ISR_Handler>

    return;
 800230c:	e119      	b.n	8002542 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002320:	b29a      	uxth	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800232a:	b292      	uxth	r2, r2
 800232c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f006 fee6 	bl	8009102 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002336:	2100      	movs	r1, #0
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f905 	bl	8002548 <HAL_PCD_SetAddress>

    return;
 800233e:	e100      	b.n	8002542 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002352:	b29a      	uxth	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800235c:	b292      	uxth	r2, r2
 800235e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002362:	e0ee      	b.n	8002542 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00c      	beq.n	8002388 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002376:	b29a      	uxth	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002380:	b292      	uxth	r2, r2
 8002382:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002386:	e0dc      	b.n	8002542 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d027      	beq.n	80023e2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800239a:	b29a      	uxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0204 	bic.w	r2, r2, #4
 80023a4:	b292      	uxth	r2, r2
 80023a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0208 	bic.w	r2, r2, #8
 80023bc:	b292      	uxth	r2, r2
 80023be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f006 fed6 	bl	8009174 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023da:	b292      	uxth	r2, r2
 80023dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80023e0:	e0af      	b.n	8002542 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8083 	beq.w	80024f4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	77fb      	strb	r3, [r7, #31]
 80023f2:	e010      	b.n	8002416 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	7ffb      	ldrb	r3, [r7, #31]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	441a      	add	r2, r3
 8002400:	7ffb      	ldrb	r3, [r7, #31]
 8002402:	8812      	ldrh	r2, [r2, #0]
 8002404:	b292      	uxth	r2, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	3320      	adds	r3, #32
 800240a:	443b      	add	r3, r7
 800240c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002410:	7ffb      	ldrb	r3, [r7, #31]
 8002412:	3301      	adds	r3, #1
 8002414:	77fb      	strb	r3, [r7, #31]
 8002416:	7ffb      	ldrb	r3, [r7, #31]
 8002418:	2b07      	cmp	r3, #7
 800241a:	d9eb      	bls.n	80023f4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002424:	b29a      	uxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	b292      	uxth	r2, r2
 8002430:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800243c:	b29a      	uxth	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	b292      	uxth	r2, r2
 8002448:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800244c:	bf00      	nop
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002456:	b29b      	uxth	r3, r3
 8002458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f6      	beq.n	800244e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002468:	b29a      	uxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002472:	b292      	uxth	r2, r2
 8002474:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002478:	2300      	movs	r3, #0
 800247a:	77fb      	strb	r3, [r7, #31]
 800247c:	e00f      	b.n	800249e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800247e:	7ffb      	ldrb	r3, [r7, #31]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	4611      	mov	r1, r2
 8002486:	7ffa      	ldrb	r2, [r7, #31]
 8002488:	0092      	lsls	r2, r2, #2
 800248a:	440a      	add	r2, r1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	3320      	adds	r3, #32
 8002490:	443b      	add	r3, r7
 8002492:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002496:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002498:	7ffb      	ldrb	r3, [r7, #31]
 800249a:	3301      	adds	r3, #1
 800249c:	77fb      	strb	r3, [r7, #31]
 800249e:	7ffb      	ldrb	r3, [r7, #31]
 80024a0:	2b07      	cmp	r3, #7
 80024a2:	d9ec      	bls.n	800247e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0208 	orr.w	r2, r2, #8
 80024b6:	b292      	uxth	r2, r2
 80024b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ce:	b292      	uxth	r2, r2
 80024d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0204 	orr.w	r2, r2, #4
 80024e6:	b292      	uxth	r2, r2
 80024e8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f006 fe27 	bl	8009140 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80024f2:	e026      	b.n	8002542 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00f      	beq.n	800251e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002506:	b29a      	uxth	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002510:	b292      	uxth	r2, r2
 8002512:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f006 fde5 	bl	80090e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800251c:	e011      	b.n	8002542 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00c      	beq.n	8002542 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002530:	b29a      	uxth	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800253a:	b292      	uxth	r2, r2
 800253c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002540:	bf00      	nop
  }
}
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_PCD_SetAddress+0x1a>
 800255e:	2302      	movs	r3, #2
 8002560:	e012      	b.n	8002588 <HAL_PCD_SetAddress+0x40>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f004 ff15 	bl	80073a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	4608      	mov	r0, r1
 800259a:	4611      	mov	r1, r2
 800259c:	461a      	mov	r2, r3
 800259e:	4603      	mov	r3, r0
 80025a0:	70fb      	strb	r3, [r7, #3]
 80025a2:	460b      	mov	r3, r1
 80025a4:	803b      	strh	r3, [r7, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da0e      	bge.n	80025d4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f003 0207 	and.w	r2, r3, #7
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	3310      	adds	r3, #16
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	705a      	strb	r2, [r3, #1]
 80025d2:	e00e      	b.n	80025f2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	f003 0207 	and.w	r2, r3, #7
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025fe:	883a      	ldrh	r2, [r7, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	78ba      	ldrb	r2, [r7, #2]
 8002608:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800260a:	78bb      	ldrb	r3, [r7, #2]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d102      	bne.n	8002616 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_PCD_EP_Open+0x94>
 8002620:	2302      	movs	r3, #2
 8002622:	e00e      	b.n	8002642 <HAL_PCD_EP_Open+0xb2>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68f9      	ldr	r1, [r7, #12]
 8002632:	4618      	mov	r0, r3
 8002634:	f002 fc5e 	bl	8004ef4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002640:	7afb      	ldrb	r3, [r7, #11]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002656:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265a:	2b00      	cmp	r3, #0
 800265c:	da0e      	bge.n	800267c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	f003 0207 	and.w	r2, r3, #7
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	3310      	adds	r3, #16
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	705a      	strb	r2, [r3, #1]
 800267a:	e00e      	b.n	800269a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	f003 0207 	and.w	r2, r3, #7
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_PCD_EP_Close+0x6a>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e00e      	b.n	80026d2 <HAL_PCD_EP_Close+0x88>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 ffd6 	bl	8005674 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b086      	sub	sp, #24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	460b      	mov	r3, r1
 80026e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ea:	7afb      	ldrb	r3, [r7, #11]
 80026ec:	f003 0207 	and.w	r2, r3, #7
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2200      	movs	r2, #0
 8002712:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2200      	movs	r2, #0
 8002718:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800271a:	7afb      	ldrb	r3, [r7, #11]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	b2da      	uxtb	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6979      	ldr	r1, [r7, #20]
 800272c:	4618      	mov	r0, r3
 800272e:	f003 f98d 	bl	8005a4c <USB_EPStartXfer>

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	f003 0207 	and.w	r2, r3, #7
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	460b      	mov	r3, r1
 8002778:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800277a:	7afb      	ldrb	r3, [r7, #11]
 800277c:	f003 0207 	and.w	r2, r3, #7
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	3310      	adds	r3, #16
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4413      	add	r3, r2
 800278e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2200      	movs	r2, #0
 80027ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2201      	movs	r2, #1
 80027b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b6:	7afb      	ldrb	r3, [r7, #11]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6979      	ldr	r1, [r7, #20]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f003 f93f 	bl	8005a4c <USB_EPStartXfer>

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	7912      	ldrb	r2, [r2, #4]
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e04c      	b.n	8002890 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	da0e      	bge.n	800281c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	f003 0207 	and.w	r2, r3, #7
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	3310      	adds	r3, #16
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2201      	movs	r2, #1
 8002818:	705a      	strb	r2, [r3, #1]
 800281a:	e00c      	b.n	8002836 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	b2da      	uxtb	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_PCD_EP_SetStall+0x7e>
 8002852:	2302      	movs	r3, #2
 8002854:	e01c      	b.n	8002890 <HAL_PCD_EP_SetStall+0xb8>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68f9      	ldr	r1, [r7, #12]
 8002864:	4618      	mov	r0, r3
 8002866:	f004 fca2 	bl	80071ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	2b00      	cmp	r3, #0
 8002872:	d108      	bne.n	8002886 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800287e:	4619      	mov	r1, r3
 8002880:	4610      	mov	r0, r2
 8002882:	f004 fdc7 	bl	8007414 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	7912      	ldrb	r2, [r2, #4]
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e040      	b.n	8002938 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	da0e      	bge.n	80028dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	f003 0207 	and.w	r2, r3, #7
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	3310      	adds	r3, #16
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	705a      	strb	r2, [r3, #1]
 80028da:	e00e      	b.n	80028fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 0207 	and.w	r2, r3, #7
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	b2da      	uxtb	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_PCD_EP_ClrStall+0x82>
 8002916:	2302      	movs	r3, #2
 8002918:	e00e      	b.n	8002938 <HAL_PCD_EP_ClrStall+0xa0>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68f9      	ldr	r1, [r7, #12]
 8002928:	4618      	mov	r0, r3
 800292a:	f004 fc90 	bl	800724e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b096      	sub	sp, #88	@ 0x58
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002948:	e3bb      	b.n	80030c2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002952:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002964:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002968:	2b00      	cmp	r3, #0
 800296a:	f040 8175 	bne.w	8002c58 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800296e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d14e      	bne.n	8002a18 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	b29b      	uxth	r3, r3
 8002982:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800298a:	81fb      	strh	r3, [r7, #14]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	89fb      	ldrh	r3, [r7, #14]
 8002992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299a:	b29b      	uxth	r3, r3
 800299c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3310      	adds	r3, #16
 80029a2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	3302      	adds	r3, #2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80029d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	441a      	add	r2, r3
 80029da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029dc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029de:	2100      	movs	r1, #0
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f006 fb66 	bl	80090b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7b5b      	ldrb	r3, [r3, #13]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8368 	beq.w	80030c2 <PCD_EP_ISR_Handler+0x782>
 80029f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 8363 	bne.w	80030c2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7b5b      	ldrb	r3, [r3, #13]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	735a      	strb	r2, [r3, #13]
 8002a16:	e354      	b.n	80030c2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a1e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a2a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d034      	beq.n	8002aa0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3306      	adds	r3, #6
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a60:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a6e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a72:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f004 fd1d 	bl	80074b4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002a86:	4013      	ands	r3, r2
 8002a88:	823b      	strh	r3, [r7, #16]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	8a3a      	ldrh	r2, [r7, #16]
 8002a90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a94:	b292      	uxth	r2, r2
 8002a96:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f006 fadd 	bl	8009058 <HAL_PCD_SetupStageCallback>
 8002a9e:	e310      	b.n	80030c2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002aa0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f280 830c 	bge.w	80030c2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	83fb      	strh	r3, [r7, #30]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	8bfa      	ldrh	r2, [r7, #30]
 8002ac0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ac4:	b292      	uxth	r2, r2
 8002ac6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	3306      	adds	r3, #6
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d019      	beq.n	8002b30 <PCD_EP_ISR_Handler+0x1f0>
 8002afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d015      	beq.n	8002b30 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0a:	6959      	ldr	r1, [r3, #20]
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b0e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b12:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f004 fccd 	bl	80074b4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	441a      	add	r2, r3
 8002b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b26:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b28:	2100      	movs	r1, #0
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f006 faa6 	bl	800907c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002b3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 82bd 	bne.w	80030c2 <PCD_EP_ISR_Handler+0x782>
 8002b48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b4c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002b50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b54:	f000 82b5 	beq.w	80030c2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b8e:	d91d      	bls.n	8002bcc <PCD_EP_ISR_Handler+0x28c>
 8002b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d102      	bne.n	8002baa <PCD_EP_ISR_Handler+0x26a>
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	029b      	lsls	r3, r3, #10
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	801a      	strh	r2, [r3, #0]
 8002bca:	e026      	b.n	8002c1a <PCD_EP_ISR_Handler+0x2da>
 8002bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <PCD_EP_ISR_Handler+0x2aa>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	801a      	strh	r2, [r3, #0]
 8002be8:	e017      	b.n	8002c1a <PCD_EP_ISR_Handler+0x2da>
 8002bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <PCD_EP_ISR_Handler+0x2c4>
 8002bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c00:	3301      	adds	r3, #1
 8002c02:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	881b      	ldrh	r3, [r3, #0]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	029b      	lsls	r3, r3, #10
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	4313      	orrs	r3, r2
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c2a:	827b      	strh	r3, [r7, #18]
 8002c2c:	8a7b      	ldrh	r3, [r7, #18]
 8002c2e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002c32:	827b      	strh	r3, [r7, #18]
 8002c34:	8a7b      	ldrh	r3, [r7, #18]
 8002c36:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002c3a:	827b      	strh	r3, [r7, #18]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	8a7b      	ldrh	r3, [r7, #18]
 8002c42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	8013      	strh	r3, [r2, #0]
 8002c56:	e234      	b.n	80030c2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c6c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f280 80fc 	bge.w	8002e6e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002ca4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ca8:	b292      	uxth	r2, r2
 8002caa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002cac:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc4:	7b1b      	ldrb	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d125      	bne.n	8002d16 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3306      	adds	r3, #6
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002cf6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8092 	beq.w	8002e24 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d06:	6959      	ldr	r1, [r3, #20]
 8002d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d0a:	88da      	ldrh	r2, [r3, #6]
 8002d0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d10:	f004 fbd0 	bl	80074b4 <USB_ReadPMA>
 8002d14:	e086      	b.n	8002e24 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d18:	78db      	ldrb	r3, [r3, #3]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d10a      	bne.n	8002d34 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d22:	461a      	mov	r2, r3
 8002d24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f9d9 	bl	80030de <HAL_PCD_EP_DB_Receive>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002d32:	e077      	b.n	8002e24 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d4e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	441a      	add	r2, r3
 8002d60:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002d64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d024      	beq.n	8002ddc <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	3302      	adds	r3, #2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002dbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d02e      	beq.n	8002e24 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dcc:	6959      	ldr	r1, [r3, #20]
 8002dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd0:	891a      	ldrh	r2, [r3, #8]
 8002dd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002dd6:	f004 fb6d 	bl	80074b4 <USB_ReadPMA>
 8002dda:	e023      	b.n	8002e24 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	3306      	adds	r3, #6
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e04:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002e08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d009      	beq.n	8002e24 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e16:	6959      	ldr	r1, [r3, #20]
 8002e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1a:	895a      	ldrh	r2, [r3, #10]
 8002e1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e20:	f004 fb48 	bl	80074b4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e26:	69da      	ldr	r2, [r3, #28]
 8002e28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e2c:	441a      	add	r2, r3
 8002e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e30:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e3a:	441a      	add	r2, r3
 8002e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e3e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <PCD_EP_ISR_Handler+0x514>
 8002e48:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d206      	bcs.n	8002e62 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f006 f90e 	bl	800907c <HAL_PCD_DataOutStageCallback>
 8002e60:	e005      	b.n	8002e6e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 fdef 	bl	8005a4c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 8123 	beq.w	80030c2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e7c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	3310      	adds	r3, #16
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eaa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	441a      	add	r2, r3
 8002ebc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ece:	78db      	ldrb	r3, [r3, #3]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	f040 80a2 	bne.w	800301a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ede:	7b1b      	ldrb	r3, [r3, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8093 	beq.w	800300c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ee6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d046      	beq.n	8002f80 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ef4:	785b      	ldrb	r3, [r3, #1]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d126      	bne.n	8002f48 <PCD_EP_ISR_Handler+0x608>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0e:	4413      	add	r3, r2
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	011a      	lsls	r2, r3, #4
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f20:	623b      	str	r3, [r7, #32]
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	801a      	strh	r2, [r3, #0]
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	801a      	strh	r2, [r3, #0]
 8002f46:	e061      	b.n	800300c <PCD_EP_ISR_Handler+0x6cc>
 8002f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4a:	785b      	ldrb	r3, [r3, #1]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d15d      	bne.n	800300c <PCD_EP_ISR_Handler+0x6cc>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	4413      	add	r3, r2
 8002f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	011a      	lsls	r2, r3, #4
 8002f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f70:	4413      	add	r3, r2
 8002f72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	801a      	strh	r2, [r3, #0]
 8002f7e:	e045      	b.n	800300c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d126      	bne.n	8002fdc <PCD_EP_ISR_Handler+0x69c>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa2:	4413      	add	r3, r2
 8002fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	011a      	lsls	r2, r3, #4
 8002fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fae:	4413      	add	r3, r2
 8002fb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002fb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc4:	801a      	strh	r2, [r3, #0]
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	801a      	strh	r2, [r3, #0]
 8002fda:	e017      	b.n	800300c <PCD_EP_ISR_Handler+0x6cc>
 8002fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fde:	785b      	ldrb	r3, [r3, #1]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d113      	bne.n	800300c <PCD_EP_ISR_Handler+0x6cc>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ff2:	4413      	add	r3, r2
 8002ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	011a      	lsls	r2, r3, #4
 8002ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ffe:	4413      	add	r3, r2
 8003000:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003004:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003008:	2200      	movs	r2, #0
 800300a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800300c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	4619      	mov	r1, r3
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f006 f84d 	bl	80090b2 <HAL_PCD_DataInStageCallback>
 8003018:	e053      	b.n	80030c2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800301a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800301e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d146      	bne.n	80030b4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800302e:	b29b      	uxth	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4413      	add	r3, r2
 800303a:	3302      	adds	r3, #2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800304e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800305a:	429a      	cmp	r2, r3
 800305c:	d907      	bls.n	800306e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800305e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003066:	1ad2      	subs	r2, r2, r3
 8003068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306a:	619a      	str	r2, [r3, #24]
 800306c:	e002      	b.n	8003074 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800306e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d106      	bne.n	800308a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800307c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	4619      	mov	r1, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f006 f815 	bl	80090b2 <HAL_PCD_DataInStageCallback>
 8003088:	e01b      	b.n	80030c2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800308a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003092:	441a      	add	r2, r3
 8003094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003096:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800309a:	69da      	ldr	r2, [r3, #28]
 800309c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80030a0:	441a      	add	r2, r3
 80030a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 fccd 	bl	8005a4c <USB_EPStartXfer>
 80030b2:	e006      	b.n	80030c2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80030b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80030b8:	461a      	mov	r2, r3
 80030ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f91b 	bl	80032f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	b21b      	sxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f6ff ac3b 	blt.w	800294a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3758      	adds	r7, #88	@ 0x58
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b088      	sub	sp, #32
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	4613      	mov	r3, r2
 80030ea:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d07e      	beq.n	80031f4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030fe:	b29b      	uxth	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	3302      	adds	r3, #2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800311e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	699a      	ldr	r2, [r3, #24]
 8003124:	8b7b      	ldrh	r3, [r7, #26]
 8003126:	429a      	cmp	r2, r3
 8003128:	d306      	bcc.n	8003138 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	8b7b      	ldrh	r3, [r7, #26]
 8003130:	1ad2      	subs	r2, r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	619a      	str	r2, [r3, #24]
 8003136:	e002      	b.n	800313e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2200      	movs	r2, #0
 800313c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d123      	bne.n	800318e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800315c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003160:	833b      	strh	r3, [r7, #24]
 8003162:	8b3b      	ldrh	r3, [r7, #24]
 8003164:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003168:	833b      	strh	r3, [r7, #24]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	441a      	add	r2, r3
 8003178:	8b3b      	ldrh	r3, [r7, #24]
 800317a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800317e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800318a:	b29b      	uxth	r3, r3
 800318c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01f      	beq.n	80031d8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031b2:	82fb      	strh	r3, [r7, #22]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	8afb      	ldrh	r3, [r7, #22]
 80031c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80031d8:	8b7b      	ldrh	r3, [r7, #26]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8087 	beq.w	80032ee <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	6959      	ldr	r1, [r3, #20]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	891a      	ldrh	r2, [r3, #8]
 80031ec:	8b7b      	ldrh	r3, [r7, #26]
 80031ee:	f004 f961 	bl	80074b4 <USB_ReadPMA>
 80031f2:	e07c      	b.n	80032ee <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	3306      	adds	r3, #6
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	4413      	add	r3, r2
 8003212:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800321c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	8b7b      	ldrh	r3, [r7, #26]
 8003224:	429a      	cmp	r2, r3
 8003226:	d306      	bcc.n	8003236 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	8b7b      	ldrh	r3, [r7, #26]
 800322e:	1ad2      	subs	r2, r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	619a      	str	r2, [r3, #24]
 8003234:	e002      	b.n	800323c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d123      	bne.n	800328c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800325a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800325e:	83fb      	strh	r3, [r7, #30]
 8003260:	8bfb      	ldrh	r3, [r7, #30]
 8003262:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003266:	83fb      	strh	r3, [r7, #30]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	8bfb      	ldrh	r3, [r7, #30]
 8003278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800327c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003288:	b29b      	uxth	r3, r3
 800328a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d11f      	bne.n	80032d6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b0:	83bb      	strh	r3, [r7, #28]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	8bbb      	ldrh	r3, [r7, #28]
 80032c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80032d6:	8b7b      	ldrh	r3, [r7, #26]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	6959      	ldr	r1, [r3, #20]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	895a      	ldrh	r2, [r3, #10]
 80032e8:	8b7b      	ldrh	r3, [r7, #26]
 80032ea:	f004 f8e3 	bl	80074b4 <USB_ReadPMA>
    }
  }

  return count;
 80032ee:	8b7b      	ldrh	r3, [r7, #26]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b0a4      	sub	sp, #144	@ 0x90
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 81dd 	beq.w	80036cc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800331a:	b29b      	uxth	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	3302      	adds	r3, #2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800333a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003346:	429a      	cmp	r2, r3
 8003348:	d907      	bls.n	800335a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003352:	1ad2      	subs	r2, r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	619a      	str	r2, [r3, #24]
 8003358:	e002      	b.n	8003360 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2200      	movs	r2, #0
 800335e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	f040 80b9 	bne.w	80034dc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d126      	bne.n	80033c0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003380:	b29b      	uxth	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003386:	4413      	add	r3, r2
 8003388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	011a      	lsls	r2, r3, #4
 8003390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003392:	4413      	add	r3, r2
 8003394:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003398:	62bb      	str	r3, [r7, #40]	@ 0x28
 800339a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a8:	801a      	strh	r2, [r3, #0]
 80033aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033bc:	801a      	strh	r2, [r3, #0]
 80033be:	e01a      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	785b      	ldrb	r3, [r3, #1]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d116      	bne.n	80033f6 <HAL_PCD_EP_DB_Transmit+0xfe>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033dc:	4413      	add	r3, r2
 80033de:	637b      	str	r3, [r7, #52]	@ 0x34
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	011a      	lsls	r2, r3, #4
 80033e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e8:	4413      	add	r3, r2
 80033ea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	2200      	movs	r2, #0
 80033f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	785b      	ldrb	r3, [r3, #1]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d126      	bne.n	8003452 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003412:	b29b      	uxth	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	4413      	add	r3, r2
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	011a      	lsls	r2, r3, #4
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003436:	b29a      	uxth	r2, r3
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	801a      	strh	r2, [r3, #0]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800344a:	b29a      	uxth	r2, r3
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	801a      	strh	r2, [r3, #0]
 8003450:	e017      	b.n	8003482 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	785b      	ldrb	r3, [r3, #1]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d113      	bne.n	8003482 <HAL_PCD_EP_DB_Transmit+0x18a>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003462:	b29b      	uxth	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	4413      	add	r3, r2
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	011a      	lsls	r2, r3, #4
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	4413      	add	r3, r2
 8003476:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800347a:	623b      	str	r3, [r7, #32]
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	2200      	movs	r2, #0
 8003480:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	4619      	mov	r1, r3
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f005 fe12 	bl	80090b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 82fc 	beq.w	8003a92 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	881b      	ldrh	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b4:	82fb      	strh	r3, [r7, #22]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	441a      	add	r2, r3
 80034c4:	8afb      	ldrh	r3, [r7, #22]
 80034c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	8013      	strh	r3, [r2, #0]
 80034da:	e2da      	b.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d021      	beq.n	800352a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003500:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800351a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800351e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003526:	b29b      	uxth	r3, r3
 8003528:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003530:	2b01      	cmp	r3, #1
 8003532:	f040 82ae 	bne.w	8003a92 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800353e:	441a      	add	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800354c:	441a      	add	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	6a1a      	ldr	r2, [r3, #32]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	429a      	cmp	r2, r3
 800355c:	d30b      	bcc.n	8003576 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6a1a      	ldr	r2, [r3, #32]
 800356a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800356e:	1ad2      	subs	r2, r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	621a      	str	r2, [r3, #32]
 8003574:	e017      	b.n	80035a6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d108      	bne.n	8003590 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800357e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003582:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800358e:	e00a      	b.n	80035a6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	785b      	ldrb	r3, [r3, #1]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d165      	bne.n	800367a <HAL_PCD_EP_DB_Transmit+0x382>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035bc:	b29b      	uxth	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035c2:	4413      	add	r3, r2
 80035c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	011a      	lsls	r2, r3, #4
 80035cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ce:	4413      	add	r3, r2
 80035d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80035d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e4:	801a      	strh	r2, [r3, #0]
 80035e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80035ec:	d91d      	bls.n	800362a <HAL_PCD_EP_DB_Transmit+0x332>
 80035ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <HAL_PCD_EP_DB_Transmit+0x310>
 8003602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003604:	3b01      	subs	r3, #1
 8003606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29a      	uxth	r2, r3
 800360e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003610:	b29b      	uxth	r3, r3
 8003612:	029b      	lsls	r3, r3, #10
 8003614:	b29b      	uxth	r3, r3
 8003616:	4313      	orrs	r3, r2
 8003618:	b29b      	uxth	r3, r3
 800361a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800361e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003622:	b29a      	uxth	r2, r3
 8003624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	e044      	b.n	80036b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800362a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <HAL_PCD_EP_DB_Transmit+0x350>
 8003632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800363c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003640:	b29a      	uxth	r2, r3
 8003642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	e035      	b.n	80036b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003648:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_PCD_EP_DB_Transmit+0x36a>
 800365c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800365e:	3301      	adds	r3, #1
 8003660:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	b29a      	uxth	r2, r3
 8003668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800366a:	b29b      	uxth	r3, r3
 800366c:	029b      	lsls	r3, r3, #10
 800366e:	b29b      	uxth	r3, r3
 8003670:	4313      	orrs	r3, r2
 8003672:	b29a      	uxth	r2, r3
 8003674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003676:	801a      	strh	r2, [r3, #0]
 8003678:	e01c      	b.n	80036b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	785b      	ldrb	r3, [r3, #1]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d118      	bne.n	80036b4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	647b      	str	r3, [r7, #68]	@ 0x44
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003690:	b29b      	uxth	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003696:	4413      	add	r3, r2
 8003698:	647b      	str	r3, [r7, #68]	@ 0x44
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	011a      	lsls	r2, r3, #4
 80036a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036a2:	4413      	add	r3, r2
 80036a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80036aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	6959      	ldr	r1, [r3, #20]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	891a      	ldrh	r2, [r3, #8]
 80036c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	f003 feb0 	bl	800742a <USB_WritePMA>
 80036ca:	e1e2      	b.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	3306      	adds	r3, #6
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036f4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	699a      	ldr	r2, [r3, #24]
 80036fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003700:	429a      	cmp	r2, r3
 8003702:	d307      	bcc.n	8003714 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	699a      	ldr	r2, [r3, #24]
 8003708:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800370c:	1ad2      	subs	r2, r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	619a      	str	r2, [r3, #24]
 8003712:	e002      	b.n	800371a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2200      	movs	r2, #0
 8003718:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	f040 80c0 	bne.w	80038a4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	785b      	ldrb	r3, [r3, #1]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d126      	bne.n	800377a <HAL_PCD_EP_DB_Transmit+0x482>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800373a:	b29b      	uxth	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003740:	4413      	add	r3, r2
 8003742:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	011a      	lsls	r2, r3, #4
 800374a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800374c:	4413      	add	r3, r2
 800374e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003752:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375e:	b29a      	uxth	r2, r3
 8003760:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	b29b      	uxth	r3, r3
 800376a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800376e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003772:	b29a      	uxth	r2, r3
 8003774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003776:	801a      	strh	r2, [r3, #0]
 8003778:	e01a      	b.n	80037b0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d116      	bne.n	80037b0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	667b      	str	r3, [r7, #100]	@ 0x64
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003790:	b29b      	uxth	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003796:	4413      	add	r3, r2
 8003798:	667b      	str	r3, [r7, #100]	@ 0x64
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	011a      	lsls	r2, r3, #4
 80037a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037a2:	4413      	add	r3, r2
 80037a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80037a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80037aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037ac:	2200      	movs	r2, #0
 80037ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	677b      	str	r3, [r7, #116]	@ 0x74
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	785b      	ldrb	r3, [r3, #1]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d12b      	bne.n	8003816 <HAL_PCD_EP_DB_Transmit+0x51e>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037d2:	4413      	add	r3, r2
 80037d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	011a      	lsls	r2, r3, #4
 80037dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037de:	4413      	add	r3, r2
 80037e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037fa:	801a      	strh	r2, [r3, #0]
 80037fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800380c:	b29a      	uxth	r2, r3
 800380e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003812:	801a      	strh	r2, [r3, #0]
 8003814:	e017      	b.n	8003846 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	785b      	ldrb	r3, [r3, #1]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d113      	bne.n	8003846 <HAL_PCD_EP_DB_Transmit+0x54e>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003826:	b29b      	uxth	r3, r3
 8003828:	461a      	mov	r2, r3
 800382a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800382c:	4413      	add	r3, r2
 800382e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	011a      	lsls	r2, r3, #4
 8003836:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003838:	4413      	add	r3, r2
 800383a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800383e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003840:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003842:	2200      	movs	r2, #0
 8003844:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	4619      	mov	r1, r3
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f005 fc30 	bl	80090b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003858:	2b00      	cmp	r3, #0
 800385a:	f040 811a 	bne.w	8003a92 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003878:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800388e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003896:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800389a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800389e:	b29b      	uxth	r3, r3
 80038a0:	8013      	strh	r3, [r2, #0]
 80038a2:	e0f6      	b.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d121      	bne.n	80038f2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	441a      	add	r2, r3
 80038da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80038de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	f040 80ca 	bne.w	8003a92 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003906:	441a      	add	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	69da      	ldr	r2, [r3, #28]
 8003910:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003914:	441a      	add	r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	6a1a      	ldr	r2, [r3, #32]
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	429a      	cmp	r2, r3
 8003924:	d30b      	bcc.n	800393e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003936:	1ad2      	subs	r2, r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	621a      	str	r2, [r3, #32]
 800393c:	e017      	b.n	800396e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d108      	bne.n	8003958 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003946:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800394a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003956:	e00a      	b.n	800396e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2200      	movs	r2, #0
 8003964:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	657b      	str	r3, [r7, #84]	@ 0x54
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	785b      	ldrb	r3, [r3, #1]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d165      	bne.n	8003a48 <HAL_PCD_EP_DB_Transmit+0x750>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800398a:	b29b      	uxth	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003990:	4413      	add	r3, r2
 8003992:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	011a      	lsls	r2, r3, #4
 800399a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800399c:	4413      	add	r3, r2
 800399e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039b2:	801a      	strh	r2, [r3, #0]
 80039b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80039ba:	d91d      	bls.n	80039f8 <HAL_PCD_EP_DB_Transmit+0x700>
 80039bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80039d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039d2:	3b01      	subs	r3, #1
 80039d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29a      	uxth	r2, r3
 80039dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039de:	b29b      	uxth	r3, r3
 80039e0:	029b      	lsls	r3, r3, #10
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	4313      	orrs	r3, r2
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039f4:	801a      	strh	r2, [r3, #0]
 80039f6:	e041      	b.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x784>
 80039f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003a00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a12:	801a      	strh	r2, [r3, #0]
 8003a14:	e032      	b.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x784>
 8003a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_PCD_EP_DB_Transmit+0x738>
 8003a2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a32:	881b      	ldrh	r3, [r3, #0]
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	029b      	lsls	r3, r3, #10
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	e019      	b.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x784>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d115      	bne.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x784>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a5e:	4413      	add	r3, r2
 8003a60:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	011a      	lsls	r2, r3, #4
 8003a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a70:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a7a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6959      	ldr	r1, [r3, #20]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	895a      	ldrh	r2, [r3, #10]
 8003a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f003 fccc 	bl	800742a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003aa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aac:	82bb      	strh	r3, [r7, #20]
 8003aae:	8abb      	ldrh	r3, [r7, #20]
 8003ab0:	f083 0310 	eor.w	r3, r3, #16
 8003ab4:	82bb      	strh	r3, [r7, #20]
 8003ab6:	8abb      	ldrh	r3, [r7, #20]
 8003ab8:	f083 0320 	eor.w	r3, r3, #32
 8003abc:	82bb      	strh	r3, [r7, #20]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	441a      	add	r2, r3
 8003acc:	8abb      	ldrh	r3, [r7, #20]
 8003ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3790      	adds	r7, #144	@ 0x90
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	817b      	strh	r3, [r7, #10]
 8003afa:	4613      	mov	r3, r2
 8003afc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003afe:	897b      	ldrh	r3, [r7, #10]
 8003b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b0a:	897b      	ldrh	r3, [r7, #10]
 8003b0c:	f003 0207 	and.w	r2, r3, #7
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	3310      	adds	r3, #16
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e009      	b.n	8003b36 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b22:	897a      	ldrh	r2, [r7, #10]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b36:	893b      	ldrh	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	80da      	strh	r2, [r3, #6]
 8003b4a:	e00b      	b.n	8003b64 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e272      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8087 	beq.w	8003c9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b90:	4b92      	ldr	r3, [pc, #584]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d00c      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b9c:	4b8f      	ldr	r3, [pc, #572]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d112      	bne.n	8003bce <HAL_RCC_OscConfig+0x5e>
 8003ba8:	4b8c      	ldr	r3, [pc, #560]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb4:	d10b      	bne.n	8003bce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb6:	4b89      	ldr	r3, [pc, #548]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d06c      	beq.n	8003c9c <HAL_RCC_OscConfig+0x12c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d168      	bne.n	8003c9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e24c      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCC_OscConfig+0x76>
 8003bd8:	4b80      	ldr	r3, [pc, #512]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a7f      	ldr	r2, [pc, #508]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003bde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	e02e      	b.n	8003c44 <HAL_RCC_OscConfig+0xd4>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x98>
 8003bee:	4b7b      	ldr	r3, [pc, #492]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a7a      	ldr	r2, [pc, #488]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	4b78      	ldr	r3, [pc, #480]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a77      	ldr	r2, [pc, #476]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003c00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e01d      	b.n	8003c44 <HAL_RCC_OscConfig+0xd4>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0xbc>
 8003c12:	4b72      	ldr	r3, [pc, #456]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a71      	ldr	r2, [pc, #452]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b6f      	ldr	r3, [pc, #444]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6e      	ldr	r2, [pc, #440]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0xd4>
 8003c2c:	4b6b      	ldr	r3, [pc, #428]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a6a      	ldr	r2, [pc, #424]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b68      	ldr	r3, [pc, #416]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a67      	ldr	r2, [pc, #412]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fd fd46 	bl	80016dc <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fd fd42 	bl	80016dc <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	@ 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e200      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b5d      	ldr	r3, [pc, #372]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0xe4>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fd fd32 	bl	80016dc <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fd fd2e 	bl	80016dc <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	@ 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1ec      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8e:	4b53      	ldr	r3, [pc, #332]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0x10c>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d063      	beq.n	8003d72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003caa:	4b4c      	ldr	r3, [pc, #304]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cb6:	4b49      	ldr	r3, [pc, #292]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d11c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x18c>
 8003cc2:	4b46      	ldr	r3, [pc, #280]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	4b43      	ldr	r3, [pc, #268]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x176>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1c0      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4939      	ldr	r1, [pc, #228]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	e03a      	b.n	8003d72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d04:	4b36      	ldr	r3, [pc, #216]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0a:	f7fd fce7 	bl	80016dc <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fd fce3 	bl	80016dc <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1a1      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	4b2d      	ldr	r3, [pc, #180]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b2a      	ldr	r3, [pc, #168]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4927      	ldr	r1, [pc, #156]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	e015      	b.n	8003d72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d46:	4b26      	ldr	r3, [pc, #152]	@ (8003de0 <HAL_RCC_OscConfig+0x270>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fcc6 	bl	80016dc <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fd fcc2 	bl	80016dc <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e180      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	4b1d      	ldr	r3, [pc, #116]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d03a      	beq.n	8003df4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d019      	beq.n	8003dba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d86:	4b17      	ldr	r3, [pc, #92]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fca6 	bl	80016dc <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fd fca2 	bl	80016dc <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e160      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da6:	4b0d      	ldr	r3, [pc, #52]	@ (8003ddc <HAL_RCC_OscConfig+0x26c>)
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003db2:	2001      	movs	r0, #1
 8003db4:	f000 face 	bl	8004354 <RCC_Delay>
 8003db8:	e01c      	b.n	8003df4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dba:	4b0a      	ldr	r3, [pc, #40]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc0:	f7fd fc8c 	bl	80016dc <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc6:	e00f      	b.n	8003de8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc8:	f7fd fc88 	bl	80016dc <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d908      	bls.n	8003de8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e146      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	42420000 	.word	0x42420000
 8003de4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de8:	4b92      	ldr	r3, [pc, #584]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e9      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 80a6 	beq.w	8003f4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e02:	2300      	movs	r3, #0
 8003e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e06:	4b8b      	ldr	r3, [pc, #556]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10d      	bne.n	8003e2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e12:	4b88      	ldr	r3, [pc, #544]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	4a87      	ldr	r2, [pc, #540]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e1c:	61d3      	str	r3, [r2, #28]
 8003e1e:	4b85      	ldr	r3, [pc, #532]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2e:	4b82      	ldr	r3, [pc, #520]	@ (8004038 <HAL_RCC_OscConfig+0x4c8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d118      	bne.n	8003e6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8004038 <HAL_RCC_OscConfig+0x4c8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a7e      	ldr	r2, [pc, #504]	@ (8004038 <HAL_RCC_OscConfig+0x4c8>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e46:	f7fd fc49 	bl	80016dc <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4e:	f7fd fc45 	bl	80016dc <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b64      	cmp	r3, #100	@ 0x64
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e103      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e60:	4b75      	ldr	r3, [pc, #468]	@ (8004038 <HAL_RCC_OscConfig+0x4c8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d106      	bne.n	8003e82 <HAL_RCC_OscConfig+0x312>
 8003e74:	4b6f      	ldr	r3, [pc, #444]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	4a6e      	ldr	r2, [pc, #440]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6213      	str	r3, [r2, #32]
 8003e80:	e02d      	b.n	8003ede <HAL_RCC_OscConfig+0x36e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x334>
 8003e8a:	4b6a      	ldr	r3, [pc, #424]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4a69      	ldr	r2, [pc, #420]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	6213      	str	r3, [r2, #32]
 8003e96:	4b67      	ldr	r3, [pc, #412]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	4a66      	ldr	r2, [pc, #408]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003e9c:	f023 0304 	bic.w	r3, r3, #4
 8003ea0:	6213      	str	r3, [r2, #32]
 8003ea2:	e01c      	b.n	8003ede <HAL_RCC_OscConfig+0x36e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b05      	cmp	r3, #5
 8003eaa:	d10c      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x356>
 8003eac:	4b61      	ldr	r3, [pc, #388]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4a60      	ldr	r2, [pc, #384]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003eb2:	f043 0304 	orr.w	r3, r3, #4
 8003eb6:	6213      	str	r3, [r2, #32]
 8003eb8:	4b5e      	ldr	r3, [pc, #376]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	4a5d      	ldr	r2, [pc, #372]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6213      	str	r3, [r2, #32]
 8003ec4:	e00b      	b.n	8003ede <HAL_RCC_OscConfig+0x36e>
 8003ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4a5a      	ldr	r2, [pc, #360]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	6213      	str	r3, [r2, #32]
 8003ed2:	4b58      	ldr	r3, [pc, #352]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	4a57      	ldr	r2, [pc, #348]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d015      	beq.n	8003f12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee6:	f7fd fbf9 	bl	80016dc <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eec:	e00a      	b.n	8003f04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fd fbf5 	bl	80016dc <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e0b1      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f04:	4b4b      	ldr	r3, [pc, #300]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0ee      	beq.n	8003eee <HAL_RCC_OscConfig+0x37e>
 8003f10:	e014      	b.n	8003f3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f12:	f7fd fbe3 	bl	80016dc <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fd fbdf 	bl	80016dc <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e09b      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f30:	4b40      	ldr	r3, [pc, #256]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1ee      	bne.n	8003f1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d105      	bne.n	8003f4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f42:	4b3c      	ldr	r3, [pc, #240]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	4a3b      	ldr	r2, [pc, #236]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8087 	beq.w	8004066 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f58:	4b36      	ldr	r3, [pc, #216]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 030c 	and.w	r3, r3, #12
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d061      	beq.n	8004028 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d146      	bne.n	8003ffa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6c:	4b33      	ldr	r3, [pc, #204]	@ (800403c <HAL_RCC_OscConfig+0x4cc>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f72:	f7fd fbb3 	bl	80016dc <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7fd fbaf 	bl	80016dc <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e06d      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f8c:	4b29      	ldr	r3, [pc, #164]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f0      	bne.n	8003f7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa0:	d108      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fa2:	4b24      	ldr	r3, [pc, #144]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	4921      	ldr	r1, [pc, #132]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a19      	ldr	r1, [r3, #32]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	491b      	ldr	r1, [pc, #108]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <HAL_RCC_OscConfig+0x4cc>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd2:	f7fd fb83 	bl	80016dc <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fda:	f7fd fb7f 	bl	80016dc <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e03d      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fec:	4b11      	ldr	r3, [pc, #68]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x46a>
 8003ff8:	e035      	b.n	8004066 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffa:	4b10      	ldr	r3, [pc, #64]	@ (800403c <HAL_RCC_OscConfig+0x4cc>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fd fb6c 	bl	80016dc <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004008:	f7fd fb68 	bl	80016dc <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e026      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401a:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <HAL_RCC_OscConfig+0x4c4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0x498>
 8004026:	e01e      	b.n	8004066 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d107      	bne.n	8004040 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e019      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
 8004034:	40021000 	.word	0x40021000
 8004038:	40007000 	.word	0x40007000
 800403c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_RCC_OscConfig+0x500>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	429a      	cmp	r2, r3
 8004052:	d106      	bne.n	8004062 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d001      	beq.n	8004066 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40021000 	.word	0x40021000

08004074 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0d0      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004088:	4b6a      	ldr	r3, [pc, #424]	@ (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d910      	bls.n	80040b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b67      	ldr	r3, [pc, #412]	@ (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 0207 	bic.w	r2, r3, #7
 800409e:	4965      	ldr	r1, [pc, #404]	@ (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b63      	ldr	r3, [pc, #396]	@ (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0b8      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d0:	4b59      	ldr	r3, [pc, #356]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4a58      	ldr	r2, [pc, #352]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80040d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e8:	4b53      	ldr	r3, [pc, #332]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4a52      	ldr	r2, [pc, #328]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80040f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f4:	4b50      	ldr	r3, [pc, #320]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	494d      	ldr	r1, [pc, #308]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d040      	beq.n	8004194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	4b47      	ldr	r3, [pc, #284]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d115      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e07f      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d107      	bne.n	8004142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	4b41      	ldr	r3, [pc, #260]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e073      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b3d      	ldr	r3, [pc, #244]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e06b      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004152:	4b39      	ldr	r3, [pc, #228]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f023 0203 	bic.w	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4936      	ldr	r1, [pc, #216]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	4313      	orrs	r3, r2
 8004162:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004164:	f7fd faba 	bl	80016dc <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fd fab6 	bl	80016dc <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e053      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	4b2d      	ldr	r3, [pc, #180]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f003 020c 	and.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	429a      	cmp	r2, r3
 8004192:	d1eb      	bne.n	800416c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004194:	4b27      	ldr	r3, [pc, #156]	@ (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d210      	bcs.n	80041c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a2:	4b24      	ldr	r3, [pc, #144]	@ (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 0207 	bic.w	r2, r3, #7
 80041aa:	4922      	ldr	r1, [pc, #136]	@ (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b20      	ldr	r3, [pc, #128]	@ (8004234 <HAL_RCC_ClockConfig+0x1c0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e032      	b.n	800422a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d0:	4b19      	ldr	r3, [pc, #100]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4916      	ldr	r1, [pc, #88]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ee:	4b12      	ldr	r3, [pc, #72]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	490e      	ldr	r1, [pc, #56]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004202:	f000 f821 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 8004206:	4602      	mov	r2, r0
 8004208:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <HAL_RCC_ClockConfig+0x1c4>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	490a      	ldr	r1, [pc, #40]	@ (800423c <HAL_RCC_ClockConfig+0x1c8>)
 8004214:	5ccb      	ldrb	r3, [r1, r3]
 8004216:	fa22 f303 	lsr.w	r3, r2, r3
 800421a:	4a09      	ldr	r2, [pc, #36]	@ (8004240 <HAL_RCC_ClockConfig+0x1cc>)
 800421c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800421e:	4b09      	ldr	r3, [pc, #36]	@ (8004244 <HAL_RCC_ClockConfig+0x1d0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fd fa18 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40022000 	.word	0x40022000
 8004238:	40021000 	.word	0x40021000
 800423c:	0800dc98 	.word	0x0800dc98
 8004240:	2000000c 	.word	0x2000000c
 8004244:	20000010 	.word	0x20000010

08004248 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	2300      	movs	r3, #0
 800425c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004262:	4b1e      	ldr	r3, [pc, #120]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b04      	cmp	r3, #4
 8004270:	d002      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x30>
 8004272:	2b08      	cmp	r3, #8
 8004274:	d003      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0x36>
 8004276:	e027      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004278:	4b19      	ldr	r3, [pc, #100]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800427a:	613b      	str	r3, [r7, #16]
      break;
 800427c:	e027      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	0c9b      	lsrs	r3, r3, #18
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	4a17      	ldr	r2, [pc, #92]	@ (80042e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004288:	5cd3      	ldrb	r3, [r2, r3]
 800428a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d010      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004296:	4b11      	ldr	r3, [pc, #68]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x94>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	0c5b      	lsrs	r3, r3, #17
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	4a11      	ldr	r2, [pc, #68]	@ (80042e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042a2:	5cd3      	ldrb	r3, [r2, r3]
 80042a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a0d      	ldr	r2, [pc, #52]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80042aa:	fb03 f202 	mul.w	r2, r3, r2
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	e004      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a0c      	ldr	r2, [pc, #48]	@ (80042ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80042bc:	fb02 f303 	mul.w	r3, r2, r3
 80042c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	613b      	str	r3, [r7, #16]
      break;
 80042c6:	e002      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042c8:	4b05      	ldr	r3, [pc, #20]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80042ca:	613b      	str	r3, [r7, #16]
      break;
 80042cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ce:	693b      	ldr	r3, [r7, #16]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000
 80042e0:	007a1200 	.word	0x007a1200
 80042e4:	0800dcb0 	.word	0x0800dcb0
 80042e8:	0800dcc0 	.word	0x0800dcc0
 80042ec:	003d0900 	.word	0x003d0900

080042f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f4:	4b02      	ldr	r3, [pc, #8]	@ (8004300 <HAL_RCC_GetHCLKFreq+0x10>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	2000000c 	.word	0x2000000c

08004304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004308:	f7ff fff2 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 800430c:	4602      	mov	r2, r0
 800430e:	4b05      	ldr	r3, [pc, #20]	@ (8004324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4903      	ldr	r1, [pc, #12]	@ (8004328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800431a:	5ccb      	ldrb	r3, [r1, r3]
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40021000 	.word	0x40021000
 8004328:	0800dca8 	.word	0x0800dca8

0800432c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004330:	f7ff ffde 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b05      	ldr	r3, [pc, #20]	@ (800434c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	0adb      	lsrs	r3, r3, #11
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4903      	ldr	r1, [pc, #12]	@ (8004350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000
 8004350:	0800dca8 	.word	0x0800dca8

08004354 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800435c:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <RCC_Delay+0x34>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a0a      	ldr	r2, [pc, #40]	@ (800438c <RCC_Delay+0x38>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	0a5b      	lsrs	r3, r3, #9
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004370:	bf00      	nop
  }
  while (Delay --);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1e5a      	subs	r2, r3, #1
 8004376:	60fa      	str	r2, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f9      	bne.n	8004370 <RCC_Delay+0x1c>
}
 800437c:	bf00      	nop
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr
 8004388:	2000000c 	.word	0x2000000c
 800438c:	10624dd3 	.word	0x10624dd3

08004390 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d07d      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80043ac:	2300      	movs	r3, #0
 80043ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b0:	4b4f      	ldr	r3, [pc, #316]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10d      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043bc:	4b4c      	ldr	r3, [pc, #304]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	4a4b      	ldr	r2, [pc, #300]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c6:	61d3      	str	r3, [r2, #28]
 80043c8:	4b49      	ldr	r3, [pc, #292]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d0:	60bb      	str	r3, [r7, #8]
 80043d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d4:	2301      	movs	r3, #1
 80043d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d8:	4b46      	ldr	r3, [pc, #280]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d118      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043e4:	4b43      	ldr	r3, [pc, #268]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a42      	ldr	r2, [pc, #264]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f0:	f7fd f974 	bl	80016dc <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f6:	e008      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f8:	f7fd f970 	bl	80016dc <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	@ 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e06d      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440a:	4b3a      	ldr	r3, [pc, #232]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004416:	4b36      	ldr	r3, [pc, #216]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02e      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	429a      	cmp	r2, r3
 8004432:	d027      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004434:	4b2e      	ldr	r3, [pc, #184]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800443c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800443e:	4b2e      	ldr	r3, [pc, #184]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004444:	4b2c      	ldr	r3, [pc, #176]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800444a:	4a29      	ldr	r2, [pc, #164]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d014      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445a:	f7fd f93f 	bl	80016dc <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004460:	e00a      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004462:	f7fd f93b 	bl	80016dc <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004470:	4293      	cmp	r3, r2
 8004472:	d901      	bls.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e036      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004478:	4b1d      	ldr	r3, [pc, #116]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ee      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004484:	4b1a      	ldr	r3, [pc, #104]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4917      	ldr	r1, [pc, #92]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004492:	4313      	orrs	r3, r2
 8004494:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004496:	7dfb      	ldrb	r3, [r7, #23]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d105      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449c:	4b14      	ldr	r3, [pc, #80]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	4a13      	ldr	r2, [pc, #76]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044b4:	4b0e      	ldr	r3, [pc, #56]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	490b      	ldr	r1, [pc, #44]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044d2:	4b07      	ldr	r3, [pc, #28]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	4904      	ldr	r1, [pc, #16]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40007000 	.word	0x40007000
 80044f8:	42420440 	.word	0x42420440

080044fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e041      	b.n	8004592 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fc ff5e 	bl	80013e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	4610      	mov	r0, r2
 800453c:	f000 f8f0 	bl	8004720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e0ae      	b.n	8004718 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b0c      	cmp	r3, #12
 80045c6:	f200 809f 	bhi.w	8004708 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045ca:	a201      	add	r2, pc, #4	@ (adr r2, 80045d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d0:	08004605 	.word	0x08004605
 80045d4:	08004709 	.word	0x08004709
 80045d8:	08004709 	.word	0x08004709
 80045dc:	08004709 	.word	0x08004709
 80045e0:	08004645 	.word	0x08004645
 80045e4:	08004709 	.word	0x08004709
 80045e8:	08004709 	.word	0x08004709
 80045ec:	08004709 	.word	0x08004709
 80045f0:	08004687 	.word	0x08004687
 80045f4:	08004709 	.word	0x08004709
 80045f8:	08004709 	.word	0x08004709
 80045fc:	08004709 	.word	0x08004709
 8004600:	080046c7 	.word	0x080046c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	4618      	mov	r0, r3
 800460c:	f000 f8f6 	bl	80047fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0208 	orr.w	r2, r2, #8
 800461e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0204 	bic.w	r2, r2, #4
 800462e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6999      	ldr	r1, [r3, #24]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	619a      	str	r2, [r3, #24]
      break;
 8004642:	e064      	b.n	800470e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f93c 	bl	80048c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699a      	ldr	r2, [r3, #24]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800465e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800466e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6999      	ldr	r1, [r3, #24]
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	021a      	lsls	r2, r3, #8
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	619a      	str	r2, [r3, #24]
      break;
 8004684:	e043      	b.n	800470e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	4618      	mov	r0, r3
 800468e:	f000 f985 	bl	800499c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0208 	orr.w	r2, r2, #8
 80046a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0204 	bic.w	r2, r2, #4
 80046b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69d9      	ldr	r1, [r3, #28]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	61da      	str	r2, [r3, #28]
      break;
 80046c4:	e023      	b.n	800470e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 f9cf 	bl	8004a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69da      	ldr	r2, [r3, #28]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69d9      	ldr	r1, [r3, #28]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	021a      	lsls	r2, r3, #8
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	61da      	str	r2, [r3, #28]
      break;
 8004706:	e002      	b.n	800470e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	75fb      	strb	r3, [r7, #23]
      break;
 800470c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a2f      	ldr	r2, [pc, #188]	@ (80047f0 <TIM_Base_SetConfig+0xd0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00b      	beq.n	8004750 <TIM_Base_SetConfig+0x30>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473e:	d007      	beq.n	8004750 <TIM_Base_SetConfig+0x30>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a2c      	ldr	r2, [pc, #176]	@ (80047f4 <TIM_Base_SetConfig+0xd4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d003      	beq.n	8004750 <TIM_Base_SetConfig+0x30>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a2b      	ldr	r2, [pc, #172]	@ (80047f8 <TIM_Base_SetConfig+0xd8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d108      	bne.n	8004762 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a22      	ldr	r2, [pc, #136]	@ (80047f0 <TIM_Base_SetConfig+0xd0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00b      	beq.n	8004782 <TIM_Base_SetConfig+0x62>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004770:	d007      	beq.n	8004782 <TIM_Base_SetConfig+0x62>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a1f      	ldr	r2, [pc, #124]	@ (80047f4 <TIM_Base_SetConfig+0xd4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d003      	beq.n	8004782 <TIM_Base_SetConfig+0x62>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a1e      	ldr	r2, [pc, #120]	@ (80047f8 <TIM_Base_SetConfig+0xd8>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d108      	bne.n	8004794 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a0d      	ldr	r2, [pc, #52]	@ (80047f0 <TIM_Base_SetConfig+0xd0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d103      	bne.n	80047c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	611a      	str	r2, [r3, #16]
  }
}
 80047e6:	bf00      	nop
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800

080047fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f023 0201 	bic.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800482a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0303 	bic.w	r3, r3, #3
 8004832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 0302 	bic.w	r3, r3, #2
 8004844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a1c      	ldr	r2, [pc, #112]	@ (80048c4 <TIM_OC1_SetConfig+0xc8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d10c      	bne.n	8004872 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f023 0308 	bic.w	r3, r3, #8
 800485e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f023 0304 	bic.w	r3, r3, #4
 8004870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a13      	ldr	r2, [pc, #76]	@ (80048c4 <TIM_OC1_SetConfig+0xc8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d111      	bne.n	800489e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	621a      	str	r2, [r3, #32]
}
 80048b8:	bf00      	nop
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40012c00 	.word	0x40012c00

080048c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f023 0210 	bic.w	r2, r3, #16
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0320 	bic.w	r3, r3, #32
 8004912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a1d      	ldr	r2, [pc, #116]	@ (8004998 <TIM_OC2_SetConfig+0xd0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d10d      	bne.n	8004944 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800492e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004942:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a14      	ldr	r2, [pc, #80]	@ (8004998 <TIM_OC2_SetConfig+0xd0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d113      	bne.n	8004974 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800495a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr
 8004998:	40012c00 	.word	0x40012c00

0800499c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800499c:	b480      	push	{r7}
 800499e:	b087      	sub	sp, #28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0303 	bic.w	r3, r3, #3
 80049d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a6c <TIM_OC3_SetConfig+0xd0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d10d      	bne.n	8004a16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a14      	ldr	r2, [pc, #80]	@ (8004a6c <TIM_OC3_SetConfig+0xd0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d113      	bne.n	8004a46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	621a      	str	r2, [r3, #32]
}
 8004a60:	bf00      	nop
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40012c00 	.word	0x40012c00

08004a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	031b      	lsls	r3, r3, #12
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a0f      	ldr	r2, [pc, #60]	@ (8004b08 <TIM_OC4_SetConfig+0x98>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d109      	bne.n	8004ae4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ad6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	019b      	lsls	r3, r3, #6
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr
 8004b08:	40012c00 	.word	0x40012c00

08004b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e046      	b.n	8004bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a16      	ldr	r2, [pc, #88]	@ (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00e      	beq.n	8004b86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b70:	d009      	beq.n	8004b86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a12      	ldr	r2, [pc, #72]	@ (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a10      	ldr	r2, [pc, #64]	@ (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d10c      	bne.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr
 8004bbc:	40012c00 	.word	0x40012c00
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800

08004bc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e03d      	b.n	8004c60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr

08004c6a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b082      	sub	sp, #8
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e042      	b.n	8004d02 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fc fc59 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2224      	movs	r2, #36	@ 0x24
 8004c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004cac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f82c 	bl	8004d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cc2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695a      	ldr	r2, [r3, #20]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cd2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ce2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689a      	ldr	r2, [r3, #8]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004d46:	f023 030c 	bic.w	r3, r3, #12
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	430b      	orrs	r3, r1
 8004d52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e20 <UART_SetConfig+0x114>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d103      	bne.n	8004d7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d74:	f7ff fada 	bl	800432c <HAL_RCC_GetPCLK2Freq>
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	e002      	b.n	8004d82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f7ff fac2 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8004d80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009a      	lsls	r2, r3, #2
 8004d8c:	441a      	add	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	4a22      	ldr	r2, [pc, #136]	@ (8004e24 <UART_SetConfig+0x118>)
 8004d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	0119      	lsls	r1, r3, #4
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009a      	lsls	r2, r3, #2
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004db8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e24 <UART_SetConfig+0x118>)
 8004dba:	fba3 0302 	umull	r0, r3, r3, r2
 8004dbe:	095b      	lsrs	r3, r3, #5
 8004dc0:	2064      	movs	r0, #100	@ 0x64
 8004dc2:	fb00 f303 	mul.w	r3, r0, r3
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	3332      	adds	r3, #50	@ 0x32
 8004dcc:	4a15      	ldr	r2, [pc, #84]	@ (8004e24 <UART_SetConfig+0x118>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dd8:	4419      	add	r1, r3
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	009a      	lsls	r2, r3, #2
 8004de4:	441a      	add	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004df0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e24 <UART_SetConfig+0x118>)
 8004df2:	fba3 0302 	umull	r0, r3, r3, r2
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	2064      	movs	r0, #100	@ 0x64
 8004dfa:	fb00 f303 	mul.w	r3, r0, r3
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	3332      	adds	r3, #50	@ 0x32
 8004e04:	4a07      	ldr	r2, [pc, #28]	@ (8004e24 <UART_SetConfig+0x118>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	f003 020f 	and.w	r2, r3, #15
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	440a      	add	r2, r1
 8004e16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e18:	bf00      	nop
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40013800 	.word	0x40013800
 8004e24:	51eb851f 	.word	0x51eb851f

08004e28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	4638      	mov	r0, r7
 8004e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr

08004e42 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b085      	sub	sp, #20
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e52:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004e56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr

08004e6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b085      	sub	sp, #20
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e76:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004e7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr

08004ea2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b09d      	sub	sp, #116	@ 0x74
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	78db      	ldrb	r3, [r3, #3]
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d81f      	bhi.n	8004f66 <USB_ActivateEndpoint+0x72>
 8004f26:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <USB_ActivateEndpoint+0x38>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f3d 	.word	0x08004f3d
 8004f30:	08004f59 	.word	0x08004f59
 8004f34:	08004f6f 	.word	0x08004f6f
 8004f38:	08004f4b 	.word	0x08004f4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004f3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004f48:	e012      	b.n	8004f70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004f4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f4e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004f52:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004f56:	e00b      	b.n	8004f70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004f58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004f64:	e004      	b.n	8004f70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004f6c:	e000      	b.n	8004f70 <USB_ActivateEndpoint+0x7c>
      break;
 8004f6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	441a      	add	r2, r3
 8004f7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	441a      	add	r2, r3
 8004fbe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	7b1b      	ldrb	r3, [r3, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f040 8178 	bne.w	80052d0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8084 	beq.w	80050f2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	011a      	lsls	r2, r3, #4
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	88db      	ldrh	r3, [r3, #6]
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	b29b      	uxth	r3, r3
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	827b      	strh	r3, [r7, #18]
 800502c:	8a7b      	ldrh	r3, [r7, #18]
 800502e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01b      	beq.n	800506e <USB_ActivateEndpoint+0x17a>
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504c:	823b      	strh	r3, [r7, #16]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	441a      	add	r2, r3
 8005058:	8a3b      	ldrh	r3, [r7, #16]
 800505a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800505e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005066:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800506a:	b29b      	uxth	r3, r3
 800506c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	78db      	ldrb	r3, [r3, #3]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d020      	beq.n	80050b8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800508c:	81bb      	strh	r3, [r7, #12]
 800508e:	89bb      	ldrh	r3, [r7, #12]
 8005090:	f083 0320 	eor.w	r3, r3, #32
 8005094:	81bb      	strh	r3, [r7, #12]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	89bb      	ldrh	r3, [r7, #12]
 80050a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	8013      	strh	r3, [r2, #0]
 80050b6:	e2d5      	b.n	8005664 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ce:	81fb      	strh	r3, [r7, #14]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	441a      	add	r2, r3
 80050da:	89fb      	ldrh	r3, [r7, #14]
 80050dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	8013      	strh	r3, [r2, #0]
 80050f0:	e2b8      	b.n	8005664 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005102:	4413      	add	r3, r2
 8005104:	633b      	str	r3, [r7, #48]	@ 0x30
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	011a      	lsls	r2, r3, #4
 800510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510e:	4413      	add	r3, r2
 8005110:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	88db      	ldrh	r3, [r3, #6]
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	b29b      	uxth	r3, r3
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005124:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	62bb      	str	r3, [r7, #40]	@ 0x28
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005130:	b29b      	uxth	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005136:	4413      	add	r3, r2
 8005138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	011a      	lsls	r2, r3, #4
 8005140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005142:	4413      	add	r3, r2
 8005144:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005148:	627b      	str	r3, [r7, #36]	@ 0x24
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005154:	b29a      	uxth	r2, r3
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005160:	d91d      	bls.n	800519e <USB_ActivateEndpoint+0x2aa>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	66bb      	str	r3, [r7, #104]	@ 0x68
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	2b00      	cmp	r3, #0
 8005174:	d102      	bne.n	800517c <USB_ActivateEndpoint+0x288>
 8005176:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005178:	3b01      	subs	r3, #1
 800517a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29a      	uxth	r2, r3
 8005182:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005184:	b29b      	uxth	r3, r3
 8005186:	029b      	lsls	r3, r3, #10
 8005188:	b29b      	uxth	r3, r3
 800518a:	4313      	orrs	r3, r2
 800518c:	b29b      	uxth	r3, r3
 800518e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005196:	b29a      	uxth	r2, r3
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	801a      	strh	r2, [r3, #0]
 800519c:	e026      	b.n	80051ec <USB_ActivateEndpoint+0x2f8>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10a      	bne.n	80051bc <USB_ActivateEndpoint+0x2c8>
 80051a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	801a      	strh	r2, [r3, #0]
 80051ba:	e017      	b.n	80051ec <USB_ActivateEndpoint+0x2f8>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <USB_ActivateEndpoint+0x2e2>
 80051d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051d2:	3301      	adds	r3, #1
 80051d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	b29a      	uxth	r2, r3
 80051dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051de:	b29b      	uxth	r3, r3
 80051e0:	029b      	lsls	r3, r3, #10
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	4313      	orrs	r3, r2
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80051fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80051fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01b      	beq.n	800523c <USB_ActivateEndpoint+0x348>
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521a:	843b      	strh	r3, [r7, #32]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	8c3b      	ldrh	r3, [r7, #32]
 8005228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800522c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005230:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005238:	b29b      	uxth	r3, r3
 800523a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d124      	bne.n	800528e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525a:	83bb      	strh	r3, [r7, #28]
 800525c:	8bbb      	ldrh	r3, [r7, #28]
 800525e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005262:	83bb      	strh	r3, [r7, #28]
 8005264:	8bbb      	ldrh	r3, [r7, #28]
 8005266:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800526a:	83bb      	strh	r3, [r7, #28]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	441a      	add	r2, r3
 8005276:	8bbb      	ldrh	r3, [r7, #28]
 8005278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800527c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005288:	b29b      	uxth	r3, r3
 800528a:	8013      	strh	r3, [r2, #0]
 800528c:	e1ea      	b.n	8005664 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052a4:	83fb      	strh	r3, [r7, #30]
 80052a6:	8bfb      	ldrh	r3, [r7, #30]
 80052a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80052ac:	83fb      	strh	r3, [r7, #30]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	441a      	add	r2, r3
 80052b8:	8bfb      	ldrh	r3, [r7, #30]
 80052ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	8013      	strh	r3, [r2, #0]
 80052ce:	e1c9      	b.n	8005664 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	78db      	ldrb	r3, [r3, #3]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d11e      	bne.n	8005316 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ee:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	441a      	add	r2, r3
 80052fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005308:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800530c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005310:	b29b      	uxth	r3, r3
 8005312:	8013      	strh	r3, [r2, #0]
 8005314:	e01d      	b.n	8005352 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	441a      	add	r2, r3
 800533a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800534a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800535c:	b29b      	uxth	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005362:	4413      	add	r3, r2
 8005364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	011a      	lsls	r2, r3, #4
 800536c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800536e:	4413      	add	r3, r2
 8005370:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005374:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	891b      	ldrh	r3, [r3, #8]
 800537a:	085b      	lsrs	r3, r3, #1
 800537c:	b29b      	uxth	r3, r3
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	657b      	str	r3, [r7, #84]	@ 0x54
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005390:	b29b      	uxth	r3, r3
 8005392:	461a      	mov	r2, r3
 8005394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005396:	4413      	add	r3, r2
 8005398:	657b      	str	r3, [r7, #84]	@ 0x54
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	011a      	lsls	r2, r3, #4
 80053a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80053a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	895b      	ldrh	r3, [r3, #10]
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	785b      	ldrb	r3, [r3, #1]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f040 8093 	bne.w	80054ea <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80053d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80053d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01b      	beq.n	8005418 <USB_ActivateEndpoint+0x524>
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800540c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005414:	b29b      	uxth	r3, r3
 8005416:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005426:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01b      	beq.n	8005468 <USB_ActivateEndpoint+0x574>
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	b29b      	uxth	r3, r3
 800543e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005446:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	441a      	add	r2, r3
 8005452:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800545c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005460:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005464:	b29b      	uxth	r3, r3
 8005466:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29b      	uxth	r3, r3
 8005476:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800547a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005480:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005482:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005486:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005488:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800548a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800548e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800549c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	441a      	add	r2, r3
 80054d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80054d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	8013      	strh	r3, [r2, #0]
 80054e8:	e0bc      	b.n	8005664 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80054fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80054fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01d      	beq.n	8005542 <USB_ActivateEndpoint+0x64e>
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800551c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800552e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005532:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005536:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800553a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800553e:	b29b      	uxth	r3, r3
 8005540:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005552:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01d      	beq.n	800559a <USB_ActivateEndpoint+0x6a6>
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005574:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	441a      	add	r2, r3
 8005582:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005586:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800558a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800558e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005592:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	78db      	ldrb	r3, [r3, #3]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d024      	beq.n	80055ec <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055b8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80055bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80055c0:	f083 0320 	eor.w	r3, r3, #32
 80055c4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	441a      	add	r2, r3
 80055d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80055d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	8013      	strh	r3, [r2, #0]
 80055ea:	e01d      	b.n	8005628 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005602:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	441a      	add	r2, r3
 8005610:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800561c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005624:	b29b      	uxth	r3, r3
 8005626:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800563a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	441a      	add	r2, r3
 800564c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800565c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005664:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005668:	4618      	mov	r0, r3
 800566a:	3774      	adds	r7, #116	@ 0x74
 800566c:	46bd      	mov	sp, r7
 800566e:	bc80      	pop	{r7}
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop

08005674 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005674:	b480      	push	{r7}
 8005676:	b08d      	sub	sp, #52	@ 0x34
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	7b1b      	ldrb	r3, [r3, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f040 808e 	bne.w	80057a4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d044      	beq.n	800571a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	81bb      	strh	r3, [r7, #12]
 800569e:	89bb      	ldrh	r3, [r7, #12]
 80056a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d01b      	beq.n	80056e0 <USB_DeactivateEndpoint+0x6c>
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056be:	817b      	strh	r3, [r7, #10]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	441a      	add	r2, r3
 80056ca:	897b      	ldrh	r3, [r7, #10]
 80056cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056dc:	b29b      	uxth	r3, r3
 80056de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056f6:	813b      	strh	r3, [r7, #8]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	441a      	add	r2, r3
 8005702:	893b      	ldrh	r3, [r7, #8]
 8005704:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005708:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800570c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005714:	b29b      	uxth	r3, r3
 8005716:	8013      	strh	r3, [r2, #0]
 8005718:	e192      	b.n	8005a40 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	827b      	strh	r3, [r7, #18]
 8005728:	8a7b      	ldrh	r3, [r7, #18]
 800572a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01b      	beq.n	800576a <USB_DeactivateEndpoint+0xf6>
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005748:	823b      	strh	r3, [r7, #16]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	441a      	add	r2, r3
 8005754:	8a3b      	ldrh	r3, [r7, #16]
 8005756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800575a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800575e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005766:	b29b      	uxth	r3, r3
 8005768:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29b      	uxth	r3, r3
 8005778:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800577c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005780:	81fb      	strh	r3, [r7, #14]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	441a      	add	r2, r3
 800578c:	89fb      	ldrh	r3, [r7, #14]
 800578e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005792:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800579a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800579e:	b29b      	uxth	r3, r3
 80057a0:	8013      	strh	r3, [r2, #0]
 80057a2:	e14d      	b.n	8005a40 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	785b      	ldrb	r3, [r3, #1]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f040 80a5 	bne.w	80058f8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	843b      	strh	r3, [r7, #32]
 80057bc:	8c3b      	ldrh	r3, [r7, #32]
 80057be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01b      	beq.n	80057fe <USB_DeactivateEndpoint+0x18a>
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057dc:	83fb      	strh	r3, [r7, #30]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	441a      	add	r2, r3
 80057e8:	8bfb      	ldrh	r3, [r7, #30]
 80057ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	83bb      	strh	r3, [r7, #28]
 800580c:	8bbb      	ldrh	r3, [r7, #28]
 800580e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01b      	beq.n	800584e <USB_DeactivateEndpoint+0x1da>
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	b29b      	uxth	r3, r3
 8005824:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582c:	837b      	strh	r3, [r7, #26]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	441a      	add	r2, r3
 8005838:	8b7b      	ldrh	r3, [r7, #26]
 800583a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800583e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005846:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800584a:	b29b      	uxth	r3, r3
 800584c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005864:	833b      	strh	r3, [r7, #24]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	441a      	add	r2, r3
 8005870:	8b3b      	ldrh	r3, [r7, #24]
 8005872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800587a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800587e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005882:	b29b      	uxth	r3, r3
 8005884:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29b      	uxth	r3, r3
 8005894:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589c:	82fb      	strh	r3, [r7, #22]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	441a      	add	r2, r3
 80058a8:	8afb      	ldrh	r3, [r7, #22]
 80058aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058d4:	82bb      	strh	r3, [r7, #20]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	441a      	add	r2, r3
 80058e0:	8abb      	ldrh	r3, [r7, #20]
 80058e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	8013      	strh	r3, [r2, #0]
 80058f6:	e0a3      	b.n	8005a40 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005906:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01b      	beq.n	8005948 <USB_DeactivateEndpoint+0x2d4>
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005926:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	441a      	add	r2, r3
 8005932:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005934:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005938:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800593c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005944:	b29b      	uxth	r3, r3
 8005946:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005956:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01b      	beq.n	8005998 <USB_DeactivateEndpoint+0x324>
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005976:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	441a      	add	r2, r3
 8005982:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005984:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005988:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800598c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005990:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005994:	b29b      	uxth	r3, r3
 8005996:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	441a      	add	r2, r3
 80059ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	441a      	add	r2, r3
 80059f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	441a      	add	r2, r3
 8005a2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3734      	adds	r7, #52	@ 0x34
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr

08005a4c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b0c2      	sub	sp, #264	@ 0x108
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a5a:	6018      	str	r0, [r3, #0]
 8005a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a64:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	f040 86b7 	bne.w	80067e6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699a      	ldr	r2, [r3, #24]
 8005a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d908      	bls.n	8005aa6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005a94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005aa4:	e007      	b.n	8005ab6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	7b1b      	ldrb	r3, [r3, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d13a      	bne.n	8005b3c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6959      	ldr	r1, [r3, #20]
 8005ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	88da      	ldrh	r2, [r3, #6]
 8005ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ae8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005aec:	6800      	ldr	r0, [r0, #0]
 8005aee:	f001 fc9c 	bl	800742a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	613b      	str	r3, [r7, #16]
 8005afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	4413      	add	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	011a      	lsls	r2, r3, #4
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4413      	add	r3, r2
 8005b28:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	f000 be1f 	b.w	800677a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	78db      	ldrb	r3, [r3, #3]
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	f040 8462 	bne.w	8006412 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6a1a      	ldr	r2, [r3, #32]
 8005b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	f240 83df 	bls.w	800632a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	881b      	ldrh	r3, [r3, #0]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b92:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	441a      	add	r2, r3
 8005bb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005bb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bbc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6a1a      	ldr	r2, [r3, #32]
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd8:	1ad2      	subs	r2, r2, r3
 8005bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 81c7 	beq.w	8005f9c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d177      	bne.n	8005d1a <USB_EPStartXfer+0x2ce>
 8005c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4a:	4413      	add	r3, r2
 8005c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	011a      	lsls	r2, r3, #4
 8005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5e:	4413      	add	r3, r2
 8005c60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	801a      	strh	r2, [r3, #0]
 8005c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c7c:	d921      	bls.n	8005cc2 <USB_EPStartXfer+0x276>
 8005c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8c:	f003 031f 	and.w	r3, r3, #31
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d104      	bne.n	8005c9e <USB_EPStartXfer+0x252>
 8005c94:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	029b      	lsls	r3, r3, #10
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	e050      	b.n	8005d64 <USB_EPStartXfer+0x318>
 8005cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <USB_EPStartXfer+0x294>
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	801a      	strh	r2, [r3, #0]
 8005cde:	e041      	b.n	8005d64 <USB_EPStartXfer+0x318>
 8005ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce4:	085b      	lsrs	r3, r3, #1
 8005ce6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <USB_EPStartXfer+0x2b4>
 8005cf6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	029b      	lsls	r3, r3, #10
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	4313      	orrs	r3, r2
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	801a      	strh	r2, [r3, #0]
 8005d18:	e024      	b.n	8005d64 <USB_EPStartXfer+0x318>
 8005d1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	785b      	ldrb	r3, [r3, #1]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d11c      	bne.n	8005d64 <USB_EPStartXfer+0x318>
 8005d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3e:	4413      	add	r3, r2
 8005d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	011a      	lsls	r2, r3, #4
 8005d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d52:	4413      	add	r3, r2
 8005d54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d62:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	895b      	ldrh	r3, [r3, #10]
 8005d70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6959      	ldr	r1, [r3, #20]
 8005d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d92:	6800      	ldr	r0, [r0, #0]
 8005d94:	f001 fb49 	bl	800742a <USB_WritePMA>
            ep->xfer_buff += len;
 8005d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da8:	441a      	add	r2, r3
 8005daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6a1a      	ldr	r2, [r3, #32]
 8005dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d90f      	bls.n	8005df2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6a1a      	ldr	r2, [r3, #32]
 8005dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de2:	1ad2      	subs	r2, r2, r3
 8005de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	621a      	str	r2, [r3, #32]
 8005df0:	e00e      	b.n	8005e10 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005df6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d177      	bne.n	8005f10 <USB_EPStartXfer+0x4c4>
 8005e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	4413      	add	r3, r2
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	011a      	lsls	r2, r3, #4
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	801a      	strh	r2, [r3, #0]
 8005e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e70:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e72:	d921      	bls.n	8005eb8 <USB_EPStartXfer+0x46c>
 8005e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e82:	f003 031f 	and.w	r3, r3, #31
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <USB_EPStartXfer+0x448>
 8005e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	029b      	lsls	r3, r3, #10
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	e056      	b.n	8005f66 <USB_EPStartXfer+0x51a>
 8005eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <USB_EPStartXfer+0x48a>
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	801a      	strh	r2, [r3, #0]
 8005ed4:	e047      	b.n	8005f66 <USB_EPStartXfer+0x51a>
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d004      	beq.n	8005ef6 <USB_EPStartXfer+0x4aa>
 8005eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	029b      	lsls	r3, r3, #10
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4313      	orrs	r3, r2
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	e02a      	b.n	8005f66 <USB_EPStartXfer+0x51a>
 8005f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	785b      	ldrb	r3, [r3, #1]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d122      	bne.n	8005f66 <USB_EPStartXfer+0x51a>
 8005f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	623b      	str	r3, [r7, #32]
 8005f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	6a3b      	ldr	r3, [r7, #32]
 8005f40:	4413      	add	r3, r2
 8005f42:	623b      	str	r3, [r7, #32]
 8005f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	011a      	lsls	r2, r3, #4
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	891b      	ldrh	r3, [r3, #8]
 8005f72:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6959      	ldr	r1, [r3, #20]
 8005f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005f8c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005f90:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005f94:	6800      	ldr	r0, [r0, #0]
 8005f96:	f001 fa48 	bl	800742a <USB_WritePMA>
 8005f9a:	e3ee      	b.n	800677a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d177      	bne.n	800609c <USB_EPStartXfer+0x650>
 8005fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fcc:	4413      	add	r3, r2
 8005fce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	011a      	lsls	r2, r3, #4
 8005fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff6:	801a      	strh	r2, [r3, #0]
 8005ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ffc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ffe:	d921      	bls.n	8006044 <USB_EPStartXfer+0x5f8>
 8006000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800600a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600e:	f003 031f 	and.w	r3, r3, #31
 8006012:	2b00      	cmp	r3, #0
 8006014:	d104      	bne.n	8006020 <USB_EPStartXfer+0x5d4>
 8006016:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800601a:	3b01      	subs	r3, #1
 800601c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29a      	uxth	r2, r3
 8006026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800602a:	b29b      	uxth	r3, r3
 800602c:	029b      	lsls	r3, r3, #10
 800602e:	b29b      	uxth	r3, r3
 8006030:	4313      	orrs	r3, r2
 8006032:	b29b      	uxth	r3, r3
 8006034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800603c:	b29a      	uxth	r2, r3
 800603e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	e056      	b.n	80060f2 <USB_EPStartXfer+0x6a6>
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <USB_EPStartXfer+0x616>
 800604c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605a:	b29a      	uxth	r2, r3
 800605c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	e047      	b.n	80060f2 <USB_EPStartXfer+0x6a6>
 8006062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d004      	beq.n	8006082 <USB_EPStartXfer+0x636>
 8006078:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800607c:	3301      	adds	r3, #1
 800607e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29a      	uxth	r2, r3
 8006088:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800608c:	b29b      	uxth	r3, r3
 800608e:	029b      	lsls	r3, r3, #10
 8006090:	b29b      	uxth	r3, r3
 8006092:	4313      	orrs	r3, r2
 8006094:	b29a      	uxth	r2, r3
 8006096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006098:	801a      	strh	r2, [r3, #0]
 800609a:	e02a      	b.n	80060f2 <USB_EPStartXfer+0x6a6>
 800609c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d122      	bne.n	80060f2 <USB_EPStartXfer+0x6a6>
 80060ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80060b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060cc:	4413      	add	r3, r2
 80060ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80060d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	011a      	lsls	r2, r3, #4
 80060de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060e0:	4413      	add	r3, r2
 80060e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80060e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	891b      	ldrh	r3, [r3, #8]
 80060fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6959      	ldr	r1, [r3, #20]
 800610e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006112:	b29b      	uxth	r3, r3
 8006114:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006118:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800611c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006120:	6800      	ldr	r0, [r0, #0]
 8006122:	f001 f982 	bl	800742a <USB_WritePMA>
            ep->xfer_buff += len;
 8006126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006136:	441a      	add	r2, r3
 8006138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6a1a      	ldr	r2, [r3, #32]
 8006150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	429a      	cmp	r2, r3
 800615e:	d90f      	bls.n	8006180 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a1a      	ldr	r2, [r3, #32]
 800616c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006170:	1ad2      	subs	r2, r2, r3
 8006172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	621a      	str	r2, [r3, #32]
 800617e:	e00e      	b.n	800619e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2200      	movs	r2, #0
 800619c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800619e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80061aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	785b      	ldrb	r3, [r3, #1]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d177      	bne.n	80062aa <USB_EPStartXfer+0x85e>
 80061ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061da:	4413      	add	r3, r2
 80061dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	011a      	lsls	r2, r3, #4
 80061ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ee:	4413      	add	r3, r2
 80061f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006200:	b29a      	uxth	r2, r3
 8006202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620a:	2b3e      	cmp	r3, #62	@ 0x3e
 800620c:	d921      	bls.n	8006252 <USB_EPStartXfer+0x806>
 800620e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	2b00      	cmp	r3, #0
 8006222:	d104      	bne.n	800622e <USB_EPStartXfer+0x7e2>
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006228:	3b01      	subs	r3, #1
 800622a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800622e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29a      	uxth	r2, r3
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006238:	b29b      	uxth	r3, r3
 800623a:	029b      	lsls	r3, r3, #10
 800623c:	b29b      	uxth	r3, r3
 800623e:	4313      	orrs	r3, r2
 8006240:	b29b      	uxth	r3, r3
 8006242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624a:	b29a      	uxth	r2, r3
 800624c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	e050      	b.n	80062f4 <USB_EPStartXfer+0x8a8>
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <USB_EPStartXfer+0x824>
 800625a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006268:	b29a      	uxth	r2, r3
 800626a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626c:	801a      	strh	r2, [r3, #0]
 800626e:	e041      	b.n	80062f4 <USB_EPStartXfer+0x8a8>
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800627a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d004      	beq.n	8006290 <USB_EPStartXfer+0x844>
 8006286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628a:	3301      	adds	r3, #1
 800628c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29a      	uxth	r2, r3
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629a:	b29b      	uxth	r3, r3
 800629c:	029b      	lsls	r3, r3, #10
 800629e:	b29b      	uxth	r3, r3
 80062a0:	4313      	orrs	r3, r2
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a6:	801a      	strh	r2, [r3, #0]
 80062a8:	e024      	b.n	80062f4 <USB_EPStartXfer+0x8a8>
 80062aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	785b      	ldrb	r3, [r3, #1]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d11c      	bne.n	80062f4 <USB_EPStartXfer+0x8a8>
 80062ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ce:	4413      	add	r3, r2
 80062d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80062d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	011a      	lsls	r2, r3, #4
 80062e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062e2:	4413      	add	r3, r2
 80062e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	895b      	ldrh	r3, [r3, #10]
 8006300:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6959      	ldr	r1, [r3, #20]
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006314:	b29b      	uxth	r3, r3
 8006316:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800631a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800631e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006322:	6800      	ldr	r0, [r0, #0]
 8006324:	f001 f881 	bl	800742a <USB_WritePMA>
 8006328:	e227      	b.n	800677a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800633a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800635c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006360:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006368:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	441a      	add	r2, r3
 800637e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800638a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800638e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006392:	b29b      	uxth	r3, r3
 8006394:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	461a      	mov	r2, r3
 80063b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063b6:	4413      	add	r3, r2
 80063b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	011a      	lsls	r2, r3, #4
 80063c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063ca:	4413      	add	r3, r2
 80063cc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80063dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	891b      	ldrh	r3, [r3, #8]
 80063e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6959      	ldr	r1, [r3, #20]
 80063f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006402:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006406:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800640a:	6800      	ldr	r0, [r0, #0]
 800640c:	f001 f80d 	bl	800742a <USB_WritePMA>
 8006410:	e1b3      	b.n	800677a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6a1a      	ldr	r2, [r3, #32]
 800641e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006422:	1ad2      	subs	r2, r2, r3
 8006424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	881b      	ldrh	r3, [r3, #0]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80c6 	beq.w	80065e4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	673b      	str	r3, [r7, #112]	@ 0x70
 8006464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	785b      	ldrb	r3, [r3, #1]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d177      	bne.n	8006564 <USB_EPStartXfer+0xb18>
 8006474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006484:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006494:	4413      	add	r3, r2
 8006496:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	011a      	lsls	r2, r3, #4
 80064a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064a8:	4413      	add	r3, r2
 80064aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80064b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80064c6:	d921      	bls.n	800650c <USB_EPStartXfer+0xac0>
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <USB_EPStartXfer+0xa9c>
 80064de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064e2:	3b01      	subs	r3, #1
 80064e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80064e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	029b      	lsls	r3, r3, #10
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	4313      	orrs	r3, r2
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006504:	b29a      	uxth	r2, r3
 8006506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	e050      	b.n	80065ae <USB_EPStartXfer+0xb62>
 800650c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10a      	bne.n	800652a <USB_EPStartXfer+0xade>
 8006514:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29b      	uxth	r3, r3
 800651a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006522:	b29a      	uxth	r2, r3
 8006524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006526:	801a      	strh	r2, [r3, #0]
 8006528:	e041      	b.n	80065ae <USB_EPStartXfer+0xb62>
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d004      	beq.n	800654a <USB_EPStartXfer+0xafe>
 8006540:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006544:	3301      	adds	r3, #1
 8006546:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800654a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29a      	uxth	r2, r3
 8006550:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006554:	b29b      	uxth	r3, r3
 8006556:	029b      	lsls	r3, r3, #10
 8006558:	b29b      	uxth	r3, r3
 800655a:	4313      	orrs	r3, r2
 800655c:	b29a      	uxth	r2, r3
 800655e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006560:	801a      	strh	r2, [r3, #0]
 8006562:	e024      	b.n	80065ae <USB_EPStartXfer+0xb62>
 8006564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	785b      	ldrb	r3, [r3, #1]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d11c      	bne.n	80065ae <USB_EPStartXfer+0xb62>
 8006574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006582:	b29b      	uxth	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006588:	4413      	add	r3, r2
 800658a:	673b      	str	r3, [r7, #112]	@ 0x70
 800658c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	011a      	lsls	r2, r3, #4
 800659a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800659c:	4413      	add	r3, r2
 800659e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80065ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	895b      	ldrh	r3, [r3, #10]
 80065ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6959      	ldr	r1, [r3, #20]
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80065d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80065d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80065dc:	6800      	ldr	r0, [r0, #0]
 80065de:	f000 ff24 	bl	800742a <USB_WritePMA>
 80065e2:	e0ca      	b.n	800677a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d177      	bne.n	80066e4 <USB_EPStartXfer+0xc98>
 80065f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800660e:	b29b      	uxth	r3, r3
 8006610:	461a      	mov	r2, r3
 8006612:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006614:	4413      	add	r3, r2
 8006616:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	011a      	lsls	r2, r3, #4
 8006626:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006628:	4413      	add	r3, r2
 800662a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800662e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006630:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800663a:	b29a      	uxth	r2, r3
 800663c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006644:	2b3e      	cmp	r3, #62	@ 0x3e
 8006646:	d921      	bls.n	800668c <USB_EPStartXfer+0xc40>
 8006648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006656:	f003 031f 	and.w	r3, r3, #31
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <USB_EPStartXfer+0xc1c>
 800665e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006662:	3b01      	subs	r3, #1
 8006664:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29a      	uxth	r2, r3
 800666e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006672:	b29b      	uxth	r3, r3
 8006674:	029b      	lsls	r3, r3, #10
 8006676:	b29b      	uxth	r3, r3
 8006678:	4313      	orrs	r3, r2
 800667a:	b29b      	uxth	r3, r3
 800667c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006684:	b29a      	uxth	r2, r3
 8006686:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e05c      	b.n	8006746 <USB_EPStartXfer+0xcfa>
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <USB_EPStartXfer+0xc5e>
 8006694:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800669e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066a6:	801a      	strh	r2, [r3, #0]
 80066a8:	e04d      	b.n	8006746 <USB_EPStartXfer+0xcfa>
 80066aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80066b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <USB_EPStartXfer+0xc7e>
 80066c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80066c4:	3301      	adds	r3, #1
 80066c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80066ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	029b      	lsls	r3, r3, #10
 80066d8:	b29b      	uxth	r3, r3
 80066da:	4313      	orrs	r3, r2
 80066dc:	b29a      	uxth	r2, r3
 80066de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066e0:	801a      	strh	r2, [r3, #0]
 80066e2:	e030      	b.n	8006746 <USB_EPStartXfer+0xcfa>
 80066e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d128      	bne.n	8006746 <USB_EPStartXfer+0xcfa>
 80066f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006710:	b29b      	uxth	r3, r3
 8006712:	461a      	mov	r2, r3
 8006714:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006718:	4413      	add	r3, r2
 800671a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800671e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	011a      	lsls	r2, r3, #4
 800672c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006730:	4413      	add	r3, r2
 8006732:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006736:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673e:	b29a      	uxth	r2, r3
 8006740:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006744:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	891b      	ldrh	r3, [r3, #8]
 8006752:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6959      	ldr	r1, [r3, #20]
 8006762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006766:	b29b      	uxth	r3, r3
 8006768:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800676c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006770:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006774:	6800      	ldr	r0, [r0, #0]
 8006776:	f000 fe58 	bl	800742a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800677a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800679c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067a0:	817b      	strh	r3, [r7, #10]
 80067a2:	897b      	ldrh	r3, [r7, #10]
 80067a4:	f083 0310 	eor.w	r3, r3, #16
 80067a8:	817b      	strh	r3, [r7, #10]
 80067aa:	897b      	ldrh	r3, [r7, #10]
 80067ac:	f083 0320 	eor.w	r3, r3, #32
 80067b0:	817b      	strh	r3, [r7, #10]
 80067b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	441a      	add	r2, r3
 80067cc:	897b      	ldrh	r3, [r7, #10]
 80067ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067de:	b29b      	uxth	r3, r3
 80067e0:	8013      	strh	r3, [r2, #0]
 80067e2:	f000 bcde 	b.w	80071a2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80067e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	7b1b      	ldrb	r3, [r3, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f040 80bb 	bne.w	800696e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80067f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	699a      	ldr	r2, [r3, #24]
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	429a      	cmp	r2, r3
 8006812:	d917      	bls.n	8006844 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699a      	ldr	r2, [r3, #24]
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006834:	1ad2      	subs	r2, r2, r3
 8006836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	619a      	str	r2, [r3, #24]
 8006842:	e00e      	b.n	8006862 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2200      	movs	r2, #0
 8006860:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800687e:	b29b      	uxth	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006886:	4413      	add	r3, r2
 8006888:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800688c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	011a      	lsls	r2, r3, #4
 800689a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800689e:	4413      	add	r3, r2
 80068a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80068a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068ba:	801a      	strh	r2, [r3, #0]
 80068bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80068c2:	d924      	bls.n	800690e <USB_EPStartXfer+0xec2>
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d2:	f003 031f 	and.w	r3, r3, #31
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d104      	bne.n	80068e4 <USB_EPStartXfer+0xe98>
 80068da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80068de:	3b01      	subs	r3, #1
 80068e0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80068e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	029b      	lsls	r3, r3, #10
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	4313      	orrs	r3, r2
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006902:	b29a      	uxth	r2, r3
 8006904:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	f000 bc10 	b.w	800712e <USB_EPStartXfer+0x16e2>
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10c      	bne.n	8006930 <USB_EPStartXfer+0xee4>
 8006916:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	b29b      	uxth	r3, r3
 800691e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006926:	b29a      	uxth	r2, r3
 8006928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800692c:	801a      	strh	r2, [r3, #0]
 800692e:	e3fe      	b.n	800712e <USB_EPStartXfer+0x16e2>
 8006930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006934:	085b      	lsrs	r3, r3, #1
 8006936:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d004      	beq.n	8006950 <USB_EPStartXfer+0xf04>
 8006946:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800694a:	3301      	adds	r3, #1
 800694c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29a      	uxth	r2, r3
 8006958:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800695c:	b29b      	uxth	r3, r3
 800695e:	029b      	lsls	r3, r3, #10
 8006960:	b29b      	uxth	r3, r3
 8006962:	4313      	orrs	r3, r2
 8006964:	b29a      	uxth	r2, r3
 8006966:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800696a:	801a      	strh	r2, [r3, #0]
 800696c:	e3df      	b.n	800712e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800696e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	78db      	ldrb	r3, [r3, #3]
 800697a:	2b02      	cmp	r3, #2
 800697c:	f040 8218 	bne.w	8006db0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	785b      	ldrb	r3, [r3, #1]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f040 809d 	bne.w	8006acc <USB_EPStartXfer+0x1080>
 8006992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006996:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069b6:	4413      	add	r3, r2
 80069b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	011a      	lsls	r2, r3, #4
 80069ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069ce:	4413      	add	r3, r2
 80069d0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80069fa:	d92b      	bls.n	8006a54 <USB_EPStartXfer+0x1008>
 80069fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	095b      	lsrs	r3, r3, #5
 8006a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	f003 031f 	and.w	r3, r3, #31
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d104      	bne.n	8006a2c <USB_EPStartXfer+0xfe0>
 8006a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a26:	3b01      	subs	r3, #1
 8006a28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	029b      	lsls	r3, r3, #10
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	e070      	b.n	8006b36 <USB_EPStartXfer+0x10ea>
 8006a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10c      	bne.n	8006a7e <USB_EPStartXfer+0x1032>
 8006a64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006a7a:	801a      	strh	r2, [r3, #0]
 8006a7c:	e05b      	b.n	8006b36 <USB_EPStartXfer+0x10ea>
 8006a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d004      	beq.n	8006aae <USB_EPStartXfer+0x1062>
 8006aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006aae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	029b      	lsls	r3, r3, #10
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ac8:	801a      	strh	r2, [r3, #0]
 8006aca:	e034      	b.n	8006b36 <USB_EPStartXfer+0x10ea>
 8006acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	785b      	ldrb	r3, [r3, #1]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d12c      	bne.n	8006b36 <USB_EPStartXfer+0x10ea>
 8006adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	461a      	mov	r2, r3
 8006afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b00:	4413      	add	r3, r2
 8006b02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	011a      	lsls	r2, r3, #4
 8006b14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006b18:	4413      	add	r3, r2
 8006b1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006b34:	801a      	strh	r2, [r3, #0]
 8006b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f040 809d 	bne.w	8006c90 <USB_EPStartXfer+0x1244>
 8006b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	461a      	mov	r2, r3
 8006b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	011a      	lsls	r2, r3, #4
 8006b8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b92:	4413      	add	r3, r2
 8006b94:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bbe:	d92b      	bls.n	8006c18 <USB_EPStartXfer+0x11cc>
 8006bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	095b      	lsrs	r3, r3, #5
 8006bce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <USB_EPStartXfer+0x11a4>
 8006be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bea:	3b01      	subs	r3, #1
 8006bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	029b      	lsls	r3, r3, #10
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	4313      	orrs	r3, r2
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c14:	801a      	strh	r2, [r3, #0]
 8006c16:	e069      	b.n	8006cec <USB_EPStartXfer+0x12a0>
 8006c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10c      	bne.n	8006c42 <USB_EPStartXfer+0x11f6>
 8006c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c3e:	801a      	strh	r2, [r3, #0]
 8006c40:	e054      	b.n	8006cec <USB_EPStartXfer+0x12a0>
 8006c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d004      	beq.n	8006c72 <USB_EPStartXfer+0x1226>
 8006c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	029b      	lsls	r3, r3, #10
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	4313      	orrs	r3, r2
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c8c:	801a      	strh	r2, [r3, #0]
 8006c8e:	e02d      	b.n	8006cec <USB_EPStartXfer+0x12a0>
 8006c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d125      	bne.n	8006cec <USB_EPStartXfer+0x12a0>
 8006ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	011a      	lsls	r2, r3, #4
 8006cca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006cce:	4413      	add	r3, r2
 8006cd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006cd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006cd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006cea:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8218 	beq.w	800712e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d1e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d005      	beq.n	8006d36 <USB_EPStartXfer+0x12ea>
 8006d2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10d      	bne.n	8006d52 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f040 81f5 	bne.w	800712e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d44:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f040 81ee 	bne.w	800712e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d78:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	441a      	add	r2, r3
 8006d96:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006d9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006da6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	8013      	strh	r3, [r2, #0]
 8006dae:	e1be      	b.n	800712e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	78db      	ldrb	r3, [r3, #3]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	f040 81b4 	bne.w	800712a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d917      	bls.n	8006e0e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	699a      	ldr	r2, [r3, #24]
 8006dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfe:	1ad2      	subs	r2, r2, r3
 8006e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	619a      	str	r2, [r3, #24]
 8006e0c:	e00e      	b.n	8006e2c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f040 8085 	bne.w	8006f48 <USB_EPStartXfer+0x14fc>
 8006e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e62:	4413      	add	r3, r2
 8006e64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	011a      	lsls	r2, r3, #4
 8006e76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006e96:	801a      	strh	r2, [r3, #0]
 8006e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e9e:	d923      	bls.n	8006ee8 <USB_EPStartXfer+0x149c>
 8006ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eae:	f003 031f 	and.w	r3, r3, #31
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d104      	bne.n	8006ec0 <USB_EPStartXfer+0x1474>
 8006eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	029b      	lsls	r3, r3, #10
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ee4:	801a      	strh	r2, [r3, #0]
 8006ee6:	e060      	b.n	8006faa <USB_EPStartXfer+0x155e>
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10c      	bne.n	8006f0a <USB_EPStartXfer+0x14be>
 8006ef0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f06:	801a      	strh	r2, [r3, #0]
 8006f08:	e04f      	b.n	8006faa <USB_EPStartXfer+0x155e>
 8006f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f0e:	085b      	lsrs	r3, r3, #1
 8006f10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d004      	beq.n	8006f2a <USB_EPStartXfer+0x14de>
 8006f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f24:	3301      	adds	r3, #1
 8006f26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006f2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	029b      	lsls	r3, r3, #10
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	e030      	b.n	8006faa <USB_EPStartXfer+0x155e>
 8006f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d128      	bne.n	8006faa <USB_EPStartXfer+0x155e>
 8006f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	011a      	lsls	r2, r3, #4
 8006f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f94:	4413      	add	r3, r2
 8006f96:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006fa8:	801a      	strh	r2, [r3, #0]
 8006faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	785b      	ldrb	r3, [r3, #1]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f040 8085 	bne.w	80070d4 <USB_EPStartXfer+0x1688>
 8006fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006fee:	4413      	add	r3, r2
 8006ff0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	011a      	lsls	r2, r3, #4
 8007002:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007006:	4413      	add	r3, r2
 8007008:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800700c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007010:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800701c:	b29a      	uxth	r2, r3
 800701e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007022:	801a      	strh	r2, [r3, #0]
 8007024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007028:	2b3e      	cmp	r3, #62	@ 0x3e
 800702a:	d923      	bls.n	8007074 <USB_EPStartXfer+0x1628>
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007036:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800703a:	f003 031f 	and.w	r3, r3, #31
 800703e:	2b00      	cmp	r3, #0
 8007040:	d104      	bne.n	800704c <USB_EPStartXfer+0x1600>
 8007042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007046:	3b01      	subs	r3, #1
 8007048:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800704c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	b29a      	uxth	r2, r3
 8007054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007058:	b29b      	uxth	r3, r3
 800705a:	029b      	lsls	r3, r3, #10
 800705c:	b29b      	uxth	r3, r3
 800705e:	4313      	orrs	r3, r2
 8007060:	b29b      	uxth	r3, r3
 8007062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706a:	b29a      	uxth	r2, r3
 800706c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	e05c      	b.n	800712e <USB_EPStartXfer+0x16e2>
 8007074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10c      	bne.n	8007096 <USB_EPStartXfer+0x164a>
 800707c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708c:	b29a      	uxth	r2, r3
 800708e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007092:	801a      	strh	r2, [r3, #0]
 8007094:	e04b      	b.n	800712e <USB_EPStartXfer+0x16e2>
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709a:	085b      	lsrs	r3, r3, #1
 800709c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <USB_EPStartXfer+0x166a>
 80070ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070b0:	3301      	adds	r3, #1
 80070b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29a      	uxth	r2, r3
 80070be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	029b      	lsls	r3, r3, #10
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	4313      	orrs	r3, r2
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80070d0:	801a      	strh	r2, [r3, #0]
 80070d2:	e02c      	b.n	800712e <USB_EPStartXfer+0x16e2>
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	785b      	ldrb	r3, [r3, #1]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d124      	bne.n	800712e <USB_EPStartXfer+0x16e2>
 80070e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070fa:	4413      	add	r3, r2
 80070fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	011a      	lsls	r2, r3, #4
 800710e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007112:	4413      	add	r3, r2
 8007114:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007118:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800711c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007120:	b29a      	uxth	r2, r3
 8007122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	e001      	b.n	800712e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e03a      	b.n	80071a4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800712e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	b29b      	uxth	r3, r3
 800714c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007154:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007158:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800715c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007160:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007164:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007168:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800716c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007174:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	441a      	add	r2, r3
 800718a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800718e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007192:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800719a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800719e:	b29b      	uxth	r3, r3
 80071a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b085      	sub	sp, #20
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	785b      	ldrb	r3, [r3, #1]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d020      	beq.n	8007202 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071d6:	81bb      	strh	r3, [r7, #12]
 80071d8:	89bb      	ldrh	r3, [r7, #12]
 80071da:	f083 0310 	eor.w	r3, r3, #16
 80071de:	81bb      	strh	r3, [r7, #12]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	441a      	add	r2, r3
 80071ea:	89bb      	ldrh	r3, [r7, #12]
 80071ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	8013      	strh	r3, [r2, #0]
 8007200:	e01f      	b.n	8007242 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007218:	81fb      	strh	r3, [r7, #14]
 800721a:	89fb      	ldrh	r3, [r7, #14]
 800721c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007220:	81fb      	strh	r3, [r7, #14]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	441a      	add	r2, r3
 800722c:	89fb      	ldrh	r3, [r7, #14]
 800722e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800723a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800723e:	b29b      	uxth	r3, r3
 8007240:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr

0800724e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800724e:	b480      	push	{r7}
 8007250:	b087      	sub	sp, #28
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	7b1b      	ldrb	r3, [r3, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	f040 809d 	bne.w	800739c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d04c      	beq.n	8007304 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	823b      	strh	r3, [r7, #16]
 8007278:	8a3b      	ldrh	r3, [r7, #16]
 800727a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	d01b      	beq.n	80072ba <USB_EPClearStall+0x6c>
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	b29b      	uxth	r3, r3
 8007290:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007298:	81fb      	strh	r3, [r7, #14]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	441a      	add	r2, r3
 80072a4:	89fb      	ldrh	r3, [r7, #14]
 80072a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	78db      	ldrb	r3, [r3, #3]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d06c      	beq.n	800739c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072d8:	81bb      	strh	r3, [r7, #12]
 80072da:	89bb      	ldrh	r3, [r7, #12]
 80072dc:	f083 0320 	eor.w	r3, r3, #32
 80072e0:	81bb      	strh	r3, [r7, #12]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	441a      	add	r2, r3
 80072ec:	89bb      	ldrh	r3, [r7, #12]
 80072ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072fe:	b29b      	uxth	r3, r3
 8007300:	8013      	strh	r3, [r2, #0]
 8007302:	e04b      	b.n	800739c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	82fb      	strh	r3, [r7, #22]
 8007312:	8afb      	ldrh	r3, [r7, #22]
 8007314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01b      	beq.n	8007354 <USB_EPClearStall+0x106>
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	b29b      	uxth	r3, r3
 800732a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800732e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007332:	82bb      	strh	r3, [r7, #20]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	441a      	add	r2, r3
 800733e:	8abb      	ldrh	r3, [r7, #20]
 8007340:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007344:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007348:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800734c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007350:	b29b      	uxth	r3, r3
 8007352:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	881b      	ldrh	r3, [r3, #0]
 8007360:	b29b      	uxth	r3, r3
 8007362:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800736a:	827b      	strh	r3, [r7, #18]
 800736c:	8a7b      	ldrh	r3, [r7, #18]
 800736e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007372:	827b      	strh	r3, [r7, #18]
 8007374:	8a7b      	ldrh	r3, [r7, #18]
 8007376:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800737a:	827b      	strh	r3, [r7, #18]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	441a      	add	r2, r3
 8007386:	8a7b      	ldrh	r3, [r7, #18]
 8007388:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800738c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007390:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007398:	b29b      	uxth	r3, r3
 800739a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr

080073a8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2280      	movs	r2, #128	@ 0x80
 80073be:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bc80      	pop	{r7}
 80073cc:	4770      	bx	lr

080073ce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	bc80      	pop	{r7}
 80073e0:	4770      	bx	lr

080073e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bc80      	pop	{r7}
 80073f4:	4770      	bx	lr

080073f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007404:	b29b      	uxth	r3, r3
 8007406:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007408:	68fb      	ldr	r3, [r7, #12]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	bc80      	pop	{r7}
 8007412:	4770      	bx	lr

08007414 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	bc80      	pop	{r7}
 8007428:	4770      	bx	lr

0800742a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800742a:	b480      	push	{r7}
 800742c:	b08b      	sub	sp, #44	@ 0x2c
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	4611      	mov	r1, r2
 8007436:	461a      	mov	r2, r3
 8007438:	460b      	mov	r3, r1
 800743a:	80fb      	strh	r3, [r7, #6]
 800743c:	4613      	mov	r3, r2
 800743e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007440:	88bb      	ldrh	r3, [r7, #4]
 8007442:	3301      	adds	r3, #1
 8007444:	085b      	lsrs	r3, r3, #1
 8007446:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007450:	88fb      	ldrh	r3, [r7, #6]
 8007452:	005a      	lsls	r2, r3, #1
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800745c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	627b      	str	r3, [r7, #36]	@ 0x24
 8007462:	e01e      	b.n	80074a2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	3301      	adds	r3, #1
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	b21a      	sxth	r2, r3
 8007474:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007478:	4313      	orrs	r3, r2
 800747a:	b21b      	sxth	r3, r3
 800747c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	8a7a      	ldrh	r2, [r7, #18]
 8007482:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	3302      	adds	r3, #2
 8007488:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	3302      	adds	r3, #2
 800748e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	3301      	adds	r3, #1
 8007494:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	3301      	adds	r3, #1
 800749a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800749c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749e:	3b01      	subs	r3, #1
 80074a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1dd      	bne.n	8007464 <USB_WritePMA+0x3a>
  }
}
 80074a8:	bf00      	nop
 80074aa:	bf00      	nop
 80074ac:	372c      	adds	r7, #44	@ 0x2c
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bc80      	pop	{r7}
 80074b2:	4770      	bx	lr

080074b4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b08b      	sub	sp, #44	@ 0x2c
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	4611      	mov	r1, r2
 80074c0:	461a      	mov	r2, r3
 80074c2:	460b      	mov	r3, r1
 80074c4:	80fb      	strh	r3, [r7, #6]
 80074c6:	4613      	mov	r3, r2
 80074c8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80074ca:	88bb      	ldrh	r3, [r7, #4]
 80074cc:	085b      	lsrs	r3, r3, #1
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	005a      	lsls	r2, r3, #1
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074e6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80074ec:	e01b      	b.n	8007526 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	881b      	ldrh	r3, [r3, #0]
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	3302      	adds	r3, #2
 80074fa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	3301      	adds	r3, #1
 8007508:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	0a1b      	lsrs	r3, r3, #8
 800750e:	b2da      	uxtb	r2, r3
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	3301      	adds	r3, #1
 8007518:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	3302      	adds	r3, #2
 800751e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007522:	3b01      	subs	r3, #1
 8007524:	627b      	str	r3, [r7, #36]	@ 0x24
 8007526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e0      	bne.n	80074ee <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800752c:	88bb      	ldrh	r3, [r7, #4]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	b29b      	uxth	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	b2da      	uxtb	r2, r3
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	701a      	strb	r2, [r3, #0]
  }
}
 8007548:	bf00      	nop
 800754a:	372c      	adds	r7, #44	@ 0x2c
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr

08007552 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	460b      	mov	r3, r1
 800755c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	7c1b      	ldrb	r3, [r3, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d115      	bne.n	8007596 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800756a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800756e:	2202      	movs	r2, #2
 8007570:	2181      	movs	r1, #129	@ 0x81
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fe81 	bl	800927a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800757e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007582:	2202      	movs	r2, #2
 8007584:	2101      	movs	r1, #1
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 fe77 	bl	800927a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007594:	e012      	b.n	80075bc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007596:	2340      	movs	r3, #64	@ 0x40
 8007598:	2202      	movs	r2, #2
 800759a:	2181      	movs	r1, #129	@ 0x81
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fe6c 	bl	800927a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80075a8:	2340      	movs	r3, #64	@ 0x40
 80075aa:	2202      	movs	r2, #2
 80075ac:	2101      	movs	r1, #1
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f001 fe63 	bl	800927a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80075bc:	2308      	movs	r3, #8
 80075be:	2203      	movs	r2, #3
 80075c0:	2182      	movs	r1, #130	@ 0x82
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fe59 	bl	800927a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80075ce:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80075d2:	f001 ff79 	bl	80094c8 <USBD_static_malloc>
 80075d6:	4602      	mov	r2, r0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
 80075ec:	e026      	b.n	800763c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075f4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	7c1b      	ldrb	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d109      	bne.n	800762c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800761e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007622:	2101      	movs	r1, #1
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 ff18 	bl	800945a <USBD_LL_PrepareReceive>
 800762a:	e007      	b.n	800763c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007632:	2340      	movs	r3, #64	@ 0x40
 8007634:	2101      	movs	r1, #1
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 ff0f 	bl	800945a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007656:	2181      	movs	r1, #129	@ 0x81
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 fe34 	bl	80092c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007664:	2101      	movs	r1, #1
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 fe2d 	bl	80092c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007674:	2182      	movs	r1, #130	@ 0x82
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 fe25 	bl	80092c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00e      	beq.n	80076aa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800769c:	4618      	mov	r0, r3
 800769e:	f001 ff1f 	bl	80094e0 <USBD_static_free>
    pdev->pClassData = NULL;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076c4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d039      	beq.n	8007752 <USBD_CDC_Setup+0x9e>
 80076de:	2b20      	cmp	r3, #32
 80076e0:	d17f      	bne.n	80077e2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	88db      	ldrh	r3, [r3, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d029      	beq.n	800773e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b25b      	sxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	da11      	bge.n	8007718 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007700:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	88d2      	ldrh	r2, [r2, #6]
 8007706:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007708:	6939      	ldr	r1, [r7, #16]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	88db      	ldrh	r3, [r3, #6]
 800770e:	461a      	mov	r2, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fa05 	bl	8008b20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007716:	e06b      	b.n	80077f0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	785a      	ldrb	r2, [r3, #1]
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	88db      	ldrh	r3, [r3, #6]
 8007726:	b2da      	uxtb	r2, r3
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800772e:	6939      	ldr	r1, [r7, #16]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	88db      	ldrh	r3, [r3, #6]
 8007734:	461a      	mov	r2, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f001 fa20 	bl	8008b7c <USBD_CtlPrepareRx>
      break;
 800773c:	e058      	b.n	80077f0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	7850      	ldrb	r0, [r2, #1]
 800774a:	2200      	movs	r2, #0
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	4798      	blx	r3
      break;
 8007750:	e04e      	b.n	80077f0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	785b      	ldrb	r3, [r3, #1]
 8007756:	2b0b      	cmp	r3, #11
 8007758:	d02e      	beq.n	80077b8 <USBD_CDC_Setup+0x104>
 800775a:	2b0b      	cmp	r3, #11
 800775c:	dc38      	bgt.n	80077d0 <USBD_CDC_Setup+0x11c>
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <USBD_CDC_Setup+0xb4>
 8007762:	2b0a      	cmp	r3, #10
 8007764:	d014      	beq.n	8007790 <USBD_CDC_Setup+0xdc>
 8007766:	e033      	b.n	80077d0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800776e:	2b03      	cmp	r3, #3
 8007770:	d107      	bne.n	8007782 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007772:	f107 030c 	add.w	r3, r7, #12
 8007776:	2202      	movs	r2, #2
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 f9d0 	bl	8008b20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007780:	e02e      	b.n	80077e0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 f961 	bl	8008a4c <USBD_CtlError>
            ret = USBD_FAIL;
 800778a:	2302      	movs	r3, #2
 800778c:	75fb      	strb	r3, [r7, #23]
          break;
 800778e:	e027      	b.n	80077e0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007796:	2b03      	cmp	r3, #3
 8007798:	d107      	bne.n	80077aa <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800779a:	f107 030f 	add.w	r3, r7, #15
 800779e:	2201      	movs	r2, #1
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 f9bc 	bl	8008b20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077a8:	e01a      	b.n	80077e0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 f94d 	bl	8008a4c <USBD_CtlError>
            ret = USBD_FAIL;
 80077b2:	2302      	movs	r3, #2
 80077b4:	75fb      	strb	r3, [r7, #23]
          break;
 80077b6:	e013      	b.n	80077e0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d00d      	beq.n	80077de <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 f941 	bl	8008a4c <USBD_CtlError>
            ret = USBD_FAIL;
 80077ca:	2302      	movs	r3, #2
 80077cc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80077ce:	e006      	b.n	80077de <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 f93a 	bl	8008a4c <USBD_CtlError>
          ret = USBD_FAIL;
 80077d8:	2302      	movs	r3, #2
 80077da:	75fb      	strb	r3, [r7, #23]
          break;
 80077dc:	e000      	b.n	80077e0 <USBD_CDC_Setup+0x12c>
          break;
 80077de:	bf00      	nop
      }
      break;
 80077e0:	e006      	b.n	80077f0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f931 	bl	8008a4c <USBD_CtlError>
      ret = USBD_FAIL;
 80077ea:	2302      	movs	r3, #2
 80077ec:	75fb      	strb	r3, [r7, #23]
      break;
 80077ee:	bf00      	nop
  }

  return ret;
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	460b      	mov	r3, r1
 8007804:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800780c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007814:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800781c:	2b00      	cmp	r3, #0
 800781e:	d03a      	beq.n	8007896 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007820:	78fa      	ldrb	r2, [r7, #3]
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	4613      	mov	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4413      	add	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	440b      	add	r3, r1
 800782e:	331c      	adds	r3, #28
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d029      	beq.n	800788a <USBD_CDC_DataIn+0x90>
 8007836:	78fa      	ldrb	r2, [r7, #3]
 8007838:	6879      	ldr	r1, [r7, #4]
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	440b      	add	r3, r1
 8007844:	331c      	adds	r3, #28
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	78f9      	ldrb	r1, [r7, #3]
 800784a:	68b8      	ldr	r0, [r7, #8]
 800784c:	460b      	mov	r3, r1
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	440b      	add	r3, r1
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	4403      	add	r3, r0
 8007856:	3320      	adds	r3, #32
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	fbb2 f1f3 	udiv	r1, r2, r3
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d110      	bne.n	800788a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007868:	78fa      	ldrb	r2, [r7, #3]
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	4613      	mov	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	440b      	add	r3, r1
 8007876:	331c      	adds	r3, #28
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800787c:	78f9      	ldrb	r1, [r7, #3]
 800787e:	2300      	movs	r3, #0
 8007880:	2200      	movs	r2, #0
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f001 fdc6 	bl	8009414 <USBD_LL_Transmit>
 8007888:	e003      	b.n	8007892 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	e000      	b.n	8007898 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007896:	2302      	movs	r3, #2
  }
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 fdf1 	bl	80094a0 <USBD_LL_GetRxDataSize>
 80078be:	4602      	mov	r2, r0
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00d      	beq.n	80078ec <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80078e4:	4611      	mov	r1, r2
 80078e6:	4798      	blx	r3

    return USBD_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	e000      	b.n	80078ee <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80078ec:	2302      	movs	r3, #2
  }
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007904:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800790c:	2b00      	cmp	r3, #0
 800790e:	d014      	beq.n	800793a <USBD_CDC_EP0_RxReady+0x44>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007916:	2bff      	cmp	r3, #255	@ 0xff
 8007918:	d00f      	beq.n	800793a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007928:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007930:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	22ff      	movs	r2, #255	@ 0xff
 8007936:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2243      	movs	r2, #67	@ 0x43
 8007950:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007952:	4b03      	ldr	r3, [pc, #12]	@ (8007960 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	200000a0 	.word	0x200000a0

08007964 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2243      	movs	r2, #67	@ 0x43
 8007970:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007972:	4b03      	ldr	r3, [pc, #12]	@ (8007980 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007974:	4618      	mov	r0, r3
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	bc80      	pop	{r7}
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	2000005c 	.word	0x2000005c

08007984 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2243      	movs	r2, #67	@ 0x43
 8007990:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007992:	4b03      	ldr	r3, [pc, #12]	@ (80079a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007994:	4618      	mov	r0, r3
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	bc80      	pop	{r7}
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	200000e4 	.word	0x200000e4

080079a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	220a      	movs	r2, #10
 80079b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80079b2:	4b03      	ldr	r3, [pc, #12]	@ (80079c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bc80      	pop	{r7}
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	20000018 	.word	0x20000018

080079c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80079ce:	2302      	movs	r3, #2
 80079d0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bc80      	pop	{r7}
 80079ee:	4770      	bx	lr

080079f0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a04:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007a0e:	88fa      	ldrh	r2, [r7, #6]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	371c      	adds	r7, #28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr

08007a22 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b085      	sub	sp, #20
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a32:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bc80      	pop	{r7}
 8007a46:	4770      	bx	lr

08007a48 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d01c      	beq.n	8007a9c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d115      	bne.n	8007a98 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2181      	movs	r1, #129	@ 0x81
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 fcc0 	bl	8009414 <USBD_LL_Transmit>

      return USBD_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e002      	b.n	8007a9e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e000      	b.n	8007a9e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007a9c:	2302      	movs	r3, #2
  }
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ab4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d017      	beq.n	8007af0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	7c1b      	ldrb	r3, [r3, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d109      	bne.n	8007adc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 fcc0 	bl	800945a <USBD_LL_PrepareReceive>
 8007ada:	e007      	b.n	8007aec <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ae2:	2340      	movs	r3, #64	@ 0x40
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 fcb7 	bl	800945a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	e000      	b.n	8007af2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007af0:	2302      	movs	r3, #2
  }
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	4613      	mov	r3, r2
 8007b06:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e01a      	b.n	8007b48 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	79fa      	ldrb	r2, [r7, #7]
 8007b3e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f001 fb25 	bl	8009190 <USBD_LL_Init>

  return USBD_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d006      	beq.n	8007b72 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]
 8007b70:	e001      	b.n	8007b76 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007b72:	2302      	movs	r3, #2
 8007b74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bc80      	pop	{r7}
 8007b80:	4770      	bx	lr

08007b82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b082      	sub	sp, #8
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 fb5a 	bl	8009244 <USBD_LL_Start>

  return USBD_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bc80      	pop	{r7}
 8007bac:	4770      	bx	lr

08007bae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007bba:	2302      	movs	r3, #2
 8007bbc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00c      	beq.n	8007be2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	4798      	blx	r3
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	78fa      	ldrb	r2, [r7, #3]
 8007c02:	4611      	mov	r1, r2
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4798      	blx	r3

  return USBD_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 fed8 	bl	80089da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c38:	461a      	mov	r2, r3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007c46:	f003 031f 	and.w	r3, r3, #31
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d016      	beq.n	8007c7c <USBD_LL_SetupStage+0x6a>
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d81c      	bhi.n	8007c8c <USBD_LL_SetupStage+0x7a>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d002      	beq.n	8007c5c <USBD_LL_SetupStage+0x4a>
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d008      	beq.n	8007c6c <USBD_LL_SetupStage+0x5a>
 8007c5a:	e017      	b.n	8007c8c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f9cb 	bl	8008000 <USBD_StdDevReq>
      break;
 8007c6a:	e01a      	b.n	8007ca2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fa2d 	bl	80080d4 <USBD_StdItfReq>
      break;
 8007c7a:	e012      	b.n	8007ca2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 fa6d 	bl	8008164 <USBD_StdEPReq>
      break;
 8007c8a:	e00a      	b.n	8007ca2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8007c92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f001 fb32 	bl	8009304 <USBD_LL_StallEP>
      break;
 8007ca0:	bf00      	nop
  }

  return USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	607a      	str	r2, [r7, #4]
 8007cb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007cba:	7afb      	ldrb	r3, [r7, #11]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d14b      	bne.n	8007d58 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007cc6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d134      	bne.n	8007d3c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d919      	bls.n	8007d12 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	1ad2      	subs	r2, r2, r3
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d203      	bcs.n	8007d00 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	e002      	b.n	8007d06 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	461a      	mov	r2, r3
 8007d08:	6879      	ldr	r1, [r7, #4]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 ff54 	bl	8008bb8 <USBD_CtlContinueRx>
 8007d10:	e038      	b.n	8007d84 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d105      	bne.n	8007d34 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 ff51 	bl	8008bdc <USBD_CtlSendStatus>
 8007d3a:	e023      	b.n	8007d84 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d42:	2b05      	cmp	r3, #5
 8007d44:	d11e      	bne.n	8007d84 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007d4e:	2100      	movs	r1, #0
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f001 fad7 	bl	8009304 <USBD_LL_StallEP>
 8007d56:	e015      	b.n	8007d84 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00d      	beq.n	8007d80 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d108      	bne.n	8007d80 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	7afa      	ldrb	r2, [r7, #11]
 8007d78:	4611      	mov	r1, r2
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	4798      	blx	r3
 8007d7e:	e001      	b.n	8007d84 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d80:	2302      	movs	r3, #2
 8007d82:	e000      	b.n	8007d86 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b086      	sub	sp, #24
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	460b      	mov	r3, r1
 8007d98:	607a      	str	r2, [r7, #4]
 8007d9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d9c:	7afb      	ldrb	r3, [r7, #11]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d17f      	bne.n	8007ea2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3314      	adds	r3, #20
 8007da6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d15c      	bne.n	8007e6c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d915      	bls.n	8007dea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	1ad2      	subs	r2, r2, r3
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 febe 	bl	8008b58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ddc:	2300      	movs	r3, #0
 8007dde:	2200      	movs	r2, #0
 8007de0:	2100      	movs	r1, #0
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f001 fb39 	bl	800945a <USBD_LL_PrepareReceive>
 8007de8:	e04e      	b.n	8007e88 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	6912      	ldr	r2, [r2, #16]
 8007df2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007df6:	fb01 f202 	mul.w	r2, r1, r2
 8007dfa:	1a9b      	subs	r3, r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d11c      	bne.n	8007e3a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	689a      	ldr	r2, [r3, #8]
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d316      	bcc.n	8007e3a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d20f      	bcs.n	8007e3a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 fe9a 	bl	8008b58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2100      	movs	r1, #0
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f001 fb11 	bl	800945a <USBD_LL_PrepareReceive>
 8007e38:	e026      	b.n	8007e88 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d105      	bne.n	8007e5c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007e5c:	2180      	movs	r1, #128	@ 0x80
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f001 fa50 	bl	8009304 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 fecc 	bl	8008c02 <USBD_CtlReceiveStatus>
 8007e6a:	e00d      	b.n	8007e88 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d004      	beq.n	8007e80 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d103      	bne.n	8007e88 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007e80:	2180      	movs	r1, #128	@ 0x80
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f001 fa3e 	bl	8009304 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d11d      	bne.n	8007ece <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff fe81 	bl	8007b9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007ea0:	e015      	b.n	8007ece <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00d      	beq.n	8007eca <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d108      	bne.n	8007eca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	7afa      	ldrb	r2, [r7, #11]
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	4798      	blx	r3
 8007ec8:	e001      	b.n	8007ece <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e000      	b.n	8007ed0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ee0:	2340      	movs	r3, #64	@ 0x40
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 f9c7 	bl	800927a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2240      	movs	r2, #64	@ 0x40
 8007ef8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007efc:	2340      	movs	r3, #64	@ 0x40
 8007efe:	2200      	movs	r2, #0
 8007f00:	2180      	movs	r1, #128	@ 0x80
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 f9b9 	bl	800927a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2240      	movs	r2, #64	@ 0x40
 8007f12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	6852      	ldr	r2, [r2, #4]
 8007f48:	b2d2      	uxtb	r2, r2
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	4798      	blx	r3
  }

  return USBD_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	460b      	mov	r3, r1
 8007f64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	78fa      	ldrb	r2, [r7, #3]
 8007f6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bc80      	pop	{r7}
 8007f76:	4770      	bx	lr

08007f78 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2204      	movs	r2, #4
 8007f90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr

08007fa0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d105      	bne.n	8007fbe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bc80      	pop	{r7}
 8007fc8:	4770      	bx	lr

08007fca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d10b      	bne.n	8007ff4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008016:	2b40      	cmp	r3, #64	@ 0x40
 8008018:	d005      	beq.n	8008026 <USBD_StdDevReq+0x26>
 800801a:	2b40      	cmp	r3, #64	@ 0x40
 800801c:	d84f      	bhi.n	80080be <USBD_StdDevReq+0xbe>
 800801e:	2b00      	cmp	r3, #0
 8008020:	d009      	beq.n	8008036 <USBD_StdDevReq+0x36>
 8008022:	2b20      	cmp	r3, #32
 8008024:	d14b      	bne.n	80080be <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	4798      	blx	r3
      break;
 8008034:	e048      	b.n	80080c8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b09      	cmp	r3, #9
 800803c:	d839      	bhi.n	80080b2 <USBD_StdDevReq+0xb2>
 800803e:	a201      	add	r2, pc, #4	@ (adr r2, 8008044 <USBD_StdDevReq+0x44>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008095 	.word	0x08008095
 8008048:	080080a9 	.word	0x080080a9
 800804c:	080080b3 	.word	0x080080b3
 8008050:	0800809f 	.word	0x0800809f
 8008054:	080080b3 	.word	0x080080b3
 8008058:	08008077 	.word	0x08008077
 800805c:	0800806d 	.word	0x0800806d
 8008060:	080080b3 	.word	0x080080b3
 8008064:	0800808b 	.word	0x0800808b
 8008068:	08008081 	.word	0x08008081
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f9dc 	bl	800842c <USBD_GetDescriptor>
          break;
 8008074:	e022      	b.n	80080bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fb3f 	bl	80086fc <USBD_SetAddress>
          break;
 800807e:	e01d      	b.n	80080bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fb7e 	bl	8008784 <USBD_SetConfig>
          break;
 8008088:	e018      	b.n	80080bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fc07 	bl	80088a0 <USBD_GetConfig>
          break;
 8008092:	e013      	b.n	80080bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fc37 	bl	800890a <USBD_GetStatus>
          break;
 800809c:	e00e      	b.n	80080bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fc65 	bl	8008970 <USBD_SetFeature>
          break;
 80080a6:	e009      	b.n	80080bc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fc74 	bl	8008998 <USBD_ClrFeature>
          break;
 80080b0:	e004      	b.n	80080bc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fcc9 	bl	8008a4c <USBD_CtlError>
          break;
 80080ba:	bf00      	nop
      }
      break;
 80080bc:	e004      	b.n	80080c8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fcc3 	bl	8008a4c <USBD_CtlError>
      break;
 80080c6:	bf00      	nop
  }

  return ret;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop

080080d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080ea:	2b40      	cmp	r3, #64	@ 0x40
 80080ec:	d005      	beq.n	80080fa <USBD_StdItfReq+0x26>
 80080ee:	2b40      	cmp	r3, #64	@ 0x40
 80080f0:	d82e      	bhi.n	8008150 <USBD_StdItfReq+0x7c>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d001      	beq.n	80080fa <USBD_StdItfReq+0x26>
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	d12a      	bne.n	8008150 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008100:	3b01      	subs	r3, #1
 8008102:	2b02      	cmp	r3, #2
 8008104:	d81d      	bhi.n	8008142 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	889b      	ldrh	r3, [r3, #4]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b01      	cmp	r3, #1
 800810e:	d813      	bhi.n	8008138 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	4798      	blx	r3
 800811e:	4603      	mov	r3, r0
 8008120:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	88db      	ldrh	r3, [r3, #6]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d110      	bne.n	800814c <USBD_StdItfReq+0x78>
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10d      	bne.n	800814c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fd53 	bl	8008bdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008136:	e009      	b.n	800814c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 fc86 	bl	8008a4c <USBD_CtlError>
          break;
 8008140:	e004      	b.n	800814c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fc81 	bl	8008a4c <USBD_CtlError>
          break;
 800814a:	e000      	b.n	800814e <USBD_StdItfReq+0x7a>
          break;
 800814c:	bf00      	nop
      }
      break;
 800814e:	e004      	b.n	800815a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fc7a 	bl	8008a4c <USBD_CtlError>
      break;
 8008158:	bf00      	nop
  }

  return USBD_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	889b      	ldrh	r3, [r3, #4]
 8008176:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008180:	2b40      	cmp	r3, #64	@ 0x40
 8008182:	d007      	beq.n	8008194 <USBD_StdEPReq+0x30>
 8008184:	2b40      	cmp	r3, #64	@ 0x40
 8008186:	f200 8146 	bhi.w	8008416 <USBD_StdEPReq+0x2b2>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00a      	beq.n	80081a4 <USBD_StdEPReq+0x40>
 800818e:	2b20      	cmp	r3, #32
 8008190:	f040 8141 	bne.w	8008416 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
      break;
 80081a2:	e13d      	b.n	8008420 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081ac:	2b20      	cmp	r3, #32
 80081ae:	d10a      	bne.n	80081c6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
 80081be:	4603      	mov	r3, r0
 80081c0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	e12d      	b.n	8008422 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d007      	beq.n	80081de <USBD_StdEPReq+0x7a>
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	f300 811b 	bgt.w	800840a <USBD_StdEPReq+0x2a6>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d072      	beq.n	80082be <USBD_StdEPReq+0x15a>
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d03a      	beq.n	8008252 <USBD_StdEPReq+0xee>
 80081dc:	e115      	b.n	800840a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d002      	beq.n	80081ee <USBD_StdEPReq+0x8a>
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d015      	beq.n	8008218 <USBD_StdEPReq+0xb4>
 80081ec:	e02b      	b.n	8008246 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081ee:	7bbb      	ldrb	r3, [r7, #14]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00c      	beq.n	800820e <USBD_StdEPReq+0xaa>
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	2b80      	cmp	r3, #128	@ 0x80
 80081f8:	d009      	beq.n	800820e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f001 f880 	bl	8009304 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008204:	2180      	movs	r1, #128	@ 0x80
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 f87c 	bl	8009304 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800820c:	e020      	b.n	8008250 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fc1b 	bl	8008a4c <USBD_CtlError>
              break;
 8008216:	e01b      	b.n	8008250 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	885b      	ldrh	r3, [r3, #2]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10e      	bne.n	800823e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00b      	beq.n	800823e <USBD_StdEPReq+0xda>
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	2b80      	cmp	r3, #128	@ 0x80
 800822a:	d008      	beq.n	800823e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	88db      	ldrh	r3, [r3, #6]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d104      	bne.n	800823e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 f863 	bl	8009304 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fccc 	bl	8008bdc <USBD_CtlSendStatus>

              break;
 8008244:	e004      	b.n	8008250 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fbff 	bl	8008a4c <USBD_CtlError>
              break;
 800824e:	bf00      	nop
          }
          break;
 8008250:	e0e0      	b.n	8008414 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008258:	2b02      	cmp	r3, #2
 800825a:	d002      	beq.n	8008262 <USBD_StdEPReq+0xfe>
 800825c:	2b03      	cmp	r3, #3
 800825e:	d015      	beq.n	800828c <USBD_StdEPReq+0x128>
 8008260:	e026      	b.n	80082b0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00c      	beq.n	8008282 <USBD_StdEPReq+0x11e>
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	2b80      	cmp	r3, #128	@ 0x80
 800826c:	d009      	beq.n	8008282 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 f846 	bl	8009304 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008278:	2180      	movs	r1, #128	@ 0x80
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f001 f842 	bl	8009304 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008280:	e01c      	b.n	80082bc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fbe1 	bl	8008a4c <USBD_CtlError>
              break;
 800828a:	e017      	b.n	80082bc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	885b      	ldrh	r3, [r3, #2]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d112      	bne.n	80082ba <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800829a:	2b00      	cmp	r3, #0
 800829c:	d004      	beq.n	80082a8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 f84d 	bl	8009342 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fc97 	bl	8008bdc <USBD_CtlSendStatus>
              }
              break;
 80082ae:	e004      	b.n	80082ba <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fbca 	bl	8008a4c <USBD_CtlError>
              break;
 80082b8:	e000      	b.n	80082bc <USBD_StdEPReq+0x158>
              break;
 80082ba:	bf00      	nop
          }
          break;
 80082bc:	e0aa      	b.n	8008414 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d002      	beq.n	80082ce <USBD_StdEPReq+0x16a>
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d032      	beq.n	8008332 <USBD_StdEPReq+0x1ce>
 80082cc:	e097      	b.n	80083fe <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d007      	beq.n	80082e4 <USBD_StdEPReq+0x180>
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	2b80      	cmp	r3, #128	@ 0x80
 80082d8:	d004      	beq.n	80082e4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fbb5 	bl	8008a4c <USBD_CtlError>
                break;
 80082e2:	e091      	b.n	8008408 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	da0b      	bge.n	8008304 <USBD_StdEPReq+0x1a0>
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082f2:	4613      	mov	r3, r2
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	4413      	add	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	3310      	adds	r3, #16
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	4413      	add	r3, r2
 8008300:	3304      	adds	r3, #4
 8008302:	e00b      	b.n	800831c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	4413      	add	r3, r2
 800831a:	3304      	adds	r3, #4
 800831c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2200      	movs	r2, #0
 8008322:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2202      	movs	r2, #2
 8008328:	4619      	mov	r1, r3
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fbf8 	bl	8008b20 <USBD_CtlSendData>
              break;
 8008330:	e06a      	b.n	8008408 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008336:	2b00      	cmp	r3, #0
 8008338:	da11      	bge.n	800835e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	f003 020f 	and.w	r2, r3, #15
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	440b      	add	r3, r1
 800834c:	3318      	adds	r3, #24
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d117      	bne.n	8008384 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fb78 	bl	8008a4c <USBD_CtlError>
                  break;
 800835c:	e054      	b.n	8008408 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	f003 020f 	and.w	r2, r3, #15
 8008364:	6879      	ldr	r1, [r7, #4]
 8008366:	4613      	mov	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	440b      	add	r3, r1
 8008370:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d104      	bne.n	8008384 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fb65 	bl	8008a4c <USBD_CtlError>
                  break;
 8008382:	e041      	b.n	8008408 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008388:	2b00      	cmp	r3, #0
 800838a:	da0b      	bge.n	80083a4 <USBD_StdEPReq+0x240>
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008392:	4613      	mov	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	3310      	adds	r3, #16
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	4413      	add	r3, r2
 80083a0:	3304      	adds	r3, #4
 80083a2:	e00b      	b.n	80083bc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
 80083a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	4413      	add	r3, r2
 80083ba:	3304      	adds	r3, #4
 80083bc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <USBD_StdEPReq+0x266>
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	2b80      	cmp	r3, #128	@ 0x80
 80083c8:	d103      	bne.n	80083d2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2200      	movs	r2, #0
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	e00e      	b.n	80083f0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80083d2:	7bbb      	ldrb	r3, [r7, #14]
 80083d4:	4619      	mov	r1, r3
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 ffd2 	bl	8009380 <USBD_LL_IsStallEP>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2201      	movs	r2, #1
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	e002      	b.n	80083f0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2202      	movs	r2, #2
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fb92 	bl	8008b20 <USBD_CtlSendData>
              break;
 80083fc:	e004      	b.n	8008408 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fb23 	bl	8008a4c <USBD_CtlError>
              break;
 8008406:	bf00      	nop
          }
          break;
 8008408:	e004      	b.n	8008414 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fb1d 	bl	8008a4c <USBD_CtlError>
          break;
 8008412:	bf00      	nop
      }
      break;
 8008414:	e004      	b.n	8008420 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fb17 	bl	8008a4c <USBD_CtlError>
      break;
 800841e:	bf00      	nop
  }

  return ret;
 8008420:	7bfb      	ldrb	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	885b      	ldrh	r3, [r3, #2]
 8008446:	0a1b      	lsrs	r3, r3, #8
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	2b06      	cmp	r3, #6
 800844e:	f200 8128 	bhi.w	80086a2 <USBD_GetDescriptor+0x276>
 8008452:	a201      	add	r2, pc, #4	@ (adr r2, 8008458 <USBD_GetDescriptor+0x2c>)
 8008454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008458:	08008475 	.word	0x08008475
 800845c:	0800848d 	.word	0x0800848d
 8008460:	080084cd 	.word	0x080084cd
 8008464:	080086a3 	.word	0x080086a3
 8008468:	080086a3 	.word	0x080086a3
 800846c:	08008643 	.word	0x08008643
 8008470:	0800866f 	.word	0x0800866f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	7c12      	ldrb	r2, [r2, #16]
 8008480:	f107 0108 	add.w	r1, r7, #8
 8008484:	4610      	mov	r0, r2
 8008486:	4798      	blx	r3
 8008488:	60f8      	str	r0, [r7, #12]
      break;
 800848a:	e112      	b.n	80086b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	7c1b      	ldrb	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10d      	bne.n	80084b0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800849a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800849c:	f107 0208 	add.w	r2, r7, #8
 80084a0:	4610      	mov	r0, r2
 80084a2:	4798      	blx	r3
 80084a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3301      	adds	r3, #1
 80084aa:	2202      	movs	r2, #2
 80084ac:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084ae:	e100      	b.n	80086b2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b8:	f107 0208 	add.w	r2, r7, #8
 80084bc:	4610      	mov	r0, r2
 80084be:	4798      	blx	r3
 80084c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3301      	adds	r3, #1
 80084c6:	2202      	movs	r2, #2
 80084c8:	701a      	strb	r2, [r3, #0]
      break;
 80084ca:	e0f2      	b.n	80086b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	885b      	ldrh	r3, [r3, #2]
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b05      	cmp	r3, #5
 80084d4:	f200 80ac 	bhi.w	8008630 <USBD_GetDescriptor+0x204>
 80084d8:	a201      	add	r2, pc, #4	@ (adr r2, 80084e0 <USBD_GetDescriptor+0xb4>)
 80084da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084de:	bf00      	nop
 80084e0:	080084f9 	.word	0x080084f9
 80084e4:	0800852d 	.word	0x0800852d
 80084e8:	08008561 	.word	0x08008561
 80084ec:	08008595 	.word	0x08008595
 80084f0:	080085c9 	.word	0x080085c9
 80084f4:	080085fd 	.word	0x080085fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00b      	beq.n	800851c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	7c12      	ldrb	r2, [r2, #16]
 8008510:	f107 0108 	add.w	r1, r7, #8
 8008514:	4610      	mov	r0, r2
 8008516:	4798      	blx	r3
 8008518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800851a:	e091      	b.n	8008640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fa94 	bl	8008a4c <USBD_CtlError>
            err++;
 8008524:	7afb      	ldrb	r3, [r7, #11]
 8008526:	3301      	adds	r3, #1
 8008528:	72fb      	strb	r3, [r7, #11]
          break;
 800852a:	e089      	b.n	8008640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00b      	beq.n	8008550 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	7c12      	ldrb	r2, [r2, #16]
 8008544:	f107 0108 	add.w	r1, r7, #8
 8008548:	4610      	mov	r0, r2
 800854a:	4798      	blx	r3
 800854c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800854e:	e077      	b.n	8008640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa7a 	bl	8008a4c <USBD_CtlError>
            err++;
 8008558:	7afb      	ldrb	r3, [r7, #11]
 800855a:	3301      	adds	r3, #1
 800855c:	72fb      	strb	r3, [r7, #11]
          break;
 800855e:	e06f      	b.n	8008640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00b      	beq.n	8008584 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	7c12      	ldrb	r2, [r2, #16]
 8008578:	f107 0108 	add.w	r1, r7, #8
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008582:	e05d      	b.n	8008640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fa60 	bl	8008a4c <USBD_CtlError>
            err++;
 800858c:	7afb      	ldrb	r3, [r7, #11]
 800858e:	3301      	adds	r3, #1
 8008590:	72fb      	strb	r3, [r7, #11]
          break;
 8008592:	e055      	b.n	8008640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	7c12      	ldrb	r2, [r2, #16]
 80085ac:	f107 0108 	add.w	r1, r7, #8
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
 80085b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085b6:	e043      	b.n	8008640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fa46 	bl	8008a4c <USBD_CtlError>
            err++;
 80085c0:	7afb      	ldrb	r3, [r7, #11]
 80085c2:	3301      	adds	r3, #1
 80085c4:	72fb      	strb	r3, [r7, #11]
          break;
 80085c6:	e03b      	b.n	8008640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	7c12      	ldrb	r2, [r2, #16]
 80085e0:	f107 0108 	add.w	r1, r7, #8
 80085e4:	4610      	mov	r0, r2
 80085e6:	4798      	blx	r3
 80085e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ea:	e029      	b.n	8008640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fa2c 	bl	8008a4c <USBD_CtlError>
            err++;
 80085f4:	7afb      	ldrb	r3, [r7, #11]
 80085f6:	3301      	adds	r3, #1
 80085f8:	72fb      	strb	r3, [r7, #11]
          break;
 80085fa:	e021      	b.n	8008640 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00b      	beq.n	8008620 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	7c12      	ldrb	r2, [r2, #16]
 8008614:	f107 0108 	add.w	r1, r7, #8
 8008618:	4610      	mov	r0, r2
 800861a:	4798      	blx	r3
 800861c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800861e:	e00f      	b.n	8008640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa12 	bl	8008a4c <USBD_CtlError>
            err++;
 8008628:	7afb      	ldrb	r3, [r7, #11]
 800862a:	3301      	adds	r3, #1
 800862c:	72fb      	strb	r3, [r7, #11]
          break;
 800862e:	e007      	b.n	8008640 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fa0a 	bl	8008a4c <USBD_CtlError>
          err++;
 8008638:	7afb      	ldrb	r3, [r7, #11]
 800863a:	3301      	adds	r3, #1
 800863c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800863e:	e038      	b.n	80086b2 <USBD_GetDescriptor+0x286>
 8008640:	e037      	b.n	80086b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	7c1b      	ldrb	r3, [r3, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d109      	bne.n	800865e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008652:	f107 0208 	add.w	r2, r7, #8
 8008656:	4610      	mov	r0, r2
 8008658:	4798      	blx	r3
 800865a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800865c:	e029      	b.n	80086b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f9f3 	bl	8008a4c <USBD_CtlError>
        err++;
 8008666:	7afb      	ldrb	r3, [r7, #11]
 8008668:	3301      	adds	r3, #1
 800866a:	72fb      	strb	r3, [r7, #11]
      break;
 800866c:	e021      	b.n	80086b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	7c1b      	ldrb	r3, [r3, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10d      	bne.n	8008692 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800867c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867e:	f107 0208 	add.w	r2, r7, #8
 8008682:	4610      	mov	r0, r2
 8008684:	4798      	blx	r3
 8008686:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	3301      	adds	r3, #1
 800868c:	2207      	movs	r2, #7
 800868e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008690:	e00f      	b.n	80086b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f9d9 	bl	8008a4c <USBD_CtlError>
        err++;
 800869a:	7afb      	ldrb	r3, [r7, #11]
 800869c:	3301      	adds	r3, #1
 800869e:	72fb      	strb	r3, [r7, #11]
      break;
 80086a0:	e007      	b.n	80086b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f9d1 	bl	8008a4c <USBD_CtlError>
      err++;
 80086aa:	7afb      	ldrb	r3, [r7, #11]
 80086ac:	3301      	adds	r3, #1
 80086ae:	72fb      	strb	r3, [r7, #11]
      break;
 80086b0:	bf00      	nop
  }

  if (err != 0U)
 80086b2:	7afb      	ldrb	r3, [r7, #11]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d11c      	bne.n	80086f2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80086b8:	893b      	ldrh	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d011      	beq.n	80086e2 <USBD_GetDescriptor+0x2b6>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	88db      	ldrh	r3, [r3, #6]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00d      	beq.n	80086e2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	88da      	ldrh	r2, [r3, #6]
 80086ca:	893b      	ldrh	r3, [r7, #8]
 80086cc:	4293      	cmp	r3, r2
 80086ce:	bf28      	it	cs
 80086d0:	4613      	movcs	r3, r2
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086d6:	893b      	ldrh	r3, [r7, #8]
 80086d8:	461a      	mov	r2, r3
 80086da:	68f9      	ldr	r1, [r7, #12]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fa1f 	bl	8008b20 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	88db      	ldrh	r3, [r3, #6]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d104      	bne.n	80086f4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa76 	bl	8008bdc <USBD_CtlSendStatus>
 80086f0:	e000      	b.n	80086f4 <USBD_GetDescriptor+0x2c8>
    return;
 80086f2:	bf00      	nop
    }
  }
}
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop

080086fc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	889b      	ldrh	r3, [r3, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d130      	bne.n	8008770 <USBD_SetAddress+0x74>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	88db      	ldrh	r3, [r3, #6]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d12c      	bne.n	8008770 <USBD_SetAddress+0x74>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	885b      	ldrh	r3, [r3, #2]
 800871a:	2b7f      	cmp	r3, #127	@ 0x7f
 800871c:	d828      	bhi.n	8008770 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	885b      	ldrh	r3, [r3, #2]
 8008722:	b2db      	uxtb	r3, r3
 8008724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008728:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008730:	2b03      	cmp	r3, #3
 8008732:	d104      	bne.n	800873e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f988 	bl	8008a4c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873c:	e01d      	b.n	800877a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	7bfa      	ldrb	r2, [r7, #15]
 8008742:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fe43 	bl	80093d6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fa43 	bl	8008bdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d004      	beq.n	8008766 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008764:	e009      	b.n	800877a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876e:	e004      	b.n	800877a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f96a 	bl	8008a4c <USBD_CtlError>
  }
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	885b      	ldrh	r3, [r3, #2]
 8008792:	b2da      	uxtb	r2, r3
 8008794:	4b41      	ldr	r3, [pc, #260]	@ (800889c <USBD_SetConfig+0x118>)
 8008796:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008798:	4b40      	ldr	r3, [pc, #256]	@ (800889c <USBD_SetConfig+0x118>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d904      	bls.n	80087aa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f952 	bl	8008a4c <USBD_CtlError>
 80087a8:	e075      	b.n	8008896 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d002      	beq.n	80087ba <USBD_SetConfig+0x36>
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d023      	beq.n	8008800 <USBD_SetConfig+0x7c>
 80087b8:	e062      	b.n	8008880 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80087ba:	4b38      	ldr	r3, [pc, #224]	@ (800889c <USBD_SetConfig+0x118>)
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d01a      	beq.n	80087f8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80087c2:	4b36      	ldr	r3, [pc, #216]	@ (800889c <USBD_SetConfig+0x118>)
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2203      	movs	r2, #3
 80087d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087d4:	4b31      	ldr	r3, [pc, #196]	@ (800889c <USBD_SetConfig+0x118>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7ff f9e7 	bl	8007bae <USBD_SetClassConfig>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d104      	bne.n	80087f0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80087e6:	6839      	ldr	r1, [r7, #0]
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f92f 	bl	8008a4c <USBD_CtlError>
            return;
 80087ee:	e052      	b.n	8008896 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f9f3 	bl	8008bdc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087f6:	e04e      	b.n	8008896 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f9ef 	bl	8008bdc <USBD_CtlSendStatus>
        break;
 80087fe:	e04a      	b.n	8008896 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008800:	4b26      	ldr	r3, [pc, #152]	@ (800889c <USBD_SetConfig+0x118>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d112      	bne.n	800882e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2202      	movs	r2, #2
 800880c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008810:	4b22      	ldr	r3, [pc, #136]	@ (800889c <USBD_SetConfig+0x118>)
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	461a      	mov	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800881a:	4b20      	ldr	r3, [pc, #128]	@ (800889c <USBD_SetConfig+0x118>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff f9e3 	bl	8007bec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f9d8 	bl	8008bdc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800882c:	e033      	b.n	8008896 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800882e:	4b1b      	ldr	r3, [pc, #108]	@ (800889c <USBD_SetConfig+0x118>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	461a      	mov	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	429a      	cmp	r2, r3
 800883a:	d01d      	beq.n	8008878 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	b2db      	uxtb	r3, r3
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f7ff f9d1 	bl	8007bec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800884a:	4b14      	ldr	r3, [pc, #80]	@ (800889c <USBD_SetConfig+0x118>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008854:	4b11      	ldr	r3, [pc, #68]	@ (800889c <USBD_SetConfig+0x118>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff f9a7 	bl	8007bae <USBD_SetClassConfig>
 8008860:	4603      	mov	r3, r0
 8008862:	2b02      	cmp	r3, #2
 8008864:	d104      	bne.n	8008870 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f8ef 	bl	8008a4c <USBD_CtlError>
            return;
 800886e:	e012      	b.n	8008896 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f9b3 	bl	8008bdc <USBD_CtlSendStatus>
        break;
 8008876:	e00e      	b.n	8008896 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f9af 	bl	8008bdc <USBD_CtlSendStatus>
        break;
 800887e:	e00a      	b.n	8008896 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f8e2 	bl	8008a4c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008888:	4b04      	ldr	r3, [pc, #16]	@ (800889c <USBD_SetConfig+0x118>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff f9ac 	bl	8007bec <USBD_ClrClassConfig>
        break;
 8008894:	bf00      	nop
    }
  }
}
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	200004a0 	.word	0x200004a0

080088a0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	88db      	ldrh	r3, [r3, #6]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d004      	beq.n	80088bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f8c9 	bl	8008a4c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088ba:	e022      	b.n	8008902 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	dc02      	bgt.n	80088cc <USBD_GetConfig+0x2c>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dc03      	bgt.n	80088d2 <USBD_GetConfig+0x32>
 80088ca:	e015      	b.n	80088f8 <USBD_GetConfig+0x58>
 80088cc:	2b03      	cmp	r3, #3
 80088ce:	d00b      	beq.n	80088e8 <USBD_GetConfig+0x48>
 80088d0:	e012      	b.n	80088f8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3308      	adds	r3, #8
 80088dc:	2201      	movs	r2, #1
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f91d 	bl	8008b20 <USBD_CtlSendData>
        break;
 80088e6:	e00c      	b.n	8008902 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3304      	adds	r3, #4
 80088ec:	2201      	movs	r2, #1
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f915 	bl	8008b20 <USBD_CtlSendData>
        break;
 80088f6:	e004      	b.n	8008902 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f8a6 	bl	8008a4c <USBD_CtlError>
        break;
 8008900:	bf00      	nop
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800891a:	3b01      	subs	r3, #1
 800891c:	2b02      	cmp	r3, #2
 800891e:	d81e      	bhi.n	800895e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	88db      	ldrh	r3, [r3, #6]
 8008924:	2b02      	cmp	r3, #2
 8008926:	d004      	beq.n	8008932 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f88e 	bl	8008a4c <USBD_CtlError>
        break;
 8008930:	e01a      	b.n	8008968 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800893e:	2b00      	cmp	r3, #0
 8008940:	d005      	beq.n	800894e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	f043 0202 	orr.w	r2, r3, #2
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	330c      	adds	r3, #12
 8008952:	2202      	movs	r2, #2
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f8e2 	bl	8008b20 <USBD_CtlSendData>
      break;
 800895c:	e004      	b.n	8008968 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800895e:	6839      	ldr	r1, [r7, #0]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f873 	bl	8008a4c <USBD_CtlError>
      break;
 8008966:	bf00      	nop
  }
}
 8008968:	bf00      	nop
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	885b      	ldrh	r3, [r3, #2]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d106      	bne.n	8008990 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f926 	bl	8008bdc <USBD_CtlSendStatus>
  }
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089a8:	3b01      	subs	r3, #1
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d80b      	bhi.n	80089c6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	885b      	ldrh	r3, [r3, #2]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d10c      	bne.n	80089d0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f90c 	bl	8008bdc <USBD_CtlSendStatus>
      }
      break;
 80089c4:	e004      	b.n	80089d0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f83f 	bl	8008a4c <USBD_CtlError>
      break;
 80089ce:	e000      	b.n	80089d2 <USBD_ClrFeature+0x3a>
      break;
 80089d0:	bf00      	nop
  }
}
 80089d2:	bf00      	nop
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	781a      	ldrb	r2, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	785a      	ldrb	r2, [r3, #1]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	3302      	adds	r3, #2
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	461a      	mov	r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	3303      	adds	r3, #3
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	021b      	lsls	r3, r3, #8
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	4413      	add	r3, r2
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	3304      	adds	r3, #4
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	3305      	adds	r3, #5
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	021b      	lsls	r3, r3, #8
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	4413      	add	r3, r2
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	3306      	adds	r3, #6
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	3307      	adds	r3, #7
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	021b      	lsls	r3, r3, #8
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	4413      	add	r3, r2
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	80da      	strh	r2, [r3, #6]

}
 8008a42:	bf00      	nop
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bc80      	pop	{r7}
 8008a4a:	4770      	bx	lr

08008a4c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008a56:	2180      	movs	r1, #128	@ 0x80
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fc53 	bl	8009304 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008a5e:	2100      	movs	r1, #0
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fc4f 	bl	8009304 <USBD_LL_StallEP>
}
 8008a66:	bf00      	nop
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b086      	sub	sp, #24
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	60b9      	str	r1, [r7, #8]
 8008a78:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d032      	beq.n	8008aea <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 f834 	bl	8008af2 <USBD_GetLen>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	75fa      	strb	r2, [r7, #23]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	7812      	ldrb	r2, [r2, #0]
 8008aa8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	75fa      	strb	r2, [r7, #23]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	2203      	movs	r2, #3
 8008ab8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008aba:	e012      	b.n	8008ae2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	1c5a      	adds	r2, r3, #1
 8008ac0:	60fa      	str	r2, [r7, #12]
 8008ac2:	7dfa      	ldrb	r2, [r7, #23]
 8008ac4:	1c51      	adds	r1, r2, #1
 8008ac6:	75f9      	strb	r1, [r7, #23]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	440a      	add	r2, r1
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008ad2:	7dfb      	ldrb	r3, [r7, #23]
 8008ad4:	1c5a      	adds	r2, r3, #1
 8008ad6:	75fa      	strb	r2, [r7, #23]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	4413      	add	r3, r2
 8008ade:	2200      	movs	r2, #0
 8008ae0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e8      	bne.n	8008abc <USBD_GetString+0x4e>
    }
  }
}
 8008aea:	bf00      	nop
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b085      	sub	sp, #20
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008afe:	e005      	b.n	8008b0c <USBD_GetLen+0x1a>
  {
    len++;
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
 8008b02:	3301      	adds	r3, #1
 8008b04:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1f5      	bne.n	8008b00 <USBD_GetLen+0xe>
  }

  return len;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bc80      	pop	{r7}
 8008b1e:	4770      	bx	lr

08008b20 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2202      	movs	r2, #2
 8008b32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008b36:	88fa      	ldrh	r2, [r7, #6]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008b3c:	88fa      	ldrh	r2, [r7, #6]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b42:	88fb      	ldrh	r3, [r7, #6]
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	2100      	movs	r1, #0
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fc63 	bl	8009414 <USBD_LL_Transmit>

  return USBD_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	4613      	mov	r3, r2
 8008b64:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b66:	88fb      	ldrh	r3, [r7, #6]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 fc51 	bl	8009414 <USBD_LL_Transmit>

  return USBD_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4613      	mov	r3, r2
 8008b88:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008b92:	88fa      	ldrh	r2, [r7, #6]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008b9a:	88fa      	ldrh	r2, [r7, #6]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 fc56 	bl	800945a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bc6:	88fb      	ldrh	r3, [r7, #6]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	2100      	movs	r1, #0
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 fc44 	bl	800945a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2204      	movs	r2, #4
 8008be8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008bec:	2300      	movs	r3, #0
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fc0e 	bl	8009414 <USBD_LL_Transmit>

  return USBD_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2205      	movs	r2, #5
 8008c0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c12:	2300      	movs	r3, #0
 8008c14:	2200      	movs	r2, #0
 8008c16:	2100      	movs	r1, #0
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fc1e 	bl	800945a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3708      	adds	r7, #8
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4912      	ldr	r1, [pc, #72]	@ (8008c78 <MX_USB_DEVICE_Init+0x50>)
 8008c30:	4812      	ldr	r0, [pc, #72]	@ (8008c7c <MX_USB_DEVICE_Init+0x54>)
 8008c32:	f7fe ff62 	bl	8007afa <USBD_Init>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c3c:	f7f8 f9c2 	bl	8000fc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c40:	490f      	ldr	r1, [pc, #60]	@ (8008c80 <MX_USB_DEVICE_Init+0x58>)
 8008c42:	480e      	ldr	r0, [pc, #56]	@ (8008c7c <MX_USB_DEVICE_Init+0x54>)
 8008c44:	f7fe ff84 	bl	8007b50 <USBD_RegisterClass>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c4e:	f7f8 f9b9 	bl	8000fc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c52:	490c      	ldr	r1, [pc, #48]	@ (8008c84 <MX_USB_DEVICE_Init+0x5c>)
 8008c54:	4809      	ldr	r0, [pc, #36]	@ (8008c7c <MX_USB_DEVICE_Init+0x54>)
 8008c56:	f7fe feb5 	bl	80079c4 <USBD_CDC_RegisterInterface>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008c60:	f7f8 f9b0 	bl	8000fc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008c64:	4805      	ldr	r0, [pc, #20]	@ (8008c7c <MX_USB_DEVICE_Init+0x54>)
 8008c66:	f7fe ff8c 	bl	8007b82 <USBD_Start>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c70:	f7f8 f9a8 	bl	8000fc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c74:	bf00      	nop
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	20000138 	.word	0x20000138
 8008c7c:	200004a4 	.word	0x200004a4
 8008c80:	20000024 	.word	0x20000024
 8008c84:	20000128 	.word	0x20000128

08008c88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4905      	ldr	r1, [pc, #20]	@ (8008ca4 <CDC_Init_FS+0x1c>)
 8008c90:	4805      	ldr	r0, [pc, #20]	@ (8008ca8 <CDC_Init_FS+0x20>)
 8008c92:	f7fe fead 	bl	80079f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c96:	4905      	ldr	r1, [pc, #20]	@ (8008cac <CDC_Init_FS+0x24>)
 8008c98:	4803      	ldr	r0, [pc, #12]	@ (8008ca8 <CDC_Init_FS+0x20>)
 8008c9a:	f7fe fec2 	bl	8007a22 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	20000b68 	.word	0x20000b68
 8008ca8:	200004a4 	.word	0x200004a4
 8008cac:	20000768 	.word	0x20000768

08008cb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008cb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bc80      	pop	{r7}
 8008cbc:	4770      	bx	lr
	...

08008cc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	6039      	str	r1, [r7, #0]
 8008cca:	71fb      	strb	r3, [r7, #7]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	2b23      	cmp	r3, #35	@ 0x23
 8008cd4:	d84a      	bhi.n	8008d6c <CDC_Control_FS+0xac>
 8008cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cdc <CDC_Control_FS+0x1c>)
 8008cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cdc:	08008d6d 	.word	0x08008d6d
 8008ce0:	08008d6d 	.word	0x08008d6d
 8008ce4:	08008d6d 	.word	0x08008d6d
 8008ce8:	08008d6d 	.word	0x08008d6d
 8008cec:	08008d6d 	.word	0x08008d6d
 8008cf0:	08008d6d 	.word	0x08008d6d
 8008cf4:	08008d6d 	.word	0x08008d6d
 8008cf8:	08008d6d 	.word	0x08008d6d
 8008cfc:	08008d6d 	.word	0x08008d6d
 8008d00:	08008d6d 	.word	0x08008d6d
 8008d04:	08008d6d 	.word	0x08008d6d
 8008d08:	08008d6d 	.word	0x08008d6d
 8008d0c:	08008d6d 	.word	0x08008d6d
 8008d10:	08008d6d 	.word	0x08008d6d
 8008d14:	08008d6d 	.word	0x08008d6d
 8008d18:	08008d6d 	.word	0x08008d6d
 8008d1c:	08008d6d 	.word	0x08008d6d
 8008d20:	08008d6d 	.word	0x08008d6d
 8008d24:	08008d6d 	.word	0x08008d6d
 8008d28:	08008d6d 	.word	0x08008d6d
 8008d2c:	08008d6d 	.word	0x08008d6d
 8008d30:	08008d6d 	.word	0x08008d6d
 8008d34:	08008d6d 	.word	0x08008d6d
 8008d38:	08008d6d 	.word	0x08008d6d
 8008d3c:	08008d6d 	.word	0x08008d6d
 8008d40:	08008d6d 	.word	0x08008d6d
 8008d44:	08008d6d 	.word	0x08008d6d
 8008d48:	08008d6d 	.word	0x08008d6d
 8008d4c:	08008d6d 	.word	0x08008d6d
 8008d50:	08008d6d 	.word	0x08008d6d
 8008d54:	08008d6d 	.word	0x08008d6d
 8008d58:	08008d6d 	.word	0x08008d6d
 8008d5c:	08008d6d 	.word	0x08008d6d
 8008d60:	08008d6d 	.word	0x08008d6d
 8008d64:	08008d6d 	.word	0x08008d6d
 8008d68:	08008d6d 	.word	0x08008d6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d6c:	bf00      	nop
  }

  return (USBD_OK);
 8008d6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bc80      	pop	{r7}
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop

08008d7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	4805      	ldr	r0, [pc, #20]	@ (8008da0 <CDC_Receive_FS+0x24>)
 8008d8a:	f7fe fe4a 	bl	8007a22 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d8e:	4804      	ldr	r0, [pc, #16]	@ (8008da0 <CDC_Receive_FS+0x24>)
 8008d90:	f7fe fe89 	bl	8007aa6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	200004a4 	.word	0x200004a4

08008da4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008db4:	4b0d      	ldr	r3, [pc, #52]	@ (8008dec <CDC_Transmit_FS+0x48>)
 8008db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e00b      	b.n	8008de2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008dca:	887b      	ldrh	r3, [r7, #2]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	4806      	ldr	r0, [pc, #24]	@ (8008dec <CDC_Transmit_FS+0x48>)
 8008dd2:	f7fe fe0d 	bl	80079f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008dd6:	4805      	ldr	r0, [pc, #20]	@ (8008dec <CDC_Transmit_FS+0x48>)
 8008dd8:	f7fe fe36 	bl	8007a48 <USBD_CDC_TransmitPacket>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	200004a4 	.word	0x200004a4

08008df0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2212      	movs	r2, #18
 8008e00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e02:	4b03      	ldr	r3, [pc, #12]	@ (8008e10 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	20000154 	.word	0x20000154

08008e14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	6039      	str	r1, [r7, #0]
 8008e1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2204      	movs	r2, #4
 8008e24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e26:	4b03      	ldr	r3, [pc, #12]	@ (8008e34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bc80      	pop	{r7}
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20000168 	.word	0x20000168

08008e38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	6039      	str	r1, [r7, #0]
 8008e42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d105      	bne.n	8008e56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	4907      	ldr	r1, [pc, #28]	@ (8008e6c <USBD_FS_ProductStrDescriptor+0x34>)
 8008e4e:	4808      	ldr	r0, [pc, #32]	@ (8008e70 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e50:	f7ff fe0d 	bl	8008a6e <USBD_GetString>
 8008e54:	e004      	b.n	8008e60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e56:	683a      	ldr	r2, [r7, #0]
 8008e58:	4904      	ldr	r1, [pc, #16]	@ (8008e6c <USBD_FS_ProductStrDescriptor+0x34>)
 8008e5a:	4805      	ldr	r0, [pc, #20]	@ (8008e70 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e5c:	f7ff fe07 	bl	8008a6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e60:	4b02      	ldr	r3, [pc, #8]	@ (8008e6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000f68 	.word	0x20000f68
 8008e70:	0800dc50 	.word	0x0800dc50

08008e74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	4904      	ldr	r1, [pc, #16]	@ (8008e94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e84:	4804      	ldr	r0, [pc, #16]	@ (8008e98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e86:	f7ff fdf2 	bl	8008a6e <USBD_GetString>
  return USBD_StrDesc;
 8008e8a:	4b02      	ldr	r3, [pc, #8]	@ (8008e94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	20000f68 	.word	0x20000f68
 8008e98:	0800dc68 	.word	0x0800dc68

08008e9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	6039      	str	r1, [r7, #0]
 8008ea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	221a      	movs	r2, #26
 8008eac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008eae:	f000 f843 	bl	8008f38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008eb2:	4b02      	ldr	r3, [pc, #8]	@ (8008ebc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	2000016c 	.word	0x2000016c

08008ec0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	6039      	str	r1, [r7, #0]
 8008eca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d105      	bne.n	8008ede <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	4907      	ldr	r1, [pc, #28]	@ (8008ef4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ed6:	4808      	ldr	r0, [pc, #32]	@ (8008ef8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ed8:	f7ff fdc9 	bl	8008a6e <USBD_GetString>
 8008edc:	e004      	b.n	8008ee8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	4904      	ldr	r1, [pc, #16]	@ (8008ef4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008ee2:	4805      	ldr	r0, [pc, #20]	@ (8008ef8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ee4:	f7ff fdc3 	bl	8008a6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ee8:	4b02      	ldr	r3, [pc, #8]	@ (8008ef4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	20000f68 	.word	0x20000f68
 8008ef8:	0800dc7c 	.word	0x0800dc7c

08008efc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	6039      	str	r1, [r7, #0]
 8008f06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d105      	bne.n	8008f1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	4907      	ldr	r1, [pc, #28]	@ (8008f30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f12:	4808      	ldr	r0, [pc, #32]	@ (8008f34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f14:	f7ff fdab 	bl	8008a6e <USBD_GetString>
 8008f18:	e004      	b.n	8008f24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	4904      	ldr	r1, [pc, #16]	@ (8008f30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f1e:	4805      	ldr	r0, [pc, #20]	@ (8008f34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f20:	f7ff fda5 	bl	8008a6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f24:	4b02      	ldr	r3, [pc, #8]	@ (8008f30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000f68 	.word	0x20000f68
 8008f34:	0800dc88 	.word	0x0800dc88

08008f38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f7c <Get_SerialNum+0x44>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008f44:	4b0e      	ldr	r3, [pc, #56]	@ (8008f80 <Get_SerialNum+0x48>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8008f84 <Get_SerialNum+0x4c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4413      	add	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d009      	beq.n	8008f72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008f5e:	2208      	movs	r2, #8
 8008f60:	4909      	ldr	r1, [pc, #36]	@ (8008f88 <Get_SerialNum+0x50>)
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 f814 	bl	8008f90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f68:	2204      	movs	r2, #4
 8008f6a:	4908      	ldr	r1, [pc, #32]	@ (8008f8c <Get_SerialNum+0x54>)
 8008f6c:	68b8      	ldr	r0, [r7, #8]
 8008f6e:	f000 f80f 	bl	8008f90 <IntToUnicode>
  }
}
 8008f72:	bf00      	nop
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	1ffff7e8 	.word	0x1ffff7e8
 8008f80:	1ffff7ec 	.word	0x1ffff7ec
 8008f84:	1ffff7f0 	.word	0x1ffff7f0
 8008f88:	2000016e 	.word	0x2000016e
 8008f8c:	2000017e 	.word	0x2000017e

08008f90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	75fb      	strb	r3, [r7, #23]
 8008fa6:	e027      	b.n	8008ff8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	0f1b      	lsrs	r3, r3, #28
 8008fac:	2b09      	cmp	r3, #9
 8008fae:	d80b      	bhi.n	8008fc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	0f1b      	lsrs	r3, r3, #28
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
 8008fb8:	005b      	lsls	r3, r3, #1
 8008fba:	4619      	mov	r1, r3
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	440b      	add	r3, r1
 8008fc0:	3230      	adds	r2, #48	@ 0x30
 8008fc2:	b2d2      	uxtb	r2, r2
 8008fc4:	701a      	strb	r2, [r3, #0]
 8008fc6:	e00a      	b.n	8008fde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	0f1b      	lsrs	r3, r3, #28
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
 8008fd0:	005b      	lsls	r3, r3, #1
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	440b      	add	r3, r1
 8008fd8:	3237      	adds	r2, #55	@ 0x37
 8008fda:	b2d2      	uxtb	r2, r2
 8008fdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	011b      	lsls	r3, r3, #4
 8008fe2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008fe4:	7dfb      	ldrb	r3, [r7, #23]
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	3301      	adds	r3, #1
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	4413      	add	r3, r2
 8008fee:	2200      	movs	r2, #0
 8008ff0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008ff2:	7dfb      	ldrb	r3, [r7, #23]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	75fb      	strb	r3, [r7, #23]
 8008ff8:	7dfa      	ldrb	r2, [r7, #23]
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d3d3      	bcc.n	8008fa8 <IntToUnicode+0x18>
  }
}
 8009000:	bf00      	nop
 8009002:	bf00      	nop
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	bc80      	pop	{r7}
 800900a:	4770      	bx	lr

0800900c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a0d      	ldr	r2, [pc, #52]	@ (8009050 <HAL_PCD_MspInit+0x44>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d113      	bne.n	8009046 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800901e:	4b0d      	ldr	r3, [pc, #52]	@ (8009054 <HAL_PCD_MspInit+0x48>)
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	4a0c      	ldr	r2, [pc, #48]	@ (8009054 <HAL_PCD_MspInit+0x48>)
 8009024:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009028:	61d3      	str	r3, [r2, #28]
 800902a:	4b0a      	ldr	r3, [pc, #40]	@ (8009054 <HAL_PCD_MspInit+0x48>)
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009036:	2200      	movs	r2, #0
 8009038:	2100      	movs	r1, #0
 800903a:	2014      	movs	r0, #20
 800903c:	f7f8 fe65 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009040:	2014      	movs	r0, #20
 8009042:	f7f8 fe7e 	bl	8001d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	40005c00 	.word	0x40005c00
 8009054:	40021000 	.word	0x40021000

08009058 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800906c:	4619      	mov	r1, r3
 800906e:	4610      	mov	r0, r2
 8009070:	f7fe fdcf 	bl	8007c12 <USBD_LL_SetupStage>
}
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800908e:	78fa      	ldrb	r2, [r7, #3]
 8009090:	6879      	ldr	r1, [r7, #4]
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	00db      	lsls	r3, r3, #3
 800909a:	440b      	add	r3, r1
 800909c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	78fb      	ldrb	r3, [r7, #3]
 80090a4:	4619      	mov	r1, r3
 80090a6:	f7fe fe01 	bl	8007cac <USBD_LL_DataOutStage>
}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	460b      	mov	r3, r1
 80090bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80090c4:	78fa      	ldrb	r2, [r7, #3]
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	4613      	mov	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	440b      	add	r3, r1
 80090d2:	3324      	adds	r3, #36	@ 0x24
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	78fb      	ldrb	r3, [r7, #3]
 80090d8:	4619      	mov	r1, r3
 80090da:	f7fe fe58 	bl	8007d8e <USBD_LL_DataInStage>
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fe ff68 	bl	8007fca <USBD_LL_SOF>
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800910a:	2301      	movs	r3, #1
 800910c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	799b      	ldrb	r3, [r3, #6]
 8009112:	2b02      	cmp	r3, #2
 8009114:	d001      	beq.n	800911a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009116:	f7f7 ff55 	bl	8000fc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009120:	7bfa      	ldrb	r2, [r7, #15]
 8009122:	4611      	mov	r1, r2
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe ff18 	bl	8007f5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009130:	4618      	mov	r0, r3
 8009132:	f7fe fed1 	bl	8007ed8 <USBD_LL_Reset>
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe ff12 	bl	8007f78 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	7a9b      	ldrb	r3, [r3, #10]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d005      	beq.n	8009168 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800915c:	4b04      	ldr	r3, [pc, #16]	@ (8009170 <HAL_PCD_SuspendCallback+0x30>)
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	4a03      	ldr	r2, [pc, #12]	@ (8009170 <HAL_PCD_SuspendCallback+0x30>)
 8009162:	f043 0306 	orr.w	r3, r3, #6
 8009166:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	e000ed00 	.word	0xe000ed00

08009174 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe ff0c 	bl	8007fa0 <USBD_LL_Resume>
}
 8009188:	bf00      	nop
 800918a:	3708      	adds	r7, #8
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009198:	4a28      	ldr	r2, [pc, #160]	@ (800923c <USBD_LL_Init+0xac>)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a26      	ldr	r2, [pc, #152]	@ (800923c <USBD_LL_Init+0xac>)
 80091a4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80091a8:	4b24      	ldr	r3, [pc, #144]	@ (800923c <USBD_LL_Init+0xac>)
 80091aa:	4a25      	ldr	r2, [pc, #148]	@ (8009240 <USBD_LL_Init+0xb0>)
 80091ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80091ae:	4b23      	ldr	r3, [pc, #140]	@ (800923c <USBD_LL_Init+0xac>)
 80091b0:	2208      	movs	r2, #8
 80091b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80091b4:	4b21      	ldr	r3, [pc, #132]	@ (800923c <USBD_LL_Init+0xac>)
 80091b6:	2202      	movs	r2, #2
 80091b8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80091ba:	4b20      	ldr	r3, [pc, #128]	@ (800923c <USBD_LL_Init+0xac>)
 80091bc:	2200      	movs	r2, #0
 80091be:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80091c0:	4b1e      	ldr	r3, [pc, #120]	@ (800923c <USBD_LL_Init+0xac>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80091c6:	4b1d      	ldr	r3, [pc, #116]	@ (800923c <USBD_LL_Init+0xac>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80091cc:	481b      	ldr	r0, [pc, #108]	@ (800923c <USBD_LL_Init+0xac>)
 80091ce:	f7f8 ff6f 	bl	80020b0 <HAL_PCD_Init>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80091d8:	f7f7 fef4 	bl	8000fc4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091e2:	2318      	movs	r3, #24
 80091e4:	2200      	movs	r2, #0
 80091e6:	2100      	movs	r1, #0
 80091e8:	f7fa fc80 	bl	8003aec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80091f2:	2358      	movs	r3, #88	@ 0x58
 80091f4:	2200      	movs	r2, #0
 80091f6:	2180      	movs	r1, #128	@ 0x80
 80091f8:	f7fa fc78 	bl	8003aec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009202:	23c0      	movs	r3, #192	@ 0xc0
 8009204:	2200      	movs	r2, #0
 8009206:	2181      	movs	r1, #129	@ 0x81
 8009208:	f7fa fc70 	bl	8003aec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009212:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009216:	2200      	movs	r2, #0
 8009218:	2101      	movs	r1, #1
 800921a:	f7fa fc67 	bl	8003aec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009224:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009228:	2200      	movs	r2, #0
 800922a:	2182      	movs	r1, #130	@ 0x82
 800922c:	f7fa fc5e 	bl	8003aec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	20001168 	.word	0x20001168
 8009240:	40005c00 	.word	0x40005c00

08009244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800925a:	4618      	mov	r0, r3
 800925c:	f7f9 f81e 	bl	800229c <HAL_PCD_Start>
 8009260:	4603      	mov	r3, r0
 8009262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009264:	7bfb      	ldrb	r3, [r7, #15]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 f94e 	bl	8009508 <USBD_Get_USB_Status>
 800926c:	4603      	mov	r3, r0
 800926e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009270:	7bbb      	ldrb	r3, [r7, #14]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	4608      	mov	r0, r1
 8009284:	4611      	mov	r1, r2
 8009286:	461a      	mov	r2, r3
 8009288:	4603      	mov	r3, r0
 800928a:	70fb      	strb	r3, [r7, #3]
 800928c:	460b      	mov	r3, r1
 800928e:	70bb      	strb	r3, [r7, #2]
 8009290:	4613      	mov	r3, r2
 8009292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009298:	2300      	movs	r3, #0
 800929a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80092a2:	78bb      	ldrb	r3, [r7, #2]
 80092a4:	883a      	ldrh	r2, [r7, #0]
 80092a6:	78f9      	ldrb	r1, [r7, #3]
 80092a8:	f7f9 f972 	bl	8002590 <HAL_PCD_EP_Open>
 80092ac:	4603      	mov	r3, r0
 80092ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b0:	7bfb      	ldrb	r3, [r7, #15]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f928 	bl	8009508 <USBD_Get_USB_Status>
 80092b8:	4603      	mov	r3, r0
 80092ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	460b      	mov	r3, r1
 80092d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d6:	2300      	movs	r3, #0
 80092d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80092e0:	78fa      	ldrb	r2, [r7, #3]
 80092e2:	4611      	mov	r1, r2
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7f9 f9b0 	bl	800264a <HAL_PCD_EP_Close>
 80092ea:	4603      	mov	r3, r0
 80092ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 f909 	bl	8009508 <USBD_Get_USB_Status>
 80092f6:	4603      	mov	r3, r0
 80092f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	460b      	mov	r3, r1
 800930e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009310:	2300      	movs	r3, #0
 8009312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800931e:	78fa      	ldrb	r2, [r7, #3]
 8009320:	4611      	mov	r1, r2
 8009322:	4618      	mov	r0, r3
 8009324:	f7f9 fa58 	bl	80027d8 <HAL_PCD_EP_SetStall>
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 f8ea 	bl	8009508 <USBD_Get_USB_Status>
 8009334:	4603      	mov	r3, r0
 8009336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009338:	7bbb      	ldrb	r3, [r7, #14]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	460b      	mov	r3, r1
 800934c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800935c:	78fa      	ldrb	r2, [r7, #3]
 800935e:	4611      	mov	r1, r2
 8009360:	4618      	mov	r0, r3
 8009362:	f7f9 fa99 	bl	8002898 <HAL_PCD_EP_ClrStall>
 8009366:	4603      	mov	r3, r0
 8009368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	4618      	mov	r0, r3
 800936e:	f000 f8cb 	bl	8009508 <USBD_Get_USB_Status>
 8009372:	4603      	mov	r3, r0
 8009374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009376:	7bbb      	ldrb	r3, [r7, #14]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009392:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009398:	2b00      	cmp	r3, #0
 800939a:	da0b      	bge.n	80093b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800939c:	78fb      	ldrb	r3, [r7, #3]
 800939e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093a2:	68f9      	ldr	r1, [r7, #12]
 80093a4:	4613      	mov	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	00db      	lsls	r3, r3, #3
 80093ac:	440b      	add	r3, r1
 80093ae:	3312      	adds	r3, #18
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	e00b      	b.n	80093cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093ba:	68f9      	ldr	r1, [r7, #12]
 80093bc:	4613      	mov	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	440b      	add	r3, r1
 80093c6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80093ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bc80      	pop	{r7}
 80093d4:	4770      	bx	lr

080093d6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80093f0:	78fa      	ldrb	r2, [r7, #3]
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7f9 f8a7 	bl	8002548 <HAL_PCD_SetAddress>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 f881 	bl	8009508 <USBD_Get_USB_Status>
 8009406:	4603      	mov	r3, r0
 8009408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940a:	7bbb      	ldrb	r3, [r7, #14]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	607a      	str	r2, [r7, #4]
 800941e:	461a      	mov	r2, r3
 8009420:	460b      	mov	r3, r1
 8009422:	72fb      	strb	r3, [r7, #11]
 8009424:	4613      	mov	r3, r2
 8009426:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009436:	893b      	ldrh	r3, [r7, #8]
 8009438:	7af9      	ldrb	r1, [r7, #11]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	f7f9 f995 	bl	800276a <HAL_PCD_EP_Transmit>
 8009440:	4603      	mov	r3, r0
 8009442:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009444:	7dfb      	ldrb	r3, [r7, #23]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 f85e 	bl	8009508 <USBD_Get_USB_Status>
 800944c:	4603      	mov	r3, r0
 800944e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009450:	7dbb      	ldrb	r3, [r7, #22]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b086      	sub	sp, #24
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	461a      	mov	r2, r3
 8009466:	460b      	mov	r3, r1
 8009468:	72fb      	strb	r3, [r7, #11]
 800946a:	4613      	mov	r3, r2
 800946c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800947c:	893b      	ldrh	r3, [r7, #8]
 800947e:	7af9      	ldrb	r1, [r7, #11]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	f7f9 f92a 	bl	80026da <HAL_PCD_EP_Receive>
 8009486:	4603      	mov	r3, r0
 8009488:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	4618      	mov	r0, r3
 800948e:	f000 f83b 	bl	8009508 <USBD_Get_USB_Status>
 8009492:	4603      	mov	r3, r0
 8009494:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009496:	7dbb      	ldrb	r3, [r7, #22]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094b2:	78fa      	ldrb	r2, [r7, #3]
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7f9 f940 	bl	800273c <HAL_PCD_EP_GetRxCount>
 80094bc:	4603      	mov	r3, r0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80094d0:	4b02      	ldr	r3, [pc, #8]	@ (80094dc <USBD_static_malloc+0x14>)
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bc80      	pop	{r7}
 80094da:	4770      	bx	lr
 80094dc:	20001440 	.word	0x20001440

080094e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]

}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bc80      	pop	{r7}
 80094f0:	4770      	bx	lr

080094f2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f2:	b480      	push	{r7}
 80094f4:	b083      	sub	sp, #12
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	460b      	mov	r3, r1
 80094fc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80094fe:	bf00      	nop
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	bc80      	pop	{r7}
 8009506:	4770      	bx	lr

08009508 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	4603      	mov	r3, r0
 8009510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	2b03      	cmp	r3, #3
 800951a:	d817      	bhi.n	800954c <USBD_Get_USB_Status+0x44>
 800951c:	a201      	add	r2, pc, #4	@ (adr r2, 8009524 <USBD_Get_USB_Status+0x1c>)
 800951e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009522:	bf00      	nop
 8009524:	08009535 	.word	0x08009535
 8009528:	0800953b 	.word	0x0800953b
 800952c:	08009541 	.word	0x08009541
 8009530:	08009547 	.word	0x08009547
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	73fb      	strb	r3, [r7, #15]
    break;
 8009538:	e00b      	b.n	8009552 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800953a:	2302      	movs	r3, #2
 800953c:	73fb      	strb	r3, [r7, #15]
    break;
 800953e:	e008      	b.n	8009552 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009540:	2301      	movs	r3, #1
 8009542:	73fb      	strb	r3, [r7, #15]
    break;
 8009544:	e005      	b.n	8009552 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009546:	2302      	movs	r3, #2
 8009548:	73fb      	strb	r3, [r7, #15]
    break;
 800954a:	e002      	b.n	8009552 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800954c:	2302      	movs	r3, #2
 800954e:	73fb      	strb	r3, [r7, #15]
    break;
 8009550:	bf00      	nop
  }
  return usb_status;
 8009552:	7bfb      	ldrb	r3, [r7, #15]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	bc80      	pop	{r7}
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop

08009560 <__cvt>:
 8009560:	2b00      	cmp	r3, #0
 8009562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009566:	461d      	mov	r5, r3
 8009568:	bfbb      	ittet	lt
 800956a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800956e:	461d      	movlt	r5, r3
 8009570:	2300      	movge	r3, #0
 8009572:	232d      	movlt	r3, #45	@ 0x2d
 8009574:	b088      	sub	sp, #32
 8009576:	4614      	mov	r4, r2
 8009578:	bfb8      	it	lt
 800957a:	4614      	movlt	r4, r2
 800957c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800957e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009580:	7013      	strb	r3, [r2, #0]
 8009582:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009584:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009588:	f023 0820 	bic.w	r8, r3, #32
 800958c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009590:	d005      	beq.n	800959e <__cvt+0x3e>
 8009592:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009596:	d100      	bne.n	800959a <__cvt+0x3a>
 8009598:	3601      	adds	r6, #1
 800959a:	2302      	movs	r3, #2
 800959c:	e000      	b.n	80095a0 <__cvt+0x40>
 800959e:	2303      	movs	r3, #3
 80095a0:	aa07      	add	r2, sp, #28
 80095a2:	9204      	str	r2, [sp, #16]
 80095a4:	aa06      	add	r2, sp, #24
 80095a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80095aa:	e9cd 3600 	strd	r3, r6, [sp]
 80095ae:	4622      	mov	r2, r4
 80095b0:	462b      	mov	r3, r5
 80095b2:	f001 fe9d 	bl	800b2f0 <_dtoa_r>
 80095b6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80095ba:	4607      	mov	r7, r0
 80095bc:	d119      	bne.n	80095f2 <__cvt+0x92>
 80095be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80095c0:	07db      	lsls	r3, r3, #31
 80095c2:	d50e      	bpl.n	80095e2 <__cvt+0x82>
 80095c4:	eb00 0906 	add.w	r9, r0, r6
 80095c8:	2200      	movs	r2, #0
 80095ca:	2300      	movs	r3, #0
 80095cc:	4620      	mov	r0, r4
 80095ce:	4629      	mov	r1, r5
 80095d0:	f7f7 f9ea 	bl	80009a8 <__aeabi_dcmpeq>
 80095d4:	b108      	cbz	r0, 80095da <__cvt+0x7a>
 80095d6:	f8cd 901c 	str.w	r9, [sp, #28]
 80095da:	2230      	movs	r2, #48	@ 0x30
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	454b      	cmp	r3, r9
 80095e0:	d31e      	bcc.n	8009620 <__cvt+0xc0>
 80095e2:	4638      	mov	r0, r7
 80095e4:	9b07      	ldr	r3, [sp, #28]
 80095e6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80095e8:	1bdb      	subs	r3, r3, r7
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	b008      	add	sp, #32
 80095ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095f6:	eb00 0906 	add.w	r9, r0, r6
 80095fa:	d1e5      	bne.n	80095c8 <__cvt+0x68>
 80095fc:	7803      	ldrb	r3, [r0, #0]
 80095fe:	2b30      	cmp	r3, #48	@ 0x30
 8009600:	d10a      	bne.n	8009618 <__cvt+0xb8>
 8009602:	2200      	movs	r2, #0
 8009604:	2300      	movs	r3, #0
 8009606:	4620      	mov	r0, r4
 8009608:	4629      	mov	r1, r5
 800960a:	f7f7 f9cd 	bl	80009a8 <__aeabi_dcmpeq>
 800960e:	b918      	cbnz	r0, 8009618 <__cvt+0xb8>
 8009610:	f1c6 0601 	rsb	r6, r6, #1
 8009614:	f8ca 6000 	str.w	r6, [sl]
 8009618:	f8da 3000 	ldr.w	r3, [sl]
 800961c:	4499      	add	r9, r3
 800961e:	e7d3      	b.n	80095c8 <__cvt+0x68>
 8009620:	1c59      	adds	r1, r3, #1
 8009622:	9107      	str	r1, [sp, #28]
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	e7d9      	b.n	80095dc <__cvt+0x7c>

08009628 <__exponent>:
 8009628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800962a:	2900      	cmp	r1, #0
 800962c:	bfb6      	itet	lt
 800962e:	232d      	movlt	r3, #45	@ 0x2d
 8009630:	232b      	movge	r3, #43	@ 0x2b
 8009632:	4249      	neglt	r1, r1
 8009634:	2909      	cmp	r1, #9
 8009636:	7002      	strb	r2, [r0, #0]
 8009638:	7043      	strb	r3, [r0, #1]
 800963a:	dd29      	ble.n	8009690 <__exponent+0x68>
 800963c:	f10d 0307 	add.w	r3, sp, #7
 8009640:	461d      	mov	r5, r3
 8009642:	270a      	movs	r7, #10
 8009644:	fbb1 f6f7 	udiv	r6, r1, r7
 8009648:	461a      	mov	r2, r3
 800964a:	fb07 1416 	mls	r4, r7, r6, r1
 800964e:	3430      	adds	r4, #48	@ 0x30
 8009650:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009654:	460c      	mov	r4, r1
 8009656:	2c63      	cmp	r4, #99	@ 0x63
 8009658:	4631      	mov	r1, r6
 800965a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800965e:	dcf1      	bgt.n	8009644 <__exponent+0x1c>
 8009660:	3130      	adds	r1, #48	@ 0x30
 8009662:	1e94      	subs	r4, r2, #2
 8009664:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009668:	4623      	mov	r3, r4
 800966a:	1c41      	adds	r1, r0, #1
 800966c:	42ab      	cmp	r3, r5
 800966e:	d30a      	bcc.n	8009686 <__exponent+0x5e>
 8009670:	f10d 0309 	add.w	r3, sp, #9
 8009674:	1a9b      	subs	r3, r3, r2
 8009676:	42ac      	cmp	r4, r5
 8009678:	bf88      	it	hi
 800967a:	2300      	movhi	r3, #0
 800967c:	3302      	adds	r3, #2
 800967e:	4403      	add	r3, r0
 8009680:	1a18      	subs	r0, r3, r0
 8009682:	b003      	add	sp, #12
 8009684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009686:	f813 6b01 	ldrb.w	r6, [r3], #1
 800968a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800968e:	e7ed      	b.n	800966c <__exponent+0x44>
 8009690:	2330      	movs	r3, #48	@ 0x30
 8009692:	3130      	adds	r1, #48	@ 0x30
 8009694:	7083      	strb	r3, [r0, #2]
 8009696:	70c1      	strb	r1, [r0, #3]
 8009698:	1d03      	adds	r3, r0, #4
 800969a:	e7f1      	b.n	8009680 <__exponent+0x58>

0800969c <_printf_float>:
 800969c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a0:	b091      	sub	sp, #68	@ 0x44
 80096a2:	460c      	mov	r4, r1
 80096a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80096a8:	4616      	mov	r6, r2
 80096aa:	461f      	mov	r7, r3
 80096ac:	4605      	mov	r5, r0
 80096ae:	f001 fd3d 	bl	800b12c <_localeconv_r>
 80096b2:	6803      	ldr	r3, [r0, #0]
 80096b4:	4618      	mov	r0, r3
 80096b6:	9308      	str	r3, [sp, #32]
 80096b8:	f7f6 fd4a 	bl	8000150 <strlen>
 80096bc:	2300      	movs	r3, #0
 80096be:	930e      	str	r3, [sp, #56]	@ 0x38
 80096c0:	f8d8 3000 	ldr.w	r3, [r8]
 80096c4:	9009      	str	r0, [sp, #36]	@ 0x24
 80096c6:	3307      	adds	r3, #7
 80096c8:	f023 0307 	bic.w	r3, r3, #7
 80096cc:	f103 0208 	add.w	r2, r3, #8
 80096d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80096d4:	f8d4 b000 	ldr.w	fp, [r4]
 80096d8:	f8c8 2000 	str.w	r2, [r8]
 80096dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80096e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096e6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80096ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80096f6:	4b9c      	ldr	r3, [pc, #624]	@ (8009968 <_printf_float+0x2cc>)
 80096f8:	f7f7 f988 	bl	8000a0c <__aeabi_dcmpun>
 80096fc:	bb70      	cbnz	r0, 800975c <_printf_float+0xc0>
 80096fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009702:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009706:	4b98      	ldr	r3, [pc, #608]	@ (8009968 <_printf_float+0x2cc>)
 8009708:	f7f7 f962 	bl	80009d0 <__aeabi_dcmple>
 800970c:	bb30      	cbnz	r0, 800975c <_printf_float+0xc0>
 800970e:	2200      	movs	r2, #0
 8009710:	2300      	movs	r3, #0
 8009712:	4640      	mov	r0, r8
 8009714:	4649      	mov	r1, r9
 8009716:	f7f7 f951 	bl	80009bc <__aeabi_dcmplt>
 800971a:	b110      	cbz	r0, 8009722 <_printf_float+0x86>
 800971c:	232d      	movs	r3, #45	@ 0x2d
 800971e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009722:	4a92      	ldr	r2, [pc, #584]	@ (800996c <_printf_float+0x2d0>)
 8009724:	4b92      	ldr	r3, [pc, #584]	@ (8009970 <_printf_float+0x2d4>)
 8009726:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800972a:	bf94      	ite	ls
 800972c:	4690      	movls	r8, r2
 800972e:	4698      	movhi	r8, r3
 8009730:	2303      	movs	r3, #3
 8009732:	f04f 0900 	mov.w	r9, #0
 8009736:	6123      	str	r3, [r4, #16]
 8009738:	f02b 0304 	bic.w	r3, fp, #4
 800973c:	6023      	str	r3, [r4, #0]
 800973e:	4633      	mov	r3, r6
 8009740:	4621      	mov	r1, r4
 8009742:	4628      	mov	r0, r5
 8009744:	9700      	str	r7, [sp, #0]
 8009746:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009748:	f000 f9d4 	bl	8009af4 <_printf_common>
 800974c:	3001      	adds	r0, #1
 800974e:	f040 8090 	bne.w	8009872 <_printf_float+0x1d6>
 8009752:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009756:	b011      	add	sp, #68	@ 0x44
 8009758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975c:	4642      	mov	r2, r8
 800975e:	464b      	mov	r3, r9
 8009760:	4640      	mov	r0, r8
 8009762:	4649      	mov	r1, r9
 8009764:	f7f7 f952 	bl	8000a0c <__aeabi_dcmpun>
 8009768:	b148      	cbz	r0, 800977e <_printf_float+0xe2>
 800976a:	464b      	mov	r3, r9
 800976c:	2b00      	cmp	r3, #0
 800976e:	bfb8      	it	lt
 8009770:	232d      	movlt	r3, #45	@ 0x2d
 8009772:	4a80      	ldr	r2, [pc, #512]	@ (8009974 <_printf_float+0x2d8>)
 8009774:	bfb8      	it	lt
 8009776:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800977a:	4b7f      	ldr	r3, [pc, #508]	@ (8009978 <_printf_float+0x2dc>)
 800977c:	e7d3      	b.n	8009726 <_printf_float+0x8a>
 800977e:	6863      	ldr	r3, [r4, #4]
 8009780:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009784:	1c5a      	adds	r2, r3, #1
 8009786:	d13f      	bne.n	8009808 <_printf_float+0x16c>
 8009788:	2306      	movs	r3, #6
 800978a:	6063      	str	r3, [r4, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009792:	6023      	str	r3, [r4, #0]
 8009794:	9206      	str	r2, [sp, #24]
 8009796:	aa0e      	add	r2, sp, #56	@ 0x38
 8009798:	e9cd a204 	strd	sl, r2, [sp, #16]
 800979c:	aa0d      	add	r2, sp, #52	@ 0x34
 800979e:	9203      	str	r2, [sp, #12]
 80097a0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80097a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80097a8:	6863      	ldr	r3, [r4, #4]
 80097aa:	4642      	mov	r2, r8
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	4628      	mov	r0, r5
 80097b0:	464b      	mov	r3, r9
 80097b2:	910a      	str	r1, [sp, #40]	@ 0x28
 80097b4:	f7ff fed4 	bl	8009560 <__cvt>
 80097b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097ba:	4680      	mov	r8, r0
 80097bc:	2947      	cmp	r1, #71	@ 0x47
 80097be:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80097c0:	d128      	bne.n	8009814 <_printf_float+0x178>
 80097c2:	1cc8      	adds	r0, r1, #3
 80097c4:	db02      	blt.n	80097cc <_printf_float+0x130>
 80097c6:	6863      	ldr	r3, [r4, #4]
 80097c8:	4299      	cmp	r1, r3
 80097ca:	dd40      	ble.n	800984e <_printf_float+0x1b2>
 80097cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80097d0:	fa5f fa8a 	uxtb.w	sl, sl
 80097d4:	4652      	mov	r2, sl
 80097d6:	3901      	subs	r1, #1
 80097d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80097dc:	910d      	str	r1, [sp, #52]	@ 0x34
 80097de:	f7ff ff23 	bl	8009628 <__exponent>
 80097e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097e4:	4681      	mov	r9, r0
 80097e6:	1813      	adds	r3, r2, r0
 80097e8:	2a01      	cmp	r2, #1
 80097ea:	6123      	str	r3, [r4, #16]
 80097ec:	dc02      	bgt.n	80097f4 <_printf_float+0x158>
 80097ee:	6822      	ldr	r2, [r4, #0]
 80097f0:	07d2      	lsls	r2, r2, #31
 80097f2:	d501      	bpl.n	80097f8 <_printf_float+0x15c>
 80097f4:	3301      	adds	r3, #1
 80097f6:	6123      	str	r3, [r4, #16]
 80097f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d09e      	beq.n	800973e <_printf_float+0xa2>
 8009800:	232d      	movs	r3, #45	@ 0x2d
 8009802:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009806:	e79a      	b.n	800973e <_printf_float+0xa2>
 8009808:	2947      	cmp	r1, #71	@ 0x47
 800980a:	d1bf      	bne.n	800978c <_printf_float+0xf0>
 800980c:	2b00      	cmp	r3, #0
 800980e:	d1bd      	bne.n	800978c <_printf_float+0xf0>
 8009810:	2301      	movs	r3, #1
 8009812:	e7ba      	b.n	800978a <_printf_float+0xee>
 8009814:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009818:	d9dc      	bls.n	80097d4 <_printf_float+0x138>
 800981a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800981e:	d118      	bne.n	8009852 <_printf_float+0x1b6>
 8009820:	2900      	cmp	r1, #0
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	dd0b      	ble.n	800983e <_printf_float+0x1a2>
 8009826:	6121      	str	r1, [r4, #16]
 8009828:	b913      	cbnz	r3, 8009830 <_printf_float+0x194>
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	07d0      	lsls	r0, r2, #31
 800982e:	d502      	bpl.n	8009836 <_printf_float+0x19a>
 8009830:	3301      	adds	r3, #1
 8009832:	440b      	add	r3, r1
 8009834:	6123      	str	r3, [r4, #16]
 8009836:	f04f 0900 	mov.w	r9, #0
 800983a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800983c:	e7dc      	b.n	80097f8 <_printf_float+0x15c>
 800983e:	b913      	cbnz	r3, 8009846 <_printf_float+0x1aa>
 8009840:	6822      	ldr	r2, [r4, #0]
 8009842:	07d2      	lsls	r2, r2, #31
 8009844:	d501      	bpl.n	800984a <_printf_float+0x1ae>
 8009846:	3302      	adds	r3, #2
 8009848:	e7f4      	b.n	8009834 <_printf_float+0x198>
 800984a:	2301      	movs	r3, #1
 800984c:	e7f2      	b.n	8009834 <_printf_float+0x198>
 800984e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009854:	4299      	cmp	r1, r3
 8009856:	db05      	blt.n	8009864 <_printf_float+0x1c8>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	6121      	str	r1, [r4, #16]
 800985c:	07d8      	lsls	r0, r3, #31
 800985e:	d5ea      	bpl.n	8009836 <_printf_float+0x19a>
 8009860:	1c4b      	adds	r3, r1, #1
 8009862:	e7e7      	b.n	8009834 <_printf_float+0x198>
 8009864:	2900      	cmp	r1, #0
 8009866:	bfcc      	ite	gt
 8009868:	2201      	movgt	r2, #1
 800986a:	f1c1 0202 	rsble	r2, r1, #2
 800986e:	4413      	add	r3, r2
 8009870:	e7e0      	b.n	8009834 <_printf_float+0x198>
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	055a      	lsls	r2, r3, #21
 8009876:	d407      	bmi.n	8009888 <_printf_float+0x1ec>
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	4642      	mov	r2, r8
 800987c:	4631      	mov	r1, r6
 800987e:	4628      	mov	r0, r5
 8009880:	47b8      	blx	r7
 8009882:	3001      	adds	r0, #1
 8009884:	d12b      	bne.n	80098de <_printf_float+0x242>
 8009886:	e764      	b.n	8009752 <_printf_float+0xb6>
 8009888:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800988c:	f240 80dc 	bls.w	8009a48 <_printf_float+0x3ac>
 8009890:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009894:	2200      	movs	r2, #0
 8009896:	2300      	movs	r3, #0
 8009898:	f7f7 f886 	bl	80009a8 <__aeabi_dcmpeq>
 800989c:	2800      	cmp	r0, #0
 800989e:	d033      	beq.n	8009908 <_printf_float+0x26c>
 80098a0:	2301      	movs	r3, #1
 80098a2:	4631      	mov	r1, r6
 80098a4:	4628      	mov	r0, r5
 80098a6:	4a35      	ldr	r2, [pc, #212]	@ (800997c <_printf_float+0x2e0>)
 80098a8:	47b8      	blx	r7
 80098aa:	3001      	adds	r0, #1
 80098ac:	f43f af51 	beq.w	8009752 <_printf_float+0xb6>
 80098b0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80098b4:	4543      	cmp	r3, r8
 80098b6:	db02      	blt.n	80098be <_printf_float+0x222>
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	07d8      	lsls	r0, r3, #31
 80098bc:	d50f      	bpl.n	80098de <_printf_float+0x242>
 80098be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80098c2:	4631      	mov	r1, r6
 80098c4:	4628      	mov	r0, r5
 80098c6:	47b8      	blx	r7
 80098c8:	3001      	adds	r0, #1
 80098ca:	f43f af42 	beq.w	8009752 <_printf_float+0xb6>
 80098ce:	f04f 0900 	mov.w	r9, #0
 80098d2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80098d6:	f104 0a1a 	add.w	sl, r4, #26
 80098da:	45c8      	cmp	r8, r9
 80098dc:	dc09      	bgt.n	80098f2 <_printf_float+0x256>
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	079b      	lsls	r3, r3, #30
 80098e2:	f100 8102 	bmi.w	8009aea <_printf_float+0x44e>
 80098e6:	68e0      	ldr	r0, [r4, #12]
 80098e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ea:	4298      	cmp	r0, r3
 80098ec:	bfb8      	it	lt
 80098ee:	4618      	movlt	r0, r3
 80098f0:	e731      	b.n	8009756 <_printf_float+0xba>
 80098f2:	2301      	movs	r3, #1
 80098f4:	4652      	mov	r2, sl
 80098f6:	4631      	mov	r1, r6
 80098f8:	4628      	mov	r0, r5
 80098fa:	47b8      	blx	r7
 80098fc:	3001      	adds	r0, #1
 80098fe:	f43f af28 	beq.w	8009752 <_printf_float+0xb6>
 8009902:	f109 0901 	add.w	r9, r9, #1
 8009906:	e7e8      	b.n	80098da <_printf_float+0x23e>
 8009908:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800990a:	2b00      	cmp	r3, #0
 800990c:	dc38      	bgt.n	8009980 <_printf_float+0x2e4>
 800990e:	2301      	movs	r3, #1
 8009910:	4631      	mov	r1, r6
 8009912:	4628      	mov	r0, r5
 8009914:	4a19      	ldr	r2, [pc, #100]	@ (800997c <_printf_float+0x2e0>)
 8009916:	47b8      	blx	r7
 8009918:	3001      	adds	r0, #1
 800991a:	f43f af1a 	beq.w	8009752 <_printf_float+0xb6>
 800991e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009922:	ea59 0303 	orrs.w	r3, r9, r3
 8009926:	d102      	bne.n	800992e <_printf_float+0x292>
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	07d9      	lsls	r1, r3, #31
 800992c:	d5d7      	bpl.n	80098de <_printf_float+0x242>
 800992e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009932:	4631      	mov	r1, r6
 8009934:	4628      	mov	r0, r5
 8009936:	47b8      	blx	r7
 8009938:	3001      	adds	r0, #1
 800993a:	f43f af0a 	beq.w	8009752 <_printf_float+0xb6>
 800993e:	f04f 0a00 	mov.w	sl, #0
 8009942:	f104 0b1a 	add.w	fp, r4, #26
 8009946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009948:	425b      	negs	r3, r3
 800994a:	4553      	cmp	r3, sl
 800994c:	dc01      	bgt.n	8009952 <_printf_float+0x2b6>
 800994e:	464b      	mov	r3, r9
 8009950:	e793      	b.n	800987a <_printf_float+0x1de>
 8009952:	2301      	movs	r3, #1
 8009954:	465a      	mov	r2, fp
 8009956:	4631      	mov	r1, r6
 8009958:	4628      	mov	r0, r5
 800995a:	47b8      	blx	r7
 800995c:	3001      	adds	r0, #1
 800995e:	f43f aef8 	beq.w	8009752 <_printf_float+0xb6>
 8009962:	f10a 0a01 	add.w	sl, sl, #1
 8009966:	e7ee      	b.n	8009946 <_printf_float+0x2aa>
 8009968:	7fefffff 	.word	0x7fefffff
 800996c:	0800dcc2 	.word	0x0800dcc2
 8009970:	0800dcc6 	.word	0x0800dcc6
 8009974:	0800dcca 	.word	0x0800dcca
 8009978:	0800dcce 	.word	0x0800dcce
 800997c:	0800dcd2 	.word	0x0800dcd2
 8009980:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009982:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009986:	4553      	cmp	r3, sl
 8009988:	bfa8      	it	ge
 800998a:	4653      	movge	r3, sl
 800998c:	2b00      	cmp	r3, #0
 800998e:	4699      	mov	r9, r3
 8009990:	dc36      	bgt.n	8009a00 <_printf_float+0x364>
 8009992:	f04f 0b00 	mov.w	fp, #0
 8009996:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800999a:	f104 021a 	add.w	r2, r4, #26
 800999e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80099a2:	eba3 0309 	sub.w	r3, r3, r9
 80099a6:	455b      	cmp	r3, fp
 80099a8:	dc31      	bgt.n	8009a0e <_printf_float+0x372>
 80099aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099ac:	459a      	cmp	sl, r3
 80099ae:	dc3a      	bgt.n	8009a26 <_printf_float+0x38a>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	07da      	lsls	r2, r3, #31
 80099b4:	d437      	bmi.n	8009a26 <_printf_float+0x38a>
 80099b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099b8:	ebaa 0903 	sub.w	r9, sl, r3
 80099bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099be:	ebaa 0303 	sub.w	r3, sl, r3
 80099c2:	4599      	cmp	r9, r3
 80099c4:	bfa8      	it	ge
 80099c6:	4699      	movge	r9, r3
 80099c8:	f1b9 0f00 	cmp.w	r9, #0
 80099cc:	dc33      	bgt.n	8009a36 <_printf_float+0x39a>
 80099ce:	f04f 0800 	mov.w	r8, #0
 80099d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099d6:	f104 0b1a 	add.w	fp, r4, #26
 80099da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099dc:	ebaa 0303 	sub.w	r3, sl, r3
 80099e0:	eba3 0309 	sub.w	r3, r3, r9
 80099e4:	4543      	cmp	r3, r8
 80099e6:	f77f af7a 	ble.w	80098de <_printf_float+0x242>
 80099ea:	2301      	movs	r3, #1
 80099ec:	465a      	mov	r2, fp
 80099ee:	4631      	mov	r1, r6
 80099f0:	4628      	mov	r0, r5
 80099f2:	47b8      	blx	r7
 80099f4:	3001      	adds	r0, #1
 80099f6:	f43f aeac 	beq.w	8009752 <_printf_float+0xb6>
 80099fa:	f108 0801 	add.w	r8, r8, #1
 80099fe:	e7ec      	b.n	80099da <_printf_float+0x33e>
 8009a00:	4642      	mov	r2, r8
 8009a02:	4631      	mov	r1, r6
 8009a04:	4628      	mov	r0, r5
 8009a06:	47b8      	blx	r7
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d1c2      	bne.n	8009992 <_printf_float+0x2f6>
 8009a0c:	e6a1      	b.n	8009752 <_printf_float+0xb6>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	4631      	mov	r1, r6
 8009a12:	4628      	mov	r0, r5
 8009a14:	920a      	str	r2, [sp, #40]	@ 0x28
 8009a16:	47b8      	blx	r7
 8009a18:	3001      	adds	r0, #1
 8009a1a:	f43f ae9a 	beq.w	8009752 <_printf_float+0xb6>
 8009a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a20:	f10b 0b01 	add.w	fp, fp, #1
 8009a24:	e7bb      	b.n	800999e <_printf_float+0x302>
 8009a26:	4631      	mov	r1, r6
 8009a28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b8      	blx	r7
 8009a30:	3001      	adds	r0, #1
 8009a32:	d1c0      	bne.n	80099b6 <_printf_float+0x31a>
 8009a34:	e68d      	b.n	8009752 <_printf_float+0xb6>
 8009a36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a38:	464b      	mov	r3, r9
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	4442      	add	r2, r8
 8009a40:	47b8      	blx	r7
 8009a42:	3001      	adds	r0, #1
 8009a44:	d1c3      	bne.n	80099ce <_printf_float+0x332>
 8009a46:	e684      	b.n	8009752 <_printf_float+0xb6>
 8009a48:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009a4c:	f1ba 0f01 	cmp.w	sl, #1
 8009a50:	dc01      	bgt.n	8009a56 <_printf_float+0x3ba>
 8009a52:	07db      	lsls	r3, r3, #31
 8009a54:	d536      	bpl.n	8009ac4 <_printf_float+0x428>
 8009a56:	2301      	movs	r3, #1
 8009a58:	4642      	mov	r2, r8
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	47b8      	blx	r7
 8009a60:	3001      	adds	r0, #1
 8009a62:	f43f ae76 	beq.w	8009752 <_printf_float+0xb6>
 8009a66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	47b8      	blx	r7
 8009a70:	3001      	adds	r0, #1
 8009a72:	f43f ae6e 	beq.w	8009752 <_printf_float+0xb6>
 8009a76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009a82:	f7f6 ff91 	bl	80009a8 <__aeabi_dcmpeq>
 8009a86:	b9c0      	cbnz	r0, 8009aba <_printf_float+0x41e>
 8009a88:	4653      	mov	r3, sl
 8009a8a:	f108 0201 	add.w	r2, r8, #1
 8009a8e:	4631      	mov	r1, r6
 8009a90:	4628      	mov	r0, r5
 8009a92:	47b8      	blx	r7
 8009a94:	3001      	adds	r0, #1
 8009a96:	d10c      	bne.n	8009ab2 <_printf_float+0x416>
 8009a98:	e65b      	b.n	8009752 <_printf_float+0xb6>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	465a      	mov	r2, fp
 8009a9e:	4631      	mov	r1, r6
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	47b8      	blx	r7
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	f43f ae54 	beq.w	8009752 <_printf_float+0xb6>
 8009aaa:	f108 0801 	add.w	r8, r8, #1
 8009aae:	45d0      	cmp	r8, sl
 8009ab0:	dbf3      	blt.n	8009a9a <_printf_float+0x3fe>
 8009ab2:	464b      	mov	r3, r9
 8009ab4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ab8:	e6e0      	b.n	800987c <_printf_float+0x1e0>
 8009aba:	f04f 0800 	mov.w	r8, #0
 8009abe:	f104 0b1a 	add.w	fp, r4, #26
 8009ac2:	e7f4      	b.n	8009aae <_printf_float+0x412>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	4642      	mov	r2, r8
 8009ac8:	e7e1      	b.n	8009a8e <_printf_float+0x3f2>
 8009aca:	2301      	movs	r3, #1
 8009acc:	464a      	mov	r2, r9
 8009ace:	4631      	mov	r1, r6
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	47b8      	blx	r7
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	f43f ae3c 	beq.w	8009752 <_printf_float+0xb6>
 8009ada:	f108 0801 	add.w	r8, r8, #1
 8009ade:	68e3      	ldr	r3, [r4, #12]
 8009ae0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ae2:	1a5b      	subs	r3, r3, r1
 8009ae4:	4543      	cmp	r3, r8
 8009ae6:	dcf0      	bgt.n	8009aca <_printf_float+0x42e>
 8009ae8:	e6fd      	b.n	80098e6 <_printf_float+0x24a>
 8009aea:	f04f 0800 	mov.w	r8, #0
 8009aee:	f104 0919 	add.w	r9, r4, #25
 8009af2:	e7f4      	b.n	8009ade <_printf_float+0x442>

08009af4 <_printf_common>:
 8009af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af8:	4616      	mov	r6, r2
 8009afa:	4698      	mov	r8, r3
 8009afc:	688a      	ldr	r2, [r1, #8]
 8009afe:	690b      	ldr	r3, [r1, #16]
 8009b00:	4607      	mov	r7, r0
 8009b02:	4293      	cmp	r3, r2
 8009b04:	bfb8      	it	lt
 8009b06:	4613      	movlt	r3, r2
 8009b08:	6033      	str	r3, [r6, #0]
 8009b0a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b0e:	460c      	mov	r4, r1
 8009b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b14:	b10a      	cbz	r2, 8009b1a <_printf_common+0x26>
 8009b16:	3301      	adds	r3, #1
 8009b18:	6033      	str	r3, [r6, #0]
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	0699      	lsls	r1, r3, #26
 8009b1e:	bf42      	ittt	mi
 8009b20:	6833      	ldrmi	r3, [r6, #0]
 8009b22:	3302      	addmi	r3, #2
 8009b24:	6033      	strmi	r3, [r6, #0]
 8009b26:	6825      	ldr	r5, [r4, #0]
 8009b28:	f015 0506 	ands.w	r5, r5, #6
 8009b2c:	d106      	bne.n	8009b3c <_printf_common+0x48>
 8009b2e:	f104 0a19 	add.w	sl, r4, #25
 8009b32:	68e3      	ldr	r3, [r4, #12]
 8009b34:	6832      	ldr	r2, [r6, #0]
 8009b36:	1a9b      	subs	r3, r3, r2
 8009b38:	42ab      	cmp	r3, r5
 8009b3a:	dc2b      	bgt.n	8009b94 <_printf_common+0xa0>
 8009b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b40:	6822      	ldr	r2, [r4, #0]
 8009b42:	3b00      	subs	r3, #0
 8009b44:	bf18      	it	ne
 8009b46:	2301      	movne	r3, #1
 8009b48:	0692      	lsls	r2, r2, #26
 8009b4a:	d430      	bmi.n	8009bae <_printf_common+0xba>
 8009b4c:	4641      	mov	r1, r8
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b54:	47c8      	blx	r9
 8009b56:	3001      	adds	r0, #1
 8009b58:	d023      	beq.n	8009ba2 <_printf_common+0xae>
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	6922      	ldr	r2, [r4, #16]
 8009b5e:	f003 0306 	and.w	r3, r3, #6
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	bf14      	ite	ne
 8009b66:	2500      	movne	r5, #0
 8009b68:	6833      	ldreq	r3, [r6, #0]
 8009b6a:	f04f 0600 	mov.w	r6, #0
 8009b6e:	bf08      	it	eq
 8009b70:	68e5      	ldreq	r5, [r4, #12]
 8009b72:	f104 041a 	add.w	r4, r4, #26
 8009b76:	bf08      	it	eq
 8009b78:	1aed      	subeq	r5, r5, r3
 8009b7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009b7e:	bf08      	it	eq
 8009b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b84:	4293      	cmp	r3, r2
 8009b86:	bfc4      	itt	gt
 8009b88:	1a9b      	subgt	r3, r3, r2
 8009b8a:	18ed      	addgt	r5, r5, r3
 8009b8c:	42b5      	cmp	r5, r6
 8009b8e:	d11a      	bne.n	8009bc6 <_printf_common+0xd2>
 8009b90:	2000      	movs	r0, #0
 8009b92:	e008      	b.n	8009ba6 <_printf_common+0xb2>
 8009b94:	2301      	movs	r3, #1
 8009b96:	4652      	mov	r2, sl
 8009b98:	4641      	mov	r1, r8
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	47c8      	blx	r9
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	d103      	bne.n	8009baa <_printf_common+0xb6>
 8009ba2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009baa:	3501      	adds	r5, #1
 8009bac:	e7c1      	b.n	8009b32 <_printf_common+0x3e>
 8009bae:	2030      	movs	r0, #48	@ 0x30
 8009bb0:	18e1      	adds	r1, r4, r3
 8009bb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009bbc:	4422      	add	r2, r4
 8009bbe:	3302      	adds	r3, #2
 8009bc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009bc4:	e7c2      	b.n	8009b4c <_printf_common+0x58>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	4622      	mov	r2, r4
 8009bca:	4641      	mov	r1, r8
 8009bcc:	4638      	mov	r0, r7
 8009bce:	47c8      	blx	r9
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	d0e6      	beq.n	8009ba2 <_printf_common+0xae>
 8009bd4:	3601      	adds	r6, #1
 8009bd6:	e7d9      	b.n	8009b8c <_printf_common+0x98>

08009bd8 <_printf_i>:
 8009bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bdc:	7e0f      	ldrb	r7, [r1, #24]
 8009bde:	4691      	mov	r9, r2
 8009be0:	2f78      	cmp	r7, #120	@ 0x78
 8009be2:	4680      	mov	r8, r0
 8009be4:	460c      	mov	r4, r1
 8009be6:	469a      	mov	sl, r3
 8009be8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bee:	d807      	bhi.n	8009c00 <_printf_i+0x28>
 8009bf0:	2f62      	cmp	r7, #98	@ 0x62
 8009bf2:	d80a      	bhi.n	8009c0a <_printf_i+0x32>
 8009bf4:	2f00      	cmp	r7, #0
 8009bf6:	f000 80d3 	beq.w	8009da0 <_printf_i+0x1c8>
 8009bfa:	2f58      	cmp	r7, #88	@ 0x58
 8009bfc:	f000 80ba 	beq.w	8009d74 <_printf_i+0x19c>
 8009c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c08:	e03a      	b.n	8009c80 <_printf_i+0xa8>
 8009c0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c0e:	2b15      	cmp	r3, #21
 8009c10:	d8f6      	bhi.n	8009c00 <_printf_i+0x28>
 8009c12:	a101      	add	r1, pc, #4	@ (adr r1, 8009c18 <_printf_i+0x40>)
 8009c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c18:	08009c71 	.word	0x08009c71
 8009c1c:	08009c85 	.word	0x08009c85
 8009c20:	08009c01 	.word	0x08009c01
 8009c24:	08009c01 	.word	0x08009c01
 8009c28:	08009c01 	.word	0x08009c01
 8009c2c:	08009c01 	.word	0x08009c01
 8009c30:	08009c85 	.word	0x08009c85
 8009c34:	08009c01 	.word	0x08009c01
 8009c38:	08009c01 	.word	0x08009c01
 8009c3c:	08009c01 	.word	0x08009c01
 8009c40:	08009c01 	.word	0x08009c01
 8009c44:	08009d87 	.word	0x08009d87
 8009c48:	08009caf 	.word	0x08009caf
 8009c4c:	08009d41 	.word	0x08009d41
 8009c50:	08009c01 	.word	0x08009c01
 8009c54:	08009c01 	.word	0x08009c01
 8009c58:	08009da9 	.word	0x08009da9
 8009c5c:	08009c01 	.word	0x08009c01
 8009c60:	08009caf 	.word	0x08009caf
 8009c64:	08009c01 	.word	0x08009c01
 8009c68:	08009c01 	.word	0x08009c01
 8009c6c:	08009d49 	.word	0x08009d49
 8009c70:	6833      	ldr	r3, [r6, #0]
 8009c72:	1d1a      	adds	r2, r3, #4
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	6032      	str	r2, [r6, #0]
 8009c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c80:	2301      	movs	r3, #1
 8009c82:	e09e      	b.n	8009dc2 <_printf_i+0x1ea>
 8009c84:	6833      	ldr	r3, [r6, #0]
 8009c86:	6820      	ldr	r0, [r4, #0]
 8009c88:	1d19      	adds	r1, r3, #4
 8009c8a:	6031      	str	r1, [r6, #0]
 8009c8c:	0606      	lsls	r6, r0, #24
 8009c8e:	d501      	bpl.n	8009c94 <_printf_i+0xbc>
 8009c90:	681d      	ldr	r5, [r3, #0]
 8009c92:	e003      	b.n	8009c9c <_printf_i+0xc4>
 8009c94:	0645      	lsls	r5, r0, #25
 8009c96:	d5fb      	bpl.n	8009c90 <_printf_i+0xb8>
 8009c98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c9c:	2d00      	cmp	r5, #0
 8009c9e:	da03      	bge.n	8009ca8 <_printf_i+0xd0>
 8009ca0:	232d      	movs	r3, #45	@ 0x2d
 8009ca2:	426d      	negs	r5, r5
 8009ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ca8:	230a      	movs	r3, #10
 8009caa:	4859      	ldr	r0, [pc, #356]	@ (8009e10 <_printf_i+0x238>)
 8009cac:	e011      	b.n	8009cd2 <_printf_i+0xfa>
 8009cae:	6821      	ldr	r1, [r4, #0]
 8009cb0:	6833      	ldr	r3, [r6, #0]
 8009cb2:	0608      	lsls	r0, r1, #24
 8009cb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009cb8:	d402      	bmi.n	8009cc0 <_printf_i+0xe8>
 8009cba:	0649      	lsls	r1, r1, #25
 8009cbc:	bf48      	it	mi
 8009cbe:	b2ad      	uxthmi	r5, r5
 8009cc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009cc2:	6033      	str	r3, [r6, #0]
 8009cc4:	bf14      	ite	ne
 8009cc6:	230a      	movne	r3, #10
 8009cc8:	2308      	moveq	r3, #8
 8009cca:	4851      	ldr	r0, [pc, #324]	@ (8009e10 <_printf_i+0x238>)
 8009ccc:	2100      	movs	r1, #0
 8009cce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cd2:	6866      	ldr	r6, [r4, #4]
 8009cd4:	2e00      	cmp	r6, #0
 8009cd6:	bfa8      	it	ge
 8009cd8:	6821      	ldrge	r1, [r4, #0]
 8009cda:	60a6      	str	r6, [r4, #8]
 8009cdc:	bfa4      	itt	ge
 8009cde:	f021 0104 	bicge.w	r1, r1, #4
 8009ce2:	6021      	strge	r1, [r4, #0]
 8009ce4:	b90d      	cbnz	r5, 8009cea <_printf_i+0x112>
 8009ce6:	2e00      	cmp	r6, #0
 8009ce8:	d04b      	beq.n	8009d82 <_printf_i+0x1aa>
 8009cea:	4616      	mov	r6, r2
 8009cec:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cf0:	fb03 5711 	mls	r7, r3, r1, r5
 8009cf4:	5dc7      	ldrb	r7, [r0, r7]
 8009cf6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cfa:	462f      	mov	r7, r5
 8009cfc:	42bb      	cmp	r3, r7
 8009cfe:	460d      	mov	r5, r1
 8009d00:	d9f4      	bls.n	8009cec <_printf_i+0x114>
 8009d02:	2b08      	cmp	r3, #8
 8009d04:	d10b      	bne.n	8009d1e <_printf_i+0x146>
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	07df      	lsls	r7, r3, #31
 8009d0a:	d508      	bpl.n	8009d1e <_printf_i+0x146>
 8009d0c:	6923      	ldr	r3, [r4, #16]
 8009d0e:	6861      	ldr	r1, [r4, #4]
 8009d10:	4299      	cmp	r1, r3
 8009d12:	bfde      	ittt	le
 8009d14:	2330      	movle	r3, #48	@ 0x30
 8009d16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d1a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009d1e:	1b92      	subs	r2, r2, r6
 8009d20:	6122      	str	r2, [r4, #16]
 8009d22:	464b      	mov	r3, r9
 8009d24:	4621      	mov	r1, r4
 8009d26:	4640      	mov	r0, r8
 8009d28:	f8cd a000 	str.w	sl, [sp]
 8009d2c:	aa03      	add	r2, sp, #12
 8009d2e:	f7ff fee1 	bl	8009af4 <_printf_common>
 8009d32:	3001      	adds	r0, #1
 8009d34:	d14a      	bne.n	8009dcc <_printf_i+0x1f4>
 8009d36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d3a:	b004      	add	sp, #16
 8009d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	f043 0320 	orr.w	r3, r3, #32
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	2778      	movs	r7, #120	@ 0x78
 8009d4a:	4832      	ldr	r0, [pc, #200]	@ (8009e14 <_printf_i+0x23c>)
 8009d4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	6831      	ldr	r1, [r6, #0]
 8009d54:	061f      	lsls	r7, r3, #24
 8009d56:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d5a:	d402      	bmi.n	8009d62 <_printf_i+0x18a>
 8009d5c:	065f      	lsls	r7, r3, #25
 8009d5e:	bf48      	it	mi
 8009d60:	b2ad      	uxthmi	r5, r5
 8009d62:	6031      	str	r1, [r6, #0]
 8009d64:	07d9      	lsls	r1, r3, #31
 8009d66:	bf44      	itt	mi
 8009d68:	f043 0320 	orrmi.w	r3, r3, #32
 8009d6c:	6023      	strmi	r3, [r4, #0]
 8009d6e:	b11d      	cbz	r5, 8009d78 <_printf_i+0x1a0>
 8009d70:	2310      	movs	r3, #16
 8009d72:	e7ab      	b.n	8009ccc <_printf_i+0xf4>
 8009d74:	4826      	ldr	r0, [pc, #152]	@ (8009e10 <_printf_i+0x238>)
 8009d76:	e7e9      	b.n	8009d4c <_printf_i+0x174>
 8009d78:	6823      	ldr	r3, [r4, #0]
 8009d7a:	f023 0320 	bic.w	r3, r3, #32
 8009d7e:	6023      	str	r3, [r4, #0]
 8009d80:	e7f6      	b.n	8009d70 <_printf_i+0x198>
 8009d82:	4616      	mov	r6, r2
 8009d84:	e7bd      	b.n	8009d02 <_printf_i+0x12a>
 8009d86:	6833      	ldr	r3, [r6, #0]
 8009d88:	6825      	ldr	r5, [r4, #0]
 8009d8a:	1d18      	adds	r0, r3, #4
 8009d8c:	6961      	ldr	r1, [r4, #20]
 8009d8e:	6030      	str	r0, [r6, #0]
 8009d90:	062e      	lsls	r6, r5, #24
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	d501      	bpl.n	8009d9a <_printf_i+0x1c2>
 8009d96:	6019      	str	r1, [r3, #0]
 8009d98:	e002      	b.n	8009da0 <_printf_i+0x1c8>
 8009d9a:	0668      	lsls	r0, r5, #25
 8009d9c:	d5fb      	bpl.n	8009d96 <_printf_i+0x1be>
 8009d9e:	8019      	strh	r1, [r3, #0]
 8009da0:	2300      	movs	r3, #0
 8009da2:	4616      	mov	r6, r2
 8009da4:	6123      	str	r3, [r4, #16]
 8009da6:	e7bc      	b.n	8009d22 <_printf_i+0x14a>
 8009da8:	6833      	ldr	r3, [r6, #0]
 8009daa:	2100      	movs	r1, #0
 8009dac:	1d1a      	adds	r2, r3, #4
 8009dae:	6032      	str	r2, [r6, #0]
 8009db0:	681e      	ldr	r6, [r3, #0]
 8009db2:	6862      	ldr	r2, [r4, #4]
 8009db4:	4630      	mov	r0, r6
 8009db6:	f001 f9ea 	bl	800b18e <memchr>
 8009dba:	b108      	cbz	r0, 8009dc0 <_printf_i+0x1e8>
 8009dbc:	1b80      	subs	r0, r0, r6
 8009dbe:	6060      	str	r0, [r4, #4]
 8009dc0:	6863      	ldr	r3, [r4, #4]
 8009dc2:	6123      	str	r3, [r4, #16]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dca:	e7aa      	b.n	8009d22 <_printf_i+0x14a>
 8009dcc:	4632      	mov	r2, r6
 8009dce:	4649      	mov	r1, r9
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	6923      	ldr	r3, [r4, #16]
 8009dd4:	47d0      	blx	sl
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	d0ad      	beq.n	8009d36 <_printf_i+0x15e>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	079b      	lsls	r3, r3, #30
 8009dde:	d413      	bmi.n	8009e08 <_printf_i+0x230>
 8009de0:	68e0      	ldr	r0, [r4, #12]
 8009de2:	9b03      	ldr	r3, [sp, #12]
 8009de4:	4298      	cmp	r0, r3
 8009de6:	bfb8      	it	lt
 8009de8:	4618      	movlt	r0, r3
 8009dea:	e7a6      	b.n	8009d3a <_printf_i+0x162>
 8009dec:	2301      	movs	r3, #1
 8009dee:	4632      	mov	r2, r6
 8009df0:	4649      	mov	r1, r9
 8009df2:	4640      	mov	r0, r8
 8009df4:	47d0      	blx	sl
 8009df6:	3001      	adds	r0, #1
 8009df8:	d09d      	beq.n	8009d36 <_printf_i+0x15e>
 8009dfa:	3501      	adds	r5, #1
 8009dfc:	68e3      	ldr	r3, [r4, #12]
 8009dfe:	9903      	ldr	r1, [sp, #12]
 8009e00:	1a5b      	subs	r3, r3, r1
 8009e02:	42ab      	cmp	r3, r5
 8009e04:	dcf2      	bgt.n	8009dec <_printf_i+0x214>
 8009e06:	e7eb      	b.n	8009de0 <_printf_i+0x208>
 8009e08:	2500      	movs	r5, #0
 8009e0a:	f104 0619 	add.w	r6, r4, #25
 8009e0e:	e7f5      	b.n	8009dfc <_printf_i+0x224>
 8009e10:	0800dcd4 	.word	0x0800dcd4
 8009e14:	0800dce5 	.word	0x0800dce5

08009e18 <_scanf_float>:
 8009e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	b087      	sub	sp, #28
 8009e1e:	9303      	str	r3, [sp, #12]
 8009e20:	688b      	ldr	r3, [r1, #8]
 8009e22:	4617      	mov	r7, r2
 8009e24:	1e5a      	subs	r2, r3, #1
 8009e26:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009e2a:	bf82      	ittt	hi
 8009e2c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009e30:	eb03 0b05 	addhi.w	fp, r3, r5
 8009e34:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009e38:	460a      	mov	r2, r1
 8009e3a:	f04f 0500 	mov.w	r5, #0
 8009e3e:	bf88      	it	hi
 8009e40:	608b      	strhi	r3, [r1, #8]
 8009e42:	680b      	ldr	r3, [r1, #0]
 8009e44:	4680      	mov	r8, r0
 8009e46:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009e4a:	f842 3b1c 	str.w	r3, [r2], #28
 8009e4e:	460c      	mov	r4, r1
 8009e50:	bf98      	it	ls
 8009e52:	f04f 0b00 	movls.w	fp, #0
 8009e56:	4616      	mov	r6, r2
 8009e58:	46aa      	mov	sl, r5
 8009e5a:	46a9      	mov	r9, r5
 8009e5c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009e60:	9201      	str	r2, [sp, #4]
 8009e62:	9502      	str	r5, [sp, #8]
 8009e64:	68a2      	ldr	r2, [r4, #8]
 8009e66:	b152      	cbz	r2, 8009e7e <_scanf_float+0x66>
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	2b4e      	cmp	r3, #78	@ 0x4e
 8009e6e:	d865      	bhi.n	8009f3c <_scanf_float+0x124>
 8009e70:	2b40      	cmp	r3, #64	@ 0x40
 8009e72:	d83d      	bhi.n	8009ef0 <_scanf_float+0xd8>
 8009e74:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009e78:	b2c8      	uxtb	r0, r1
 8009e7a:	280e      	cmp	r0, #14
 8009e7c:	d93b      	bls.n	8009ef6 <_scanf_float+0xde>
 8009e7e:	f1b9 0f00 	cmp.w	r9, #0
 8009e82:	d003      	beq.n	8009e8c <_scanf_float+0x74>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e8a:	6023      	str	r3, [r4, #0]
 8009e8c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009e90:	f1ba 0f01 	cmp.w	sl, #1
 8009e94:	f200 8118 	bhi.w	800a0c8 <_scanf_float+0x2b0>
 8009e98:	9b01      	ldr	r3, [sp, #4]
 8009e9a:	429e      	cmp	r6, r3
 8009e9c:	f200 8109 	bhi.w	800a0b2 <_scanf_float+0x29a>
 8009ea0:	2001      	movs	r0, #1
 8009ea2:	b007      	add	sp, #28
 8009ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009eac:	2a0d      	cmp	r2, #13
 8009eae:	d8e6      	bhi.n	8009e7e <_scanf_float+0x66>
 8009eb0:	a101      	add	r1, pc, #4	@ (adr r1, 8009eb8 <_scanf_float+0xa0>)
 8009eb2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009eb6:	bf00      	nop
 8009eb8:	08009fff 	.word	0x08009fff
 8009ebc:	08009e7f 	.word	0x08009e7f
 8009ec0:	08009e7f 	.word	0x08009e7f
 8009ec4:	08009e7f 	.word	0x08009e7f
 8009ec8:	0800a05f 	.word	0x0800a05f
 8009ecc:	0800a037 	.word	0x0800a037
 8009ed0:	08009e7f 	.word	0x08009e7f
 8009ed4:	08009e7f 	.word	0x08009e7f
 8009ed8:	0800a00d 	.word	0x0800a00d
 8009edc:	08009e7f 	.word	0x08009e7f
 8009ee0:	08009e7f 	.word	0x08009e7f
 8009ee4:	08009e7f 	.word	0x08009e7f
 8009ee8:	08009e7f 	.word	0x08009e7f
 8009eec:	08009fc5 	.word	0x08009fc5
 8009ef0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009ef4:	e7da      	b.n	8009eac <_scanf_float+0x94>
 8009ef6:	290e      	cmp	r1, #14
 8009ef8:	d8c1      	bhi.n	8009e7e <_scanf_float+0x66>
 8009efa:	a001      	add	r0, pc, #4	@ (adr r0, 8009f00 <_scanf_float+0xe8>)
 8009efc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009f00:	08009fb5 	.word	0x08009fb5
 8009f04:	08009e7f 	.word	0x08009e7f
 8009f08:	08009fb5 	.word	0x08009fb5
 8009f0c:	0800a04b 	.word	0x0800a04b
 8009f10:	08009e7f 	.word	0x08009e7f
 8009f14:	08009f5d 	.word	0x08009f5d
 8009f18:	08009f9b 	.word	0x08009f9b
 8009f1c:	08009f9b 	.word	0x08009f9b
 8009f20:	08009f9b 	.word	0x08009f9b
 8009f24:	08009f9b 	.word	0x08009f9b
 8009f28:	08009f9b 	.word	0x08009f9b
 8009f2c:	08009f9b 	.word	0x08009f9b
 8009f30:	08009f9b 	.word	0x08009f9b
 8009f34:	08009f9b 	.word	0x08009f9b
 8009f38:	08009f9b 	.word	0x08009f9b
 8009f3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009f3e:	d809      	bhi.n	8009f54 <_scanf_float+0x13c>
 8009f40:	2b60      	cmp	r3, #96	@ 0x60
 8009f42:	d8b1      	bhi.n	8009ea8 <_scanf_float+0x90>
 8009f44:	2b54      	cmp	r3, #84	@ 0x54
 8009f46:	d07b      	beq.n	800a040 <_scanf_float+0x228>
 8009f48:	2b59      	cmp	r3, #89	@ 0x59
 8009f4a:	d198      	bne.n	8009e7e <_scanf_float+0x66>
 8009f4c:	2d07      	cmp	r5, #7
 8009f4e:	d196      	bne.n	8009e7e <_scanf_float+0x66>
 8009f50:	2508      	movs	r5, #8
 8009f52:	e02c      	b.n	8009fae <_scanf_float+0x196>
 8009f54:	2b74      	cmp	r3, #116	@ 0x74
 8009f56:	d073      	beq.n	800a040 <_scanf_float+0x228>
 8009f58:	2b79      	cmp	r3, #121	@ 0x79
 8009f5a:	e7f6      	b.n	8009f4a <_scanf_float+0x132>
 8009f5c:	6821      	ldr	r1, [r4, #0]
 8009f5e:	05c8      	lsls	r0, r1, #23
 8009f60:	d51b      	bpl.n	8009f9a <_scanf_float+0x182>
 8009f62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009f66:	6021      	str	r1, [r4, #0]
 8009f68:	f109 0901 	add.w	r9, r9, #1
 8009f6c:	f1bb 0f00 	cmp.w	fp, #0
 8009f70:	d003      	beq.n	8009f7a <_scanf_float+0x162>
 8009f72:	3201      	adds	r2, #1
 8009f74:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009f78:	60a2      	str	r2, [r4, #8]
 8009f7a:	68a3      	ldr	r3, [r4, #8]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	60a3      	str	r3, [r4, #8]
 8009f80:	6923      	ldr	r3, [r4, #16]
 8009f82:	3301      	adds	r3, #1
 8009f84:	6123      	str	r3, [r4, #16]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	607b      	str	r3, [r7, #4]
 8009f8e:	f340 8087 	ble.w	800a0a0 <_scanf_float+0x288>
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	3301      	adds	r3, #1
 8009f96:	603b      	str	r3, [r7, #0]
 8009f98:	e764      	b.n	8009e64 <_scanf_float+0x4c>
 8009f9a:	eb1a 0105 	adds.w	r1, sl, r5
 8009f9e:	f47f af6e 	bne.w	8009e7e <_scanf_float+0x66>
 8009fa2:	460d      	mov	r5, r1
 8009fa4:	468a      	mov	sl, r1
 8009fa6:	6822      	ldr	r2, [r4, #0]
 8009fa8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009fac:	6022      	str	r2, [r4, #0]
 8009fae:	f806 3b01 	strb.w	r3, [r6], #1
 8009fb2:	e7e2      	b.n	8009f7a <_scanf_float+0x162>
 8009fb4:	6822      	ldr	r2, [r4, #0]
 8009fb6:	0610      	lsls	r0, r2, #24
 8009fb8:	f57f af61 	bpl.w	8009e7e <_scanf_float+0x66>
 8009fbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fc0:	6022      	str	r2, [r4, #0]
 8009fc2:	e7f4      	b.n	8009fae <_scanf_float+0x196>
 8009fc4:	f1ba 0f00 	cmp.w	sl, #0
 8009fc8:	d10e      	bne.n	8009fe8 <_scanf_float+0x1d0>
 8009fca:	f1b9 0f00 	cmp.w	r9, #0
 8009fce:	d10e      	bne.n	8009fee <_scanf_float+0x1d6>
 8009fd0:	6822      	ldr	r2, [r4, #0]
 8009fd2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009fd6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009fda:	d108      	bne.n	8009fee <_scanf_float+0x1d6>
 8009fdc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009fe0:	f04f 0a01 	mov.w	sl, #1
 8009fe4:	6022      	str	r2, [r4, #0]
 8009fe6:	e7e2      	b.n	8009fae <_scanf_float+0x196>
 8009fe8:	f1ba 0f02 	cmp.w	sl, #2
 8009fec:	d055      	beq.n	800a09a <_scanf_float+0x282>
 8009fee:	2d01      	cmp	r5, #1
 8009ff0:	d002      	beq.n	8009ff8 <_scanf_float+0x1e0>
 8009ff2:	2d04      	cmp	r5, #4
 8009ff4:	f47f af43 	bne.w	8009e7e <_scanf_float+0x66>
 8009ff8:	3501      	adds	r5, #1
 8009ffa:	b2ed      	uxtb	r5, r5
 8009ffc:	e7d7      	b.n	8009fae <_scanf_float+0x196>
 8009ffe:	f1ba 0f01 	cmp.w	sl, #1
 800a002:	f47f af3c 	bne.w	8009e7e <_scanf_float+0x66>
 800a006:	f04f 0a02 	mov.w	sl, #2
 800a00a:	e7d0      	b.n	8009fae <_scanf_float+0x196>
 800a00c:	b97d      	cbnz	r5, 800a02e <_scanf_float+0x216>
 800a00e:	f1b9 0f00 	cmp.w	r9, #0
 800a012:	f47f af37 	bne.w	8009e84 <_scanf_float+0x6c>
 800a016:	6822      	ldr	r2, [r4, #0]
 800a018:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a01c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a020:	f040 8103 	bne.w	800a22a <_scanf_float+0x412>
 800a024:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a028:	2501      	movs	r5, #1
 800a02a:	6022      	str	r2, [r4, #0]
 800a02c:	e7bf      	b.n	8009fae <_scanf_float+0x196>
 800a02e:	2d03      	cmp	r5, #3
 800a030:	d0e2      	beq.n	8009ff8 <_scanf_float+0x1e0>
 800a032:	2d05      	cmp	r5, #5
 800a034:	e7de      	b.n	8009ff4 <_scanf_float+0x1dc>
 800a036:	2d02      	cmp	r5, #2
 800a038:	f47f af21 	bne.w	8009e7e <_scanf_float+0x66>
 800a03c:	2503      	movs	r5, #3
 800a03e:	e7b6      	b.n	8009fae <_scanf_float+0x196>
 800a040:	2d06      	cmp	r5, #6
 800a042:	f47f af1c 	bne.w	8009e7e <_scanf_float+0x66>
 800a046:	2507      	movs	r5, #7
 800a048:	e7b1      	b.n	8009fae <_scanf_float+0x196>
 800a04a:	6822      	ldr	r2, [r4, #0]
 800a04c:	0591      	lsls	r1, r2, #22
 800a04e:	f57f af16 	bpl.w	8009e7e <_scanf_float+0x66>
 800a052:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a056:	6022      	str	r2, [r4, #0]
 800a058:	f8cd 9008 	str.w	r9, [sp, #8]
 800a05c:	e7a7      	b.n	8009fae <_scanf_float+0x196>
 800a05e:	6822      	ldr	r2, [r4, #0]
 800a060:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a064:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a068:	d006      	beq.n	800a078 <_scanf_float+0x260>
 800a06a:	0550      	lsls	r0, r2, #21
 800a06c:	f57f af07 	bpl.w	8009e7e <_scanf_float+0x66>
 800a070:	f1b9 0f00 	cmp.w	r9, #0
 800a074:	f000 80d9 	beq.w	800a22a <_scanf_float+0x412>
 800a078:	0591      	lsls	r1, r2, #22
 800a07a:	bf58      	it	pl
 800a07c:	9902      	ldrpl	r1, [sp, #8]
 800a07e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a082:	bf58      	it	pl
 800a084:	eba9 0101 	subpl.w	r1, r9, r1
 800a088:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a08c:	f04f 0900 	mov.w	r9, #0
 800a090:	bf58      	it	pl
 800a092:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a096:	6022      	str	r2, [r4, #0]
 800a098:	e789      	b.n	8009fae <_scanf_float+0x196>
 800a09a:	f04f 0a03 	mov.w	sl, #3
 800a09e:	e786      	b.n	8009fae <_scanf_float+0x196>
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a0a8:	4798      	blx	r3
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	f43f aeda 	beq.w	8009e64 <_scanf_float+0x4c>
 800a0b0:	e6e5      	b.n	8009e7e <_scanf_float+0x66>
 800a0b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0b6:	463a      	mov	r2, r7
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0be:	4798      	blx	r3
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	6123      	str	r3, [r4, #16]
 800a0c6:	e6e7      	b.n	8009e98 <_scanf_float+0x80>
 800a0c8:	1e6b      	subs	r3, r5, #1
 800a0ca:	2b06      	cmp	r3, #6
 800a0cc:	d824      	bhi.n	800a118 <_scanf_float+0x300>
 800a0ce:	2d02      	cmp	r5, #2
 800a0d0:	d836      	bhi.n	800a140 <_scanf_float+0x328>
 800a0d2:	9b01      	ldr	r3, [sp, #4]
 800a0d4:	429e      	cmp	r6, r3
 800a0d6:	f67f aee3 	bls.w	8009ea0 <_scanf_float+0x88>
 800a0da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0de:	463a      	mov	r2, r7
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a0e6:	4798      	blx	r3
 800a0e8:	6923      	ldr	r3, [r4, #16]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	6123      	str	r3, [r4, #16]
 800a0ee:	e7f0      	b.n	800a0d2 <_scanf_float+0x2ba>
 800a0f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0f4:	463a      	mov	r2, r7
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a0fc:	4798      	blx	r3
 800a0fe:	6923      	ldr	r3, [r4, #16]
 800a100:	3b01      	subs	r3, #1
 800a102:	6123      	str	r3, [r4, #16]
 800a104:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a108:	fa5f fa8a 	uxtb.w	sl, sl
 800a10c:	f1ba 0f02 	cmp.w	sl, #2
 800a110:	d1ee      	bne.n	800a0f0 <_scanf_float+0x2d8>
 800a112:	3d03      	subs	r5, #3
 800a114:	b2ed      	uxtb	r5, r5
 800a116:	1b76      	subs	r6, r6, r5
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	05da      	lsls	r2, r3, #23
 800a11c:	d530      	bpl.n	800a180 <_scanf_float+0x368>
 800a11e:	055b      	lsls	r3, r3, #21
 800a120:	d511      	bpl.n	800a146 <_scanf_float+0x32e>
 800a122:	9b01      	ldr	r3, [sp, #4]
 800a124:	429e      	cmp	r6, r3
 800a126:	f67f aebb 	bls.w	8009ea0 <_scanf_float+0x88>
 800a12a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a12e:	463a      	mov	r2, r7
 800a130:	4640      	mov	r0, r8
 800a132:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a136:	4798      	blx	r3
 800a138:	6923      	ldr	r3, [r4, #16]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	6123      	str	r3, [r4, #16]
 800a13e:	e7f0      	b.n	800a122 <_scanf_float+0x30a>
 800a140:	46aa      	mov	sl, r5
 800a142:	46b3      	mov	fp, r6
 800a144:	e7de      	b.n	800a104 <_scanf_float+0x2ec>
 800a146:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a14a:	6923      	ldr	r3, [r4, #16]
 800a14c:	2965      	cmp	r1, #101	@ 0x65
 800a14e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a152:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800a156:	6123      	str	r3, [r4, #16]
 800a158:	d00c      	beq.n	800a174 <_scanf_float+0x35c>
 800a15a:	2945      	cmp	r1, #69	@ 0x45
 800a15c:	d00a      	beq.n	800a174 <_scanf_float+0x35c>
 800a15e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a162:	463a      	mov	r2, r7
 800a164:	4640      	mov	r0, r8
 800a166:	4798      	blx	r3
 800a168:	6923      	ldr	r3, [r4, #16]
 800a16a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a16e:	3b01      	subs	r3, #1
 800a170:	1eb5      	subs	r5, r6, #2
 800a172:	6123      	str	r3, [r4, #16]
 800a174:	463a      	mov	r2, r7
 800a176:	4640      	mov	r0, r8
 800a178:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a17c:	4798      	blx	r3
 800a17e:	462e      	mov	r6, r5
 800a180:	6822      	ldr	r2, [r4, #0]
 800a182:	f012 0210 	ands.w	r2, r2, #16
 800a186:	d001      	beq.n	800a18c <_scanf_float+0x374>
 800a188:	2000      	movs	r0, #0
 800a18a:	e68a      	b.n	8009ea2 <_scanf_float+0x8a>
 800a18c:	7032      	strb	r2, [r6, #0]
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a198:	d11c      	bne.n	800a1d4 <_scanf_float+0x3bc>
 800a19a:	9b02      	ldr	r3, [sp, #8]
 800a19c:	454b      	cmp	r3, r9
 800a19e:	eba3 0209 	sub.w	r2, r3, r9
 800a1a2:	d123      	bne.n	800a1ec <_scanf_float+0x3d4>
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	9901      	ldr	r1, [sp, #4]
 800a1aa:	f000 ff05 	bl	800afb8 <_strtod_r>
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	6825      	ldr	r5, [r4, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f015 0f02 	tst.w	r5, #2
 800a1b8:	4606      	mov	r6, r0
 800a1ba:	460f      	mov	r7, r1
 800a1bc:	f103 0204 	add.w	r2, r3, #4
 800a1c0:	d01f      	beq.n	800a202 <_scanf_float+0x3ea>
 800a1c2:	9903      	ldr	r1, [sp, #12]
 800a1c4:	600a      	str	r2, [r1, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	e9c3 6700 	strd	r6, r7, [r3]
 800a1cc:	68e3      	ldr	r3, [r4, #12]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	60e3      	str	r3, [r4, #12]
 800a1d2:	e7d9      	b.n	800a188 <_scanf_float+0x370>
 800a1d4:	9b04      	ldr	r3, [sp, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0e4      	beq.n	800a1a4 <_scanf_float+0x38c>
 800a1da:	9905      	ldr	r1, [sp, #20]
 800a1dc:	230a      	movs	r3, #10
 800a1de:	4640      	mov	r0, r8
 800a1e0:	3101      	adds	r1, #1
 800a1e2:	f000 ff69 	bl	800b0b8 <_strtol_r>
 800a1e6:	9b04      	ldr	r3, [sp, #16]
 800a1e8:	9e05      	ldr	r6, [sp, #20]
 800a1ea:	1ac2      	subs	r2, r0, r3
 800a1ec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a1f0:	429e      	cmp	r6, r3
 800a1f2:	bf28      	it	cs
 800a1f4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	490d      	ldr	r1, [pc, #52]	@ (800a230 <_scanf_float+0x418>)
 800a1fc:	f000 f81c 	bl	800a238 <siprintf>
 800a200:	e7d0      	b.n	800a1a4 <_scanf_float+0x38c>
 800a202:	076d      	lsls	r5, r5, #29
 800a204:	d4dd      	bmi.n	800a1c2 <_scanf_float+0x3aa>
 800a206:	9d03      	ldr	r5, [sp, #12]
 800a208:	602a      	str	r2, [r5, #0]
 800a20a:	681d      	ldr	r5, [r3, #0]
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	f7f6 fbfc 	bl	8000a0c <__aeabi_dcmpun>
 800a214:	b120      	cbz	r0, 800a220 <_scanf_float+0x408>
 800a216:	4807      	ldr	r0, [pc, #28]	@ (800a234 <_scanf_float+0x41c>)
 800a218:	f000 ffdc 	bl	800b1d4 <nanf>
 800a21c:	6028      	str	r0, [r5, #0]
 800a21e:	e7d5      	b.n	800a1cc <_scanf_float+0x3b4>
 800a220:	4630      	mov	r0, r6
 800a222:	4639      	mov	r1, r7
 800a224:	f7f6 fc50 	bl	8000ac8 <__aeabi_d2f>
 800a228:	e7f8      	b.n	800a21c <_scanf_float+0x404>
 800a22a:	f04f 0900 	mov.w	r9, #0
 800a22e:	e62d      	b.n	8009e8c <_scanf_float+0x74>
 800a230:	0800dcf6 	.word	0x0800dcf6
 800a234:	0800e0eb 	.word	0x0800e0eb

0800a238 <siprintf>:
 800a238:	b40e      	push	{r1, r2, r3}
 800a23a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a23e:	b500      	push	{lr}
 800a240:	b09c      	sub	sp, #112	@ 0x70
 800a242:	ab1d      	add	r3, sp, #116	@ 0x74
 800a244:	9002      	str	r0, [sp, #8]
 800a246:	9006      	str	r0, [sp, #24]
 800a248:	9107      	str	r1, [sp, #28]
 800a24a:	9104      	str	r1, [sp, #16]
 800a24c:	4808      	ldr	r0, [pc, #32]	@ (800a270 <siprintf+0x38>)
 800a24e:	4909      	ldr	r1, [pc, #36]	@ (800a274 <siprintf+0x3c>)
 800a250:	f853 2b04 	ldr.w	r2, [r3], #4
 800a254:	9105      	str	r1, [sp, #20]
 800a256:	6800      	ldr	r0, [r0, #0]
 800a258:	a902      	add	r1, sp, #8
 800a25a:	9301      	str	r3, [sp, #4]
 800a25c:	f002 f9a4 	bl	800c5a8 <_svfiprintf_r>
 800a260:	2200      	movs	r2, #0
 800a262:	9b02      	ldr	r3, [sp, #8]
 800a264:	701a      	strb	r2, [r3, #0]
 800a266:	b01c      	add	sp, #112	@ 0x70
 800a268:	f85d eb04 	ldr.w	lr, [sp], #4
 800a26c:	b003      	add	sp, #12
 800a26e:	4770      	bx	lr
 800a270:	20000300 	.word	0x20000300
 800a274:	ffff0208 	.word	0xffff0208

0800a278 <std>:
 800a278:	2300      	movs	r3, #0
 800a27a:	b510      	push	{r4, lr}
 800a27c:	4604      	mov	r4, r0
 800a27e:	e9c0 3300 	strd	r3, r3, [r0]
 800a282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a286:	6083      	str	r3, [r0, #8]
 800a288:	8181      	strh	r1, [r0, #12]
 800a28a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a28c:	81c2      	strh	r2, [r0, #14]
 800a28e:	6183      	str	r3, [r0, #24]
 800a290:	4619      	mov	r1, r3
 800a292:	2208      	movs	r2, #8
 800a294:	305c      	adds	r0, #92	@ 0x5c
 800a296:	f000 ff41 	bl	800b11c <memset>
 800a29a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2d0 <std+0x58>)
 800a29c:	6224      	str	r4, [r4, #32]
 800a29e:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d4 <std+0x5c>)
 800a2a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d8 <std+0x60>)
 800a2a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a2dc <std+0x64>)
 800a2aa:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a2e0 <std+0x68>)
 800a2ae:	429c      	cmp	r4, r3
 800a2b0:	d006      	beq.n	800a2c0 <std+0x48>
 800a2b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2b6:	4294      	cmp	r4, r2
 800a2b8:	d002      	beq.n	800a2c0 <std+0x48>
 800a2ba:	33d0      	adds	r3, #208	@ 0xd0
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	d105      	bne.n	800a2cc <std+0x54>
 800a2c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c8:	f000 bf5e 	b.w	800b188 <__retarget_lock_init_recursive>
 800a2cc:	bd10      	pop	{r4, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800d3cd 	.word	0x0800d3cd
 800a2d4:	0800d3ef 	.word	0x0800d3ef
 800a2d8:	0800d427 	.word	0x0800d427
 800a2dc:	0800d44b 	.word	0x0800d44b
 800a2e0:	20001660 	.word	0x20001660

0800a2e4 <stdio_exit_handler>:
 800a2e4:	4a02      	ldr	r2, [pc, #8]	@ (800a2f0 <stdio_exit_handler+0xc>)
 800a2e6:	4903      	ldr	r1, [pc, #12]	@ (800a2f4 <stdio_exit_handler+0x10>)
 800a2e8:	4803      	ldr	r0, [pc, #12]	@ (800a2f8 <stdio_exit_handler+0x14>)
 800a2ea:	f000 bee7 	b.w	800b0bc <_fwalk_sglue>
 800a2ee:	bf00      	nop
 800a2f0:	20000188 	.word	0x20000188
 800a2f4:	0800ca19 	.word	0x0800ca19
 800a2f8:	20000304 	.word	0x20000304

0800a2fc <cleanup_stdio>:
 800a2fc:	6841      	ldr	r1, [r0, #4]
 800a2fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a330 <cleanup_stdio+0x34>)
 800a300:	b510      	push	{r4, lr}
 800a302:	4299      	cmp	r1, r3
 800a304:	4604      	mov	r4, r0
 800a306:	d001      	beq.n	800a30c <cleanup_stdio+0x10>
 800a308:	f002 fb86 	bl	800ca18 <_fflush_r>
 800a30c:	68a1      	ldr	r1, [r4, #8]
 800a30e:	4b09      	ldr	r3, [pc, #36]	@ (800a334 <cleanup_stdio+0x38>)
 800a310:	4299      	cmp	r1, r3
 800a312:	d002      	beq.n	800a31a <cleanup_stdio+0x1e>
 800a314:	4620      	mov	r0, r4
 800a316:	f002 fb7f 	bl	800ca18 <_fflush_r>
 800a31a:	68e1      	ldr	r1, [r4, #12]
 800a31c:	4b06      	ldr	r3, [pc, #24]	@ (800a338 <cleanup_stdio+0x3c>)
 800a31e:	4299      	cmp	r1, r3
 800a320:	d004      	beq.n	800a32c <cleanup_stdio+0x30>
 800a322:	4620      	mov	r0, r4
 800a324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a328:	f002 bb76 	b.w	800ca18 <_fflush_r>
 800a32c:	bd10      	pop	{r4, pc}
 800a32e:	bf00      	nop
 800a330:	20001660 	.word	0x20001660
 800a334:	200016c8 	.word	0x200016c8
 800a338:	20001730 	.word	0x20001730

0800a33c <global_stdio_init.part.0>:
 800a33c:	b510      	push	{r4, lr}
 800a33e:	4b0b      	ldr	r3, [pc, #44]	@ (800a36c <global_stdio_init.part.0+0x30>)
 800a340:	4c0b      	ldr	r4, [pc, #44]	@ (800a370 <global_stdio_init.part.0+0x34>)
 800a342:	4a0c      	ldr	r2, [pc, #48]	@ (800a374 <global_stdio_init.part.0+0x38>)
 800a344:	4620      	mov	r0, r4
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	2104      	movs	r1, #4
 800a34a:	2200      	movs	r2, #0
 800a34c:	f7ff ff94 	bl	800a278 <std>
 800a350:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a354:	2201      	movs	r2, #1
 800a356:	2109      	movs	r1, #9
 800a358:	f7ff ff8e 	bl	800a278 <std>
 800a35c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a360:	2202      	movs	r2, #2
 800a362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a366:	2112      	movs	r1, #18
 800a368:	f7ff bf86 	b.w	800a278 <std>
 800a36c:	20001798 	.word	0x20001798
 800a370:	20001660 	.word	0x20001660
 800a374:	0800a2e5 	.word	0x0800a2e5

0800a378 <__sfp_lock_acquire>:
 800a378:	4801      	ldr	r0, [pc, #4]	@ (800a380 <__sfp_lock_acquire+0x8>)
 800a37a:	f000 bf06 	b.w	800b18a <__retarget_lock_acquire_recursive>
 800a37e:	bf00      	nop
 800a380:	2000179d 	.word	0x2000179d

0800a384 <__sfp_lock_release>:
 800a384:	4801      	ldr	r0, [pc, #4]	@ (800a38c <__sfp_lock_release+0x8>)
 800a386:	f000 bf01 	b.w	800b18c <__retarget_lock_release_recursive>
 800a38a:	bf00      	nop
 800a38c:	2000179d 	.word	0x2000179d

0800a390 <__sinit>:
 800a390:	b510      	push	{r4, lr}
 800a392:	4604      	mov	r4, r0
 800a394:	f7ff fff0 	bl	800a378 <__sfp_lock_acquire>
 800a398:	6a23      	ldr	r3, [r4, #32]
 800a39a:	b11b      	cbz	r3, 800a3a4 <__sinit+0x14>
 800a39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a0:	f7ff bff0 	b.w	800a384 <__sfp_lock_release>
 800a3a4:	4b04      	ldr	r3, [pc, #16]	@ (800a3b8 <__sinit+0x28>)
 800a3a6:	6223      	str	r3, [r4, #32]
 800a3a8:	4b04      	ldr	r3, [pc, #16]	@ (800a3bc <__sinit+0x2c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1f5      	bne.n	800a39c <__sinit+0xc>
 800a3b0:	f7ff ffc4 	bl	800a33c <global_stdio_init.part.0>
 800a3b4:	e7f2      	b.n	800a39c <__sinit+0xc>
 800a3b6:	bf00      	nop
 800a3b8:	0800a2fd 	.word	0x0800a2fd
 800a3bc:	20001798 	.word	0x20001798

0800a3c0 <sulp>:
 800a3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c4:	460f      	mov	r7, r1
 800a3c6:	4690      	mov	r8, r2
 800a3c8:	f002 fecc 	bl	800d164 <__ulp>
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	460d      	mov	r5, r1
 800a3d0:	f1b8 0f00 	cmp.w	r8, #0
 800a3d4:	d011      	beq.n	800a3fa <sulp+0x3a>
 800a3d6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a3da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	dd0b      	ble.n	800a3fa <sulp+0x3a>
 800a3e2:	2400      	movs	r4, #0
 800a3e4:	051b      	lsls	r3, r3, #20
 800a3e6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a3ea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a3ee:	4622      	mov	r2, r4
 800a3f0:	462b      	mov	r3, r5
 800a3f2:	f7f6 f871 	bl	80004d8 <__aeabi_dmul>
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	460d      	mov	r5, r1
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a402:	0000      	movs	r0, r0
 800a404:	0000      	movs	r0, r0
	...

0800a408 <_strtod_l>:
 800a408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40c:	b09f      	sub	sp, #124	@ 0x7c
 800a40e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a410:	2200      	movs	r2, #0
 800a412:	460c      	mov	r4, r1
 800a414:	921a      	str	r2, [sp, #104]	@ 0x68
 800a416:	f04f 0a00 	mov.w	sl, #0
 800a41a:	f04f 0b00 	mov.w	fp, #0
 800a41e:	460a      	mov	r2, r1
 800a420:	9005      	str	r0, [sp, #20]
 800a422:	9219      	str	r2, [sp, #100]	@ 0x64
 800a424:	7811      	ldrb	r1, [r2, #0]
 800a426:	292b      	cmp	r1, #43	@ 0x2b
 800a428:	d048      	beq.n	800a4bc <_strtod_l+0xb4>
 800a42a:	d836      	bhi.n	800a49a <_strtod_l+0x92>
 800a42c:	290d      	cmp	r1, #13
 800a42e:	d830      	bhi.n	800a492 <_strtod_l+0x8a>
 800a430:	2908      	cmp	r1, #8
 800a432:	d830      	bhi.n	800a496 <_strtod_l+0x8e>
 800a434:	2900      	cmp	r1, #0
 800a436:	d039      	beq.n	800a4ac <_strtod_l+0xa4>
 800a438:	2200      	movs	r2, #0
 800a43a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a43c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a43e:	782a      	ldrb	r2, [r5, #0]
 800a440:	2a30      	cmp	r2, #48	@ 0x30
 800a442:	f040 80b1 	bne.w	800a5a8 <_strtod_l+0x1a0>
 800a446:	786a      	ldrb	r2, [r5, #1]
 800a448:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a44c:	2a58      	cmp	r2, #88	@ 0x58
 800a44e:	d16c      	bne.n	800a52a <_strtod_l+0x122>
 800a450:	9302      	str	r3, [sp, #8]
 800a452:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a454:	4a8e      	ldr	r2, [pc, #568]	@ (800a690 <_strtod_l+0x288>)
 800a456:	9301      	str	r3, [sp, #4]
 800a458:	ab1a      	add	r3, sp, #104	@ 0x68
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	9805      	ldr	r0, [sp, #20]
 800a45e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a460:	a919      	add	r1, sp, #100	@ 0x64
 800a462:	f001 fd75 	bl	800bf50 <__gethex>
 800a466:	f010 060f 	ands.w	r6, r0, #15
 800a46a:	4604      	mov	r4, r0
 800a46c:	d005      	beq.n	800a47a <_strtod_l+0x72>
 800a46e:	2e06      	cmp	r6, #6
 800a470:	d126      	bne.n	800a4c0 <_strtod_l+0xb8>
 800a472:	2300      	movs	r3, #0
 800a474:	3501      	adds	r5, #1
 800a476:	9519      	str	r5, [sp, #100]	@ 0x64
 800a478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a47a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f040 8584 	bne.w	800af8a <_strtod_l+0xb82>
 800a482:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a484:	b1bb      	cbz	r3, 800a4b6 <_strtod_l+0xae>
 800a486:	4650      	mov	r0, sl
 800a488:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a48c:	b01f      	add	sp, #124	@ 0x7c
 800a48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a492:	2920      	cmp	r1, #32
 800a494:	d1d0      	bne.n	800a438 <_strtod_l+0x30>
 800a496:	3201      	adds	r2, #1
 800a498:	e7c3      	b.n	800a422 <_strtod_l+0x1a>
 800a49a:	292d      	cmp	r1, #45	@ 0x2d
 800a49c:	d1cc      	bne.n	800a438 <_strtod_l+0x30>
 800a49e:	2101      	movs	r1, #1
 800a4a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a4a2:	1c51      	adds	r1, r2, #1
 800a4a4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a4a6:	7852      	ldrb	r2, [r2, #1]
 800a4a8:	2a00      	cmp	r2, #0
 800a4aa:	d1c7      	bne.n	800a43c <_strtod_l+0x34>
 800a4ac:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a4ae:	9419      	str	r4, [sp, #100]	@ 0x64
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f040 8568 	bne.w	800af86 <_strtod_l+0xb7e>
 800a4b6:	4650      	mov	r0, sl
 800a4b8:	4659      	mov	r1, fp
 800a4ba:	e7e7      	b.n	800a48c <_strtod_l+0x84>
 800a4bc:	2100      	movs	r1, #0
 800a4be:	e7ef      	b.n	800a4a0 <_strtod_l+0x98>
 800a4c0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a4c2:	b13a      	cbz	r2, 800a4d4 <_strtod_l+0xcc>
 800a4c4:	2135      	movs	r1, #53	@ 0x35
 800a4c6:	a81c      	add	r0, sp, #112	@ 0x70
 800a4c8:	f002 ff3c 	bl	800d344 <__copybits>
 800a4cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4ce:	9805      	ldr	r0, [sp, #20]
 800a4d0:	f002 fb16 	bl	800cb00 <_Bfree>
 800a4d4:	3e01      	subs	r6, #1
 800a4d6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a4d8:	2e04      	cmp	r6, #4
 800a4da:	d806      	bhi.n	800a4ea <_strtod_l+0xe2>
 800a4dc:	e8df f006 	tbb	[pc, r6]
 800a4e0:	201d0314 	.word	0x201d0314
 800a4e4:	14          	.byte	0x14
 800a4e5:	00          	.byte	0x00
 800a4e6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a4ea:	05e1      	lsls	r1, r4, #23
 800a4ec:	bf48      	it	mi
 800a4ee:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a4f2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a4f6:	0d1b      	lsrs	r3, r3, #20
 800a4f8:	051b      	lsls	r3, r3, #20
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1bd      	bne.n	800a47a <_strtod_l+0x72>
 800a4fe:	f000 fe19 	bl	800b134 <__errno>
 800a502:	2322      	movs	r3, #34	@ 0x22
 800a504:	6003      	str	r3, [r0, #0]
 800a506:	e7b8      	b.n	800a47a <_strtod_l+0x72>
 800a508:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a50c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a510:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a514:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a518:	e7e7      	b.n	800a4ea <_strtod_l+0xe2>
 800a51a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800a694 <_strtod_l+0x28c>
 800a51e:	e7e4      	b.n	800a4ea <_strtod_l+0xe2>
 800a520:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a524:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a528:	e7df      	b.n	800a4ea <_strtod_l+0xe2>
 800a52a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a52c:	1c5a      	adds	r2, r3, #1
 800a52e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a530:	785b      	ldrb	r3, [r3, #1]
 800a532:	2b30      	cmp	r3, #48	@ 0x30
 800a534:	d0f9      	beq.n	800a52a <_strtod_l+0x122>
 800a536:	2b00      	cmp	r3, #0
 800a538:	d09f      	beq.n	800a47a <_strtod_l+0x72>
 800a53a:	2301      	movs	r3, #1
 800a53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a53e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a540:	220a      	movs	r2, #10
 800a542:	930c      	str	r3, [sp, #48]	@ 0x30
 800a544:	2300      	movs	r3, #0
 800a546:	461f      	mov	r7, r3
 800a548:	9308      	str	r3, [sp, #32]
 800a54a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a54c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a54e:	7805      	ldrb	r5, [r0, #0]
 800a550:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a554:	b2d9      	uxtb	r1, r3
 800a556:	2909      	cmp	r1, #9
 800a558:	d928      	bls.n	800a5ac <_strtod_l+0x1a4>
 800a55a:	2201      	movs	r2, #1
 800a55c:	494e      	ldr	r1, [pc, #312]	@ (800a698 <_strtod_l+0x290>)
 800a55e:	f000 fdcb 	bl	800b0f8 <strncmp>
 800a562:	2800      	cmp	r0, #0
 800a564:	d032      	beq.n	800a5cc <_strtod_l+0x1c4>
 800a566:	2000      	movs	r0, #0
 800a568:	462a      	mov	r2, r5
 800a56a:	4681      	mov	r9, r0
 800a56c:	463d      	mov	r5, r7
 800a56e:	4603      	mov	r3, r0
 800a570:	2a65      	cmp	r2, #101	@ 0x65
 800a572:	d001      	beq.n	800a578 <_strtod_l+0x170>
 800a574:	2a45      	cmp	r2, #69	@ 0x45
 800a576:	d114      	bne.n	800a5a2 <_strtod_l+0x19a>
 800a578:	b91d      	cbnz	r5, 800a582 <_strtod_l+0x17a>
 800a57a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a57c:	4302      	orrs	r2, r0
 800a57e:	d095      	beq.n	800a4ac <_strtod_l+0xa4>
 800a580:	2500      	movs	r5, #0
 800a582:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a584:	1c62      	adds	r2, r4, #1
 800a586:	9219      	str	r2, [sp, #100]	@ 0x64
 800a588:	7862      	ldrb	r2, [r4, #1]
 800a58a:	2a2b      	cmp	r2, #43	@ 0x2b
 800a58c:	d077      	beq.n	800a67e <_strtod_l+0x276>
 800a58e:	2a2d      	cmp	r2, #45	@ 0x2d
 800a590:	d07b      	beq.n	800a68a <_strtod_l+0x282>
 800a592:	f04f 0c00 	mov.w	ip, #0
 800a596:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a59a:	2909      	cmp	r1, #9
 800a59c:	f240 8082 	bls.w	800a6a4 <_strtod_l+0x29c>
 800a5a0:	9419      	str	r4, [sp, #100]	@ 0x64
 800a5a2:	f04f 0800 	mov.w	r8, #0
 800a5a6:	e0a2      	b.n	800a6ee <_strtod_l+0x2e6>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	e7c7      	b.n	800a53c <_strtod_l+0x134>
 800a5ac:	2f08      	cmp	r7, #8
 800a5ae:	bfd5      	itete	le
 800a5b0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a5b2:	9908      	ldrgt	r1, [sp, #32]
 800a5b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5b8:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a5bc:	f100 0001 	add.w	r0, r0, #1
 800a5c0:	bfd4      	ite	le
 800a5c2:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a5c4:	9308      	strgt	r3, [sp, #32]
 800a5c6:	3701      	adds	r7, #1
 800a5c8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a5ca:	e7bf      	b.n	800a54c <_strtod_l+0x144>
 800a5cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5d2:	785a      	ldrb	r2, [r3, #1]
 800a5d4:	b37f      	cbz	r7, 800a636 <_strtod_l+0x22e>
 800a5d6:	4681      	mov	r9, r0
 800a5d8:	463d      	mov	r5, r7
 800a5da:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a5de:	2b09      	cmp	r3, #9
 800a5e0:	d912      	bls.n	800a608 <_strtod_l+0x200>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e7c4      	b.n	800a570 <_strtod_l+0x168>
 800a5e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5ee:	785a      	ldrb	r2, [r3, #1]
 800a5f0:	2a30      	cmp	r2, #48	@ 0x30
 800a5f2:	d0f8      	beq.n	800a5e6 <_strtod_l+0x1de>
 800a5f4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a5f8:	2b08      	cmp	r3, #8
 800a5fa:	f200 84cb 	bhi.w	800af94 <_strtod_l+0xb8c>
 800a5fe:	4681      	mov	r9, r0
 800a600:	2000      	movs	r0, #0
 800a602:	4605      	mov	r5, r0
 800a604:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a606:	930c      	str	r3, [sp, #48]	@ 0x30
 800a608:	3a30      	subs	r2, #48	@ 0x30
 800a60a:	f100 0301 	add.w	r3, r0, #1
 800a60e:	d02a      	beq.n	800a666 <_strtod_l+0x25e>
 800a610:	4499      	add	r9, r3
 800a612:	210a      	movs	r1, #10
 800a614:	462b      	mov	r3, r5
 800a616:	eb00 0c05 	add.w	ip, r0, r5
 800a61a:	4563      	cmp	r3, ip
 800a61c:	d10d      	bne.n	800a63a <_strtod_l+0x232>
 800a61e:	1c69      	adds	r1, r5, #1
 800a620:	4401      	add	r1, r0
 800a622:	4428      	add	r0, r5
 800a624:	2808      	cmp	r0, #8
 800a626:	dc16      	bgt.n	800a656 <_strtod_l+0x24e>
 800a628:	230a      	movs	r3, #10
 800a62a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a62c:	fb03 2300 	mla	r3, r3, r0, r2
 800a630:	930a      	str	r3, [sp, #40]	@ 0x28
 800a632:	2300      	movs	r3, #0
 800a634:	e018      	b.n	800a668 <_strtod_l+0x260>
 800a636:	4638      	mov	r0, r7
 800a638:	e7da      	b.n	800a5f0 <_strtod_l+0x1e8>
 800a63a:	2b08      	cmp	r3, #8
 800a63c:	f103 0301 	add.w	r3, r3, #1
 800a640:	dc03      	bgt.n	800a64a <_strtod_l+0x242>
 800a642:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a644:	434e      	muls	r6, r1
 800a646:	960a      	str	r6, [sp, #40]	@ 0x28
 800a648:	e7e7      	b.n	800a61a <_strtod_l+0x212>
 800a64a:	2b10      	cmp	r3, #16
 800a64c:	bfde      	ittt	le
 800a64e:	9e08      	ldrle	r6, [sp, #32]
 800a650:	434e      	mulle	r6, r1
 800a652:	9608      	strle	r6, [sp, #32]
 800a654:	e7e1      	b.n	800a61a <_strtod_l+0x212>
 800a656:	280f      	cmp	r0, #15
 800a658:	dceb      	bgt.n	800a632 <_strtod_l+0x22a>
 800a65a:	230a      	movs	r3, #10
 800a65c:	9808      	ldr	r0, [sp, #32]
 800a65e:	fb03 2300 	mla	r3, r3, r0, r2
 800a662:	9308      	str	r3, [sp, #32]
 800a664:	e7e5      	b.n	800a632 <_strtod_l+0x22a>
 800a666:	4629      	mov	r1, r5
 800a668:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a66a:	460d      	mov	r5, r1
 800a66c:	1c50      	adds	r0, r2, #1
 800a66e:	9019      	str	r0, [sp, #100]	@ 0x64
 800a670:	7852      	ldrb	r2, [r2, #1]
 800a672:	4618      	mov	r0, r3
 800a674:	e7b1      	b.n	800a5da <_strtod_l+0x1d2>
 800a676:	f04f 0900 	mov.w	r9, #0
 800a67a:	2301      	movs	r3, #1
 800a67c:	e77d      	b.n	800a57a <_strtod_l+0x172>
 800a67e:	f04f 0c00 	mov.w	ip, #0
 800a682:	1ca2      	adds	r2, r4, #2
 800a684:	9219      	str	r2, [sp, #100]	@ 0x64
 800a686:	78a2      	ldrb	r2, [r4, #2]
 800a688:	e785      	b.n	800a596 <_strtod_l+0x18e>
 800a68a:	f04f 0c01 	mov.w	ip, #1
 800a68e:	e7f8      	b.n	800a682 <_strtod_l+0x27a>
 800a690:	0800dd14 	.word	0x0800dd14
 800a694:	7ff00000 	.word	0x7ff00000
 800a698:	0800dcfb 	.word	0x0800dcfb
 800a69c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a69e:	1c51      	adds	r1, r2, #1
 800a6a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a6a2:	7852      	ldrb	r2, [r2, #1]
 800a6a4:	2a30      	cmp	r2, #48	@ 0x30
 800a6a6:	d0f9      	beq.n	800a69c <_strtod_l+0x294>
 800a6a8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a6ac:	2908      	cmp	r1, #8
 800a6ae:	f63f af78 	bhi.w	800a5a2 <_strtod_l+0x19a>
 800a6b2:	f04f 080a 	mov.w	r8, #10
 800a6b6:	3a30      	subs	r2, #48	@ 0x30
 800a6b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a6ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a6be:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6c0:	1c56      	adds	r6, r2, #1
 800a6c2:	9619      	str	r6, [sp, #100]	@ 0x64
 800a6c4:	7852      	ldrb	r2, [r2, #1]
 800a6c6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a6ca:	f1be 0f09 	cmp.w	lr, #9
 800a6ce:	d939      	bls.n	800a744 <_strtod_l+0x33c>
 800a6d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a6d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a6d6:	1a76      	subs	r6, r6, r1
 800a6d8:	2e08      	cmp	r6, #8
 800a6da:	dc03      	bgt.n	800a6e4 <_strtod_l+0x2dc>
 800a6dc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a6de:	4588      	cmp	r8, r1
 800a6e0:	bfa8      	it	ge
 800a6e2:	4688      	movge	r8, r1
 800a6e4:	f1bc 0f00 	cmp.w	ip, #0
 800a6e8:	d001      	beq.n	800a6ee <_strtod_l+0x2e6>
 800a6ea:	f1c8 0800 	rsb	r8, r8, #0
 800a6ee:	2d00      	cmp	r5, #0
 800a6f0:	d14e      	bne.n	800a790 <_strtod_l+0x388>
 800a6f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6f4:	4308      	orrs	r0, r1
 800a6f6:	f47f aec0 	bne.w	800a47a <_strtod_l+0x72>
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f47f aed6 	bne.w	800a4ac <_strtod_l+0xa4>
 800a700:	2a69      	cmp	r2, #105	@ 0x69
 800a702:	d028      	beq.n	800a756 <_strtod_l+0x34e>
 800a704:	dc25      	bgt.n	800a752 <_strtod_l+0x34a>
 800a706:	2a49      	cmp	r2, #73	@ 0x49
 800a708:	d025      	beq.n	800a756 <_strtod_l+0x34e>
 800a70a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a70c:	f47f aece 	bne.w	800a4ac <_strtod_l+0xa4>
 800a710:	499a      	ldr	r1, [pc, #616]	@ (800a97c <_strtod_l+0x574>)
 800a712:	a819      	add	r0, sp, #100	@ 0x64
 800a714:	f001 fe3e 	bl	800c394 <__match>
 800a718:	2800      	cmp	r0, #0
 800a71a:	f43f aec7 	beq.w	800a4ac <_strtod_l+0xa4>
 800a71e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	2b28      	cmp	r3, #40	@ 0x28
 800a724:	d12e      	bne.n	800a784 <_strtod_l+0x37c>
 800a726:	4996      	ldr	r1, [pc, #600]	@ (800a980 <_strtod_l+0x578>)
 800a728:	aa1c      	add	r2, sp, #112	@ 0x70
 800a72a:	a819      	add	r0, sp, #100	@ 0x64
 800a72c:	f001 fe46 	bl	800c3bc <__hexnan>
 800a730:	2805      	cmp	r0, #5
 800a732:	d127      	bne.n	800a784 <_strtod_l+0x37c>
 800a734:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a736:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a73a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a73e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a742:	e69a      	b.n	800a47a <_strtod_l+0x72>
 800a744:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a746:	fb08 2101 	mla	r1, r8, r1, r2
 800a74a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a74e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a750:	e7b5      	b.n	800a6be <_strtod_l+0x2b6>
 800a752:	2a6e      	cmp	r2, #110	@ 0x6e
 800a754:	e7da      	b.n	800a70c <_strtod_l+0x304>
 800a756:	498b      	ldr	r1, [pc, #556]	@ (800a984 <_strtod_l+0x57c>)
 800a758:	a819      	add	r0, sp, #100	@ 0x64
 800a75a:	f001 fe1b 	bl	800c394 <__match>
 800a75e:	2800      	cmp	r0, #0
 800a760:	f43f aea4 	beq.w	800a4ac <_strtod_l+0xa4>
 800a764:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a766:	4988      	ldr	r1, [pc, #544]	@ (800a988 <_strtod_l+0x580>)
 800a768:	3b01      	subs	r3, #1
 800a76a:	a819      	add	r0, sp, #100	@ 0x64
 800a76c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a76e:	f001 fe11 	bl	800c394 <__match>
 800a772:	b910      	cbnz	r0, 800a77a <_strtod_l+0x372>
 800a774:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a776:	3301      	adds	r3, #1
 800a778:	9319      	str	r3, [sp, #100]	@ 0x64
 800a77a:	f04f 0a00 	mov.w	sl, #0
 800a77e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a98c <_strtod_l+0x584>
 800a782:	e67a      	b.n	800a47a <_strtod_l+0x72>
 800a784:	4882      	ldr	r0, [pc, #520]	@ (800a990 <_strtod_l+0x588>)
 800a786:	f000 fd1f 	bl	800b1c8 <nan>
 800a78a:	4682      	mov	sl, r0
 800a78c:	468b      	mov	fp, r1
 800a78e:	e674      	b.n	800a47a <_strtod_l+0x72>
 800a790:	eba8 0309 	sub.w	r3, r8, r9
 800a794:	2f00      	cmp	r7, #0
 800a796:	bf08      	it	eq
 800a798:	462f      	moveq	r7, r5
 800a79a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a79c:	2d10      	cmp	r5, #16
 800a79e:	462c      	mov	r4, r5
 800a7a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7a2:	bfa8      	it	ge
 800a7a4:	2410      	movge	r4, #16
 800a7a6:	f7f5 fe1d 	bl	80003e4 <__aeabi_ui2d>
 800a7aa:	2d09      	cmp	r5, #9
 800a7ac:	4682      	mov	sl, r0
 800a7ae:	468b      	mov	fp, r1
 800a7b0:	dc11      	bgt.n	800a7d6 <_strtod_l+0x3ce>
 800a7b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f43f ae60 	beq.w	800a47a <_strtod_l+0x72>
 800a7ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7bc:	dd76      	ble.n	800a8ac <_strtod_l+0x4a4>
 800a7be:	2b16      	cmp	r3, #22
 800a7c0:	dc5d      	bgt.n	800a87e <_strtod_l+0x476>
 800a7c2:	4974      	ldr	r1, [pc, #464]	@ (800a994 <_strtod_l+0x58c>)
 800a7c4:	4652      	mov	r2, sl
 800a7c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a7ca:	465b      	mov	r3, fp
 800a7cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7d0:	f7f5 fe82 	bl	80004d8 <__aeabi_dmul>
 800a7d4:	e7d9      	b.n	800a78a <_strtod_l+0x382>
 800a7d6:	4b6f      	ldr	r3, [pc, #444]	@ (800a994 <_strtod_l+0x58c>)
 800a7d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a7e0:	f7f5 fe7a 	bl	80004d8 <__aeabi_dmul>
 800a7e4:	4682      	mov	sl, r0
 800a7e6:	9808      	ldr	r0, [sp, #32]
 800a7e8:	468b      	mov	fp, r1
 800a7ea:	f7f5 fdfb 	bl	80003e4 <__aeabi_ui2d>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	4650      	mov	r0, sl
 800a7f4:	4659      	mov	r1, fp
 800a7f6:	f7f5 fcb9 	bl	800016c <__adddf3>
 800a7fa:	2d0f      	cmp	r5, #15
 800a7fc:	4682      	mov	sl, r0
 800a7fe:	468b      	mov	fp, r1
 800a800:	ddd7      	ble.n	800a7b2 <_strtod_l+0x3aa>
 800a802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a804:	1b2c      	subs	r4, r5, r4
 800a806:	441c      	add	r4, r3
 800a808:	2c00      	cmp	r4, #0
 800a80a:	f340 8096 	ble.w	800a93a <_strtod_l+0x532>
 800a80e:	f014 030f 	ands.w	r3, r4, #15
 800a812:	d00a      	beq.n	800a82a <_strtod_l+0x422>
 800a814:	495f      	ldr	r1, [pc, #380]	@ (800a994 <_strtod_l+0x58c>)
 800a816:	4652      	mov	r2, sl
 800a818:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a81c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a820:	465b      	mov	r3, fp
 800a822:	f7f5 fe59 	bl	80004d8 <__aeabi_dmul>
 800a826:	4682      	mov	sl, r0
 800a828:	468b      	mov	fp, r1
 800a82a:	f034 040f 	bics.w	r4, r4, #15
 800a82e:	d073      	beq.n	800a918 <_strtod_l+0x510>
 800a830:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a834:	dd48      	ble.n	800a8c8 <_strtod_l+0x4c0>
 800a836:	2400      	movs	r4, #0
 800a838:	46a0      	mov	r8, r4
 800a83a:	46a1      	mov	r9, r4
 800a83c:	940a      	str	r4, [sp, #40]	@ 0x28
 800a83e:	2322      	movs	r3, #34	@ 0x22
 800a840:	f04f 0a00 	mov.w	sl, #0
 800a844:	9a05      	ldr	r2, [sp, #20]
 800a846:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800a98c <_strtod_l+0x584>
 800a84a:	6013      	str	r3, [r2, #0]
 800a84c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f43f ae13 	beq.w	800a47a <_strtod_l+0x72>
 800a854:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a856:	9805      	ldr	r0, [sp, #20]
 800a858:	f002 f952 	bl	800cb00 <_Bfree>
 800a85c:	4649      	mov	r1, r9
 800a85e:	9805      	ldr	r0, [sp, #20]
 800a860:	f002 f94e 	bl	800cb00 <_Bfree>
 800a864:	4641      	mov	r1, r8
 800a866:	9805      	ldr	r0, [sp, #20]
 800a868:	f002 f94a 	bl	800cb00 <_Bfree>
 800a86c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a86e:	9805      	ldr	r0, [sp, #20]
 800a870:	f002 f946 	bl	800cb00 <_Bfree>
 800a874:	4621      	mov	r1, r4
 800a876:	9805      	ldr	r0, [sp, #20]
 800a878:	f002 f942 	bl	800cb00 <_Bfree>
 800a87c:	e5fd      	b.n	800a47a <_strtod_l+0x72>
 800a87e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a880:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a884:	4293      	cmp	r3, r2
 800a886:	dbbc      	blt.n	800a802 <_strtod_l+0x3fa>
 800a888:	4c42      	ldr	r4, [pc, #264]	@ (800a994 <_strtod_l+0x58c>)
 800a88a:	f1c5 050f 	rsb	r5, r5, #15
 800a88e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a892:	4652      	mov	r2, sl
 800a894:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a898:	465b      	mov	r3, fp
 800a89a:	f7f5 fe1d 	bl	80004d8 <__aeabi_dmul>
 800a89e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8a0:	1b5d      	subs	r5, r3, r5
 800a8a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a8a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a8aa:	e791      	b.n	800a7d0 <_strtod_l+0x3c8>
 800a8ac:	3316      	adds	r3, #22
 800a8ae:	dba8      	blt.n	800a802 <_strtod_l+0x3fa>
 800a8b0:	4b38      	ldr	r3, [pc, #224]	@ (800a994 <_strtod_l+0x58c>)
 800a8b2:	eba9 0808 	sub.w	r8, r9, r8
 800a8b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a8ba:	4650      	mov	r0, sl
 800a8bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a8c0:	4659      	mov	r1, fp
 800a8c2:	f7f5 ff33 	bl	800072c <__aeabi_ddiv>
 800a8c6:	e760      	b.n	800a78a <_strtod_l+0x382>
 800a8c8:	4b33      	ldr	r3, [pc, #204]	@ (800a998 <_strtod_l+0x590>)
 800a8ca:	4650      	mov	r0, sl
 800a8cc:	9308      	str	r3, [sp, #32]
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	4659      	mov	r1, fp
 800a8d2:	461e      	mov	r6, r3
 800a8d4:	1124      	asrs	r4, r4, #4
 800a8d6:	2c01      	cmp	r4, #1
 800a8d8:	dc21      	bgt.n	800a91e <_strtod_l+0x516>
 800a8da:	b10b      	cbz	r3, 800a8e0 <_strtod_l+0x4d8>
 800a8dc:	4682      	mov	sl, r0
 800a8de:	468b      	mov	fp, r1
 800a8e0:	492d      	ldr	r1, [pc, #180]	@ (800a998 <_strtod_l+0x590>)
 800a8e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a8e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a8ea:	4652      	mov	r2, sl
 800a8ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8f0:	465b      	mov	r3, fp
 800a8f2:	f7f5 fdf1 	bl	80004d8 <__aeabi_dmul>
 800a8f6:	4b25      	ldr	r3, [pc, #148]	@ (800a98c <_strtod_l+0x584>)
 800a8f8:	460a      	mov	r2, r1
 800a8fa:	400b      	ands	r3, r1
 800a8fc:	4927      	ldr	r1, [pc, #156]	@ (800a99c <_strtod_l+0x594>)
 800a8fe:	4682      	mov	sl, r0
 800a900:	428b      	cmp	r3, r1
 800a902:	d898      	bhi.n	800a836 <_strtod_l+0x42e>
 800a904:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a908:	428b      	cmp	r3, r1
 800a90a:	bf86      	itte	hi
 800a90c:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a910:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a9a0 <_strtod_l+0x598>
 800a914:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a918:	2300      	movs	r3, #0
 800a91a:	9308      	str	r3, [sp, #32]
 800a91c:	e07a      	b.n	800aa14 <_strtod_l+0x60c>
 800a91e:	07e2      	lsls	r2, r4, #31
 800a920:	d505      	bpl.n	800a92e <_strtod_l+0x526>
 800a922:	9b08      	ldr	r3, [sp, #32]
 800a924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a928:	f7f5 fdd6 	bl	80004d8 <__aeabi_dmul>
 800a92c:	2301      	movs	r3, #1
 800a92e:	9a08      	ldr	r2, [sp, #32]
 800a930:	3601      	adds	r6, #1
 800a932:	3208      	adds	r2, #8
 800a934:	1064      	asrs	r4, r4, #1
 800a936:	9208      	str	r2, [sp, #32]
 800a938:	e7cd      	b.n	800a8d6 <_strtod_l+0x4ce>
 800a93a:	d0ed      	beq.n	800a918 <_strtod_l+0x510>
 800a93c:	4264      	negs	r4, r4
 800a93e:	f014 020f 	ands.w	r2, r4, #15
 800a942:	d00a      	beq.n	800a95a <_strtod_l+0x552>
 800a944:	4b13      	ldr	r3, [pc, #76]	@ (800a994 <_strtod_l+0x58c>)
 800a946:	4650      	mov	r0, sl
 800a948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a94c:	4659      	mov	r1, fp
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	f7f5 feeb 	bl	800072c <__aeabi_ddiv>
 800a956:	4682      	mov	sl, r0
 800a958:	468b      	mov	fp, r1
 800a95a:	1124      	asrs	r4, r4, #4
 800a95c:	d0dc      	beq.n	800a918 <_strtod_l+0x510>
 800a95e:	2c1f      	cmp	r4, #31
 800a960:	dd20      	ble.n	800a9a4 <_strtod_l+0x59c>
 800a962:	2400      	movs	r4, #0
 800a964:	46a0      	mov	r8, r4
 800a966:	46a1      	mov	r9, r4
 800a968:	940a      	str	r4, [sp, #40]	@ 0x28
 800a96a:	2322      	movs	r3, #34	@ 0x22
 800a96c:	9a05      	ldr	r2, [sp, #20]
 800a96e:	f04f 0a00 	mov.w	sl, #0
 800a972:	f04f 0b00 	mov.w	fp, #0
 800a976:	6013      	str	r3, [r2, #0]
 800a978:	e768      	b.n	800a84c <_strtod_l+0x444>
 800a97a:	bf00      	nop
 800a97c:	0800dccf 	.word	0x0800dccf
 800a980:	0800dd00 	.word	0x0800dd00
 800a984:	0800dcc7 	.word	0x0800dcc7
 800a988:	0800de5c 	.word	0x0800de5c
 800a98c:	7ff00000 	.word	0x7ff00000
 800a990:	0800e0eb 	.word	0x0800e0eb
 800a994:	0800dfe8 	.word	0x0800dfe8
 800a998:	0800dfc0 	.word	0x0800dfc0
 800a99c:	7ca00000 	.word	0x7ca00000
 800a9a0:	7fefffff 	.word	0x7fefffff
 800a9a4:	f014 0310 	ands.w	r3, r4, #16
 800a9a8:	bf18      	it	ne
 800a9aa:	236a      	movne	r3, #106	@ 0x6a
 800a9ac:	4650      	mov	r0, sl
 800a9ae:	9308      	str	r3, [sp, #32]
 800a9b0:	4659      	mov	r1, fp
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	4ea9      	ldr	r6, [pc, #676]	@ (800ac5c <_strtod_l+0x854>)
 800a9b6:	07e2      	lsls	r2, r4, #31
 800a9b8:	d504      	bpl.n	800a9c4 <_strtod_l+0x5bc>
 800a9ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9be:	f7f5 fd8b 	bl	80004d8 <__aeabi_dmul>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	1064      	asrs	r4, r4, #1
 800a9c6:	f106 0608 	add.w	r6, r6, #8
 800a9ca:	d1f4      	bne.n	800a9b6 <_strtod_l+0x5ae>
 800a9cc:	b10b      	cbz	r3, 800a9d2 <_strtod_l+0x5ca>
 800a9ce:	4682      	mov	sl, r0
 800a9d0:	468b      	mov	fp, r1
 800a9d2:	9b08      	ldr	r3, [sp, #32]
 800a9d4:	b1b3      	cbz	r3, 800aa04 <_strtod_l+0x5fc>
 800a9d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a9da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	4659      	mov	r1, fp
 800a9e2:	dd0f      	ble.n	800aa04 <_strtod_l+0x5fc>
 800a9e4:	2b1f      	cmp	r3, #31
 800a9e6:	dd57      	ble.n	800aa98 <_strtod_l+0x690>
 800a9e8:	2b34      	cmp	r3, #52	@ 0x34
 800a9ea:	bfd8      	it	le
 800a9ec:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a9f0:	f04f 0a00 	mov.w	sl, #0
 800a9f4:	bfcf      	iteee	gt
 800a9f6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a9fa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a9fe:	4093      	lslle	r3, r2
 800aa00:	ea03 0b01 	andle.w	fp, r3, r1
 800aa04:	2200      	movs	r2, #0
 800aa06:	2300      	movs	r3, #0
 800aa08:	4650      	mov	r0, sl
 800aa0a:	4659      	mov	r1, fp
 800aa0c:	f7f5 ffcc 	bl	80009a8 <__aeabi_dcmpeq>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d1a6      	bne.n	800a962 <_strtod_l+0x55a>
 800aa14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa16:	463a      	mov	r2, r7
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aa1c:	462b      	mov	r3, r5
 800aa1e:	9805      	ldr	r0, [sp, #20]
 800aa20:	f002 f8d6 	bl	800cbd0 <__s2b>
 800aa24:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f43f af05 	beq.w	800a836 <_strtod_l+0x42e>
 800aa2c:	2400      	movs	r4, #0
 800aa2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa30:	eba9 0308 	sub.w	r3, r9, r8
 800aa34:	2a00      	cmp	r2, #0
 800aa36:	bfa8      	it	ge
 800aa38:	2300      	movge	r3, #0
 800aa3a:	46a0      	mov	r8, r4
 800aa3c:	9312      	str	r3, [sp, #72]	@ 0x48
 800aa3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aa42:	9316      	str	r3, [sp, #88]	@ 0x58
 800aa44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa46:	9805      	ldr	r0, [sp, #20]
 800aa48:	6859      	ldr	r1, [r3, #4]
 800aa4a:	f002 f819 	bl	800ca80 <_Balloc>
 800aa4e:	4681      	mov	r9, r0
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f43f aef4 	beq.w	800a83e <_strtod_l+0x436>
 800aa56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa58:	300c      	adds	r0, #12
 800aa5a:	691a      	ldr	r2, [r3, #16]
 800aa5c:	f103 010c 	add.w	r1, r3, #12
 800aa60:	3202      	adds	r2, #2
 800aa62:	0092      	lsls	r2, r2, #2
 800aa64:	f000 fba1 	bl	800b1aa <memcpy>
 800aa68:	ab1c      	add	r3, sp, #112	@ 0x70
 800aa6a:	9301      	str	r3, [sp, #4]
 800aa6c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	4652      	mov	r2, sl
 800aa72:	465b      	mov	r3, fp
 800aa74:	9805      	ldr	r0, [sp, #20]
 800aa76:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aa7a:	f002 fbdb 	bl	800d234 <__d2b>
 800aa7e:	901a      	str	r0, [sp, #104]	@ 0x68
 800aa80:	2800      	cmp	r0, #0
 800aa82:	f43f aedc 	beq.w	800a83e <_strtod_l+0x436>
 800aa86:	2101      	movs	r1, #1
 800aa88:	9805      	ldr	r0, [sp, #20]
 800aa8a:	f002 f937 	bl	800ccfc <__i2b>
 800aa8e:	4680      	mov	r8, r0
 800aa90:	b948      	cbnz	r0, 800aaa6 <_strtod_l+0x69e>
 800aa92:	f04f 0800 	mov.w	r8, #0
 800aa96:	e6d2      	b.n	800a83e <_strtod_l+0x436>
 800aa98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa0:	ea03 0a0a 	and.w	sl, r3, sl
 800aaa4:	e7ae      	b.n	800aa04 <_strtod_l+0x5fc>
 800aaa6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800aaa8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800aaaa:	2d00      	cmp	r5, #0
 800aaac:	bfab      	itete	ge
 800aaae:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800aab0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800aab2:	18ef      	addge	r7, r5, r3
 800aab4:	1b5e      	sublt	r6, r3, r5
 800aab6:	9b08      	ldr	r3, [sp, #32]
 800aab8:	bfa8      	it	ge
 800aaba:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aabc:	eba5 0503 	sub.w	r5, r5, r3
 800aac0:	4415      	add	r5, r2
 800aac2:	4b67      	ldr	r3, [pc, #412]	@ (800ac60 <_strtod_l+0x858>)
 800aac4:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800aac8:	bfb8      	it	lt
 800aaca:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aacc:	429d      	cmp	r5, r3
 800aace:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aad2:	da50      	bge.n	800ab76 <_strtod_l+0x76e>
 800aad4:	1b5b      	subs	r3, r3, r5
 800aad6:	2b1f      	cmp	r3, #31
 800aad8:	f04f 0101 	mov.w	r1, #1
 800aadc:	eba2 0203 	sub.w	r2, r2, r3
 800aae0:	dc3d      	bgt.n	800ab5e <_strtod_l+0x756>
 800aae2:	fa01 f303 	lsl.w	r3, r1, r3
 800aae6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aae8:	2300      	movs	r3, #0
 800aaea:	9310      	str	r3, [sp, #64]	@ 0x40
 800aaec:	18bd      	adds	r5, r7, r2
 800aaee:	9b08      	ldr	r3, [sp, #32]
 800aaf0:	42af      	cmp	r7, r5
 800aaf2:	4416      	add	r6, r2
 800aaf4:	441e      	add	r6, r3
 800aaf6:	463b      	mov	r3, r7
 800aaf8:	bfa8      	it	ge
 800aafa:	462b      	movge	r3, r5
 800aafc:	42b3      	cmp	r3, r6
 800aafe:	bfa8      	it	ge
 800ab00:	4633      	movge	r3, r6
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bfc2      	ittt	gt
 800ab06:	1aed      	subgt	r5, r5, r3
 800ab08:	1af6      	subgt	r6, r6, r3
 800ab0a:	1aff      	subgt	r7, r7, r3
 800ab0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	dd16      	ble.n	800ab40 <_strtod_l+0x738>
 800ab12:	4641      	mov	r1, r8
 800ab14:	461a      	mov	r2, r3
 800ab16:	9805      	ldr	r0, [sp, #20]
 800ab18:	f002 f9ae 	bl	800ce78 <__pow5mult>
 800ab1c:	4680      	mov	r8, r0
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d0b7      	beq.n	800aa92 <_strtod_l+0x68a>
 800ab22:	4601      	mov	r1, r0
 800ab24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab26:	9805      	ldr	r0, [sp, #20]
 800ab28:	f002 f8fe 	bl	800cd28 <__multiply>
 800ab2c:	900e      	str	r0, [sp, #56]	@ 0x38
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	f43f ae85 	beq.w	800a83e <_strtod_l+0x436>
 800ab34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab36:	9805      	ldr	r0, [sp, #20]
 800ab38:	f001 ffe2 	bl	800cb00 <_Bfree>
 800ab3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab40:	2d00      	cmp	r5, #0
 800ab42:	dc1d      	bgt.n	800ab80 <_strtod_l+0x778>
 800ab44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	dd23      	ble.n	800ab92 <_strtod_l+0x78a>
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ab4e:	9805      	ldr	r0, [sp, #20]
 800ab50:	f002 f992 	bl	800ce78 <__pow5mult>
 800ab54:	4681      	mov	r9, r0
 800ab56:	b9e0      	cbnz	r0, 800ab92 <_strtod_l+0x78a>
 800ab58:	f04f 0900 	mov.w	r9, #0
 800ab5c:	e66f      	b.n	800a83e <_strtod_l+0x436>
 800ab5e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ab62:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ab66:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ab6a:	35e2      	adds	r5, #226	@ 0xe2
 800ab6c:	fa01 f305 	lsl.w	r3, r1, r5
 800ab70:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab72:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ab74:	e7ba      	b.n	800aaec <_strtod_l+0x6e4>
 800ab76:	2300      	movs	r3, #0
 800ab78:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab7e:	e7b5      	b.n	800aaec <_strtod_l+0x6e4>
 800ab80:	462a      	mov	r2, r5
 800ab82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab84:	9805      	ldr	r0, [sp, #20]
 800ab86:	f002 f9d1 	bl	800cf2c <__lshift>
 800ab8a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d1d9      	bne.n	800ab44 <_strtod_l+0x73c>
 800ab90:	e655      	b.n	800a83e <_strtod_l+0x436>
 800ab92:	2e00      	cmp	r6, #0
 800ab94:	dd07      	ble.n	800aba6 <_strtod_l+0x79e>
 800ab96:	4649      	mov	r1, r9
 800ab98:	4632      	mov	r2, r6
 800ab9a:	9805      	ldr	r0, [sp, #20]
 800ab9c:	f002 f9c6 	bl	800cf2c <__lshift>
 800aba0:	4681      	mov	r9, r0
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d0d8      	beq.n	800ab58 <_strtod_l+0x750>
 800aba6:	2f00      	cmp	r7, #0
 800aba8:	dd08      	ble.n	800abbc <_strtod_l+0x7b4>
 800abaa:	4641      	mov	r1, r8
 800abac:	463a      	mov	r2, r7
 800abae:	9805      	ldr	r0, [sp, #20]
 800abb0:	f002 f9bc 	bl	800cf2c <__lshift>
 800abb4:	4680      	mov	r8, r0
 800abb6:	2800      	cmp	r0, #0
 800abb8:	f43f ae41 	beq.w	800a83e <_strtod_l+0x436>
 800abbc:	464a      	mov	r2, r9
 800abbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abc0:	9805      	ldr	r0, [sp, #20]
 800abc2:	f002 fa3b 	bl	800d03c <__mdiff>
 800abc6:	4604      	mov	r4, r0
 800abc8:	2800      	cmp	r0, #0
 800abca:	f43f ae38 	beq.w	800a83e <_strtod_l+0x436>
 800abce:	68c3      	ldr	r3, [r0, #12]
 800abd0:	4641      	mov	r1, r8
 800abd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abd4:	2300      	movs	r3, #0
 800abd6:	60c3      	str	r3, [r0, #12]
 800abd8:	f002 fa14 	bl	800d004 <__mcmp>
 800abdc:	2800      	cmp	r0, #0
 800abde:	da45      	bge.n	800ac6c <_strtod_l+0x864>
 800abe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abe2:	ea53 030a 	orrs.w	r3, r3, sl
 800abe6:	d16b      	bne.n	800acc0 <_strtod_l+0x8b8>
 800abe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abec:	2b00      	cmp	r3, #0
 800abee:	d167      	bne.n	800acc0 <_strtod_l+0x8b8>
 800abf0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abf4:	0d1b      	lsrs	r3, r3, #20
 800abf6:	051b      	lsls	r3, r3, #20
 800abf8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800abfc:	d960      	bls.n	800acc0 <_strtod_l+0x8b8>
 800abfe:	6963      	ldr	r3, [r4, #20]
 800ac00:	b913      	cbnz	r3, 800ac08 <_strtod_l+0x800>
 800ac02:	6923      	ldr	r3, [r4, #16]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	dd5b      	ble.n	800acc0 <_strtod_l+0x8b8>
 800ac08:	4621      	mov	r1, r4
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	9805      	ldr	r0, [sp, #20]
 800ac0e:	f002 f98d 	bl	800cf2c <__lshift>
 800ac12:	4641      	mov	r1, r8
 800ac14:	4604      	mov	r4, r0
 800ac16:	f002 f9f5 	bl	800d004 <__mcmp>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	dd50      	ble.n	800acc0 <_strtod_l+0x8b8>
 800ac1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac22:	9a08      	ldr	r2, [sp, #32]
 800ac24:	0d1b      	lsrs	r3, r3, #20
 800ac26:	051b      	lsls	r3, r3, #20
 800ac28:	2a00      	cmp	r2, #0
 800ac2a:	d06a      	beq.n	800ad02 <_strtod_l+0x8fa>
 800ac2c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac30:	d867      	bhi.n	800ad02 <_strtod_l+0x8fa>
 800ac32:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ac36:	f67f ae98 	bls.w	800a96a <_strtod_l+0x562>
 800ac3a:	4650      	mov	r0, sl
 800ac3c:	4659      	mov	r1, fp
 800ac3e:	4b09      	ldr	r3, [pc, #36]	@ (800ac64 <_strtod_l+0x85c>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	f7f5 fc49 	bl	80004d8 <__aeabi_dmul>
 800ac46:	4b08      	ldr	r3, [pc, #32]	@ (800ac68 <_strtod_l+0x860>)
 800ac48:	4682      	mov	sl, r0
 800ac4a:	400b      	ands	r3, r1
 800ac4c:	468b      	mov	fp, r1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f47f ae00 	bne.w	800a854 <_strtod_l+0x44c>
 800ac54:	2322      	movs	r3, #34	@ 0x22
 800ac56:	9a05      	ldr	r2, [sp, #20]
 800ac58:	6013      	str	r3, [r2, #0]
 800ac5a:	e5fb      	b.n	800a854 <_strtod_l+0x44c>
 800ac5c:	0800dd28 	.word	0x0800dd28
 800ac60:	fffffc02 	.word	0xfffffc02
 800ac64:	39500000 	.word	0x39500000
 800ac68:	7ff00000 	.word	0x7ff00000
 800ac6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ac70:	d165      	bne.n	800ad3e <_strtod_l+0x936>
 800ac72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ac74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac78:	b35a      	cbz	r2, 800acd2 <_strtod_l+0x8ca>
 800ac7a:	4a99      	ldr	r2, [pc, #612]	@ (800aee0 <_strtod_l+0xad8>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d12b      	bne.n	800acd8 <_strtod_l+0x8d0>
 800ac80:	9b08      	ldr	r3, [sp, #32]
 800ac82:	4651      	mov	r1, sl
 800ac84:	b303      	cbz	r3, 800acc8 <_strtod_l+0x8c0>
 800ac86:	465a      	mov	r2, fp
 800ac88:	4b96      	ldr	r3, [pc, #600]	@ (800aee4 <_strtod_l+0xadc>)
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ac90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac94:	d81b      	bhi.n	800acce <_strtod_l+0x8c6>
 800ac96:	0d1b      	lsrs	r3, r3, #20
 800ac98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aca0:	4299      	cmp	r1, r3
 800aca2:	d119      	bne.n	800acd8 <_strtod_l+0x8d0>
 800aca4:	4b90      	ldr	r3, [pc, #576]	@ (800aee8 <_strtod_l+0xae0>)
 800aca6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d102      	bne.n	800acb2 <_strtod_l+0x8aa>
 800acac:	3101      	adds	r1, #1
 800acae:	f43f adc6 	beq.w	800a83e <_strtod_l+0x436>
 800acb2:	f04f 0a00 	mov.w	sl, #0
 800acb6:	4b8b      	ldr	r3, [pc, #556]	@ (800aee4 <_strtod_l+0xadc>)
 800acb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acba:	401a      	ands	r2, r3
 800acbc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800acc0:	9b08      	ldr	r3, [sp, #32]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1b9      	bne.n	800ac3a <_strtod_l+0x832>
 800acc6:	e5c5      	b.n	800a854 <_strtod_l+0x44c>
 800acc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800accc:	e7e8      	b.n	800aca0 <_strtod_l+0x898>
 800acce:	4613      	mov	r3, r2
 800acd0:	e7e6      	b.n	800aca0 <_strtod_l+0x898>
 800acd2:	ea53 030a 	orrs.w	r3, r3, sl
 800acd6:	d0a2      	beq.n	800ac1e <_strtod_l+0x816>
 800acd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800acda:	b1db      	cbz	r3, 800ad14 <_strtod_l+0x90c>
 800acdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acde:	4213      	tst	r3, r2
 800ace0:	d0ee      	beq.n	800acc0 <_strtod_l+0x8b8>
 800ace2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ace4:	4650      	mov	r0, sl
 800ace6:	4659      	mov	r1, fp
 800ace8:	9a08      	ldr	r2, [sp, #32]
 800acea:	b1bb      	cbz	r3, 800ad1c <_strtod_l+0x914>
 800acec:	f7ff fb68 	bl	800a3c0 <sulp>
 800acf0:	4602      	mov	r2, r0
 800acf2:	460b      	mov	r3, r1
 800acf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acf8:	f7f5 fa38 	bl	800016c <__adddf3>
 800acfc:	4682      	mov	sl, r0
 800acfe:	468b      	mov	fp, r1
 800ad00:	e7de      	b.n	800acc0 <_strtod_l+0x8b8>
 800ad02:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ad06:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad0a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ad0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad12:	e7d5      	b.n	800acc0 <_strtod_l+0x8b8>
 800ad14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad16:	ea13 0f0a 	tst.w	r3, sl
 800ad1a:	e7e1      	b.n	800ace0 <_strtod_l+0x8d8>
 800ad1c:	f7ff fb50 	bl	800a3c0 <sulp>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad28:	f7f5 fa1e 	bl	8000168 <__aeabi_dsub>
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	2300      	movs	r3, #0
 800ad30:	4682      	mov	sl, r0
 800ad32:	468b      	mov	fp, r1
 800ad34:	f7f5 fe38 	bl	80009a8 <__aeabi_dcmpeq>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d0c1      	beq.n	800acc0 <_strtod_l+0x8b8>
 800ad3c:	e615      	b.n	800a96a <_strtod_l+0x562>
 800ad3e:	4641      	mov	r1, r8
 800ad40:	4620      	mov	r0, r4
 800ad42:	f002 facf 	bl	800d2e4 <__ratio>
 800ad46:	2200      	movs	r2, #0
 800ad48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ad4c:	4606      	mov	r6, r0
 800ad4e:	460f      	mov	r7, r1
 800ad50:	f7f5 fe3e 	bl	80009d0 <__aeabi_dcmple>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	d06d      	beq.n	800ae34 <_strtod_l+0xa2c>
 800ad58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d178      	bne.n	800ae50 <_strtod_l+0xa48>
 800ad5e:	f1ba 0f00 	cmp.w	sl, #0
 800ad62:	d156      	bne.n	800ae12 <_strtod_l+0xa0a>
 800ad64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d158      	bne.n	800ae20 <_strtod_l+0xa18>
 800ad6e:	2200      	movs	r2, #0
 800ad70:	4630      	mov	r0, r6
 800ad72:	4639      	mov	r1, r7
 800ad74:	4b5d      	ldr	r3, [pc, #372]	@ (800aeec <_strtod_l+0xae4>)
 800ad76:	f7f5 fe21 	bl	80009bc <__aeabi_dcmplt>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d157      	bne.n	800ae2e <_strtod_l+0xa26>
 800ad7e:	4630      	mov	r0, r6
 800ad80:	4639      	mov	r1, r7
 800ad82:	2200      	movs	r2, #0
 800ad84:	4b5a      	ldr	r3, [pc, #360]	@ (800aef0 <_strtod_l+0xae8>)
 800ad86:	f7f5 fba7 	bl	80004d8 <__aeabi_dmul>
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	460f      	mov	r7, r1
 800ad8e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ad92:	9606      	str	r6, [sp, #24]
 800ad94:	9307      	str	r3, [sp, #28]
 800ad96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad9a:	4d52      	ldr	r5, [pc, #328]	@ (800aee4 <_strtod_l+0xadc>)
 800ad9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ada0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ada2:	401d      	ands	r5, r3
 800ada4:	4b53      	ldr	r3, [pc, #332]	@ (800aef4 <_strtod_l+0xaec>)
 800ada6:	429d      	cmp	r5, r3
 800ada8:	f040 80aa 	bne.w	800af00 <_strtod_l+0xaf8>
 800adac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adae:	4650      	mov	r0, sl
 800adb0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800adb4:	4659      	mov	r1, fp
 800adb6:	f002 f9d5 	bl	800d164 <__ulp>
 800adba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adbe:	f7f5 fb8b 	bl	80004d8 <__aeabi_dmul>
 800adc2:	4652      	mov	r2, sl
 800adc4:	465b      	mov	r3, fp
 800adc6:	f7f5 f9d1 	bl	800016c <__adddf3>
 800adca:	460b      	mov	r3, r1
 800adcc:	4945      	ldr	r1, [pc, #276]	@ (800aee4 <_strtod_l+0xadc>)
 800adce:	4a4a      	ldr	r2, [pc, #296]	@ (800aef8 <_strtod_l+0xaf0>)
 800add0:	4019      	ands	r1, r3
 800add2:	4291      	cmp	r1, r2
 800add4:	4682      	mov	sl, r0
 800add6:	d942      	bls.n	800ae5e <_strtod_l+0xa56>
 800add8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adda:	4b43      	ldr	r3, [pc, #268]	@ (800aee8 <_strtod_l+0xae0>)
 800addc:	429a      	cmp	r2, r3
 800adde:	d103      	bne.n	800ade8 <_strtod_l+0x9e0>
 800ade0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ade2:	3301      	adds	r3, #1
 800ade4:	f43f ad2b 	beq.w	800a83e <_strtod_l+0x436>
 800ade8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800adec:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800aee8 <_strtod_l+0xae0>
 800adf0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adf2:	9805      	ldr	r0, [sp, #20]
 800adf4:	f001 fe84 	bl	800cb00 <_Bfree>
 800adf8:	4649      	mov	r1, r9
 800adfa:	9805      	ldr	r0, [sp, #20]
 800adfc:	f001 fe80 	bl	800cb00 <_Bfree>
 800ae00:	4641      	mov	r1, r8
 800ae02:	9805      	ldr	r0, [sp, #20]
 800ae04:	f001 fe7c 	bl	800cb00 <_Bfree>
 800ae08:	4621      	mov	r1, r4
 800ae0a:	9805      	ldr	r0, [sp, #20]
 800ae0c:	f001 fe78 	bl	800cb00 <_Bfree>
 800ae10:	e618      	b.n	800aa44 <_strtod_l+0x63c>
 800ae12:	f1ba 0f01 	cmp.w	sl, #1
 800ae16:	d103      	bne.n	800ae20 <_strtod_l+0xa18>
 800ae18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f43f ada5 	beq.w	800a96a <_strtod_l+0x562>
 800ae20:	2200      	movs	r2, #0
 800ae22:	4b36      	ldr	r3, [pc, #216]	@ (800aefc <_strtod_l+0xaf4>)
 800ae24:	2600      	movs	r6, #0
 800ae26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae2a:	4f30      	ldr	r7, [pc, #192]	@ (800aeec <_strtod_l+0xae4>)
 800ae2c:	e7b3      	b.n	800ad96 <_strtod_l+0x98e>
 800ae2e:	2600      	movs	r6, #0
 800ae30:	4f2f      	ldr	r7, [pc, #188]	@ (800aef0 <_strtod_l+0xae8>)
 800ae32:	e7ac      	b.n	800ad8e <_strtod_l+0x986>
 800ae34:	4630      	mov	r0, r6
 800ae36:	4639      	mov	r1, r7
 800ae38:	4b2d      	ldr	r3, [pc, #180]	@ (800aef0 <_strtod_l+0xae8>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f7f5 fb4c 	bl	80004d8 <__aeabi_dmul>
 800ae40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae42:	4606      	mov	r6, r0
 800ae44:	460f      	mov	r7, r1
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0a1      	beq.n	800ad8e <_strtod_l+0x986>
 800ae4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ae4e:	e7a2      	b.n	800ad96 <_strtod_l+0x98e>
 800ae50:	2200      	movs	r2, #0
 800ae52:	4b26      	ldr	r3, [pc, #152]	@ (800aeec <_strtod_l+0xae4>)
 800ae54:	4616      	mov	r6, r2
 800ae56:	461f      	mov	r7, r3
 800ae58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ae5c:	e79b      	b.n	800ad96 <_strtod_l+0x98e>
 800ae5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ae62:	9b08      	ldr	r3, [sp, #32]
 800ae64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1c1      	bne.n	800adf0 <_strtod_l+0x9e8>
 800ae6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae70:	0d1b      	lsrs	r3, r3, #20
 800ae72:	051b      	lsls	r3, r3, #20
 800ae74:	429d      	cmp	r5, r3
 800ae76:	d1bb      	bne.n	800adf0 <_strtod_l+0x9e8>
 800ae78:	4630      	mov	r0, r6
 800ae7a:	4639      	mov	r1, r7
 800ae7c:	f7f5 fe74 	bl	8000b68 <__aeabi_d2lz>
 800ae80:	f7f5 fafc 	bl	800047c <__aeabi_l2d>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	4630      	mov	r0, r6
 800ae8a:	4639      	mov	r1, r7
 800ae8c:	f7f5 f96c 	bl	8000168 <__aeabi_dsub>
 800ae90:	460b      	mov	r3, r1
 800ae92:	4602      	mov	r2, r0
 800ae94:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ae98:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ae9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae9e:	ea46 060a 	orr.w	r6, r6, sl
 800aea2:	431e      	orrs	r6, r3
 800aea4:	d069      	beq.n	800af7a <_strtod_l+0xb72>
 800aea6:	a30a      	add	r3, pc, #40	@ (adr r3, 800aed0 <_strtod_l+0xac8>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	f7f5 fd86 	bl	80009bc <__aeabi_dcmplt>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	f47f accf 	bne.w	800a854 <_strtod_l+0x44c>
 800aeb6:	a308      	add	r3, pc, #32	@ (adr r3, 800aed8 <_strtod_l+0xad0>)
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aec0:	f7f5 fd9a 	bl	80009f8 <__aeabi_dcmpgt>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d093      	beq.n	800adf0 <_strtod_l+0x9e8>
 800aec8:	e4c4      	b.n	800a854 <_strtod_l+0x44c>
 800aeca:	bf00      	nop
 800aecc:	f3af 8000 	nop.w
 800aed0:	94a03595 	.word	0x94a03595
 800aed4:	3fdfffff 	.word	0x3fdfffff
 800aed8:	35afe535 	.word	0x35afe535
 800aedc:	3fe00000 	.word	0x3fe00000
 800aee0:	000fffff 	.word	0x000fffff
 800aee4:	7ff00000 	.word	0x7ff00000
 800aee8:	7fefffff 	.word	0x7fefffff
 800aeec:	3ff00000 	.word	0x3ff00000
 800aef0:	3fe00000 	.word	0x3fe00000
 800aef4:	7fe00000 	.word	0x7fe00000
 800aef8:	7c9fffff 	.word	0x7c9fffff
 800aefc:	bff00000 	.word	0xbff00000
 800af00:	9b08      	ldr	r3, [sp, #32]
 800af02:	b323      	cbz	r3, 800af4e <_strtod_l+0xb46>
 800af04:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800af08:	d821      	bhi.n	800af4e <_strtod_l+0xb46>
 800af0a:	a327      	add	r3, pc, #156	@ (adr r3, 800afa8 <_strtod_l+0xba0>)
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	4630      	mov	r0, r6
 800af12:	4639      	mov	r1, r7
 800af14:	f7f5 fd5c 	bl	80009d0 <__aeabi_dcmple>
 800af18:	b1a0      	cbz	r0, 800af44 <_strtod_l+0xb3c>
 800af1a:	4639      	mov	r1, r7
 800af1c:	4630      	mov	r0, r6
 800af1e:	f7f5 fdb3 	bl	8000a88 <__aeabi_d2uiz>
 800af22:	2801      	cmp	r0, #1
 800af24:	bf38      	it	cc
 800af26:	2001      	movcc	r0, #1
 800af28:	f7f5 fa5c 	bl	80003e4 <__aeabi_ui2d>
 800af2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af2e:	4606      	mov	r6, r0
 800af30:	460f      	mov	r7, r1
 800af32:	b9fb      	cbnz	r3, 800af74 <_strtod_l+0xb6c>
 800af34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af38:	9014      	str	r0, [sp, #80]	@ 0x50
 800af3a:	9315      	str	r3, [sp, #84]	@ 0x54
 800af3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800af40:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800af44:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af46:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800af4a:	1b5b      	subs	r3, r3, r5
 800af4c:	9311      	str	r3, [sp, #68]	@ 0x44
 800af4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af52:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800af56:	f002 f905 	bl	800d164 <__ulp>
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	4650      	mov	r0, sl
 800af60:	4659      	mov	r1, fp
 800af62:	f7f5 fab9 	bl	80004d8 <__aeabi_dmul>
 800af66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800af6a:	f7f5 f8ff 	bl	800016c <__adddf3>
 800af6e:	4682      	mov	sl, r0
 800af70:	468b      	mov	fp, r1
 800af72:	e776      	b.n	800ae62 <_strtod_l+0xa5a>
 800af74:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800af78:	e7e0      	b.n	800af3c <_strtod_l+0xb34>
 800af7a:	a30d      	add	r3, pc, #52	@ (adr r3, 800afb0 <_strtod_l+0xba8>)
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f7f5 fd1c 	bl	80009bc <__aeabi_dcmplt>
 800af84:	e79e      	b.n	800aec4 <_strtod_l+0xabc>
 800af86:	2300      	movs	r3, #0
 800af88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af8c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800af8e:	6013      	str	r3, [r2, #0]
 800af90:	f7ff ba77 	b.w	800a482 <_strtod_l+0x7a>
 800af94:	2a65      	cmp	r2, #101	@ 0x65
 800af96:	f43f ab6e 	beq.w	800a676 <_strtod_l+0x26e>
 800af9a:	2a45      	cmp	r2, #69	@ 0x45
 800af9c:	f43f ab6b 	beq.w	800a676 <_strtod_l+0x26e>
 800afa0:	2301      	movs	r3, #1
 800afa2:	f7ff bba6 	b.w	800a6f2 <_strtod_l+0x2ea>
 800afa6:	bf00      	nop
 800afa8:	ffc00000 	.word	0xffc00000
 800afac:	41dfffff 	.word	0x41dfffff
 800afb0:	94a03595 	.word	0x94a03595
 800afb4:	3fcfffff 	.word	0x3fcfffff

0800afb8 <_strtod_r>:
 800afb8:	4b01      	ldr	r3, [pc, #4]	@ (800afc0 <_strtod_r+0x8>)
 800afba:	f7ff ba25 	b.w	800a408 <_strtod_l>
 800afbe:	bf00      	nop
 800afc0:	20000194 	.word	0x20000194

0800afc4 <_strtol_l.constprop.0>:
 800afc4:	2b24      	cmp	r3, #36	@ 0x24
 800afc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afca:	4686      	mov	lr, r0
 800afcc:	4690      	mov	r8, r2
 800afce:	d801      	bhi.n	800afd4 <_strtol_l.constprop.0+0x10>
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d106      	bne.n	800afe2 <_strtol_l.constprop.0+0x1e>
 800afd4:	f000 f8ae 	bl	800b134 <__errno>
 800afd8:	2316      	movs	r3, #22
 800afda:	6003      	str	r3, [r0, #0]
 800afdc:	2000      	movs	r0, #0
 800afde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe2:	460d      	mov	r5, r1
 800afe4:	4833      	ldr	r0, [pc, #204]	@ (800b0b4 <_strtol_l.constprop.0+0xf0>)
 800afe6:	462a      	mov	r2, r5
 800afe8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afec:	5d06      	ldrb	r6, [r0, r4]
 800afee:	f016 0608 	ands.w	r6, r6, #8
 800aff2:	d1f8      	bne.n	800afe6 <_strtol_l.constprop.0+0x22>
 800aff4:	2c2d      	cmp	r4, #45	@ 0x2d
 800aff6:	d12d      	bne.n	800b054 <_strtol_l.constprop.0+0x90>
 800aff8:	2601      	movs	r6, #1
 800affa:	782c      	ldrb	r4, [r5, #0]
 800affc:	1c95      	adds	r5, r2, #2
 800affe:	f033 0210 	bics.w	r2, r3, #16
 800b002:	d109      	bne.n	800b018 <_strtol_l.constprop.0+0x54>
 800b004:	2c30      	cmp	r4, #48	@ 0x30
 800b006:	d12a      	bne.n	800b05e <_strtol_l.constprop.0+0x9a>
 800b008:	782a      	ldrb	r2, [r5, #0]
 800b00a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b00e:	2a58      	cmp	r2, #88	@ 0x58
 800b010:	d125      	bne.n	800b05e <_strtol_l.constprop.0+0x9a>
 800b012:	2310      	movs	r3, #16
 800b014:	786c      	ldrb	r4, [r5, #1]
 800b016:	3502      	adds	r5, #2
 800b018:	2200      	movs	r2, #0
 800b01a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b01e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b022:	fbbc f9f3 	udiv	r9, ip, r3
 800b026:	4610      	mov	r0, r2
 800b028:	fb03 ca19 	mls	sl, r3, r9, ip
 800b02c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b030:	2f09      	cmp	r7, #9
 800b032:	d81b      	bhi.n	800b06c <_strtol_l.constprop.0+0xa8>
 800b034:	463c      	mov	r4, r7
 800b036:	42a3      	cmp	r3, r4
 800b038:	dd27      	ble.n	800b08a <_strtol_l.constprop.0+0xc6>
 800b03a:	1c57      	adds	r7, r2, #1
 800b03c:	d007      	beq.n	800b04e <_strtol_l.constprop.0+0x8a>
 800b03e:	4581      	cmp	r9, r0
 800b040:	d320      	bcc.n	800b084 <_strtol_l.constprop.0+0xc0>
 800b042:	d101      	bne.n	800b048 <_strtol_l.constprop.0+0x84>
 800b044:	45a2      	cmp	sl, r4
 800b046:	db1d      	blt.n	800b084 <_strtol_l.constprop.0+0xc0>
 800b048:	2201      	movs	r2, #1
 800b04a:	fb00 4003 	mla	r0, r0, r3, r4
 800b04e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b052:	e7eb      	b.n	800b02c <_strtol_l.constprop.0+0x68>
 800b054:	2c2b      	cmp	r4, #43	@ 0x2b
 800b056:	bf04      	itt	eq
 800b058:	782c      	ldrbeq	r4, [r5, #0]
 800b05a:	1c95      	addeq	r5, r2, #2
 800b05c:	e7cf      	b.n	800affe <_strtol_l.constprop.0+0x3a>
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1da      	bne.n	800b018 <_strtol_l.constprop.0+0x54>
 800b062:	2c30      	cmp	r4, #48	@ 0x30
 800b064:	bf0c      	ite	eq
 800b066:	2308      	moveq	r3, #8
 800b068:	230a      	movne	r3, #10
 800b06a:	e7d5      	b.n	800b018 <_strtol_l.constprop.0+0x54>
 800b06c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b070:	2f19      	cmp	r7, #25
 800b072:	d801      	bhi.n	800b078 <_strtol_l.constprop.0+0xb4>
 800b074:	3c37      	subs	r4, #55	@ 0x37
 800b076:	e7de      	b.n	800b036 <_strtol_l.constprop.0+0x72>
 800b078:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b07c:	2f19      	cmp	r7, #25
 800b07e:	d804      	bhi.n	800b08a <_strtol_l.constprop.0+0xc6>
 800b080:	3c57      	subs	r4, #87	@ 0x57
 800b082:	e7d8      	b.n	800b036 <_strtol_l.constprop.0+0x72>
 800b084:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b088:	e7e1      	b.n	800b04e <_strtol_l.constprop.0+0x8a>
 800b08a:	1c53      	adds	r3, r2, #1
 800b08c:	d108      	bne.n	800b0a0 <_strtol_l.constprop.0+0xdc>
 800b08e:	2322      	movs	r3, #34	@ 0x22
 800b090:	4660      	mov	r0, ip
 800b092:	f8ce 3000 	str.w	r3, [lr]
 800b096:	f1b8 0f00 	cmp.w	r8, #0
 800b09a:	d0a0      	beq.n	800afde <_strtol_l.constprop.0+0x1a>
 800b09c:	1e69      	subs	r1, r5, #1
 800b09e:	e006      	b.n	800b0ae <_strtol_l.constprop.0+0xea>
 800b0a0:	b106      	cbz	r6, 800b0a4 <_strtol_l.constprop.0+0xe0>
 800b0a2:	4240      	negs	r0, r0
 800b0a4:	f1b8 0f00 	cmp.w	r8, #0
 800b0a8:	d099      	beq.n	800afde <_strtol_l.constprop.0+0x1a>
 800b0aa:	2a00      	cmp	r2, #0
 800b0ac:	d1f6      	bne.n	800b09c <_strtol_l.constprop.0+0xd8>
 800b0ae:	f8c8 1000 	str.w	r1, [r8]
 800b0b2:	e794      	b.n	800afde <_strtol_l.constprop.0+0x1a>
 800b0b4:	0800dd59 	.word	0x0800dd59

0800b0b8 <_strtol_r>:
 800b0b8:	f7ff bf84 	b.w	800afc4 <_strtol_l.constprop.0>

0800b0bc <_fwalk_sglue>:
 800b0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	4688      	mov	r8, r1
 800b0c4:	4614      	mov	r4, r2
 800b0c6:	2600      	movs	r6, #0
 800b0c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0cc:	f1b9 0901 	subs.w	r9, r9, #1
 800b0d0:	d505      	bpl.n	800b0de <_fwalk_sglue+0x22>
 800b0d2:	6824      	ldr	r4, [r4, #0]
 800b0d4:	2c00      	cmp	r4, #0
 800b0d6:	d1f7      	bne.n	800b0c8 <_fwalk_sglue+0xc>
 800b0d8:	4630      	mov	r0, r6
 800b0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0de:	89ab      	ldrh	r3, [r5, #12]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d907      	bls.n	800b0f4 <_fwalk_sglue+0x38>
 800b0e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	d003      	beq.n	800b0f4 <_fwalk_sglue+0x38>
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	47c0      	blx	r8
 800b0f2:	4306      	orrs	r6, r0
 800b0f4:	3568      	adds	r5, #104	@ 0x68
 800b0f6:	e7e9      	b.n	800b0cc <_fwalk_sglue+0x10>

0800b0f8 <strncmp>:
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	b16a      	cbz	r2, 800b118 <strncmp+0x20>
 800b0fc:	3901      	subs	r1, #1
 800b0fe:	1884      	adds	r4, r0, r2
 800b100:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b104:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b108:	429a      	cmp	r2, r3
 800b10a:	d103      	bne.n	800b114 <strncmp+0x1c>
 800b10c:	42a0      	cmp	r0, r4
 800b10e:	d001      	beq.n	800b114 <strncmp+0x1c>
 800b110:	2a00      	cmp	r2, #0
 800b112:	d1f5      	bne.n	800b100 <strncmp+0x8>
 800b114:	1ad0      	subs	r0, r2, r3
 800b116:	bd10      	pop	{r4, pc}
 800b118:	4610      	mov	r0, r2
 800b11a:	e7fc      	b.n	800b116 <strncmp+0x1e>

0800b11c <memset>:
 800b11c:	4603      	mov	r3, r0
 800b11e:	4402      	add	r2, r0
 800b120:	4293      	cmp	r3, r2
 800b122:	d100      	bne.n	800b126 <memset+0xa>
 800b124:	4770      	bx	lr
 800b126:	f803 1b01 	strb.w	r1, [r3], #1
 800b12a:	e7f9      	b.n	800b120 <memset+0x4>

0800b12c <_localeconv_r>:
 800b12c:	4800      	ldr	r0, [pc, #0]	@ (800b130 <_localeconv_r+0x4>)
 800b12e:	4770      	bx	lr
 800b130:	20000284 	.word	0x20000284

0800b134 <__errno>:
 800b134:	4b01      	ldr	r3, [pc, #4]	@ (800b13c <__errno+0x8>)
 800b136:	6818      	ldr	r0, [r3, #0]
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	20000300 	.word	0x20000300

0800b140 <__libc_init_array>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	2600      	movs	r6, #0
 800b144:	4d0c      	ldr	r5, [pc, #48]	@ (800b178 <__libc_init_array+0x38>)
 800b146:	4c0d      	ldr	r4, [pc, #52]	@ (800b17c <__libc_init_array+0x3c>)
 800b148:	1b64      	subs	r4, r4, r5
 800b14a:	10a4      	asrs	r4, r4, #2
 800b14c:	42a6      	cmp	r6, r4
 800b14e:	d109      	bne.n	800b164 <__libc_init_array+0x24>
 800b150:	f002 fd60 	bl	800dc14 <_init>
 800b154:	2600      	movs	r6, #0
 800b156:	4d0a      	ldr	r5, [pc, #40]	@ (800b180 <__libc_init_array+0x40>)
 800b158:	4c0a      	ldr	r4, [pc, #40]	@ (800b184 <__libc_init_array+0x44>)
 800b15a:	1b64      	subs	r4, r4, r5
 800b15c:	10a4      	asrs	r4, r4, #2
 800b15e:	42a6      	cmp	r6, r4
 800b160:	d105      	bne.n	800b16e <__libc_init_array+0x2e>
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	f855 3b04 	ldr.w	r3, [r5], #4
 800b168:	4798      	blx	r3
 800b16a:	3601      	adds	r6, #1
 800b16c:	e7ee      	b.n	800b14c <__libc_init_array+0xc>
 800b16e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b172:	4798      	blx	r3
 800b174:	3601      	adds	r6, #1
 800b176:	e7f2      	b.n	800b15e <__libc_init_array+0x1e>
 800b178:	0800e0f4 	.word	0x0800e0f4
 800b17c:	0800e0f4 	.word	0x0800e0f4
 800b180:	0800e0f4 	.word	0x0800e0f4
 800b184:	0800e0f8 	.word	0x0800e0f8

0800b188 <__retarget_lock_init_recursive>:
 800b188:	4770      	bx	lr

0800b18a <__retarget_lock_acquire_recursive>:
 800b18a:	4770      	bx	lr

0800b18c <__retarget_lock_release_recursive>:
 800b18c:	4770      	bx	lr

0800b18e <memchr>:
 800b18e:	4603      	mov	r3, r0
 800b190:	b510      	push	{r4, lr}
 800b192:	b2c9      	uxtb	r1, r1
 800b194:	4402      	add	r2, r0
 800b196:	4293      	cmp	r3, r2
 800b198:	4618      	mov	r0, r3
 800b19a:	d101      	bne.n	800b1a0 <memchr+0x12>
 800b19c:	2000      	movs	r0, #0
 800b19e:	e003      	b.n	800b1a8 <memchr+0x1a>
 800b1a0:	7804      	ldrb	r4, [r0, #0]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	428c      	cmp	r4, r1
 800b1a6:	d1f6      	bne.n	800b196 <memchr+0x8>
 800b1a8:	bd10      	pop	{r4, pc}

0800b1aa <memcpy>:
 800b1aa:	440a      	add	r2, r1
 800b1ac:	4291      	cmp	r1, r2
 800b1ae:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b1b2:	d100      	bne.n	800b1b6 <memcpy+0xc>
 800b1b4:	4770      	bx	lr
 800b1b6:	b510      	push	{r4, lr}
 800b1b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1bc:	4291      	cmp	r1, r2
 800b1be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1c2:	d1f9      	bne.n	800b1b8 <memcpy+0xe>
 800b1c4:	bd10      	pop	{r4, pc}
	...

0800b1c8 <nan>:
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	4901      	ldr	r1, [pc, #4]	@ (800b1d0 <nan+0x8>)
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	7ff80000 	.word	0x7ff80000

0800b1d4 <nanf>:
 800b1d4:	4800      	ldr	r0, [pc, #0]	@ (800b1d8 <nanf+0x4>)
 800b1d6:	4770      	bx	lr
 800b1d8:	7fc00000 	.word	0x7fc00000

0800b1dc <quorem>:
 800b1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e0:	6903      	ldr	r3, [r0, #16]
 800b1e2:	690c      	ldr	r4, [r1, #16]
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	42a3      	cmp	r3, r4
 800b1e8:	db7e      	blt.n	800b2e8 <quorem+0x10c>
 800b1ea:	3c01      	subs	r4, #1
 800b1ec:	00a3      	lsls	r3, r4, #2
 800b1ee:	f100 0514 	add.w	r5, r0, #20
 800b1f2:	f101 0814 	add.w	r8, r1, #20
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1fc:	9301      	str	r3, [sp, #4]
 800b1fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b206:	3301      	adds	r3, #1
 800b208:	429a      	cmp	r2, r3
 800b20a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b20e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b212:	d32e      	bcc.n	800b272 <quorem+0x96>
 800b214:	f04f 0a00 	mov.w	sl, #0
 800b218:	46c4      	mov	ip, r8
 800b21a:	46ae      	mov	lr, r5
 800b21c:	46d3      	mov	fp, sl
 800b21e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b222:	b298      	uxth	r0, r3
 800b224:	fb06 a000 	mla	r0, r6, r0, sl
 800b228:	0c1b      	lsrs	r3, r3, #16
 800b22a:	0c02      	lsrs	r2, r0, #16
 800b22c:	fb06 2303 	mla	r3, r6, r3, r2
 800b230:	f8de 2000 	ldr.w	r2, [lr]
 800b234:	b280      	uxth	r0, r0
 800b236:	b292      	uxth	r2, r2
 800b238:	1a12      	subs	r2, r2, r0
 800b23a:	445a      	add	r2, fp
 800b23c:	f8de 0000 	ldr.w	r0, [lr]
 800b240:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b244:	b29b      	uxth	r3, r3
 800b246:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b24a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b24e:	b292      	uxth	r2, r2
 800b250:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b254:	45e1      	cmp	r9, ip
 800b256:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b25a:	f84e 2b04 	str.w	r2, [lr], #4
 800b25e:	d2de      	bcs.n	800b21e <quorem+0x42>
 800b260:	9b00      	ldr	r3, [sp, #0]
 800b262:	58eb      	ldr	r3, [r5, r3]
 800b264:	b92b      	cbnz	r3, 800b272 <quorem+0x96>
 800b266:	9b01      	ldr	r3, [sp, #4]
 800b268:	3b04      	subs	r3, #4
 800b26a:	429d      	cmp	r5, r3
 800b26c:	461a      	mov	r2, r3
 800b26e:	d32f      	bcc.n	800b2d0 <quorem+0xf4>
 800b270:	613c      	str	r4, [r7, #16]
 800b272:	4638      	mov	r0, r7
 800b274:	f001 fec6 	bl	800d004 <__mcmp>
 800b278:	2800      	cmp	r0, #0
 800b27a:	db25      	blt.n	800b2c8 <quorem+0xec>
 800b27c:	4629      	mov	r1, r5
 800b27e:	2000      	movs	r0, #0
 800b280:	f858 2b04 	ldr.w	r2, [r8], #4
 800b284:	f8d1 c000 	ldr.w	ip, [r1]
 800b288:	fa1f fe82 	uxth.w	lr, r2
 800b28c:	fa1f f38c 	uxth.w	r3, ip
 800b290:	eba3 030e 	sub.w	r3, r3, lr
 800b294:	4403      	add	r3, r0
 800b296:	0c12      	lsrs	r2, r2, #16
 800b298:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b29c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2a6:	45c1      	cmp	r9, r8
 800b2a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b2ac:	f841 3b04 	str.w	r3, [r1], #4
 800b2b0:	d2e6      	bcs.n	800b280 <quorem+0xa4>
 800b2b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2ba:	b922      	cbnz	r2, 800b2c6 <quorem+0xea>
 800b2bc:	3b04      	subs	r3, #4
 800b2be:	429d      	cmp	r5, r3
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	d30b      	bcc.n	800b2dc <quorem+0x100>
 800b2c4:	613c      	str	r4, [r7, #16]
 800b2c6:	3601      	adds	r6, #1
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	b003      	add	sp, #12
 800b2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d0:	6812      	ldr	r2, [r2, #0]
 800b2d2:	3b04      	subs	r3, #4
 800b2d4:	2a00      	cmp	r2, #0
 800b2d6:	d1cb      	bne.n	800b270 <quorem+0x94>
 800b2d8:	3c01      	subs	r4, #1
 800b2da:	e7c6      	b.n	800b26a <quorem+0x8e>
 800b2dc:	6812      	ldr	r2, [r2, #0]
 800b2de:	3b04      	subs	r3, #4
 800b2e0:	2a00      	cmp	r2, #0
 800b2e2:	d1ef      	bne.n	800b2c4 <quorem+0xe8>
 800b2e4:	3c01      	subs	r4, #1
 800b2e6:	e7ea      	b.n	800b2be <quorem+0xe2>
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e7ee      	b.n	800b2ca <quorem+0xee>
 800b2ec:	0000      	movs	r0, r0
	...

0800b2f0 <_dtoa_r>:
 800b2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	4614      	mov	r4, r2
 800b2f6:	461d      	mov	r5, r3
 800b2f8:	69c7      	ldr	r7, [r0, #28]
 800b2fa:	b097      	sub	sp, #92	@ 0x5c
 800b2fc:	4683      	mov	fp, r0
 800b2fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b302:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b304:	b97f      	cbnz	r7, 800b326 <_dtoa_r+0x36>
 800b306:	2010      	movs	r0, #16
 800b308:	f001 fa4a 	bl	800c7a0 <malloc>
 800b30c:	4602      	mov	r2, r0
 800b30e:	f8cb 001c 	str.w	r0, [fp, #28]
 800b312:	b920      	cbnz	r0, 800b31e <_dtoa_r+0x2e>
 800b314:	21ef      	movs	r1, #239	@ 0xef
 800b316:	4ba8      	ldr	r3, [pc, #672]	@ (800b5b8 <_dtoa_r+0x2c8>)
 800b318:	48a8      	ldr	r0, [pc, #672]	@ (800b5bc <_dtoa_r+0x2cc>)
 800b31a:	f002 f945 	bl	800d5a8 <__assert_func>
 800b31e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b322:	6007      	str	r7, [r0, #0]
 800b324:	60c7      	str	r7, [r0, #12]
 800b326:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b32a:	6819      	ldr	r1, [r3, #0]
 800b32c:	b159      	cbz	r1, 800b346 <_dtoa_r+0x56>
 800b32e:	685a      	ldr	r2, [r3, #4]
 800b330:	2301      	movs	r3, #1
 800b332:	4093      	lsls	r3, r2
 800b334:	604a      	str	r2, [r1, #4]
 800b336:	608b      	str	r3, [r1, #8]
 800b338:	4658      	mov	r0, fp
 800b33a:	f001 fbe1 	bl	800cb00 <_Bfree>
 800b33e:	2200      	movs	r2, #0
 800b340:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b344:	601a      	str	r2, [r3, #0]
 800b346:	1e2b      	subs	r3, r5, #0
 800b348:	bfaf      	iteee	ge
 800b34a:	2300      	movge	r3, #0
 800b34c:	2201      	movlt	r2, #1
 800b34e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b352:	9303      	strlt	r3, [sp, #12]
 800b354:	bfa8      	it	ge
 800b356:	6033      	strge	r3, [r6, #0]
 800b358:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b35c:	4b98      	ldr	r3, [pc, #608]	@ (800b5c0 <_dtoa_r+0x2d0>)
 800b35e:	bfb8      	it	lt
 800b360:	6032      	strlt	r2, [r6, #0]
 800b362:	ea33 0308 	bics.w	r3, r3, r8
 800b366:	d112      	bne.n	800b38e <_dtoa_r+0x9e>
 800b368:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b36c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b374:	4323      	orrs	r3, r4
 800b376:	f000 8550 	beq.w	800be1a <_dtoa_r+0xb2a>
 800b37a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b37c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b5c4 <_dtoa_r+0x2d4>
 800b380:	2b00      	cmp	r3, #0
 800b382:	f000 8552 	beq.w	800be2a <_dtoa_r+0xb3a>
 800b386:	f10a 0303 	add.w	r3, sl, #3
 800b38a:	f000 bd4c 	b.w	800be26 <_dtoa_r+0xb36>
 800b38e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b392:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b39a:	2200      	movs	r2, #0
 800b39c:	2300      	movs	r3, #0
 800b39e:	f7f5 fb03 	bl	80009a8 <__aeabi_dcmpeq>
 800b3a2:	4607      	mov	r7, r0
 800b3a4:	b158      	cbz	r0, 800b3be <_dtoa_r+0xce>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b3aa:	6013      	str	r3, [r2, #0]
 800b3ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b3ae:	b113      	cbz	r3, 800b3b6 <_dtoa_r+0xc6>
 800b3b0:	4b85      	ldr	r3, [pc, #532]	@ (800b5c8 <_dtoa_r+0x2d8>)
 800b3b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b3b4:	6013      	str	r3, [r2, #0]
 800b3b6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b5cc <_dtoa_r+0x2dc>
 800b3ba:	f000 bd36 	b.w	800be2a <_dtoa_r+0xb3a>
 800b3be:	ab14      	add	r3, sp, #80	@ 0x50
 800b3c0:	9301      	str	r3, [sp, #4]
 800b3c2:	ab15      	add	r3, sp, #84	@ 0x54
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	4658      	mov	r0, fp
 800b3c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b3cc:	f001 ff32 	bl	800d234 <__d2b>
 800b3d0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b3d4:	4681      	mov	r9, r0
 800b3d6:	2e00      	cmp	r6, #0
 800b3d8:	d077      	beq.n	800b4ca <_dtoa_r+0x1da>
 800b3da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3e0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b3e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3e8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b3ec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b3f0:	9712      	str	r7, [sp, #72]	@ 0x48
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	4b76      	ldr	r3, [pc, #472]	@ (800b5d0 <_dtoa_r+0x2e0>)
 800b3f8:	f7f4 feb6 	bl	8000168 <__aeabi_dsub>
 800b3fc:	a368      	add	r3, pc, #416	@ (adr r3, 800b5a0 <_dtoa_r+0x2b0>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f7f5 f869 	bl	80004d8 <__aeabi_dmul>
 800b406:	a368      	add	r3, pc, #416	@ (adr r3, 800b5a8 <_dtoa_r+0x2b8>)
 800b408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40c:	f7f4 feae 	bl	800016c <__adddf3>
 800b410:	4604      	mov	r4, r0
 800b412:	4630      	mov	r0, r6
 800b414:	460d      	mov	r5, r1
 800b416:	f7f4 fff5 	bl	8000404 <__aeabi_i2d>
 800b41a:	a365      	add	r3, pc, #404	@ (adr r3, 800b5b0 <_dtoa_r+0x2c0>)
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	f7f5 f85a 	bl	80004d8 <__aeabi_dmul>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	4620      	mov	r0, r4
 800b42a:	4629      	mov	r1, r5
 800b42c:	f7f4 fe9e 	bl	800016c <__adddf3>
 800b430:	4604      	mov	r4, r0
 800b432:	460d      	mov	r5, r1
 800b434:	f7f5 fb00 	bl	8000a38 <__aeabi_d2iz>
 800b438:	2200      	movs	r2, #0
 800b43a:	4607      	mov	r7, r0
 800b43c:	2300      	movs	r3, #0
 800b43e:	4620      	mov	r0, r4
 800b440:	4629      	mov	r1, r5
 800b442:	f7f5 fabb 	bl	80009bc <__aeabi_dcmplt>
 800b446:	b140      	cbz	r0, 800b45a <_dtoa_r+0x16a>
 800b448:	4638      	mov	r0, r7
 800b44a:	f7f4 ffdb 	bl	8000404 <__aeabi_i2d>
 800b44e:	4622      	mov	r2, r4
 800b450:	462b      	mov	r3, r5
 800b452:	f7f5 faa9 	bl	80009a8 <__aeabi_dcmpeq>
 800b456:	b900      	cbnz	r0, 800b45a <_dtoa_r+0x16a>
 800b458:	3f01      	subs	r7, #1
 800b45a:	2f16      	cmp	r7, #22
 800b45c:	d853      	bhi.n	800b506 <_dtoa_r+0x216>
 800b45e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b462:	4b5c      	ldr	r3, [pc, #368]	@ (800b5d4 <_dtoa_r+0x2e4>)
 800b464:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f7f5 faa6 	bl	80009bc <__aeabi_dcmplt>
 800b470:	2800      	cmp	r0, #0
 800b472:	d04a      	beq.n	800b50a <_dtoa_r+0x21a>
 800b474:	2300      	movs	r3, #0
 800b476:	3f01      	subs	r7, #1
 800b478:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b47a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b47c:	1b9b      	subs	r3, r3, r6
 800b47e:	1e5a      	subs	r2, r3, #1
 800b480:	bf46      	itte	mi
 800b482:	f1c3 0801 	rsbmi	r8, r3, #1
 800b486:	2300      	movmi	r3, #0
 800b488:	f04f 0800 	movpl.w	r8, #0
 800b48c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b48e:	bf48      	it	mi
 800b490:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b492:	2f00      	cmp	r7, #0
 800b494:	db3b      	blt.n	800b50e <_dtoa_r+0x21e>
 800b496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b498:	970e      	str	r7, [sp, #56]	@ 0x38
 800b49a:	443b      	add	r3, r7
 800b49c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b49e:	2300      	movs	r3, #0
 800b4a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b4a4:	2b09      	cmp	r3, #9
 800b4a6:	d866      	bhi.n	800b576 <_dtoa_r+0x286>
 800b4a8:	2b05      	cmp	r3, #5
 800b4aa:	bfc4      	itt	gt
 800b4ac:	3b04      	subgt	r3, #4
 800b4ae:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b4b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b4b2:	bfc8      	it	gt
 800b4b4:	2400      	movgt	r4, #0
 800b4b6:	f1a3 0302 	sub.w	r3, r3, #2
 800b4ba:	bfd8      	it	le
 800b4bc:	2401      	movle	r4, #1
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	d864      	bhi.n	800b58c <_dtoa_r+0x29c>
 800b4c2:	e8df f003 	tbb	[pc, r3]
 800b4c6:	382b      	.short	0x382b
 800b4c8:	5636      	.short	0x5636
 800b4ca:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b4ce:	441e      	add	r6, r3
 800b4d0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b4d4:	2b20      	cmp	r3, #32
 800b4d6:	bfc1      	itttt	gt
 800b4d8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b4dc:	fa08 f803 	lslgt.w	r8, r8, r3
 800b4e0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b4e4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b4e8:	bfd6      	itet	le
 800b4ea:	f1c3 0320 	rsble	r3, r3, #32
 800b4ee:	ea48 0003 	orrgt.w	r0, r8, r3
 800b4f2:	fa04 f003 	lslle.w	r0, r4, r3
 800b4f6:	f7f4 ff75 	bl	80003e4 <__aeabi_ui2d>
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b500:	3e01      	subs	r6, #1
 800b502:	9212      	str	r2, [sp, #72]	@ 0x48
 800b504:	e775      	b.n	800b3f2 <_dtoa_r+0x102>
 800b506:	2301      	movs	r3, #1
 800b508:	e7b6      	b.n	800b478 <_dtoa_r+0x188>
 800b50a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b50c:	e7b5      	b.n	800b47a <_dtoa_r+0x18a>
 800b50e:	427b      	negs	r3, r7
 800b510:	930a      	str	r3, [sp, #40]	@ 0x28
 800b512:	2300      	movs	r3, #0
 800b514:	eba8 0807 	sub.w	r8, r8, r7
 800b518:	930e      	str	r3, [sp, #56]	@ 0x38
 800b51a:	e7c2      	b.n	800b4a2 <_dtoa_r+0x1b2>
 800b51c:	2300      	movs	r3, #0
 800b51e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b520:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b522:	2b00      	cmp	r3, #0
 800b524:	dc35      	bgt.n	800b592 <_dtoa_r+0x2a2>
 800b526:	2301      	movs	r3, #1
 800b528:	461a      	mov	r2, r3
 800b52a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b52e:	9221      	str	r2, [sp, #132]	@ 0x84
 800b530:	e00b      	b.n	800b54a <_dtoa_r+0x25a>
 800b532:	2301      	movs	r3, #1
 800b534:	e7f3      	b.n	800b51e <_dtoa_r+0x22e>
 800b536:	2300      	movs	r3, #0
 800b538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b53a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b53c:	18fb      	adds	r3, r7, r3
 800b53e:	9308      	str	r3, [sp, #32]
 800b540:	3301      	adds	r3, #1
 800b542:	2b01      	cmp	r3, #1
 800b544:	9307      	str	r3, [sp, #28]
 800b546:	bfb8      	it	lt
 800b548:	2301      	movlt	r3, #1
 800b54a:	2100      	movs	r1, #0
 800b54c:	2204      	movs	r2, #4
 800b54e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b552:	f102 0514 	add.w	r5, r2, #20
 800b556:	429d      	cmp	r5, r3
 800b558:	d91f      	bls.n	800b59a <_dtoa_r+0x2aa>
 800b55a:	6041      	str	r1, [r0, #4]
 800b55c:	4658      	mov	r0, fp
 800b55e:	f001 fa8f 	bl	800ca80 <_Balloc>
 800b562:	4682      	mov	sl, r0
 800b564:	2800      	cmp	r0, #0
 800b566:	d139      	bne.n	800b5dc <_dtoa_r+0x2ec>
 800b568:	4602      	mov	r2, r0
 800b56a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b56e:	4b1a      	ldr	r3, [pc, #104]	@ (800b5d8 <_dtoa_r+0x2e8>)
 800b570:	e6d2      	b.n	800b318 <_dtoa_r+0x28>
 800b572:	2301      	movs	r3, #1
 800b574:	e7e0      	b.n	800b538 <_dtoa_r+0x248>
 800b576:	2401      	movs	r4, #1
 800b578:	2300      	movs	r3, #0
 800b57a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b57c:	9320      	str	r3, [sp, #128]	@ 0x80
 800b57e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b582:	2200      	movs	r2, #0
 800b584:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b588:	2312      	movs	r3, #18
 800b58a:	e7d0      	b.n	800b52e <_dtoa_r+0x23e>
 800b58c:	2301      	movs	r3, #1
 800b58e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b590:	e7f5      	b.n	800b57e <_dtoa_r+0x28e>
 800b592:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b594:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b598:	e7d7      	b.n	800b54a <_dtoa_r+0x25a>
 800b59a:	3101      	adds	r1, #1
 800b59c:	0052      	lsls	r2, r2, #1
 800b59e:	e7d8      	b.n	800b552 <_dtoa_r+0x262>
 800b5a0:	636f4361 	.word	0x636f4361
 800b5a4:	3fd287a7 	.word	0x3fd287a7
 800b5a8:	8b60c8b3 	.word	0x8b60c8b3
 800b5ac:	3fc68a28 	.word	0x3fc68a28
 800b5b0:	509f79fb 	.word	0x509f79fb
 800b5b4:	3fd34413 	.word	0x3fd34413
 800b5b8:	0800de66 	.word	0x0800de66
 800b5bc:	0800de7d 	.word	0x0800de7d
 800b5c0:	7ff00000 	.word	0x7ff00000
 800b5c4:	0800de62 	.word	0x0800de62
 800b5c8:	0800dcd3 	.word	0x0800dcd3
 800b5cc:	0800dcd2 	.word	0x0800dcd2
 800b5d0:	3ff80000 	.word	0x3ff80000
 800b5d4:	0800dfe8 	.word	0x0800dfe8
 800b5d8:	0800ded5 	.word	0x0800ded5
 800b5dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b5e0:	6018      	str	r0, [r3, #0]
 800b5e2:	9b07      	ldr	r3, [sp, #28]
 800b5e4:	2b0e      	cmp	r3, #14
 800b5e6:	f200 80a4 	bhi.w	800b732 <_dtoa_r+0x442>
 800b5ea:	2c00      	cmp	r4, #0
 800b5ec:	f000 80a1 	beq.w	800b732 <_dtoa_r+0x442>
 800b5f0:	2f00      	cmp	r7, #0
 800b5f2:	dd33      	ble.n	800b65c <_dtoa_r+0x36c>
 800b5f4:	4b86      	ldr	r3, [pc, #536]	@ (800b810 <_dtoa_r+0x520>)
 800b5f6:	f007 020f 	and.w	r2, r7, #15
 800b5fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5fe:	05f8      	lsls	r0, r7, #23
 800b600:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b604:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b608:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b60c:	d516      	bpl.n	800b63c <_dtoa_r+0x34c>
 800b60e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b612:	4b80      	ldr	r3, [pc, #512]	@ (800b814 <_dtoa_r+0x524>)
 800b614:	2603      	movs	r6, #3
 800b616:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b61a:	f7f5 f887 	bl	800072c <__aeabi_ddiv>
 800b61e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b622:	f004 040f 	and.w	r4, r4, #15
 800b626:	4d7b      	ldr	r5, [pc, #492]	@ (800b814 <_dtoa_r+0x524>)
 800b628:	b954      	cbnz	r4, 800b640 <_dtoa_r+0x350>
 800b62a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b62e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b632:	f7f5 f87b 	bl	800072c <__aeabi_ddiv>
 800b636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b63a:	e028      	b.n	800b68e <_dtoa_r+0x39e>
 800b63c:	2602      	movs	r6, #2
 800b63e:	e7f2      	b.n	800b626 <_dtoa_r+0x336>
 800b640:	07e1      	lsls	r1, r4, #31
 800b642:	d508      	bpl.n	800b656 <_dtoa_r+0x366>
 800b644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b648:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b64c:	f7f4 ff44 	bl	80004d8 <__aeabi_dmul>
 800b650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b654:	3601      	adds	r6, #1
 800b656:	1064      	asrs	r4, r4, #1
 800b658:	3508      	adds	r5, #8
 800b65a:	e7e5      	b.n	800b628 <_dtoa_r+0x338>
 800b65c:	f000 80d2 	beq.w	800b804 <_dtoa_r+0x514>
 800b660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b664:	427c      	negs	r4, r7
 800b666:	4b6a      	ldr	r3, [pc, #424]	@ (800b810 <_dtoa_r+0x520>)
 800b668:	f004 020f 	and.w	r2, r4, #15
 800b66c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f7f4 ff30 	bl	80004d8 <__aeabi_dmul>
 800b678:	2602      	movs	r6, #2
 800b67a:	2300      	movs	r3, #0
 800b67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b680:	4d64      	ldr	r5, [pc, #400]	@ (800b814 <_dtoa_r+0x524>)
 800b682:	1124      	asrs	r4, r4, #4
 800b684:	2c00      	cmp	r4, #0
 800b686:	f040 80b2 	bne.w	800b7ee <_dtoa_r+0x4fe>
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1d3      	bne.n	800b636 <_dtoa_r+0x346>
 800b68e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b692:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 80b7 	beq.w	800b808 <_dtoa_r+0x518>
 800b69a:	2200      	movs	r2, #0
 800b69c:	4620      	mov	r0, r4
 800b69e:	4629      	mov	r1, r5
 800b6a0:	4b5d      	ldr	r3, [pc, #372]	@ (800b818 <_dtoa_r+0x528>)
 800b6a2:	f7f5 f98b 	bl	80009bc <__aeabi_dcmplt>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	f000 80ae 	beq.w	800b808 <_dtoa_r+0x518>
 800b6ac:	9b07      	ldr	r3, [sp, #28]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f000 80aa 	beq.w	800b808 <_dtoa_r+0x518>
 800b6b4:	9b08      	ldr	r3, [sp, #32]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	dd37      	ble.n	800b72a <_dtoa_r+0x43a>
 800b6ba:	1e7b      	subs	r3, r7, #1
 800b6bc:	4620      	mov	r0, r4
 800b6be:	9304      	str	r3, [sp, #16]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	4b55      	ldr	r3, [pc, #340]	@ (800b81c <_dtoa_r+0x52c>)
 800b6c6:	f7f4 ff07 	bl	80004d8 <__aeabi_dmul>
 800b6ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6ce:	9c08      	ldr	r4, [sp, #32]
 800b6d0:	3601      	adds	r6, #1
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f7f4 fe96 	bl	8000404 <__aeabi_i2d>
 800b6d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6dc:	f7f4 fefc 	bl	80004d8 <__aeabi_dmul>
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	4b4f      	ldr	r3, [pc, #316]	@ (800b820 <_dtoa_r+0x530>)
 800b6e4:	f7f4 fd42 	bl	800016c <__adddf3>
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b6ee:	2c00      	cmp	r4, #0
 800b6f0:	f040 809a 	bne.w	800b828 <_dtoa_r+0x538>
 800b6f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	4b4a      	ldr	r3, [pc, #296]	@ (800b824 <_dtoa_r+0x534>)
 800b6fc:	f7f4 fd34 	bl	8000168 <__aeabi_dsub>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b708:	462a      	mov	r2, r5
 800b70a:	4633      	mov	r3, r6
 800b70c:	f7f5 f974 	bl	80009f8 <__aeabi_dcmpgt>
 800b710:	2800      	cmp	r0, #0
 800b712:	f040 828e 	bne.w	800bc32 <_dtoa_r+0x942>
 800b716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b71a:	462a      	mov	r2, r5
 800b71c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b720:	f7f5 f94c 	bl	80009bc <__aeabi_dcmplt>
 800b724:	2800      	cmp	r0, #0
 800b726:	f040 8127 	bne.w	800b978 <_dtoa_r+0x688>
 800b72a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b72e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b732:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b734:	2b00      	cmp	r3, #0
 800b736:	f2c0 8163 	blt.w	800ba00 <_dtoa_r+0x710>
 800b73a:	2f0e      	cmp	r7, #14
 800b73c:	f300 8160 	bgt.w	800ba00 <_dtoa_r+0x710>
 800b740:	4b33      	ldr	r3, [pc, #204]	@ (800b810 <_dtoa_r+0x520>)
 800b742:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b746:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b74a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b74e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b750:	2b00      	cmp	r3, #0
 800b752:	da03      	bge.n	800b75c <_dtoa_r+0x46c>
 800b754:	9b07      	ldr	r3, [sp, #28]
 800b756:	2b00      	cmp	r3, #0
 800b758:	f340 8100 	ble.w	800b95c <_dtoa_r+0x66c>
 800b75c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b760:	4656      	mov	r6, sl
 800b762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b766:	4620      	mov	r0, r4
 800b768:	4629      	mov	r1, r5
 800b76a:	f7f4 ffdf 	bl	800072c <__aeabi_ddiv>
 800b76e:	f7f5 f963 	bl	8000a38 <__aeabi_d2iz>
 800b772:	4680      	mov	r8, r0
 800b774:	f7f4 fe46 	bl	8000404 <__aeabi_i2d>
 800b778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b77c:	f7f4 feac 	bl	80004d8 <__aeabi_dmul>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	4620      	mov	r0, r4
 800b786:	4629      	mov	r1, r5
 800b788:	f7f4 fcee 	bl	8000168 <__aeabi_dsub>
 800b78c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b790:	9d07      	ldr	r5, [sp, #28]
 800b792:	f806 4b01 	strb.w	r4, [r6], #1
 800b796:	eba6 040a 	sub.w	r4, r6, sl
 800b79a:	42a5      	cmp	r5, r4
 800b79c:	4602      	mov	r2, r0
 800b79e:	460b      	mov	r3, r1
 800b7a0:	f040 8116 	bne.w	800b9d0 <_dtoa_r+0x6e0>
 800b7a4:	f7f4 fce2 	bl	800016c <__adddf3>
 800b7a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7ac:	4604      	mov	r4, r0
 800b7ae:	460d      	mov	r5, r1
 800b7b0:	f7f5 f922 	bl	80009f8 <__aeabi_dcmpgt>
 800b7b4:	2800      	cmp	r0, #0
 800b7b6:	f040 80f8 	bne.w	800b9aa <_dtoa_r+0x6ba>
 800b7ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	f7f5 f8f1 	bl	80009a8 <__aeabi_dcmpeq>
 800b7c6:	b118      	cbz	r0, 800b7d0 <_dtoa_r+0x4e0>
 800b7c8:	f018 0f01 	tst.w	r8, #1
 800b7cc:	f040 80ed 	bne.w	800b9aa <_dtoa_r+0x6ba>
 800b7d0:	4649      	mov	r1, r9
 800b7d2:	4658      	mov	r0, fp
 800b7d4:	f001 f994 	bl	800cb00 <_Bfree>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	7033      	strb	r3, [r6, #0]
 800b7dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b7de:	3701      	adds	r7, #1
 800b7e0:	601f      	str	r7, [r3, #0]
 800b7e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f000 8320 	beq.w	800be2a <_dtoa_r+0xb3a>
 800b7ea:	601e      	str	r6, [r3, #0]
 800b7ec:	e31d      	b.n	800be2a <_dtoa_r+0xb3a>
 800b7ee:	07e2      	lsls	r2, r4, #31
 800b7f0:	d505      	bpl.n	800b7fe <_dtoa_r+0x50e>
 800b7f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b7f6:	f7f4 fe6f 	bl	80004d8 <__aeabi_dmul>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	3601      	adds	r6, #1
 800b7fe:	1064      	asrs	r4, r4, #1
 800b800:	3508      	adds	r5, #8
 800b802:	e73f      	b.n	800b684 <_dtoa_r+0x394>
 800b804:	2602      	movs	r6, #2
 800b806:	e742      	b.n	800b68e <_dtoa_r+0x39e>
 800b808:	9c07      	ldr	r4, [sp, #28]
 800b80a:	9704      	str	r7, [sp, #16]
 800b80c:	e761      	b.n	800b6d2 <_dtoa_r+0x3e2>
 800b80e:	bf00      	nop
 800b810:	0800dfe8 	.word	0x0800dfe8
 800b814:	0800dfc0 	.word	0x0800dfc0
 800b818:	3ff00000 	.word	0x3ff00000
 800b81c:	40240000 	.word	0x40240000
 800b820:	401c0000 	.word	0x401c0000
 800b824:	40140000 	.word	0x40140000
 800b828:	4b70      	ldr	r3, [pc, #448]	@ (800b9ec <_dtoa_r+0x6fc>)
 800b82a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b82c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b830:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b834:	4454      	add	r4, sl
 800b836:	2900      	cmp	r1, #0
 800b838:	d045      	beq.n	800b8c6 <_dtoa_r+0x5d6>
 800b83a:	2000      	movs	r0, #0
 800b83c:	496c      	ldr	r1, [pc, #432]	@ (800b9f0 <_dtoa_r+0x700>)
 800b83e:	f7f4 ff75 	bl	800072c <__aeabi_ddiv>
 800b842:	4633      	mov	r3, r6
 800b844:	462a      	mov	r2, r5
 800b846:	f7f4 fc8f 	bl	8000168 <__aeabi_dsub>
 800b84a:	4656      	mov	r6, sl
 800b84c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b850:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b854:	f7f5 f8f0 	bl	8000a38 <__aeabi_d2iz>
 800b858:	4605      	mov	r5, r0
 800b85a:	f7f4 fdd3 	bl	8000404 <__aeabi_i2d>
 800b85e:	4602      	mov	r2, r0
 800b860:	460b      	mov	r3, r1
 800b862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b866:	f7f4 fc7f 	bl	8000168 <__aeabi_dsub>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	3530      	adds	r5, #48	@ 0x30
 800b870:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b874:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b878:	f806 5b01 	strb.w	r5, [r6], #1
 800b87c:	f7f5 f89e 	bl	80009bc <__aeabi_dcmplt>
 800b880:	2800      	cmp	r0, #0
 800b882:	d163      	bne.n	800b94c <_dtoa_r+0x65c>
 800b884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b888:	2000      	movs	r0, #0
 800b88a:	495a      	ldr	r1, [pc, #360]	@ (800b9f4 <_dtoa_r+0x704>)
 800b88c:	f7f4 fc6c 	bl	8000168 <__aeabi_dsub>
 800b890:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b894:	f7f5 f892 	bl	80009bc <__aeabi_dcmplt>
 800b898:	2800      	cmp	r0, #0
 800b89a:	f040 8087 	bne.w	800b9ac <_dtoa_r+0x6bc>
 800b89e:	42a6      	cmp	r6, r4
 800b8a0:	f43f af43 	beq.w	800b72a <_dtoa_r+0x43a>
 800b8a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	4b53      	ldr	r3, [pc, #332]	@ (800b9f8 <_dtoa_r+0x708>)
 800b8ac:	f7f4 fe14 	bl	80004d8 <__aeabi_dmul>
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ba:	4b4f      	ldr	r3, [pc, #316]	@ (800b9f8 <_dtoa_r+0x708>)
 800b8bc:	f7f4 fe0c 	bl	80004d8 <__aeabi_dmul>
 800b8c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8c4:	e7c4      	b.n	800b850 <_dtoa_r+0x560>
 800b8c6:	4631      	mov	r1, r6
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	f7f4 fe05 	bl	80004d8 <__aeabi_dmul>
 800b8ce:	4656      	mov	r6, sl
 800b8d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b8d4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b8d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8da:	f7f5 f8ad 	bl	8000a38 <__aeabi_d2iz>
 800b8de:	4605      	mov	r5, r0
 800b8e0:	f7f4 fd90 	bl	8000404 <__aeabi_i2d>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ec:	f7f4 fc3c 	bl	8000168 <__aeabi_dsub>
 800b8f0:	4602      	mov	r2, r0
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	3530      	adds	r5, #48	@ 0x30
 800b8f6:	f806 5b01 	strb.w	r5, [r6], #1
 800b8fa:	42a6      	cmp	r6, r4
 800b8fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b900:	f04f 0200 	mov.w	r2, #0
 800b904:	d124      	bne.n	800b950 <_dtoa_r+0x660>
 800b906:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b90a:	4b39      	ldr	r3, [pc, #228]	@ (800b9f0 <_dtoa_r+0x700>)
 800b90c:	f7f4 fc2e 	bl	800016c <__adddf3>
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b918:	f7f5 f86e 	bl	80009f8 <__aeabi_dcmpgt>
 800b91c:	2800      	cmp	r0, #0
 800b91e:	d145      	bne.n	800b9ac <_dtoa_r+0x6bc>
 800b920:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b924:	2000      	movs	r0, #0
 800b926:	4932      	ldr	r1, [pc, #200]	@ (800b9f0 <_dtoa_r+0x700>)
 800b928:	f7f4 fc1e 	bl	8000168 <__aeabi_dsub>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b934:	f7f5 f842 	bl	80009bc <__aeabi_dcmplt>
 800b938:	2800      	cmp	r0, #0
 800b93a:	f43f aef6 	beq.w	800b72a <_dtoa_r+0x43a>
 800b93e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b940:	1e73      	subs	r3, r6, #1
 800b942:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b944:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b948:	2b30      	cmp	r3, #48	@ 0x30
 800b94a:	d0f8      	beq.n	800b93e <_dtoa_r+0x64e>
 800b94c:	9f04      	ldr	r7, [sp, #16]
 800b94e:	e73f      	b.n	800b7d0 <_dtoa_r+0x4e0>
 800b950:	4b29      	ldr	r3, [pc, #164]	@ (800b9f8 <_dtoa_r+0x708>)
 800b952:	f7f4 fdc1 	bl	80004d8 <__aeabi_dmul>
 800b956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b95a:	e7bc      	b.n	800b8d6 <_dtoa_r+0x5e6>
 800b95c:	d10c      	bne.n	800b978 <_dtoa_r+0x688>
 800b95e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b962:	2200      	movs	r2, #0
 800b964:	4b25      	ldr	r3, [pc, #148]	@ (800b9fc <_dtoa_r+0x70c>)
 800b966:	f7f4 fdb7 	bl	80004d8 <__aeabi_dmul>
 800b96a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b96e:	f7f5 f839 	bl	80009e4 <__aeabi_dcmpge>
 800b972:	2800      	cmp	r0, #0
 800b974:	f000 815b 	beq.w	800bc2e <_dtoa_r+0x93e>
 800b978:	2400      	movs	r4, #0
 800b97a:	4625      	mov	r5, r4
 800b97c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b97e:	4656      	mov	r6, sl
 800b980:	43db      	mvns	r3, r3
 800b982:	9304      	str	r3, [sp, #16]
 800b984:	2700      	movs	r7, #0
 800b986:	4621      	mov	r1, r4
 800b988:	4658      	mov	r0, fp
 800b98a:	f001 f8b9 	bl	800cb00 <_Bfree>
 800b98e:	2d00      	cmp	r5, #0
 800b990:	d0dc      	beq.n	800b94c <_dtoa_r+0x65c>
 800b992:	b12f      	cbz	r7, 800b9a0 <_dtoa_r+0x6b0>
 800b994:	42af      	cmp	r7, r5
 800b996:	d003      	beq.n	800b9a0 <_dtoa_r+0x6b0>
 800b998:	4639      	mov	r1, r7
 800b99a:	4658      	mov	r0, fp
 800b99c:	f001 f8b0 	bl	800cb00 <_Bfree>
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	4658      	mov	r0, fp
 800b9a4:	f001 f8ac 	bl	800cb00 <_Bfree>
 800b9a8:	e7d0      	b.n	800b94c <_dtoa_r+0x65c>
 800b9aa:	9704      	str	r7, [sp, #16]
 800b9ac:	4633      	mov	r3, r6
 800b9ae:	461e      	mov	r6, r3
 800b9b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9b4:	2a39      	cmp	r2, #57	@ 0x39
 800b9b6:	d107      	bne.n	800b9c8 <_dtoa_r+0x6d8>
 800b9b8:	459a      	cmp	sl, r3
 800b9ba:	d1f8      	bne.n	800b9ae <_dtoa_r+0x6be>
 800b9bc:	9a04      	ldr	r2, [sp, #16]
 800b9be:	3201      	adds	r2, #1
 800b9c0:	9204      	str	r2, [sp, #16]
 800b9c2:	2230      	movs	r2, #48	@ 0x30
 800b9c4:	f88a 2000 	strb.w	r2, [sl]
 800b9c8:	781a      	ldrb	r2, [r3, #0]
 800b9ca:	3201      	adds	r2, #1
 800b9cc:	701a      	strb	r2, [r3, #0]
 800b9ce:	e7bd      	b.n	800b94c <_dtoa_r+0x65c>
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	4b09      	ldr	r3, [pc, #36]	@ (800b9f8 <_dtoa_r+0x708>)
 800b9d4:	f7f4 fd80 	bl	80004d8 <__aeabi_dmul>
 800b9d8:	2200      	movs	r2, #0
 800b9da:	2300      	movs	r3, #0
 800b9dc:	4604      	mov	r4, r0
 800b9de:	460d      	mov	r5, r1
 800b9e0:	f7f4 ffe2 	bl	80009a8 <__aeabi_dcmpeq>
 800b9e4:	2800      	cmp	r0, #0
 800b9e6:	f43f aebc 	beq.w	800b762 <_dtoa_r+0x472>
 800b9ea:	e6f1      	b.n	800b7d0 <_dtoa_r+0x4e0>
 800b9ec:	0800dfe8 	.word	0x0800dfe8
 800b9f0:	3fe00000 	.word	0x3fe00000
 800b9f4:	3ff00000 	.word	0x3ff00000
 800b9f8:	40240000 	.word	0x40240000
 800b9fc:	40140000 	.word	0x40140000
 800ba00:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba02:	2a00      	cmp	r2, #0
 800ba04:	f000 80db 	beq.w	800bbbe <_dtoa_r+0x8ce>
 800ba08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ba0a:	2a01      	cmp	r2, #1
 800ba0c:	f300 80bf 	bgt.w	800bb8e <_dtoa_r+0x89e>
 800ba10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ba12:	2a00      	cmp	r2, #0
 800ba14:	f000 80b7 	beq.w	800bb86 <_dtoa_r+0x896>
 800ba18:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ba1c:	4646      	mov	r6, r8
 800ba1e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba22:	2101      	movs	r1, #1
 800ba24:	441a      	add	r2, r3
 800ba26:	4658      	mov	r0, fp
 800ba28:	4498      	add	r8, r3
 800ba2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba2c:	f001 f966 	bl	800ccfc <__i2b>
 800ba30:	4605      	mov	r5, r0
 800ba32:	b15e      	cbz	r6, 800ba4c <_dtoa_r+0x75c>
 800ba34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	dd08      	ble.n	800ba4c <_dtoa_r+0x75c>
 800ba3a:	42b3      	cmp	r3, r6
 800ba3c:	bfa8      	it	ge
 800ba3e:	4633      	movge	r3, r6
 800ba40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba42:	eba8 0803 	sub.w	r8, r8, r3
 800ba46:	1af6      	subs	r6, r6, r3
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba4e:	b1f3      	cbz	r3, 800ba8e <_dtoa_r+0x79e>
 800ba50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 80b7 	beq.w	800bbc6 <_dtoa_r+0x8d6>
 800ba58:	b18c      	cbz	r4, 800ba7e <_dtoa_r+0x78e>
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	4622      	mov	r2, r4
 800ba5e:	4658      	mov	r0, fp
 800ba60:	f001 fa0a 	bl	800ce78 <__pow5mult>
 800ba64:	464a      	mov	r2, r9
 800ba66:	4601      	mov	r1, r0
 800ba68:	4605      	mov	r5, r0
 800ba6a:	4658      	mov	r0, fp
 800ba6c:	f001 f95c 	bl	800cd28 <__multiply>
 800ba70:	4649      	mov	r1, r9
 800ba72:	9004      	str	r0, [sp, #16]
 800ba74:	4658      	mov	r0, fp
 800ba76:	f001 f843 	bl	800cb00 <_Bfree>
 800ba7a:	9b04      	ldr	r3, [sp, #16]
 800ba7c:	4699      	mov	r9, r3
 800ba7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba80:	1b1a      	subs	r2, r3, r4
 800ba82:	d004      	beq.n	800ba8e <_dtoa_r+0x79e>
 800ba84:	4649      	mov	r1, r9
 800ba86:	4658      	mov	r0, fp
 800ba88:	f001 f9f6 	bl	800ce78 <__pow5mult>
 800ba8c:	4681      	mov	r9, r0
 800ba8e:	2101      	movs	r1, #1
 800ba90:	4658      	mov	r0, fp
 800ba92:	f001 f933 	bl	800ccfc <__i2b>
 800ba96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba98:	4604      	mov	r4, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 81c9 	beq.w	800be32 <_dtoa_r+0xb42>
 800baa0:	461a      	mov	r2, r3
 800baa2:	4601      	mov	r1, r0
 800baa4:	4658      	mov	r0, fp
 800baa6:	f001 f9e7 	bl	800ce78 <__pow5mult>
 800baaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800baac:	4604      	mov	r4, r0
 800baae:	2b01      	cmp	r3, #1
 800bab0:	f300 808f 	bgt.w	800bbd2 <_dtoa_r+0x8e2>
 800bab4:	9b02      	ldr	r3, [sp, #8]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f040 8087 	bne.w	800bbca <_dtoa_r+0x8da>
 800babc:	9b03      	ldr	r3, [sp, #12]
 800babe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f040 8083 	bne.w	800bbce <_dtoa_r+0x8de>
 800bac8:	9b03      	ldr	r3, [sp, #12]
 800baca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bace:	0d1b      	lsrs	r3, r3, #20
 800bad0:	051b      	lsls	r3, r3, #20
 800bad2:	b12b      	cbz	r3, 800bae0 <_dtoa_r+0x7f0>
 800bad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bad6:	f108 0801 	add.w	r8, r8, #1
 800bada:	3301      	adds	r3, #1
 800badc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bade:	2301      	movs	r3, #1
 800bae0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f000 81aa 	beq.w	800be3e <_dtoa_r+0xb4e>
 800baea:	6923      	ldr	r3, [r4, #16]
 800baec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800baf0:	6918      	ldr	r0, [r3, #16]
 800baf2:	f001 f8b7 	bl	800cc64 <__hi0bits>
 800baf6:	f1c0 0020 	rsb	r0, r0, #32
 800bafa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bafc:	4418      	add	r0, r3
 800bafe:	f010 001f 	ands.w	r0, r0, #31
 800bb02:	d071      	beq.n	800bbe8 <_dtoa_r+0x8f8>
 800bb04:	f1c0 0320 	rsb	r3, r0, #32
 800bb08:	2b04      	cmp	r3, #4
 800bb0a:	dd65      	ble.n	800bbd8 <_dtoa_r+0x8e8>
 800bb0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb0e:	f1c0 001c 	rsb	r0, r0, #28
 800bb12:	4403      	add	r3, r0
 800bb14:	4480      	add	r8, r0
 800bb16:	4406      	add	r6, r0
 800bb18:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb1a:	f1b8 0f00 	cmp.w	r8, #0
 800bb1e:	dd05      	ble.n	800bb2c <_dtoa_r+0x83c>
 800bb20:	4649      	mov	r1, r9
 800bb22:	4642      	mov	r2, r8
 800bb24:	4658      	mov	r0, fp
 800bb26:	f001 fa01 	bl	800cf2c <__lshift>
 800bb2a:	4681      	mov	r9, r0
 800bb2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	dd05      	ble.n	800bb3e <_dtoa_r+0x84e>
 800bb32:	4621      	mov	r1, r4
 800bb34:	461a      	mov	r2, r3
 800bb36:	4658      	mov	r0, fp
 800bb38:	f001 f9f8 	bl	800cf2c <__lshift>
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d053      	beq.n	800bbec <_dtoa_r+0x8fc>
 800bb44:	4621      	mov	r1, r4
 800bb46:	4648      	mov	r0, r9
 800bb48:	f001 fa5c 	bl	800d004 <__mcmp>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	da4d      	bge.n	800bbec <_dtoa_r+0x8fc>
 800bb50:	1e7b      	subs	r3, r7, #1
 800bb52:	4649      	mov	r1, r9
 800bb54:	9304      	str	r3, [sp, #16]
 800bb56:	220a      	movs	r2, #10
 800bb58:	2300      	movs	r3, #0
 800bb5a:	4658      	mov	r0, fp
 800bb5c:	f000 fff2 	bl	800cb44 <__multadd>
 800bb60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb62:	4681      	mov	r9, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 816c 	beq.w	800be42 <_dtoa_r+0xb52>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	220a      	movs	r2, #10
 800bb70:	4658      	mov	r0, fp
 800bb72:	f000 ffe7 	bl	800cb44 <__multadd>
 800bb76:	9b08      	ldr	r3, [sp, #32]
 800bb78:	4605      	mov	r5, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	dc61      	bgt.n	800bc42 <_dtoa_r+0x952>
 800bb7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	dc3b      	bgt.n	800bbfc <_dtoa_r+0x90c>
 800bb84:	e05d      	b.n	800bc42 <_dtoa_r+0x952>
 800bb86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb88:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bb8c:	e746      	b.n	800ba1c <_dtoa_r+0x72c>
 800bb8e:	9b07      	ldr	r3, [sp, #28]
 800bb90:	1e5c      	subs	r4, r3, #1
 800bb92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb94:	42a3      	cmp	r3, r4
 800bb96:	bfbf      	itttt	lt
 800bb98:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bb9a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800bb9c:	1ae3      	sublt	r3, r4, r3
 800bb9e:	18d2      	addlt	r2, r2, r3
 800bba0:	bfa8      	it	ge
 800bba2:	1b1c      	subge	r4, r3, r4
 800bba4:	9b07      	ldr	r3, [sp, #28]
 800bba6:	bfbe      	ittt	lt
 800bba8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bbaa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800bbac:	2400      	movlt	r4, #0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	bfb5      	itete	lt
 800bbb2:	eba8 0603 	sublt.w	r6, r8, r3
 800bbb6:	4646      	movge	r6, r8
 800bbb8:	2300      	movlt	r3, #0
 800bbba:	9b07      	ldrge	r3, [sp, #28]
 800bbbc:	e730      	b.n	800ba20 <_dtoa_r+0x730>
 800bbbe:	4646      	mov	r6, r8
 800bbc0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bbc2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bbc4:	e735      	b.n	800ba32 <_dtoa_r+0x742>
 800bbc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bbc8:	e75c      	b.n	800ba84 <_dtoa_r+0x794>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	e788      	b.n	800bae0 <_dtoa_r+0x7f0>
 800bbce:	9b02      	ldr	r3, [sp, #8]
 800bbd0:	e786      	b.n	800bae0 <_dtoa_r+0x7f0>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbd6:	e788      	b.n	800baea <_dtoa_r+0x7fa>
 800bbd8:	d09f      	beq.n	800bb1a <_dtoa_r+0x82a>
 800bbda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbdc:	331c      	adds	r3, #28
 800bbde:	441a      	add	r2, r3
 800bbe0:	4498      	add	r8, r3
 800bbe2:	441e      	add	r6, r3
 800bbe4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbe6:	e798      	b.n	800bb1a <_dtoa_r+0x82a>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	e7f6      	b.n	800bbda <_dtoa_r+0x8ea>
 800bbec:	9b07      	ldr	r3, [sp, #28]
 800bbee:	9704      	str	r7, [sp, #16]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	dc20      	bgt.n	800bc36 <_dtoa_r+0x946>
 800bbf4:	9308      	str	r3, [sp, #32]
 800bbf6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	dd1e      	ble.n	800bc3a <_dtoa_r+0x94a>
 800bbfc:	9b08      	ldr	r3, [sp, #32]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f47f aebc 	bne.w	800b97c <_dtoa_r+0x68c>
 800bc04:	4621      	mov	r1, r4
 800bc06:	2205      	movs	r2, #5
 800bc08:	4658      	mov	r0, fp
 800bc0a:	f000 ff9b 	bl	800cb44 <__multadd>
 800bc0e:	4601      	mov	r1, r0
 800bc10:	4604      	mov	r4, r0
 800bc12:	4648      	mov	r0, r9
 800bc14:	f001 f9f6 	bl	800d004 <__mcmp>
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	f77f aeaf 	ble.w	800b97c <_dtoa_r+0x68c>
 800bc1e:	2331      	movs	r3, #49	@ 0x31
 800bc20:	4656      	mov	r6, sl
 800bc22:	f806 3b01 	strb.w	r3, [r6], #1
 800bc26:	9b04      	ldr	r3, [sp, #16]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	9304      	str	r3, [sp, #16]
 800bc2c:	e6aa      	b.n	800b984 <_dtoa_r+0x694>
 800bc2e:	9c07      	ldr	r4, [sp, #28]
 800bc30:	9704      	str	r7, [sp, #16]
 800bc32:	4625      	mov	r5, r4
 800bc34:	e7f3      	b.n	800bc1e <_dtoa_r+0x92e>
 800bc36:	9b07      	ldr	r3, [sp, #28]
 800bc38:	9308      	str	r3, [sp, #32]
 800bc3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 8104 	beq.w	800be4a <_dtoa_r+0xb5a>
 800bc42:	2e00      	cmp	r6, #0
 800bc44:	dd05      	ble.n	800bc52 <_dtoa_r+0x962>
 800bc46:	4629      	mov	r1, r5
 800bc48:	4632      	mov	r2, r6
 800bc4a:	4658      	mov	r0, fp
 800bc4c:	f001 f96e 	bl	800cf2c <__lshift>
 800bc50:	4605      	mov	r5, r0
 800bc52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d05a      	beq.n	800bd0e <_dtoa_r+0xa1e>
 800bc58:	4658      	mov	r0, fp
 800bc5a:	6869      	ldr	r1, [r5, #4]
 800bc5c:	f000 ff10 	bl	800ca80 <_Balloc>
 800bc60:	4606      	mov	r6, r0
 800bc62:	b928      	cbnz	r0, 800bc70 <_dtoa_r+0x980>
 800bc64:	4602      	mov	r2, r0
 800bc66:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bc6a:	4b83      	ldr	r3, [pc, #524]	@ (800be78 <_dtoa_r+0xb88>)
 800bc6c:	f7ff bb54 	b.w	800b318 <_dtoa_r+0x28>
 800bc70:	692a      	ldr	r2, [r5, #16]
 800bc72:	f105 010c 	add.w	r1, r5, #12
 800bc76:	3202      	adds	r2, #2
 800bc78:	0092      	lsls	r2, r2, #2
 800bc7a:	300c      	adds	r0, #12
 800bc7c:	f7ff fa95 	bl	800b1aa <memcpy>
 800bc80:	2201      	movs	r2, #1
 800bc82:	4631      	mov	r1, r6
 800bc84:	4658      	mov	r0, fp
 800bc86:	f001 f951 	bl	800cf2c <__lshift>
 800bc8a:	462f      	mov	r7, r5
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	f10a 0301 	add.w	r3, sl, #1
 800bc92:	9307      	str	r3, [sp, #28]
 800bc94:	9b08      	ldr	r3, [sp, #32]
 800bc96:	4453      	add	r3, sl
 800bc98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc9a:	9b02      	ldr	r3, [sp, #8]
 800bc9c:	f003 0301 	and.w	r3, r3, #1
 800bca0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bca2:	9b07      	ldr	r3, [sp, #28]
 800bca4:	4621      	mov	r1, r4
 800bca6:	3b01      	subs	r3, #1
 800bca8:	4648      	mov	r0, r9
 800bcaa:	9302      	str	r3, [sp, #8]
 800bcac:	f7ff fa96 	bl	800b1dc <quorem>
 800bcb0:	4639      	mov	r1, r7
 800bcb2:	9008      	str	r0, [sp, #32]
 800bcb4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bcb8:	4648      	mov	r0, r9
 800bcba:	f001 f9a3 	bl	800d004 <__mcmp>
 800bcbe:	462a      	mov	r2, r5
 800bcc0:	9009      	str	r0, [sp, #36]	@ 0x24
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	4658      	mov	r0, fp
 800bcc6:	f001 f9b9 	bl	800d03c <__mdiff>
 800bcca:	68c2      	ldr	r2, [r0, #12]
 800bccc:	4606      	mov	r6, r0
 800bcce:	bb02      	cbnz	r2, 800bd12 <_dtoa_r+0xa22>
 800bcd0:	4601      	mov	r1, r0
 800bcd2:	4648      	mov	r0, r9
 800bcd4:	f001 f996 	bl	800d004 <__mcmp>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4658      	mov	r0, fp
 800bcde:	920c      	str	r2, [sp, #48]	@ 0x30
 800bce0:	f000 ff0e 	bl	800cb00 <_Bfree>
 800bce4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bce6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bce8:	9e07      	ldr	r6, [sp, #28]
 800bcea:	ea43 0102 	orr.w	r1, r3, r2
 800bcee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcf0:	4319      	orrs	r1, r3
 800bcf2:	d110      	bne.n	800bd16 <_dtoa_r+0xa26>
 800bcf4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bcf8:	d029      	beq.n	800bd4e <_dtoa_r+0xa5e>
 800bcfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	dd02      	ble.n	800bd06 <_dtoa_r+0xa16>
 800bd00:	9b08      	ldr	r3, [sp, #32]
 800bd02:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bd06:	9b02      	ldr	r3, [sp, #8]
 800bd08:	f883 8000 	strb.w	r8, [r3]
 800bd0c:	e63b      	b.n	800b986 <_dtoa_r+0x696>
 800bd0e:	4628      	mov	r0, r5
 800bd10:	e7bb      	b.n	800bc8a <_dtoa_r+0x99a>
 800bd12:	2201      	movs	r2, #1
 800bd14:	e7e1      	b.n	800bcda <_dtoa_r+0x9ea>
 800bd16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	db04      	blt.n	800bd26 <_dtoa_r+0xa36>
 800bd1c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800bd1e:	430b      	orrs	r3, r1
 800bd20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd22:	430b      	orrs	r3, r1
 800bd24:	d120      	bne.n	800bd68 <_dtoa_r+0xa78>
 800bd26:	2a00      	cmp	r2, #0
 800bd28:	dded      	ble.n	800bd06 <_dtoa_r+0xa16>
 800bd2a:	4649      	mov	r1, r9
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	4658      	mov	r0, fp
 800bd30:	f001 f8fc 	bl	800cf2c <__lshift>
 800bd34:	4621      	mov	r1, r4
 800bd36:	4681      	mov	r9, r0
 800bd38:	f001 f964 	bl	800d004 <__mcmp>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	dc03      	bgt.n	800bd48 <_dtoa_r+0xa58>
 800bd40:	d1e1      	bne.n	800bd06 <_dtoa_r+0xa16>
 800bd42:	f018 0f01 	tst.w	r8, #1
 800bd46:	d0de      	beq.n	800bd06 <_dtoa_r+0xa16>
 800bd48:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd4c:	d1d8      	bne.n	800bd00 <_dtoa_r+0xa10>
 800bd4e:	2339      	movs	r3, #57	@ 0x39
 800bd50:	9a02      	ldr	r2, [sp, #8]
 800bd52:	7013      	strb	r3, [r2, #0]
 800bd54:	4633      	mov	r3, r6
 800bd56:	461e      	mov	r6, r3
 800bd58:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	2a39      	cmp	r2, #57	@ 0x39
 800bd60:	d052      	beq.n	800be08 <_dtoa_r+0xb18>
 800bd62:	3201      	adds	r2, #1
 800bd64:	701a      	strb	r2, [r3, #0]
 800bd66:	e60e      	b.n	800b986 <_dtoa_r+0x696>
 800bd68:	2a00      	cmp	r2, #0
 800bd6a:	dd07      	ble.n	800bd7c <_dtoa_r+0xa8c>
 800bd6c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bd70:	d0ed      	beq.n	800bd4e <_dtoa_r+0xa5e>
 800bd72:	9a02      	ldr	r2, [sp, #8]
 800bd74:	f108 0301 	add.w	r3, r8, #1
 800bd78:	7013      	strb	r3, [r2, #0]
 800bd7a:	e604      	b.n	800b986 <_dtoa_r+0x696>
 800bd7c:	9b07      	ldr	r3, [sp, #28]
 800bd7e:	9a07      	ldr	r2, [sp, #28]
 800bd80:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bd84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d028      	beq.n	800bddc <_dtoa_r+0xaec>
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	220a      	movs	r2, #10
 800bd90:	4658      	mov	r0, fp
 800bd92:	f000 fed7 	bl	800cb44 <__multadd>
 800bd96:	42af      	cmp	r7, r5
 800bd98:	4681      	mov	r9, r0
 800bd9a:	f04f 0300 	mov.w	r3, #0
 800bd9e:	f04f 020a 	mov.w	r2, #10
 800bda2:	4639      	mov	r1, r7
 800bda4:	4658      	mov	r0, fp
 800bda6:	d107      	bne.n	800bdb8 <_dtoa_r+0xac8>
 800bda8:	f000 fecc 	bl	800cb44 <__multadd>
 800bdac:	4607      	mov	r7, r0
 800bdae:	4605      	mov	r5, r0
 800bdb0:	9b07      	ldr	r3, [sp, #28]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	9307      	str	r3, [sp, #28]
 800bdb6:	e774      	b.n	800bca2 <_dtoa_r+0x9b2>
 800bdb8:	f000 fec4 	bl	800cb44 <__multadd>
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	4607      	mov	r7, r0
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	220a      	movs	r2, #10
 800bdc4:	4658      	mov	r0, fp
 800bdc6:	f000 febd 	bl	800cb44 <__multadd>
 800bdca:	4605      	mov	r5, r0
 800bdcc:	e7f0      	b.n	800bdb0 <_dtoa_r+0xac0>
 800bdce:	9b08      	ldr	r3, [sp, #32]
 800bdd0:	2700      	movs	r7, #0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	bfcc      	ite	gt
 800bdd6:	461e      	movgt	r6, r3
 800bdd8:	2601      	movle	r6, #1
 800bdda:	4456      	add	r6, sl
 800bddc:	4649      	mov	r1, r9
 800bdde:	2201      	movs	r2, #1
 800bde0:	4658      	mov	r0, fp
 800bde2:	f001 f8a3 	bl	800cf2c <__lshift>
 800bde6:	4621      	mov	r1, r4
 800bde8:	4681      	mov	r9, r0
 800bdea:	f001 f90b 	bl	800d004 <__mcmp>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	dcb0      	bgt.n	800bd54 <_dtoa_r+0xa64>
 800bdf2:	d102      	bne.n	800bdfa <_dtoa_r+0xb0a>
 800bdf4:	f018 0f01 	tst.w	r8, #1
 800bdf8:	d1ac      	bne.n	800bd54 <_dtoa_r+0xa64>
 800bdfa:	4633      	mov	r3, r6
 800bdfc:	461e      	mov	r6, r3
 800bdfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be02:	2a30      	cmp	r2, #48	@ 0x30
 800be04:	d0fa      	beq.n	800bdfc <_dtoa_r+0xb0c>
 800be06:	e5be      	b.n	800b986 <_dtoa_r+0x696>
 800be08:	459a      	cmp	sl, r3
 800be0a:	d1a4      	bne.n	800bd56 <_dtoa_r+0xa66>
 800be0c:	9b04      	ldr	r3, [sp, #16]
 800be0e:	3301      	adds	r3, #1
 800be10:	9304      	str	r3, [sp, #16]
 800be12:	2331      	movs	r3, #49	@ 0x31
 800be14:	f88a 3000 	strb.w	r3, [sl]
 800be18:	e5b5      	b.n	800b986 <_dtoa_r+0x696>
 800be1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800be1c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800be7c <_dtoa_r+0xb8c>
 800be20:	b11b      	cbz	r3, 800be2a <_dtoa_r+0xb3a>
 800be22:	f10a 0308 	add.w	r3, sl, #8
 800be26:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800be28:	6013      	str	r3, [r2, #0]
 800be2a:	4650      	mov	r0, sl
 800be2c:	b017      	add	sp, #92	@ 0x5c
 800be2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be34:	2b01      	cmp	r3, #1
 800be36:	f77f ae3d 	ble.w	800bab4 <_dtoa_r+0x7c4>
 800be3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800be3e:	2001      	movs	r0, #1
 800be40:	e65b      	b.n	800bafa <_dtoa_r+0x80a>
 800be42:	9b08      	ldr	r3, [sp, #32]
 800be44:	2b00      	cmp	r3, #0
 800be46:	f77f aed6 	ble.w	800bbf6 <_dtoa_r+0x906>
 800be4a:	4656      	mov	r6, sl
 800be4c:	4621      	mov	r1, r4
 800be4e:	4648      	mov	r0, r9
 800be50:	f7ff f9c4 	bl	800b1dc <quorem>
 800be54:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800be58:	9b08      	ldr	r3, [sp, #32]
 800be5a:	f806 8b01 	strb.w	r8, [r6], #1
 800be5e:	eba6 020a 	sub.w	r2, r6, sl
 800be62:	4293      	cmp	r3, r2
 800be64:	ddb3      	ble.n	800bdce <_dtoa_r+0xade>
 800be66:	4649      	mov	r1, r9
 800be68:	2300      	movs	r3, #0
 800be6a:	220a      	movs	r2, #10
 800be6c:	4658      	mov	r0, fp
 800be6e:	f000 fe69 	bl	800cb44 <__multadd>
 800be72:	4681      	mov	r9, r0
 800be74:	e7ea      	b.n	800be4c <_dtoa_r+0xb5c>
 800be76:	bf00      	nop
 800be78:	0800ded5 	.word	0x0800ded5
 800be7c:	0800de59 	.word	0x0800de59

0800be80 <rshift>:
 800be80:	6903      	ldr	r3, [r0, #16]
 800be82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800be8a:	f100 0414 	add.w	r4, r0, #20
 800be8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800be92:	dd46      	ble.n	800bf22 <rshift+0xa2>
 800be94:	f011 011f 	ands.w	r1, r1, #31
 800be98:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800be9c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bea0:	d10c      	bne.n	800bebc <rshift+0x3c>
 800bea2:	4629      	mov	r1, r5
 800bea4:	f100 0710 	add.w	r7, r0, #16
 800bea8:	42b1      	cmp	r1, r6
 800beaa:	d335      	bcc.n	800bf18 <rshift+0x98>
 800beac:	1a9b      	subs	r3, r3, r2
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	1eea      	subs	r2, r5, #3
 800beb2:	4296      	cmp	r6, r2
 800beb4:	bf38      	it	cc
 800beb6:	2300      	movcc	r3, #0
 800beb8:	4423      	add	r3, r4
 800beba:	e015      	b.n	800bee8 <rshift+0x68>
 800bebc:	46a1      	mov	r9, r4
 800bebe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bec2:	f1c1 0820 	rsb	r8, r1, #32
 800bec6:	40cf      	lsrs	r7, r1
 800bec8:	f105 0e04 	add.w	lr, r5, #4
 800becc:	4576      	cmp	r6, lr
 800bece:	46f4      	mov	ip, lr
 800bed0:	d816      	bhi.n	800bf00 <rshift+0x80>
 800bed2:	1a9a      	subs	r2, r3, r2
 800bed4:	0092      	lsls	r2, r2, #2
 800bed6:	3a04      	subs	r2, #4
 800bed8:	3501      	adds	r5, #1
 800beda:	42ae      	cmp	r6, r5
 800bedc:	bf38      	it	cc
 800bede:	2200      	movcc	r2, #0
 800bee0:	18a3      	adds	r3, r4, r2
 800bee2:	50a7      	str	r7, [r4, r2]
 800bee4:	b107      	cbz	r7, 800bee8 <rshift+0x68>
 800bee6:	3304      	adds	r3, #4
 800bee8:	42a3      	cmp	r3, r4
 800beea:	eba3 0204 	sub.w	r2, r3, r4
 800beee:	bf08      	it	eq
 800bef0:	2300      	moveq	r3, #0
 800bef2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bef6:	6102      	str	r2, [r0, #16]
 800bef8:	bf08      	it	eq
 800befa:	6143      	streq	r3, [r0, #20]
 800befc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf00:	f8dc c000 	ldr.w	ip, [ip]
 800bf04:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf08:	ea4c 0707 	orr.w	r7, ip, r7
 800bf0c:	f849 7b04 	str.w	r7, [r9], #4
 800bf10:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf14:	40cf      	lsrs	r7, r1
 800bf16:	e7d9      	b.n	800becc <rshift+0x4c>
 800bf18:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf1c:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf20:	e7c2      	b.n	800bea8 <rshift+0x28>
 800bf22:	4623      	mov	r3, r4
 800bf24:	e7e0      	b.n	800bee8 <rshift+0x68>

0800bf26 <__hexdig_fun>:
 800bf26:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bf2a:	2b09      	cmp	r3, #9
 800bf2c:	d802      	bhi.n	800bf34 <__hexdig_fun+0xe>
 800bf2e:	3820      	subs	r0, #32
 800bf30:	b2c0      	uxtb	r0, r0
 800bf32:	4770      	bx	lr
 800bf34:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bf38:	2b05      	cmp	r3, #5
 800bf3a:	d801      	bhi.n	800bf40 <__hexdig_fun+0x1a>
 800bf3c:	3847      	subs	r0, #71	@ 0x47
 800bf3e:	e7f7      	b.n	800bf30 <__hexdig_fun+0xa>
 800bf40:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bf44:	2b05      	cmp	r3, #5
 800bf46:	d801      	bhi.n	800bf4c <__hexdig_fun+0x26>
 800bf48:	3827      	subs	r0, #39	@ 0x27
 800bf4a:	e7f1      	b.n	800bf30 <__hexdig_fun+0xa>
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	4770      	bx	lr

0800bf50 <__gethex>:
 800bf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf54:	468a      	mov	sl, r1
 800bf56:	4690      	mov	r8, r2
 800bf58:	b085      	sub	sp, #20
 800bf5a:	9302      	str	r3, [sp, #8]
 800bf5c:	680b      	ldr	r3, [r1, #0]
 800bf5e:	9001      	str	r0, [sp, #4]
 800bf60:	1c9c      	adds	r4, r3, #2
 800bf62:	46a1      	mov	r9, r4
 800bf64:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bf68:	2830      	cmp	r0, #48	@ 0x30
 800bf6a:	d0fa      	beq.n	800bf62 <__gethex+0x12>
 800bf6c:	eba9 0303 	sub.w	r3, r9, r3
 800bf70:	f1a3 0b02 	sub.w	fp, r3, #2
 800bf74:	f7ff ffd7 	bl	800bf26 <__hexdig_fun>
 800bf78:	4605      	mov	r5, r0
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d168      	bne.n	800c050 <__gethex+0x100>
 800bf7e:	2201      	movs	r2, #1
 800bf80:	4648      	mov	r0, r9
 800bf82:	499f      	ldr	r1, [pc, #636]	@ (800c200 <__gethex+0x2b0>)
 800bf84:	f7ff f8b8 	bl	800b0f8 <strncmp>
 800bf88:	4607      	mov	r7, r0
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d167      	bne.n	800c05e <__gethex+0x10e>
 800bf8e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bf92:	4626      	mov	r6, r4
 800bf94:	f7ff ffc7 	bl	800bf26 <__hexdig_fun>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	d062      	beq.n	800c062 <__gethex+0x112>
 800bf9c:	4623      	mov	r3, r4
 800bf9e:	7818      	ldrb	r0, [r3, #0]
 800bfa0:	4699      	mov	r9, r3
 800bfa2:	2830      	cmp	r0, #48	@ 0x30
 800bfa4:	f103 0301 	add.w	r3, r3, #1
 800bfa8:	d0f9      	beq.n	800bf9e <__gethex+0x4e>
 800bfaa:	f7ff ffbc 	bl	800bf26 <__hexdig_fun>
 800bfae:	fab0 f580 	clz	r5, r0
 800bfb2:	f04f 0b01 	mov.w	fp, #1
 800bfb6:	096d      	lsrs	r5, r5, #5
 800bfb8:	464a      	mov	r2, r9
 800bfba:	4616      	mov	r6, r2
 800bfbc:	7830      	ldrb	r0, [r6, #0]
 800bfbe:	3201      	adds	r2, #1
 800bfc0:	f7ff ffb1 	bl	800bf26 <__hexdig_fun>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d1f8      	bne.n	800bfba <__gethex+0x6a>
 800bfc8:	2201      	movs	r2, #1
 800bfca:	4630      	mov	r0, r6
 800bfcc:	498c      	ldr	r1, [pc, #560]	@ (800c200 <__gethex+0x2b0>)
 800bfce:	f7ff f893 	bl	800b0f8 <strncmp>
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d13f      	bne.n	800c056 <__gethex+0x106>
 800bfd6:	b944      	cbnz	r4, 800bfea <__gethex+0x9a>
 800bfd8:	1c74      	adds	r4, r6, #1
 800bfda:	4622      	mov	r2, r4
 800bfdc:	4616      	mov	r6, r2
 800bfde:	7830      	ldrb	r0, [r6, #0]
 800bfe0:	3201      	adds	r2, #1
 800bfe2:	f7ff ffa0 	bl	800bf26 <__hexdig_fun>
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d1f8      	bne.n	800bfdc <__gethex+0x8c>
 800bfea:	1ba4      	subs	r4, r4, r6
 800bfec:	00a7      	lsls	r7, r4, #2
 800bfee:	7833      	ldrb	r3, [r6, #0]
 800bff0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bff4:	2b50      	cmp	r3, #80	@ 0x50
 800bff6:	d13e      	bne.n	800c076 <__gethex+0x126>
 800bff8:	7873      	ldrb	r3, [r6, #1]
 800bffa:	2b2b      	cmp	r3, #43	@ 0x2b
 800bffc:	d033      	beq.n	800c066 <__gethex+0x116>
 800bffe:	2b2d      	cmp	r3, #45	@ 0x2d
 800c000:	d034      	beq.n	800c06c <__gethex+0x11c>
 800c002:	2400      	movs	r4, #0
 800c004:	1c71      	adds	r1, r6, #1
 800c006:	7808      	ldrb	r0, [r1, #0]
 800c008:	f7ff ff8d 	bl	800bf26 <__hexdig_fun>
 800c00c:	1e43      	subs	r3, r0, #1
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	2b18      	cmp	r3, #24
 800c012:	d830      	bhi.n	800c076 <__gethex+0x126>
 800c014:	f1a0 0210 	sub.w	r2, r0, #16
 800c018:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c01c:	f7ff ff83 	bl	800bf26 <__hexdig_fun>
 800c020:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c024:	fa5f fc8c 	uxtb.w	ip, ip
 800c028:	f1bc 0f18 	cmp.w	ip, #24
 800c02c:	f04f 030a 	mov.w	r3, #10
 800c030:	d91e      	bls.n	800c070 <__gethex+0x120>
 800c032:	b104      	cbz	r4, 800c036 <__gethex+0xe6>
 800c034:	4252      	negs	r2, r2
 800c036:	4417      	add	r7, r2
 800c038:	f8ca 1000 	str.w	r1, [sl]
 800c03c:	b1ed      	cbz	r5, 800c07a <__gethex+0x12a>
 800c03e:	f1bb 0f00 	cmp.w	fp, #0
 800c042:	bf0c      	ite	eq
 800c044:	2506      	moveq	r5, #6
 800c046:	2500      	movne	r5, #0
 800c048:	4628      	mov	r0, r5
 800c04a:	b005      	add	sp, #20
 800c04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c050:	2500      	movs	r5, #0
 800c052:	462c      	mov	r4, r5
 800c054:	e7b0      	b.n	800bfb8 <__gethex+0x68>
 800c056:	2c00      	cmp	r4, #0
 800c058:	d1c7      	bne.n	800bfea <__gethex+0x9a>
 800c05a:	4627      	mov	r7, r4
 800c05c:	e7c7      	b.n	800bfee <__gethex+0x9e>
 800c05e:	464e      	mov	r6, r9
 800c060:	462f      	mov	r7, r5
 800c062:	2501      	movs	r5, #1
 800c064:	e7c3      	b.n	800bfee <__gethex+0x9e>
 800c066:	2400      	movs	r4, #0
 800c068:	1cb1      	adds	r1, r6, #2
 800c06a:	e7cc      	b.n	800c006 <__gethex+0xb6>
 800c06c:	2401      	movs	r4, #1
 800c06e:	e7fb      	b.n	800c068 <__gethex+0x118>
 800c070:	fb03 0002 	mla	r0, r3, r2, r0
 800c074:	e7ce      	b.n	800c014 <__gethex+0xc4>
 800c076:	4631      	mov	r1, r6
 800c078:	e7de      	b.n	800c038 <__gethex+0xe8>
 800c07a:	4629      	mov	r1, r5
 800c07c:	eba6 0309 	sub.w	r3, r6, r9
 800c080:	3b01      	subs	r3, #1
 800c082:	2b07      	cmp	r3, #7
 800c084:	dc0a      	bgt.n	800c09c <__gethex+0x14c>
 800c086:	9801      	ldr	r0, [sp, #4]
 800c088:	f000 fcfa 	bl	800ca80 <_Balloc>
 800c08c:	4604      	mov	r4, r0
 800c08e:	b940      	cbnz	r0, 800c0a2 <__gethex+0x152>
 800c090:	4602      	mov	r2, r0
 800c092:	21e4      	movs	r1, #228	@ 0xe4
 800c094:	4b5b      	ldr	r3, [pc, #364]	@ (800c204 <__gethex+0x2b4>)
 800c096:	485c      	ldr	r0, [pc, #368]	@ (800c208 <__gethex+0x2b8>)
 800c098:	f001 fa86 	bl	800d5a8 <__assert_func>
 800c09c:	3101      	adds	r1, #1
 800c09e:	105b      	asrs	r3, r3, #1
 800c0a0:	e7ef      	b.n	800c082 <__gethex+0x132>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f100 0a14 	add.w	sl, r0, #20
 800c0a8:	4655      	mov	r5, sl
 800c0aa:	469b      	mov	fp, r3
 800c0ac:	45b1      	cmp	r9, r6
 800c0ae:	d337      	bcc.n	800c120 <__gethex+0x1d0>
 800c0b0:	f845 bb04 	str.w	fp, [r5], #4
 800c0b4:	eba5 050a 	sub.w	r5, r5, sl
 800c0b8:	10ad      	asrs	r5, r5, #2
 800c0ba:	6125      	str	r5, [r4, #16]
 800c0bc:	4658      	mov	r0, fp
 800c0be:	f000 fdd1 	bl	800cc64 <__hi0bits>
 800c0c2:	016d      	lsls	r5, r5, #5
 800c0c4:	f8d8 6000 	ldr.w	r6, [r8]
 800c0c8:	1a2d      	subs	r5, r5, r0
 800c0ca:	42b5      	cmp	r5, r6
 800c0cc:	dd54      	ble.n	800c178 <__gethex+0x228>
 800c0ce:	1bad      	subs	r5, r5, r6
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f001 f959 	bl	800d38a <__any_on>
 800c0d8:	4681      	mov	r9, r0
 800c0da:	b178      	cbz	r0, 800c0fc <__gethex+0x1ac>
 800c0dc:	f04f 0901 	mov.w	r9, #1
 800c0e0:	1e6b      	subs	r3, r5, #1
 800c0e2:	1159      	asrs	r1, r3, #5
 800c0e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c0e8:	f003 021f 	and.w	r2, r3, #31
 800c0ec:	fa09 f202 	lsl.w	r2, r9, r2
 800c0f0:	420a      	tst	r2, r1
 800c0f2:	d003      	beq.n	800c0fc <__gethex+0x1ac>
 800c0f4:	454b      	cmp	r3, r9
 800c0f6:	dc36      	bgt.n	800c166 <__gethex+0x216>
 800c0f8:	f04f 0902 	mov.w	r9, #2
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	4620      	mov	r0, r4
 800c100:	f7ff febe 	bl	800be80 <rshift>
 800c104:	442f      	add	r7, r5
 800c106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c10a:	42bb      	cmp	r3, r7
 800c10c:	da42      	bge.n	800c194 <__gethex+0x244>
 800c10e:	4621      	mov	r1, r4
 800c110:	9801      	ldr	r0, [sp, #4]
 800c112:	f000 fcf5 	bl	800cb00 <_Bfree>
 800c116:	2300      	movs	r3, #0
 800c118:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c11a:	25a3      	movs	r5, #163	@ 0xa3
 800c11c:	6013      	str	r3, [r2, #0]
 800c11e:	e793      	b.n	800c048 <__gethex+0xf8>
 800c120:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c124:	2a2e      	cmp	r2, #46	@ 0x2e
 800c126:	d012      	beq.n	800c14e <__gethex+0x1fe>
 800c128:	2b20      	cmp	r3, #32
 800c12a:	d104      	bne.n	800c136 <__gethex+0x1e6>
 800c12c:	f845 bb04 	str.w	fp, [r5], #4
 800c130:	f04f 0b00 	mov.w	fp, #0
 800c134:	465b      	mov	r3, fp
 800c136:	7830      	ldrb	r0, [r6, #0]
 800c138:	9303      	str	r3, [sp, #12]
 800c13a:	f7ff fef4 	bl	800bf26 <__hexdig_fun>
 800c13e:	9b03      	ldr	r3, [sp, #12]
 800c140:	f000 000f 	and.w	r0, r0, #15
 800c144:	4098      	lsls	r0, r3
 800c146:	ea4b 0b00 	orr.w	fp, fp, r0
 800c14a:	3304      	adds	r3, #4
 800c14c:	e7ae      	b.n	800c0ac <__gethex+0x15c>
 800c14e:	45b1      	cmp	r9, r6
 800c150:	d8ea      	bhi.n	800c128 <__gethex+0x1d8>
 800c152:	2201      	movs	r2, #1
 800c154:	4630      	mov	r0, r6
 800c156:	492a      	ldr	r1, [pc, #168]	@ (800c200 <__gethex+0x2b0>)
 800c158:	9303      	str	r3, [sp, #12]
 800c15a:	f7fe ffcd 	bl	800b0f8 <strncmp>
 800c15e:	9b03      	ldr	r3, [sp, #12]
 800c160:	2800      	cmp	r0, #0
 800c162:	d1e1      	bne.n	800c128 <__gethex+0x1d8>
 800c164:	e7a2      	b.n	800c0ac <__gethex+0x15c>
 800c166:	4620      	mov	r0, r4
 800c168:	1ea9      	subs	r1, r5, #2
 800c16a:	f001 f90e 	bl	800d38a <__any_on>
 800c16e:	2800      	cmp	r0, #0
 800c170:	d0c2      	beq.n	800c0f8 <__gethex+0x1a8>
 800c172:	f04f 0903 	mov.w	r9, #3
 800c176:	e7c1      	b.n	800c0fc <__gethex+0x1ac>
 800c178:	da09      	bge.n	800c18e <__gethex+0x23e>
 800c17a:	1b75      	subs	r5, r6, r5
 800c17c:	4621      	mov	r1, r4
 800c17e:	462a      	mov	r2, r5
 800c180:	9801      	ldr	r0, [sp, #4]
 800c182:	f000 fed3 	bl	800cf2c <__lshift>
 800c186:	4604      	mov	r4, r0
 800c188:	1b7f      	subs	r7, r7, r5
 800c18a:	f100 0a14 	add.w	sl, r0, #20
 800c18e:	f04f 0900 	mov.w	r9, #0
 800c192:	e7b8      	b.n	800c106 <__gethex+0x1b6>
 800c194:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c198:	42bd      	cmp	r5, r7
 800c19a:	dd6f      	ble.n	800c27c <__gethex+0x32c>
 800c19c:	1bed      	subs	r5, r5, r7
 800c19e:	42ae      	cmp	r6, r5
 800c1a0:	dc34      	bgt.n	800c20c <__gethex+0x2bc>
 800c1a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c1a6:	2b02      	cmp	r3, #2
 800c1a8:	d022      	beq.n	800c1f0 <__gethex+0x2a0>
 800c1aa:	2b03      	cmp	r3, #3
 800c1ac:	d024      	beq.n	800c1f8 <__gethex+0x2a8>
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d115      	bne.n	800c1de <__gethex+0x28e>
 800c1b2:	42ae      	cmp	r6, r5
 800c1b4:	d113      	bne.n	800c1de <__gethex+0x28e>
 800c1b6:	2e01      	cmp	r6, #1
 800c1b8:	d10b      	bne.n	800c1d2 <__gethex+0x282>
 800c1ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c1be:	9a02      	ldr	r2, [sp, #8]
 800c1c0:	2562      	movs	r5, #98	@ 0x62
 800c1c2:	6013      	str	r3, [r2, #0]
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	6123      	str	r3, [r4, #16]
 800c1c8:	f8ca 3000 	str.w	r3, [sl]
 800c1cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1ce:	601c      	str	r4, [r3, #0]
 800c1d0:	e73a      	b.n	800c048 <__gethex+0xf8>
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	1e71      	subs	r1, r6, #1
 800c1d6:	f001 f8d8 	bl	800d38a <__any_on>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d1ed      	bne.n	800c1ba <__gethex+0x26a>
 800c1de:	4621      	mov	r1, r4
 800c1e0:	9801      	ldr	r0, [sp, #4]
 800c1e2:	f000 fc8d 	bl	800cb00 <_Bfree>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1ea:	2550      	movs	r5, #80	@ 0x50
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	e72b      	b.n	800c048 <__gethex+0xf8>
 800c1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1f3      	bne.n	800c1de <__gethex+0x28e>
 800c1f6:	e7e0      	b.n	800c1ba <__gethex+0x26a>
 800c1f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1dd      	bne.n	800c1ba <__gethex+0x26a>
 800c1fe:	e7ee      	b.n	800c1de <__gethex+0x28e>
 800c200:	0800dcfb 	.word	0x0800dcfb
 800c204:	0800ded5 	.word	0x0800ded5
 800c208:	0800dee6 	.word	0x0800dee6
 800c20c:	1e6f      	subs	r7, r5, #1
 800c20e:	f1b9 0f00 	cmp.w	r9, #0
 800c212:	d130      	bne.n	800c276 <__gethex+0x326>
 800c214:	b127      	cbz	r7, 800c220 <__gethex+0x2d0>
 800c216:	4639      	mov	r1, r7
 800c218:	4620      	mov	r0, r4
 800c21a:	f001 f8b6 	bl	800d38a <__any_on>
 800c21e:	4681      	mov	r9, r0
 800c220:	2301      	movs	r3, #1
 800c222:	4629      	mov	r1, r5
 800c224:	1b76      	subs	r6, r6, r5
 800c226:	2502      	movs	r5, #2
 800c228:	117a      	asrs	r2, r7, #5
 800c22a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c22e:	f007 071f 	and.w	r7, r7, #31
 800c232:	40bb      	lsls	r3, r7
 800c234:	4213      	tst	r3, r2
 800c236:	4620      	mov	r0, r4
 800c238:	bf18      	it	ne
 800c23a:	f049 0902 	orrne.w	r9, r9, #2
 800c23e:	f7ff fe1f 	bl	800be80 <rshift>
 800c242:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c246:	f1b9 0f00 	cmp.w	r9, #0
 800c24a:	d047      	beq.n	800c2dc <__gethex+0x38c>
 800c24c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c250:	2b02      	cmp	r3, #2
 800c252:	d015      	beq.n	800c280 <__gethex+0x330>
 800c254:	2b03      	cmp	r3, #3
 800c256:	d017      	beq.n	800c288 <__gethex+0x338>
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d109      	bne.n	800c270 <__gethex+0x320>
 800c25c:	f019 0f02 	tst.w	r9, #2
 800c260:	d006      	beq.n	800c270 <__gethex+0x320>
 800c262:	f8da 3000 	ldr.w	r3, [sl]
 800c266:	ea49 0903 	orr.w	r9, r9, r3
 800c26a:	f019 0f01 	tst.w	r9, #1
 800c26e:	d10e      	bne.n	800c28e <__gethex+0x33e>
 800c270:	f045 0510 	orr.w	r5, r5, #16
 800c274:	e032      	b.n	800c2dc <__gethex+0x38c>
 800c276:	f04f 0901 	mov.w	r9, #1
 800c27a:	e7d1      	b.n	800c220 <__gethex+0x2d0>
 800c27c:	2501      	movs	r5, #1
 800c27e:	e7e2      	b.n	800c246 <__gethex+0x2f6>
 800c280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c282:	f1c3 0301 	rsb	r3, r3, #1
 800c286:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d0f0      	beq.n	800c270 <__gethex+0x320>
 800c28e:	f04f 0c00 	mov.w	ip, #0
 800c292:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c296:	f104 0314 	add.w	r3, r4, #20
 800c29a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c29e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2a8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c2ac:	d01b      	beq.n	800c2e6 <__gethex+0x396>
 800c2ae:	3201      	adds	r2, #1
 800c2b0:	6002      	str	r2, [r0, #0]
 800c2b2:	2d02      	cmp	r5, #2
 800c2b4:	f104 0314 	add.w	r3, r4, #20
 800c2b8:	d13c      	bne.n	800c334 <__gethex+0x3e4>
 800c2ba:	f8d8 2000 	ldr.w	r2, [r8]
 800c2be:	3a01      	subs	r2, #1
 800c2c0:	42b2      	cmp	r2, r6
 800c2c2:	d109      	bne.n	800c2d8 <__gethex+0x388>
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	1171      	asrs	r1, r6, #5
 800c2c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c2cc:	f006 061f 	and.w	r6, r6, #31
 800c2d0:	fa02 f606 	lsl.w	r6, r2, r6
 800c2d4:	421e      	tst	r6, r3
 800c2d6:	d13a      	bne.n	800c34e <__gethex+0x3fe>
 800c2d8:	f045 0520 	orr.w	r5, r5, #32
 800c2dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2de:	601c      	str	r4, [r3, #0]
 800c2e0:	9b02      	ldr	r3, [sp, #8]
 800c2e2:	601f      	str	r7, [r3, #0]
 800c2e4:	e6b0      	b.n	800c048 <__gethex+0xf8>
 800c2e6:	4299      	cmp	r1, r3
 800c2e8:	f843 cc04 	str.w	ip, [r3, #-4]
 800c2ec:	d8d9      	bhi.n	800c2a2 <__gethex+0x352>
 800c2ee:	68a3      	ldr	r3, [r4, #8]
 800c2f0:	459b      	cmp	fp, r3
 800c2f2:	db17      	blt.n	800c324 <__gethex+0x3d4>
 800c2f4:	6861      	ldr	r1, [r4, #4]
 800c2f6:	9801      	ldr	r0, [sp, #4]
 800c2f8:	3101      	adds	r1, #1
 800c2fa:	f000 fbc1 	bl	800ca80 <_Balloc>
 800c2fe:	4681      	mov	r9, r0
 800c300:	b918      	cbnz	r0, 800c30a <__gethex+0x3ba>
 800c302:	4602      	mov	r2, r0
 800c304:	2184      	movs	r1, #132	@ 0x84
 800c306:	4b19      	ldr	r3, [pc, #100]	@ (800c36c <__gethex+0x41c>)
 800c308:	e6c5      	b.n	800c096 <__gethex+0x146>
 800c30a:	6922      	ldr	r2, [r4, #16]
 800c30c:	f104 010c 	add.w	r1, r4, #12
 800c310:	3202      	adds	r2, #2
 800c312:	0092      	lsls	r2, r2, #2
 800c314:	300c      	adds	r0, #12
 800c316:	f7fe ff48 	bl	800b1aa <memcpy>
 800c31a:	4621      	mov	r1, r4
 800c31c:	9801      	ldr	r0, [sp, #4]
 800c31e:	f000 fbef 	bl	800cb00 <_Bfree>
 800c322:	464c      	mov	r4, r9
 800c324:	6923      	ldr	r3, [r4, #16]
 800c326:	1c5a      	adds	r2, r3, #1
 800c328:	6122      	str	r2, [r4, #16]
 800c32a:	2201      	movs	r2, #1
 800c32c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c330:	615a      	str	r2, [r3, #20]
 800c332:	e7be      	b.n	800c2b2 <__gethex+0x362>
 800c334:	6922      	ldr	r2, [r4, #16]
 800c336:	455a      	cmp	r2, fp
 800c338:	dd0b      	ble.n	800c352 <__gethex+0x402>
 800c33a:	2101      	movs	r1, #1
 800c33c:	4620      	mov	r0, r4
 800c33e:	f7ff fd9f 	bl	800be80 <rshift>
 800c342:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c346:	3701      	adds	r7, #1
 800c348:	42bb      	cmp	r3, r7
 800c34a:	f6ff aee0 	blt.w	800c10e <__gethex+0x1be>
 800c34e:	2501      	movs	r5, #1
 800c350:	e7c2      	b.n	800c2d8 <__gethex+0x388>
 800c352:	f016 061f 	ands.w	r6, r6, #31
 800c356:	d0fa      	beq.n	800c34e <__gethex+0x3fe>
 800c358:	4453      	add	r3, sl
 800c35a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c35e:	f000 fc81 	bl	800cc64 <__hi0bits>
 800c362:	f1c6 0620 	rsb	r6, r6, #32
 800c366:	42b0      	cmp	r0, r6
 800c368:	dbe7      	blt.n	800c33a <__gethex+0x3ea>
 800c36a:	e7f0      	b.n	800c34e <__gethex+0x3fe>
 800c36c:	0800ded5 	.word	0x0800ded5

0800c370 <L_shift>:
 800c370:	f1c2 0208 	rsb	r2, r2, #8
 800c374:	0092      	lsls	r2, r2, #2
 800c376:	b570      	push	{r4, r5, r6, lr}
 800c378:	f1c2 0620 	rsb	r6, r2, #32
 800c37c:	6843      	ldr	r3, [r0, #4]
 800c37e:	6804      	ldr	r4, [r0, #0]
 800c380:	fa03 f506 	lsl.w	r5, r3, r6
 800c384:	432c      	orrs	r4, r5
 800c386:	40d3      	lsrs	r3, r2
 800c388:	6004      	str	r4, [r0, #0]
 800c38a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c38e:	4288      	cmp	r0, r1
 800c390:	d3f4      	bcc.n	800c37c <L_shift+0xc>
 800c392:	bd70      	pop	{r4, r5, r6, pc}

0800c394 <__match>:
 800c394:	b530      	push	{r4, r5, lr}
 800c396:	6803      	ldr	r3, [r0, #0]
 800c398:	3301      	adds	r3, #1
 800c39a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c39e:	b914      	cbnz	r4, 800c3a6 <__match+0x12>
 800c3a0:	6003      	str	r3, [r0, #0]
 800c3a2:	2001      	movs	r0, #1
 800c3a4:	bd30      	pop	{r4, r5, pc}
 800c3a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3aa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c3ae:	2d19      	cmp	r5, #25
 800c3b0:	bf98      	it	ls
 800c3b2:	3220      	addls	r2, #32
 800c3b4:	42a2      	cmp	r2, r4
 800c3b6:	d0f0      	beq.n	800c39a <__match+0x6>
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	e7f3      	b.n	800c3a4 <__match+0x10>

0800c3bc <__hexnan>:
 800c3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c0:	2500      	movs	r5, #0
 800c3c2:	680b      	ldr	r3, [r1, #0]
 800c3c4:	4682      	mov	sl, r0
 800c3c6:	115e      	asrs	r6, r3, #5
 800c3c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c3cc:	f013 031f 	ands.w	r3, r3, #31
 800c3d0:	bf18      	it	ne
 800c3d2:	3604      	addne	r6, #4
 800c3d4:	1f37      	subs	r7, r6, #4
 800c3d6:	4690      	mov	r8, r2
 800c3d8:	46b9      	mov	r9, r7
 800c3da:	463c      	mov	r4, r7
 800c3dc:	46ab      	mov	fp, r5
 800c3de:	b087      	sub	sp, #28
 800c3e0:	6801      	ldr	r1, [r0, #0]
 800c3e2:	9301      	str	r3, [sp, #4]
 800c3e4:	f846 5c04 	str.w	r5, [r6, #-4]
 800c3e8:	9502      	str	r5, [sp, #8]
 800c3ea:	784a      	ldrb	r2, [r1, #1]
 800c3ec:	1c4b      	adds	r3, r1, #1
 800c3ee:	9303      	str	r3, [sp, #12]
 800c3f0:	b342      	cbz	r2, 800c444 <__hexnan+0x88>
 800c3f2:	4610      	mov	r0, r2
 800c3f4:	9105      	str	r1, [sp, #20]
 800c3f6:	9204      	str	r2, [sp, #16]
 800c3f8:	f7ff fd95 	bl	800bf26 <__hexdig_fun>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d151      	bne.n	800c4a4 <__hexnan+0xe8>
 800c400:	9a04      	ldr	r2, [sp, #16]
 800c402:	9905      	ldr	r1, [sp, #20]
 800c404:	2a20      	cmp	r2, #32
 800c406:	d818      	bhi.n	800c43a <__hexnan+0x7e>
 800c408:	9b02      	ldr	r3, [sp, #8]
 800c40a:	459b      	cmp	fp, r3
 800c40c:	dd13      	ble.n	800c436 <__hexnan+0x7a>
 800c40e:	454c      	cmp	r4, r9
 800c410:	d206      	bcs.n	800c420 <__hexnan+0x64>
 800c412:	2d07      	cmp	r5, #7
 800c414:	dc04      	bgt.n	800c420 <__hexnan+0x64>
 800c416:	462a      	mov	r2, r5
 800c418:	4649      	mov	r1, r9
 800c41a:	4620      	mov	r0, r4
 800c41c:	f7ff ffa8 	bl	800c370 <L_shift>
 800c420:	4544      	cmp	r4, r8
 800c422:	d952      	bls.n	800c4ca <__hexnan+0x10e>
 800c424:	2300      	movs	r3, #0
 800c426:	f1a4 0904 	sub.w	r9, r4, #4
 800c42a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c42e:	461d      	mov	r5, r3
 800c430:	464c      	mov	r4, r9
 800c432:	f8cd b008 	str.w	fp, [sp, #8]
 800c436:	9903      	ldr	r1, [sp, #12]
 800c438:	e7d7      	b.n	800c3ea <__hexnan+0x2e>
 800c43a:	2a29      	cmp	r2, #41	@ 0x29
 800c43c:	d157      	bne.n	800c4ee <__hexnan+0x132>
 800c43e:	3102      	adds	r1, #2
 800c440:	f8ca 1000 	str.w	r1, [sl]
 800c444:	f1bb 0f00 	cmp.w	fp, #0
 800c448:	d051      	beq.n	800c4ee <__hexnan+0x132>
 800c44a:	454c      	cmp	r4, r9
 800c44c:	d206      	bcs.n	800c45c <__hexnan+0xa0>
 800c44e:	2d07      	cmp	r5, #7
 800c450:	dc04      	bgt.n	800c45c <__hexnan+0xa0>
 800c452:	462a      	mov	r2, r5
 800c454:	4649      	mov	r1, r9
 800c456:	4620      	mov	r0, r4
 800c458:	f7ff ff8a 	bl	800c370 <L_shift>
 800c45c:	4544      	cmp	r4, r8
 800c45e:	d936      	bls.n	800c4ce <__hexnan+0x112>
 800c460:	4623      	mov	r3, r4
 800c462:	f1a8 0204 	sub.w	r2, r8, #4
 800c466:	f853 1b04 	ldr.w	r1, [r3], #4
 800c46a:	429f      	cmp	r7, r3
 800c46c:	f842 1f04 	str.w	r1, [r2, #4]!
 800c470:	d2f9      	bcs.n	800c466 <__hexnan+0xaa>
 800c472:	1b3b      	subs	r3, r7, r4
 800c474:	f023 0303 	bic.w	r3, r3, #3
 800c478:	3304      	adds	r3, #4
 800c47a:	3401      	adds	r4, #1
 800c47c:	3e03      	subs	r6, #3
 800c47e:	42b4      	cmp	r4, r6
 800c480:	bf88      	it	hi
 800c482:	2304      	movhi	r3, #4
 800c484:	2200      	movs	r2, #0
 800c486:	4443      	add	r3, r8
 800c488:	f843 2b04 	str.w	r2, [r3], #4
 800c48c:	429f      	cmp	r7, r3
 800c48e:	d2fb      	bcs.n	800c488 <__hexnan+0xcc>
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	b91b      	cbnz	r3, 800c49c <__hexnan+0xe0>
 800c494:	4547      	cmp	r7, r8
 800c496:	d128      	bne.n	800c4ea <__hexnan+0x12e>
 800c498:	2301      	movs	r3, #1
 800c49a:	603b      	str	r3, [r7, #0]
 800c49c:	2005      	movs	r0, #5
 800c49e:	b007      	add	sp, #28
 800c4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a4:	3501      	adds	r5, #1
 800c4a6:	2d08      	cmp	r5, #8
 800c4a8:	f10b 0b01 	add.w	fp, fp, #1
 800c4ac:	dd06      	ble.n	800c4bc <__hexnan+0x100>
 800c4ae:	4544      	cmp	r4, r8
 800c4b0:	d9c1      	bls.n	800c436 <__hexnan+0x7a>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	2501      	movs	r5, #1
 800c4b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c4ba:	3c04      	subs	r4, #4
 800c4bc:	6822      	ldr	r2, [r4, #0]
 800c4be:	f000 000f 	and.w	r0, r0, #15
 800c4c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c4c6:	6020      	str	r0, [r4, #0]
 800c4c8:	e7b5      	b.n	800c436 <__hexnan+0x7a>
 800c4ca:	2508      	movs	r5, #8
 800c4cc:	e7b3      	b.n	800c436 <__hexnan+0x7a>
 800c4ce:	9b01      	ldr	r3, [sp, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d0dd      	beq.n	800c490 <__hexnan+0xd4>
 800c4d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c4d8:	f1c3 0320 	rsb	r3, r3, #32
 800c4dc:	40da      	lsrs	r2, r3
 800c4de:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	f846 3c04 	str.w	r3, [r6, #-4]
 800c4e8:	e7d2      	b.n	800c490 <__hexnan+0xd4>
 800c4ea:	3f04      	subs	r7, #4
 800c4ec:	e7d0      	b.n	800c490 <__hexnan+0xd4>
 800c4ee:	2004      	movs	r0, #4
 800c4f0:	e7d5      	b.n	800c49e <__hexnan+0xe2>

0800c4f2 <__ssputs_r>:
 800c4f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f6:	461f      	mov	r7, r3
 800c4f8:	688e      	ldr	r6, [r1, #8]
 800c4fa:	4682      	mov	sl, r0
 800c4fc:	42be      	cmp	r6, r7
 800c4fe:	460c      	mov	r4, r1
 800c500:	4690      	mov	r8, r2
 800c502:	680b      	ldr	r3, [r1, #0]
 800c504:	d82d      	bhi.n	800c562 <__ssputs_r+0x70>
 800c506:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c50a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c50e:	d026      	beq.n	800c55e <__ssputs_r+0x6c>
 800c510:	6965      	ldr	r5, [r4, #20]
 800c512:	6909      	ldr	r1, [r1, #16]
 800c514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c518:	eba3 0901 	sub.w	r9, r3, r1
 800c51c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c520:	1c7b      	adds	r3, r7, #1
 800c522:	444b      	add	r3, r9
 800c524:	106d      	asrs	r5, r5, #1
 800c526:	429d      	cmp	r5, r3
 800c528:	bf38      	it	cc
 800c52a:	461d      	movcc	r5, r3
 800c52c:	0553      	lsls	r3, r2, #21
 800c52e:	d527      	bpl.n	800c580 <__ssputs_r+0x8e>
 800c530:	4629      	mov	r1, r5
 800c532:	f000 f95f 	bl	800c7f4 <_malloc_r>
 800c536:	4606      	mov	r6, r0
 800c538:	b360      	cbz	r0, 800c594 <__ssputs_r+0xa2>
 800c53a:	464a      	mov	r2, r9
 800c53c:	6921      	ldr	r1, [r4, #16]
 800c53e:	f7fe fe34 	bl	800b1aa <memcpy>
 800c542:	89a3      	ldrh	r3, [r4, #12]
 800c544:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c54c:	81a3      	strh	r3, [r4, #12]
 800c54e:	6126      	str	r6, [r4, #16]
 800c550:	444e      	add	r6, r9
 800c552:	6026      	str	r6, [r4, #0]
 800c554:	463e      	mov	r6, r7
 800c556:	6165      	str	r5, [r4, #20]
 800c558:	eba5 0509 	sub.w	r5, r5, r9
 800c55c:	60a5      	str	r5, [r4, #8]
 800c55e:	42be      	cmp	r6, r7
 800c560:	d900      	bls.n	800c564 <__ssputs_r+0x72>
 800c562:	463e      	mov	r6, r7
 800c564:	4632      	mov	r2, r6
 800c566:	4641      	mov	r1, r8
 800c568:	6820      	ldr	r0, [r4, #0]
 800c56a:	f000 ffad 	bl	800d4c8 <memmove>
 800c56e:	2000      	movs	r0, #0
 800c570:	68a3      	ldr	r3, [r4, #8]
 800c572:	1b9b      	subs	r3, r3, r6
 800c574:	60a3      	str	r3, [r4, #8]
 800c576:	6823      	ldr	r3, [r4, #0]
 800c578:	4433      	add	r3, r6
 800c57a:	6023      	str	r3, [r4, #0]
 800c57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c580:	462a      	mov	r2, r5
 800c582:	f000 ff66 	bl	800d452 <_realloc_r>
 800c586:	4606      	mov	r6, r0
 800c588:	2800      	cmp	r0, #0
 800c58a:	d1e0      	bne.n	800c54e <__ssputs_r+0x5c>
 800c58c:	4650      	mov	r0, sl
 800c58e:	6921      	ldr	r1, [r4, #16]
 800c590:	f001 f83c 	bl	800d60c <_free_r>
 800c594:	230c      	movs	r3, #12
 800c596:	f8ca 3000 	str.w	r3, [sl]
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5a4:	81a3      	strh	r3, [r4, #12]
 800c5a6:	e7e9      	b.n	800c57c <__ssputs_r+0x8a>

0800c5a8 <_svfiprintf_r>:
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ac:	4698      	mov	r8, r3
 800c5ae:	898b      	ldrh	r3, [r1, #12]
 800c5b0:	4607      	mov	r7, r0
 800c5b2:	061b      	lsls	r3, r3, #24
 800c5b4:	460d      	mov	r5, r1
 800c5b6:	4614      	mov	r4, r2
 800c5b8:	b09d      	sub	sp, #116	@ 0x74
 800c5ba:	d510      	bpl.n	800c5de <_svfiprintf_r+0x36>
 800c5bc:	690b      	ldr	r3, [r1, #16]
 800c5be:	b973      	cbnz	r3, 800c5de <_svfiprintf_r+0x36>
 800c5c0:	2140      	movs	r1, #64	@ 0x40
 800c5c2:	f000 f917 	bl	800c7f4 <_malloc_r>
 800c5c6:	6028      	str	r0, [r5, #0]
 800c5c8:	6128      	str	r0, [r5, #16]
 800c5ca:	b930      	cbnz	r0, 800c5da <_svfiprintf_r+0x32>
 800c5cc:	230c      	movs	r3, #12
 800c5ce:	603b      	str	r3, [r7, #0]
 800c5d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5d4:	b01d      	add	sp, #116	@ 0x74
 800c5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5da:	2340      	movs	r3, #64	@ 0x40
 800c5dc:	616b      	str	r3, [r5, #20]
 800c5de:	2300      	movs	r3, #0
 800c5e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5e2:	2320      	movs	r3, #32
 800c5e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5e8:	2330      	movs	r3, #48	@ 0x30
 800c5ea:	f04f 0901 	mov.w	r9, #1
 800c5ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5f2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c78c <_svfiprintf_r+0x1e4>
 800c5f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5fa:	4623      	mov	r3, r4
 800c5fc:	469a      	mov	sl, r3
 800c5fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c602:	b10a      	cbz	r2, 800c608 <_svfiprintf_r+0x60>
 800c604:	2a25      	cmp	r2, #37	@ 0x25
 800c606:	d1f9      	bne.n	800c5fc <_svfiprintf_r+0x54>
 800c608:	ebba 0b04 	subs.w	fp, sl, r4
 800c60c:	d00b      	beq.n	800c626 <_svfiprintf_r+0x7e>
 800c60e:	465b      	mov	r3, fp
 800c610:	4622      	mov	r2, r4
 800c612:	4629      	mov	r1, r5
 800c614:	4638      	mov	r0, r7
 800c616:	f7ff ff6c 	bl	800c4f2 <__ssputs_r>
 800c61a:	3001      	adds	r0, #1
 800c61c:	f000 80a7 	beq.w	800c76e <_svfiprintf_r+0x1c6>
 800c620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c622:	445a      	add	r2, fp
 800c624:	9209      	str	r2, [sp, #36]	@ 0x24
 800c626:	f89a 3000 	ldrb.w	r3, [sl]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f000 809f 	beq.w	800c76e <_svfiprintf_r+0x1c6>
 800c630:	2300      	movs	r3, #0
 800c632:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c63a:	f10a 0a01 	add.w	sl, sl, #1
 800c63e:	9304      	str	r3, [sp, #16]
 800c640:	9307      	str	r3, [sp, #28]
 800c642:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c646:	931a      	str	r3, [sp, #104]	@ 0x68
 800c648:	4654      	mov	r4, sl
 800c64a:	2205      	movs	r2, #5
 800c64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c650:	484e      	ldr	r0, [pc, #312]	@ (800c78c <_svfiprintf_r+0x1e4>)
 800c652:	f7fe fd9c 	bl	800b18e <memchr>
 800c656:	9a04      	ldr	r2, [sp, #16]
 800c658:	b9d8      	cbnz	r0, 800c692 <_svfiprintf_r+0xea>
 800c65a:	06d0      	lsls	r0, r2, #27
 800c65c:	bf44      	itt	mi
 800c65e:	2320      	movmi	r3, #32
 800c660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c664:	0711      	lsls	r1, r2, #28
 800c666:	bf44      	itt	mi
 800c668:	232b      	movmi	r3, #43	@ 0x2b
 800c66a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c66e:	f89a 3000 	ldrb.w	r3, [sl]
 800c672:	2b2a      	cmp	r3, #42	@ 0x2a
 800c674:	d015      	beq.n	800c6a2 <_svfiprintf_r+0xfa>
 800c676:	4654      	mov	r4, sl
 800c678:	2000      	movs	r0, #0
 800c67a:	f04f 0c0a 	mov.w	ip, #10
 800c67e:	9a07      	ldr	r2, [sp, #28]
 800c680:	4621      	mov	r1, r4
 800c682:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c686:	3b30      	subs	r3, #48	@ 0x30
 800c688:	2b09      	cmp	r3, #9
 800c68a:	d94b      	bls.n	800c724 <_svfiprintf_r+0x17c>
 800c68c:	b1b0      	cbz	r0, 800c6bc <_svfiprintf_r+0x114>
 800c68e:	9207      	str	r2, [sp, #28]
 800c690:	e014      	b.n	800c6bc <_svfiprintf_r+0x114>
 800c692:	eba0 0308 	sub.w	r3, r0, r8
 800c696:	fa09 f303 	lsl.w	r3, r9, r3
 800c69a:	4313      	orrs	r3, r2
 800c69c:	46a2      	mov	sl, r4
 800c69e:	9304      	str	r3, [sp, #16]
 800c6a0:	e7d2      	b.n	800c648 <_svfiprintf_r+0xa0>
 800c6a2:	9b03      	ldr	r3, [sp, #12]
 800c6a4:	1d19      	adds	r1, r3, #4
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	9103      	str	r1, [sp, #12]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	bfbb      	ittet	lt
 800c6ae:	425b      	neglt	r3, r3
 800c6b0:	f042 0202 	orrlt.w	r2, r2, #2
 800c6b4:	9307      	strge	r3, [sp, #28]
 800c6b6:	9307      	strlt	r3, [sp, #28]
 800c6b8:	bfb8      	it	lt
 800c6ba:	9204      	strlt	r2, [sp, #16]
 800c6bc:	7823      	ldrb	r3, [r4, #0]
 800c6be:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6c0:	d10a      	bne.n	800c6d8 <_svfiprintf_r+0x130>
 800c6c2:	7863      	ldrb	r3, [r4, #1]
 800c6c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6c6:	d132      	bne.n	800c72e <_svfiprintf_r+0x186>
 800c6c8:	9b03      	ldr	r3, [sp, #12]
 800c6ca:	3402      	adds	r4, #2
 800c6cc:	1d1a      	adds	r2, r3, #4
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	9203      	str	r2, [sp, #12]
 800c6d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6d6:	9305      	str	r3, [sp, #20]
 800c6d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c790 <_svfiprintf_r+0x1e8>
 800c6dc:	2203      	movs	r2, #3
 800c6de:	4650      	mov	r0, sl
 800c6e0:	7821      	ldrb	r1, [r4, #0]
 800c6e2:	f7fe fd54 	bl	800b18e <memchr>
 800c6e6:	b138      	cbz	r0, 800c6f8 <_svfiprintf_r+0x150>
 800c6e8:	2240      	movs	r2, #64	@ 0x40
 800c6ea:	9b04      	ldr	r3, [sp, #16]
 800c6ec:	eba0 000a 	sub.w	r0, r0, sl
 800c6f0:	4082      	lsls	r2, r0
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	3401      	adds	r4, #1
 800c6f6:	9304      	str	r3, [sp, #16]
 800c6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6fc:	2206      	movs	r2, #6
 800c6fe:	4825      	ldr	r0, [pc, #148]	@ (800c794 <_svfiprintf_r+0x1ec>)
 800c700:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c704:	f7fe fd43 	bl	800b18e <memchr>
 800c708:	2800      	cmp	r0, #0
 800c70a:	d036      	beq.n	800c77a <_svfiprintf_r+0x1d2>
 800c70c:	4b22      	ldr	r3, [pc, #136]	@ (800c798 <_svfiprintf_r+0x1f0>)
 800c70e:	bb1b      	cbnz	r3, 800c758 <_svfiprintf_r+0x1b0>
 800c710:	9b03      	ldr	r3, [sp, #12]
 800c712:	3307      	adds	r3, #7
 800c714:	f023 0307 	bic.w	r3, r3, #7
 800c718:	3308      	adds	r3, #8
 800c71a:	9303      	str	r3, [sp, #12]
 800c71c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c71e:	4433      	add	r3, r6
 800c720:	9309      	str	r3, [sp, #36]	@ 0x24
 800c722:	e76a      	b.n	800c5fa <_svfiprintf_r+0x52>
 800c724:	460c      	mov	r4, r1
 800c726:	2001      	movs	r0, #1
 800c728:	fb0c 3202 	mla	r2, ip, r2, r3
 800c72c:	e7a8      	b.n	800c680 <_svfiprintf_r+0xd8>
 800c72e:	2300      	movs	r3, #0
 800c730:	f04f 0c0a 	mov.w	ip, #10
 800c734:	4619      	mov	r1, r3
 800c736:	3401      	adds	r4, #1
 800c738:	9305      	str	r3, [sp, #20]
 800c73a:	4620      	mov	r0, r4
 800c73c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c740:	3a30      	subs	r2, #48	@ 0x30
 800c742:	2a09      	cmp	r2, #9
 800c744:	d903      	bls.n	800c74e <_svfiprintf_r+0x1a6>
 800c746:	2b00      	cmp	r3, #0
 800c748:	d0c6      	beq.n	800c6d8 <_svfiprintf_r+0x130>
 800c74a:	9105      	str	r1, [sp, #20]
 800c74c:	e7c4      	b.n	800c6d8 <_svfiprintf_r+0x130>
 800c74e:	4604      	mov	r4, r0
 800c750:	2301      	movs	r3, #1
 800c752:	fb0c 2101 	mla	r1, ip, r1, r2
 800c756:	e7f0      	b.n	800c73a <_svfiprintf_r+0x192>
 800c758:	ab03      	add	r3, sp, #12
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	462a      	mov	r2, r5
 800c75e:	4638      	mov	r0, r7
 800c760:	4b0e      	ldr	r3, [pc, #56]	@ (800c79c <_svfiprintf_r+0x1f4>)
 800c762:	a904      	add	r1, sp, #16
 800c764:	f7fc ff9a 	bl	800969c <_printf_float>
 800c768:	1c42      	adds	r2, r0, #1
 800c76a:	4606      	mov	r6, r0
 800c76c:	d1d6      	bne.n	800c71c <_svfiprintf_r+0x174>
 800c76e:	89ab      	ldrh	r3, [r5, #12]
 800c770:	065b      	lsls	r3, r3, #25
 800c772:	f53f af2d 	bmi.w	800c5d0 <_svfiprintf_r+0x28>
 800c776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c778:	e72c      	b.n	800c5d4 <_svfiprintf_r+0x2c>
 800c77a:	ab03      	add	r3, sp, #12
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	462a      	mov	r2, r5
 800c780:	4638      	mov	r0, r7
 800c782:	4b06      	ldr	r3, [pc, #24]	@ (800c79c <_svfiprintf_r+0x1f4>)
 800c784:	a904      	add	r1, sp, #16
 800c786:	f7fd fa27 	bl	8009bd8 <_printf_i>
 800c78a:	e7ed      	b.n	800c768 <_svfiprintf_r+0x1c0>
 800c78c:	0800df46 	.word	0x0800df46
 800c790:	0800df4c 	.word	0x0800df4c
 800c794:	0800df50 	.word	0x0800df50
 800c798:	0800969d 	.word	0x0800969d
 800c79c:	0800c4f3 	.word	0x0800c4f3

0800c7a0 <malloc>:
 800c7a0:	4b02      	ldr	r3, [pc, #8]	@ (800c7ac <malloc+0xc>)
 800c7a2:	4601      	mov	r1, r0
 800c7a4:	6818      	ldr	r0, [r3, #0]
 800c7a6:	f000 b825 	b.w	800c7f4 <_malloc_r>
 800c7aa:	bf00      	nop
 800c7ac:	20000300 	.word	0x20000300

0800c7b0 <sbrk_aligned>:
 800c7b0:	b570      	push	{r4, r5, r6, lr}
 800c7b2:	4e0f      	ldr	r6, [pc, #60]	@ (800c7f0 <sbrk_aligned+0x40>)
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	6831      	ldr	r1, [r6, #0]
 800c7b8:	4605      	mov	r5, r0
 800c7ba:	b911      	cbnz	r1, 800c7c2 <sbrk_aligned+0x12>
 800c7bc:	f000 fed2 	bl	800d564 <_sbrk_r>
 800c7c0:	6030      	str	r0, [r6, #0]
 800c7c2:	4621      	mov	r1, r4
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	f000 fecd 	bl	800d564 <_sbrk_r>
 800c7ca:	1c43      	adds	r3, r0, #1
 800c7cc:	d103      	bne.n	800c7d6 <sbrk_aligned+0x26>
 800c7ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	bd70      	pop	{r4, r5, r6, pc}
 800c7d6:	1cc4      	adds	r4, r0, #3
 800c7d8:	f024 0403 	bic.w	r4, r4, #3
 800c7dc:	42a0      	cmp	r0, r4
 800c7de:	d0f8      	beq.n	800c7d2 <sbrk_aligned+0x22>
 800c7e0:	1a21      	subs	r1, r4, r0
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	f000 febe 	bl	800d564 <_sbrk_r>
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	d1f2      	bne.n	800c7d2 <sbrk_aligned+0x22>
 800c7ec:	e7ef      	b.n	800c7ce <sbrk_aligned+0x1e>
 800c7ee:	bf00      	nop
 800c7f0:	200017a0 	.word	0x200017a0

0800c7f4 <_malloc_r>:
 800c7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7f8:	1ccd      	adds	r5, r1, #3
 800c7fa:	f025 0503 	bic.w	r5, r5, #3
 800c7fe:	3508      	adds	r5, #8
 800c800:	2d0c      	cmp	r5, #12
 800c802:	bf38      	it	cc
 800c804:	250c      	movcc	r5, #12
 800c806:	2d00      	cmp	r5, #0
 800c808:	4606      	mov	r6, r0
 800c80a:	db01      	blt.n	800c810 <_malloc_r+0x1c>
 800c80c:	42a9      	cmp	r1, r5
 800c80e:	d904      	bls.n	800c81a <_malloc_r+0x26>
 800c810:	230c      	movs	r3, #12
 800c812:	6033      	str	r3, [r6, #0]
 800c814:	2000      	movs	r0, #0
 800c816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c81a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8f0 <_malloc_r+0xfc>
 800c81e:	f000 f923 	bl	800ca68 <__malloc_lock>
 800c822:	f8d8 3000 	ldr.w	r3, [r8]
 800c826:	461c      	mov	r4, r3
 800c828:	bb44      	cbnz	r4, 800c87c <_malloc_r+0x88>
 800c82a:	4629      	mov	r1, r5
 800c82c:	4630      	mov	r0, r6
 800c82e:	f7ff ffbf 	bl	800c7b0 <sbrk_aligned>
 800c832:	1c43      	adds	r3, r0, #1
 800c834:	4604      	mov	r4, r0
 800c836:	d158      	bne.n	800c8ea <_malloc_r+0xf6>
 800c838:	f8d8 4000 	ldr.w	r4, [r8]
 800c83c:	4627      	mov	r7, r4
 800c83e:	2f00      	cmp	r7, #0
 800c840:	d143      	bne.n	800c8ca <_malloc_r+0xd6>
 800c842:	2c00      	cmp	r4, #0
 800c844:	d04b      	beq.n	800c8de <_malloc_r+0xea>
 800c846:	6823      	ldr	r3, [r4, #0]
 800c848:	4639      	mov	r1, r7
 800c84a:	4630      	mov	r0, r6
 800c84c:	eb04 0903 	add.w	r9, r4, r3
 800c850:	f000 fe88 	bl	800d564 <_sbrk_r>
 800c854:	4581      	cmp	r9, r0
 800c856:	d142      	bne.n	800c8de <_malloc_r+0xea>
 800c858:	6821      	ldr	r1, [r4, #0]
 800c85a:	4630      	mov	r0, r6
 800c85c:	1a6d      	subs	r5, r5, r1
 800c85e:	4629      	mov	r1, r5
 800c860:	f7ff ffa6 	bl	800c7b0 <sbrk_aligned>
 800c864:	3001      	adds	r0, #1
 800c866:	d03a      	beq.n	800c8de <_malloc_r+0xea>
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	442b      	add	r3, r5
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	f8d8 3000 	ldr.w	r3, [r8]
 800c872:	685a      	ldr	r2, [r3, #4]
 800c874:	bb62      	cbnz	r2, 800c8d0 <_malloc_r+0xdc>
 800c876:	f8c8 7000 	str.w	r7, [r8]
 800c87a:	e00f      	b.n	800c89c <_malloc_r+0xa8>
 800c87c:	6822      	ldr	r2, [r4, #0]
 800c87e:	1b52      	subs	r2, r2, r5
 800c880:	d420      	bmi.n	800c8c4 <_malloc_r+0xd0>
 800c882:	2a0b      	cmp	r2, #11
 800c884:	d917      	bls.n	800c8b6 <_malloc_r+0xc2>
 800c886:	1961      	adds	r1, r4, r5
 800c888:	42a3      	cmp	r3, r4
 800c88a:	6025      	str	r5, [r4, #0]
 800c88c:	bf18      	it	ne
 800c88e:	6059      	strne	r1, [r3, #4]
 800c890:	6863      	ldr	r3, [r4, #4]
 800c892:	bf08      	it	eq
 800c894:	f8c8 1000 	streq.w	r1, [r8]
 800c898:	5162      	str	r2, [r4, r5]
 800c89a:	604b      	str	r3, [r1, #4]
 800c89c:	4630      	mov	r0, r6
 800c89e:	f000 f8e9 	bl	800ca74 <__malloc_unlock>
 800c8a2:	f104 000b 	add.w	r0, r4, #11
 800c8a6:	1d23      	adds	r3, r4, #4
 800c8a8:	f020 0007 	bic.w	r0, r0, #7
 800c8ac:	1ac2      	subs	r2, r0, r3
 800c8ae:	bf1c      	itt	ne
 800c8b0:	1a1b      	subne	r3, r3, r0
 800c8b2:	50a3      	strne	r3, [r4, r2]
 800c8b4:	e7af      	b.n	800c816 <_malloc_r+0x22>
 800c8b6:	6862      	ldr	r2, [r4, #4]
 800c8b8:	42a3      	cmp	r3, r4
 800c8ba:	bf0c      	ite	eq
 800c8bc:	f8c8 2000 	streq.w	r2, [r8]
 800c8c0:	605a      	strne	r2, [r3, #4]
 800c8c2:	e7eb      	b.n	800c89c <_malloc_r+0xa8>
 800c8c4:	4623      	mov	r3, r4
 800c8c6:	6864      	ldr	r4, [r4, #4]
 800c8c8:	e7ae      	b.n	800c828 <_malloc_r+0x34>
 800c8ca:	463c      	mov	r4, r7
 800c8cc:	687f      	ldr	r7, [r7, #4]
 800c8ce:	e7b6      	b.n	800c83e <_malloc_r+0x4a>
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	42a3      	cmp	r3, r4
 800c8d6:	d1fb      	bne.n	800c8d0 <_malloc_r+0xdc>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	6053      	str	r3, [r2, #4]
 800c8dc:	e7de      	b.n	800c89c <_malloc_r+0xa8>
 800c8de:	230c      	movs	r3, #12
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	6033      	str	r3, [r6, #0]
 800c8e4:	f000 f8c6 	bl	800ca74 <__malloc_unlock>
 800c8e8:	e794      	b.n	800c814 <_malloc_r+0x20>
 800c8ea:	6005      	str	r5, [r0, #0]
 800c8ec:	e7d6      	b.n	800c89c <_malloc_r+0xa8>
 800c8ee:	bf00      	nop
 800c8f0:	200017a4 	.word	0x200017a4

0800c8f4 <__ascii_mbtowc>:
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	b901      	cbnz	r1, 800c8fa <__ascii_mbtowc+0x6>
 800c8f8:	a901      	add	r1, sp, #4
 800c8fa:	b142      	cbz	r2, 800c90e <__ascii_mbtowc+0x1a>
 800c8fc:	b14b      	cbz	r3, 800c912 <__ascii_mbtowc+0x1e>
 800c8fe:	7813      	ldrb	r3, [r2, #0]
 800c900:	600b      	str	r3, [r1, #0]
 800c902:	7812      	ldrb	r2, [r2, #0]
 800c904:	1e10      	subs	r0, r2, #0
 800c906:	bf18      	it	ne
 800c908:	2001      	movne	r0, #1
 800c90a:	b002      	add	sp, #8
 800c90c:	4770      	bx	lr
 800c90e:	4610      	mov	r0, r2
 800c910:	e7fb      	b.n	800c90a <__ascii_mbtowc+0x16>
 800c912:	f06f 0001 	mvn.w	r0, #1
 800c916:	e7f8      	b.n	800c90a <__ascii_mbtowc+0x16>

0800c918 <__sflush_r>:
 800c918:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91e:	0716      	lsls	r6, r2, #28
 800c920:	4605      	mov	r5, r0
 800c922:	460c      	mov	r4, r1
 800c924:	d454      	bmi.n	800c9d0 <__sflush_r+0xb8>
 800c926:	684b      	ldr	r3, [r1, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	dc02      	bgt.n	800c932 <__sflush_r+0x1a>
 800c92c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c92e:	2b00      	cmp	r3, #0
 800c930:	dd48      	ble.n	800c9c4 <__sflush_r+0xac>
 800c932:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c934:	2e00      	cmp	r6, #0
 800c936:	d045      	beq.n	800c9c4 <__sflush_r+0xac>
 800c938:	2300      	movs	r3, #0
 800c93a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c93e:	682f      	ldr	r7, [r5, #0]
 800c940:	6a21      	ldr	r1, [r4, #32]
 800c942:	602b      	str	r3, [r5, #0]
 800c944:	d030      	beq.n	800c9a8 <__sflush_r+0x90>
 800c946:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c948:	89a3      	ldrh	r3, [r4, #12]
 800c94a:	0759      	lsls	r1, r3, #29
 800c94c:	d505      	bpl.n	800c95a <__sflush_r+0x42>
 800c94e:	6863      	ldr	r3, [r4, #4]
 800c950:	1ad2      	subs	r2, r2, r3
 800c952:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c954:	b10b      	cbz	r3, 800c95a <__sflush_r+0x42>
 800c956:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c958:	1ad2      	subs	r2, r2, r3
 800c95a:	2300      	movs	r3, #0
 800c95c:	4628      	mov	r0, r5
 800c95e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c960:	6a21      	ldr	r1, [r4, #32]
 800c962:	47b0      	blx	r6
 800c964:	1c43      	adds	r3, r0, #1
 800c966:	89a3      	ldrh	r3, [r4, #12]
 800c968:	d106      	bne.n	800c978 <__sflush_r+0x60>
 800c96a:	6829      	ldr	r1, [r5, #0]
 800c96c:	291d      	cmp	r1, #29
 800c96e:	d82b      	bhi.n	800c9c8 <__sflush_r+0xb0>
 800c970:	4a28      	ldr	r2, [pc, #160]	@ (800ca14 <__sflush_r+0xfc>)
 800c972:	410a      	asrs	r2, r1
 800c974:	07d6      	lsls	r6, r2, #31
 800c976:	d427      	bmi.n	800c9c8 <__sflush_r+0xb0>
 800c978:	2200      	movs	r2, #0
 800c97a:	6062      	str	r2, [r4, #4]
 800c97c:	6922      	ldr	r2, [r4, #16]
 800c97e:	04d9      	lsls	r1, r3, #19
 800c980:	6022      	str	r2, [r4, #0]
 800c982:	d504      	bpl.n	800c98e <__sflush_r+0x76>
 800c984:	1c42      	adds	r2, r0, #1
 800c986:	d101      	bne.n	800c98c <__sflush_r+0x74>
 800c988:	682b      	ldr	r3, [r5, #0]
 800c98a:	b903      	cbnz	r3, 800c98e <__sflush_r+0x76>
 800c98c:	6560      	str	r0, [r4, #84]	@ 0x54
 800c98e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c990:	602f      	str	r7, [r5, #0]
 800c992:	b1b9      	cbz	r1, 800c9c4 <__sflush_r+0xac>
 800c994:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c998:	4299      	cmp	r1, r3
 800c99a:	d002      	beq.n	800c9a2 <__sflush_r+0x8a>
 800c99c:	4628      	mov	r0, r5
 800c99e:	f000 fe35 	bl	800d60c <_free_r>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9a6:	e00d      	b.n	800c9c4 <__sflush_r+0xac>
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	47b0      	blx	r6
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	1c50      	adds	r0, r2, #1
 800c9b2:	d1c9      	bne.n	800c948 <__sflush_r+0x30>
 800c9b4:	682b      	ldr	r3, [r5, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d0c6      	beq.n	800c948 <__sflush_r+0x30>
 800c9ba:	2b1d      	cmp	r3, #29
 800c9bc:	d001      	beq.n	800c9c2 <__sflush_r+0xaa>
 800c9be:	2b16      	cmp	r3, #22
 800c9c0:	d11d      	bne.n	800c9fe <__sflush_r+0xe6>
 800c9c2:	602f      	str	r7, [r5, #0]
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	e021      	b.n	800ca0c <__sflush_r+0xf4>
 800c9c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9cc:	b21b      	sxth	r3, r3
 800c9ce:	e01a      	b.n	800ca06 <__sflush_r+0xee>
 800c9d0:	690f      	ldr	r7, [r1, #16]
 800c9d2:	2f00      	cmp	r7, #0
 800c9d4:	d0f6      	beq.n	800c9c4 <__sflush_r+0xac>
 800c9d6:	0793      	lsls	r3, r2, #30
 800c9d8:	bf18      	it	ne
 800c9da:	2300      	movne	r3, #0
 800c9dc:	680e      	ldr	r6, [r1, #0]
 800c9de:	bf08      	it	eq
 800c9e0:	694b      	ldreq	r3, [r1, #20]
 800c9e2:	1bf6      	subs	r6, r6, r7
 800c9e4:	600f      	str	r7, [r1, #0]
 800c9e6:	608b      	str	r3, [r1, #8]
 800c9e8:	2e00      	cmp	r6, #0
 800c9ea:	ddeb      	ble.n	800c9c4 <__sflush_r+0xac>
 800c9ec:	4633      	mov	r3, r6
 800c9ee:	463a      	mov	r2, r7
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	6a21      	ldr	r1, [r4, #32]
 800c9f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c9f8:	47e0      	blx	ip
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	dc07      	bgt.n	800ca0e <__sflush_r+0xf6>
 800c9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca0a:	81a3      	strh	r3, [r4, #12]
 800ca0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca0e:	4407      	add	r7, r0
 800ca10:	1a36      	subs	r6, r6, r0
 800ca12:	e7e9      	b.n	800c9e8 <__sflush_r+0xd0>
 800ca14:	dfbffffe 	.word	0xdfbffffe

0800ca18 <_fflush_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	690b      	ldr	r3, [r1, #16]
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	460c      	mov	r4, r1
 800ca20:	b913      	cbnz	r3, 800ca28 <_fflush_r+0x10>
 800ca22:	2500      	movs	r5, #0
 800ca24:	4628      	mov	r0, r5
 800ca26:	bd38      	pop	{r3, r4, r5, pc}
 800ca28:	b118      	cbz	r0, 800ca32 <_fflush_r+0x1a>
 800ca2a:	6a03      	ldr	r3, [r0, #32]
 800ca2c:	b90b      	cbnz	r3, 800ca32 <_fflush_r+0x1a>
 800ca2e:	f7fd fcaf 	bl	800a390 <__sinit>
 800ca32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d0f3      	beq.n	800ca22 <_fflush_r+0xa>
 800ca3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ca3c:	07d0      	lsls	r0, r2, #31
 800ca3e:	d404      	bmi.n	800ca4a <_fflush_r+0x32>
 800ca40:	0599      	lsls	r1, r3, #22
 800ca42:	d402      	bmi.n	800ca4a <_fflush_r+0x32>
 800ca44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca46:	f7fe fba0 	bl	800b18a <__retarget_lock_acquire_recursive>
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	f7ff ff63 	bl	800c918 <__sflush_r>
 800ca52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca54:	4605      	mov	r5, r0
 800ca56:	07da      	lsls	r2, r3, #31
 800ca58:	d4e4      	bmi.n	800ca24 <_fflush_r+0xc>
 800ca5a:	89a3      	ldrh	r3, [r4, #12]
 800ca5c:	059b      	lsls	r3, r3, #22
 800ca5e:	d4e1      	bmi.n	800ca24 <_fflush_r+0xc>
 800ca60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca62:	f7fe fb93 	bl	800b18c <__retarget_lock_release_recursive>
 800ca66:	e7dd      	b.n	800ca24 <_fflush_r+0xc>

0800ca68 <__malloc_lock>:
 800ca68:	4801      	ldr	r0, [pc, #4]	@ (800ca70 <__malloc_lock+0x8>)
 800ca6a:	f7fe bb8e 	b.w	800b18a <__retarget_lock_acquire_recursive>
 800ca6e:	bf00      	nop
 800ca70:	2000179c 	.word	0x2000179c

0800ca74 <__malloc_unlock>:
 800ca74:	4801      	ldr	r0, [pc, #4]	@ (800ca7c <__malloc_unlock+0x8>)
 800ca76:	f7fe bb89 	b.w	800b18c <__retarget_lock_release_recursive>
 800ca7a:	bf00      	nop
 800ca7c:	2000179c 	.word	0x2000179c

0800ca80 <_Balloc>:
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	69c6      	ldr	r6, [r0, #28]
 800ca84:	4604      	mov	r4, r0
 800ca86:	460d      	mov	r5, r1
 800ca88:	b976      	cbnz	r6, 800caa8 <_Balloc+0x28>
 800ca8a:	2010      	movs	r0, #16
 800ca8c:	f7ff fe88 	bl	800c7a0 <malloc>
 800ca90:	4602      	mov	r2, r0
 800ca92:	61e0      	str	r0, [r4, #28]
 800ca94:	b920      	cbnz	r0, 800caa0 <_Balloc+0x20>
 800ca96:	216b      	movs	r1, #107	@ 0x6b
 800ca98:	4b17      	ldr	r3, [pc, #92]	@ (800caf8 <_Balloc+0x78>)
 800ca9a:	4818      	ldr	r0, [pc, #96]	@ (800cafc <_Balloc+0x7c>)
 800ca9c:	f000 fd84 	bl	800d5a8 <__assert_func>
 800caa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800caa4:	6006      	str	r6, [r0, #0]
 800caa6:	60c6      	str	r6, [r0, #12]
 800caa8:	69e6      	ldr	r6, [r4, #28]
 800caaa:	68f3      	ldr	r3, [r6, #12]
 800caac:	b183      	cbz	r3, 800cad0 <_Balloc+0x50>
 800caae:	69e3      	ldr	r3, [r4, #28]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cab6:	b9b8      	cbnz	r0, 800cae8 <_Balloc+0x68>
 800cab8:	2101      	movs	r1, #1
 800caba:	fa01 f605 	lsl.w	r6, r1, r5
 800cabe:	1d72      	adds	r2, r6, #5
 800cac0:	4620      	mov	r0, r4
 800cac2:	0092      	lsls	r2, r2, #2
 800cac4:	f000 fd8e 	bl	800d5e4 <_calloc_r>
 800cac8:	b160      	cbz	r0, 800cae4 <_Balloc+0x64>
 800caca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cace:	e00e      	b.n	800caee <_Balloc+0x6e>
 800cad0:	2221      	movs	r2, #33	@ 0x21
 800cad2:	2104      	movs	r1, #4
 800cad4:	4620      	mov	r0, r4
 800cad6:	f000 fd85 	bl	800d5e4 <_calloc_r>
 800cada:	69e3      	ldr	r3, [r4, #28]
 800cadc:	60f0      	str	r0, [r6, #12]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1e4      	bne.n	800caae <_Balloc+0x2e>
 800cae4:	2000      	movs	r0, #0
 800cae6:	bd70      	pop	{r4, r5, r6, pc}
 800cae8:	6802      	ldr	r2, [r0, #0]
 800caea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800caee:	2300      	movs	r3, #0
 800caf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800caf4:	e7f7      	b.n	800cae6 <_Balloc+0x66>
 800caf6:	bf00      	nop
 800caf8:	0800de66 	.word	0x0800de66
 800cafc:	0800df57 	.word	0x0800df57

0800cb00 <_Bfree>:
 800cb00:	b570      	push	{r4, r5, r6, lr}
 800cb02:	69c6      	ldr	r6, [r0, #28]
 800cb04:	4605      	mov	r5, r0
 800cb06:	460c      	mov	r4, r1
 800cb08:	b976      	cbnz	r6, 800cb28 <_Bfree+0x28>
 800cb0a:	2010      	movs	r0, #16
 800cb0c:	f7ff fe48 	bl	800c7a0 <malloc>
 800cb10:	4602      	mov	r2, r0
 800cb12:	61e8      	str	r0, [r5, #28]
 800cb14:	b920      	cbnz	r0, 800cb20 <_Bfree+0x20>
 800cb16:	218f      	movs	r1, #143	@ 0x8f
 800cb18:	4b08      	ldr	r3, [pc, #32]	@ (800cb3c <_Bfree+0x3c>)
 800cb1a:	4809      	ldr	r0, [pc, #36]	@ (800cb40 <_Bfree+0x40>)
 800cb1c:	f000 fd44 	bl	800d5a8 <__assert_func>
 800cb20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb24:	6006      	str	r6, [r0, #0]
 800cb26:	60c6      	str	r6, [r0, #12]
 800cb28:	b13c      	cbz	r4, 800cb3a <_Bfree+0x3a>
 800cb2a:	69eb      	ldr	r3, [r5, #28]
 800cb2c:	6862      	ldr	r2, [r4, #4]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb34:	6021      	str	r1, [r4, #0]
 800cb36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}
 800cb3c:	0800de66 	.word	0x0800de66
 800cb40:	0800df57 	.word	0x0800df57

0800cb44 <__multadd>:
 800cb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb48:	4607      	mov	r7, r0
 800cb4a:	460c      	mov	r4, r1
 800cb4c:	461e      	mov	r6, r3
 800cb4e:	2000      	movs	r0, #0
 800cb50:	690d      	ldr	r5, [r1, #16]
 800cb52:	f101 0c14 	add.w	ip, r1, #20
 800cb56:	f8dc 3000 	ldr.w	r3, [ip]
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	b299      	uxth	r1, r3
 800cb5e:	fb02 6101 	mla	r1, r2, r1, r6
 800cb62:	0c1e      	lsrs	r6, r3, #16
 800cb64:	0c0b      	lsrs	r3, r1, #16
 800cb66:	fb02 3306 	mla	r3, r2, r6, r3
 800cb6a:	b289      	uxth	r1, r1
 800cb6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb70:	4285      	cmp	r5, r0
 800cb72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb76:	f84c 1b04 	str.w	r1, [ip], #4
 800cb7a:	dcec      	bgt.n	800cb56 <__multadd+0x12>
 800cb7c:	b30e      	cbz	r6, 800cbc2 <__multadd+0x7e>
 800cb7e:	68a3      	ldr	r3, [r4, #8]
 800cb80:	42ab      	cmp	r3, r5
 800cb82:	dc19      	bgt.n	800cbb8 <__multadd+0x74>
 800cb84:	6861      	ldr	r1, [r4, #4]
 800cb86:	4638      	mov	r0, r7
 800cb88:	3101      	adds	r1, #1
 800cb8a:	f7ff ff79 	bl	800ca80 <_Balloc>
 800cb8e:	4680      	mov	r8, r0
 800cb90:	b928      	cbnz	r0, 800cb9e <__multadd+0x5a>
 800cb92:	4602      	mov	r2, r0
 800cb94:	21ba      	movs	r1, #186	@ 0xba
 800cb96:	4b0c      	ldr	r3, [pc, #48]	@ (800cbc8 <__multadd+0x84>)
 800cb98:	480c      	ldr	r0, [pc, #48]	@ (800cbcc <__multadd+0x88>)
 800cb9a:	f000 fd05 	bl	800d5a8 <__assert_func>
 800cb9e:	6922      	ldr	r2, [r4, #16]
 800cba0:	f104 010c 	add.w	r1, r4, #12
 800cba4:	3202      	adds	r2, #2
 800cba6:	0092      	lsls	r2, r2, #2
 800cba8:	300c      	adds	r0, #12
 800cbaa:	f7fe fafe 	bl	800b1aa <memcpy>
 800cbae:	4621      	mov	r1, r4
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	f7ff ffa5 	bl	800cb00 <_Bfree>
 800cbb6:	4644      	mov	r4, r8
 800cbb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbbc:	3501      	adds	r5, #1
 800cbbe:	615e      	str	r6, [r3, #20]
 800cbc0:	6125      	str	r5, [r4, #16]
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc8:	0800ded5 	.word	0x0800ded5
 800cbcc:	0800df57 	.word	0x0800df57

0800cbd0 <__s2b>:
 800cbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbd4:	4615      	mov	r5, r2
 800cbd6:	2209      	movs	r2, #9
 800cbd8:	461f      	mov	r7, r3
 800cbda:	3308      	adds	r3, #8
 800cbdc:	460c      	mov	r4, r1
 800cbde:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbe2:	4606      	mov	r6, r0
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	db09      	blt.n	800cc00 <__s2b+0x30>
 800cbec:	4630      	mov	r0, r6
 800cbee:	f7ff ff47 	bl	800ca80 <_Balloc>
 800cbf2:	b940      	cbnz	r0, 800cc06 <__s2b+0x36>
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	21d3      	movs	r1, #211	@ 0xd3
 800cbf8:	4b18      	ldr	r3, [pc, #96]	@ (800cc5c <__s2b+0x8c>)
 800cbfa:	4819      	ldr	r0, [pc, #100]	@ (800cc60 <__s2b+0x90>)
 800cbfc:	f000 fcd4 	bl	800d5a8 <__assert_func>
 800cc00:	0052      	lsls	r2, r2, #1
 800cc02:	3101      	adds	r1, #1
 800cc04:	e7f0      	b.n	800cbe8 <__s2b+0x18>
 800cc06:	9b08      	ldr	r3, [sp, #32]
 800cc08:	2d09      	cmp	r5, #9
 800cc0a:	6143      	str	r3, [r0, #20]
 800cc0c:	f04f 0301 	mov.w	r3, #1
 800cc10:	6103      	str	r3, [r0, #16]
 800cc12:	dd16      	ble.n	800cc42 <__s2b+0x72>
 800cc14:	f104 0909 	add.w	r9, r4, #9
 800cc18:	46c8      	mov	r8, r9
 800cc1a:	442c      	add	r4, r5
 800cc1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc20:	4601      	mov	r1, r0
 800cc22:	220a      	movs	r2, #10
 800cc24:	4630      	mov	r0, r6
 800cc26:	3b30      	subs	r3, #48	@ 0x30
 800cc28:	f7ff ff8c 	bl	800cb44 <__multadd>
 800cc2c:	45a0      	cmp	r8, r4
 800cc2e:	d1f5      	bne.n	800cc1c <__s2b+0x4c>
 800cc30:	f1a5 0408 	sub.w	r4, r5, #8
 800cc34:	444c      	add	r4, r9
 800cc36:	1b2d      	subs	r5, r5, r4
 800cc38:	1963      	adds	r3, r4, r5
 800cc3a:	42bb      	cmp	r3, r7
 800cc3c:	db04      	blt.n	800cc48 <__s2b+0x78>
 800cc3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc42:	2509      	movs	r5, #9
 800cc44:	340a      	adds	r4, #10
 800cc46:	e7f6      	b.n	800cc36 <__s2b+0x66>
 800cc48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc4c:	4601      	mov	r1, r0
 800cc4e:	220a      	movs	r2, #10
 800cc50:	4630      	mov	r0, r6
 800cc52:	3b30      	subs	r3, #48	@ 0x30
 800cc54:	f7ff ff76 	bl	800cb44 <__multadd>
 800cc58:	e7ee      	b.n	800cc38 <__s2b+0x68>
 800cc5a:	bf00      	nop
 800cc5c:	0800ded5 	.word	0x0800ded5
 800cc60:	0800df57 	.word	0x0800df57

0800cc64 <__hi0bits>:
 800cc64:	4603      	mov	r3, r0
 800cc66:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc6a:	bf3a      	itte	cc
 800cc6c:	0403      	lslcc	r3, r0, #16
 800cc6e:	2010      	movcc	r0, #16
 800cc70:	2000      	movcs	r0, #0
 800cc72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc76:	bf3c      	itt	cc
 800cc78:	021b      	lslcc	r3, r3, #8
 800cc7a:	3008      	addcc	r0, #8
 800cc7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc80:	bf3c      	itt	cc
 800cc82:	011b      	lslcc	r3, r3, #4
 800cc84:	3004      	addcc	r0, #4
 800cc86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc8a:	bf3c      	itt	cc
 800cc8c:	009b      	lslcc	r3, r3, #2
 800cc8e:	3002      	addcc	r0, #2
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	db05      	blt.n	800cca0 <__hi0bits+0x3c>
 800cc94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc98:	f100 0001 	add.w	r0, r0, #1
 800cc9c:	bf08      	it	eq
 800cc9e:	2020      	moveq	r0, #32
 800cca0:	4770      	bx	lr

0800cca2 <__lo0bits>:
 800cca2:	6803      	ldr	r3, [r0, #0]
 800cca4:	4602      	mov	r2, r0
 800cca6:	f013 0007 	ands.w	r0, r3, #7
 800ccaa:	d00b      	beq.n	800ccc4 <__lo0bits+0x22>
 800ccac:	07d9      	lsls	r1, r3, #31
 800ccae:	d421      	bmi.n	800ccf4 <__lo0bits+0x52>
 800ccb0:	0798      	lsls	r0, r3, #30
 800ccb2:	bf49      	itett	mi
 800ccb4:	085b      	lsrmi	r3, r3, #1
 800ccb6:	089b      	lsrpl	r3, r3, #2
 800ccb8:	2001      	movmi	r0, #1
 800ccba:	6013      	strmi	r3, [r2, #0]
 800ccbc:	bf5c      	itt	pl
 800ccbe:	2002      	movpl	r0, #2
 800ccc0:	6013      	strpl	r3, [r2, #0]
 800ccc2:	4770      	bx	lr
 800ccc4:	b299      	uxth	r1, r3
 800ccc6:	b909      	cbnz	r1, 800cccc <__lo0bits+0x2a>
 800ccc8:	2010      	movs	r0, #16
 800ccca:	0c1b      	lsrs	r3, r3, #16
 800cccc:	b2d9      	uxtb	r1, r3
 800ccce:	b909      	cbnz	r1, 800ccd4 <__lo0bits+0x32>
 800ccd0:	3008      	adds	r0, #8
 800ccd2:	0a1b      	lsrs	r3, r3, #8
 800ccd4:	0719      	lsls	r1, r3, #28
 800ccd6:	bf04      	itt	eq
 800ccd8:	091b      	lsreq	r3, r3, #4
 800ccda:	3004      	addeq	r0, #4
 800ccdc:	0799      	lsls	r1, r3, #30
 800ccde:	bf04      	itt	eq
 800cce0:	089b      	lsreq	r3, r3, #2
 800cce2:	3002      	addeq	r0, #2
 800cce4:	07d9      	lsls	r1, r3, #31
 800cce6:	d403      	bmi.n	800ccf0 <__lo0bits+0x4e>
 800cce8:	085b      	lsrs	r3, r3, #1
 800ccea:	f100 0001 	add.w	r0, r0, #1
 800ccee:	d003      	beq.n	800ccf8 <__lo0bits+0x56>
 800ccf0:	6013      	str	r3, [r2, #0]
 800ccf2:	4770      	bx	lr
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	4770      	bx	lr
 800ccf8:	2020      	movs	r0, #32
 800ccfa:	4770      	bx	lr

0800ccfc <__i2b>:
 800ccfc:	b510      	push	{r4, lr}
 800ccfe:	460c      	mov	r4, r1
 800cd00:	2101      	movs	r1, #1
 800cd02:	f7ff febd 	bl	800ca80 <_Balloc>
 800cd06:	4602      	mov	r2, r0
 800cd08:	b928      	cbnz	r0, 800cd16 <__i2b+0x1a>
 800cd0a:	f240 1145 	movw	r1, #325	@ 0x145
 800cd0e:	4b04      	ldr	r3, [pc, #16]	@ (800cd20 <__i2b+0x24>)
 800cd10:	4804      	ldr	r0, [pc, #16]	@ (800cd24 <__i2b+0x28>)
 800cd12:	f000 fc49 	bl	800d5a8 <__assert_func>
 800cd16:	2301      	movs	r3, #1
 800cd18:	6144      	str	r4, [r0, #20]
 800cd1a:	6103      	str	r3, [r0, #16]
 800cd1c:	bd10      	pop	{r4, pc}
 800cd1e:	bf00      	nop
 800cd20:	0800ded5 	.word	0x0800ded5
 800cd24:	0800df57 	.word	0x0800df57

0800cd28 <__multiply>:
 800cd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2c:	4614      	mov	r4, r2
 800cd2e:	690a      	ldr	r2, [r1, #16]
 800cd30:	6923      	ldr	r3, [r4, #16]
 800cd32:	460f      	mov	r7, r1
 800cd34:	429a      	cmp	r2, r3
 800cd36:	bfa2      	ittt	ge
 800cd38:	4623      	movge	r3, r4
 800cd3a:	460c      	movge	r4, r1
 800cd3c:	461f      	movge	r7, r3
 800cd3e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cd42:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cd46:	68a3      	ldr	r3, [r4, #8]
 800cd48:	6861      	ldr	r1, [r4, #4]
 800cd4a:	eb0a 0609 	add.w	r6, sl, r9
 800cd4e:	42b3      	cmp	r3, r6
 800cd50:	b085      	sub	sp, #20
 800cd52:	bfb8      	it	lt
 800cd54:	3101      	addlt	r1, #1
 800cd56:	f7ff fe93 	bl	800ca80 <_Balloc>
 800cd5a:	b930      	cbnz	r0, 800cd6a <__multiply+0x42>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd62:	4b43      	ldr	r3, [pc, #268]	@ (800ce70 <__multiply+0x148>)
 800cd64:	4843      	ldr	r0, [pc, #268]	@ (800ce74 <__multiply+0x14c>)
 800cd66:	f000 fc1f 	bl	800d5a8 <__assert_func>
 800cd6a:	f100 0514 	add.w	r5, r0, #20
 800cd6e:	462b      	mov	r3, r5
 800cd70:	2200      	movs	r2, #0
 800cd72:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd76:	4543      	cmp	r3, r8
 800cd78:	d321      	bcc.n	800cdbe <__multiply+0x96>
 800cd7a:	f107 0114 	add.w	r1, r7, #20
 800cd7e:	f104 0214 	add.w	r2, r4, #20
 800cd82:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cd86:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cd8a:	9302      	str	r3, [sp, #8]
 800cd8c:	1b13      	subs	r3, r2, r4
 800cd8e:	3b15      	subs	r3, #21
 800cd90:	f023 0303 	bic.w	r3, r3, #3
 800cd94:	3304      	adds	r3, #4
 800cd96:	f104 0715 	add.w	r7, r4, #21
 800cd9a:	42ba      	cmp	r2, r7
 800cd9c:	bf38      	it	cc
 800cd9e:	2304      	movcc	r3, #4
 800cda0:	9301      	str	r3, [sp, #4]
 800cda2:	9b02      	ldr	r3, [sp, #8]
 800cda4:	9103      	str	r1, [sp, #12]
 800cda6:	428b      	cmp	r3, r1
 800cda8:	d80c      	bhi.n	800cdc4 <__multiply+0x9c>
 800cdaa:	2e00      	cmp	r6, #0
 800cdac:	dd03      	ble.n	800cdb6 <__multiply+0x8e>
 800cdae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d05a      	beq.n	800ce6c <__multiply+0x144>
 800cdb6:	6106      	str	r6, [r0, #16]
 800cdb8:	b005      	add	sp, #20
 800cdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbe:	f843 2b04 	str.w	r2, [r3], #4
 800cdc2:	e7d8      	b.n	800cd76 <__multiply+0x4e>
 800cdc4:	f8b1 a000 	ldrh.w	sl, [r1]
 800cdc8:	f1ba 0f00 	cmp.w	sl, #0
 800cdcc:	d023      	beq.n	800ce16 <__multiply+0xee>
 800cdce:	46a9      	mov	r9, r5
 800cdd0:	f04f 0c00 	mov.w	ip, #0
 800cdd4:	f104 0e14 	add.w	lr, r4, #20
 800cdd8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cddc:	f8d9 3000 	ldr.w	r3, [r9]
 800cde0:	fa1f fb87 	uxth.w	fp, r7
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	fb0a 330b 	mla	r3, sl, fp, r3
 800cdea:	4463      	add	r3, ip
 800cdec:	f8d9 c000 	ldr.w	ip, [r9]
 800cdf0:	0c3f      	lsrs	r7, r7, #16
 800cdf2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cdf6:	fb0a c707 	mla	r7, sl, r7, ip
 800cdfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce04:	4572      	cmp	r2, lr
 800ce06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce0a:	f849 3b04 	str.w	r3, [r9], #4
 800ce0e:	d8e3      	bhi.n	800cdd8 <__multiply+0xb0>
 800ce10:	9b01      	ldr	r3, [sp, #4]
 800ce12:	f845 c003 	str.w	ip, [r5, r3]
 800ce16:	9b03      	ldr	r3, [sp, #12]
 800ce18:	3104      	adds	r1, #4
 800ce1a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce1e:	f1b9 0f00 	cmp.w	r9, #0
 800ce22:	d021      	beq.n	800ce68 <__multiply+0x140>
 800ce24:	46ae      	mov	lr, r5
 800ce26:	f04f 0a00 	mov.w	sl, #0
 800ce2a:	682b      	ldr	r3, [r5, #0]
 800ce2c:	f104 0c14 	add.w	ip, r4, #20
 800ce30:	f8bc b000 	ldrh.w	fp, [ip]
 800ce34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	fb09 770b 	mla	r7, r9, fp, r7
 800ce3e:	4457      	add	r7, sl
 800ce40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce44:	f84e 3b04 	str.w	r3, [lr], #4
 800ce48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce50:	f8be 3000 	ldrh.w	r3, [lr]
 800ce54:	4562      	cmp	r2, ip
 800ce56:	fb09 330a 	mla	r3, r9, sl, r3
 800ce5a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ce5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce62:	d8e5      	bhi.n	800ce30 <__multiply+0x108>
 800ce64:	9f01      	ldr	r7, [sp, #4]
 800ce66:	51eb      	str	r3, [r5, r7]
 800ce68:	3504      	adds	r5, #4
 800ce6a:	e79a      	b.n	800cda2 <__multiply+0x7a>
 800ce6c:	3e01      	subs	r6, #1
 800ce6e:	e79c      	b.n	800cdaa <__multiply+0x82>
 800ce70:	0800ded5 	.word	0x0800ded5
 800ce74:	0800df57 	.word	0x0800df57

0800ce78 <__pow5mult>:
 800ce78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce7c:	4615      	mov	r5, r2
 800ce7e:	f012 0203 	ands.w	r2, r2, #3
 800ce82:	4607      	mov	r7, r0
 800ce84:	460e      	mov	r6, r1
 800ce86:	d007      	beq.n	800ce98 <__pow5mult+0x20>
 800ce88:	4c25      	ldr	r4, [pc, #148]	@ (800cf20 <__pow5mult+0xa8>)
 800ce8a:	3a01      	subs	r2, #1
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce92:	f7ff fe57 	bl	800cb44 <__multadd>
 800ce96:	4606      	mov	r6, r0
 800ce98:	10ad      	asrs	r5, r5, #2
 800ce9a:	d03d      	beq.n	800cf18 <__pow5mult+0xa0>
 800ce9c:	69fc      	ldr	r4, [r7, #28]
 800ce9e:	b97c      	cbnz	r4, 800cec0 <__pow5mult+0x48>
 800cea0:	2010      	movs	r0, #16
 800cea2:	f7ff fc7d 	bl	800c7a0 <malloc>
 800cea6:	4602      	mov	r2, r0
 800cea8:	61f8      	str	r0, [r7, #28]
 800ceaa:	b928      	cbnz	r0, 800ceb8 <__pow5mult+0x40>
 800ceac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ceb0:	4b1c      	ldr	r3, [pc, #112]	@ (800cf24 <__pow5mult+0xac>)
 800ceb2:	481d      	ldr	r0, [pc, #116]	@ (800cf28 <__pow5mult+0xb0>)
 800ceb4:	f000 fb78 	bl	800d5a8 <__assert_func>
 800ceb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cebc:	6004      	str	r4, [r0, #0]
 800cebe:	60c4      	str	r4, [r0, #12]
 800cec0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cec4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cec8:	b94c      	cbnz	r4, 800cede <__pow5mult+0x66>
 800ceca:	f240 2171 	movw	r1, #625	@ 0x271
 800cece:	4638      	mov	r0, r7
 800ced0:	f7ff ff14 	bl	800ccfc <__i2b>
 800ced4:	2300      	movs	r3, #0
 800ced6:	4604      	mov	r4, r0
 800ced8:	f8c8 0008 	str.w	r0, [r8, #8]
 800cedc:	6003      	str	r3, [r0, #0]
 800cede:	f04f 0900 	mov.w	r9, #0
 800cee2:	07eb      	lsls	r3, r5, #31
 800cee4:	d50a      	bpl.n	800cefc <__pow5mult+0x84>
 800cee6:	4631      	mov	r1, r6
 800cee8:	4622      	mov	r2, r4
 800ceea:	4638      	mov	r0, r7
 800ceec:	f7ff ff1c 	bl	800cd28 <__multiply>
 800cef0:	4680      	mov	r8, r0
 800cef2:	4631      	mov	r1, r6
 800cef4:	4638      	mov	r0, r7
 800cef6:	f7ff fe03 	bl	800cb00 <_Bfree>
 800cefa:	4646      	mov	r6, r8
 800cefc:	106d      	asrs	r5, r5, #1
 800cefe:	d00b      	beq.n	800cf18 <__pow5mult+0xa0>
 800cf00:	6820      	ldr	r0, [r4, #0]
 800cf02:	b938      	cbnz	r0, 800cf14 <__pow5mult+0x9c>
 800cf04:	4622      	mov	r2, r4
 800cf06:	4621      	mov	r1, r4
 800cf08:	4638      	mov	r0, r7
 800cf0a:	f7ff ff0d 	bl	800cd28 <__multiply>
 800cf0e:	6020      	str	r0, [r4, #0]
 800cf10:	f8c0 9000 	str.w	r9, [r0]
 800cf14:	4604      	mov	r4, r0
 800cf16:	e7e4      	b.n	800cee2 <__pow5mult+0x6a>
 800cf18:	4630      	mov	r0, r6
 800cf1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf1e:	bf00      	nop
 800cf20:	0800dfb0 	.word	0x0800dfb0
 800cf24:	0800de66 	.word	0x0800de66
 800cf28:	0800df57 	.word	0x0800df57

0800cf2c <__lshift>:
 800cf2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf30:	460c      	mov	r4, r1
 800cf32:	4607      	mov	r7, r0
 800cf34:	4691      	mov	r9, r2
 800cf36:	6923      	ldr	r3, [r4, #16]
 800cf38:	6849      	ldr	r1, [r1, #4]
 800cf3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf3e:	68a3      	ldr	r3, [r4, #8]
 800cf40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf44:	f108 0601 	add.w	r6, r8, #1
 800cf48:	42b3      	cmp	r3, r6
 800cf4a:	db0b      	blt.n	800cf64 <__lshift+0x38>
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	f7ff fd97 	bl	800ca80 <_Balloc>
 800cf52:	4605      	mov	r5, r0
 800cf54:	b948      	cbnz	r0, 800cf6a <__lshift+0x3e>
 800cf56:	4602      	mov	r2, r0
 800cf58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf5c:	4b27      	ldr	r3, [pc, #156]	@ (800cffc <__lshift+0xd0>)
 800cf5e:	4828      	ldr	r0, [pc, #160]	@ (800d000 <__lshift+0xd4>)
 800cf60:	f000 fb22 	bl	800d5a8 <__assert_func>
 800cf64:	3101      	adds	r1, #1
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	e7ee      	b.n	800cf48 <__lshift+0x1c>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	f100 0114 	add.w	r1, r0, #20
 800cf70:	f100 0210 	add.w	r2, r0, #16
 800cf74:	4618      	mov	r0, r3
 800cf76:	4553      	cmp	r3, sl
 800cf78:	db33      	blt.n	800cfe2 <__lshift+0xb6>
 800cf7a:	6920      	ldr	r0, [r4, #16]
 800cf7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf80:	f104 0314 	add.w	r3, r4, #20
 800cf84:	f019 091f 	ands.w	r9, r9, #31
 800cf88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf90:	d02b      	beq.n	800cfea <__lshift+0xbe>
 800cf92:	468a      	mov	sl, r1
 800cf94:	2200      	movs	r2, #0
 800cf96:	f1c9 0e20 	rsb	lr, r9, #32
 800cf9a:	6818      	ldr	r0, [r3, #0]
 800cf9c:	fa00 f009 	lsl.w	r0, r0, r9
 800cfa0:	4310      	orrs	r0, r2
 800cfa2:	f84a 0b04 	str.w	r0, [sl], #4
 800cfa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfaa:	459c      	cmp	ip, r3
 800cfac:	fa22 f20e 	lsr.w	r2, r2, lr
 800cfb0:	d8f3      	bhi.n	800cf9a <__lshift+0x6e>
 800cfb2:	ebac 0304 	sub.w	r3, ip, r4
 800cfb6:	3b15      	subs	r3, #21
 800cfb8:	f023 0303 	bic.w	r3, r3, #3
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	f104 0015 	add.w	r0, r4, #21
 800cfc2:	4584      	cmp	ip, r0
 800cfc4:	bf38      	it	cc
 800cfc6:	2304      	movcc	r3, #4
 800cfc8:	50ca      	str	r2, [r1, r3]
 800cfca:	b10a      	cbz	r2, 800cfd0 <__lshift+0xa4>
 800cfcc:	f108 0602 	add.w	r6, r8, #2
 800cfd0:	3e01      	subs	r6, #1
 800cfd2:	4638      	mov	r0, r7
 800cfd4:	4621      	mov	r1, r4
 800cfd6:	612e      	str	r6, [r5, #16]
 800cfd8:	f7ff fd92 	bl	800cb00 <_Bfree>
 800cfdc:	4628      	mov	r0, r5
 800cfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	e7c5      	b.n	800cf76 <__lshift+0x4a>
 800cfea:	3904      	subs	r1, #4
 800cfec:	f853 2b04 	ldr.w	r2, [r3], #4
 800cff0:	459c      	cmp	ip, r3
 800cff2:	f841 2f04 	str.w	r2, [r1, #4]!
 800cff6:	d8f9      	bhi.n	800cfec <__lshift+0xc0>
 800cff8:	e7ea      	b.n	800cfd0 <__lshift+0xa4>
 800cffa:	bf00      	nop
 800cffc:	0800ded5 	.word	0x0800ded5
 800d000:	0800df57 	.word	0x0800df57

0800d004 <__mcmp>:
 800d004:	4603      	mov	r3, r0
 800d006:	690a      	ldr	r2, [r1, #16]
 800d008:	6900      	ldr	r0, [r0, #16]
 800d00a:	b530      	push	{r4, r5, lr}
 800d00c:	1a80      	subs	r0, r0, r2
 800d00e:	d10e      	bne.n	800d02e <__mcmp+0x2a>
 800d010:	3314      	adds	r3, #20
 800d012:	3114      	adds	r1, #20
 800d014:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d018:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d01c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d020:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d024:	4295      	cmp	r5, r2
 800d026:	d003      	beq.n	800d030 <__mcmp+0x2c>
 800d028:	d205      	bcs.n	800d036 <__mcmp+0x32>
 800d02a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d02e:	bd30      	pop	{r4, r5, pc}
 800d030:	42a3      	cmp	r3, r4
 800d032:	d3f3      	bcc.n	800d01c <__mcmp+0x18>
 800d034:	e7fb      	b.n	800d02e <__mcmp+0x2a>
 800d036:	2001      	movs	r0, #1
 800d038:	e7f9      	b.n	800d02e <__mcmp+0x2a>
	...

0800d03c <__mdiff>:
 800d03c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d040:	4689      	mov	r9, r1
 800d042:	4606      	mov	r6, r0
 800d044:	4611      	mov	r1, r2
 800d046:	4648      	mov	r0, r9
 800d048:	4614      	mov	r4, r2
 800d04a:	f7ff ffdb 	bl	800d004 <__mcmp>
 800d04e:	1e05      	subs	r5, r0, #0
 800d050:	d112      	bne.n	800d078 <__mdiff+0x3c>
 800d052:	4629      	mov	r1, r5
 800d054:	4630      	mov	r0, r6
 800d056:	f7ff fd13 	bl	800ca80 <_Balloc>
 800d05a:	4602      	mov	r2, r0
 800d05c:	b928      	cbnz	r0, 800d06a <__mdiff+0x2e>
 800d05e:	f240 2137 	movw	r1, #567	@ 0x237
 800d062:	4b3e      	ldr	r3, [pc, #248]	@ (800d15c <__mdiff+0x120>)
 800d064:	483e      	ldr	r0, [pc, #248]	@ (800d160 <__mdiff+0x124>)
 800d066:	f000 fa9f 	bl	800d5a8 <__assert_func>
 800d06a:	2301      	movs	r3, #1
 800d06c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d070:	4610      	mov	r0, r2
 800d072:	b003      	add	sp, #12
 800d074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d078:	bfbc      	itt	lt
 800d07a:	464b      	movlt	r3, r9
 800d07c:	46a1      	movlt	r9, r4
 800d07e:	4630      	mov	r0, r6
 800d080:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d084:	bfba      	itte	lt
 800d086:	461c      	movlt	r4, r3
 800d088:	2501      	movlt	r5, #1
 800d08a:	2500      	movge	r5, #0
 800d08c:	f7ff fcf8 	bl	800ca80 <_Balloc>
 800d090:	4602      	mov	r2, r0
 800d092:	b918      	cbnz	r0, 800d09c <__mdiff+0x60>
 800d094:	f240 2145 	movw	r1, #581	@ 0x245
 800d098:	4b30      	ldr	r3, [pc, #192]	@ (800d15c <__mdiff+0x120>)
 800d09a:	e7e3      	b.n	800d064 <__mdiff+0x28>
 800d09c:	f100 0b14 	add.w	fp, r0, #20
 800d0a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d0a4:	f109 0310 	add.w	r3, r9, #16
 800d0a8:	60c5      	str	r5, [r0, #12]
 800d0aa:	f04f 0c00 	mov.w	ip, #0
 800d0ae:	f109 0514 	add.w	r5, r9, #20
 800d0b2:	46d9      	mov	r9, fp
 800d0b4:	6926      	ldr	r6, [r4, #16]
 800d0b6:	f104 0e14 	add.w	lr, r4, #20
 800d0ba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d0be:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d0c2:	9301      	str	r3, [sp, #4]
 800d0c4:	9b01      	ldr	r3, [sp, #4]
 800d0c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d0ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d0ce:	b281      	uxth	r1, r0
 800d0d0:	9301      	str	r3, [sp, #4]
 800d0d2:	fa1f f38a 	uxth.w	r3, sl
 800d0d6:	1a5b      	subs	r3, r3, r1
 800d0d8:	0c00      	lsrs	r0, r0, #16
 800d0da:	4463      	add	r3, ip
 800d0dc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d0e0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d0ea:	4576      	cmp	r6, lr
 800d0ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0f0:	f849 3b04 	str.w	r3, [r9], #4
 800d0f4:	d8e6      	bhi.n	800d0c4 <__mdiff+0x88>
 800d0f6:	1b33      	subs	r3, r6, r4
 800d0f8:	3b15      	subs	r3, #21
 800d0fa:	f023 0303 	bic.w	r3, r3, #3
 800d0fe:	3415      	adds	r4, #21
 800d100:	3304      	adds	r3, #4
 800d102:	42a6      	cmp	r6, r4
 800d104:	bf38      	it	cc
 800d106:	2304      	movcc	r3, #4
 800d108:	441d      	add	r5, r3
 800d10a:	445b      	add	r3, fp
 800d10c:	461e      	mov	r6, r3
 800d10e:	462c      	mov	r4, r5
 800d110:	4544      	cmp	r4, r8
 800d112:	d30e      	bcc.n	800d132 <__mdiff+0xf6>
 800d114:	f108 0103 	add.w	r1, r8, #3
 800d118:	1b49      	subs	r1, r1, r5
 800d11a:	f021 0103 	bic.w	r1, r1, #3
 800d11e:	3d03      	subs	r5, #3
 800d120:	45a8      	cmp	r8, r5
 800d122:	bf38      	it	cc
 800d124:	2100      	movcc	r1, #0
 800d126:	440b      	add	r3, r1
 800d128:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d12c:	b199      	cbz	r1, 800d156 <__mdiff+0x11a>
 800d12e:	6117      	str	r7, [r2, #16]
 800d130:	e79e      	b.n	800d070 <__mdiff+0x34>
 800d132:	46e6      	mov	lr, ip
 800d134:	f854 1b04 	ldr.w	r1, [r4], #4
 800d138:	fa1f fc81 	uxth.w	ip, r1
 800d13c:	44f4      	add	ip, lr
 800d13e:	0c08      	lsrs	r0, r1, #16
 800d140:	4471      	add	r1, lr
 800d142:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d146:	b289      	uxth	r1, r1
 800d148:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d14c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d150:	f846 1b04 	str.w	r1, [r6], #4
 800d154:	e7dc      	b.n	800d110 <__mdiff+0xd4>
 800d156:	3f01      	subs	r7, #1
 800d158:	e7e6      	b.n	800d128 <__mdiff+0xec>
 800d15a:	bf00      	nop
 800d15c:	0800ded5 	.word	0x0800ded5
 800d160:	0800df57 	.word	0x0800df57

0800d164 <__ulp>:
 800d164:	4b0e      	ldr	r3, [pc, #56]	@ (800d1a0 <__ulp+0x3c>)
 800d166:	400b      	ands	r3, r1
 800d168:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	dc08      	bgt.n	800d182 <__ulp+0x1e>
 800d170:	425b      	negs	r3, r3
 800d172:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d176:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d17a:	da04      	bge.n	800d186 <__ulp+0x22>
 800d17c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d180:	4113      	asrs	r3, r2
 800d182:	2200      	movs	r2, #0
 800d184:	e008      	b.n	800d198 <__ulp+0x34>
 800d186:	f1a2 0314 	sub.w	r3, r2, #20
 800d18a:	2b1e      	cmp	r3, #30
 800d18c:	bfd6      	itet	le
 800d18e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d192:	2201      	movgt	r2, #1
 800d194:	40da      	lsrle	r2, r3
 800d196:	2300      	movs	r3, #0
 800d198:	4619      	mov	r1, r3
 800d19a:	4610      	mov	r0, r2
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop
 800d1a0:	7ff00000 	.word	0x7ff00000

0800d1a4 <__b2d>:
 800d1a4:	6902      	ldr	r2, [r0, #16]
 800d1a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a8:	f100 0614 	add.w	r6, r0, #20
 800d1ac:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d1b0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d1b4:	4f1e      	ldr	r7, [pc, #120]	@ (800d230 <__b2d+0x8c>)
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f7ff fd54 	bl	800cc64 <__hi0bits>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	f1c0 0020 	rsb	r0, r0, #32
 800d1c2:	2b0a      	cmp	r3, #10
 800d1c4:	f1a2 0504 	sub.w	r5, r2, #4
 800d1c8:	6008      	str	r0, [r1, #0]
 800d1ca:	dc12      	bgt.n	800d1f2 <__b2d+0x4e>
 800d1cc:	42ae      	cmp	r6, r5
 800d1ce:	bf2c      	ite	cs
 800d1d0:	2200      	movcs	r2, #0
 800d1d2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d1d6:	f1c3 0c0b 	rsb	ip, r3, #11
 800d1da:	3315      	adds	r3, #21
 800d1dc:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d1e0:	fa04 f303 	lsl.w	r3, r4, r3
 800d1e4:	fa22 f20c 	lsr.w	r2, r2, ip
 800d1e8:	ea4e 0107 	orr.w	r1, lr, r7
 800d1ec:	431a      	orrs	r2, r3
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1f2:	42ae      	cmp	r6, r5
 800d1f4:	bf36      	itet	cc
 800d1f6:	f1a2 0508 	subcc.w	r5, r2, #8
 800d1fa:	2200      	movcs	r2, #0
 800d1fc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d200:	3b0b      	subs	r3, #11
 800d202:	d012      	beq.n	800d22a <__b2d+0x86>
 800d204:	f1c3 0720 	rsb	r7, r3, #32
 800d208:	fa22 f107 	lsr.w	r1, r2, r7
 800d20c:	409c      	lsls	r4, r3
 800d20e:	430c      	orrs	r4, r1
 800d210:	42b5      	cmp	r5, r6
 800d212:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d216:	bf94      	ite	ls
 800d218:	2400      	movls	r4, #0
 800d21a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d21e:	409a      	lsls	r2, r3
 800d220:	40fc      	lsrs	r4, r7
 800d222:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d226:	4322      	orrs	r2, r4
 800d228:	e7e1      	b.n	800d1ee <__b2d+0x4a>
 800d22a:	ea44 0107 	orr.w	r1, r4, r7
 800d22e:	e7de      	b.n	800d1ee <__b2d+0x4a>
 800d230:	3ff00000 	.word	0x3ff00000

0800d234 <__d2b>:
 800d234:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d238:	2101      	movs	r1, #1
 800d23a:	4690      	mov	r8, r2
 800d23c:	4699      	mov	r9, r3
 800d23e:	9e08      	ldr	r6, [sp, #32]
 800d240:	f7ff fc1e 	bl	800ca80 <_Balloc>
 800d244:	4604      	mov	r4, r0
 800d246:	b930      	cbnz	r0, 800d256 <__d2b+0x22>
 800d248:	4602      	mov	r2, r0
 800d24a:	f240 310f 	movw	r1, #783	@ 0x30f
 800d24e:	4b23      	ldr	r3, [pc, #140]	@ (800d2dc <__d2b+0xa8>)
 800d250:	4823      	ldr	r0, [pc, #140]	@ (800d2e0 <__d2b+0xac>)
 800d252:	f000 f9a9 	bl	800d5a8 <__assert_func>
 800d256:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d25a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d25e:	b10d      	cbz	r5, 800d264 <__d2b+0x30>
 800d260:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d264:	9301      	str	r3, [sp, #4]
 800d266:	f1b8 0300 	subs.w	r3, r8, #0
 800d26a:	d024      	beq.n	800d2b6 <__d2b+0x82>
 800d26c:	4668      	mov	r0, sp
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	f7ff fd17 	bl	800cca2 <__lo0bits>
 800d274:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d278:	b1d8      	cbz	r0, 800d2b2 <__d2b+0x7e>
 800d27a:	f1c0 0320 	rsb	r3, r0, #32
 800d27e:	fa02 f303 	lsl.w	r3, r2, r3
 800d282:	430b      	orrs	r3, r1
 800d284:	40c2      	lsrs	r2, r0
 800d286:	6163      	str	r3, [r4, #20]
 800d288:	9201      	str	r2, [sp, #4]
 800d28a:	9b01      	ldr	r3, [sp, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	bf0c      	ite	eq
 800d290:	2201      	moveq	r2, #1
 800d292:	2202      	movne	r2, #2
 800d294:	61a3      	str	r3, [r4, #24]
 800d296:	6122      	str	r2, [r4, #16]
 800d298:	b1ad      	cbz	r5, 800d2c6 <__d2b+0x92>
 800d29a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d29e:	4405      	add	r5, r0
 800d2a0:	6035      	str	r5, [r6, #0]
 800d2a2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2a8:	6018      	str	r0, [r3, #0]
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	b002      	add	sp, #8
 800d2ae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d2b2:	6161      	str	r1, [r4, #20]
 800d2b4:	e7e9      	b.n	800d28a <__d2b+0x56>
 800d2b6:	a801      	add	r0, sp, #4
 800d2b8:	f7ff fcf3 	bl	800cca2 <__lo0bits>
 800d2bc:	9b01      	ldr	r3, [sp, #4]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	6163      	str	r3, [r4, #20]
 800d2c2:	3020      	adds	r0, #32
 800d2c4:	e7e7      	b.n	800d296 <__d2b+0x62>
 800d2c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d2ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2ce:	6030      	str	r0, [r6, #0]
 800d2d0:	6918      	ldr	r0, [r3, #16]
 800d2d2:	f7ff fcc7 	bl	800cc64 <__hi0bits>
 800d2d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d2da:	e7e4      	b.n	800d2a6 <__d2b+0x72>
 800d2dc:	0800ded5 	.word	0x0800ded5
 800d2e0:	0800df57 	.word	0x0800df57

0800d2e4 <__ratio>:
 800d2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e8:	b085      	sub	sp, #20
 800d2ea:	e9cd 1000 	strd	r1, r0, [sp]
 800d2ee:	a902      	add	r1, sp, #8
 800d2f0:	f7ff ff58 	bl	800d1a4 <__b2d>
 800d2f4:	468b      	mov	fp, r1
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	460f      	mov	r7, r1
 800d2fa:	9800      	ldr	r0, [sp, #0]
 800d2fc:	a903      	add	r1, sp, #12
 800d2fe:	f7ff ff51 	bl	800d1a4 <__b2d>
 800d302:	460d      	mov	r5, r1
 800d304:	9b01      	ldr	r3, [sp, #4]
 800d306:	4689      	mov	r9, r1
 800d308:	6919      	ldr	r1, [r3, #16]
 800d30a:	9b00      	ldr	r3, [sp, #0]
 800d30c:	4604      	mov	r4, r0
 800d30e:	691b      	ldr	r3, [r3, #16]
 800d310:	4630      	mov	r0, r6
 800d312:	1ac9      	subs	r1, r1, r3
 800d314:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d318:	1a9b      	subs	r3, r3, r2
 800d31a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d31e:	2b00      	cmp	r3, #0
 800d320:	bfcd      	iteet	gt
 800d322:	463a      	movgt	r2, r7
 800d324:	462a      	movle	r2, r5
 800d326:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d32a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d32e:	bfd8      	it	le
 800d330:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d334:	464b      	mov	r3, r9
 800d336:	4622      	mov	r2, r4
 800d338:	4659      	mov	r1, fp
 800d33a:	f7f3 f9f7 	bl	800072c <__aeabi_ddiv>
 800d33e:	b005      	add	sp, #20
 800d340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d344 <__copybits>:
 800d344:	3901      	subs	r1, #1
 800d346:	b570      	push	{r4, r5, r6, lr}
 800d348:	1149      	asrs	r1, r1, #5
 800d34a:	6914      	ldr	r4, [r2, #16]
 800d34c:	3101      	adds	r1, #1
 800d34e:	f102 0314 	add.w	r3, r2, #20
 800d352:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d356:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d35a:	1f05      	subs	r5, r0, #4
 800d35c:	42a3      	cmp	r3, r4
 800d35e:	d30c      	bcc.n	800d37a <__copybits+0x36>
 800d360:	1aa3      	subs	r3, r4, r2
 800d362:	3b11      	subs	r3, #17
 800d364:	f023 0303 	bic.w	r3, r3, #3
 800d368:	3211      	adds	r2, #17
 800d36a:	42a2      	cmp	r2, r4
 800d36c:	bf88      	it	hi
 800d36e:	2300      	movhi	r3, #0
 800d370:	4418      	add	r0, r3
 800d372:	2300      	movs	r3, #0
 800d374:	4288      	cmp	r0, r1
 800d376:	d305      	bcc.n	800d384 <__copybits+0x40>
 800d378:	bd70      	pop	{r4, r5, r6, pc}
 800d37a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d37e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d382:	e7eb      	b.n	800d35c <__copybits+0x18>
 800d384:	f840 3b04 	str.w	r3, [r0], #4
 800d388:	e7f4      	b.n	800d374 <__copybits+0x30>

0800d38a <__any_on>:
 800d38a:	f100 0214 	add.w	r2, r0, #20
 800d38e:	6900      	ldr	r0, [r0, #16]
 800d390:	114b      	asrs	r3, r1, #5
 800d392:	4298      	cmp	r0, r3
 800d394:	b510      	push	{r4, lr}
 800d396:	db11      	blt.n	800d3bc <__any_on+0x32>
 800d398:	dd0a      	ble.n	800d3b0 <__any_on+0x26>
 800d39a:	f011 011f 	ands.w	r1, r1, #31
 800d39e:	d007      	beq.n	800d3b0 <__any_on+0x26>
 800d3a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d3a4:	fa24 f001 	lsr.w	r0, r4, r1
 800d3a8:	fa00 f101 	lsl.w	r1, r0, r1
 800d3ac:	428c      	cmp	r4, r1
 800d3ae:	d10b      	bne.n	800d3c8 <__any_on+0x3e>
 800d3b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d803      	bhi.n	800d3c0 <__any_on+0x36>
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	bd10      	pop	{r4, pc}
 800d3bc:	4603      	mov	r3, r0
 800d3be:	e7f7      	b.n	800d3b0 <__any_on+0x26>
 800d3c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3c4:	2900      	cmp	r1, #0
 800d3c6:	d0f5      	beq.n	800d3b4 <__any_on+0x2a>
 800d3c8:	2001      	movs	r0, #1
 800d3ca:	e7f6      	b.n	800d3ba <__any_on+0x30>

0800d3cc <__sread>:
 800d3cc:	b510      	push	{r4, lr}
 800d3ce:	460c      	mov	r4, r1
 800d3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3d4:	f000 f8b4 	bl	800d540 <_read_r>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	bfab      	itete	ge
 800d3dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d3de:	89a3      	ldrhlt	r3, [r4, #12]
 800d3e0:	181b      	addge	r3, r3, r0
 800d3e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d3e6:	bfac      	ite	ge
 800d3e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d3ea:	81a3      	strhlt	r3, [r4, #12]
 800d3ec:	bd10      	pop	{r4, pc}

0800d3ee <__swrite>:
 800d3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3f2:	461f      	mov	r7, r3
 800d3f4:	898b      	ldrh	r3, [r1, #12]
 800d3f6:	4605      	mov	r5, r0
 800d3f8:	05db      	lsls	r3, r3, #23
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	4616      	mov	r6, r2
 800d3fe:	d505      	bpl.n	800d40c <__swrite+0x1e>
 800d400:	2302      	movs	r3, #2
 800d402:	2200      	movs	r2, #0
 800d404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d408:	f000 f888 	bl	800d51c <_lseek_r>
 800d40c:	89a3      	ldrh	r3, [r4, #12]
 800d40e:	4632      	mov	r2, r6
 800d410:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d414:	81a3      	strh	r3, [r4, #12]
 800d416:	4628      	mov	r0, r5
 800d418:	463b      	mov	r3, r7
 800d41a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d41e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d422:	f000 b8af 	b.w	800d584 <_write_r>

0800d426 <__sseek>:
 800d426:	b510      	push	{r4, lr}
 800d428:	460c      	mov	r4, r1
 800d42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d42e:	f000 f875 	bl	800d51c <_lseek_r>
 800d432:	1c43      	adds	r3, r0, #1
 800d434:	89a3      	ldrh	r3, [r4, #12]
 800d436:	bf15      	itete	ne
 800d438:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d43a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d43e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d442:	81a3      	strheq	r3, [r4, #12]
 800d444:	bf18      	it	ne
 800d446:	81a3      	strhne	r3, [r4, #12]
 800d448:	bd10      	pop	{r4, pc}

0800d44a <__sclose>:
 800d44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d44e:	f000 b855 	b.w	800d4fc <_close_r>

0800d452 <_realloc_r>:
 800d452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d456:	4680      	mov	r8, r0
 800d458:	4615      	mov	r5, r2
 800d45a:	460c      	mov	r4, r1
 800d45c:	b921      	cbnz	r1, 800d468 <_realloc_r+0x16>
 800d45e:	4611      	mov	r1, r2
 800d460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d464:	f7ff b9c6 	b.w	800c7f4 <_malloc_r>
 800d468:	b92a      	cbnz	r2, 800d476 <_realloc_r+0x24>
 800d46a:	f000 f8cf 	bl	800d60c <_free_r>
 800d46e:	2400      	movs	r4, #0
 800d470:	4620      	mov	r0, r4
 800d472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d476:	f000 f911 	bl	800d69c <_malloc_usable_size_r>
 800d47a:	4285      	cmp	r5, r0
 800d47c:	4606      	mov	r6, r0
 800d47e:	d802      	bhi.n	800d486 <_realloc_r+0x34>
 800d480:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d484:	d8f4      	bhi.n	800d470 <_realloc_r+0x1e>
 800d486:	4629      	mov	r1, r5
 800d488:	4640      	mov	r0, r8
 800d48a:	f7ff f9b3 	bl	800c7f4 <_malloc_r>
 800d48e:	4607      	mov	r7, r0
 800d490:	2800      	cmp	r0, #0
 800d492:	d0ec      	beq.n	800d46e <_realloc_r+0x1c>
 800d494:	42b5      	cmp	r5, r6
 800d496:	462a      	mov	r2, r5
 800d498:	4621      	mov	r1, r4
 800d49a:	bf28      	it	cs
 800d49c:	4632      	movcs	r2, r6
 800d49e:	f7fd fe84 	bl	800b1aa <memcpy>
 800d4a2:	4621      	mov	r1, r4
 800d4a4:	4640      	mov	r0, r8
 800d4a6:	f000 f8b1 	bl	800d60c <_free_r>
 800d4aa:	463c      	mov	r4, r7
 800d4ac:	e7e0      	b.n	800d470 <_realloc_r+0x1e>

0800d4ae <__ascii_wctomb>:
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	b141      	cbz	r1, 800d4c6 <__ascii_wctomb+0x18>
 800d4b4:	2aff      	cmp	r2, #255	@ 0xff
 800d4b6:	d904      	bls.n	800d4c2 <__ascii_wctomb+0x14>
 800d4b8:	228a      	movs	r2, #138	@ 0x8a
 800d4ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4be:	601a      	str	r2, [r3, #0]
 800d4c0:	4770      	bx	lr
 800d4c2:	2001      	movs	r0, #1
 800d4c4:	700a      	strb	r2, [r1, #0]
 800d4c6:	4770      	bx	lr

0800d4c8 <memmove>:
 800d4c8:	4288      	cmp	r0, r1
 800d4ca:	b510      	push	{r4, lr}
 800d4cc:	eb01 0402 	add.w	r4, r1, r2
 800d4d0:	d902      	bls.n	800d4d8 <memmove+0x10>
 800d4d2:	4284      	cmp	r4, r0
 800d4d4:	4623      	mov	r3, r4
 800d4d6:	d807      	bhi.n	800d4e8 <memmove+0x20>
 800d4d8:	1e43      	subs	r3, r0, #1
 800d4da:	42a1      	cmp	r1, r4
 800d4dc:	d008      	beq.n	800d4f0 <memmove+0x28>
 800d4de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4e6:	e7f8      	b.n	800d4da <memmove+0x12>
 800d4e8:	4601      	mov	r1, r0
 800d4ea:	4402      	add	r2, r0
 800d4ec:	428a      	cmp	r2, r1
 800d4ee:	d100      	bne.n	800d4f2 <memmove+0x2a>
 800d4f0:	bd10      	pop	{r4, pc}
 800d4f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4fa:	e7f7      	b.n	800d4ec <memmove+0x24>

0800d4fc <_close_r>:
 800d4fc:	b538      	push	{r3, r4, r5, lr}
 800d4fe:	2300      	movs	r3, #0
 800d500:	4d05      	ldr	r5, [pc, #20]	@ (800d518 <_close_r+0x1c>)
 800d502:	4604      	mov	r4, r0
 800d504:	4608      	mov	r0, r1
 800d506:	602b      	str	r3, [r5, #0]
 800d508:	f7f3 fe25 	bl	8001156 <_close>
 800d50c:	1c43      	adds	r3, r0, #1
 800d50e:	d102      	bne.n	800d516 <_close_r+0x1a>
 800d510:	682b      	ldr	r3, [r5, #0]
 800d512:	b103      	cbz	r3, 800d516 <_close_r+0x1a>
 800d514:	6023      	str	r3, [r4, #0]
 800d516:	bd38      	pop	{r3, r4, r5, pc}
 800d518:	200017a8 	.word	0x200017a8

0800d51c <_lseek_r>:
 800d51c:	b538      	push	{r3, r4, r5, lr}
 800d51e:	4604      	mov	r4, r0
 800d520:	4608      	mov	r0, r1
 800d522:	4611      	mov	r1, r2
 800d524:	2200      	movs	r2, #0
 800d526:	4d05      	ldr	r5, [pc, #20]	@ (800d53c <_lseek_r+0x20>)
 800d528:	602a      	str	r2, [r5, #0]
 800d52a:	461a      	mov	r2, r3
 800d52c:	f7f3 fe37 	bl	800119e <_lseek>
 800d530:	1c43      	adds	r3, r0, #1
 800d532:	d102      	bne.n	800d53a <_lseek_r+0x1e>
 800d534:	682b      	ldr	r3, [r5, #0]
 800d536:	b103      	cbz	r3, 800d53a <_lseek_r+0x1e>
 800d538:	6023      	str	r3, [r4, #0]
 800d53a:	bd38      	pop	{r3, r4, r5, pc}
 800d53c:	200017a8 	.word	0x200017a8

0800d540 <_read_r>:
 800d540:	b538      	push	{r3, r4, r5, lr}
 800d542:	4604      	mov	r4, r0
 800d544:	4608      	mov	r0, r1
 800d546:	4611      	mov	r1, r2
 800d548:	2200      	movs	r2, #0
 800d54a:	4d05      	ldr	r5, [pc, #20]	@ (800d560 <_read_r+0x20>)
 800d54c:	602a      	str	r2, [r5, #0]
 800d54e:	461a      	mov	r2, r3
 800d550:	f7f3 fdc8 	bl	80010e4 <_read>
 800d554:	1c43      	adds	r3, r0, #1
 800d556:	d102      	bne.n	800d55e <_read_r+0x1e>
 800d558:	682b      	ldr	r3, [r5, #0]
 800d55a:	b103      	cbz	r3, 800d55e <_read_r+0x1e>
 800d55c:	6023      	str	r3, [r4, #0]
 800d55e:	bd38      	pop	{r3, r4, r5, pc}
 800d560:	200017a8 	.word	0x200017a8

0800d564 <_sbrk_r>:
 800d564:	b538      	push	{r3, r4, r5, lr}
 800d566:	2300      	movs	r3, #0
 800d568:	4d05      	ldr	r5, [pc, #20]	@ (800d580 <_sbrk_r+0x1c>)
 800d56a:	4604      	mov	r4, r0
 800d56c:	4608      	mov	r0, r1
 800d56e:	602b      	str	r3, [r5, #0]
 800d570:	f7f3 fe22 	bl	80011b8 <_sbrk>
 800d574:	1c43      	adds	r3, r0, #1
 800d576:	d102      	bne.n	800d57e <_sbrk_r+0x1a>
 800d578:	682b      	ldr	r3, [r5, #0]
 800d57a:	b103      	cbz	r3, 800d57e <_sbrk_r+0x1a>
 800d57c:	6023      	str	r3, [r4, #0]
 800d57e:	bd38      	pop	{r3, r4, r5, pc}
 800d580:	200017a8 	.word	0x200017a8

0800d584 <_write_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	4604      	mov	r4, r0
 800d588:	4608      	mov	r0, r1
 800d58a:	4611      	mov	r1, r2
 800d58c:	2200      	movs	r2, #0
 800d58e:	4d05      	ldr	r5, [pc, #20]	@ (800d5a4 <_write_r+0x20>)
 800d590:	602a      	str	r2, [r5, #0]
 800d592:	461a      	mov	r2, r3
 800d594:	f7f3 fdc3 	bl	800111e <_write>
 800d598:	1c43      	adds	r3, r0, #1
 800d59a:	d102      	bne.n	800d5a2 <_write_r+0x1e>
 800d59c:	682b      	ldr	r3, [r5, #0]
 800d59e:	b103      	cbz	r3, 800d5a2 <_write_r+0x1e>
 800d5a0:	6023      	str	r3, [r4, #0]
 800d5a2:	bd38      	pop	{r3, r4, r5, pc}
 800d5a4:	200017a8 	.word	0x200017a8

0800d5a8 <__assert_func>:
 800d5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5aa:	4614      	mov	r4, r2
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	4b09      	ldr	r3, [pc, #36]	@ (800d5d4 <__assert_func+0x2c>)
 800d5b0:	4605      	mov	r5, r0
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68d8      	ldr	r0, [r3, #12]
 800d5b6:	b954      	cbnz	r4, 800d5ce <__assert_func+0x26>
 800d5b8:	4b07      	ldr	r3, [pc, #28]	@ (800d5d8 <__assert_func+0x30>)
 800d5ba:	461c      	mov	r4, r3
 800d5bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5c0:	9100      	str	r1, [sp, #0]
 800d5c2:	462b      	mov	r3, r5
 800d5c4:	4905      	ldr	r1, [pc, #20]	@ (800d5dc <__assert_func+0x34>)
 800d5c6:	f000 f871 	bl	800d6ac <fiprintf>
 800d5ca:	f000 f881 	bl	800d6d0 <abort>
 800d5ce:	4b04      	ldr	r3, [pc, #16]	@ (800d5e0 <__assert_func+0x38>)
 800d5d0:	e7f4      	b.n	800d5bc <__assert_func+0x14>
 800d5d2:	bf00      	nop
 800d5d4:	20000300 	.word	0x20000300
 800d5d8:	0800e0eb 	.word	0x0800e0eb
 800d5dc:	0800e0bd 	.word	0x0800e0bd
 800d5e0:	0800e0b0 	.word	0x0800e0b0

0800d5e4 <_calloc_r>:
 800d5e4:	b570      	push	{r4, r5, r6, lr}
 800d5e6:	fba1 5402 	umull	r5, r4, r1, r2
 800d5ea:	b93c      	cbnz	r4, 800d5fc <_calloc_r+0x18>
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	f7ff f901 	bl	800c7f4 <_malloc_r>
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	b928      	cbnz	r0, 800d602 <_calloc_r+0x1e>
 800d5f6:	2600      	movs	r6, #0
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	bd70      	pop	{r4, r5, r6, pc}
 800d5fc:	220c      	movs	r2, #12
 800d5fe:	6002      	str	r2, [r0, #0]
 800d600:	e7f9      	b.n	800d5f6 <_calloc_r+0x12>
 800d602:	462a      	mov	r2, r5
 800d604:	4621      	mov	r1, r4
 800d606:	f7fd fd89 	bl	800b11c <memset>
 800d60a:	e7f5      	b.n	800d5f8 <_calloc_r+0x14>

0800d60c <_free_r>:
 800d60c:	b538      	push	{r3, r4, r5, lr}
 800d60e:	4605      	mov	r5, r0
 800d610:	2900      	cmp	r1, #0
 800d612:	d040      	beq.n	800d696 <_free_r+0x8a>
 800d614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d618:	1f0c      	subs	r4, r1, #4
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	bfb8      	it	lt
 800d61e:	18e4      	addlt	r4, r4, r3
 800d620:	f7ff fa22 	bl	800ca68 <__malloc_lock>
 800d624:	4a1c      	ldr	r2, [pc, #112]	@ (800d698 <_free_r+0x8c>)
 800d626:	6813      	ldr	r3, [r2, #0]
 800d628:	b933      	cbnz	r3, 800d638 <_free_r+0x2c>
 800d62a:	6063      	str	r3, [r4, #4]
 800d62c:	6014      	str	r4, [r2, #0]
 800d62e:	4628      	mov	r0, r5
 800d630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d634:	f7ff ba1e 	b.w	800ca74 <__malloc_unlock>
 800d638:	42a3      	cmp	r3, r4
 800d63a:	d908      	bls.n	800d64e <_free_r+0x42>
 800d63c:	6820      	ldr	r0, [r4, #0]
 800d63e:	1821      	adds	r1, r4, r0
 800d640:	428b      	cmp	r3, r1
 800d642:	bf01      	itttt	eq
 800d644:	6819      	ldreq	r1, [r3, #0]
 800d646:	685b      	ldreq	r3, [r3, #4]
 800d648:	1809      	addeq	r1, r1, r0
 800d64a:	6021      	streq	r1, [r4, #0]
 800d64c:	e7ed      	b.n	800d62a <_free_r+0x1e>
 800d64e:	461a      	mov	r2, r3
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	b10b      	cbz	r3, 800d658 <_free_r+0x4c>
 800d654:	42a3      	cmp	r3, r4
 800d656:	d9fa      	bls.n	800d64e <_free_r+0x42>
 800d658:	6811      	ldr	r1, [r2, #0]
 800d65a:	1850      	adds	r0, r2, r1
 800d65c:	42a0      	cmp	r0, r4
 800d65e:	d10b      	bne.n	800d678 <_free_r+0x6c>
 800d660:	6820      	ldr	r0, [r4, #0]
 800d662:	4401      	add	r1, r0
 800d664:	1850      	adds	r0, r2, r1
 800d666:	4283      	cmp	r3, r0
 800d668:	6011      	str	r1, [r2, #0]
 800d66a:	d1e0      	bne.n	800d62e <_free_r+0x22>
 800d66c:	6818      	ldr	r0, [r3, #0]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	4408      	add	r0, r1
 800d672:	6010      	str	r0, [r2, #0]
 800d674:	6053      	str	r3, [r2, #4]
 800d676:	e7da      	b.n	800d62e <_free_r+0x22>
 800d678:	d902      	bls.n	800d680 <_free_r+0x74>
 800d67a:	230c      	movs	r3, #12
 800d67c:	602b      	str	r3, [r5, #0]
 800d67e:	e7d6      	b.n	800d62e <_free_r+0x22>
 800d680:	6820      	ldr	r0, [r4, #0]
 800d682:	1821      	adds	r1, r4, r0
 800d684:	428b      	cmp	r3, r1
 800d686:	bf01      	itttt	eq
 800d688:	6819      	ldreq	r1, [r3, #0]
 800d68a:	685b      	ldreq	r3, [r3, #4]
 800d68c:	1809      	addeq	r1, r1, r0
 800d68e:	6021      	streq	r1, [r4, #0]
 800d690:	6063      	str	r3, [r4, #4]
 800d692:	6054      	str	r4, [r2, #4]
 800d694:	e7cb      	b.n	800d62e <_free_r+0x22>
 800d696:	bd38      	pop	{r3, r4, r5, pc}
 800d698:	200017a4 	.word	0x200017a4

0800d69c <_malloc_usable_size_r>:
 800d69c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6a0:	1f18      	subs	r0, r3, #4
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	bfbc      	itt	lt
 800d6a6:	580b      	ldrlt	r3, [r1, r0]
 800d6a8:	18c0      	addlt	r0, r0, r3
 800d6aa:	4770      	bx	lr

0800d6ac <fiprintf>:
 800d6ac:	b40e      	push	{r1, r2, r3}
 800d6ae:	b503      	push	{r0, r1, lr}
 800d6b0:	4601      	mov	r1, r0
 800d6b2:	ab03      	add	r3, sp, #12
 800d6b4:	4805      	ldr	r0, [pc, #20]	@ (800d6cc <fiprintf+0x20>)
 800d6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6ba:	6800      	ldr	r0, [r0, #0]
 800d6bc:	9301      	str	r3, [sp, #4]
 800d6be:	f000 f835 	bl	800d72c <_vfiprintf_r>
 800d6c2:	b002      	add	sp, #8
 800d6c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6c8:	b003      	add	sp, #12
 800d6ca:	4770      	bx	lr
 800d6cc:	20000300 	.word	0x20000300

0800d6d0 <abort>:
 800d6d0:	2006      	movs	r0, #6
 800d6d2:	b508      	push	{r3, lr}
 800d6d4:	f000 fa82 	bl	800dbdc <raise>
 800d6d8:	2001      	movs	r0, #1
 800d6da:	f7f3 fcf8 	bl	80010ce <_exit>

0800d6de <__sfputc_r>:
 800d6de:	6893      	ldr	r3, [r2, #8]
 800d6e0:	b410      	push	{r4}
 800d6e2:	3b01      	subs	r3, #1
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	6093      	str	r3, [r2, #8]
 800d6e8:	da07      	bge.n	800d6fa <__sfputc_r+0x1c>
 800d6ea:	6994      	ldr	r4, [r2, #24]
 800d6ec:	42a3      	cmp	r3, r4
 800d6ee:	db01      	blt.n	800d6f4 <__sfputc_r+0x16>
 800d6f0:	290a      	cmp	r1, #10
 800d6f2:	d102      	bne.n	800d6fa <__sfputc_r+0x1c>
 800d6f4:	bc10      	pop	{r4}
 800d6f6:	f000 b931 	b.w	800d95c <__swbuf_r>
 800d6fa:	6813      	ldr	r3, [r2, #0]
 800d6fc:	1c58      	adds	r0, r3, #1
 800d6fe:	6010      	str	r0, [r2, #0]
 800d700:	7019      	strb	r1, [r3, #0]
 800d702:	4608      	mov	r0, r1
 800d704:	bc10      	pop	{r4}
 800d706:	4770      	bx	lr

0800d708 <__sfputs_r>:
 800d708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d70a:	4606      	mov	r6, r0
 800d70c:	460f      	mov	r7, r1
 800d70e:	4614      	mov	r4, r2
 800d710:	18d5      	adds	r5, r2, r3
 800d712:	42ac      	cmp	r4, r5
 800d714:	d101      	bne.n	800d71a <__sfputs_r+0x12>
 800d716:	2000      	movs	r0, #0
 800d718:	e007      	b.n	800d72a <__sfputs_r+0x22>
 800d71a:	463a      	mov	r2, r7
 800d71c:	4630      	mov	r0, r6
 800d71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d722:	f7ff ffdc 	bl	800d6de <__sfputc_r>
 800d726:	1c43      	adds	r3, r0, #1
 800d728:	d1f3      	bne.n	800d712 <__sfputs_r+0xa>
 800d72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d72c <_vfiprintf_r>:
 800d72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d730:	460d      	mov	r5, r1
 800d732:	4614      	mov	r4, r2
 800d734:	4698      	mov	r8, r3
 800d736:	4606      	mov	r6, r0
 800d738:	b09d      	sub	sp, #116	@ 0x74
 800d73a:	b118      	cbz	r0, 800d744 <_vfiprintf_r+0x18>
 800d73c:	6a03      	ldr	r3, [r0, #32]
 800d73e:	b90b      	cbnz	r3, 800d744 <_vfiprintf_r+0x18>
 800d740:	f7fc fe26 	bl	800a390 <__sinit>
 800d744:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d746:	07d9      	lsls	r1, r3, #31
 800d748:	d405      	bmi.n	800d756 <_vfiprintf_r+0x2a>
 800d74a:	89ab      	ldrh	r3, [r5, #12]
 800d74c:	059a      	lsls	r2, r3, #22
 800d74e:	d402      	bmi.n	800d756 <_vfiprintf_r+0x2a>
 800d750:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d752:	f7fd fd1a 	bl	800b18a <__retarget_lock_acquire_recursive>
 800d756:	89ab      	ldrh	r3, [r5, #12]
 800d758:	071b      	lsls	r3, r3, #28
 800d75a:	d501      	bpl.n	800d760 <_vfiprintf_r+0x34>
 800d75c:	692b      	ldr	r3, [r5, #16]
 800d75e:	b99b      	cbnz	r3, 800d788 <_vfiprintf_r+0x5c>
 800d760:	4629      	mov	r1, r5
 800d762:	4630      	mov	r0, r6
 800d764:	f000 f938 	bl	800d9d8 <__swsetup_r>
 800d768:	b170      	cbz	r0, 800d788 <_vfiprintf_r+0x5c>
 800d76a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d76c:	07dc      	lsls	r4, r3, #31
 800d76e:	d504      	bpl.n	800d77a <_vfiprintf_r+0x4e>
 800d770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d774:	b01d      	add	sp, #116	@ 0x74
 800d776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d77a:	89ab      	ldrh	r3, [r5, #12]
 800d77c:	0598      	lsls	r0, r3, #22
 800d77e:	d4f7      	bmi.n	800d770 <_vfiprintf_r+0x44>
 800d780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d782:	f7fd fd03 	bl	800b18c <__retarget_lock_release_recursive>
 800d786:	e7f3      	b.n	800d770 <_vfiprintf_r+0x44>
 800d788:	2300      	movs	r3, #0
 800d78a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d78c:	2320      	movs	r3, #32
 800d78e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d792:	2330      	movs	r3, #48	@ 0x30
 800d794:	f04f 0901 	mov.w	r9, #1
 800d798:	f8cd 800c 	str.w	r8, [sp, #12]
 800d79c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d948 <_vfiprintf_r+0x21c>
 800d7a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7a4:	4623      	mov	r3, r4
 800d7a6:	469a      	mov	sl, r3
 800d7a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7ac:	b10a      	cbz	r2, 800d7b2 <_vfiprintf_r+0x86>
 800d7ae:	2a25      	cmp	r2, #37	@ 0x25
 800d7b0:	d1f9      	bne.n	800d7a6 <_vfiprintf_r+0x7a>
 800d7b2:	ebba 0b04 	subs.w	fp, sl, r4
 800d7b6:	d00b      	beq.n	800d7d0 <_vfiprintf_r+0xa4>
 800d7b8:	465b      	mov	r3, fp
 800d7ba:	4622      	mov	r2, r4
 800d7bc:	4629      	mov	r1, r5
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f7ff ffa2 	bl	800d708 <__sfputs_r>
 800d7c4:	3001      	adds	r0, #1
 800d7c6:	f000 80a7 	beq.w	800d918 <_vfiprintf_r+0x1ec>
 800d7ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7cc:	445a      	add	r2, fp
 800d7ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f000 809f 	beq.w	800d918 <_vfiprintf_r+0x1ec>
 800d7da:	2300      	movs	r3, #0
 800d7dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d7e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7e4:	f10a 0a01 	add.w	sl, sl, #1
 800d7e8:	9304      	str	r3, [sp, #16]
 800d7ea:	9307      	str	r3, [sp, #28]
 800d7ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d7f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d7f2:	4654      	mov	r4, sl
 800d7f4:	2205      	movs	r2, #5
 800d7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7fa:	4853      	ldr	r0, [pc, #332]	@ (800d948 <_vfiprintf_r+0x21c>)
 800d7fc:	f7fd fcc7 	bl	800b18e <memchr>
 800d800:	9a04      	ldr	r2, [sp, #16]
 800d802:	b9d8      	cbnz	r0, 800d83c <_vfiprintf_r+0x110>
 800d804:	06d1      	lsls	r1, r2, #27
 800d806:	bf44      	itt	mi
 800d808:	2320      	movmi	r3, #32
 800d80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d80e:	0713      	lsls	r3, r2, #28
 800d810:	bf44      	itt	mi
 800d812:	232b      	movmi	r3, #43	@ 0x2b
 800d814:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d818:	f89a 3000 	ldrb.w	r3, [sl]
 800d81c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d81e:	d015      	beq.n	800d84c <_vfiprintf_r+0x120>
 800d820:	4654      	mov	r4, sl
 800d822:	2000      	movs	r0, #0
 800d824:	f04f 0c0a 	mov.w	ip, #10
 800d828:	9a07      	ldr	r2, [sp, #28]
 800d82a:	4621      	mov	r1, r4
 800d82c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d830:	3b30      	subs	r3, #48	@ 0x30
 800d832:	2b09      	cmp	r3, #9
 800d834:	d94b      	bls.n	800d8ce <_vfiprintf_r+0x1a2>
 800d836:	b1b0      	cbz	r0, 800d866 <_vfiprintf_r+0x13a>
 800d838:	9207      	str	r2, [sp, #28]
 800d83a:	e014      	b.n	800d866 <_vfiprintf_r+0x13a>
 800d83c:	eba0 0308 	sub.w	r3, r0, r8
 800d840:	fa09 f303 	lsl.w	r3, r9, r3
 800d844:	4313      	orrs	r3, r2
 800d846:	46a2      	mov	sl, r4
 800d848:	9304      	str	r3, [sp, #16]
 800d84a:	e7d2      	b.n	800d7f2 <_vfiprintf_r+0xc6>
 800d84c:	9b03      	ldr	r3, [sp, #12]
 800d84e:	1d19      	adds	r1, r3, #4
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	9103      	str	r1, [sp, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	bfbb      	ittet	lt
 800d858:	425b      	neglt	r3, r3
 800d85a:	f042 0202 	orrlt.w	r2, r2, #2
 800d85e:	9307      	strge	r3, [sp, #28]
 800d860:	9307      	strlt	r3, [sp, #28]
 800d862:	bfb8      	it	lt
 800d864:	9204      	strlt	r2, [sp, #16]
 800d866:	7823      	ldrb	r3, [r4, #0]
 800d868:	2b2e      	cmp	r3, #46	@ 0x2e
 800d86a:	d10a      	bne.n	800d882 <_vfiprintf_r+0x156>
 800d86c:	7863      	ldrb	r3, [r4, #1]
 800d86e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d870:	d132      	bne.n	800d8d8 <_vfiprintf_r+0x1ac>
 800d872:	9b03      	ldr	r3, [sp, #12]
 800d874:	3402      	adds	r4, #2
 800d876:	1d1a      	adds	r2, r3, #4
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	9203      	str	r2, [sp, #12]
 800d87c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d880:	9305      	str	r3, [sp, #20]
 800d882:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d94c <_vfiprintf_r+0x220>
 800d886:	2203      	movs	r2, #3
 800d888:	4650      	mov	r0, sl
 800d88a:	7821      	ldrb	r1, [r4, #0]
 800d88c:	f7fd fc7f 	bl	800b18e <memchr>
 800d890:	b138      	cbz	r0, 800d8a2 <_vfiprintf_r+0x176>
 800d892:	2240      	movs	r2, #64	@ 0x40
 800d894:	9b04      	ldr	r3, [sp, #16]
 800d896:	eba0 000a 	sub.w	r0, r0, sl
 800d89a:	4082      	lsls	r2, r0
 800d89c:	4313      	orrs	r3, r2
 800d89e:	3401      	adds	r4, #1
 800d8a0:	9304      	str	r3, [sp, #16]
 800d8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8a6:	2206      	movs	r2, #6
 800d8a8:	4829      	ldr	r0, [pc, #164]	@ (800d950 <_vfiprintf_r+0x224>)
 800d8aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d8ae:	f7fd fc6e 	bl	800b18e <memchr>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	d03f      	beq.n	800d936 <_vfiprintf_r+0x20a>
 800d8b6:	4b27      	ldr	r3, [pc, #156]	@ (800d954 <_vfiprintf_r+0x228>)
 800d8b8:	bb1b      	cbnz	r3, 800d902 <_vfiprintf_r+0x1d6>
 800d8ba:	9b03      	ldr	r3, [sp, #12]
 800d8bc:	3307      	adds	r3, #7
 800d8be:	f023 0307 	bic.w	r3, r3, #7
 800d8c2:	3308      	adds	r3, #8
 800d8c4:	9303      	str	r3, [sp, #12]
 800d8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8c8:	443b      	add	r3, r7
 800d8ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8cc:	e76a      	b.n	800d7a4 <_vfiprintf_r+0x78>
 800d8ce:	460c      	mov	r4, r1
 800d8d0:	2001      	movs	r0, #1
 800d8d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8d6:	e7a8      	b.n	800d82a <_vfiprintf_r+0xfe>
 800d8d8:	2300      	movs	r3, #0
 800d8da:	f04f 0c0a 	mov.w	ip, #10
 800d8de:	4619      	mov	r1, r3
 800d8e0:	3401      	adds	r4, #1
 800d8e2:	9305      	str	r3, [sp, #20]
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8ea:	3a30      	subs	r2, #48	@ 0x30
 800d8ec:	2a09      	cmp	r2, #9
 800d8ee:	d903      	bls.n	800d8f8 <_vfiprintf_r+0x1cc>
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d0c6      	beq.n	800d882 <_vfiprintf_r+0x156>
 800d8f4:	9105      	str	r1, [sp, #20]
 800d8f6:	e7c4      	b.n	800d882 <_vfiprintf_r+0x156>
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d900:	e7f0      	b.n	800d8e4 <_vfiprintf_r+0x1b8>
 800d902:	ab03      	add	r3, sp, #12
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	462a      	mov	r2, r5
 800d908:	4630      	mov	r0, r6
 800d90a:	4b13      	ldr	r3, [pc, #76]	@ (800d958 <_vfiprintf_r+0x22c>)
 800d90c:	a904      	add	r1, sp, #16
 800d90e:	f7fb fec5 	bl	800969c <_printf_float>
 800d912:	4607      	mov	r7, r0
 800d914:	1c78      	adds	r0, r7, #1
 800d916:	d1d6      	bne.n	800d8c6 <_vfiprintf_r+0x19a>
 800d918:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d91a:	07d9      	lsls	r1, r3, #31
 800d91c:	d405      	bmi.n	800d92a <_vfiprintf_r+0x1fe>
 800d91e:	89ab      	ldrh	r3, [r5, #12]
 800d920:	059a      	lsls	r2, r3, #22
 800d922:	d402      	bmi.n	800d92a <_vfiprintf_r+0x1fe>
 800d924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d926:	f7fd fc31 	bl	800b18c <__retarget_lock_release_recursive>
 800d92a:	89ab      	ldrh	r3, [r5, #12]
 800d92c:	065b      	lsls	r3, r3, #25
 800d92e:	f53f af1f 	bmi.w	800d770 <_vfiprintf_r+0x44>
 800d932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d934:	e71e      	b.n	800d774 <_vfiprintf_r+0x48>
 800d936:	ab03      	add	r3, sp, #12
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	462a      	mov	r2, r5
 800d93c:	4630      	mov	r0, r6
 800d93e:	4b06      	ldr	r3, [pc, #24]	@ (800d958 <_vfiprintf_r+0x22c>)
 800d940:	a904      	add	r1, sp, #16
 800d942:	f7fc f949 	bl	8009bd8 <_printf_i>
 800d946:	e7e4      	b.n	800d912 <_vfiprintf_r+0x1e6>
 800d948:	0800df46 	.word	0x0800df46
 800d94c:	0800df4c 	.word	0x0800df4c
 800d950:	0800df50 	.word	0x0800df50
 800d954:	0800969d 	.word	0x0800969d
 800d958:	0800d709 	.word	0x0800d709

0800d95c <__swbuf_r>:
 800d95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95e:	460e      	mov	r6, r1
 800d960:	4614      	mov	r4, r2
 800d962:	4605      	mov	r5, r0
 800d964:	b118      	cbz	r0, 800d96e <__swbuf_r+0x12>
 800d966:	6a03      	ldr	r3, [r0, #32]
 800d968:	b90b      	cbnz	r3, 800d96e <__swbuf_r+0x12>
 800d96a:	f7fc fd11 	bl	800a390 <__sinit>
 800d96e:	69a3      	ldr	r3, [r4, #24]
 800d970:	60a3      	str	r3, [r4, #8]
 800d972:	89a3      	ldrh	r3, [r4, #12]
 800d974:	071a      	lsls	r2, r3, #28
 800d976:	d501      	bpl.n	800d97c <__swbuf_r+0x20>
 800d978:	6923      	ldr	r3, [r4, #16]
 800d97a:	b943      	cbnz	r3, 800d98e <__swbuf_r+0x32>
 800d97c:	4621      	mov	r1, r4
 800d97e:	4628      	mov	r0, r5
 800d980:	f000 f82a 	bl	800d9d8 <__swsetup_r>
 800d984:	b118      	cbz	r0, 800d98e <__swbuf_r+0x32>
 800d986:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d98a:	4638      	mov	r0, r7
 800d98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d98e:	6823      	ldr	r3, [r4, #0]
 800d990:	6922      	ldr	r2, [r4, #16]
 800d992:	b2f6      	uxtb	r6, r6
 800d994:	1a98      	subs	r0, r3, r2
 800d996:	6963      	ldr	r3, [r4, #20]
 800d998:	4637      	mov	r7, r6
 800d99a:	4283      	cmp	r3, r0
 800d99c:	dc05      	bgt.n	800d9aa <__swbuf_r+0x4e>
 800d99e:	4621      	mov	r1, r4
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	f7ff f839 	bl	800ca18 <_fflush_r>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d1ed      	bne.n	800d986 <__swbuf_r+0x2a>
 800d9aa:	68a3      	ldr	r3, [r4, #8]
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	60a3      	str	r3, [r4, #8]
 800d9b0:	6823      	ldr	r3, [r4, #0]
 800d9b2:	1c5a      	adds	r2, r3, #1
 800d9b4:	6022      	str	r2, [r4, #0]
 800d9b6:	701e      	strb	r6, [r3, #0]
 800d9b8:	6962      	ldr	r2, [r4, #20]
 800d9ba:	1c43      	adds	r3, r0, #1
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d004      	beq.n	800d9ca <__swbuf_r+0x6e>
 800d9c0:	89a3      	ldrh	r3, [r4, #12]
 800d9c2:	07db      	lsls	r3, r3, #31
 800d9c4:	d5e1      	bpl.n	800d98a <__swbuf_r+0x2e>
 800d9c6:	2e0a      	cmp	r6, #10
 800d9c8:	d1df      	bne.n	800d98a <__swbuf_r+0x2e>
 800d9ca:	4621      	mov	r1, r4
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	f7ff f823 	bl	800ca18 <_fflush_r>
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d0d9      	beq.n	800d98a <__swbuf_r+0x2e>
 800d9d6:	e7d6      	b.n	800d986 <__swbuf_r+0x2a>

0800d9d8 <__swsetup_r>:
 800d9d8:	b538      	push	{r3, r4, r5, lr}
 800d9da:	4b29      	ldr	r3, [pc, #164]	@ (800da80 <__swsetup_r+0xa8>)
 800d9dc:	4605      	mov	r5, r0
 800d9de:	6818      	ldr	r0, [r3, #0]
 800d9e0:	460c      	mov	r4, r1
 800d9e2:	b118      	cbz	r0, 800d9ec <__swsetup_r+0x14>
 800d9e4:	6a03      	ldr	r3, [r0, #32]
 800d9e6:	b90b      	cbnz	r3, 800d9ec <__swsetup_r+0x14>
 800d9e8:	f7fc fcd2 	bl	800a390 <__sinit>
 800d9ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9f0:	0719      	lsls	r1, r3, #28
 800d9f2:	d422      	bmi.n	800da3a <__swsetup_r+0x62>
 800d9f4:	06da      	lsls	r2, r3, #27
 800d9f6:	d407      	bmi.n	800da08 <__swsetup_r+0x30>
 800d9f8:	2209      	movs	r2, #9
 800d9fa:	602a      	str	r2, [r5, #0]
 800d9fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da04:	81a3      	strh	r3, [r4, #12]
 800da06:	e033      	b.n	800da70 <__swsetup_r+0x98>
 800da08:	0758      	lsls	r0, r3, #29
 800da0a:	d512      	bpl.n	800da32 <__swsetup_r+0x5a>
 800da0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da0e:	b141      	cbz	r1, 800da22 <__swsetup_r+0x4a>
 800da10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da14:	4299      	cmp	r1, r3
 800da16:	d002      	beq.n	800da1e <__swsetup_r+0x46>
 800da18:	4628      	mov	r0, r5
 800da1a:	f7ff fdf7 	bl	800d60c <_free_r>
 800da1e:	2300      	movs	r3, #0
 800da20:	6363      	str	r3, [r4, #52]	@ 0x34
 800da22:	89a3      	ldrh	r3, [r4, #12]
 800da24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800da28:	81a3      	strh	r3, [r4, #12]
 800da2a:	2300      	movs	r3, #0
 800da2c:	6063      	str	r3, [r4, #4]
 800da2e:	6923      	ldr	r3, [r4, #16]
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	89a3      	ldrh	r3, [r4, #12]
 800da34:	f043 0308 	orr.w	r3, r3, #8
 800da38:	81a3      	strh	r3, [r4, #12]
 800da3a:	6923      	ldr	r3, [r4, #16]
 800da3c:	b94b      	cbnz	r3, 800da52 <__swsetup_r+0x7a>
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800da44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da48:	d003      	beq.n	800da52 <__swsetup_r+0x7a>
 800da4a:	4621      	mov	r1, r4
 800da4c:	4628      	mov	r0, r5
 800da4e:	f000 f83e 	bl	800dace <__smakebuf_r>
 800da52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da56:	f013 0201 	ands.w	r2, r3, #1
 800da5a:	d00a      	beq.n	800da72 <__swsetup_r+0x9a>
 800da5c:	2200      	movs	r2, #0
 800da5e:	60a2      	str	r2, [r4, #8]
 800da60:	6962      	ldr	r2, [r4, #20]
 800da62:	4252      	negs	r2, r2
 800da64:	61a2      	str	r2, [r4, #24]
 800da66:	6922      	ldr	r2, [r4, #16]
 800da68:	b942      	cbnz	r2, 800da7c <__swsetup_r+0xa4>
 800da6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800da6e:	d1c5      	bne.n	800d9fc <__swsetup_r+0x24>
 800da70:	bd38      	pop	{r3, r4, r5, pc}
 800da72:	0799      	lsls	r1, r3, #30
 800da74:	bf58      	it	pl
 800da76:	6962      	ldrpl	r2, [r4, #20]
 800da78:	60a2      	str	r2, [r4, #8]
 800da7a:	e7f4      	b.n	800da66 <__swsetup_r+0x8e>
 800da7c:	2000      	movs	r0, #0
 800da7e:	e7f7      	b.n	800da70 <__swsetup_r+0x98>
 800da80:	20000300 	.word	0x20000300

0800da84 <__swhatbuf_r>:
 800da84:	b570      	push	{r4, r5, r6, lr}
 800da86:	460c      	mov	r4, r1
 800da88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da8c:	4615      	mov	r5, r2
 800da8e:	2900      	cmp	r1, #0
 800da90:	461e      	mov	r6, r3
 800da92:	b096      	sub	sp, #88	@ 0x58
 800da94:	da0c      	bge.n	800dab0 <__swhatbuf_r+0x2c>
 800da96:	89a3      	ldrh	r3, [r4, #12]
 800da98:	2100      	movs	r1, #0
 800da9a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da9e:	bf14      	ite	ne
 800daa0:	2340      	movne	r3, #64	@ 0x40
 800daa2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800daa6:	2000      	movs	r0, #0
 800daa8:	6031      	str	r1, [r6, #0]
 800daaa:	602b      	str	r3, [r5, #0]
 800daac:	b016      	add	sp, #88	@ 0x58
 800daae:	bd70      	pop	{r4, r5, r6, pc}
 800dab0:	466a      	mov	r2, sp
 800dab2:	f000 f849 	bl	800db48 <_fstat_r>
 800dab6:	2800      	cmp	r0, #0
 800dab8:	dbed      	blt.n	800da96 <__swhatbuf_r+0x12>
 800daba:	9901      	ldr	r1, [sp, #4]
 800dabc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dac0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dac4:	4259      	negs	r1, r3
 800dac6:	4159      	adcs	r1, r3
 800dac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dacc:	e7eb      	b.n	800daa6 <__swhatbuf_r+0x22>

0800dace <__smakebuf_r>:
 800dace:	898b      	ldrh	r3, [r1, #12]
 800dad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dad2:	079d      	lsls	r5, r3, #30
 800dad4:	4606      	mov	r6, r0
 800dad6:	460c      	mov	r4, r1
 800dad8:	d507      	bpl.n	800daea <__smakebuf_r+0x1c>
 800dada:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dade:	6023      	str	r3, [r4, #0]
 800dae0:	6123      	str	r3, [r4, #16]
 800dae2:	2301      	movs	r3, #1
 800dae4:	6163      	str	r3, [r4, #20]
 800dae6:	b003      	add	sp, #12
 800dae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daea:	466a      	mov	r2, sp
 800daec:	ab01      	add	r3, sp, #4
 800daee:	f7ff ffc9 	bl	800da84 <__swhatbuf_r>
 800daf2:	9f00      	ldr	r7, [sp, #0]
 800daf4:	4605      	mov	r5, r0
 800daf6:	4639      	mov	r1, r7
 800daf8:	4630      	mov	r0, r6
 800dafa:	f7fe fe7b 	bl	800c7f4 <_malloc_r>
 800dafe:	b948      	cbnz	r0, 800db14 <__smakebuf_r+0x46>
 800db00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db04:	059a      	lsls	r2, r3, #22
 800db06:	d4ee      	bmi.n	800dae6 <__smakebuf_r+0x18>
 800db08:	f023 0303 	bic.w	r3, r3, #3
 800db0c:	f043 0302 	orr.w	r3, r3, #2
 800db10:	81a3      	strh	r3, [r4, #12]
 800db12:	e7e2      	b.n	800dada <__smakebuf_r+0xc>
 800db14:	89a3      	ldrh	r3, [r4, #12]
 800db16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db1e:	81a3      	strh	r3, [r4, #12]
 800db20:	9b01      	ldr	r3, [sp, #4]
 800db22:	6020      	str	r0, [r4, #0]
 800db24:	b15b      	cbz	r3, 800db3e <__smakebuf_r+0x70>
 800db26:	4630      	mov	r0, r6
 800db28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db2c:	f000 f81e 	bl	800db6c <_isatty_r>
 800db30:	b128      	cbz	r0, 800db3e <__smakebuf_r+0x70>
 800db32:	89a3      	ldrh	r3, [r4, #12]
 800db34:	f023 0303 	bic.w	r3, r3, #3
 800db38:	f043 0301 	orr.w	r3, r3, #1
 800db3c:	81a3      	strh	r3, [r4, #12]
 800db3e:	89a3      	ldrh	r3, [r4, #12]
 800db40:	431d      	orrs	r5, r3
 800db42:	81a5      	strh	r5, [r4, #12]
 800db44:	e7cf      	b.n	800dae6 <__smakebuf_r+0x18>
	...

0800db48 <_fstat_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	2300      	movs	r3, #0
 800db4c:	4d06      	ldr	r5, [pc, #24]	@ (800db68 <_fstat_r+0x20>)
 800db4e:	4604      	mov	r4, r0
 800db50:	4608      	mov	r0, r1
 800db52:	4611      	mov	r1, r2
 800db54:	602b      	str	r3, [r5, #0]
 800db56:	f7f3 fb09 	bl	800116c <_fstat>
 800db5a:	1c43      	adds	r3, r0, #1
 800db5c:	d102      	bne.n	800db64 <_fstat_r+0x1c>
 800db5e:	682b      	ldr	r3, [r5, #0]
 800db60:	b103      	cbz	r3, 800db64 <_fstat_r+0x1c>
 800db62:	6023      	str	r3, [r4, #0]
 800db64:	bd38      	pop	{r3, r4, r5, pc}
 800db66:	bf00      	nop
 800db68:	200017a8 	.word	0x200017a8

0800db6c <_isatty_r>:
 800db6c:	b538      	push	{r3, r4, r5, lr}
 800db6e:	2300      	movs	r3, #0
 800db70:	4d05      	ldr	r5, [pc, #20]	@ (800db88 <_isatty_r+0x1c>)
 800db72:	4604      	mov	r4, r0
 800db74:	4608      	mov	r0, r1
 800db76:	602b      	str	r3, [r5, #0]
 800db78:	f7f3 fb07 	bl	800118a <_isatty>
 800db7c:	1c43      	adds	r3, r0, #1
 800db7e:	d102      	bne.n	800db86 <_isatty_r+0x1a>
 800db80:	682b      	ldr	r3, [r5, #0]
 800db82:	b103      	cbz	r3, 800db86 <_isatty_r+0x1a>
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	bd38      	pop	{r3, r4, r5, pc}
 800db88:	200017a8 	.word	0x200017a8

0800db8c <_raise_r>:
 800db8c:	291f      	cmp	r1, #31
 800db8e:	b538      	push	{r3, r4, r5, lr}
 800db90:	4605      	mov	r5, r0
 800db92:	460c      	mov	r4, r1
 800db94:	d904      	bls.n	800dba0 <_raise_r+0x14>
 800db96:	2316      	movs	r3, #22
 800db98:	6003      	str	r3, [r0, #0]
 800db9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db9e:	bd38      	pop	{r3, r4, r5, pc}
 800dba0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dba2:	b112      	cbz	r2, 800dbaa <_raise_r+0x1e>
 800dba4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dba8:	b94b      	cbnz	r3, 800dbbe <_raise_r+0x32>
 800dbaa:	4628      	mov	r0, r5
 800dbac:	f000 f830 	bl	800dc10 <_getpid_r>
 800dbb0:	4622      	mov	r2, r4
 800dbb2:	4601      	mov	r1, r0
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbba:	f000 b817 	b.w	800dbec <_kill_r>
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d00a      	beq.n	800dbd8 <_raise_r+0x4c>
 800dbc2:	1c59      	adds	r1, r3, #1
 800dbc4:	d103      	bne.n	800dbce <_raise_r+0x42>
 800dbc6:	2316      	movs	r3, #22
 800dbc8:	6003      	str	r3, [r0, #0]
 800dbca:	2001      	movs	r0, #1
 800dbcc:	e7e7      	b.n	800db9e <_raise_r+0x12>
 800dbce:	2100      	movs	r1, #0
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dbd6:	4798      	blx	r3
 800dbd8:	2000      	movs	r0, #0
 800dbda:	e7e0      	b.n	800db9e <_raise_r+0x12>

0800dbdc <raise>:
 800dbdc:	4b02      	ldr	r3, [pc, #8]	@ (800dbe8 <raise+0xc>)
 800dbde:	4601      	mov	r1, r0
 800dbe0:	6818      	ldr	r0, [r3, #0]
 800dbe2:	f7ff bfd3 	b.w	800db8c <_raise_r>
 800dbe6:	bf00      	nop
 800dbe8:	20000300 	.word	0x20000300

0800dbec <_kill_r>:
 800dbec:	b538      	push	{r3, r4, r5, lr}
 800dbee:	2300      	movs	r3, #0
 800dbf0:	4d06      	ldr	r5, [pc, #24]	@ (800dc0c <_kill_r+0x20>)
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	4608      	mov	r0, r1
 800dbf6:	4611      	mov	r1, r2
 800dbf8:	602b      	str	r3, [r5, #0]
 800dbfa:	f7f3 fa58 	bl	80010ae <_kill>
 800dbfe:	1c43      	adds	r3, r0, #1
 800dc00:	d102      	bne.n	800dc08 <_kill_r+0x1c>
 800dc02:	682b      	ldr	r3, [r5, #0]
 800dc04:	b103      	cbz	r3, 800dc08 <_kill_r+0x1c>
 800dc06:	6023      	str	r3, [r4, #0]
 800dc08:	bd38      	pop	{r3, r4, r5, pc}
 800dc0a:	bf00      	nop
 800dc0c:	200017a8 	.word	0x200017a8

0800dc10 <_getpid_r>:
 800dc10:	f7f3 ba46 	b.w	80010a0 <_getpid>

0800dc14 <_init>:
 800dc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc16:	bf00      	nop
 800dc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc1a:	bc08      	pop	{r3}
 800dc1c:	469e      	mov	lr, r3
 800dc1e:	4770      	bx	lr

0800dc20 <_fini>:
 800dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc22:	bf00      	nop
 800dc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc26:	bc08      	pop	{r3}
 800dc28:	469e      	mov	lr, r3
 800dc2a:	4770      	bx	lr
