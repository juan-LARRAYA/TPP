
BQ29330_BLUEPILL_ORIGINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080058b8  080058b8  000068b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a00  08005a00  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a00  08005a00  00006a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a08  08005a08  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a08  08005a08  00006a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a0c  08005a0c  00006a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005a10  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  2000005c  08005a6c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08005a6c  00007378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001244d  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003088  00000000  00000000  000194d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0001c560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcb  00000000  00000000  0001d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a41e  00000000  00000000  0001e4cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bde  00000000  00000000  000388e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009237c  00000000  00000000  000504c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2843  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f10  00000000  00000000  000e2888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000e7798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	080058a0 	.word	0x080058a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	080058a0 	.word	0x080058a0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	@ 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <MX_ADC1_Init+0x94>)
 800077e:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <MX_ADC1_Init+0x98>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_ADC1_Init+0x94>)
 8000784:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_ADC1_Init+0x94>)
 800078c:	2201      	movs	r2, #1
 800078e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <MX_ADC1_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000796:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_ADC1_Init+0x94>)
 8000798:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800079c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <MX_ADC1_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_ADC1_Init+0x94>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007aa:	4815      	ldr	r0, [pc, #84]	@ (8000800 <MX_ADC1_Init+0x94>)
 80007ac:	f000 fed4 	bl	8001558 <HAL_ADC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80007b6:	f000 fbd7 	bl	8000f68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007be:	2301      	movs	r3, #1
 80007c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007c2:	2307      	movs	r3, #7
 80007c4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_ADC1_Init+0x94>)
 80007cc:	f001 f954 	bl	8001a78 <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 fbc7 	bl	8000f68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007da:	2302      	movs	r3, #2
 80007dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007de:	2302      	movs	r3, #2
 80007e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	@ (8000800 <MX_ADC1_Init+0x94>)
 80007e8:	f001 f946 	bl	8001a78 <HAL_ADC_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80007f2:	f000 fbb9 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000078 	.word	0x20000078
 8000804:	40012400 	.word	0x40012400

08000808 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a2c      	ldr	r2, [pc, #176]	@ (80008d4 <HAL_ADC_MspInit+0xcc>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d151      	bne.n	80008cc <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000828:	4b2b      	ldr	r3, [pc, #172]	@ (80008d8 <HAL_ADC_MspInit+0xd0>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a2a      	ldr	r2, [pc, #168]	@ (80008d8 <HAL_ADC_MspInit+0xd0>)
 800082e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <HAL_ADC_MspInit+0xd0>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b25      	ldr	r3, [pc, #148]	@ (80008d8 <HAL_ADC_MspInit+0xd0>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a24      	ldr	r2, [pc, #144]	@ (80008d8 <HAL_ADC_MspInit+0xd0>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b22      	ldr	r3, [pc, #136]	@ (80008d8 <HAL_ADC_MspInit+0xd0>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Vbat1_Pin|Vbat2_Pin;
 8000858:	2306      	movs	r3, #6
 800085a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085c:	2303      	movs	r3, #3
 800085e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	481d      	ldr	r0, [pc, #116]	@ (80008dc <HAL_ADC_MspInit+0xd4>)
 8000868:	f001 fe04 	bl	8002474 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800086c:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 800086e:	4a1d      	ldr	r2, [pc, #116]	@ (80008e4 <HAL_ADC_MspInit+0xdc>)
 8000870:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000872:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000878:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 8000880:	2280      	movs	r2, #128	@ 0x80
 8000882:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 8000886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800088a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 800088e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000892:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 8000896:	2220      	movs	r2, #32
 8000898:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008a0:	480f      	ldr	r0, [pc, #60]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 80008a2:	f001 fbf9 	bl	8002098 <HAL_DMA_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80008ac:	f000 fb5c 	bl	8000f68 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a0b      	ldr	r2, [pc, #44]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 80008b4:	621a      	str	r2, [r3, #32]
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2012      	movs	r0, #18
 80008c2:	f001 fbb2 	bl	800202a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80008c6:	2012      	movs	r0, #18
 80008c8:	f001 fbcb 	bl	8002062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40012400 	.word	0x40012400
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010800 	.word	0x40010800
 80008e0:	200000a8 	.word	0x200000a8
 80008e4:	40020008 	.word	0x40020008

080008e8 <BMSVoltageCorrection>:

/* USER CODE BEGIN 1 */
uint16_t currentScale(uint16_t rawValue){
	  return  (uint16_t) rawValue  * CONVERSION_FACTOR;
}
uint16_t BMSVoltageCorrection(uint16_t rawValue){
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
	  return (uint16_t) ((975 - rawValue)*100/15);
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	f5c3 7373 	rsb	r3, r3, #972	@ 0x3cc
 80008f8:	3303      	adds	r3, #3
 80008fa:	2264      	movs	r2, #100	@ 0x64
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	4a06      	ldr	r2, [pc, #24]	@ (800091c <BMSVoltageCorrection+0x34>)
 8000902:	fb82 1203 	smull	r1, r2, r2, r3
 8000906:	441a      	add	r2, r3
 8000908:	10d2      	asrs	r2, r2, #3
 800090a:	17db      	asrs	r3, r3, #31
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	b29b      	uxth	r3, r3
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	88888889 	.word	0x88888889

08000920 <BQ29330_ReadFunctionControl>:



// Lee el valor actual del registro FUNCTION_CONTROL (0x03) del BQ29330
HAL_StatusTypeDef BQ29330_ReadFunctionControl(BQ29330_Registers reg, uint8_t *valor_leido)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af02      	add	r7, sp, #8
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[1];
    buffer[0] = reg; 		// Dirección del registro
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	733b      	strb	r3, [r7, #12]
    // Paso 1: Enviar la dirección del registro que queremos leer (0x03)
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 1, HAL_MAX_DELAY);
 8000930:	f107 020c 	add.w	r2, r7, #12
 8000934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	2140      	movs	r1, #64	@ 0x40
 800093e:	480c      	ldr	r0, [pc, #48]	@ (8000970 <BQ29330_ReadFunctionControl+0x50>)
 8000940:	f002 f892 	bl	8002a68 <HAL_I2C_Master_Transmit>
 8000944:	4603      	mov	r3, r0
 8000946:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;  // Si falla al enviar la dirección del registro, retornamos el error
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <BQ29330_ReadFunctionControl+0x32>
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	e009      	b.n	8000966 <BQ29330_ReadFunctionControl+0x46>
    // Paso 2: Leer un byte desde el dispositivo (valor del registro FUNCTION_CONTROL)
    return HAL_I2C_Master_Receive(&hi2c1, BMS_I2C_ADDRESS, valor_leido, 1, HAL_MAX_DELAY);  // Devolver el estado de la operación y el valor leído en *valor_leido
 8000952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	2140      	movs	r1, #64	@ 0x40
 800095e:	4804      	ldr	r0, [pc, #16]	@ (8000970 <BQ29330_ReadFunctionControl+0x50>)
 8000960:	f002 f980 	bl	8002c64 <HAL_I2C_Master_Receive>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000ec 	.word	0x200000ec

08000974 <BQ29330_WriteRegister>:



// Función para escribir en un registro del BQ29330
HAL_StatusTypeDef BQ29330_WriteRegister(BQ29330_Registers reg, uint8_t data)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af02      	add	r7, sp, #8
 800097a:	4603      	mov	r3, r0
 800097c:	460a      	mov	r2, r1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	4613      	mov	r3, r2
 8000982:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = reg; 		// Dirección del registro
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;        // Dato a escribir
 8000988:	79bb      	ldrb	r3, [r7, #6]
 800098a:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 800098c:	f107 020c 	add.w	r2, r7, #12
 8000990:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2302      	movs	r3, #2
 8000998:	2140      	movs	r1, #64	@ 0x40
 800099a:	4804      	ldr	r0, [pc, #16]	@ (80009ac <BQ29330_WriteRegister+0x38>)
 800099c:	f002 f864 	bl	8002a68 <HAL_I2C_Master_Transmit>
 80009a0:	4603      	mov	r3, r0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000ec 	.word	0x200000ec

080009b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_DMA_Init+0x38>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a0b      	ldr	r2, [pc, #44]	@ (80009e8 <MX_DMA_Init+0x38>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6153      	str	r3, [r2, #20]
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_DMA_Init+0x38>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	200b      	movs	r0, #11
 80009d4:	f001 fb29 	bl	800202a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009d8:	200b      	movs	r0, #11
 80009da:	f001 fb42 	bl	8002062 <HAL_NVIC_EnableIRQ>

}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a00:	4b29      	ldr	r3, [pc, #164]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a28      	ldr	r2, [pc, #160]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a18:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a48:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a16      	ldr	r2, [pc, #88]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0308 	and.w	r3, r3, #8
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activador_GPIO_Port, activador_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a66:	4811      	ldr	r0, [pc, #68]	@ (8000aac <MX_GPIO_Init+0xc0>)
 8000a68:	f001 fe88 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activador_Pin;
 8000a6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(activador_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4619      	mov	r1, r3
 8000a84:	4809      	ldr	r0, [pc, #36]	@ (8000aac <MX_GPIO_Init+0xc0>)
 8000a86:	f001 fcf5 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a90:	2303      	movs	r3, #3
 8000a92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a9c:	f001 fcea 	bl	8002474 <HAL_GPIO_Init>

}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40011000 	.word	0x40011000
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000aba:	4a13      	ldr	r2, [pc, #76]	@ (8000b08 <MX_I2C1_Init+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ac0:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <MX_I2C1_Init+0x58>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ad2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ad6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000af2:	f001 fe75 	bl	80027e0 <HAL_I2C_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000afc:	f000 fa34 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000ec 	.word	0x200000ec
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	000186a0 	.word	0x000186a0

08000b10 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b16:	4a13      	ldr	r2, [pc, #76]	@ (8000b64 <MX_I2C2_Init+0x54>)
 8000b18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b1c:	4a12      	ldr	r2, [pc, #72]	@ (8000b68 <MX_I2C2_Init+0x58>)
 8000b1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b4e:	f001 fe47 	bl	80027e0 <HAL_I2C_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b58:	f000 fa06 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000140 	.word	0x20000140
 8000b64:	40005800 	.word	0x40005800
 8000b68:	000186a0 	.word	0x000186a0

08000b6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a2b      	ldr	r2, [pc, #172]	@ (8000c34 <HAL_I2C_MspInit+0xc8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d124      	bne.n	8000bd6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a29      	ldr	r2, [pc, #164]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ba4:	23c0      	movs	r3, #192	@ 0xc0
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba8:	2312      	movs	r3, #18
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4821      	ldr	r0, [pc, #132]	@ (8000c3c <HAL_I2C_MspInit+0xd0>)
 8000bb8:	f001 fc5c 	bl	8002474 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000bc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bc6:	61d3      	str	r3, [r2, #28]
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000bd4:	e029      	b.n	8000c2a <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a19      	ldr	r2, [pc, #100]	@ (8000c40 <HAL_I2C_MspInit+0xd4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d124      	bne.n	8000c2a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a14      	ldr	r2, [pc, #80]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bf8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfe:	2312      	movs	r3, #18
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <HAL_I2C_MspInit+0xd0>)
 8000c0e:	f001 fc31 	bl	8002474 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000c18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c1c:	61d3      	str	r3, [r2, #28]
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	@ 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	40005800 	.word	0x40005800

08000c44 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t convCompleted=0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	convCompleted=1;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	@ (8000c5c <HAL_ADC_ConvCpltCallback+0x18>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	20000194 	.word	0x20000194

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	@ 0x30
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c66:	f000 fbf1 	bl	800144c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6a:	f000 f921 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6e:	f7ff febd 	bl	80009ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000c72:	f7ff fe9d 	bl	80009b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000c76:	f000 fb25 	bl	80012c4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000c7a:	f7ff fd77 	bl	800076c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c7e:	f000 fa4b 	bl	8001118 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000c82:	f7ff ff17 	bl	8000ab4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c86:	f7ff ff43 	bl	8000b10 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //start PWMs and set the duty to 50%
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4880      	ldr	r0, [pc, #512]	@ (8000e90 <main+0x230>)
 8000c8e:	f003 faf1 	bl	8004274 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period/2);
 8000c92:	4b7f      	ldr	r3, [pc, #508]	@ (8000e90 <main+0x230>)
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	4b7e      	ldr	r3, [pc, #504]	@ (8000e90 <main+0x230>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	0852      	lsrs	r2, r2, #1
 8000c9c:	635a      	str	r2, [r3, #52]	@ 0x34


  //ADC Variables
   uint16_t rawValues[2];
   HAL_ADC_Start_DMA(&hadc1,(uint32_t *) rawValues, 2);
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	487b      	ldr	r0, [pc, #492]	@ (8000e94 <main+0x234>)
 8000ca8:	f000 fd2e 	bl	8001708 <HAL_ADC_Start_DMA>

   //BMS
   BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL,0x06);
 8000cac:	2106      	movs	r1, #6
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f7ff fe60 	bl	8000974 <BQ29330_WriteRegister>
   BQ29330_Device bq = { .hi2c = &hi2c1 };
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
 8000cc2:	615a      	str	r2, [r3, #20]
 8000cc4:	619a      	str	r2, [r3, #24]
 8000cc6:	4b74      	ldr	r3, [pc, #464]	@ (8000e98 <main+0x238>)
 8000cc8:	607b      	str	r3, [r7, #4]
   int n = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//read all adcs
	while(!convCompleted);
 8000cce:	bf00      	nop
 8000cd0:	4b72      	ldr	r3, [pc, #456]	@ (8000e9c <main+0x23c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0fb      	beq.n	8000cd0 <main+0x70>

	uint16_t cell_mas = rawValues[0] * CONVERSION_FACTOR;
 8000cd8:	8c3b      	ldrh	r3, [r7, #32]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fcbc 	bl	8000658 <__aeabi_i2d>
 8000ce0:	a369      	add	r3, pc, #420	@ (adr r3, 8000e88 <main+0x228>)
 8000ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce6:	f7ff fa3b 	bl	8000160 <__aeabi_dmul>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f7ff fd1b 	bl	800072c <__aeabi_d2uiz>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t cell_menos = rawValues[1] * CONVERSION_FACTOR;
 8000cfa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fcab 	bl	8000658 <__aeabi_i2d>
 8000d02:	a361      	add	r3, pc, #388	@ (adr r3, 8000e88 <main+0x228>)
 8000d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d08:	f7ff fa2a 	bl	8000160 <__aeabi_dmul>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	460b      	mov	r3, r1
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fd0a 	bl	800072c <__aeabi_d2uiz>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	853b      	strh	r3, [r7, #40]	@ 0x28
	uint16_t difference = BMSVoltageCorrection(cell_mas - cell_menos); //correcion tener la tension de la celda
 8000d1c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8000d1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fddf 	bl	80008e8 <BMSVoltageCorrection>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	//sendUsartMsg("Tension cell +: ", rawValues[0]);
	sendUsartMsg("Tension cell -: ", rawValues[1]);
 8000d2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000d30:	4619      	mov	r1, r3
 8000d32:	485b      	ldr	r0, [pc, #364]	@ (8000ea0 <main+0x240>)
 8000d34:	f000 fb3c 	bl	80013b0 <sendUsartMsg>


	//BMS 29330

    //escribo
    BQ29330_WriteRegister(BQ29330_STATE_CONTROL, 0x0C);   // WDDIS = 1, all else = 0
 8000d38:	210c      	movs	r1, #12
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f7ff fe1a 	bl	8000974 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_FUNCTION_CONTROL, 0x01); // VMEN||BAT = 0
 8000d40:	2101      	movs	r1, #1
 8000d42:	2003      	movs	r0, #3
 8000d44:	f7ff fe16 	bl	8000974 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_CELL, 0x01); 			   //
 8000d48:	2101      	movs	r1, #1
 8000d4a:	2004      	movs	r0, #4
 8000d4c:	f7ff fe12 	bl	8000974 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLV, 0x00);              // 50 mV 0x00
 8000d50:	2100      	movs	r1, #0
 8000d52:	2005      	movs	r0, #5
 8000d54:	f7ff fe0e 	bl	8000974 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLD, 0x0F);              // 31 ms
 8000d58:	210f      	movs	r1, #15
 8000d5a:	2006      	movs	r0, #6
 8000d5c:	f7ff fe0a 	bl	8000974 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCC, 0x00);              // 475 mV y 915 μs
 8000d60:	2100      	movs	r1, #0
 8000d62:	2007      	movs	r0, #7
 8000d64:	f7ff fe06 	bl	8000974 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCD, 0x00);              // idem for discharge
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2008      	movs	r0, #8
 8000d6c:	f7ff fe02 	bl	8000974 <BQ29330_WriteRegister>
    n++;
 8000d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d72:	3301      	adds	r3, #1
 8000d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    n = n%2;
 8000d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	bfb8      	it	lt
 8000d80:	425b      	neglt	r3, r3
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c


    //leo
	HAL_StatusTypeDef statusI2c = BQ29330_ReadFunctionControl(BQ29330_STATUS, &bq.BQ29330_status);
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	3310      	adds	r3, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff fdc8 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25



	//LEO el registro que escribi
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_OUTPUT_CONTROL, &bq.BQ29330_output_countrol);
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	3311      	adds	r3, #17
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff fdbf 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_STATE_CONTROL, &bq.BQ29330_state_countrol);
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	3312      	adds	r3, #18
 8000dac:	4619      	mov	r1, r3
 8000dae:	2002      	movs	r0, #2
 8000db0:	f7ff fdb6 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000db4:	4603      	mov	r3, r0
 8000db6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_FUNCTION_CONTROL, &bq.BQ29330_function_control);
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	3313      	adds	r3, #19
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f7ff fdad 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_CELL, &bq.BQ29330_cell);
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	3314      	adds	r3, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f7ff fda4 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_OLV, &bq.BQ29330_OLV);
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	3315      	adds	r3, #21
 8000de2:	4619      	mov	r1, r3
 8000de4:	2005      	movs	r0, #5
 8000de6:	f7ff fd9b 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_OLD, &bq.BQ29330_OLD);
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	3316      	adds	r3, #22
 8000df4:	4619      	mov	r1, r3
 8000df6:	2006      	movs	r0, #6
 8000df8:	f7ff fd92 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_SCC, &bq.BQ29330_SCC);
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	3317      	adds	r3, #23
 8000e06:	4619      	mov	r1, r3
 8000e08:	2007      	movs	r0, #7
 8000e0a:	f7ff fd89 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_SCD, &bq.BQ29330_SCD);
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	3318      	adds	r3, #24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	2008      	movs	r0, #8
 8000e1c:	f7ff fd80 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000e20:	4603      	mov	r3, r0
 8000e22:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	sendUsartMsg("SCC (Short circuit in charge): ", bq.BQ29330_SCC);
	sendUsartMsg("SCD (Short circuit in discharge): ", bq.BQ29330_SCD);

*/
	//si hay una fall reiniciar el bq
	if(bq.BQ29330_status & (1U << 4) || (bq.BQ29330_status && bq.BQ29330_status != 16)){
 8000e26:	7d3b      	ldrb	r3, [r7, #20]
 8000e28:	f003 0310 	and.w	r3, r3, #16
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d105      	bne.n	8000e3c <main+0x1dc>
 8000e30:	7d3b      	ldrb	r3, [r7, #20]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d018      	beq.n	8000e68 <main+0x208>
 8000e36:	7d3b      	ldrb	r3, [r7, #20]
 8000e38:	2b10      	cmp	r3, #16
 8000e3a:	d015      	beq.n	8000e68 <main+0x208>
	    BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL,0x07);
 8000e3c:	2107      	movs	r1, #7
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff fd98 	bl	8000974 <BQ29330_WriteRegister>
	    BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL,0x06);
 8000e44:	2106      	movs	r1, #6
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fd94 	bl	8000974 <BQ29330_WriteRegister>
		statusI2c = BQ29330_ReadFunctionControl(BQ29330_STATUS, &bq.BQ29330_status);
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	3310      	adds	r3, #16
 8000e50:	4619      	mov	r1, r3
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff fd64 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	    sendUsartMsg("Estatus del bms despues del latch: ", bq.BQ29330_status);
 8000e5e:	7d3b      	ldrb	r3, [r7, #20]
 8000e60:	4619      	mov	r1, r3
 8000e62:	4810      	ldr	r0, [pc, #64]	@ (8000ea4 <main+0x244>)
 8000e64:	f000 faa4 	bl	80013b0 <sendUsartMsg>
    }

	sendUsartMsg("\n", 1);
 8000e68:	2101      	movs	r1, #1
 8000e6a:	480f      	ldr	r0, [pc, #60]	@ (8000ea8 <main+0x248>)
 8000e6c:	f000 faa0 	bl	80013b0 <sendUsartMsg>
*/




	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e74:	480d      	ldr	r0, [pc, #52]	@ (8000eac <main+0x24c>)
 8000e76:	f001 fc99 	bl	80027ac <HAL_GPIO_TogglePin>

	HAL_Delay(DELAY);
 8000e7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e7e:	f000 fb47 	bl	8001510 <HAL_Delay>
  {
 8000e82:	e724      	b.n	8000cce <main+0x6e>
 8000e84:	f3af 8000 	nop.w
 8000e88:	17717718 	.word	0x17717718
 8000e8c:	3fe77177 	.word	0x3fe77177
 8000e90:	2000019c 	.word	0x2000019c
 8000e94:	20000078 	.word	0x20000078
 8000e98:	200000ec 	.word	0x200000ec
 8000e9c:	20000194 	.word	0x20000194
 8000ea0:	080058b8 	.word	0x080058b8
 8000ea4:	080058cc 	.word	0x080058cc
 8000ea8:	080058f0 	.word	0x080058f0
 8000eac:	40011000 	.word	0x40011000

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b094      	sub	sp, #80	@ 0x50
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eba:	2228      	movs	r2, #40	@ 0x28
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f004 f85e 	bl	8004f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000efa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000efc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 fc9e 	bl	8003848 <HAL_RCC_OscConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f12:	f000 f829 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f16:	230f      	movs	r3, #15
 8000f18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2101      	movs	r1, #1
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 ff0a 	bl	8003d4c <HAL_RCC_ClockConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f3e:	f000 f813 	bl	8000f68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f42:	2302      	movs	r3, #2
 8000f44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000f46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f4a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 f88a 	bl	8004068 <HAL_RCCEx_PeriphCLKConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f5a:	f000 f805 	bl	8000f68 <Error_Handler>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3750      	adds	r7, #80	@ 0x50
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		sendUsartMsg("Estoy en error handle ", 404);
 8000f70:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8000f74:	4801      	ldr	r0, [pc, #4]	@ (8000f7c <Error_Handler+0x14>)
 8000f76:	f000 fa1b 	bl	80013b0 <sendUsartMsg>
 8000f7a:	e7f9      	b.n	8000f70 <Error_Handler+0x8>
 8000f7c:	080058f4 	.word	0x080058f4

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <HAL_MspInit+0x5c>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <HAL_MspInit+0x5c>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6193      	str	r3, [r2, #24]
 8000f92:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <HAL_MspInit+0x5c>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <HAL_MspInit+0x5c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	@ (8000fdc <HAL_MspInit+0x5c>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa8:	61d3      	str	r3, [r2, #28]
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <HAL_MspInit+0x5c>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <HAL_MspInit+0x60>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <HAL_MspInit+0x60>)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	sendUsartMsg("Estoy en NMI_Handler ", 404);
 8000fe8:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8000fec:	4801      	ldr	r0, [pc, #4]	@ (8000ff4 <NMI_Handler+0x10>)
 8000fee:	f000 f9df 	bl	80013b0 <sendUsartMsg>
 8000ff2:	e7f9      	b.n	8000fe8 <NMI_Handler+0x4>
 8000ff4:	0800590c 	.word	0x0800590c

08000ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	sendUsartMsg("Estoy en HardFault_Handler ", 404);
 8000ffc:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8001000:	4801      	ldr	r0, [pc, #4]	@ (8001008 <HardFault_Handler+0x10>)
 8001002:	f000 f9d5 	bl	80013b0 <sendUsartMsg>
 8001006:	e7f9      	b.n	8000ffc <HardFault_Handler+0x4>
 8001008:	08005924 	.word	0x08005924

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	sendUsartMsg("Estoy en MemManage_Handler ", 404);
 8001010:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8001014:	4801      	ldr	r0, [pc, #4]	@ (800101c <MemManage_Handler+0x10>)
 8001016:	f000 f9cb 	bl	80013b0 <sendUsartMsg>
 800101a:	e7f9      	b.n	8001010 <MemManage_Handler+0x4>
 800101c:	08005940 	.word	0x08005940

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	sendUsartMsg("Estoy en BusFault_Handler ", 404);
 8001024:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8001028:	4801      	ldr	r0, [pc, #4]	@ (8001030 <BusFault_Handler+0x10>)
 800102a:	f000 f9c1 	bl	80013b0 <sendUsartMsg>
 800102e:	e7f9      	b.n	8001024 <BusFault_Handler+0x4>
 8001030:	0800595c 	.word	0x0800595c

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	sendUsartMsg("Estoy en UsageFault_Handler ", 404);
 8001038:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800103c:	4801      	ldr	r0, [pc, #4]	@ (8001044 <UsageFault_Handler+0x10>)
 800103e:	f000 f9b7 	bl	80013b0 <sendUsartMsg>
 8001042:	e7f9      	b.n	8001038 <UsageFault_Handler+0x4>
 8001044:	08005978 	.word	0x08005978

08001048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr

0800106c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001070:	f000 fa32 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <DMA1_Channel1_IRQHandler+0x10>)
 800107e:	f001 f8c5 	bl	800220c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200000a8 	.word	0x200000a8

0800108c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <ADC1_2_IRQHandler+0x10>)
 8001092:	f000 fc17 	bl	80018c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000078 	.word	0x20000078

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f003 ff5e 	bl	8004f90 <__errno>
 80010d4:	4603      	mov	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <_sbrk+0x64>)
 80010f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20005000 	.word	0x20005000
 8001100:	00000400 	.word	0x00000400
 8001104:	20000198 	.word	0x20000198
 8001108:	20000378 	.word	0x20000378

0800110c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b092      	sub	sp, #72	@ 0x48
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]
 800113a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2220      	movs	r2, #32
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f003 ff1c 	bl	8004f80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001148:	4b33      	ldr	r3, [pc, #204]	@ (8001218 <MX_TIM1_Init+0x100>)
 800114a:	4a34      	ldr	r2, [pc, #208]	@ (800121c <MX_TIM1_Init+0x104>)
 800114c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800114e:	4b32      	ldr	r3, [pc, #200]	@ (8001218 <MX_TIM1_Init+0x100>)
 8001150:	2201      	movs	r2, #1
 8001152:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b30      	ldr	r3, [pc, #192]	@ (8001218 <MX_TIM1_Init+0x100>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 750;
 800115a:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <MX_TIM1_Init+0x100>)
 800115c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001160:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001162:	4b2d      	ldr	r3, [pc, #180]	@ (8001218 <MX_TIM1_Init+0x100>)
 8001164:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001168:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800116a:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <MX_TIM1_Init+0x100>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <MX_TIM1_Init+0x100>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001176:	4828      	ldr	r0, [pc, #160]	@ (8001218 <MX_TIM1_Init+0x100>)
 8001178:	f003 f82c 	bl	80041d4 <HAL_TIM_PWM_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001182:	f7ff fef1 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800118e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001192:	4619      	mov	r1, r3
 8001194:	4820      	ldr	r0, [pc, #128]	@ (8001218 <MX_TIM1_Init+0x100>)
 8001196:	f003 fbeb 	bl	8004970 <HAL_TIMEx_MasterConfigSynchronization>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80011a0:	f7ff fee2 	bl	8000f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a4:	2360      	movs	r3, #96	@ 0x60
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011b0:	2300      	movs	r3, #0
 80011b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	4813      	ldr	r0, [pc, #76]	@ (8001218 <MX_TIM1_Init+0x100>)
 80011ca:	f003 f8f5 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80011d4:	f7ff fec8 	bl	8000f68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4807      	ldr	r0, [pc, #28]	@ (8001218 <MX_TIM1_Init+0x100>)
 80011fc:	f003 fc16 	bl	8004a2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001206:	f7ff feaf 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800120a:	4803      	ldr	r0, [pc, #12]	@ (8001218 <MX_TIM1_Init+0x100>)
 800120c:	f000 f826 	bl	800125c <HAL_TIM_MspPostInit>

}
 8001210:	bf00      	nop
 8001212:	3748      	adds	r7, #72	@ 0x48
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000019c 	.word	0x2000019c
 800121c:	40012c00 	.word	0x40012c00

08001220 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <HAL_TIM_PWM_MspInit+0x34>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10b      	bne.n	800124a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <HAL_TIM_PWM_MspInit+0x38>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <HAL_TIM_PWM_MspInit+0x38>)
 8001238:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_TIM_PWM_MspInit+0x38>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	40012c00 	.word	0x40012c00
 8001258:	40021000 	.word	0x40021000

0800125c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a10      	ldr	r2, [pc, #64]	@ (80012b8 <HAL_TIM_MspPostInit+0x5c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d118      	bne.n	80012ae <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <HAL_TIM_MspPostInit+0x60>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a0e      	ldr	r2, [pc, #56]	@ (80012bc <HAL_TIM_MspPostInit+0x60>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <HAL_TIM_MspPostInit+0x60>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = WDI_32KHz_Pin;
 8001294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001298:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2302      	movs	r3, #2
 80012a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WDI_32KHz_GPIO_Port, &GPIO_InitStruct);
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <HAL_TIM_MspPostInit+0x64>)
 80012aa:	f001 f8e3 	bl	8002474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012ae:	bf00      	nop
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40012c00 	.word	0x40012c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010800 	.word	0x40010800

080012c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_USART1_UART_Init+0x4c>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <MX_USART1_UART_Init+0x50>)
 80012cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <MX_USART1_UART_Init+0x4c>)
 80012d0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_USART1_UART_Init+0x4c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_USART1_UART_Init+0x4c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <MX_USART1_UART_Init+0x4c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_USART1_UART_Init+0x4c>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <MX_USART1_UART_Init+0x4c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_USART1_UART_Init+0x4c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_USART1_UART_Init+0x4c>)
 80012fc:	f003 fbe7 	bl	8004ace <HAL_UART_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001306:	f7ff fe2f 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001e4 	.word	0x200001e4
 8001314:	40013800 	.word	0x40013800

08001318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a1c      	ldr	r2, [pc, #112]	@ (80013a4 <HAL_UART_MspInit+0x8c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d131      	bne.n	800139c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_UART_MspInit+0x90>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a1a      	ldr	r2, [pc, #104]	@ (80013a8 <HAL_UART_MspInit+0x90>)
 800133e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <HAL_UART_MspInit+0x90>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <HAL_UART_MspInit+0x90>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a14      	ldr	r2, [pc, #80]	@ (80013a8 <HAL_UART_MspInit+0x90>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_UART_MspInit+0x90>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800136c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	4619      	mov	r1, r3
 800137c:	480b      	ldr	r0, [pc, #44]	@ (80013ac <HAL_UART_MspInit+0x94>)
 800137e:	f001 f879 	bl	8002474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4619      	mov	r1, r3
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <HAL_UART_MspInit+0x94>)
 8001398:	f001 f86c 	bl	8002474 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010800 	.word	0x40010800

080013b0 <sendUsartMsg>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void sendUsartMsg(const char* label, uint16_t value) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b094      	sub	sp, #80	@ 0x50
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
    char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "%s %u \n", label, value);
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	f107 0008 	add.w	r0, r7, #8
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a0c      	ldr	r2, [pc, #48]	@ (80013f8 <sendUsartMsg+0x48>)
 80013c8:	2140      	movs	r1, #64	@ 0x40
 80013ca:	f003 fda5 	bl	8004f18 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7fe febc 	bl	8000150 <strlen>
 80013d8:	4603      	mov	r3, r0
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f107 0108 	add.w	r1, r7, #8
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e4:	4805      	ldr	r0, [pc, #20]	@ (80013fc <sendUsartMsg+0x4c>)
 80013e6:	f003 fbc2 	bl	8004b6e <HAL_UART_Transmit>
    HAL_Delay(10);
 80013ea:	200a      	movs	r0, #10
 80013ec:	f000 f890 	bl	8001510 <HAL_Delay>
}
 80013f0:	bf00      	nop
 80013f2:	3748      	adds	r7, #72	@ 0x48
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	08005998 	.word	0x08005998
 80013fc:	200001e4 	.word	0x200001e4

08001400 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001400:	f7ff fe84 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001404:	480b      	ldr	r0, [pc, #44]	@ (8001434 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001406:	490c      	ldr	r1, [pc, #48]	@ (8001438 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001408:	4a0c      	ldr	r2, [pc, #48]	@ (800143c <LoopFillZerobss+0x16>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a09      	ldr	r2, [pc, #36]	@ (8001440 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800141c:	4c09      	ldr	r4, [pc, #36]	@ (8001444 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142a:	f003 fdb7 	bl	8004f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800142e:	f7ff fc17 	bl	8000c60 <main>
  bx lr
 8001432:	4770      	bx	lr
  ldr r0, =_sdata
 8001434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001438:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800143c:	08005a10 	.word	0x08005a10
  ldr r2, =_sbss
 8001440:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001444:	20000378 	.word	0x20000378

08001448 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <CAN1_RX1_IRQHandler>
	...

0800144c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <HAL_Init+0x28>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a07      	ldr	r2, [pc, #28]	@ (8001474 <HAL_Init+0x28>)
 8001456:	f043 0310 	orr.w	r3, r3, #16
 800145a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 fdd9 	bl	8002014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001462:	200f      	movs	r0, #15
 8001464:	f000 f808 	bl	8001478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001468:	f7ff fd8a 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40022000 	.word	0x40022000

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <HAL_InitTick+0x54>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_InitTick+0x58>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800148e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fdf1 	bl	800207e <HAL_SYSTICK_Config>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00e      	b.n	80014c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d80a      	bhi.n	80014c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014b4:	f000 fdb9 	bl	800202a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4a06      	ldr	r2, [pc, #24]	@ (80014d4 <HAL_InitTick+0x5c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_IncTick+0x1c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <HAL_IncTick+0x20>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a03      	ldr	r2, [pc, #12]	@ (80014f8 <HAL_IncTick+0x20>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr
 80014f4:	20000008 	.word	0x20000008
 80014f8:	2000022c 	.word	0x2000022c

080014fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001500:	4b02      	ldr	r3, [pc, #8]	@ (800150c <HAL_GetTick+0x10>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	2000022c 	.word	0x2000022c

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff fff0 	bl	80014fc <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffe0 	bl	80014fc <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008

08001558 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e0be      	b.n	80016f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001584:	2b00      	cmp	r3, #0
 8001586:	d109      	bne.n	800159c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff f936 	bl	8000808 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fbbd 	bl	8001d1c <ADC_ConversionStop_Disable>
 80015a2:	4603      	mov	r3, r0
 80015a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 8099 	bne.w	80016e6 <HAL_ADC_Init+0x18e>
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f040 8095 	bne.w	80016e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015c4:	f023 0302 	bic.w	r3, r3, #2
 80015c8:	f043 0202 	orr.w	r2, r3, #2
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7b1b      	ldrb	r3, [r3, #12]
 80015de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015f0:	d003      	beq.n	80015fa <HAL_ADC_Init+0xa2>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d102      	bne.n	8001600 <HAL_ADC_Init+0xa8>
 80015fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015fe:	e000      	b.n	8001602 <HAL_ADC_Init+0xaa>
 8001600:	2300      	movs	r3, #0
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	7d1b      	ldrb	r3, [r3, #20]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d119      	bne.n	8001644 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7b1b      	ldrb	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d109      	bne.n	800162c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	3b01      	subs	r3, #1
 800161e:	035a      	lsls	r2, r3, #13
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	e00b      	b.n	8001644 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001630:	f043 0220 	orr.w	r2, r3, #32
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	430a      	orrs	r2, r1
 8001656:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <HAL_ADC_Init+0x1a8>)
 8001660:	4013      	ands	r3, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	430b      	orrs	r3, r1
 800166a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001674:	d003      	beq.n	800167e <HAL_ADC_Init+0x126>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d104      	bne.n	8001688 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	3b01      	subs	r3, #1
 8001684:	051b      	lsls	r3, r3, #20
 8001686:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	430a      	orrs	r2, r1
 800169a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <HAL_ADC_Init+0x1ac>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d10b      	bne.n	80016c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016c2:	e018      	b.n	80016f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c8:	f023 0312 	bic.w	r3, r3, #18
 80016cc:	f043 0210 	orr.w	r2, r3, #16
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d8:	f043 0201 	orr.w	r2, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80016e4:	e007      	b.n	80016f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ea:	f043 0210 	orr.w	r2, r3, #16
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	ffe1f7fd 	.word	0xffe1f7fd
 8001704:	ff1f0efe 	.word	0xff1f0efe

08001708 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a64      	ldr	r2, [pc, #400]	@ (80018b0 <HAL_ADC_Start_DMA+0x1a8>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d004      	beq.n	800172c <HAL_ADC_Start_DMA+0x24>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a63      	ldr	r2, [pc, #396]	@ (80018b4 <HAL_ADC_Start_DMA+0x1ac>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d106      	bne.n	800173a <HAL_ADC_Start_DMA+0x32>
 800172c:	4b60      	ldr	r3, [pc, #384]	@ (80018b0 <HAL_ADC_Start_DMA+0x1a8>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001734:	2b00      	cmp	r3, #0
 8001736:	f040 80b3 	bne.w	80018a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_ADC_Start_DMA+0x40>
 8001744:	2302      	movs	r3, #2
 8001746:	e0ae      	b.n	80018a6 <HAL_ADC_Start_DMA+0x19e>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 fa89 	bl	8001c68 <ADC_Enable>
 8001756:	4603      	mov	r3, r0
 8001758:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f040 809a 	bne.w	8001896 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001766:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a4e      	ldr	r2, [pc, #312]	@ (80018b4 <HAL_ADC_Start_DMA+0x1ac>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d105      	bne.n	800178c <HAL_ADC_Start_DMA+0x84>
 8001780:	4b4b      	ldr	r3, [pc, #300]	@ (80018b0 <HAL_ADC_Start_DMA+0x1a8>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d115      	bne.n	80017b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d026      	beq.n	80017f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017b6:	e01d      	b.n	80017f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a39      	ldr	r2, [pc, #228]	@ (80018b0 <HAL_ADC_Start_DMA+0x1a8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d004      	beq.n	80017d8 <HAL_ADC_Start_DMA+0xd0>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a38      	ldr	r2, [pc, #224]	@ (80018b4 <HAL_ADC_Start_DMA+0x1ac>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d10d      	bne.n	80017f4 <HAL_ADC_Start_DMA+0xec>
 80017d8:	4b35      	ldr	r3, [pc, #212]	@ (80018b0 <HAL_ADC_Start_DMA+0x1a8>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d006      	beq.n	800180e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	f023 0206 	bic.w	r2, r3, #6
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800180c:	e002      	b.n	8001814 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4a25      	ldr	r2, [pc, #148]	@ (80018b8 <HAL_ADC_Start_DMA+0x1b0>)
 8001822:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4a24      	ldr	r2, [pc, #144]	@ (80018bc <HAL_ADC_Start_DMA+0x1b4>)
 800182a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a23      	ldr	r2, [pc, #140]	@ (80018c0 <HAL_ADC_Start_DMA+0x1b8>)
 8001832:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0202 	mvn.w	r2, #2
 800183c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800184c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a18      	ldr	r0, [r3, #32]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	334c      	adds	r3, #76	@ 0x4c
 8001858:	4619      	mov	r1, r3
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f000 fc75 	bl	800214c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800186c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001870:	d108      	bne.n	8001884 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001880:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001882:	e00f      	b.n	80018a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001892:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001894:	e006      	b.n	80018a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800189e:	e001      	b.n	80018a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40012400 	.word	0x40012400
 80018b4:	40012800 	.word	0x40012800
 80018b8:	08001d9f 	.word	0x08001d9f
 80018bc:	08001e1b 	.word	0x08001e1b
 80018c0:	08001e37 	.word	0x08001e37

080018c4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f003 0320 	and.w	r3, r3, #32
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d03e      	beq.n	8001964 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d039      	beq.n	8001964 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001912:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001916:	d11d      	bne.n	8001954 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800191c:	2b00      	cmp	r3, #0
 800191e:	d119      	bne.n	8001954 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0220 	bic.w	r2, r2, #32
 800192e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001934:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff f975 	bl	8000c44 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f06f 0212 	mvn.w	r2, #18
 8001962:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196a:	2b00      	cmp	r3, #0
 800196c:	d04d      	beq.n	8001a0a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d048      	beq.n	8001a0a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001988:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800199a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800199e:	d012      	beq.n	80019c6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d125      	bne.n	80019fa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019b8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019bc:	d11d      	bne.n	80019fa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d119      	bne.n	80019fa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019d4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f2:	f043 0201 	orr.w	r2, r3, #1
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fa35 	bl	8001e6a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f06f 020c 	mvn.w	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d012      	beq.n	8001a3a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00d      	beq.n	8001a3a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a22:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f812 	bl	8001a54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0201 	mvn.w	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x20>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e0dc      	b.n	8001c52 <HAL_ADC_ConfigChannel+0x1da>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b06      	cmp	r3, #6
 8001aa6:	d81c      	bhi.n	8001ae2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3b05      	subs	r3, #5
 8001aba:	221f      	movs	r2, #31
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	4019      	ands	r1, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3b05      	subs	r3, #5
 8001ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ae0:	e03c      	b.n	8001b5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d81c      	bhi.n	8001b24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3b23      	subs	r3, #35	@ 0x23
 8001afc:	221f      	movs	r2, #31
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4019      	ands	r1, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	3b23      	subs	r3, #35	@ 0x23
 8001b16:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b22:	e01b      	b.n	8001b5c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	3b41      	subs	r3, #65	@ 0x41
 8001b36:	221f      	movs	r2, #31
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	4019      	ands	r1, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3b41      	subs	r3, #65	@ 0x41
 8001b50:	fa00 f203 	lsl.w	r2, r0, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b09      	cmp	r3, #9
 8001b62:	d91c      	bls.n	8001b9e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68d9      	ldr	r1, [r3, #12]
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	3b1e      	subs	r3, #30
 8001b76:	2207      	movs	r2, #7
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	4019      	ands	r1, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	6898      	ldr	r0, [r3, #8]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3b1e      	subs	r3, #30
 8001b90:	fa00 f203 	lsl.w	r2, r0, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	e019      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6919      	ldr	r1, [r3, #16]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	4413      	add	r3, r2
 8001bae:	2207      	movs	r2, #7
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	4019      	ands	r1, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	6898      	ldr	r0, [r3, #8]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d003      	beq.n	8001be2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bde:	2b11      	cmp	r3, #17
 8001be0:	d132      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c5c <HAL_ADC_ConfigChannel+0x1e4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d125      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d126      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c08:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b10      	cmp	r3, #16
 8001c10:	d11a      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a13      	ldr	r2, [pc, #76]	@ (8001c64 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	0c9a      	lsrs	r2, r3, #18
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c28:	e002      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f9      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x1b2>
 8001c36:	e007      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3c:	f043 0220 	orr.w	r2, r3, #32
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr
 8001c5c:	40012400 	.word	0x40012400
 8001c60:	20000000 	.word	0x20000000
 8001c64:	431bde83 	.word	0x431bde83

08001c68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d040      	beq.n	8001d08 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f042 0201 	orr.w	r2, r2, #1
 8001c94:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c96:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <ADC_Enable+0xac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d18 <ADC_Enable+0xb0>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	0c9b      	lsrs	r3, r3, #18
 8001ca2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ca4:	e002      	b.n	8001cac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f9      	bne.n	8001ca6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cb2:	f7ff fc23 	bl	80014fc <HAL_GetTick>
 8001cb6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cb8:	e01f      	b.n	8001cfa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cba:	f7ff fc1f 	bl	80014fc <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d918      	bls.n	8001cfa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d011      	beq.n	8001cfa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cda:	f043 0210 	orr.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce6:	f043 0201 	orr.w	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e007      	b.n	8001d0a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d1d8      	bne.n	8001cba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000
 8001d18:	431bde83 	.word	0x431bde83

08001d1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d12e      	bne.n	8001d94 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d46:	f7ff fbd9 	bl	80014fc <HAL_GetTick>
 8001d4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d4c:	e01b      	b.n	8001d86 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d4e:	f7ff fbd5 	bl	80014fc <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d914      	bls.n	8001d86 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d10d      	bne.n	8001d86 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6e:	f043 0210 	orr.w	r2, r3, #16
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e007      	b.n	8001d96 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d0dc      	beq.n	8001d4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d127      	bne.n	8001e08 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001dce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001dd2:	d115      	bne.n	8001e00 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d111      	bne.n	8001e00 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f7fe ff1f 	bl	8000c44 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e06:	e004      	b.n	8001e12 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	4798      	blx	r3
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff fe0a 	bl	8001a42 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e42:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e54:	f043 0204 	orr.w	r2, r3, #4
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7ff fe02 	bl	8001a66 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eae:	4a04      	ldr	r2, [pc, #16]	@ (8001ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	60d3      	str	r3, [r2, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec8:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <__NVIC_GetPriorityGrouping+0x18>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 0307 	and.w	r3, r3, #7
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	db0b      	blt.n	8001f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	f003 021f 	and.w	r2, r3, #31
 8001ef8:	4906      	ldr	r1, [pc, #24]	@ (8001f14 <__NVIC_EnableIRQ+0x34>)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	2001      	movs	r0, #1
 8001f02:	fa00 f202 	lsl.w	r2, r0, r2
 8001f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	@ (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	@ (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	@ 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe0:	d301      	bcc.n	8001fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00f      	b.n	8002006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <SysTick_Config+0x40>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fee:	210f      	movs	r1, #15
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ff4:	f7ff ff90 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <SysTick_Config+0x40>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	@ (8002010 <SysTick_Config+0x40>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ff2d 	bl	8001e7c <__NVIC_SetPriorityGrouping>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800203c:	f7ff ff42 	bl	8001ec4 <__NVIC_GetPriorityGrouping>
 8002040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	6978      	ldr	r0, [r7, #20]
 8002048:	f7ff ff90 	bl	8001f6c <NVIC_EncodePriority>
 800204c:	4602      	mov	r2, r0
 800204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff5f 	bl	8001f18 <__NVIC_SetPriority>
}
 800205a:	bf00      	nop
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff35 	bl	8001ee0 <__NVIC_EnableIRQ>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffa2 	bl	8001fd0 <SysTick_Config>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e043      	b.n	8002136 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b22      	ldr	r3, [pc, #136]	@ (8002140 <HAL_DMA_Init+0xa8>)
 80020b6:	4413      	add	r3, r2
 80020b8:	4a22      	ldr	r2, [pc, #136]	@ (8002144 <HAL_DMA_Init+0xac>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	009a      	lsls	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002148 <HAL_DMA_Init+0xb0>)
 80020ca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80020e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002108:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	bffdfff8 	.word	0xbffdfff8
 8002144:	cccccccd 	.word	0xcccccccd
 8002148:	40020000 	.word	0x40020000

0800214c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_DMA_Start_IT+0x20>
 8002168:	2302      	movs	r3, #2
 800216a:	e04b      	b.n	8002204 <HAL_DMA_Start_IT+0xb8>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b01      	cmp	r3, #1
 800217e:	d13a      	bne.n	80021f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f937 	bl	8002418 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d008      	beq.n	80021c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 020e 	orr.w	r2, r2, #14
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	e00f      	b.n	80021e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0204 	bic.w	r2, r2, #4
 80021d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 020a 	orr.w	r2, r2, #10
 80021e2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e005      	b.n	8002202 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80021fe:	2302      	movs	r3, #2
 8002200:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002202:	7dfb      	ldrb	r3, [r7, #23]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	2204      	movs	r2, #4
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d04f      	beq.n	80022d4 <HAL_DMA_IRQHandler+0xc8>
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	d04a      	beq.n	80022d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d107      	bne.n	800225c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0204 	bic.w	r2, r2, #4
 800225a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a66      	ldr	r2, [pc, #408]	@ (80023fc <HAL_DMA_IRQHandler+0x1f0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d029      	beq.n	80022ba <HAL_DMA_IRQHandler+0xae>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a65      	ldr	r2, [pc, #404]	@ (8002400 <HAL_DMA_IRQHandler+0x1f4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d022      	beq.n	80022b6 <HAL_DMA_IRQHandler+0xaa>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a63      	ldr	r2, [pc, #396]	@ (8002404 <HAL_DMA_IRQHandler+0x1f8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01a      	beq.n	80022b0 <HAL_DMA_IRQHandler+0xa4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a62      	ldr	r2, [pc, #392]	@ (8002408 <HAL_DMA_IRQHandler+0x1fc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d012      	beq.n	80022aa <HAL_DMA_IRQHandler+0x9e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a60      	ldr	r2, [pc, #384]	@ (800240c <HAL_DMA_IRQHandler+0x200>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00a      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x98>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a5f      	ldr	r2, [pc, #380]	@ (8002410 <HAL_DMA_IRQHandler+0x204>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d102      	bne.n	800229e <HAL_DMA_IRQHandler+0x92>
 8002298:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800229c:	e00e      	b.n	80022bc <HAL_DMA_IRQHandler+0xb0>
 800229e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80022a2:	e00b      	b.n	80022bc <HAL_DMA_IRQHandler+0xb0>
 80022a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80022a8:	e008      	b.n	80022bc <HAL_DMA_IRQHandler+0xb0>
 80022aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022ae:	e005      	b.n	80022bc <HAL_DMA_IRQHandler+0xb0>
 80022b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022b4:	e002      	b.n	80022bc <HAL_DMA_IRQHandler+0xb0>
 80022b6:	2340      	movs	r3, #64	@ 0x40
 80022b8:	e000      	b.n	80022bc <HAL_DMA_IRQHandler+0xb0>
 80022ba:	2304      	movs	r3, #4
 80022bc:	4a55      	ldr	r2, [pc, #340]	@ (8002414 <HAL_DMA_IRQHandler+0x208>)
 80022be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8094 	beq.w	80023f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022d2:	e08e      	b.n	80023f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	2202      	movs	r2, #2
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d056      	beq.n	8002392 <HAL_DMA_IRQHandler+0x186>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d051      	beq.n	8002392 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10b      	bne.n	8002314 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 020a 	bic.w	r2, r2, #10
 800230a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a38      	ldr	r2, [pc, #224]	@ (80023fc <HAL_DMA_IRQHandler+0x1f0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d029      	beq.n	8002372 <HAL_DMA_IRQHandler+0x166>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a37      	ldr	r2, [pc, #220]	@ (8002400 <HAL_DMA_IRQHandler+0x1f4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d022      	beq.n	800236e <HAL_DMA_IRQHandler+0x162>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a35      	ldr	r2, [pc, #212]	@ (8002404 <HAL_DMA_IRQHandler+0x1f8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01a      	beq.n	8002368 <HAL_DMA_IRQHandler+0x15c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a34      	ldr	r2, [pc, #208]	@ (8002408 <HAL_DMA_IRQHandler+0x1fc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d012      	beq.n	8002362 <HAL_DMA_IRQHandler+0x156>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a32      	ldr	r2, [pc, #200]	@ (800240c <HAL_DMA_IRQHandler+0x200>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00a      	beq.n	800235c <HAL_DMA_IRQHandler+0x150>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a31      	ldr	r2, [pc, #196]	@ (8002410 <HAL_DMA_IRQHandler+0x204>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d102      	bne.n	8002356 <HAL_DMA_IRQHandler+0x14a>
 8002350:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002354:	e00e      	b.n	8002374 <HAL_DMA_IRQHandler+0x168>
 8002356:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800235a:	e00b      	b.n	8002374 <HAL_DMA_IRQHandler+0x168>
 800235c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002360:	e008      	b.n	8002374 <HAL_DMA_IRQHandler+0x168>
 8002362:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002366:	e005      	b.n	8002374 <HAL_DMA_IRQHandler+0x168>
 8002368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800236c:	e002      	b.n	8002374 <HAL_DMA_IRQHandler+0x168>
 800236e:	2320      	movs	r3, #32
 8002370:	e000      	b.n	8002374 <HAL_DMA_IRQHandler+0x168>
 8002372:	2302      	movs	r3, #2
 8002374:	4a27      	ldr	r2, [pc, #156]	@ (8002414 <HAL_DMA_IRQHandler+0x208>)
 8002376:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002384:	2b00      	cmp	r3, #0
 8002386:	d034      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002390:	e02f      	b.n	80023f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	2208      	movs	r2, #8
 8002398:	409a      	lsls	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d028      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x1e8>
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d023      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 020e 	bic.w	r2, r2, #14
 80023ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c4:	2101      	movs	r1, #1
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	4798      	blx	r3
    }
  }
  return;
 80023f2:	bf00      	nop
 80023f4:	bf00      	nop
}
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40020008 	.word	0x40020008
 8002400:	4002001c 	.word	0x4002001c
 8002404:	40020030 	.word	0x40020030
 8002408:	40020044 	.word	0x40020044
 800240c:	40020058 	.word	0x40020058
 8002410:	4002006c 	.word	0x4002006c
 8002414:	40020000 	.word	0x40020000

08002418 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242e:	2101      	movs	r1, #1
 8002430:	fa01 f202 	lsl.w	r2, r1, r2
 8002434:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b10      	cmp	r3, #16
 8002444:	d108      	bne.n	8002458 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002456:	e007      	b.n	8002468 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
	...

08002474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002474:	b480      	push	{r7}
 8002476:	b08b      	sub	sp, #44	@ 0x2c
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002486:	e169      	b.n	800275c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002488:	2201      	movs	r2, #1
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69fa      	ldr	r2, [r7, #28]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	f040 8158 	bne.w	8002756 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a9a      	ldr	r2, [pc, #616]	@ (8002714 <HAL_GPIO_Init+0x2a0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d05e      	beq.n	800256e <HAL_GPIO_Init+0xfa>
 80024b0:	4a98      	ldr	r2, [pc, #608]	@ (8002714 <HAL_GPIO_Init+0x2a0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d875      	bhi.n	80025a2 <HAL_GPIO_Init+0x12e>
 80024b6:	4a98      	ldr	r2, [pc, #608]	@ (8002718 <HAL_GPIO_Init+0x2a4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d058      	beq.n	800256e <HAL_GPIO_Init+0xfa>
 80024bc:	4a96      	ldr	r2, [pc, #600]	@ (8002718 <HAL_GPIO_Init+0x2a4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d86f      	bhi.n	80025a2 <HAL_GPIO_Init+0x12e>
 80024c2:	4a96      	ldr	r2, [pc, #600]	@ (800271c <HAL_GPIO_Init+0x2a8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d052      	beq.n	800256e <HAL_GPIO_Init+0xfa>
 80024c8:	4a94      	ldr	r2, [pc, #592]	@ (800271c <HAL_GPIO_Init+0x2a8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d869      	bhi.n	80025a2 <HAL_GPIO_Init+0x12e>
 80024ce:	4a94      	ldr	r2, [pc, #592]	@ (8002720 <HAL_GPIO_Init+0x2ac>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d04c      	beq.n	800256e <HAL_GPIO_Init+0xfa>
 80024d4:	4a92      	ldr	r2, [pc, #584]	@ (8002720 <HAL_GPIO_Init+0x2ac>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d863      	bhi.n	80025a2 <HAL_GPIO_Init+0x12e>
 80024da:	4a92      	ldr	r2, [pc, #584]	@ (8002724 <HAL_GPIO_Init+0x2b0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d046      	beq.n	800256e <HAL_GPIO_Init+0xfa>
 80024e0:	4a90      	ldr	r2, [pc, #576]	@ (8002724 <HAL_GPIO_Init+0x2b0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d85d      	bhi.n	80025a2 <HAL_GPIO_Init+0x12e>
 80024e6:	2b12      	cmp	r3, #18
 80024e8:	d82a      	bhi.n	8002540 <HAL_GPIO_Init+0xcc>
 80024ea:	2b12      	cmp	r3, #18
 80024ec:	d859      	bhi.n	80025a2 <HAL_GPIO_Init+0x12e>
 80024ee:	a201      	add	r2, pc, #4	@ (adr r2, 80024f4 <HAL_GPIO_Init+0x80>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	0800256f 	.word	0x0800256f
 80024f8:	08002549 	.word	0x08002549
 80024fc:	0800255b 	.word	0x0800255b
 8002500:	0800259d 	.word	0x0800259d
 8002504:	080025a3 	.word	0x080025a3
 8002508:	080025a3 	.word	0x080025a3
 800250c:	080025a3 	.word	0x080025a3
 8002510:	080025a3 	.word	0x080025a3
 8002514:	080025a3 	.word	0x080025a3
 8002518:	080025a3 	.word	0x080025a3
 800251c:	080025a3 	.word	0x080025a3
 8002520:	080025a3 	.word	0x080025a3
 8002524:	080025a3 	.word	0x080025a3
 8002528:	080025a3 	.word	0x080025a3
 800252c:	080025a3 	.word	0x080025a3
 8002530:	080025a3 	.word	0x080025a3
 8002534:	080025a3 	.word	0x080025a3
 8002538:	08002551 	.word	0x08002551
 800253c:	08002565 	.word	0x08002565
 8002540:	4a79      	ldr	r2, [pc, #484]	@ (8002728 <HAL_GPIO_Init+0x2b4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d013      	beq.n	800256e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002546:	e02c      	b.n	80025a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	623b      	str	r3, [r7, #32]
          break;
 800254e:	e029      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	3304      	adds	r3, #4
 8002556:	623b      	str	r3, [r7, #32]
          break;
 8002558:	e024      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	3308      	adds	r3, #8
 8002560:	623b      	str	r3, [r7, #32]
          break;
 8002562:	e01f      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	330c      	adds	r3, #12
 800256a:	623b      	str	r3, [r7, #32]
          break;
 800256c:	e01a      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002576:	2304      	movs	r3, #4
 8002578:	623b      	str	r3, [r7, #32]
          break;
 800257a:	e013      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002584:	2308      	movs	r3, #8
 8002586:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	611a      	str	r2, [r3, #16]
          break;
 800258e:	e009      	b.n	80025a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002590:	2308      	movs	r3, #8
 8002592:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	615a      	str	r2, [r3, #20]
          break;
 800259a:	e003      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
          break;
 80025a0:	e000      	b.n	80025a4 <HAL_GPIO_Init+0x130>
          break;
 80025a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2bff      	cmp	r3, #255	@ 0xff
 80025a8:	d801      	bhi.n	80025ae <HAL_GPIO_Init+0x13a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	e001      	b.n	80025b2 <HAL_GPIO_Init+0x13e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3304      	adds	r3, #4
 80025b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	2bff      	cmp	r3, #255	@ 0xff
 80025b8:	d802      	bhi.n	80025c0 <HAL_GPIO_Init+0x14c>
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	e002      	b.n	80025c6 <HAL_GPIO_Init+0x152>
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	3b08      	subs	r3, #8
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	210f      	movs	r1, #15
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	401a      	ands	r2, r3
 80025d8:	6a39      	ldr	r1, [r7, #32]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	431a      	orrs	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80b1 	beq.w	8002756 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025f4:	4b4d      	ldr	r3, [pc, #308]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4a4c      	ldr	r2, [pc, #304]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6193      	str	r3, [r2, #24]
 8002600:	4b4a      	ldr	r3, [pc, #296]	@ (800272c <HAL_GPIO_Init+0x2b8>)
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800260c:	4a48      	ldr	r2, [pc, #288]	@ (8002730 <HAL_GPIO_Init+0x2bc>)
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002618:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4013      	ands	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a40      	ldr	r2, [pc, #256]	@ (8002734 <HAL_GPIO_Init+0x2c0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d013      	beq.n	8002660 <HAL_GPIO_Init+0x1ec>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a3f      	ldr	r2, [pc, #252]	@ (8002738 <HAL_GPIO_Init+0x2c4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00d      	beq.n	800265c <HAL_GPIO_Init+0x1e8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a3e      	ldr	r2, [pc, #248]	@ (800273c <HAL_GPIO_Init+0x2c8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d007      	beq.n	8002658 <HAL_GPIO_Init+0x1e4>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a3d      	ldr	r2, [pc, #244]	@ (8002740 <HAL_GPIO_Init+0x2cc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d101      	bne.n	8002654 <HAL_GPIO_Init+0x1e0>
 8002650:	2303      	movs	r3, #3
 8002652:	e006      	b.n	8002662 <HAL_GPIO_Init+0x1ee>
 8002654:	2304      	movs	r3, #4
 8002656:	e004      	b.n	8002662 <HAL_GPIO_Init+0x1ee>
 8002658:	2302      	movs	r3, #2
 800265a:	e002      	b.n	8002662 <HAL_GPIO_Init+0x1ee>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <HAL_GPIO_Init+0x1ee>
 8002660:	2300      	movs	r3, #0
 8002662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002664:	f002 0203 	and.w	r2, r2, #3
 8002668:	0092      	lsls	r2, r2, #2
 800266a:	4093      	lsls	r3, r2
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002672:	492f      	ldr	r1, [pc, #188]	@ (8002730 <HAL_GPIO_Init+0x2bc>)
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	089b      	lsrs	r3, r3, #2
 8002678:	3302      	adds	r3, #2
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d006      	beq.n	800269a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800268c:	4b2d      	ldr	r3, [pc, #180]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	492c      	ldr	r1, [pc, #176]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]
 8002698:	e006      	b.n	80026a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800269a:	4b2a      	ldr	r3, [pc, #168]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	4928      	ldr	r1, [pc, #160]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026b4:	4b23      	ldr	r3, [pc, #140]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	4922      	ldr	r1, [pc, #136]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	60cb      	str	r3, [r1, #12]
 80026c0:	e006      	b.n	80026d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026c2:	4b20      	ldr	r3, [pc, #128]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	491e      	ldr	r1, [pc, #120]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d006      	beq.n	80026ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026dc:	4b19      	ldr	r3, [pc, #100]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4918      	ldr	r1, [pc, #96]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
 80026e8:	e006      	b.n	80026f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026ea:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	4914      	ldr	r1, [pc, #80]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d021      	beq.n	8002748 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002704:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	490e      	ldr	r1, [pc, #56]	@ (8002744 <HAL_GPIO_Init+0x2d0>)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
 8002710:	e021      	b.n	8002756 <HAL_GPIO_Init+0x2e2>
 8002712:	bf00      	nop
 8002714:	10320000 	.word	0x10320000
 8002718:	10310000 	.word	0x10310000
 800271c:	10220000 	.word	0x10220000
 8002720:	10210000 	.word	0x10210000
 8002724:	10120000 	.word	0x10120000
 8002728:	10110000 	.word	0x10110000
 800272c:	40021000 	.word	0x40021000
 8002730:	40010000 	.word	0x40010000
 8002734:	40010800 	.word	0x40010800
 8002738:	40010c00 	.word	0x40010c00
 800273c:	40011000 	.word	0x40011000
 8002740:	40011400 	.word	0x40011400
 8002744:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002748:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <HAL_GPIO_Init+0x304>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	43db      	mvns	r3, r3
 8002750:	4909      	ldr	r1, [pc, #36]	@ (8002778 <HAL_GPIO_Init+0x304>)
 8002752:	4013      	ands	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	3301      	adds	r3, #1
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	f47f ae8e 	bne.w	8002488 <HAL_GPIO_Init+0x14>
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	372c      	adds	r7, #44	@ 0x2c
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr
 8002778:	40010400 	.word	0x40010400

0800277c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800278c:	787b      	ldrb	r3, [r7, #1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002798:	e003      	b.n	80027a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800279a:	887b      	ldrh	r3, [r7, #2]
 800279c:	041a      	lsls	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	611a      	str	r2, [r3, #16]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4013      	ands	r3, r2
 80027c4:	041a      	lsls	r2, r3, #16
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43d9      	mvns	r1, r3
 80027ca:	887b      	ldrh	r3, [r7, #2]
 80027cc:	400b      	ands	r3, r1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	611a      	str	r2, [r3, #16]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e12b      	b.n	8002a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe f9b0 	bl	8000b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	@ 0x24
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002844:	f001 fbca 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8002848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4a81      	ldr	r2, [pc, #516]	@ (8002a54 <HAL_I2C_Init+0x274>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d807      	bhi.n	8002864 <HAL_I2C_Init+0x84>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a80      	ldr	r2, [pc, #512]	@ (8002a58 <HAL_I2C_Init+0x278>)
 8002858:	4293      	cmp	r3, r2
 800285a:	bf94      	ite	ls
 800285c:	2301      	movls	r3, #1
 800285e:	2300      	movhi	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	e006      	b.n	8002872 <HAL_I2C_Init+0x92>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a7d      	ldr	r2, [pc, #500]	@ (8002a5c <HAL_I2C_Init+0x27c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	bf94      	ite	ls
 800286c:	2301      	movls	r3, #1
 800286e:	2300      	movhi	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0e7      	b.n	8002a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4a78      	ldr	r2, [pc, #480]	@ (8002a60 <HAL_I2C_Init+0x280>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0c9b      	lsrs	r3, r3, #18
 8002884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a54 <HAL_I2C_Init+0x274>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d802      	bhi.n	80028b4 <HAL_I2C_Init+0xd4>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	3301      	adds	r3, #1
 80028b2:	e009      	b.n	80028c8 <HAL_I2C_Init+0xe8>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	4a69      	ldr	r2, [pc, #420]	@ (8002a64 <HAL_I2C_Init+0x284>)
 80028c0:	fba2 2303 	umull	r2, r3, r2, r3
 80028c4:	099b      	lsrs	r3, r3, #6
 80028c6:	3301      	adds	r3, #1
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	495c      	ldr	r1, [pc, #368]	@ (8002a54 <HAL_I2C_Init+0x274>)
 80028e4:	428b      	cmp	r3, r1
 80028e6:	d819      	bhi.n	800291c <HAL_I2C_Init+0x13c>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1e59      	subs	r1, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f6:	1c59      	adds	r1, r3, #1
 80028f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028fc:	400b      	ands	r3, r1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_I2C_Init+0x138>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1e59      	subs	r1, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002910:	3301      	adds	r3, #1
 8002912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002916:	e051      	b.n	80029bc <HAL_I2C_Init+0x1dc>
 8002918:	2304      	movs	r3, #4
 800291a:	e04f      	b.n	80029bc <HAL_I2C_Init+0x1dc>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d111      	bne.n	8002948 <HAL_I2C_Init+0x168>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1e58      	subs	r0, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e012      	b.n	800296e <HAL_I2C_Init+0x18e>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e58      	subs	r0, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	0099      	lsls	r1, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	fbb0 f3f3 	udiv	r3, r0, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Init+0x196>
 8002972:	2301      	movs	r3, #1
 8002974:	e022      	b.n	80029bc <HAL_I2C_Init+0x1dc>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10e      	bne.n	800299c <HAL_I2C_Init+0x1bc>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1e58      	subs	r0, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	440b      	add	r3, r1
 800298c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002990:	3301      	adds	r3, #1
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800299a:	e00f      	b.n	80029bc <HAL_I2C_Init+0x1dc>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e58      	subs	r0, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	0099      	lsls	r1, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	6809      	ldr	r1, [r1, #0]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6911      	ldr	r1, [r2, #16]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68d2      	ldr	r2, [r2, #12]
 80029f6:	4311      	orrs	r1, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	000186a0 	.word	0x000186a0
 8002a58:	001e847f 	.word	0x001e847f
 8002a5c:	003d08ff 	.word	0x003d08ff
 8002a60:	431bde83 	.word	0x431bde83
 8002a64:	10624dd3 	.word	0x10624dd3

08002a68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	461a      	mov	r2, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	817b      	strh	r3, [r7, #10]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7fe fd3e 	bl	80014fc <HAL_GetTick>
 8002a80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	f040 80e0 	bne.w	8002c50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2319      	movs	r3, #25
 8002a96:	2201      	movs	r2, #1
 8002a98:	4970      	ldr	r1, [pc, #448]	@ (8002c5c <HAL_I2C_Master_Transmit+0x1f4>)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fc9e 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e0d3      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_I2C_Master_Transmit+0x50>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e0cc      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x1ea>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d007      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2221      	movs	r2, #33	@ 0x21
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2210      	movs	r2, #16
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	893a      	ldrh	r2, [r7, #8]
 8002b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a50      	ldr	r2, [pc, #320]	@ (8002c60 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b20:	8979      	ldrh	r1, [r7, #10]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	6a3a      	ldr	r2, [r7, #32]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fb08 	bl	800313c <I2C_MasterRequestWrite>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e08d      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b4c:	e066      	b.n	8002c1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	6a39      	ldr	r1, [r7, #32]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fd5c 	bl	8003610 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d107      	bne.n	8002b76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e06b      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7e:	781a      	ldrb	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_I2C_Master_Transmit+0x188>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d017      	beq.n	8002bf0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc4:	781a      	ldrb	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	6a39      	ldr	r1, [r7, #32]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fd53 	bl	80036a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d107      	bne.n	8002c18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e01a      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d194      	bne.n	8002b4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e000      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c50:	2302      	movs	r3, #2
  }
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	00100002 	.word	0x00100002
 8002c60:	ffff0000 	.word	0xffff0000

08002c64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	@ 0x30
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	460b      	mov	r3, r1
 8002c72:	817b      	strh	r3, [r7, #10]
 8002c74:	4613      	mov	r3, r2
 8002c76:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c7c:	f7fe fc3e 	bl	80014fc <HAL_GetTick>
 8002c80:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	f040 824b 	bne.w	8003126 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2319      	movs	r3, #25
 8002c96:	2201      	movs	r2, #1
 8002c98:	497f      	ldr	r1, [pc, #508]	@ (8002e98 <HAL_I2C_Master_Receive+0x234>)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fb9e 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e23e      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_I2C_Master_Receive+0x54>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e237      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d007      	beq.n	8002cde <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2222      	movs	r2, #34	@ 0x22
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	893a      	ldrh	r2, [r7, #8]
 8002d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a5f      	ldr	r2, [pc, #380]	@ (8002e9c <HAL_I2C_Master_Receive+0x238>)
 8002d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d20:	8979      	ldrh	r1, [r7, #10]
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fa8a 	bl	8003240 <I2C_MasterRequestRead>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e1f8      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d113      	bne.n	8002d66 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e1cc      	b.n	8003100 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d11e      	bne.n	8002dac <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d7e:	b672      	cpsid	i
}
 8002d80:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002da6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002da8:	b662      	cpsie	i
}
 8002daa:	e035      	b.n	8002e18 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d11e      	bne.n	8002df2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc4:	b672      	cpsid	i
}
 8002dc6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002dee:	b662      	cpsie	i
}
 8002df0:	e012      	b.n	8002e18 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e18:	e172      	b.n	8003100 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	f200 811f 	bhi.w	8003062 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d123      	bne.n	8002e74 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 fc7d 	bl	8003730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e173      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e72:	e145      	b.n	8003100 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d152      	bne.n	8002f22 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	2200      	movs	r2, #0
 8002e84:	4906      	ldr	r1, [pc, #24]	@ (8002ea0 <HAL_I2C_Master_Receive+0x23c>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 faa8 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e148      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
 8002e96:	bf00      	nop
 8002e98:	00100002 	.word	0x00100002
 8002e9c:	ffff0000 	.word	0xffff0000
 8002ea0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea4:	b672      	cpsid	i
}
 8002ea6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002eea:	b662      	cpsie	i
}
 8002eec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f20:	e0ee      	b.n	8003100 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f28:	2200      	movs	r2, #0
 8002f2a:	4981      	ldr	r1, [pc, #516]	@ (8003130 <HAL_I2C_Master_Receive+0x4cc>)
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fa55 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0f5      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4c:	b672      	cpsid	i
}
 8002f4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f82:	4b6c      	ldr	r3, [pc, #432]	@ (8003134 <HAL_I2C_Master_Receive+0x4d0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	4a6b      	ldr	r2, [pc, #428]	@ (8003138 <HAL_I2C_Master_Receive+0x4d4>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0a1a      	lsrs	r2, r3, #8
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00da      	lsls	r2, r3, #3
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d118      	bne.n	8002fda <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002fca:	b662      	cpsie	i
}
 8002fcc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0a6      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d1d9      	bne.n	8002f9c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800302a:	b662      	cpsie	i
}
 800302c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003060:	e04e      	b.n	8003100 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003064:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fb62 	bl	8003730 <I2C_WaitOnRXNEFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e058      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d124      	bne.n	8003100 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d107      	bne.n	80030ce <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030cc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	f47f ae88 	bne.w	8002e1a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	e000      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003126:	2302      	movs	r3, #2
  }
}
 8003128:	4618      	mov	r0, r3
 800312a:	3728      	adds	r7, #40	@ 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	00010004 	.word	0x00010004
 8003134:	20000000 	.word	0x20000000
 8003138:	14f8b589 	.word	0x14f8b589

0800313c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	460b      	mov	r3, r1
 800314a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003150:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b08      	cmp	r3, #8
 8003156:	d006      	beq.n	8003166 <I2C_MasterRequestWrite+0x2a>
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d003      	beq.n	8003166 <I2C_MasterRequestWrite+0x2a>
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003164:	d108      	bne.n	8003178 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e00b      	b.n	8003190 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317c:	2b12      	cmp	r3, #18
 800317e:	d107      	bne.n	8003190 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800318e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f91d 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b6:	d103      	bne.n	80031c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e035      	b.n	8003230 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031cc:	d108      	bne.n	80031e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ce:	897b      	ldrh	r3, [r7, #10]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031dc:	611a      	str	r2, [r3, #16]
 80031de:	e01b      	b.n	8003218 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031e0:	897b      	ldrh	r3, [r7, #10]
 80031e2:	11db      	asrs	r3, r3, #7
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f003 0306 	and.w	r3, r3, #6
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f063 030f 	orn	r3, r3, #15
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	490e      	ldr	r1, [pc, #56]	@ (8003238 <I2C_MasterRequestWrite+0xfc>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f966 	bl	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e010      	b.n	8003230 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4907      	ldr	r1, [pc, #28]	@ (800323c <I2C_MasterRequestWrite+0x100>)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f956 	bl	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	00010008 	.word	0x00010008
 800323c:	00010002 	.word	0x00010002

08003240 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	460b      	mov	r3, r1
 800324e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003254:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003264:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b08      	cmp	r3, #8
 800326a:	d006      	beq.n	800327a <I2C_MasterRequestRead+0x3a>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d003      	beq.n	800327a <I2C_MasterRequestRead+0x3a>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003278:	d108      	bne.n	800328c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e00b      	b.n	80032a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003290:	2b11      	cmp	r3, #17
 8003292:	d107      	bne.n	80032a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f893 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ca:	d103      	bne.n	80032d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e079      	b.n	80033cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032e0:	d108      	bne.n	80032f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	611a      	str	r2, [r3, #16]
 80032f2:	e05f      	b.n	80033b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032f4:	897b      	ldrh	r3, [r7, #10]
 80032f6:	11db      	asrs	r3, r3, #7
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f003 0306 	and.w	r3, r3, #6
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f063 030f 	orn	r3, r3, #15
 8003304:	b2da      	uxtb	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4930      	ldr	r1, [pc, #192]	@ (80033d4 <I2C_MasterRequestRead+0x194>)
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f8dc 	bl	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e054      	b.n	80033cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4929      	ldr	r1, [pc, #164]	@ (80033d8 <I2C_MasterRequestRead+0x198>)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f8cc 	bl	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e044      	b.n	80033cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003366:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f831 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00d      	beq.n	800339c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800338e:	d103      	bne.n	8003398 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003396:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e017      	b.n	80033cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800339c:	897b      	ldrh	r3, [r7, #10]
 800339e:	11db      	asrs	r3, r3, #7
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 0306 	and.w	r3, r3, #6
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f063 030e 	orn	r3, r3, #14
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4907      	ldr	r1, [pc, #28]	@ (80033d8 <I2C_MasterRequestRead+0x198>)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f888 	bl	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	00010008 	.word	0x00010008
 80033d8:	00010002 	.word	0x00010002

080033dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ec:	e048      	b.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033f4:	d044      	beq.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7fe f881 	bl	80014fc <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d139      	bne.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	0c1b      	lsrs	r3, r3, #16
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b01      	cmp	r3, #1
 8003414:	d10d      	bne.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	43da      	mvns	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	e00c      	b.n	800344c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	43da      	mvns	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	429a      	cmp	r2, r3
 8003450:	d116      	bne.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e023      	b.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	0c1b      	lsrs	r3, r3, #16
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d10d      	bne.n	80034a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	43da      	mvns	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4013      	ands	r3, r2
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	e00c      	b.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	43da      	mvns	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4013      	ands	r3, r2
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d093      	beq.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034de:	e071      	b.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ee:	d123      	bne.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003508:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003524:	f043 0204 	orr.w	r2, r3, #4
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e067      	b.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800353e:	d041      	beq.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003540:	f7fd ffdc 	bl	80014fc <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	d302      	bcc.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d136      	bne.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d10c      	bne.n	800357a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4013      	ands	r3, r2
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	bf14      	ite	ne
 8003572:	2301      	movne	r3, #1
 8003574:	2300      	moveq	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	e00b      	b.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	43da      	mvns	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d016      	beq.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e021      	b.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	0c1b      	lsrs	r3, r3, #16
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d10c      	bne.n	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	43da      	mvns	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4013      	ands	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e00b      	b.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f af6d 	bne.w	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800361c:	e034      	b.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f8e3 	bl	80037ea <I2C_IsAcknowledgeFailed>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e034      	b.n	8003698 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003634:	d028      	beq.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003636:	f7fd ff61 	bl	80014fc <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	d302      	bcc.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d11d      	bne.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b80      	cmp	r3, #128	@ 0x80
 8003658:	d016      	beq.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e007      	b.n	8003698 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003692:	2b80      	cmp	r3, #128	@ 0x80
 8003694:	d1c3      	bne.n	800361e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036ac:	e034      	b.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f89b 	bl	80037ea <I2C_IsAcknowledgeFailed>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e034      	b.n	8003728 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036c4:	d028      	beq.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7fd ff19 	bl	80014fc <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d11d      	bne.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d016      	beq.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e007      	b.n	8003728 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b04      	cmp	r3, #4
 8003724:	d1c3      	bne.n	80036ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800373c:	e049      	b.n	80037d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b10      	cmp	r3, #16
 800374a:	d119      	bne.n	8003780 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0210 	mvn.w	r2, #16
 8003754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e030      	b.n	80037e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003780:	f7fd febc 	bl	80014fc <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	429a      	cmp	r2, r3
 800378e:	d302      	bcc.n	8003796 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11d      	bne.n	80037d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a0:	2b40      	cmp	r3, #64	@ 0x40
 80037a2:	d016      	beq.n	80037d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	f043 0220 	orr.w	r2, r3, #32
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e007      	b.n	80037e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037dc:	2b40      	cmp	r3, #64	@ 0x40
 80037de:	d1ae      	bne.n	800373e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003800:	d11b      	bne.n	800383a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800380a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	f043 0204 	orr.w	r2, r3, #4
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
	...

08003848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e272      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8087 	beq.w	8003976 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003868:	4b92      	ldr	r3, [pc, #584]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b04      	cmp	r3, #4
 8003872:	d00c      	beq.n	800388e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003874:	4b8f      	ldr	r3, [pc, #572]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b08      	cmp	r3, #8
 800387e:	d112      	bne.n	80038a6 <HAL_RCC_OscConfig+0x5e>
 8003880:	4b8c      	ldr	r3, [pc, #560]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800388c:	d10b      	bne.n	80038a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388e:	4b89      	ldr	r3, [pc, #548]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d06c      	beq.n	8003974 <HAL_RCC_OscConfig+0x12c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d168      	bne.n	8003974 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e24c      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ae:	d106      	bne.n	80038be <HAL_RCC_OscConfig+0x76>
 80038b0:	4b80      	ldr	r3, [pc, #512]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	e02e      	b.n	800391c <HAL_RCC_OscConfig+0xd4>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x98>
 80038c6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a7a      	ldr	r2, [pc, #488]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b78      	ldr	r3, [pc, #480]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a77      	ldr	r2, [pc, #476]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e01d      	b.n	800391c <HAL_RCC_OscConfig+0xd4>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e8:	d10c      	bne.n	8003904 <HAL_RCC_OscConfig+0xbc>
 80038ea:	4b72      	ldr	r3, [pc, #456]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a71      	ldr	r2, [pc, #452]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a6e      	ldr	r2, [pc, #440]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e00b      	b.n	800391c <HAL_RCC_OscConfig+0xd4>
 8003904:	4b6b      	ldr	r3, [pc, #428]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a6a      	ldr	r2, [pc, #424]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 800390a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b68      	ldr	r3, [pc, #416]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a67      	ldr	r2, [pc, #412]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003916:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800391a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d013      	beq.n	800394c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fd fdea 	bl	80014fc <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7fd fde6 	bl	80014fc <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	@ 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e200      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0xe4>
 800394a:	e014      	b.n	8003976 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fd fdd6 	bl	80014fc <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003954:	f7fd fdd2 	bl	80014fc <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	@ 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e1ec      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003966:	4b53      	ldr	r3, [pc, #332]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x10c>
 8003972:	e000      	b.n	8003976 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d063      	beq.n	8003a4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003982:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800398e:	4b49      	ldr	r3, [pc, #292]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b08      	cmp	r3, #8
 8003998:	d11c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x18c>
 800399a:	4b46      	ldr	r3, [pc, #280]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d116      	bne.n	80039d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	4b43      	ldr	r3, [pc, #268]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_RCC_OscConfig+0x176>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d001      	beq.n	80039be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e1c0      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039be:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4939      	ldr	r1, [pc, #228]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d2:	e03a      	b.n	8003a4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d020      	beq.n	8003a1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039dc:	4b36      	ldr	r3, [pc, #216]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7fd fd8b 	bl	80014fc <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ea:	f7fd fd87 	bl	80014fc <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e1a1      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fc:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a08:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4927      	ldr	r1, [pc, #156]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	600b      	str	r3, [r1, #0]
 8003a1c:	e015      	b.n	8003a4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a1e:	4b26      	ldr	r3, [pc, #152]	@ (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fd fd6a 	bl	80014fc <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2c:	f7fd fd66 	bl	80014fc <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e180      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d03a      	beq.n	8003acc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d019      	beq.n	8003a92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5e:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a64:	f7fd fd4a 	bl	80014fc <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6c:	f7fd fd46 	bl	80014fc <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e160      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	f000 face 	bl	800402c <RCC_Delay>
 8003a90:	e01c      	b.n	8003acc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a92:	4b0a      	ldr	r3, [pc, #40]	@ (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a98:	f7fd fd30 	bl	80014fc <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a9e:	e00f      	b.n	8003ac0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa0:	f7fd fd2c 	bl	80014fc <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d908      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e146      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	42420000 	.word	0x42420000
 8003abc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac0:	4b92      	ldr	r3, [pc, #584]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e9      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80a6 	beq.w	8003c26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ada:	2300      	movs	r3, #0
 8003adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ade:	4b8b      	ldr	r3, [pc, #556]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10d      	bne.n	8003b06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aea:	4b88      	ldr	r3, [pc, #544]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4a87      	ldr	r2, [pc, #540]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af4:	61d3      	str	r3, [r2, #28]
 8003af6:	4b85      	ldr	r3, [pc, #532]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b06:	4b82      	ldr	r3, [pc, #520]	@ (8003d10 <HAL_RCC_OscConfig+0x4c8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d118      	bne.n	8003b44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b12:	4b7f      	ldr	r3, [pc, #508]	@ (8003d10 <HAL_RCC_OscConfig+0x4c8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7e      	ldr	r2, [pc, #504]	@ (8003d10 <HAL_RCC_OscConfig+0x4c8>)
 8003b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b1e:	f7fd fced 	bl	80014fc <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b26:	f7fd fce9 	bl	80014fc <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b64      	cmp	r3, #100	@ 0x64
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e103      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b38:	4b75      	ldr	r3, [pc, #468]	@ (8003d10 <HAL_RCC_OscConfig+0x4c8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d106      	bne.n	8003b5a <HAL_RCC_OscConfig+0x312>
 8003b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4a6e      	ldr	r2, [pc, #440]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6213      	str	r3, [r2, #32]
 8003b58:	e02d      	b.n	8003bb6 <HAL_RCC_OscConfig+0x36e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x334>
 8003b62:	4b6a      	ldr	r3, [pc, #424]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	4a69      	ldr	r2, [pc, #420]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	6213      	str	r3, [r2, #32]
 8003b6e:	4b67      	ldr	r3, [pc, #412]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4a66      	ldr	r2, [pc, #408]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	6213      	str	r3, [r2, #32]
 8003b7a:	e01c      	b.n	8003bb6 <HAL_RCC_OscConfig+0x36e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b05      	cmp	r3, #5
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCC_OscConfig+0x356>
 8003b84:	4b61      	ldr	r3, [pc, #388]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	4a60      	ldr	r2, [pc, #384]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	f043 0304 	orr.w	r3, r3, #4
 8003b8e:	6213      	str	r3, [r2, #32]
 8003b90:	4b5e      	ldr	r3, [pc, #376]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4a5d      	ldr	r2, [pc, #372]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6213      	str	r3, [r2, #32]
 8003b9c:	e00b      	b.n	8003bb6 <HAL_RCC_OscConfig+0x36e>
 8003b9e:	4b5b      	ldr	r3, [pc, #364]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	4a5a      	ldr	r2, [pc, #360]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	6213      	str	r3, [r2, #32]
 8003baa:	4b58      	ldr	r3, [pc, #352]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	4a57      	ldr	r2, [pc, #348]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	f023 0304 	bic.w	r3, r3, #4
 8003bb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d015      	beq.n	8003bea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bbe:	f7fd fc9d 	bl	80014fc <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fd fc99 	bl	80014fc <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e0b1      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0ee      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x37e>
 8003be8:	e014      	b.n	8003c14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bea:	f7fd fc87 	bl	80014fc <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f7fd fc83 	bl	80014fc <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e09b      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c08:	4b40      	ldr	r3, [pc, #256]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ee      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8087 	beq.w	8003d3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c30:	4b36      	ldr	r3, [pc, #216]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d061      	beq.n	8003d00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d146      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c44:	4b33      	ldr	r3, [pc, #204]	@ (8003d14 <HAL_RCC_OscConfig+0x4cc>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fc57 	bl	80014fc <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c52:	f7fd fc53 	bl	80014fc <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e06d      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c64:	4b29      	ldr	r3, [pc, #164]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f0      	bne.n	8003c52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d108      	bne.n	8003c8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c7a:	4b24      	ldr	r3, [pc, #144]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	4921      	ldr	r1, [pc, #132]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a19      	ldr	r1, [r3, #32]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	491b      	ldr	r1, [pc, #108]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <HAL_RCC_OscConfig+0x4cc>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003caa:	f7fd fc27 	bl	80014fc <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb2:	f7fd fc23 	bl	80014fc <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e03d      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cc4:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x46a>
 8003cd0:	e035      	b.n	8003d3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd2:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <HAL_RCC_OscConfig+0x4cc>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7fd fc10 	bl	80014fc <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fd fc0c 	bl	80014fc <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e026      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf2:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x498>
 8003cfe:	e01e      	b.n	8003d3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d107      	bne.n	8003d18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e019      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40007000 	.word	0x40007000
 8003d14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d18:	4b0b      	ldr	r3, [pc, #44]	@ (8003d48 <HAL_RCC_OscConfig+0x500>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d001      	beq.n	8003d3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000

08003d4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0d0      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d60:	4b6a      	ldr	r3, [pc, #424]	@ (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d910      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6e:	4b67      	ldr	r3, [pc, #412]	@ (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 0207 	bic.w	r2, r3, #7
 8003d76:	4965      	ldr	r1, [pc, #404]	@ (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b63      	ldr	r3, [pc, #396]	@ (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0b8      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da8:	4b59      	ldr	r3, [pc, #356]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4a58      	ldr	r2, [pc, #352]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003db2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc0:	4b53      	ldr	r3, [pc, #332]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4a52      	ldr	r2, [pc, #328]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003dca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b50      	ldr	r3, [pc, #320]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	494d      	ldr	r1, [pc, #308]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d040      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b47      	ldr	r3, [pc, #284]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d115      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e07f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0a:	4b41      	ldr	r3, [pc, #260]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e073      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e06b      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e2a:	4b39      	ldr	r3, [pc, #228]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f023 0203 	bic.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4936      	ldr	r1, [pc, #216]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e3c:	f7fd fb5e 	bl	80014fc <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e44:	f7fd fb5a 	bl	80014fc <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e053      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 020c 	and.w	r2, r3, #12
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d1eb      	bne.n	8003e44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b27      	ldr	r3, [pc, #156]	@ (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d210      	bcs.n	8003e9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b24      	ldr	r3, [pc, #144]	@ (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 0207 	bic.w	r2, r3, #7
 8003e82:	4922      	ldr	r1, [pc, #136]	@ (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	@ (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e032      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4916      	ldr	r1, [pc, #88]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ec6:	4b12      	ldr	r3, [pc, #72]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	490e      	ldr	r1, [pc, #56]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eda:	f000 f821 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	490a      	ldr	r1, [pc, #40]	@ (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003eec:	5ccb      	ldrb	r3, [r1, r3]
 8003eee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef2:	4a09      	ldr	r2, [pc, #36]	@ (8003f18 <HAL_RCC_ClockConfig+0x1cc>)
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <HAL_RCC_ClockConfig+0x1d0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fd fabc 	bl	8001478 <HAL_InitTick>

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40022000 	.word	0x40022000
 8003f10:	40021000 	.word	0x40021000
 8003f14:	080059a0 	.word	0x080059a0
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	20000004 	.word	0x20000004

08003f20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	2300      	movs	r3, #0
 8003f34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d002      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x30>
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCC_GetSysClockFreq+0x36>
 8003f4e:	e027      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f50:	4b19      	ldr	r3, [pc, #100]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f52:	613b      	str	r3, [r7, #16]
      break;
 8003f54:	e027      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	0c9b      	lsrs	r3, r3, #18
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	4a17      	ldr	r2, [pc, #92]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f60:	5cd3      	ldrb	r3, [r2, r3]
 8003f62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f6e:	4b11      	ldr	r3, [pc, #68]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	0c5b      	lsrs	r3, r3, #17
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	4a11      	ldr	r2, [pc, #68]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f7a:	5cd3      	ldrb	r3, [r2, r3]
 8003f7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f82:	fb03 f202 	mul.w	r2, r3, r2
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e004      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a0c      	ldr	r2, [pc, #48]	@ (8003fc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f94:	fb02 f303 	mul.w	r3, r2, r3
 8003f98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	613b      	str	r3, [r7, #16]
      break;
 8003f9e:	e002      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fa0:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fa2:	613b      	str	r3, [r7, #16]
      break;
 8003fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fa6:	693b      	ldr	r3, [r7, #16]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	007a1200 	.word	0x007a1200
 8003fbc:	080059b8 	.word	0x080059b8
 8003fc0:	080059c8 	.word	0x080059c8
 8003fc4:	003d0900 	.word	0x003d0900

08003fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fcc:	4b02      	ldr	r3, [pc, #8]	@ (8003fd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fce:	681b      	ldr	r3, [r3, #0]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	20000000 	.word	0x20000000

08003fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fe0:	f7ff fff2 	bl	8003fc8 <HAL_RCC_GetHCLKFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	0a1b      	lsrs	r3, r3, #8
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	4903      	ldr	r1, [pc, #12]	@ (8004000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ff2:	5ccb      	ldrb	r3, [r1, r3]
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021000 	.word	0x40021000
 8004000:	080059b0 	.word	0x080059b0

08004004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004008:	f7ff ffde 	bl	8003fc8 <HAL_RCC_GetHCLKFreq>
 800400c:	4602      	mov	r2, r0
 800400e:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	0adb      	lsrs	r3, r3, #11
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	4903      	ldr	r1, [pc, #12]	@ (8004028 <HAL_RCC_GetPCLK2Freq+0x24>)
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000
 8004028:	080059b0 	.word	0x080059b0

0800402c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004034:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <RCC_Delay+0x34>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0a      	ldr	r2, [pc, #40]	@ (8004064 <RCC_Delay+0x38>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	0a5b      	lsrs	r3, r3, #9
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	fb02 f303 	mul.w	r3, r2, r3
 8004046:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004048:	bf00      	nop
  }
  while (Delay --);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1e5a      	subs	r2, r3, #1
 800404e:	60fa      	str	r2, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f9      	bne.n	8004048 <RCC_Delay+0x1c>
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	20000000 	.word	0x20000000
 8004064:	10624dd3 	.word	0x10624dd3

08004068 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d07d      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004084:	2300      	movs	r3, #0
 8004086:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004088:	4b4f      	ldr	r3, [pc, #316]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004094:	4b4c      	ldr	r3, [pc, #304]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	4a4b      	ldr	r2, [pc, #300]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800409e:	61d3      	str	r3, [r2, #28]
 80040a0:	4b49      	ldr	r3, [pc, #292]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ac:	2301      	movs	r3, #1
 80040ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	4b46      	ldr	r3, [pc, #280]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d118      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040bc:	4b43      	ldr	r3, [pc, #268]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a42      	ldr	r2, [pc, #264]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c8:	f7fd fa18 	bl	80014fc <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ce:	e008      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d0:	f7fd fa14 	bl	80014fc <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	@ 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e06d      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e2:	4b3a      	ldr	r3, [pc, #232]	@ (80041cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ee:	4b36      	ldr	r3, [pc, #216]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d02e      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	429a      	cmp	r2, r3
 800410a:	d027      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800410c:	4b2e      	ldr	r3, [pc, #184]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004114:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004116:	4b2e      	ldr	r3, [pc, #184]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800411c:	4b2c      	ldr	r3, [pc, #176]	@ (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004122:	4a29      	ldr	r2, [pc, #164]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d014      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fd f9e3 	bl	80014fc <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fd f9df 	bl	80014fc <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e036      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004150:	4b1d      	ldr	r3, [pc, #116]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ee      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800415c:	4b1a      	ldr	r3, [pc, #104]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4917      	ldr	r1, [pc, #92]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416a:	4313      	orrs	r3, r2
 800416c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800416e:	7dfb      	ldrb	r3, [r7, #23]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004174:	4b14      	ldr	r3, [pc, #80]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	4a13      	ldr	r2, [pc, #76]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800417e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800418c:	4b0e      	ldr	r3, [pc, #56]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	490b      	ldr	r1, [pc, #44]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419a:	4313      	orrs	r3, r2
 800419c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041aa:	4b07      	ldr	r3, [pc, #28]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	4904      	ldr	r1, [pc, #16]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40007000 	.word	0x40007000
 80041d0:	42420440 	.word	0x42420440

080041d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e041      	b.n	800426a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd f810 	bl	8001220 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3304      	adds	r3, #4
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f000 f992 	bl	800453c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d109      	bne.n	8004298 <HAL_TIM_PWM_Start+0x24>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	e022      	b.n	80042de <HAL_TIM_PWM_Start+0x6a>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b04      	cmp	r3, #4
 800429c:	d109      	bne.n	80042b2 <HAL_TIM_PWM_Start+0x3e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	bf14      	ite	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	2300      	moveq	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	e015      	b.n	80042de <HAL_TIM_PWM_Start+0x6a>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d109      	bne.n	80042cc <HAL_TIM_PWM_Start+0x58>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	e008      	b.n	80042de <HAL_TIM_PWM_Start+0x6a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e05e      	b.n	80043a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_PWM_Start+0x82>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042f4:	e013      	b.n	800431e <HAL_TIM_PWM_Start+0xaa>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d104      	bne.n	8004306 <HAL_TIM_PWM_Start+0x92>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004304:	e00b      	b.n	800431e <HAL_TIM_PWM_Start+0xaa>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d104      	bne.n	8004316 <HAL_TIM_PWM_Start+0xa2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004314:	e003      	b.n	800431e <HAL_TIM_PWM_Start+0xaa>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2201      	movs	r2, #1
 8004324:	6839      	ldr	r1, [r7, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fafe 	bl	8004928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1e      	ldr	r2, [pc, #120]	@ (80043ac <HAL_TIM_PWM_Start+0x138>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d107      	bne.n	8004346 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a18      	ldr	r2, [pc, #96]	@ (80043ac <HAL_TIM_PWM_Start+0x138>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <HAL_TIM_PWM_Start+0xfa>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004358:	d009      	beq.n	800436e <HAL_TIM_PWM_Start+0xfa>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a14      	ldr	r2, [pc, #80]	@ (80043b0 <HAL_TIM_PWM_Start+0x13c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d004      	beq.n	800436e <HAL_TIM_PWM_Start+0xfa>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a12      	ldr	r2, [pc, #72]	@ (80043b4 <HAL_TIM_PWM_Start+0x140>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d111      	bne.n	8004392 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b06      	cmp	r3, #6
 800437e:	d010      	beq.n	80043a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 0201 	orr.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004390:	e007      	b.n	80043a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800

080043b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e0ae      	b.n	8004534 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	f200 809f 	bhi.w	8004524 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043e6:	a201      	add	r2, pc, #4	@ (adr r2, 80043ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004525 	.word	0x08004525
 80043f4:	08004525 	.word	0x08004525
 80043f8:	08004525 	.word	0x08004525
 80043fc:	08004461 	.word	0x08004461
 8004400:	08004525 	.word	0x08004525
 8004404:	08004525 	.word	0x08004525
 8004408:	08004525 	.word	0x08004525
 800440c:	080044a3 	.word	0x080044a3
 8004410:	08004525 	.word	0x08004525
 8004414:	08004525 	.word	0x08004525
 8004418:	08004525 	.word	0x08004525
 800441c:	080044e3 	.word	0x080044e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 f8f6 	bl	8004618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0208 	orr.w	r2, r2, #8
 800443a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0204 	bic.w	r2, r2, #4
 800444a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6999      	ldr	r1, [r3, #24]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	619a      	str	r2, [r3, #24]
      break;
 800445e:	e064      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f93c 	bl	80046e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800447a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800448a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6999      	ldr	r1, [r3, #24]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	619a      	str	r2, [r3, #24]
      break;
 80044a0:	e043      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f985 	bl	80047b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0208 	orr.w	r2, r2, #8
 80044bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0204 	bic.w	r2, r2, #4
 80044cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69d9      	ldr	r1, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	61da      	str	r2, [r3, #28]
      break;
 80044e0:	e023      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 f9cf 	bl	800488c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800450c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69d9      	ldr	r1, [r3, #28]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	021a      	lsls	r2, r3, #8
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	61da      	str	r2, [r3, #28]
      break;
 8004522:	e002      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
      break;
 8004528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004532:	7dfb      	ldrb	r3, [r7, #23]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2f      	ldr	r2, [pc, #188]	@ (800460c <TIM_Base_SetConfig+0xd0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00b      	beq.n	800456c <TIM_Base_SetConfig+0x30>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455a:	d007      	beq.n	800456c <TIM_Base_SetConfig+0x30>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a2c      	ldr	r2, [pc, #176]	@ (8004610 <TIM_Base_SetConfig+0xd4>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_Base_SetConfig+0x30>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a2b      	ldr	r2, [pc, #172]	@ (8004614 <TIM_Base_SetConfig+0xd8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d108      	bne.n	800457e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a22      	ldr	r2, [pc, #136]	@ (800460c <TIM_Base_SetConfig+0xd0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00b      	beq.n	800459e <TIM_Base_SetConfig+0x62>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800458c:	d007      	beq.n	800459e <TIM_Base_SetConfig+0x62>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1f      	ldr	r2, [pc, #124]	@ (8004610 <TIM_Base_SetConfig+0xd4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d003      	beq.n	800459e <TIM_Base_SetConfig+0x62>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1e      	ldr	r2, [pc, #120]	@ (8004614 <TIM_Base_SetConfig+0xd8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d108      	bne.n	80045b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a0d      	ldr	r2, [pc, #52]	@ (800460c <TIM_Base_SetConfig+0xd0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d103      	bne.n	80045e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f023 0201 	bic.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	611a      	str	r2, [r3, #16]
  }
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800

08004618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	f023 0201 	bic.w	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f023 0302 	bic.w	r3, r3, #2
 8004660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a1c      	ldr	r2, [pc, #112]	@ (80046e0 <TIM_OC1_SetConfig+0xc8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10c      	bne.n	800468e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f023 0308 	bic.w	r3, r3, #8
 800467a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a13      	ldr	r2, [pc, #76]	@ (80046e0 <TIM_OC1_SetConfig+0xc8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d111      	bne.n	80046ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800469c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	621a      	str	r2, [r3, #32]
}
 80046d4:	bf00      	nop
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40012c00 	.word	0x40012c00

080046e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f023 0210 	bic.w	r2, r3, #16
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800471a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f023 0320 	bic.w	r3, r3, #32
 800472e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a1d      	ldr	r2, [pc, #116]	@ (80047b4 <TIM_OC2_SetConfig+0xd0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d10d      	bne.n	8004760 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800474a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800475e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a14      	ldr	r2, [pc, #80]	@ (80047b4 <TIM_OC2_SetConfig+0xd0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d113      	bne.n	8004790 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800476e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00

080047b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0303 	bic.w	r3, r3, #3
 80047ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a1d      	ldr	r2, [pc, #116]	@ (8004888 <TIM_OC3_SetConfig+0xd0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d10d      	bne.n	8004832 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800481c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a14      	ldr	r2, [pc, #80]	@ (8004888 <TIM_OC3_SetConfig+0xd0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d113      	bne.n	8004862 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	621a      	str	r2, [r3, #32]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40012c00 	.word	0x40012c00

0800488c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	031b      	lsls	r3, r3, #12
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004924 <TIM_OC4_SetConfig+0x98>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d109      	bne.n	8004900 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	019b      	lsls	r3, r3, #6
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	40012c00 	.word	0x40012c00

08004928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	2201      	movs	r2, #1
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1a      	ldr	r2, [r3, #32]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	43db      	mvns	r3, r3
 800494a:	401a      	ands	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1a      	ldr	r2, [r3, #32]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	fa01 f303 	lsl.w	r3, r1, r3
 8004960:	431a      	orrs	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	bf00      	nop
 8004968:	371c      	adds	r7, #28
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004984:	2302      	movs	r3, #2
 8004986:	e046      	b.n	8004a16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a16      	ldr	r2, [pc, #88]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00e      	beq.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d4:	d009      	beq.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a12      	ldr	r2, [pc, #72]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d004      	beq.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a10      	ldr	r2, [pc, #64]	@ (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d10c      	bne.n	8004a04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr
 8004a20:	40012c00 	.word	0x40012c00
 8004a24:	40000400 	.word	0x40000400
 8004a28:	40000800 	.word	0x40000800

08004a2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e03d      	b.n	8004ac4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr

08004ace <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e042      	b.n	8004b66 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7fc fc0f 	bl	8001318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2224      	movs	r2, #36	@ 0x24
 8004afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b10:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f972 	bl	8004dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b26:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695a      	ldr	r2, [r3, #20]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b36:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b46:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b08a      	sub	sp, #40	@ 0x28
 8004b72:	af02      	add	r7, sp, #8
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d175      	bne.n	8004c7a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_UART_Transmit+0x2c>
 8004b94:	88fb      	ldrh	r3, [r7, #6]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e06e      	b.n	8004c7c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2221      	movs	r2, #33	@ 0x21
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bac:	f7fc fca6 	bl	80014fc <HAL_GetTick>
 8004bb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	88fa      	ldrh	r2, [r7, #6]
 8004bb6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	88fa      	ldrh	r2, [r7, #6]
 8004bbc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc6:	d108      	bne.n	8004bda <HAL_UART_Transmit+0x6c>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d104      	bne.n	8004bda <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	e003      	b.n	8004be2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004be2:	e02e      	b.n	8004c42 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2200      	movs	r2, #0
 8004bec:	2180      	movs	r1, #128	@ 0x80
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 f848 	bl	8004c84 <UART_WaitOnFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e03a      	b.n	8004c7c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10b      	bne.n	8004c24 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c1a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	3302      	adds	r3, #2
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	e007      	b.n	8004c34 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	781a      	ldrb	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3301      	adds	r3, #1
 8004c32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1cb      	bne.n	8004be4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2200      	movs	r2, #0
 8004c54:	2140      	movs	r1, #64	@ 0x40
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f814 	bl	8004c84 <UART_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d005      	beq.n	8004c6e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e006      	b.n	8004c7c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2220      	movs	r2, #32
 8004c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	e000      	b.n	8004c7c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c7a:	2302      	movs	r3, #2
  }
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	4613      	mov	r3, r2
 8004c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c94:	e03b      	b.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c9c:	d037      	beq.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9e:	f7fc fc2d 	bl	80014fc <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	6a3a      	ldr	r2, [r7, #32]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d302      	bcc.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e03a      	b.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d023      	beq.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b80      	cmp	r3, #128	@ 0x80
 8004cca:	d020      	beq.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b40      	cmp	r3, #64	@ 0x40
 8004cd0:	d01d      	beq.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d116      	bne.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f81d 	bl	8004d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2208      	movs	r2, #8
 8004d00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e00f      	b.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	4013      	ands	r3, r2
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	bf0c      	ite	eq
 8004d1e:	2301      	moveq	r3, #1
 8004d20:	2300      	movne	r3, #0
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d0b4      	beq.n	8004c96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b095      	sub	sp, #84	@ 0x54
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e5      	bne.n	8004d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3314      	adds	r3, #20
 8004d78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3314      	adds	r3, #20
 8004d90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e5      	bne.n	8004d72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d119      	bne.n	8004de2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	330c      	adds	r3, #12
 8004db4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f023 0310 	bic.w	r3, r3, #16
 8004dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dce:	61ba      	str	r2, [r7, #24]
 8004dd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	6979      	ldr	r1, [r7, #20]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	e841 2300 	strex	r3, r2, [r1]
 8004dda:	613b      	str	r3, [r7, #16]
   return(result);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1e5      	bne.n	8004dae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004df0:	bf00      	nop
 8004df2:	3754      	adds	r7, #84	@ 0x54
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr
	...

08004dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e36:	f023 030c 	bic.w	r3, r3, #12
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	430b      	orrs	r3, r1
 8004e42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004f10 <UART_SetConfig+0x114>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d103      	bne.n	8004e6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7ff f8ce 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	e002      	b.n	8004e72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e6c:	f7ff f8b6 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8004e70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009a      	lsls	r2, r3, #2
 8004e7c:	441a      	add	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	4a22      	ldr	r2, [pc, #136]	@ (8004f14 <UART_SetConfig+0x118>)
 8004e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	0119      	lsls	r1, r3, #4
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	009a      	lsls	r2, r3, #2
 8004e9c:	441a      	add	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f14 <UART_SetConfig+0x118>)
 8004eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	2064      	movs	r0, #100	@ 0x64
 8004eb2:	fb00 f303 	mul.w	r3, r0, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	3332      	adds	r3, #50	@ 0x32
 8004ebc:	4a15      	ldr	r2, [pc, #84]	@ (8004f14 <UART_SetConfig+0x118>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ec8:	4419      	add	r1, r3
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	009a      	lsls	r2, r3, #2
 8004ed4:	441a      	add	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f14 <UART_SetConfig+0x118>)
 8004ee2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ee6:	095b      	lsrs	r3, r3, #5
 8004ee8:	2064      	movs	r0, #100	@ 0x64
 8004eea:	fb00 f303 	mul.w	r3, r0, r3
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	3332      	adds	r3, #50	@ 0x32
 8004ef4:	4a07      	ldr	r2, [pc, #28]	@ (8004f14 <UART_SetConfig+0x118>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	f003 020f 	and.w	r2, r3, #15
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	440a      	add	r2, r1
 8004f06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f08:	bf00      	nop
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40013800 	.word	0x40013800
 8004f14:	51eb851f 	.word	0x51eb851f

08004f18 <sniprintf>:
 8004f18:	b40c      	push	{r2, r3}
 8004f1a:	b530      	push	{r4, r5, lr}
 8004f1c:	4b17      	ldr	r3, [pc, #92]	@ (8004f7c <sniprintf+0x64>)
 8004f1e:	1e0c      	subs	r4, r1, #0
 8004f20:	681d      	ldr	r5, [r3, #0]
 8004f22:	b09d      	sub	sp, #116	@ 0x74
 8004f24:	da08      	bge.n	8004f38 <sniprintf+0x20>
 8004f26:	238b      	movs	r3, #139	@ 0x8b
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	b01d      	add	sp, #116	@ 0x74
 8004f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f34:	b002      	add	sp, #8
 8004f36:	4770      	bx	lr
 8004f38:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004f3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004f40:	bf0c      	ite	eq
 8004f42:	4623      	moveq	r3, r4
 8004f44:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004f48:	9304      	str	r3, [sp, #16]
 8004f4a:	9307      	str	r3, [sp, #28]
 8004f4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f50:	9002      	str	r0, [sp, #8]
 8004f52:	9006      	str	r0, [sp, #24]
 8004f54:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004f58:	4628      	mov	r0, r5
 8004f5a:	ab21      	add	r3, sp, #132	@ 0x84
 8004f5c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004f5e:	a902      	add	r1, sp, #8
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	f000 f89d 	bl	80050a0 <_svfiprintf_r>
 8004f66:	1c43      	adds	r3, r0, #1
 8004f68:	bfbc      	itt	lt
 8004f6a:	238b      	movlt	r3, #139	@ 0x8b
 8004f6c:	602b      	strlt	r3, [r5, #0]
 8004f6e:	2c00      	cmp	r4, #0
 8004f70:	d0dd      	beq.n	8004f2e <sniprintf+0x16>
 8004f72:	2200      	movs	r2, #0
 8004f74:	9b02      	ldr	r3, [sp, #8]
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	e7d9      	b.n	8004f2e <sniprintf+0x16>
 8004f7a:	bf00      	nop
 8004f7c:	2000000c 	.word	0x2000000c

08004f80 <memset>:
 8004f80:	4603      	mov	r3, r0
 8004f82:	4402      	add	r2, r0
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d100      	bne.n	8004f8a <memset+0xa>
 8004f88:	4770      	bx	lr
 8004f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8e:	e7f9      	b.n	8004f84 <memset+0x4>

08004f90 <__errno>:
 8004f90:	4b01      	ldr	r3, [pc, #4]	@ (8004f98 <__errno+0x8>)
 8004f92:	6818      	ldr	r0, [r3, #0]
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	2000000c 	.word	0x2000000c

08004f9c <__libc_init_array>:
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	2600      	movs	r6, #0
 8004fa0:	4d0c      	ldr	r5, [pc, #48]	@ (8004fd4 <__libc_init_array+0x38>)
 8004fa2:	4c0d      	ldr	r4, [pc, #52]	@ (8004fd8 <__libc_init_array+0x3c>)
 8004fa4:	1b64      	subs	r4, r4, r5
 8004fa6:	10a4      	asrs	r4, r4, #2
 8004fa8:	42a6      	cmp	r6, r4
 8004faa:	d109      	bne.n	8004fc0 <__libc_init_array+0x24>
 8004fac:	f000 fc78 	bl	80058a0 <_init>
 8004fb0:	2600      	movs	r6, #0
 8004fb2:	4d0a      	ldr	r5, [pc, #40]	@ (8004fdc <__libc_init_array+0x40>)
 8004fb4:	4c0a      	ldr	r4, [pc, #40]	@ (8004fe0 <__libc_init_array+0x44>)
 8004fb6:	1b64      	subs	r4, r4, r5
 8004fb8:	10a4      	asrs	r4, r4, #2
 8004fba:	42a6      	cmp	r6, r4
 8004fbc:	d105      	bne.n	8004fca <__libc_init_array+0x2e>
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}
 8004fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc4:	4798      	blx	r3
 8004fc6:	3601      	adds	r6, #1
 8004fc8:	e7ee      	b.n	8004fa8 <__libc_init_array+0xc>
 8004fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fce:	4798      	blx	r3
 8004fd0:	3601      	adds	r6, #1
 8004fd2:	e7f2      	b.n	8004fba <__libc_init_array+0x1e>
 8004fd4:	08005a08 	.word	0x08005a08
 8004fd8:	08005a08 	.word	0x08005a08
 8004fdc:	08005a08 	.word	0x08005a08
 8004fe0:	08005a0c 	.word	0x08005a0c

08004fe4 <__retarget_lock_acquire_recursive>:
 8004fe4:	4770      	bx	lr

08004fe6 <__retarget_lock_release_recursive>:
 8004fe6:	4770      	bx	lr

08004fe8 <__ssputs_r>:
 8004fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fec:	461f      	mov	r7, r3
 8004fee:	688e      	ldr	r6, [r1, #8]
 8004ff0:	4682      	mov	sl, r0
 8004ff2:	42be      	cmp	r6, r7
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	4690      	mov	r8, r2
 8004ff8:	680b      	ldr	r3, [r1, #0]
 8004ffa:	d82d      	bhi.n	8005058 <__ssputs_r+0x70>
 8004ffc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005000:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005004:	d026      	beq.n	8005054 <__ssputs_r+0x6c>
 8005006:	6965      	ldr	r5, [r4, #20]
 8005008:	6909      	ldr	r1, [r1, #16]
 800500a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800500e:	eba3 0901 	sub.w	r9, r3, r1
 8005012:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005016:	1c7b      	adds	r3, r7, #1
 8005018:	444b      	add	r3, r9
 800501a:	106d      	asrs	r5, r5, #1
 800501c:	429d      	cmp	r5, r3
 800501e:	bf38      	it	cc
 8005020:	461d      	movcc	r5, r3
 8005022:	0553      	lsls	r3, r2, #21
 8005024:	d527      	bpl.n	8005076 <__ssputs_r+0x8e>
 8005026:	4629      	mov	r1, r5
 8005028:	f000 f958 	bl	80052dc <_malloc_r>
 800502c:	4606      	mov	r6, r0
 800502e:	b360      	cbz	r0, 800508a <__ssputs_r+0xa2>
 8005030:	464a      	mov	r2, r9
 8005032:	6921      	ldr	r1, [r4, #16]
 8005034:	f000 fbd6 	bl	80057e4 <memcpy>
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800503e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005042:	81a3      	strh	r3, [r4, #12]
 8005044:	6126      	str	r6, [r4, #16]
 8005046:	444e      	add	r6, r9
 8005048:	6026      	str	r6, [r4, #0]
 800504a:	463e      	mov	r6, r7
 800504c:	6165      	str	r5, [r4, #20]
 800504e:	eba5 0509 	sub.w	r5, r5, r9
 8005052:	60a5      	str	r5, [r4, #8]
 8005054:	42be      	cmp	r6, r7
 8005056:	d900      	bls.n	800505a <__ssputs_r+0x72>
 8005058:	463e      	mov	r6, r7
 800505a:	4632      	mov	r2, r6
 800505c:	4641      	mov	r1, r8
 800505e:	6820      	ldr	r0, [r4, #0]
 8005060:	f000 fb88 	bl	8005774 <memmove>
 8005064:	2000      	movs	r0, #0
 8005066:	68a3      	ldr	r3, [r4, #8]
 8005068:	1b9b      	subs	r3, r3, r6
 800506a:	60a3      	str	r3, [r4, #8]
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	4433      	add	r3, r6
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005076:	462a      	mov	r2, r5
 8005078:	f000 fb4e 	bl	8005718 <_realloc_r>
 800507c:	4606      	mov	r6, r0
 800507e:	2800      	cmp	r0, #0
 8005080:	d1e0      	bne.n	8005044 <__ssputs_r+0x5c>
 8005082:	4650      	mov	r0, sl
 8005084:	6921      	ldr	r1, [r4, #16]
 8005086:	f000 fbbb 	bl	8005800 <_free_r>
 800508a:	230c      	movs	r3, #12
 800508c:	f8ca 3000 	str.w	r3, [sl]
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800509a:	81a3      	strh	r3, [r4, #12]
 800509c:	e7e9      	b.n	8005072 <__ssputs_r+0x8a>
	...

080050a0 <_svfiprintf_r>:
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	4698      	mov	r8, r3
 80050a6:	898b      	ldrh	r3, [r1, #12]
 80050a8:	4607      	mov	r7, r0
 80050aa:	061b      	lsls	r3, r3, #24
 80050ac:	460d      	mov	r5, r1
 80050ae:	4614      	mov	r4, r2
 80050b0:	b09d      	sub	sp, #116	@ 0x74
 80050b2:	d510      	bpl.n	80050d6 <_svfiprintf_r+0x36>
 80050b4:	690b      	ldr	r3, [r1, #16]
 80050b6:	b973      	cbnz	r3, 80050d6 <_svfiprintf_r+0x36>
 80050b8:	2140      	movs	r1, #64	@ 0x40
 80050ba:	f000 f90f 	bl	80052dc <_malloc_r>
 80050be:	6028      	str	r0, [r5, #0]
 80050c0:	6128      	str	r0, [r5, #16]
 80050c2:	b930      	cbnz	r0, 80050d2 <_svfiprintf_r+0x32>
 80050c4:	230c      	movs	r3, #12
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050cc:	b01d      	add	sp, #116	@ 0x74
 80050ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d2:	2340      	movs	r3, #64	@ 0x40
 80050d4:	616b      	str	r3, [r5, #20]
 80050d6:	2300      	movs	r3, #0
 80050d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80050da:	2320      	movs	r3, #32
 80050dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050e0:	2330      	movs	r3, #48	@ 0x30
 80050e2:	f04f 0901 	mov.w	r9, #1
 80050e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005284 <_svfiprintf_r+0x1e4>
 80050ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050f2:	4623      	mov	r3, r4
 80050f4:	469a      	mov	sl, r3
 80050f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050fa:	b10a      	cbz	r2, 8005100 <_svfiprintf_r+0x60>
 80050fc:	2a25      	cmp	r2, #37	@ 0x25
 80050fe:	d1f9      	bne.n	80050f4 <_svfiprintf_r+0x54>
 8005100:	ebba 0b04 	subs.w	fp, sl, r4
 8005104:	d00b      	beq.n	800511e <_svfiprintf_r+0x7e>
 8005106:	465b      	mov	r3, fp
 8005108:	4622      	mov	r2, r4
 800510a:	4629      	mov	r1, r5
 800510c:	4638      	mov	r0, r7
 800510e:	f7ff ff6b 	bl	8004fe8 <__ssputs_r>
 8005112:	3001      	adds	r0, #1
 8005114:	f000 80a7 	beq.w	8005266 <_svfiprintf_r+0x1c6>
 8005118:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800511a:	445a      	add	r2, fp
 800511c:	9209      	str	r2, [sp, #36]	@ 0x24
 800511e:	f89a 3000 	ldrb.w	r3, [sl]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 809f 	beq.w	8005266 <_svfiprintf_r+0x1c6>
 8005128:	2300      	movs	r3, #0
 800512a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800512e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005132:	f10a 0a01 	add.w	sl, sl, #1
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	9307      	str	r3, [sp, #28]
 800513a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800513e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005140:	4654      	mov	r4, sl
 8005142:	2205      	movs	r2, #5
 8005144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005148:	484e      	ldr	r0, [pc, #312]	@ (8005284 <_svfiprintf_r+0x1e4>)
 800514a:	f000 fb3d 	bl	80057c8 <memchr>
 800514e:	9a04      	ldr	r2, [sp, #16]
 8005150:	b9d8      	cbnz	r0, 800518a <_svfiprintf_r+0xea>
 8005152:	06d0      	lsls	r0, r2, #27
 8005154:	bf44      	itt	mi
 8005156:	2320      	movmi	r3, #32
 8005158:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800515c:	0711      	lsls	r1, r2, #28
 800515e:	bf44      	itt	mi
 8005160:	232b      	movmi	r3, #43	@ 0x2b
 8005162:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005166:	f89a 3000 	ldrb.w	r3, [sl]
 800516a:	2b2a      	cmp	r3, #42	@ 0x2a
 800516c:	d015      	beq.n	800519a <_svfiprintf_r+0xfa>
 800516e:	4654      	mov	r4, sl
 8005170:	2000      	movs	r0, #0
 8005172:	f04f 0c0a 	mov.w	ip, #10
 8005176:	9a07      	ldr	r2, [sp, #28]
 8005178:	4621      	mov	r1, r4
 800517a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800517e:	3b30      	subs	r3, #48	@ 0x30
 8005180:	2b09      	cmp	r3, #9
 8005182:	d94b      	bls.n	800521c <_svfiprintf_r+0x17c>
 8005184:	b1b0      	cbz	r0, 80051b4 <_svfiprintf_r+0x114>
 8005186:	9207      	str	r2, [sp, #28]
 8005188:	e014      	b.n	80051b4 <_svfiprintf_r+0x114>
 800518a:	eba0 0308 	sub.w	r3, r0, r8
 800518e:	fa09 f303 	lsl.w	r3, r9, r3
 8005192:	4313      	orrs	r3, r2
 8005194:	46a2      	mov	sl, r4
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	e7d2      	b.n	8005140 <_svfiprintf_r+0xa0>
 800519a:	9b03      	ldr	r3, [sp, #12]
 800519c:	1d19      	adds	r1, r3, #4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	9103      	str	r1, [sp, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bfbb      	ittet	lt
 80051a6:	425b      	neglt	r3, r3
 80051a8:	f042 0202 	orrlt.w	r2, r2, #2
 80051ac:	9307      	strge	r3, [sp, #28]
 80051ae:	9307      	strlt	r3, [sp, #28]
 80051b0:	bfb8      	it	lt
 80051b2:	9204      	strlt	r2, [sp, #16]
 80051b4:	7823      	ldrb	r3, [r4, #0]
 80051b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80051b8:	d10a      	bne.n	80051d0 <_svfiprintf_r+0x130>
 80051ba:	7863      	ldrb	r3, [r4, #1]
 80051bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80051be:	d132      	bne.n	8005226 <_svfiprintf_r+0x186>
 80051c0:	9b03      	ldr	r3, [sp, #12]
 80051c2:	3402      	adds	r4, #2
 80051c4:	1d1a      	adds	r2, r3, #4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	9203      	str	r2, [sp, #12]
 80051ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051ce:	9305      	str	r3, [sp, #20]
 80051d0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005288 <_svfiprintf_r+0x1e8>
 80051d4:	2203      	movs	r2, #3
 80051d6:	4650      	mov	r0, sl
 80051d8:	7821      	ldrb	r1, [r4, #0]
 80051da:	f000 faf5 	bl	80057c8 <memchr>
 80051de:	b138      	cbz	r0, 80051f0 <_svfiprintf_r+0x150>
 80051e0:	2240      	movs	r2, #64	@ 0x40
 80051e2:	9b04      	ldr	r3, [sp, #16]
 80051e4:	eba0 000a 	sub.w	r0, r0, sl
 80051e8:	4082      	lsls	r2, r0
 80051ea:	4313      	orrs	r3, r2
 80051ec:	3401      	adds	r4, #1
 80051ee:	9304      	str	r3, [sp, #16]
 80051f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f4:	2206      	movs	r2, #6
 80051f6:	4825      	ldr	r0, [pc, #148]	@ (800528c <_svfiprintf_r+0x1ec>)
 80051f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051fc:	f000 fae4 	bl	80057c8 <memchr>
 8005200:	2800      	cmp	r0, #0
 8005202:	d036      	beq.n	8005272 <_svfiprintf_r+0x1d2>
 8005204:	4b22      	ldr	r3, [pc, #136]	@ (8005290 <_svfiprintf_r+0x1f0>)
 8005206:	bb1b      	cbnz	r3, 8005250 <_svfiprintf_r+0x1b0>
 8005208:	9b03      	ldr	r3, [sp, #12]
 800520a:	3307      	adds	r3, #7
 800520c:	f023 0307 	bic.w	r3, r3, #7
 8005210:	3308      	adds	r3, #8
 8005212:	9303      	str	r3, [sp, #12]
 8005214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005216:	4433      	add	r3, r6
 8005218:	9309      	str	r3, [sp, #36]	@ 0x24
 800521a:	e76a      	b.n	80050f2 <_svfiprintf_r+0x52>
 800521c:	460c      	mov	r4, r1
 800521e:	2001      	movs	r0, #1
 8005220:	fb0c 3202 	mla	r2, ip, r2, r3
 8005224:	e7a8      	b.n	8005178 <_svfiprintf_r+0xd8>
 8005226:	2300      	movs	r3, #0
 8005228:	f04f 0c0a 	mov.w	ip, #10
 800522c:	4619      	mov	r1, r3
 800522e:	3401      	adds	r4, #1
 8005230:	9305      	str	r3, [sp, #20]
 8005232:	4620      	mov	r0, r4
 8005234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005238:	3a30      	subs	r2, #48	@ 0x30
 800523a:	2a09      	cmp	r2, #9
 800523c:	d903      	bls.n	8005246 <_svfiprintf_r+0x1a6>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0c6      	beq.n	80051d0 <_svfiprintf_r+0x130>
 8005242:	9105      	str	r1, [sp, #20]
 8005244:	e7c4      	b.n	80051d0 <_svfiprintf_r+0x130>
 8005246:	4604      	mov	r4, r0
 8005248:	2301      	movs	r3, #1
 800524a:	fb0c 2101 	mla	r1, ip, r1, r2
 800524e:	e7f0      	b.n	8005232 <_svfiprintf_r+0x192>
 8005250:	ab03      	add	r3, sp, #12
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	462a      	mov	r2, r5
 8005256:	4638      	mov	r0, r7
 8005258:	4b0e      	ldr	r3, [pc, #56]	@ (8005294 <_svfiprintf_r+0x1f4>)
 800525a:	a904      	add	r1, sp, #16
 800525c:	f3af 8000 	nop.w
 8005260:	1c42      	adds	r2, r0, #1
 8005262:	4606      	mov	r6, r0
 8005264:	d1d6      	bne.n	8005214 <_svfiprintf_r+0x174>
 8005266:	89ab      	ldrh	r3, [r5, #12]
 8005268:	065b      	lsls	r3, r3, #25
 800526a:	f53f af2d 	bmi.w	80050c8 <_svfiprintf_r+0x28>
 800526e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005270:	e72c      	b.n	80050cc <_svfiprintf_r+0x2c>
 8005272:	ab03      	add	r3, sp, #12
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	462a      	mov	r2, r5
 8005278:	4638      	mov	r0, r7
 800527a:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <_svfiprintf_r+0x1f4>)
 800527c:	a904      	add	r1, sp, #16
 800527e:	f000 f91f 	bl	80054c0 <_printf_i>
 8005282:	e7ed      	b.n	8005260 <_svfiprintf_r+0x1c0>
 8005284:	080059ca 	.word	0x080059ca
 8005288:	080059d0 	.word	0x080059d0
 800528c:	080059d4 	.word	0x080059d4
 8005290:	00000000 	.word	0x00000000
 8005294:	08004fe9 	.word	0x08004fe9

08005298 <sbrk_aligned>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	4e0f      	ldr	r6, [pc, #60]	@ (80052d8 <sbrk_aligned+0x40>)
 800529c:	460c      	mov	r4, r1
 800529e:	6831      	ldr	r1, [r6, #0]
 80052a0:	4605      	mov	r5, r0
 80052a2:	b911      	cbnz	r1, 80052aa <sbrk_aligned+0x12>
 80052a4:	f000 fa80 	bl	80057a8 <_sbrk_r>
 80052a8:	6030      	str	r0, [r6, #0]
 80052aa:	4621      	mov	r1, r4
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 fa7b 	bl	80057a8 <_sbrk_r>
 80052b2:	1c43      	adds	r3, r0, #1
 80052b4:	d103      	bne.n	80052be <sbrk_aligned+0x26>
 80052b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80052ba:	4620      	mov	r0, r4
 80052bc:	bd70      	pop	{r4, r5, r6, pc}
 80052be:	1cc4      	adds	r4, r0, #3
 80052c0:	f024 0403 	bic.w	r4, r4, #3
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d0f8      	beq.n	80052ba <sbrk_aligned+0x22>
 80052c8:	1a21      	subs	r1, r4, r0
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 fa6c 	bl	80057a8 <_sbrk_r>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d1f2      	bne.n	80052ba <sbrk_aligned+0x22>
 80052d4:	e7ef      	b.n	80052b6 <sbrk_aligned+0x1e>
 80052d6:	bf00      	nop
 80052d8:	2000036c 	.word	0x2000036c

080052dc <_malloc_r>:
 80052dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e0:	1ccd      	adds	r5, r1, #3
 80052e2:	f025 0503 	bic.w	r5, r5, #3
 80052e6:	3508      	adds	r5, #8
 80052e8:	2d0c      	cmp	r5, #12
 80052ea:	bf38      	it	cc
 80052ec:	250c      	movcc	r5, #12
 80052ee:	2d00      	cmp	r5, #0
 80052f0:	4606      	mov	r6, r0
 80052f2:	db01      	blt.n	80052f8 <_malloc_r+0x1c>
 80052f4:	42a9      	cmp	r1, r5
 80052f6:	d904      	bls.n	8005302 <_malloc_r+0x26>
 80052f8:	230c      	movs	r3, #12
 80052fa:	6033      	str	r3, [r6, #0]
 80052fc:	2000      	movs	r0, #0
 80052fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053d8 <_malloc_r+0xfc>
 8005306:	f000 f9fb 	bl	8005700 <__malloc_lock>
 800530a:	f8d8 3000 	ldr.w	r3, [r8]
 800530e:	461c      	mov	r4, r3
 8005310:	bb44      	cbnz	r4, 8005364 <_malloc_r+0x88>
 8005312:	4629      	mov	r1, r5
 8005314:	4630      	mov	r0, r6
 8005316:	f7ff ffbf 	bl	8005298 <sbrk_aligned>
 800531a:	1c43      	adds	r3, r0, #1
 800531c:	4604      	mov	r4, r0
 800531e:	d158      	bne.n	80053d2 <_malloc_r+0xf6>
 8005320:	f8d8 4000 	ldr.w	r4, [r8]
 8005324:	4627      	mov	r7, r4
 8005326:	2f00      	cmp	r7, #0
 8005328:	d143      	bne.n	80053b2 <_malloc_r+0xd6>
 800532a:	2c00      	cmp	r4, #0
 800532c:	d04b      	beq.n	80053c6 <_malloc_r+0xea>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	4639      	mov	r1, r7
 8005332:	4630      	mov	r0, r6
 8005334:	eb04 0903 	add.w	r9, r4, r3
 8005338:	f000 fa36 	bl	80057a8 <_sbrk_r>
 800533c:	4581      	cmp	r9, r0
 800533e:	d142      	bne.n	80053c6 <_malloc_r+0xea>
 8005340:	6821      	ldr	r1, [r4, #0]
 8005342:	4630      	mov	r0, r6
 8005344:	1a6d      	subs	r5, r5, r1
 8005346:	4629      	mov	r1, r5
 8005348:	f7ff ffa6 	bl	8005298 <sbrk_aligned>
 800534c:	3001      	adds	r0, #1
 800534e:	d03a      	beq.n	80053c6 <_malloc_r+0xea>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	442b      	add	r3, r5
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	f8d8 3000 	ldr.w	r3, [r8]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	bb62      	cbnz	r2, 80053b8 <_malloc_r+0xdc>
 800535e:	f8c8 7000 	str.w	r7, [r8]
 8005362:	e00f      	b.n	8005384 <_malloc_r+0xa8>
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	1b52      	subs	r2, r2, r5
 8005368:	d420      	bmi.n	80053ac <_malloc_r+0xd0>
 800536a:	2a0b      	cmp	r2, #11
 800536c:	d917      	bls.n	800539e <_malloc_r+0xc2>
 800536e:	1961      	adds	r1, r4, r5
 8005370:	42a3      	cmp	r3, r4
 8005372:	6025      	str	r5, [r4, #0]
 8005374:	bf18      	it	ne
 8005376:	6059      	strne	r1, [r3, #4]
 8005378:	6863      	ldr	r3, [r4, #4]
 800537a:	bf08      	it	eq
 800537c:	f8c8 1000 	streq.w	r1, [r8]
 8005380:	5162      	str	r2, [r4, r5]
 8005382:	604b      	str	r3, [r1, #4]
 8005384:	4630      	mov	r0, r6
 8005386:	f000 f9c1 	bl	800570c <__malloc_unlock>
 800538a:	f104 000b 	add.w	r0, r4, #11
 800538e:	1d23      	adds	r3, r4, #4
 8005390:	f020 0007 	bic.w	r0, r0, #7
 8005394:	1ac2      	subs	r2, r0, r3
 8005396:	bf1c      	itt	ne
 8005398:	1a1b      	subne	r3, r3, r0
 800539a:	50a3      	strne	r3, [r4, r2]
 800539c:	e7af      	b.n	80052fe <_malloc_r+0x22>
 800539e:	6862      	ldr	r2, [r4, #4]
 80053a0:	42a3      	cmp	r3, r4
 80053a2:	bf0c      	ite	eq
 80053a4:	f8c8 2000 	streq.w	r2, [r8]
 80053a8:	605a      	strne	r2, [r3, #4]
 80053aa:	e7eb      	b.n	8005384 <_malloc_r+0xa8>
 80053ac:	4623      	mov	r3, r4
 80053ae:	6864      	ldr	r4, [r4, #4]
 80053b0:	e7ae      	b.n	8005310 <_malloc_r+0x34>
 80053b2:	463c      	mov	r4, r7
 80053b4:	687f      	ldr	r7, [r7, #4]
 80053b6:	e7b6      	b.n	8005326 <_malloc_r+0x4a>
 80053b8:	461a      	mov	r2, r3
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	42a3      	cmp	r3, r4
 80053be:	d1fb      	bne.n	80053b8 <_malloc_r+0xdc>
 80053c0:	2300      	movs	r3, #0
 80053c2:	6053      	str	r3, [r2, #4]
 80053c4:	e7de      	b.n	8005384 <_malloc_r+0xa8>
 80053c6:	230c      	movs	r3, #12
 80053c8:	4630      	mov	r0, r6
 80053ca:	6033      	str	r3, [r6, #0]
 80053cc:	f000 f99e 	bl	800570c <__malloc_unlock>
 80053d0:	e794      	b.n	80052fc <_malloc_r+0x20>
 80053d2:	6005      	str	r5, [r0, #0]
 80053d4:	e7d6      	b.n	8005384 <_malloc_r+0xa8>
 80053d6:	bf00      	nop
 80053d8:	20000370 	.word	0x20000370

080053dc <_printf_common>:
 80053dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053e0:	4616      	mov	r6, r2
 80053e2:	4698      	mov	r8, r3
 80053e4:	688a      	ldr	r2, [r1, #8]
 80053e6:	690b      	ldr	r3, [r1, #16]
 80053e8:	4607      	mov	r7, r0
 80053ea:	4293      	cmp	r3, r2
 80053ec:	bfb8      	it	lt
 80053ee:	4613      	movlt	r3, r2
 80053f0:	6033      	str	r3, [r6, #0]
 80053f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053f6:	460c      	mov	r4, r1
 80053f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053fc:	b10a      	cbz	r2, 8005402 <_printf_common+0x26>
 80053fe:	3301      	adds	r3, #1
 8005400:	6033      	str	r3, [r6, #0]
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	0699      	lsls	r1, r3, #26
 8005406:	bf42      	ittt	mi
 8005408:	6833      	ldrmi	r3, [r6, #0]
 800540a:	3302      	addmi	r3, #2
 800540c:	6033      	strmi	r3, [r6, #0]
 800540e:	6825      	ldr	r5, [r4, #0]
 8005410:	f015 0506 	ands.w	r5, r5, #6
 8005414:	d106      	bne.n	8005424 <_printf_common+0x48>
 8005416:	f104 0a19 	add.w	sl, r4, #25
 800541a:	68e3      	ldr	r3, [r4, #12]
 800541c:	6832      	ldr	r2, [r6, #0]
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	42ab      	cmp	r3, r5
 8005422:	dc2b      	bgt.n	800547c <_printf_common+0xa0>
 8005424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005428:	6822      	ldr	r2, [r4, #0]
 800542a:	3b00      	subs	r3, #0
 800542c:	bf18      	it	ne
 800542e:	2301      	movne	r3, #1
 8005430:	0692      	lsls	r2, r2, #26
 8005432:	d430      	bmi.n	8005496 <_printf_common+0xba>
 8005434:	4641      	mov	r1, r8
 8005436:	4638      	mov	r0, r7
 8005438:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800543c:	47c8      	blx	r9
 800543e:	3001      	adds	r0, #1
 8005440:	d023      	beq.n	800548a <_printf_common+0xae>
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	6922      	ldr	r2, [r4, #16]
 8005446:	f003 0306 	and.w	r3, r3, #6
 800544a:	2b04      	cmp	r3, #4
 800544c:	bf14      	ite	ne
 800544e:	2500      	movne	r5, #0
 8005450:	6833      	ldreq	r3, [r6, #0]
 8005452:	f04f 0600 	mov.w	r6, #0
 8005456:	bf08      	it	eq
 8005458:	68e5      	ldreq	r5, [r4, #12]
 800545a:	f104 041a 	add.w	r4, r4, #26
 800545e:	bf08      	it	eq
 8005460:	1aed      	subeq	r5, r5, r3
 8005462:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005466:	bf08      	it	eq
 8005468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800546c:	4293      	cmp	r3, r2
 800546e:	bfc4      	itt	gt
 8005470:	1a9b      	subgt	r3, r3, r2
 8005472:	18ed      	addgt	r5, r5, r3
 8005474:	42b5      	cmp	r5, r6
 8005476:	d11a      	bne.n	80054ae <_printf_common+0xd2>
 8005478:	2000      	movs	r0, #0
 800547a:	e008      	b.n	800548e <_printf_common+0xb2>
 800547c:	2301      	movs	r3, #1
 800547e:	4652      	mov	r2, sl
 8005480:	4641      	mov	r1, r8
 8005482:	4638      	mov	r0, r7
 8005484:	47c8      	blx	r9
 8005486:	3001      	adds	r0, #1
 8005488:	d103      	bne.n	8005492 <_printf_common+0xb6>
 800548a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800548e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005492:	3501      	adds	r5, #1
 8005494:	e7c1      	b.n	800541a <_printf_common+0x3e>
 8005496:	2030      	movs	r0, #48	@ 0x30
 8005498:	18e1      	adds	r1, r4, r3
 800549a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054a4:	4422      	add	r2, r4
 80054a6:	3302      	adds	r3, #2
 80054a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054ac:	e7c2      	b.n	8005434 <_printf_common+0x58>
 80054ae:	2301      	movs	r3, #1
 80054b0:	4622      	mov	r2, r4
 80054b2:	4641      	mov	r1, r8
 80054b4:	4638      	mov	r0, r7
 80054b6:	47c8      	blx	r9
 80054b8:	3001      	adds	r0, #1
 80054ba:	d0e6      	beq.n	800548a <_printf_common+0xae>
 80054bc:	3601      	adds	r6, #1
 80054be:	e7d9      	b.n	8005474 <_printf_common+0x98>

080054c0 <_printf_i>:
 80054c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054c4:	7e0f      	ldrb	r7, [r1, #24]
 80054c6:	4691      	mov	r9, r2
 80054c8:	2f78      	cmp	r7, #120	@ 0x78
 80054ca:	4680      	mov	r8, r0
 80054cc:	460c      	mov	r4, r1
 80054ce:	469a      	mov	sl, r3
 80054d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054d6:	d807      	bhi.n	80054e8 <_printf_i+0x28>
 80054d8:	2f62      	cmp	r7, #98	@ 0x62
 80054da:	d80a      	bhi.n	80054f2 <_printf_i+0x32>
 80054dc:	2f00      	cmp	r7, #0
 80054de:	f000 80d3 	beq.w	8005688 <_printf_i+0x1c8>
 80054e2:	2f58      	cmp	r7, #88	@ 0x58
 80054e4:	f000 80ba 	beq.w	800565c <_printf_i+0x19c>
 80054e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054f0:	e03a      	b.n	8005568 <_printf_i+0xa8>
 80054f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054f6:	2b15      	cmp	r3, #21
 80054f8:	d8f6      	bhi.n	80054e8 <_printf_i+0x28>
 80054fa:	a101      	add	r1, pc, #4	@ (adr r1, 8005500 <_printf_i+0x40>)
 80054fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005500:	08005559 	.word	0x08005559
 8005504:	0800556d 	.word	0x0800556d
 8005508:	080054e9 	.word	0x080054e9
 800550c:	080054e9 	.word	0x080054e9
 8005510:	080054e9 	.word	0x080054e9
 8005514:	080054e9 	.word	0x080054e9
 8005518:	0800556d 	.word	0x0800556d
 800551c:	080054e9 	.word	0x080054e9
 8005520:	080054e9 	.word	0x080054e9
 8005524:	080054e9 	.word	0x080054e9
 8005528:	080054e9 	.word	0x080054e9
 800552c:	0800566f 	.word	0x0800566f
 8005530:	08005597 	.word	0x08005597
 8005534:	08005629 	.word	0x08005629
 8005538:	080054e9 	.word	0x080054e9
 800553c:	080054e9 	.word	0x080054e9
 8005540:	08005691 	.word	0x08005691
 8005544:	080054e9 	.word	0x080054e9
 8005548:	08005597 	.word	0x08005597
 800554c:	080054e9 	.word	0x080054e9
 8005550:	080054e9 	.word	0x080054e9
 8005554:	08005631 	.word	0x08005631
 8005558:	6833      	ldr	r3, [r6, #0]
 800555a:	1d1a      	adds	r2, r3, #4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6032      	str	r2, [r6, #0]
 8005560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005568:	2301      	movs	r3, #1
 800556a:	e09e      	b.n	80056aa <_printf_i+0x1ea>
 800556c:	6833      	ldr	r3, [r6, #0]
 800556e:	6820      	ldr	r0, [r4, #0]
 8005570:	1d19      	adds	r1, r3, #4
 8005572:	6031      	str	r1, [r6, #0]
 8005574:	0606      	lsls	r6, r0, #24
 8005576:	d501      	bpl.n	800557c <_printf_i+0xbc>
 8005578:	681d      	ldr	r5, [r3, #0]
 800557a:	e003      	b.n	8005584 <_printf_i+0xc4>
 800557c:	0645      	lsls	r5, r0, #25
 800557e:	d5fb      	bpl.n	8005578 <_printf_i+0xb8>
 8005580:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005584:	2d00      	cmp	r5, #0
 8005586:	da03      	bge.n	8005590 <_printf_i+0xd0>
 8005588:	232d      	movs	r3, #45	@ 0x2d
 800558a:	426d      	negs	r5, r5
 800558c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005590:	230a      	movs	r3, #10
 8005592:	4859      	ldr	r0, [pc, #356]	@ (80056f8 <_printf_i+0x238>)
 8005594:	e011      	b.n	80055ba <_printf_i+0xfa>
 8005596:	6821      	ldr	r1, [r4, #0]
 8005598:	6833      	ldr	r3, [r6, #0]
 800559a:	0608      	lsls	r0, r1, #24
 800559c:	f853 5b04 	ldr.w	r5, [r3], #4
 80055a0:	d402      	bmi.n	80055a8 <_printf_i+0xe8>
 80055a2:	0649      	lsls	r1, r1, #25
 80055a4:	bf48      	it	mi
 80055a6:	b2ad      	uxthmi	r5, r5
 80055a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80055aa:	6033      	str	r3, [r6, #0]
 80055ac:	bf14      	ite	ne
 80055ae:	230a      	movne	r3, #10
 80055b0:	2308      	moveq	r3, #8
 80055b2:	4851      	ldr	r0, [pc, #324]	@ (80056f8 <_printf_i+0x238>)
 80055b4:	2100      	movs	r1, #0
 80055b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055ba:	6866      	ldr	r6, [r4, #4]
 80055bc:	2e00      	cmp	r6, #0
 80055be:	bfa8      	it	ge
 80055c0:	6821      	ldrge	r1, [r4, #0]
 80055c2:	60a6      	str	r6, [r4, #8]
 80055c4:	bfa4      	itt	ge
 80055c6:	f021 0104 	bicge.w	r1, r1, #4
 80055ca:	6021      	strge	r1, [r4, #0]
 80055cc:	b90d      	cbnz	r5, 80055d2 <_printf_i+0x112>
 80055ce:	2e00      	cmp	r6, #0
 80055d0:	d04b      	beq.n	800566a <_printf_i+0x1aa>
 80055d2:	4616      	mov	r6, r2
 80055d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80055d8:	fb03 5711 	mls	r7, r3, r1, r5
 80055dc:	5dc7      	ldrb	r7, [r0, r7]
 80055de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055e2:	462f      	mov	r7, r5
 80055e4:	42bb      	cmp	r3, r7
 80055e6:	460d      	mov	r5, r1
 80055e8:	d9f4      	bls.n	80055d4 <_printf_i+0x114>
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d10b      	bne.n	8005606 <_printf_i+0x146>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	07df      	lsls	r7, r3, #31
 80055f2:	d508      	bpl.n	8005606 <_printf_i+0x146>
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	6861      	ldr	r1, [r4, #4]
 80055f8:	4299      	cmp	r1, r3
 80055fa:	bfde      	ittt	le
 80055fc:	2330      	movle	r3, #48	@ 0x30
 80055fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005602:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005606:	1b92      	subs	r2, r2, r6
 8005608:	6122      	str	r2, [r4, #16]
 800560a:	464b      	mov	r3, r9
 800560c:	4621      	mov	r1, r4
 800560e:	4640      	mov	r0, r8
 8005610:	f8cd a000 	str.w	sl, [sp]
 8005614:	aa03      	add	r2, sp, #12
 8005616:	f7ff fee1 	bl	80053dc <_printf_common>
 800561a:	3001      	adds	r0, #1
 800561c:	d14a      	bne.n	80056b4 <_printf_i+0x1f4>
 800561e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005622:	b004      	add	sp, #16
 8005624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	f043 0320 	orr.w	r3, r3, #32
 800562e:	6023      	str	r3, [r4, #0]
 8005630:	2778      	movs	r7, #120	@ 0x78
 8005632:	4832      	ldr	r0, [pc, #200]	@ (80056fc <_printf_i+0x23c>)
 8005634:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	6831      	ldr	r1, [r6, #0]
 800563c:	061f      	lsls	r7, r3, #24
 800563e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005642:	d402      	bmi.n	800564a <_printf_i+0x18a>
 8005644:	065f      	lsls	r7, r3, #25
 8005646:	bf48      	it	mi
 8005648:	b2ad      	uxthmi	r5, r5
 800564a:	6031      	str	r1, [r6, #0]
 800564c:	07d9      	lsls	r1, r3, #31
 800564e:	bf44      	itt	mi
 8005650:	f043 0320 	orrmi.w	r3, r3, #32
 8005654:	6023      	strmi	r3, [r4, #0]
 8005656:	b11d      	cbz	r5, 8005660 <_printf_i+0x1a0>
 8005658:	2310      	movs	r3, #16
 800565a:	e7ab      	b.n	80055b4 <_printf_i+0xf4>
 800565c:	4826      	ldr	r0, [pc, #152]	@ (80056f8 <_printf_i+0x238>)
 800565e:	e7e9      	b.n	8005634 <_printf_i+0x174>
 8005660:	6823      	ldr	r3, [r4, #0]
 8005662:	f023 0320 	bic.w	r3, r3, #32
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	e7f6      	b.n	8005658 <_printf_i+0x198>
 800566a:	4616      	mov	r6, r2
 800566c:	e7bd      	b.n	80055ea <_printf_i+0x12a>
 800566e:	6833      	ldr	r3, [r6, #0]
 8005670:	6825      	ldr	r5, [r4, #0]
 8005672:	1d18      	adds	r0, r3, #4
 8005674:	6961      	ldr	r1, [r4, #20]
 8005676:	6030      	str	r0, [r6, #0]
 8005678:	062e      	lsls	r6, r5, #24
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	d501      	bpl.n	8005682 <_printf_i+0x1c2>
 800567e:	6019      	str	r1, [r3, #0]
 8005680:	e002      	b.n	8005688 <_printf_i+0x1c8>
 8005682:	0668      	lsls	r0, r5, #25
 8005684:	d5fb      	bpl.n	800567e <_printf_i+0x1be>
 8005686:	8019      	strh	r1, [r3, #0]
 8005688:	2300      	movs	r3, #0
 800568a:	4616      	mov	r6, r2
 800568c:	6123      	str	r3, [r4, #16]
 800568e:	e7bc      	b.n	800560a <_printf_i+0x14a>
 8005690:	6833      	ldr	r3, [r6, #0]
 8005692:	2100      	movs	r1, #0
 8005694:	1d1a      	adds	r2, r3, #4
 8005696:	6032      	str	r2, [r6, #0]
 8005698:	681e      	ldr	r6, [r3, #0]
 800569a:	6862      	ldr	r2, [r4, #4]
 800569c:	4630      	mov	r0, r6
 800569e:	f000 f893 	bl	80057c8 <memchr>
 80056a2:	b108      	cbz	r0, 80056a8 <_printf_i+0x1e8>
 80056a4:	1b80      	subs	r0, r0, r6
 80056a6:	6060      	str	r0, [r4, #4]
 80056a8:	6863      	ldr	r3, [r4, #4]
 80056aa:	6123      	str	r3, [r4, #16]
 80056ac:	2300      	movs	r3, #0
 80056ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056b2:	e7aa      	b.n	800560a <_printf_i+0x14a>
 80056b4:	4632      	mov	r2, r6
 80056b6:	4649      	mov	r1, r9
 80056b8:	4640      	mov	r0, r8
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	47d0      	blx	sl
 80056be:	3001      	adds	r0, #1
 80056c0:	d0ad      	beq.n	800561e <_printf_i+0x15e>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	079b      	lsls	r3, r3, #30
 80056c6:	d413      	bmi.n	80056f0 <_printf_i+0x230>
 80056c8:	68e0      	ldr	r0, [r4, #12]
 80056ca:	9b03      	ldr	r3, [sp, #12]
 80056cc:	4298      	cmp	r0, r3
 80056ce:	bfb8      	it	lt
 80056d0:	4618      	movlt	r0, r3
 80056d2:	e7a6      	b.n	8005622 <_printf_i+0x162>
 80056d4:	2301      	movs	r3, #1
 80056d6:	4632      	mov	r2, r6
 80056d8:	4649      	mov	r1, r9
 80056da:	4640      	mov	r0, r8
 80056dc:	47d0      	blx	sl
 80056de:	3001      	adds	r0, #1
 80056e0:	d09d      	beq.n	800561e <_printf_i+0x15e>
 80056e2:	3501      	adds	r5, #1
 80056e4:	68e3      	ldr	r3, [r4, #12]
 80056e6:	9903      	ldr	r1, [sp, #12]
 80056e8:	1a5b      	subs	r3, r3, r1
 80056ea:	42ab      	cmp	r3, r5
 80056ec:	dcf2      	bgt.n	80056d4 <_printf_i+0x214>
 80056ee:	e7eb      	b.n	80056c8 <_printf_i+0x208>
 80056f0:	2500      	movs	r5, #0
 80056f2:	f104 0619 	add.w	r6, r4, #25
 80056f6:	e7f5      	b.n	80056e4 <_printf_i+0x224>
 80056f8:	080059db 	.word	0x080059db
 80056fc:	080059ec 	.word	0x080059ec

08005700 <__malloc_lock>:
 8005700:	4801      	ldr	r0, [pc, #4]	@ (8005708 <__malloc_lock+0x8>)
 8005702:	f7ff bc6f 	b.w	8004fe4 <__retarget_lock_acquire_recursive>
 8005706:	bf00      	nop
 8005708:	20000368 	.word	0x20000368

0800570c <__malloc_unlock>:
 800570c:	4801      	ldr	r0, [pc, #4]	@ (8005714 <__malloc_unlock+0x8>)
 800570e:	f7ff bc6a 	b.w	8004fe6 <__retarget_lock_release_recursive>
 8005712:	bf00      	nop
 8005714:	20000368 	.word	0x20000368

08005718 <_realloc_r>:
 8005718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800571c:	4680      	mov	r8, r0
 800571e:	4615      	mov	r5, r2
 8005720:	460c      	mov	r4, r1
 8005722:	b921      	cbnz	r1, 800572e <_realloc_r+0x16>
 8005724:	4611      	mov	r1, r2
 8005726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800572a:	f7ff bdd7 	b.w	80052dc <_malloc_r>
 800572e:	b92a      	cbnz	r2, 800573c <_realloc_r+0x24>
 8005730:	f000 f866 	bl	8005800 <_free_r>
 8005734:	2400      	movs	r4, #0
 8005736:	4620      	mov	r0, r4
 8005738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800573c:	f000 f8a8 	bl	8005890 <_malloc_usable_size_r>
 8005740:	4285      	cmp	r5, r0
 8005742:	4606      	mov	r6, r0
 8005744:	d802      	bhi.n	800574c <_realloc_r+0x34>
 8005746:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800574a:	d8f4      	bhi.n	8005736 <_realloc_r+0x1e>
 800574c:	4629      	mov	r1, r5
 800574e:	4640      	mov	r0, r8
 8005750:	f7ff fdc4 	bl	80052dc <_malloc_r>
 8005754:	4607      	mov	r7, r0
 8005756:	2800      	cmp	r0, #0
 8005758:	d0ec      	beq.n	8005734 <_realloc_r+0x1c>
 800575a:	42b5      	cmp	r5, r6
 800575c:	462a      	mov	r2, r5
 800575e:	4621      	mov	r1, r4
 8005760:	bf28      	it	cs
 8005762:	4632      	movcs	r2, r6
 8005764:	f000 f83e 	bl	80057e4 <memcpy>
 8005768:	4621      	mov	r1, r4
 800576a:	4640      	mov	r0, r8
 800576c:	f000 f848 	bl	8005800 <_free_r>
 8005770:	463c      	mov	r4, r7
 8005772:	e7e0      	b.n	8005736 <_realloc_r+0x1e>

08005774 <memmove>:
 8005774:	4288      	cmp	r0, r1
 8005776:	b510      	push	{r4, lr}
 8005778:	eb01 0402 	add.w	r4, r1, r2
 800577c:	d902      	bls.n	8005784 <memmove+0x10>
 800577e:	4284      	cmp	r4, r0
 8005780:	4623      	mov	r3, r4
 8005782:	d807      	bhi.n	8005794 <memmove+0x20>
 8005784:	1e43      	subs	r3, r0, #1
 8005786:	42a1      	cmp	r1, r4
 8005788:	d008      	beq.n	800579c <memmove+0x28>
 800578a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800578e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005792:	e7f8      	b.n	8005786 <memmove+0x12>
 8005794:	4601      	mov	r1, r0
 8005796:	4402      	add	r2, r0
 8005798:	428a      	cmp	r2, r1
 800579a:	d100      	bne.n	800579e <memmove+0x2a>
 800579c:	bd10      	pop	{r4, pc}
 800579e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057a6:	e7f7      	b.n	8005798 <memmove+0x24>

080057a8 <_sbrk_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	2300      	movs	r3, #0
 80057ac:	4d05      	ldr	r5, [pc, #20]	@ (80057c4 <_sbrk_r+0x1c>)
 80057ae:	4604      	mov	r4, r0
 80057b0:	4608      	mov	r0, r1
 80057b2:	602b      	str	r3, [r5, #0]
 80057b4:	f7fb fc74 	bl	80010a0 <_sbrk>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d102      	bne.n	80057c2 <_sbrk_r+0x1a>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b103      	cbz	r3, 80057c2 <_sbrk_r+0x1a>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	20000374 	.word	0x20000374

080057c8 <memchr>:
 80057c8:	4603      	mov	r3, r0
 80057ca:	b510      	push	{r4, lr}
 80057cc:	b2c9      	uxtb	r1, r1
 80057ce:	4402      	add	r2, r0
 80057d0:	4293      	cmp	r3, r2
 80057d2:	4618      	mov	r0, r3
 80057d4:	d101      	bne.n	80057da <memchr+0x12>
 80057d6:	2000      	movs	r0, #0
 80057d8:	e003      	b.n	80057e2 <memchr+0x1a>
 80057da:	7804      	ldrb	r4, [r0, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	428c      	cmp	r4, r1
 80057e0:	d1f6      	bne.n	80057d0 <memchr+0x8>
 80057e2:	bd10      	pop	{r4, pc}

080057e4 <memcpy>:
 80057e4:	440a      	add	r2, r1
 80057e6:	4291      	cmp	r1, r2
 80057e8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80057ec:	d100      	bne.n	80057f0 <memcpy+0xc>
 80057ee:	4770      	bx	lr
 80057f0:	b510      	push	{r4, lr}
 80057f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057f6:	4291      	cmp	r1, r2
 80057f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057fc:	d1f9      	bne.n	80057f2 <memcpy+0xe>
 80057fe:	bd10      	pop	{r4, pc}

08005800 <_free_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	4605      	mov	r5, r0
 8005804:	2900      	cmp	r1, #0
 8005806:	d040      	beq.n	800588a <_free_r+0x8a>
 8005808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800580c:	1f0c      	subs	r4, r1, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	bfb8      	it	lt
 8005812:	18e4      	addlt	r4, r4, r3
 8005814:	f7ff ff74 	bl	8005700 <__malloc_lock>
 8005818:	4a1c      	ldr	r2, [pc, #112]	@ (800588c <_free_r+0x8c>)
 800581a:	6813      	ldr	r3, [r2, #0]
 800581c:	b933      	cbnz	r3, 800582c <_free_r+0x2c>
 800581e:	6063      	str	r3, [r4, #4]
 8005820:	6014      	str	r4, [r2, #0]
 8005822:	4628      	mov	r0, r5
 8005824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005828:	f7ff bf70 	b.w	800570c <__malloc_unlock>
 800582c:	42a3      	cmp	r3, r4
 800582e:	d908      	bls.n	8005842 <_free_r+0x42>
 8005830:	6820      	ldr	r0, [r4, #0]
 8005832:	1821      	adds	r1, r4, r0
 8005834:	428b      	cmp	r3, r1
 8005836:	bf01      	itttt	eq
 8005838:	6819      	ldreq	r1, [r3, #0]
 800583a:	685b      	ldreq	r3, [r3, #4]
 800583c:	1809      	addeq	r1, r1, r0
 800583e:	6021      	streq	r1, [r4, #0]
 8005840:	e7ed      	b.n	800581e <_free_r+0x1e>
 8005842:	461a      	mov	r2, r3
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	b10b      	cbz	r3, 800584c <_free_r+0x4c>
 8005848:	42a3      	cmp	r3, r4
 800584a:	d9fa      	bls.n	8005842 <_free_r+0x42>
 800584c:	6811      	ldr	r1, [r2, #0]
 800584e:	1850      	adds	r0, r2, r1
 8005850:	42a0      	cmp	r0, r4
 8005852:	d10b      	bne.n	800586c <_free_r+0x6c>
 8005854:	6820      	ldr	r0, [r4, #0]
 8005856:	4401      	add	r1, r0
 8005858:	1850      	adds	r0, r2, r1
 800585a:	4283      	cmp	r3, r0
 800585c:	6011      	str	r1, [r2, #0]
 800585e:	d1e0      	bne.n	8005822 <_free_r+0x22>
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	4408      	add	r0, r1
 8005866:	6010      	str	r0, [r2, #0]
 8005868:	6053      	str	r3, [r2, #4]
 800586a:	e7da      	b.n	8005822 <_free_r+0x22>
 800586c:	d902      	bls.n	8005874 <_free_r+0x74>
 800586e:	230c      	movs	r3, #12
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	e7d6      	b.n	8005822 <_free_r+0x22>
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	1821      	adds	r1, r4, r0
 8005878:	428b      	cmp	r3, r1
 800587a:	bf01      	itttt	eq
 800587c:	6819      	ldreq	r1, [r3, #0]
 800587e:	685b      	ldreq	r3, [r3, #4]
 8005880:	1809      	addeq	r1, r1, r0
 8005882:	6021      	streq	r1, [r4, #0]
 8005884:	6063      	str	r3, [r4, #4]
 8005886:	6054      	str	r4, [r2, #4]
 8005888:	e7cb      	b.n	8005822 <_free_r+0x22>
 800588a:	bd38      	pop	{r3, r4, r5, pc}
 800588c:	20000370 	.word	0x20000370

08005890 <_malloc_usable_size_r>:
 8005890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005894:	1f18      	subs	r0, r3, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	bfbc      	itt	lt
 800589a:	580b      	ldrlt	r3, [r1, r0]
 800589c:	18c0      	addlt	r0, r0, r3
 800589e:	4770      	bx	lr

080058a0 <_init>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	bf00      	nop
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr

080058ac <_fini>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	bf00      	nop
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr
