
BQ29330_BLUEPILL_ORIGINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0800bae4  0800bae4  0000cae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd00  0800bd00  0000d1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd00  0800bd00  0000cd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd08  0800bd08  0000d1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd08  0800bd08  0000cd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd0c  0800bd0c  0000cd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800bd10  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014dc  200001cc  0800bedc  0000d1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016a8  0800bedc  0000d6a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b37a  00000000  00000000  0000d1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048dc  00000000  00000000  0002856f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  0002ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000128a  00000000  00000000  0002e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d4f8  00000000  00000000  0002f8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000211f2  00000000  00000000  0004cde2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009756d  00000000  00000000  0006dfd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105541  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006920  00000000  00000000  00105584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0010bea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001cc 	.word	0x200001cc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bacc 	.word	0x0800bacc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d0 	.word	0x200001d0
 800014c:	0800bacc 	.word	0x0800bacc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	@ 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b27      	ldr	r3, [pc, #156]	@ (800081c <MX_ADC1_Init+0xb0>)
 800077e:	4a28      	ldr	r2, [pc, #160]	@ (8000820 <MX_ADC1_Init+0xb4>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000782:	4b26      	ldr	r3, [pc, #152]	@ (800081c <MX_ADC1_Init+0xb0>)
 8000784:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b24      	ldr	r3, [pc, #144]	@ (800081c <MX_ADC1_Init+0xb0>)
 800078c:	2201      	movs	r2, #1
 800078e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000790:	4b22      	ldr	r3, [pc, #136]	@ (800081c <MX_ADC1_Init+0xb0>)
 8000792:	2200      	movs	r2, #0
 8000794:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000796:	4b21      	ldr	r3, [pc, #132]	@ (800081c <MX_ADC1_Init+0xb0>)
 8000798:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800079c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079e:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <MX_ADC1_Init+0xb0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <MX_ADC1_Init+0xb0>)
 80007a6:	2203      	movs	r2, #3
 80007a8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007aa:	481c      	ldr	r0, [pc, #112]	@ (800081c <MX_ADC1_Init+0xb0>)
 80007ac:	f000 ff44 	bl	8001638 <HAL_ADC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80007b6:	f000 fc61 	bl	800107c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007be:	2301      	movs	r3, #1
 80007c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80007c2:	2307      	movs	r3, #7
 80007c4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	4814      	ldr	r0, [pc, #80]	@ (800081c <MX_ADC1_Init+0xb0>)
 80007cc:	f001 f9c4 	bl	8001b58 <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 fc51 	bl	800107c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007da:	2301      	movs	r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007de:	2302      	movs	r3, #2
 80007e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	480d      	ldr	r0, [pc, #52]	@ (800081c <MX_ADC1_Init+0xb0>)
 80007e8:	f001 f9b6 	bl	8001b58 <HAL_ADC_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80007f2:	f000 fc43 	bl	800107c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80007fa:	2303      	movs	r3, #3
 80007fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4806      	ldr	r0, [pc, #24]	@ (800081c <MX_ADC1_Init+0xb0>)
 8000804:	f001 f9a8 	bl	8001b58 <HAL_ADC_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800080e:	f000 fc35 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200001e8 	.word	0x200001e8
 8000820:	40012400 	.word	0x40012400

08000824 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a2c      	ldr	r2, [pc, #176]	@ (80008f0 <HAL_ADC_MspInit+0xcc>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d151      	bne.n	80008e8 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000844:	4b2b      	ldr	r3, [pc, #172]	@ (80008f4 <HAL_ADC_MspInit+0xd0>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a2a      	ldr	r2, [pc, #168]	@ (80008f4 <HAL_ADC_MspInit+0xd0>)
 800084a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b28      	ldr	r3, [pc, #160]	@ (80008f4 <HAL_ADC_MspInit+0xd0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b25      	ldr	r3, [pc, #148]	@ (80008f4 <HAL_ADC_MspInit+0xd0>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a24      	ldr	r2, [pc, #144]	@ (80008f4 <HAL_ADC_MspInit+0xd0>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <HAL_ADC_MspInit+0xd0>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Curr_bats_Pin|Vbat1_Pin|Vbat2_Pin;
 8000874:	2307      	movs	r3, #7
 8000876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000878:	2303      	movs	r3, #3
 800087a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	481d      	ldr	r0, [pc, #116]	@ (80008f8 <HAL_ADC_MspInit+0xd4>)
 8000884:	f001 fe66 	bl	8002554 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000888:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <HAL_ADC_MspInit+0xd8>)
 800088a:	4a1d      	ldr	r2, [pc, #116]	@ (8000900 <HAL_ADC_MspInit+0xdc>)
 800088c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800088e:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <HAL_ADC_MspInit+0xd8>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000894:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <HAL_ADC_MspInit+0xd8>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <HAL_ADC_MspInit+0xd8>)
 800089c:	2280      	movs	r2, #128	@ 0x80
 800089e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <HAL_ADC_MspInit+0xd8>)
 80008a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <HAL_ADC_MspInit+0xd8>)
 80008aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <HAL_ADC_MspInit+0xd8>)
 80008b2:	2220      	movs	r2, #32
 80008b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <HAL_ADC_MspInit+0xd8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008bc:	480f      	ldr	r0, [pc, #60]	@ (80008fc <HAL_ADC_MspInit+0xd8>)
 80008be:	f001 fc5b 	bl	8002178 <HAL_DMA_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80008c8:	f000 fbd8 	bl	800107c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a0b      	ldr	r2, [pc, #44]	@ (80008fc <HAL_ADC_MspInit+0xd8>)
 80008d0:	621a      	str	r2, [r3, #32]
 80008d2:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <HAL_ADC_MspInit+0xd8>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2012      	movs	r0, #18
 80008de:	f001 fc14 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80008e2:	2012      	movs	r0, #18
 80008e4:	f001 fc2d 	bl	8002142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40012400 	.word	0x40012400
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010800 	.word	0x40010800
 80008fc:	20000218 	.word	0x20000218
 8000900:	40020008 	.word	0x40020008
 8000904:	00000000 	.word	0x00000000

08000908 <currentScale>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint16_t currentScale(uint16_t rawValue){
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	80fb      	strh	r3, [r7, #6]
	  return  (uint16_t) rawValue  * CONVERSION_FACTOR;
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fe9f 	bl	8000658 <__aeabi_i2d>
 800091a:	a309      	add	r3, pc, #36	@ (adr r3, 8000940 <currentScale+0x38>)
 800091c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000920:	f7ff fc1e 	bl	8000160 <__aeabi_dmul>
 8000924:	4602      	mov	r2, r0
 8000926:	460b      	mov	r3, r1
 8000928:	4610      	mov	r0, r2
 800092a:	4619      	mov	r1, r3
 800092c:	f7ff fefe 	bl	800072c <__aeabi_d2uiz>
 8000930:	4603      	mov	r3, r0
 8000932:	b29b      	uxth	r3, r3
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	f3af 8000 	nop.w
 8000940:	99c99c9a 	.word	0x99c99c9a
 8000944:	3fe9c99c 	.word	0x3fe9c99c

08000948 <BQ29330_ReadFunctionControl>:



// Lee el valor actual del registro FUNCTION_CONTROL (0x03) del BQ29330
HAL_StatusTypeDef BQ29330_ReadFunctionControl(BQ29330_Registers reg, uint8_t *valor_leido)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af02      	add	r7, sp, #8
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[1];
    buffer[0] = reg; 		// Dirección del registro
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	733b      	strb	r3, [r7, #12]
    // Paso 1: Enviar la dirección del registro que queremos leer (0x03)
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 1, HAL_MAX_DELAY);
 8000958:	f107 020c 	add.w	r2, r7, #12
 800095c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	2301      	movs	r3, #1
 8000964:	2140      	movs	r1, #64	@ 0x40
 8000966:	480c      	ldr	r0, [pc, #48]	@ (8000998 <BQ29330_ReadFunctionControl+0x50>)
 8000968:	f002 f8ee 	bl	8002b48 <HAL_I2C_Master_Transmit>
 800096c:	4603      	mov	r3, r0
 800096e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;  // Si falla al enviar la dirección del registro, retornamos el error
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <BQ29330_ReadFunctionControl+0x32>
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	e009      	b.n	800098e <BQ29330_ReadFunctionControl+0x46>
    // Paso 2: Leer un byte desde el dispositivo (valor del registro FUNCTION_CONTROL)
    return HAL_I2C_Master_Receive(&hi2c1, BMS_I2C_ADDRESS, valor_leido, 1, HAL_MAX_DELAY);  // Devolver el estado de la operación y el valor leído en *valor_leido
 800097a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2301      	movs	r3, #1
 8000982:	683a      	ldr	r2, [r7, #0]
 8000984:	2140      	movs	r1, #64	@ 0x40
 8000986:	4804      	ldr	r0, [pc, #16]	@ (8000998 <BQ29330_ReadFunctionControl+0x50>)
 8000988:	f002 f9dc 	bl	8002d44 <HAL_I2C_Master_Receive>
 800098c:	4603      	mov	r3, r0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000025c 	.word	0x2000025c

0800099c <BQ29330_WriteRegister>:



// Función para escribir en un registro del BQ29330
HAL_StatusTypeDef BQ29330_WriteRegister(BQ29330_Registers reg, uint8_t data)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	4603      	mov	r3, r0
 80009a4:	460a      	mov	r2, r1
 80009a6:	71fb      	strb	r3, [r7, #7]
 80009a8:	4613      	mov	r3, r2
 80009aa:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = reg; 		// Dirección del registro
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;        // Dato a escribir
 80009b0:	79bb      	ldrb	r3, [r7, #6]
 80009b2:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 80009b4:	f107 020c 	add.w	r2, r7, #12
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2302      	movs	r3, #2
 80009c0:	2140      	movs	r1, #64	@ 0x40
 80009c2:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <BQ29330_WriteRegister+0x38>)
 80009c4:	f002 f8c0 	bl	8002b48 <HAL_I2C_Master_Transmit>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000025c 	.word	0x2000025c

080009d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_DMA_Init+0x38>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a10 <MX_DMA_Init+0x38>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6153      	str	r3, [r2, #20]
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_DMA_Init+0x38>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	200b      	movs	r0, #11
 80009fc:	f001 fb85 	bl	800210a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a00:	200b      	movs	r0, #11
 8000a02:	f001 fb9e 	bl	8002142 <HAL_NVIC_EnableIRQ>

}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a28:	4b29      	ldr	r3, [pc, #164]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a28      	ldr	r2, [pc, #160]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b26      	ldr	r3, [pc, #152]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0310 	and.w	r3, r3, #16
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a40:	4b23      	ldr	r3, [pc, #140]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a22      	ldr	r2, [pc, #136]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000a46:	f043 0320 	orr.w	r3, r3, #32
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0320 	and.w	r3, r3, #32
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0304 	and.w	r3, r3, #4
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a70:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a16      	ldr	r2, [pc, #88]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000a76:	f043 0308 	orr.w	r3, r3, #8
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <MX_GPIO_Init+0xbc>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activador_GPIO_Port, activador_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a8e:	4811      	ldr	r0, [pc, #68]	@ (8000ad4 <MX_GPIO_Init+0xc0>)
 8000a90:	f001 fee4 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activador_Pin;
 8000a94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(activador_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4809      	ldr	r0, [pc, #36]	@ (8000ad4 <MX_GPIO_Init+0xc0>)
 8000aae:	f001 fd51 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_GPIO_Init+0xc4>)
 8000ac4:	f001 fd46 	bl	8002554 <HAL_GPIO_Init>

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40011000 	.word	0x40011000
 8000ad8:	40010c00 	.word	0x40010c00

08000adc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000ae2:	4a13      	ldr	r2, [pc, #76]	@ (8000b30 <MX_I2C1_Init+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000ae8:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <MX_I2C1_Init+0x58>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000afa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000afe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <MX_I2C1_Init+0x50>)
 8000b1a:	f001 fed1 	bl	80028c0 <HAL_I2C_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f000 faaa 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2000025c 	.word	0x2000025c
 8000b30:	40005400 	.word	0x40005400
 8000b34:	000186a0 	.word	0x000186a0

08000b38 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <MX_I2C2_Init+0x50>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	@ (8000b8c <MX_I2C2_Init+0x54>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_I2C2_Init+0x50>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <MX_I2C2_Init+0x58>)
 8000b46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <MX_I2C2_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_I2C2_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <MX_I2C2_Init+0x50>)
 8000b56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <MX_I2C2_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_I2C2_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <MX_I2C2_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_I2C2_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <MX_I2C2_Init+0x50>)
 8000b76:	f001 fea3 	bl	80028c0 <HAL_I2C_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f000 fa7c 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200002b0 	.word	0x200002b0
 8000b8c:	40005800 	.word	0x40005800
 8000b90:	000186a0 	.word	0x000186a0

08000b94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a2b      	ldr	r2, [pc, #172]	@ (8000c5c <HAL_I2C_MspInit+0xc8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d124      	bne.n	8000bfe <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a29      	ldr	r2, [pc, #164]	@ (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000bba:	f043 0308 	orr.w	r3, r3, #8
 8000bbe:	6193      	str	r3, [r2, #24]
 8000bc0:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bcc:	23c0      	movs	r3, #192	@ 0xc0
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd0:	2312      	movs	r3, #18
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4821      	ldr	r0, [pc, #132]	@ (8000c64 <HAL_I2C_MspInit+0xd0>)
 8000be0:	f001 fcb8 	bl	8002554 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000be6:	69db      	ldr	r3, [r3, #28]
 8000be8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000bea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bee:	61d3      	str	r3, [r2, #28]
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000bfc:	e029      	b.n	8000c52 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <HAL_I2C_MspInit+0xd4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d124      	bne.n	8000c52 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a14      	ldr	r2, [pc, #80]	@ (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c20:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c26:	2312      	movs	r3, #18
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0318 	add.w	r3, r7, #24
 8000c32:	4619      	mov	r1, r3
 8000c34:	480b      	ldr	r0, [pc, #44]	@ (8000c64 <HAL_I2C_MspInit+0xd0>)
 8000c36:	f001 fc8d 	bl	8002554 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a08      	ldr	r2, [pc, #32]	@ (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000c40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c44:	61d3      	str	r3, [r2, #28]
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_I2C_MspInit+0xcc>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	@ 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010c00 	.word	0x40010c00
 8000c68:	40005800 	.word	0x40005800

08000c6c <sendI2CMsg>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void sendI2CMsg(const char* label, uint16_t value) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b094      	sub	sp, #80	@ 0x50
 8000c70:	af02      	add	r7, sp, #8
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
    char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "%s %u \n", label, value);
 8000c78:	887b      	ldrh	r3, [r7, #2]
 8000c7a:	f107 0008 	add.w	r0, r7, #8
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <sendI2CMsg+0x4c>)
 8000c84:	2140      	movs	r1, #64	@ 0x40
 8000c86:	f00a fa5d 	bl	800b144 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_I2C_ADDRESS << 1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fa5e 	bl	8000150 <strlen>
 8000c94:	4603      	mov	r3, r0
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	f107 0208 	add.w	r2, r7, #8
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ca0:	9100      	str	r1, [sp, #0]
 8000ca2:	2110      	movs	r1, #16
 8000ca4:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <sendI2CMsg+0x50>)
 8000ca6:	f001 ff4f 	bl	8002b48 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8000caa:	200a      	movs	r0, #10
 8000cac:	f000 fca0 	bl	80015f0 <HAL_Delay>
}
 8000cb0:	bf00      	nop
 8000cb2:	3748      	adds	r7, #72	@ 0x48
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	0800bae4 	.word	0x0800bae4
 8000cbc:	2000025c 	.word	0x2000025c

08000cc0 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t convCompleted=0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	convCompleted=1;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <HAL_ADC_ConvCpltCallback+0x18>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	20000304 	.word	0x20000304

08000cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b0ba      	sub	sp, #232	@ 0xe8
 8000ce0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce2:	f000 fc23 	bl	800152c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce6:	f000 f96b 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cea:	f7ff fe93 	bl	8000a14 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cee:	f7ff fe73 	bl	80009d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000cf2:	f000 fb57 	bl	80013a4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000cf6:	f7ff fd39 	bl	800076c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000cfa:	f000 fa7d 	bl	80011f8 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000cfe:	f009 fdab 	bl	800a858 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000d02:	f7ff feeb 	bl	8000adc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000d06:	f7ff ff17 	bl	8000b38 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //start PWMs
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4897      	ldr	r0, [pc, #604]	@ (8000f6c <main+0x290>)
 8000d0e:	f005 f881 	bl	8005e14 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period/2);
 8000d12:	4b96      	ldr	r3, [pc, #600]	@ (8000f6c <main+0x290>)
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	4b95      	ldr	r3, [pc, #596]	@ (8000f6c <main+0x290>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	0852      	lsrs	r2, r2, #1
 8000d1c:	635a      	str	r2, [r3, #52]	@ 0x34


  //ADC Variables
   uint16_t rawValues[3];
   HAL_ADC_Start_DMA(&hadc1,(uint32_t *) rawValues, 3);
 8000d1e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000d22:	2203      	movs	r2, #3
 8000d24:	4619      	mov	r1, r3
 8000d26:	4892      	ldr	r0, [pc, #584]	@ (8000f70 <main+0x294>)
 8000d28:	f000 fd5e 	bl	80017e8 <HAL_ADC_Start_DMA>

   //BMS
   BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL,0x06);
 8000d2c:	2106      	movs	r1, #6
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff fe34 	bl	800099c <BQ29330_WriteRegister>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//read all adcs
	while(!convCompleted);
 8000d34:	bf00      	nop
 8000d36:	4b8f      	ldr	r3, [pc, #572]	@ (8000f74 <main+0x298>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0fb      	beq.n	8000d36 <main+0x5a>
	//factor de multiplicacion de la corriente en entradas mppt (50 x 33mohm)^-1
	//las tensiones se multiplican x2
	uint16_t current = currentScale(rawValues[0]);
 8000d3e:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fde0 	bl	8000908 <currentScale>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
	uint16_t voltage_bat1 = rawValues[1];//voltageScale(rawValues[1]);
 8000d4e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8000d52:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
	uint16_t voltage_bat2 = rawValues[2];//voltageScale(rawValues[2]);
 8000d56:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 8000d5a:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda

	// Imprimo cosas
	char buffer[STR_LEN];
	snprintf(buffer, STR_LEN, "\n \n I LIKE THE WAY YOU WORKING \n");
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	4a85      	ldr	r2, [pc, #532]	@ (8000f78 <main+0x29c>)
 8000d62:	21c8      	movs	r1, #200	@ 0xc8
 8000d64:	4618      	mov	r0, r3
 8000d66:	f00a f9ed 	bl	800b144 <sniprintf>
	HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff f9ef 	bl	8000150 <strlen>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	1d3a      	adds	r2, r7, #4
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d7c:	9100      	str	r1, [sp, #0]
 8000d7e:	2110      	movs	r1, #16
 8000d80:	487e      	ldr	r0, [pc, #504]	@ (8000f7c <main+0x2a0>)
 8000d82:	f001 fee1 	bl	8002b48 <HAL_I2C_Master_Transmit>
/*
    sprintf(buffer,"Corriente: %u \n", current);
	HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
*/
	//FORMA NUEVA DE IMPRIMIR LLAMANDO A UNA FUNCION SI NO ANDA USAR LA FORMA VIEJA
	sendI2CMsg("Corriente: ", current);
 8000d86:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	487c      	ldr	r0, [pc, #496]	@ (8000f80 <main+0x2a4>)
 8000d8e:	f7ff ff6d 	bl	8000c6c <sendI2CMsg>
	sendUsartMsg("Tension bat 1: ", voltage_bat1);
 8000d92:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 8000d96:	4619      	mov	r1, r3
 8000d98:	487a      	ldr	r0, [pc, #488]	@ (8000f84 <main+0x2a8>)
 8000d9a:	f000 fb79 	bl	8001490 <sendUsartMsg>
	sendUsartMsg("Tension bat 2: ", voltage_bat2);
 8000d9e:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 8000da2:	4619      	mov	r1, r3
 8000da4:	4878      	ldr	r0, [pc, #480]	@ (8000f88 <main+0x2ac>)
 8000da6:	f000 fb73 	bl	8001490 <sendUsartMsg>
	//BMS 29330

 //escribo


    BQ29330_WriteRegister(BQ29330_STATE_CONTROL, 0x0C);   // WDDIS = 1, all else = 0
 8000daa:	210c      	movs	r1, #12
 8000dac:	2002      	movs	r0, #2
 8000dae:	f7ff fdf5 	bl	800099c <BQ29330_WriteRegister>

    BQ29330_WriteRegister(BQ29330_FUNCTION_CONTROL, 0x01); // VMEN||BAT
 8000db2:	2101      	movs	r1, #1
 8000db4:	2003      	movs	r0, #3
 8000db6:	f7ff fdf1 	bl	800099c <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_CELL, 0x01); 			   //
 8000dba:	2101      	movs	r1, #1
 8000dbc:	2004      	movs	r0, #4
 8000dbe:	f7ff fded 	bl	800099c <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLV, 0x00);              // 50 mV 0x00
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2005      	movs	r0, #5
 8000dc6:	f7ff fde9 	bl	800099c <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLD, 0x0F);              // 31 ms
 8000dca:	210f      	movs	r1, #15
 8000dcc:	2006      	movs	r0, #6
 8000dce:	f7ff fde5 	bl	800099c <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCC, 0x00);              // 475 mV y 915 μs
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2007      	movs	r0, #7
 8000dd6:	f7ff fde1 	bl	800099c <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCD, 0x00);              // idem for discharge
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2008      	movs	r0, #8
 8000dde:	f7ff fddd 	bl	800099c <BQ29330_WriteRegister>



//leo
    // para separar entre medicion y medicion
	uint8_t valor_leido = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
	HAL_StatusTypeDef statusI2c;
	sendUsartMsg("\n ", valor_leido);
 8000de8:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000dec:	4619      	mov	r1, r3
 8000dee:	4867      	ldr	r0, [pc, #412]	@ (8000f8c <main+0x2b0>)
 8000df0:	f000 fb4e 	bl	8001490 <sendUsartMsg>

	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_STATUS, &valor_leido);
 8000df4:	f107 03cf 	add.w	r3, r7, #207	@ 0xcf
 8000df8:	4619      	mov	r1, r3
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fda4 	bl	8000948 <BQ29330_ReadFunctionControl>
 8000e00:	4603      	mov	r3, r0
 8000e02:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
	sendUsartMsg("statusI2c : ", statusI2c);
 8000e06:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4860      	ldr	r0, [pc, #384]	@ (8000f90 <main+0x2b4>)
 8000e10:	f000 fb3e 	bl	8001490 <sendUsartMsg>
	sendUsartMsg("Estatus del bms : ", valor_leido);
 8000e14:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000e18:	4619      	mov	r1, r3
 8000e1a:	485e      	ldr	r0, [pc, #376]	@ (8000f94 <main+0x2b8>)
 8000e1c:	f000 fb38 	bl	8001490 <sendUsartMsg>

	//si es una falla de whatchog apagar

	if(valor_leido & (1U << 4) || (valor_leido && valor_leido != 16)){
 8000e20:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d107      	bne.n	8000e3c <main+0x160>
 8000e2c:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d01a      	beq.n	8000e6a <main+0x18e>
 8000e34:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000e38:	2b10      	cmp	r3, #16
 8000e3a:	d016      	beq.n	8000e6a <main+0x18e>
	    BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL,0x07);
 8000e3c:	2107      	movs	r1, #7
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff fdac 	bl	800099c <BQ29330_WriteRegister>
	    BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL,0x06);
 8000e44:	2106      	movs	r1, #6
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fda8 	bl	800099c <BQ29330_WriteRegister>
		statusI2c =  BQ29330_ReadFunctionControl(BQ29330_STATUS, &valor_leido);
 8000e4c:	f107 03cf 	add.w	r3, r7, #207	@ 0xcf
 8000e50:	4619      	mov	r1, r3
 8000e52:	2000      	movs	r0, #0
 8000e54:	f7ff fd78 	bl	8000948 <BQ29330_ReadFunctionControl>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
	    sendUsartMsg("Estatus del bms despues del latch: ", valor_leido);
 8000e5e:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000e62:	4619      	mov	r1, r3
 8000e64:	484c      	ldr	r0, [pc, #304]	@ (8000f98 <main+0x2bc>)
 8000e66:	f000 fb13 	bl	8001490 <sendUsartMsg>
    }


	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_OUTPUT_CONTROL, &valor_leido);
 8000e6a:	f107 03cf 	add.w	r3, r7, #207	@ 0xcf
 8000e6e:	4619      	mov	r1, r3
 8000e70:	2001      	movs	r0, #1
 8000e72:	f7ff fd69 	bl	8000948 <BQ29330_ReadFunctionControl>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
	sendUsartMsg("OUTPUT_CONTROL : ", valor_leido);
 8000e7c:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000e80:	4619      	mov	r1, r3
 8000e82:	4846      	ldr	r0, [pc, #280]	@ (8000f9c <main+0x2c0>)
 8000e84:	f000 fb04 	bl	8001490 <sendUsartMsg>

	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_STATE_CONTROL, &valor_leido);
 8000e88:	f107 03cf 	add.w	r3, r7, #207	@ 0xcf
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f7ff fd5a 	bl	8000948 <BQ29330_ReadFunctionControl>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
	sendUsartMsg("STATE_CONTROL : ", valor_leido);
 8000e9a:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	483f      	ldr	r0, [pc, #252]	@ (8000fa0 <main+0x2c4>)
 8000ea2:	f000 faf5 	bl	8001490 <sendUsartMsg>

	//mido el registro que escribi
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_FUNCTION_CONTROL, &valor_leido);
 8000ea6:	f107 03cf 	add.w	r3, r7, #207	@ 0xcf
 8000eaa:	4619      	mov	r1, r3
 8000eac:	2003      	movs	r0, #3
 8000eae:	f7ff fd4b 	bl	8000948 <BQ29330_ReadFunctionControl>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
	sendUsartMsg("FUNCTION_CONTROL : ", valor_leido);
 8000eb8:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4839      	ldr	r0, [pc, #228]	@ (8000fa4 <main+0x2c8>)
 8000ec0:	f000 fae6 	bl	8001490 <sendUsartMsg>


	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_CELL, &valor_leido);
 8000ec4:	f107 03cf 	add.w	r3, r7, #207	@ 0xcf
 8000ec8:	4619      	mov	r1, r3
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f7ff fd3c 	bl	8000948 <BQ29330_ReadFunctionControl>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
	sendUsartMsg("CELL : ", valor_leido);
 8000ed6:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000eda:	4619      	mov	r1, r3
 8000edc:	4832      	ldr	r0, [pc, #200]	@ (8000fa8 <main+0x2cc>)
 8000ede:	f000 fad7 	bl	8001490 <sendUsartMsg>

	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_OLV, &valor_leido);
 8000ee2:	f107 03cf 	add.w	r3, r7, #207	@ 0xcf
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	2005      	movs	r0, #5
 8000eea:	f7ff fd2d 	bl	8000948 <BQ29330_ReadFunctionControl>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
	sendUsartMsg("OLV (Overload voltage threshold): ", valor_leido);
 8000ef4:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000ef8:	4619      	mov	r1, r3
 8000efa:	482c      	ldr	r0, [pc, #176]	@ (8000fac <main+0x2d0>)
 8000efc:	f000 fac8 	bl	8001490 <sendUsartMsg>


	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_OLD, &valor_leido);
 8000f00:	f107 03cf 	add.w	r3, r7, #207	@ 0xcf
 8000f04:	4619      	mov	r1, r3
 8000f06:	2006      	movs	r0, #6
 8000f08:	f7ff fd1e 	bl	8000948 <BQ29330_ReadFunctionControl>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
	sendUsartMsg("OLD (Overload delay time): ", valor_leido);
 8000f12:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000f16:	4619      	mov	r1, r3
 8000f18:	4825      	ldr	r0, [pc, #148]	@ (8000fb0 <main+0x2d4>)
 8000f1a:	f000 fab9 	bl	8001490 <sendUsartMsg>

	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_SCC, &valor_leido);
 8000f1e:	f107 03cf 	add.w	r3, r7, #207	@ 0xcf
 8000f22:	4619      	mov	r1, r3
 8000f24:	2007      	movs	r0, #7
 8000f26:	f7ff fd0f 	bl	8000948 <BQ29330_ReadFunctionControl>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
	sendUsartMsg("SCC (Short circuit in charge): ", valor_leido);
 8000f30:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000f34:	4619      	mov	r1, r3
 8000f36:	481f      	ldr	r0, [pc, #124]	@ (8000fb4 <main+0x2d8>)
 8000f38:	f000 faaa 	bl	8001490 <sendUsartMsg>

	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_SCD, &valor_leido);
 8000f3c:	f107 03cf 	add.w	r3, r7, #207	@ 0xcf
 8000f40:	4619      	mov	r1, r3
 8000f42:	2008      	movs	r0, #8
 8000f44:	f7ff fd00 	bl	8000948 <BQ29330_ReadFunctionControl>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
	sendUsartMsg("SCD (Short circuit in discharge): ", valor_leido);
 8000f4e:	f897 30cf 	ldrb.w	r3, [r7, #207]	@ 0xcf
 8000f52:	4619      	mov	r1, r3
 8000f54:	4818      	ldr	r0, [pc, #96]	@ (8000fb8 <main+0x2dc>)
 8000f56:	f000 fa9b 	bl	8001490 <sendUsartMsg>
*/




	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f5e:	4817      	ldr	r0, [pc, #92]	@ (8000fbc <main+0x2e0>)
 8000f60:	f001 fc94 	bl	800288c <HAL_GPIO_TogglePin>
	HAL_Delay(DELAY);
 8000f64:	20c8      	movs	r0, #200	@ 0xc8
 8000f66:	f000 fb43 	bl	80015f0 <HAL_Delay>
  {
 8000f6a:	e6e3      	b.n	8000d34 <main+0x58>
 8000f6c:	2000030c 	.word	0x2000030c
 8000f70:	200001e8 	.word	0x200001e8
 8000f74:	20000304 	.word	0x20000304
 8000f78:	0800baec 	.word	0x0800baec
 8000f7c:	2000025c 	.word	0x2000025c
 8000f80:	0800bb10 	.word	0x0800bb10
 8000f84:	0800bb1c 	.word	0x0800bb1c
 8000f88:	0800bb2c 	.word	0x0800bb2c
 8000f8c:	0800bb3c 	.word	0x0800bb3c
 8000f90:	0800bb40 	.word	0x0800bb40
 8000f94:	0800bb50 	.word	0x0800bb50
 8000f98:	0800bb64 	.word	0x0800bb64
 8000f9c:	0800bb88 	.word	0x0800bb88
 8000fa0:	0800bb9c 	.word	0x0800bb9c
 8000fa4:	0800bbb0 	.word	0x0800bbb0
 8000fa8:	0800bbc4 	.word	0x0800bbc4
 8000fac:	0800bbcc 	.word	0x0800bbcc
 8000fb0:	0800bbf0 	.word	0x0800bbf0
 8000fb4:	0800bc0c 	.word	0x0800bc0c
 8000fb8:	0800bc2c 	.word	0x0800bc2c
 8000fbc:	40011000 	.word	0x40011000

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	@ 0x50
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fca:	2228      	movs	r2, #40	@ 0x28
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f00a f8ec 	bl	800b1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffe:	2301      	movs	r3, #1
 8001000:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2302      	movs	r3, #2
 8001004:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001006:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800100a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800100c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001010:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001016:	4618      	mov	r0, r3
 8001018:	f004 f9e6 	bl	80053e8 <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001022:	f000 f82b 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2302      	movs	r3, #2
 800102c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001036:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2101      	movs	r1, #1
 8001042:	4618      	mov	r0, r3
 8001044:	f004 fc52 	bl	80058ec <HAL_RCC_ClockConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800104e:	f000 f815 	bl	800107c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001052:	2312      	movs	r3, #18
 8001054:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001056:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800105a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800105c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001060:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4618      	mov	r0, r3
 8001066:	f004 fdcf 	bl	8005c08 <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001070:	f000 f804 	bl	800107c <Error_Handler>
  }
}
 8001074:	bf00      	nop
 8001076:	3750      	adds	r7, #80	@ 0x50
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <Error_Handler+0x8>

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800108e:	4b15      	ldr	r3, [pc, #84]	@ (80010e4 <HAL_MspInit+0x5c>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	4a14      	ldr	r2, [pc, #80]	@ (80010e4 <HAL_MspInit+0x5c>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6193      	str	r3, [r2, #24]
 800109a:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <HAL_MspInit+0x5c>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <HAL_MspInit+0x5c>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <HAL_MspInit+0x5c>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <HAL_MspInit+0x5c>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_MspInit+0x60>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	4a04      	ldr	r2, [pc, #16]	@ (80010e8 <HAL_MspInit+0x60>)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <NMI_Handler+0x4>

080010f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <MemManage_Handler+0x4>

08001104 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <UsageFault_Handler+0x4>

08001114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113c:	f000 fa3c 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <DMA1_Channel1_IRQHandler+0x10>)
 800114a:	f001 f8cf 	bl	80022ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000218 	.word	0x20000218

08001158 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <ADC1_2_IRQHandler+0x10>)
 800115e:	f000 fc21 	bl	80019a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200001e8 	.word	0x200001e8

0800116c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001172:	f002 fcf4 	bl	8003b5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20001068 	.word	0x20001068

08001180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001188:	4a14      	ldr	r2, [pc, #80]	@ (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001194:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b0:	f00a f804 	bl	800b1bc <__errno>
 80011b4:	4603      	mov	r3, r0
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20005000 	.word	0x20005000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	20000308 	.word	0x20000308
 80011e8:	200016a8 	.word	0x200016a8

080011ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b092      	sub	sp, #72	@ 0x48
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2220      	movs	r2, #32
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f009 ffc2 	bl	800b1ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001228:	4b33      	ldr	r3, [pc, #204]	@ (80012f8 <MX_TIM1_Init+0x100>)
 800122a:	4a34      	ldr	r2, [pc, #208]	@ (80012fc <MX_TIM1_Init+0x104>)
 800122c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800122e:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <MX_TIM1_Init+0x100>)
 8001230:	2201      	movs	r2, #1
 8001232:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b30      	ldr	r3, [pc, #192]	@ (80012f8 <MX_TIM1_Init+0x100>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 750;
 800123a:	4b2f      	ldr	r3, [pc, #188]	@ (80012f8 <MX_TIM1_Init+0x100>)
 800123c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001240:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001242:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <MX_TIM1_Init+0x100>)
 8001244:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001248:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800124a:	4b2b      	ldr	r3, [pc, #172]	@ (80012f8 <MX_TIM1_Init+0x100>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b29      	ldr	r3, [pc, #164]	@ (80012f8 <MX_TIM1_Init+0x100>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001256:	4828      	ldr	r0, [pc, #160]	@ (80012f8 <MX_TIM1_Init+0x100>)
 8001258:	f004 fd8c 	bl	8005d74 <HAL_TIM_PWM_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001262:	f7ff ff0b 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001272:	4619      	mov	r1, r3
 8001274:	4820      	ldr	r0, [pc, #128]	@ (80012f8 <MX_TIM1_Init+0x100>)
 8001276:	f005 f94b 	bl	8006510 <HAL_TIMEx_MasterConfigSynchronization>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001280:	f7ff fefc 	bl	800107c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001284:	2360      	movs	r3, #96	@ 0x60
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001290:	2300      	movs	r3, #0
 8001292:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800129c:	2300      	movs	r3, #0
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a4:	2200      	movs	r2, #0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4813      	ldr	r0, [pc, #76]	@ (80012f8 <MX_TIM1_Init+0x100>)
 80012aa:	f004 fe55 	bl	8005f58 <HAL_TIM_PWM_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80012b4:	f7ff fee2 	bl	800107c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <MX_TIM1_Init+0x100>)
 80012dc:	f005 f976 	bl	80065cc <HAL_TIMEx_ConfigBreakDeadTime>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80012e6:	f7ff fec9 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012ea:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <MX_TIM1_Init+0x100>)
 80012ec:	f000 f826 	bl	800133c <HAL_TIM_MspPostInit>

}
 80012f0:	bf00      	nop
 80012f2:	3748      	adds	r7, #72	@ 0x48
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000030c 	.word	0x2000030c
 80012fc:	40012c00 	.word	0x40012c00

08001300 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a09      	ldr	r2, [pc, #36]	@ (8001334 <HAL_TIM_PWM_MspInit+0x34>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10b      	bne.n	800132a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_TIM_PWM_MspInit+0x38>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <HAL_TIM_PWM_MspInit+0x38>)
 8001318:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800131c:	6193      	str	r3, [r2, #24]
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_TIM_PWM_MspInit+0x38>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	40012c00 	.word	0x40012c00
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a10      	ldr	r2, [pc, #64]	@ (8001398 <HAL_TIM_MspPostInit+0x5c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d118      	bne.n	800138e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <HAL_TIM_MspPostInit+0x60>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a0e      	ldr	r2, [pc, #56]	@ (800139c <HAL_TIM_MspPostInit+0x60>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <HAL_TIM_MspPostInit+0x60>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = WDI_32KHz_Pin;
 8001374:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001378:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WDI_32KHz_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <HAL_TIM_MspPostInit+0x64>)
 800138a:	f001 f8e3 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40012c00 	.word	0x40012c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010800 	.word	0x40010800

080013a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <MX_USART1_UART_Init+0x50>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80013b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013dc:	f005 f947 	bl	800666e <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013e6:	f7ff fe49 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000354 	.word	0x20000354
 80013f4:	40013800 	.word	0x40013800

080013f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <HAL_UART_MspInit+0x8c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d131      	bne.n	800147c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001418:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <HAL_UART_MspInit+0x90>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a1a      	ldr	r2, [pc, #104]	@ (8001488 <HAL_UART_MspInit+0x90>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <HAL_UART_MspInit+0x90>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_UART_MspInit+0x90>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a14      	ldr	r2, [pc, #80]	@ (8001488 <HAL_UART_MspInit+0x90>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <HAL_UART_MspInit+0x90>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800144c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	4619      	mov	r1, r3
 800145c:	480b      	ldr	r0, [pc, #44]	@ (800148c <HAL_UART_MspInit+0x94>)
 800145e:	f001 f879 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	4619      	mov	r1, r3
 8001476:	4805      	ldr	r0, [pc, #20]	@ (800148c <HAL_UART_MspInit+0x94>)
 8001478:	f001 f86c 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800147c:	bf00      	nop
 800147e:	3720      	adds	r7, #32
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40013800 	.word	0x40013800
 8001488:	40021000 	.word	0x40021000
 800148c:	40010800 	.word	0x40010800

08001490 <sendUsartMsg>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void sendUsartMsg(const char* label, uint16_t value) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b094      	sub	sp, #80	@ 0x50
 8001494:	af02      	add	r7, sp, #8
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
    char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "%s %u \n", label, value);
 800149c:	887b      	ldrh	r3, [r7, #2]
 800149e:	f107 0008 	add.w	r0, r7, #8
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a0c      	ldr	r2, [pc, #48]	@ (80014d8 <sendUsartMsg+0x48>)
 80014a8:	2140      	movs	r1, #64	@ 0x40
 80014aa:	f009 fe4b 	bl	800b144 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe fe4c 	bl	8000150 <strlen>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	f107 0108 	add.w	r1, r7, #8
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014c4:	4805      	ldr	r0, [pc, #20]	@ (80014dc <sendUsartMsg+0x4c>)
 80014c6:	f005 f922 	bl	800670e <HAL_UART_Transmit>
    HAL_Delay(10);
 80014ca:	200a      	movs	r0, #10
 80014cc:	f000 f890 	bl	80015f0 <HAL_Delay>
}
 80014d0:	bf00      	nop
 80014d2:	3748      	adds	r7, #72	@ 0x48
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	0800bc50 	.word	0x0800bc50
 80014dc:	20000354 	.word	0x20000354

080014e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e0:	f7ff fe84 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e4:	480b      	ldr	r0, [pc, #44]	@ (8001514 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014e6:	490c      	ldr	r1, [pc, #48]	@ (8001518 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014e8:	4a0c      	ldr	r2, [pc, #48]	@ (800151c <LoopFillZerobss+0x16>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014fc:	4c09      	ldr	r4, [pc, #36]	@ (8001524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f009 fe5d 	bl	800b1c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800150e:	f7ff fbe5 	bl	8000cdc <main>
  bx lr
 8001512:	4770      	bx	lr
  ldr r0, =_sdata
 8001514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001518:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 800151c:	0800bd10 	.word	0x0800bd10
  ldr r2, =_sbss
 8001520:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001524:	200016a8 	.word	0x200016a8

08001528 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001528:	e7fe      	b.n	8001528 <CAN1_RX1_IRQHandler>
	...

0800152c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <HAL_Init+0x28>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a07      	ldr	r2, [pc, #28]	@ (8001554 <HAL_Init+0x28>)
 8001536:	f043 0310 	orr.w	r3, r3, #16
 800153a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 fdd9 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001542:	200f      	movs	r0, #15
 8001544:	f000 f808 	bl	8001558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001548:	f7ff fd9e 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40022000 	.word	0x40022000

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_InitTick+0x54>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_InitTick+0x58>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fdf1 	bl	800215e <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00e      	b.n	80015a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d80a      	bhi.n	80015a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001594:	f000 fdb9 	bl	800210a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001598:	4a06      	ldr	r2, [pc, #24]	@ (80015b4 <HAL_InitTick+0x5c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000008 	.word	0x20000008
 80015b4:	20000004 	.word	0x20000004

080015b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <HAL_IncTick+0x1c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <HAL_IncTick+0x20>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4a03      	ldr	r2, [pc, #12]	@ (80015d8 <HAL_IncTick+0x20>)
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	20000008 	.word	0x20000008
 80015d8:	2000039c 	.word	0x2000039c

080015dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b02      	ldr	r3, [pc, #8]	@ (80015ec <HAL_GetTick+0x10>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	2000039c 	.word	0x2000039c

080015f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff fff0 	bl	80015dc <HAL_GetTick>
 80015fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001608:	d005      	beq.n	8001616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_Delay+0x44>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4413      	add	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001616:	bf00      	nop
 8001618:	f7ff ffe0 	bl	80015dc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	429a      	cmp	r2, r3
 8001626:	d8f7      	bhi.n	8001618 <HAL_Delay+0x28>
  {
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008

08001638 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0be      	b.n	80017d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff f8d4 	bl	8000824 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 fbbd 	bl	8001dfc <ADC_ConversionStop_Disable>
 8001682:	4603      	mov	r3, r0
 8001684:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	f040 8099 	bne.w	80017c6 <HAL_ADC_Init+0x18e>
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 8095 	bne.w	80017c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016a4:	f023 0302 	bic.w	r3, r3, #2
 80016a8:	f043 0202 	orr.w	r2, r3, #2
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7b1b      	ldrb	r3, [r3, #12]
 80016be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016d0:	d003      	beq.n	80016da <HAL_ADC_Init+0xa2>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d102      	bne.n	80016e0 <HAL_ADC_Init+0xa8>
 80016da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016de:	e000      	b.n	80016e2 <HAL_ADC_Init+0xaa>
 80016e0:	2300      	movs	r3, #0
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7d1b      	ldrb	r3, [r3, #20]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d119      	bne.n	8001724 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7b1b      	ldrb	r3, [r3, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d109      	bne.n	800170c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	035a      	lsls	r2, r3, #13
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	e00b      	b.n	8001724 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001710:	f043 0220 	orr.w	r2, r3, #32
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	430a      	orrs	r2, r1
 8001736:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <HAL_ADC_Init+0x1a8>)
 8001740:	4013      	ands	r3, r2
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	430b      	orrs	r3, r1
 800174a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001754:	d003      	beq.n	800175e <HAL_ADC_Init+0x126>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d104      	bne.n	8001768 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	3b01      	subs	r3, #1
 8001764:	051b      	lsls	r3, r3, #20
 8001766:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	430a      	orrs	r2, r1
 800177a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <HAL_ADC_Init+0x1ac>)
 8001784:	4013      	ands	r3, r2
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	429a      	cmp	r2, r3
 800178a:	d10b      	bne.n	80017a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017a2:	e018      	b.n	80017d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	f023 0312 	bic.w	r3, r3, #18
 80017ac:	f043 0210 	orr.w	r2, r3, #16
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b8:	f043 0201 	orr.w	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017c4:	e007      	b.n	80017d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ca:	f043 0210 	orr.w	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	ffe1f7fd 	.word	0xffe1f7fd
 80017e4:	ff1f0efe 	.word	0xff1f0efe

080017e8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a64      	ldr	r2, [pc, #400]	@ (8001990 <HAL_ADC_Start_DMA+0x1a8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d004      	beq.n	800180c <HAL_ADC_Start_DMA+0x24>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a63      	ldr	r2, [pc, #396]	@ (8001994 <HAL_ADC_Start_DMA+0x1ac>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d106      	bne.n	800181a <HAL_ADC_Start_DMA+0x32>
 800180c:	4b60      	ldr	r3, [pc, #384]	@ (8001990 <HAL_ADC_Start_DMA+0x1a8>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001814:	2b00      	cmp	r3, #0
 8001816:	f040 80b3 	bne.w	8001980 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_ADC_Start_DMA+0x40>
 8001824:	2302      	movs	r3, #2
 8001826:	e0ae      	b.n	8001986 <HAL_ADC_Start_DMA+0x19e>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f000 fa89 	bl	8001d48 <ADC_Enable>
 8001836:	4603      	mov	r3, r0
 8001838:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f040 809a 	bne.w	8001976 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001846:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a4e      	ldr	r2, [pc, #312]	@ (8001994 <HAL_ADC_Start_DMA+0x1ac>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d105      	bne.n	800186c <HAL_ADC_Start_DMA+0x84>
 8001860:	4b4b      	ldr	r3, [pc, #300]	@ (8001990 <HAL_ADC_Start_DMA+0x1a8>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d115      	bne.n	8001898 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001870:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001882:	2b00      	cmp	r3, #0
 8001884:	d026      	beq.n	80018d4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800188e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001896:	e01d      	b.n	80018d4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a39      	ldr	r2, [pc, #228]	@ (8001990 <HAL_ADC_Start_DMA+0x1a8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d004      	beq.n	80018b8 <HAL_ADC_Start_DMA+0xd0>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a38      	ldr	r2, [pc, #224]	@ (8001994 <HAL_ADC_Start_DMA+0x1ac>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d10d      	bne.n	80018d4 <HAL_ADC_Start_DMA+0xec>
 80018b8:	4b35      	ldr	r3, [pc, #212]	@ (8001990 <HAL_ADC_Start_DMA+0x1a8>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e4:	f023 0206 	bic.w	r2, r3, #6
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a25      	ldr	r2, [pc, #148]	@ (8001998 <HAL_ADC_Start_DMA+0x1b0>)
 8001902:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a24      	ldr	r2, [pc, #144]	@ (800199c <HAL_ADC_Start_DMA+0x1b4>)
 800190a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <HAL_ADC_Start_DMA+0x1b8>)
 8001912:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f06f 0202 	mvn.w	r2, #2
 800191c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800192c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a18      	ldr	r0, [r3, #32]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	334c      	adds	r3, #76	@ 0x4c
 8001938:	4619      	mov	r1, r3
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f000 fc75 	bl	800222c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800194c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001950:	d108      	bne.n	8001964 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001960:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001962:	e00f      	b.n	8001984 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001972:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001974:	e006      	b.n	8001984 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800197e:	e001      	b.n	8001984 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001984:	7dfb      	ldrb	r3, [r7, #23]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40012400 	.word	0x40012400
 8001994:	40012800 	.word	0x40012800
 8001998:	08001e7f 	.word	0x08001e7f
 800199c:	08001efb 	.word	0x08001efb
 80019a0:	08001f17 	.word	0x08001f17

080019a4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d03e      	beq.n	8001a44 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d039      	beq.n	8001a44 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019f2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80019f6:	d11d      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d119      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0220 	bic.w	r2, r2, #32
 8001a0e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff f943 	bl	8000cc0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f06f 0212 	mvn.w	r2, #18
 8001a42:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d04d      	beq.n	8001aea <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d048      	beq.n	8001aea <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	f003 0310 	and.w	r3, r3, #16
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001a7a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001a7e:	d012      	beq.n	8001aa6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d125      	bne.n	8001ada <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a98:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a9c:	d11d      	bne.n	8001ada <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d119      	bne.n	8001ada <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ab4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d105      	bne.n	8001ada <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad2:	f043 0201 	orr.w	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fa35 	bl	8001f4a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f06f 020c 	mvn.w	r2, #12
 8001ae8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d012      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00d      	beq.n	8001b1a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f812 	bl	8001b34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f06f 0201 	mvn.w	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x20>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e0dc      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x1da>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b06      	cmp	r3, #6
 8001b86:	d81c      	bhi.n	8001bc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3b05      	subs	r3, #5
 8001b9a:	221f      	movs	r2, #31
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4019      	ands	r1, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b05      	subs	r3, #5
 8001bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bc0:	e03c      	b.n	8001c3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b0c      	cmp	r3, #12
 8001bc8:	d81c      	bhi.n	8001c04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	3b23      	subs	r3, #35	@ 0x23
 8001bdc:	221f      	movs	r2, #31
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	4019      	ands	r1, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b23      	subs	r3, #35	@ 0x23
 8001bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c02:	e01b      	b.n	8001c3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	3b41      	subs	r3, #65	@ 0x41
 8001c16:	221f      	movs	r2, #31
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	4019      	ands	r1, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b41      	subs	r3, #65	@ 0x41
 8001c30:	fa00 f203 	lsl.w	r2, r0, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b09      	cmp	r3, #9
 8001c42:	d91c      	bls.n	8001c7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68d9      	ldr	r1, [r3, #12]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	3b1e      	subs	r3, #30
 8001c56:	2207      	movs	r2, #7
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4019      	ands	r1, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6898      	ldr	r0, [r3, #8]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b1e      	subs	r3, #30
 8001c70:	fa00 f203 	lsl.w	r2, r0, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	e019      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6919      	ldr	r1, [r3, #16]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	2207      	movs	r2, #7
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4019      	ands	r1, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6898      	ldr	r0, [r3, #8]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d003      	beq.n	8001cc2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cbe:	2b11      	cmp	r3, #17
 8001cc0:	d132      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d125      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d126      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001ce8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d11a      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cf2:	4b13      	ldr	r3, [pc, #76]	@ (8001d40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a13      	ldr	r2, [pc, #76]	@ (8001d44 <HAL_ADC_ConfigChannel+0x1ec>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	0c9a      	lsrs	r2, r3, #18
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d08:	e002      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f9      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x1b2>
 8001d16:	e007      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1c:	f043 0220 	orr.w	r2, r3, #32
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	40012400 	.word	0x40012400
 8001d40:	20000000 	.word	0x20000000
 8001d44:	431bde83 	.word	0x431bde83

08001d48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d040      	beq.n	8001de8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d76:	4b1f      	ldr	r3, [pc, #124]	@ (8001df4 <ADC_Enable+0xac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001df8 <ADC_Enable+0xb0>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	0c9b      	lsrs	r3, r3, #18
 8001d82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d84:	e002      	b.n	8001d8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f9      	bne.n	8001d86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d92:	f7ff fc23 	bl	80015dc <HAL_GetTick>
 8001d96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d98:	e01f      	b.n	8001dda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d9a:	f7ff fc1f 	bl	80015dc <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d918      	bls.n	8001dda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d011      	beq.n	8001dda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	f043 0210 	orr.w	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e007      	b.n	8001dea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d1d8      	bne.n	8001d9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000000 	.word	0x20000000
 8001df8:	431bde83 	.word	0x431bde83

08001dfc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d12e      	bne.n	8001e74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0201 	bic.w	r2, r2, #1
 8001e24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e26:	f7ff fbd9 	bl	80015dc <HAL_GetTick>
 8001e2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e2c:	e01b      	b.n	8001e66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e2e:	f7ff fbd5 	bl	80015dc <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d914      	bls.n	8001e66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d10d      	bne.n	8001e66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	f043 0210 	orr.w	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e007      	b.n	8001e76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d0dc      	beq.n	8001e2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e90:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d127      	bne.n	8001ee8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001eae:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001eb2:	d115      	bne.n	8001ee0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d111      	bne.n	8001ee0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	f043 0201 	orr.w	r2, r3, #1
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f7fe feed 	bl	8000cc0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ee6:	e004      	b.n	8001ef2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f7ff fe0a 	bl	8001b22 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b084      	sub	sp, #16
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f34:	f043 0204 	orr.w	r2, r3, #4
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f7ff fe02 	bl	8001b46 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	@ (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db0b      	blt.n	8001fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4906      	ldr	r1, [pc, #24]	@ (8001ff4 <__NVIC_EnableIRQ+0x34>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	@ (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	@ (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	@ 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
         );
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	@ 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020c0:	d301      	bcc.n	80020c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00f      	b.n	80020e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c6:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <SysTick_Config+0x40>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ce:	210f      	movs	r1, #15
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020d4:	f7ff ff90 	bl	8001ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <SysTick_Config+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020de:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <SysTick_Config+0x40>)
 80020e0:	2207      	movs	r2, #7
 80020e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff2d 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800211c:	f7ff ff42 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 8002120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff90 	bl	800204c <NVIC_EncodePriority>
 800212c:	4602      	mov	r2, r0
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff5f 	bl	8001ff8 <__NVIC_SetPriority>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff35 	bl	8001fc0 <__NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffa2 	bl	80020b0 <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e043      	b.n	8002216 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <HAL_DMA_Init+0xa8>)
 8002196:	4413      	add	r3, r2
 8002198:	4a22      	ldr	r2, [pc, #136]	@ (8002224 <HAL_DMA_Init+0xac>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	009a      	lsls	r2, r3, #2
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002228 <HAL_DMA_Init+0xb0>)
 80021aa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2202      	movs	r2, #2
 80021b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80021c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80021d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	bffdfff8 	.word	0xbffdfff8
 8002224:	cccccccd 	.word	0xcccccccd
 8002228:	40020000 	.word	0x40020000

0800222c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_DMA_Start_IT+0x20>
 8002248:	2302      	movs	r3, #2
 800224a:	e04b      	b.n	80022e4 <HAL_DMA_Start_IT+0xb8>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d13a      	bne.n	80022d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f937 	bl	80024f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 020e 	orr.w	r2, r2, #14
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e00f      	b.n	80022c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0204 	bic.w	r2, r2, #4
 80022b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 020a 	orr.w	r2, r2, #10
 80022c2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e005      	b.n	80022e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80022de:	2302      	movs	r3, #2
 80022e0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	2204      	movs	r2, #4
 800230a:	409a      	lsls	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d04f      	beq.n	80023b4 <HAL_DMA_IRQHandler+0xc8>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b00      	cmp	r3, #0
 800231c:	d04a      	beq.n	80023b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b00      	cmp	r3, #0
 800232a:	d107      	bne.n	800233c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0204 	bic.w	r2, r2, #4
 800233a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a66      	ldr	r2, [pc, #408]	@ (80024dc <HAL_DMA_IRQHandler+0x1f0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d029      	beq.n	800239a <HAL_DMA_IRQHandler+0xae>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a65      	ldr	r2, [pc, #404]	@ (80024e0 <HAL_DMA_IRQHandler+0x1f4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d022      	beq.n	8002396 <HAL_DMA_IRQHandler+0xaa>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a63      	ldr	r2, [pc, #396]	@ (80024e4 <HAL_DMA_IRQHandler+0x1f8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01a      	beq.n	8002390 <HAL_DMA_IRQHandler+0xa4>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a62      	ldr	r2, [pc, #392]	@ (80024e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d012      	beq.n	800238a <HAL_DMA_IRQHandler+0x9e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a60      	ldr	r2, [pc, #384]	@ (80024ec <HAL_DMA_IRQHandler+0x200>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00a      	beq.n	8002384 <HAL_DMA_IRQHandler+0x98>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a5f      	ldr	r2, [pc, #380]	@ (80024f0 <HAL_DMA_IRQHandler+0x204>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d102      	bne.n	800237e <HAL_DMA_IRQHandler+0x92>
 8002378:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800237c:	e00e      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 800237e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002382:	e00b      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 8002384:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002388:	e008      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 800238a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800238e:	e005      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 8002390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002394:	e002      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 8002396:	2340      	movs	r3, #64	@ 0x40
 8002398:	e000      	b.n	800239c <HAL_DMA_IRQHandler+0xb0>
 800239a:	2304      	movs	r3, #4
 800239c:	4a55      	ldr	r2, [pc, #340]	@ (80024f4 <HAL_DMA_IRQHandler+0x208>)
 800239e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8094 	beq.w	80024d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80023b2:	e08e      	b.n	80024d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	2202      	movs	r2, #2
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d056      	beq.n	8002472 <HAL_DMA_IRQHandler+0x186>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d051      	beq.n	8002472 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 020a 	bic.w	r2, r2, #10
 80023ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a38      	ldr	r2, [pc, #224]	@ (80024dc <HAL_DMA_IRQHandler+0x1f0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d029      	beq.n	8002452 <HAL_DMA_IRQHandler+0x166>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a37      	ldr	r2, [pc, #220]	@ (80024e0 <HAL_DMA_IRQHandler+0x1f4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d022      	beq.n	800244e <HAL_DMA_IRQHandler+0x162>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a35      	ldr	r2, [pc, #212]	@ (80024e4 <HAL_DMA_IRQHandler+0x1f8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d01a      	beq.n	8002448 <HAL_DMA_IRQHandler+0x15c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a34      	ldr	r2, [pc, #208]	@ (80024e8 <HAL_DMA_IRQHandler+0x1fc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d012      	beq.n	8002442 <HAL_DMA_IRQHandler+0x156>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a32      	ldr	r2, [pc, #200]	@ (80024ec <HAL_DMA_IRQHandler+0x200>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00a      	beq.n	800243c <HAL_DMA_IRQHandler+0x150>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a31      	ldr	r2, [pc, #196]	@ (80024f0 <HAL_DMA_IRQHandler+0x204>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d102      	bne.n	8002436 <HAL_DMA_IRQHandler+0x14a>
 8002430:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002434:	e00e      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 8002436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800243a:	e00b      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 800243c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002440:	e008      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 8002442:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002446:	e005      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 8002448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800244c:	e002      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 800244e:	2320      	movs	r3, #32
 8002450:	e000      	b.n	8002454 <HAL_DMA_IRQHandler+0x168>
 8002452:	2302      	movs	r3, #2
 8002454:	4a27      	ldr	r2, [pc, #156]	@ (80024f4 <HAL_DMA_IRQHandler+0x208>)
 8002456:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	d034      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002470:	e02f      	b.n	80024d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	2208      	movs	r2, #8
 8002478:	409a      	lsls	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d028      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x1e8>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d023      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 020e 	bic.w	r2, r2, #14
 800249a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a4:	2101      	movs	r1, #1
 80024a6:	fa01 f202 	lsl.w	r2, r1, r2
 80024aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d004      	beq.n	80024d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
    }
  }
  return;
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
}
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40020008 	.word	0x40020008
 80024e0:	4002001c 	.word	0x4002001c
 80024e4:	40020030 	.word	0x40020030
 80024e8:	40020044 	.word	0x40020044
 80024ec:	40020058 	.word	0x40020058
 80024f0:	4002006c 	.word	0x4002006c
 80024f4:	40020000 	.word	0x40020000

080024f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f202 	lsl.w	r2, r1, r2
 8002514:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b10      	cmp	r3, #16
 8002524:	d108      	bne.n	8002538 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002536:	e007      	b.n	8002548 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	60da      	str	r2, [r3, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b08b      	sub	sp, #44	@ 0x2c
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002566:	e169      	b.n	800283c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002568:	2201      	movs	r2, #1
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	429a      	cmp	r2, r3
 8002582:	f040 8158 	bne.w	8002836 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4a9a      	ldr	r2, [pc, #616]	@ (80027f4 <HAL_GPIO_Init+0x2a0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d05e      	beq.n	800264e <HAL_GPIO_Init+0xfa>
 8002590:	4a98      	ldr	r2, [pc, #608]	@ (80027f4 <HAL_GPIO_Init+0x2a0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d875      	bhi.n	8002682 <HAL_GPIO_Init+0x12e>
 8002596:	4a98      	ldr	r2, [pc, #608]	@ (80027f8 <HAL_GPIO_Init+0x2a4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d058      	beq.n	800264e <HAL_GPIO_Init+0xfa>
 800259c:	4a96      	ldr	r2, [pc, #600]	@ (80027f8 <HAL_GPIO_Init+0x2a4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d86f      	bhi.n	8002682 <HAL_GPIO_Init+0x12e>
 80025a2:	4a96      	ldr	r2, [pc, #600]	@ (80027fc <HAL_GPIO_Init+0x2a8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d052      	beq.n	800264e <HAL_GPIO_Init+0xfa>
 80025a8:	4a94      	ldr	r2, [pc, #592]	@ (80027fc <HAL_GPIO_Init+0x2a8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d869      	bhi.n	8002682 <HAL_GPIO_Init+0x12e>
 80025ae:	4a94      	ldr	r2, [pc, #592]	@ (8002800 <HAL_GPIO_Init+0x2ac>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d04c      	beq.n	800264e <HAL_GPIO_Init+0xfa>
 80025b4:	4a92      	ldr	r2, [pc, #584]	@ (8002800 <HAL_GPIO_Init+0x2ac>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d863      	bhi.n	8002682 <HAL_GPIO_Init+0x12e>
 80025ba:	4a92      	ldr	r2, [pc, #584]	@ (8002804 <HAL_GPIO_Init+0x2b0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d046      	beq.n	800264e <HAL_GPIO_Init+0xfa>
 80025c0:	4a90      	ldr	r2, [pc, #576]	@ (8002804 <HAL_GPIO_Init+0x2b0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d85d      	bhi.n	8002682 <HAL_GPIO_Init+0x12e>
 80025c6:	2b12      	cmp	r3, #18
 80025c8:	d82a      	bhi.n	8002620 <HAL_GPIO_Init+0xcc>
 80025ca:	2b12      	cmp	r3, #18
 80025cc:	d859      	bhi.n	8002682 <HAL_GPIO_Init+0x12e>
 80025ce:	a201      	add	r2, pc, #4	@ (adr r2, 80025d4 <HAL_GPIO_Init+0x80>)
 80025d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d4:	0800264f 	.word	0x0800264f
 80025d8:	08002629 	.word	0x08002629
 80025dc:	0800263b 	.word	0x0800263b
 80025e0:	0800267d 	.word	0x0800267d
 80025e4:	08002683 	.word	0x08002683
 80025e8:	08002683 	.word	0x08002683
 80025ec:	08002683 	.word	0x08002683
 80025f0:	08002683 	.word	0x08002683
 80025f4:	08002683 	.word	0x08002683
 80025f8:	08002683 	.word	0x08002683
 80025fc:	08002683 	.word	0x08002683
 8002600:	08002683 	.word	0x08002683
 8002604:	08002683 	.word	0x08002683
 8002608:	08002683 	.word	0x08002683
 800260c:	08002683 	.word	0x08002683
 8002610:	08002683 	.word	0x08002683
 8002614:	08002683 	.word	0x08002683
 8002618:	08002631 	.word	0x08002631
 800261c:	08002645 	.word	0x08002645
 8002620:	4a79      	ldr	r2, [pc, #484]	@ (8002808 <HAL_GPIO_Init+0x2b4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002626:	e02c      	b.n	8002682 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	623b      	str	r3, [r7, #32]
          break;
 800262e:	e029      	b.n	8002684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	3304      	adds	r3, #4
 8002636:	623b      	str	r3, [r7, #32]
          break;
 8002638:	e024      	b.n	8002684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	3308      	adds	r3, #8
 8002640:	623b      	str	r3, [r7, #32]
          break;
 8002642:	e01f      	b.n	8002684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	330c      	adds	r3, #12
 800264a:	623b      	str	r3, [r7, #32]
          break;
 800264c:	e01a      	b.n	8002684 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002656:	2304      	movs	r3, #4
 8002658:	623b      	str	r3, [r7, #32]
          break;
 800265a:	e013      	b.n	8002684 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d105      	bne.n	8002670 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002664:	2308      	movs	r3, #8
 8002666:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	611a      	str	r2, [r3, #16]
          break;
 800266e:	e009      	b.n	8002684 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002670:	2308      	movs	r3, #8
 8002672:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	615a      	str	r2, [r3, #20]
          break;
 800267a:	e003      	b.n	8002684 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800267c:	2300      	movs	r3, #0
 800267e:	623b      	str	r3, [r7, #32]
          break;
 8002680:	e000      	b.n	8002684 <HAL_GPIO_Init+0x130>
          break;
 8002682:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2bff      	cmp	r3, #255	@ 0xff
 8002688:	d801      	bhi.n	800268e <HAL_GPIO_Init+0x13a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	e001      	b.n	8002692 <HAL_GPIO_Init+0x13e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3304      	adds	r3, #4
 8002692:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2bff      	cmp	r3, #255	@ 0xff
 8002698:	d802      	bhi.n	80026a0 <HAL_GPIO_Init+0x14c>
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	e002      	b.n	80026a6 <HAL_GPIO_Init+0x152>
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	3b08      	subs	r3, #8
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	210f      	movs	r1, #15
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	401a      	ands	r2, r3
 80026b8:	6a39      	ldr	r1, [r7, #32]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	431a      	orrs	r2, r3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 80b1 	beq.w	8002836 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026d4:	4b4d      	ldr	r3, [pc, #308]	@ (800280c <HAL_GPIO_Init+0x2b8>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a4c      	ldr	r2, [pc, #304]	@ (800280c <HAL_GPIO_Init+0x2b8>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b4a      	ldr	r3, [pc, #296]	@ (800280c <HAL_GPIO_Init+0x2b8>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026ec:	4a48      	ldr	r2, [pc, #288]	@ (8002810 <HAL_GPIO_Init+0x2bc>)
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	089b      	lsrs	r3, r3, #2
 80026f2:	3302      	adds	r3, #2
 80026f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	220f      	movs	r2, #15
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4013      	ands	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a40      	ldr	r2, [pc, #256]	@ (8002814 <HAL_GPIO_Init+0x2c0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <HAL_GPIO_Init+0x1ec>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a3f      	ldr	r2, [pc, #252]	@ (8002818 <HAL_GPIO_Init+0x2c4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00d      	beq.n	800273c <HAL_GPIO_Init+0x1e8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a3e      	ldr	r2, [pc, #248]	@ (800281c <HAL_GPIO_Init+0x2c8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <HAL_GPIO_Init+0x1e4>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a3d      	ldr	r2, [pc, #244]	@ (8002820 <HAL_GPIO_Init+0x2cc>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d101      	bne.n	8002734 <HAL_GPIO_Init+0x1e0>
 8002730:	2303      	movs	r3, #3
 8002732:	e006      	b.n	8002742 <HAL_GPIO_Init+0x1ee>
 8002734:	2304      	movs	r3, #4
 8002736:	e004      	b.n	8002742 <HAL_GPIO_Init+0x1ee>
 8002738:	2302      	movs	r3, #2
 800273a:	e002      	b.n	8002742 <HAL_GPIO_Init+0x1ee>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <HAL_GPIO_Init+0x1ee>
 8002740:	2300      	movs	r3, #0
 8002742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002744:	f002 0203 	and.w	r2, r2, #3
 8002748:	0092      	lsls	r2, r2, #2
 800274a:	4093      	lsls	r3, r2
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002752:	492f      	ldr	r1, [pc, #188]	@ (8002810 <HAL_GPIO_Init+0x2bc>)
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	089b      	lsrs	r3, r3, #2
 8002758:	3302      	adds	r3, #2
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d006      	beq.n	800277a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800276c:	4b2d      	ldr	r3, [pc, #180]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	492c      	ldr	r1, [pc, #176]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	608b      	str	r3, [r1, #8]
 8002778:	e006      	b.n	8002788 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800277a:	4b2a      	ldr	r3, [pc, #168]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	43db      	mvns	r3, r3
 8002782:	4928      	ldr	r1, [pc, #160]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 8002784:	4013      	ands	r3, r2
 8002786:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d006      	beq.n	80027a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002794:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	4922      	ldr	r1, [pc, #136]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	60cb      	str	r3, [r1, #12]
 80027a0:	e006      	b.n	80027b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027a2:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	491e      	ldr	r1, [pc, #120]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d006      	beq.n	80027ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027bc:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4918      	ldr	r1, [pc, #96]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
 80027c8:	e006      	b.n	80027d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027ca:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	4914      	ldr	r1, [pc, #80]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d021      	beq.n	8002828 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	490e      	ldr	r1, [pc, #56]	@ (8002824 <HAL_GPIO_Init+0x2d0>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
 80027f0:	e021      	b.n	8002836 <HAL_GPIO_Init+0x2e2>
 80027f2:	bf00      	nop
 80027f4:	10320000 	.word	0x10320000
 80027f8:	10310000 	.word	0x10310000
 80027fc:	10220000 	.word	0x10220000
 8002800:	10210000 	.word	0x10210000
 8002804:	10120000 	.word	0x10120000
 8002808:	10110000 	.word	0x10110000
 800280c:	40021000 	.word	0x40021000
 8002810:	40010000 	.word	0x40010000
 8002814:	40010800 	.word	0x40010800
 8002818:	40010c00 	.word	0x40010c00
 800281c:	40011000 	.word	0x40011000
 8002820:	40011400 	.word	0x40011400
 8002824:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_GPIO_Init+0x304>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	43db      	mvns	r3, r3
 8002830:	4909      	ldr	r1, [pc, #36]	@ (8002858 <HAL_GPIO_Init+0x304>)
 8002832:	4013      	ands	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	3301      	adds	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	f47f ae8e 	bne.w	8002568 <HAL_GPIO_Init+0x14>
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	372c      	adds	r7, #44	@ 0x2c
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	40010400 	.word	0x40010400

0800285c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	4613      	mov	r3, r2
 800286a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800286c:	787b      	ldrb	r3, [r7, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002878:	e003      	b.n	8002882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800287a:	887b      	ldrh	r3, [r7, #2]
 800287c:	041a      	lsls	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	611a      	str	r2, [r3, #16]
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4013      	ands	r3, r2
 80028a4:	041a      	lsls	r2, r3, #16
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	43d9      	mvns	r1, r3
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	400b      	ands	r3, r1
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	611a      	str	r2, [r3, #16]
}
 80028b4:	bf00      	nop
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e12b      	b.n	8002b2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f954 	bl	8000b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	@ 0x24
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0201 	bic.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002912:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002922:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002924:	f003 f92a 	bl	8005b7c <HAL_RCC_GetPCLK1Freq>
 8002928:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4a81      	ldr	r2, [pc, #516]	@ (8002b34 <HAL_I2C_Init+0x274>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d807      	bhi.n	8002944 <HAL_I2C_Init+0x84>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4a80      	ldr	r2, [pc, #512]	@ (8002b38 <HAL_I2C_Init+0x278>)
 8002938:	4293      	cmp	r3, r2
 800293a:	bf94      	ite	ls
 800293c:	2301      	movls	r3, #1
 800293e:	2300      	movhi	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	e006      	b.n	8002952 <HAL_I2C_Init+0x92>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a7d      	ldr	r2, [pc, #500]	@ (8002b3c <HAL_I2C_Init+0x27c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	bf94      	ite	ls
 800294c:	2301      	movls	r3, #1
 800294e:	2300      	movhi	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0e7      	b.n	8002b2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a78      	ldr	r2, [pc, #480]	@ (8002b40 <HAL_I2C_Init+0x280>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	0c9b      	lsrs	r3, r3, #18
 8002964:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a6a      	ldr	r2, [pc, #424]	@ (8002b34 <HAL_I2C_Init+0x274>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d802      	bhi.n	8002994 <HAL_I2C_Init+0xd4>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3301      	adds	r3, #1
 8002992:	e009      	b.n	80029a8 <HAL_I2C_Init+0xe8>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	4a69      	ldr	r2, [pc, #420]	@ (8002b44 <HAL_I2C_Init+0x284>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	3301      	adds	r3, #1
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	495c      	ldr	r1, [pc, #368]	@ (8002b34 <HAL_I2C_Init+0x274>)
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d819      	bhi.n	80029fc <HAL_I2C_Init+0x13c>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1e59      	subs	r1, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80029d6:	1c59      	adds	r1, r3, #1
 80029d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029dc:	400b      	ands	r3, r1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_I2C_Init+0x138>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e59      	subs	r1, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f6:	e051      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 80029f8:	2304      	movs	r3, #4
 80029fa:	e04f      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d111      	bne.n	8002a28 <HAL_I2C_Init+0x168>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1e58      	subs	r0, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e012      	b.n	8002a4e <HAL_I2C_Init+0x18e>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e58      	subs	r0, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	0099      	lsls	r1, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Init+0x196>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e022      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10e      	bne.n	8002a7c <HAL_I2C_Init+0x1bc>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1e58      	subs	r0, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	440b      	add	r3, r1
 8002a6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a7a:	e00f      	b.n	8002a9c <HAL_I2C_Init+0x1dc>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	1e58      	subs	r0, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6859      	ldr	r1, [r3, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	0099      	lsls	r1, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a92:	3301      	adds	r3, #1
 8002a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	6809      	ldr	r1, [r1, #0]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002aca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6911      	ldr	r1, [r2, #16]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	68d2      	ldr	r2, [r2, #12]
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	000186a0 	.word	0x000186a0
 8002b38:	001e847f 	.word	0x001e847f
 8002b3c:	003d08ff 	.word	0x003d08ff
 8002b40:	431bde83 	.word	0x431bde83
 8002b44:	10624dd3 	.word	0x10624dd3

08002b48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	461a      	mov	r2, r3
 8002b54:	460b      	mov	r3, r1
 8002b56:	817b      	strh	r3, [r7, #10]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7fe fd3e 	bl	80015dc <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	f040 80e0 	bne.w	8002d30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2319      	movs	r3, #25
 8002b76:	2201      	movs	r2, #1
 8002b78:	4970      	ldr	r1, [pc, #448]	@ (8002d3c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fc9e 	bl	80034bc <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0d3      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_I2C_Master_Transmit+0x50>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0cc      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d007      	beq.n	8002bbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2221      	movs	r2, #33	@ 0x21
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2210      	movs	r2, #16
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	893a      	ldrh	r2, [r7, #8]
 8002bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a50      	ldr	r2, [pc, #320]	@ (8002d40 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c00:	8979      	ldrh	r1, [r7, #10]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fb08 	bl	800321c <I2C_MasterRequestWrite>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e08d      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c2c:	e066      	b.n	8002cfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	6a39      	ldr	r1, [r7, #32]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fd5c 	bl	80036f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d107      	bne.n	8002c56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06b      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	781a      	ldrb	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11b      	bne.n	8002cd0 <HAL_I2C_Master_Transmit+0x188>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	6a39      	ldr	r1, [r7, #32]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fd53 	bl	8003780 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00d      	beq.n	8002cfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d107      	bne.n	8002cf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e01a      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d194      	bne.n	8002c2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	00100002 	.word	0x00100002
 8002d40:	ffff0000 	.word	0xffff0000

08002d44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	@ 0x30
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	460b      	mov	r3, r1
 8002d52:	817b      	strh	r3, [r7, #10]
 8002d54:	4613      	mov	r3, r2
 8002d56:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d5c:	f7fe fc3e 	bl	80015dc <HAL_GetTick>
 8002d60:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	f040 824b 	bne.w	8003206 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2319      	movs	r3, #25
 8002d76:	2201      	movs	r2, #1
 8002d78:	497f      	ldr	r1, [pc, #508]	@ (8002f78 <HAL_I2C_Master_Receive+0x234>)
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fb9e 	bl	80034bc <I2C_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
 8002d88:	e23e      	b.n	8003208 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_I2C_Master_Receive+0x54>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e237      	b.n	8003208 <HAL_I2C_Master_Receive+0x4c4>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d007      	beq.n	8002dbe <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2222      	movs	r2, #34	@ 0x22
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2210      	movs	r2, #16
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	893a      	ldrh	r2, [r7, #8]
 8002dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4a5f      	ldr	r2, [pc, #380]	@ (8002f7c <HAL_I2C_Master_Receive+0x238>)
 8002dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e00:	8979      	ldrh	r1, [r7, #10]
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fa8a 	bl	8003320 <I2C_MasterRequestRead>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e1f8      	b.n	8003208 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d113      	bne.n	8002e46 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e1cc      	b.n	80031e0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d11e      	bne.n	8002e8c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e5e:	b672      	cpsid	i
}
 8002e60:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e88:	b662      	cpsie	i
}
 8002e8a:	e035      	b.n	8002ef8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d11e      	bne.n	8002ed2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ea2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea4:	b672      	cpsid	i
}
 8002ea6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ecc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ece:	b662      	cpsie	i
}
 8002ed0:	e012      	b.n	8002ef8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ef8:	e172      	b.n	80031e0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	f200 811f 	bhi.w	8003142 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d123      	bne.n	8002f54 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 fc7d 	bl	8003810 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e173      	b.n	8003208 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f52:	e145      	b.n	80031e0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d152      	bne.n	8003002 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	2200      	movs	r2, #0
 8002f64:	4906      	ldr	r1, [pc, #24]	@ (8002f80 <HAL_I2C_Master_Receive+0x23c>)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 faa8 	bl	80034bc <I2C_WaitOnFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e148      	b.n	8003208 <HAL_I2C_Master_Receive+0x4c4>
 8002f76:	bf00      	nop
 8002f78:	00100002 	.word	0x00100002
 8002f7c:	ffff0000 	.word	0xffff0000
 8002f80:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f84:	b672      	cpsid	i
}
 8002f86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fca:	b662      	cpsie	i
}
 8002fcc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003000:	e0ee      	b.n	80031e0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003008:	2200      	movs	r2, #0
 800300a:	4981      	ldr	r1, [pc, #516]	@ (8003210 <HAL_I2C_Master_Receive+0x4cc>)
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fa55 	bl	80034bc <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0f5      	b.n	8003208 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800302a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800302c:	b672      	cpsid	i
}
 800302e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003062:	4b6c      	ldr	r3, [pc, #432]	@ (8003214 <HAL_I2C_Master_Receive+0x4d0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	08db      	lsrs	r3, r3, #3
 8003068:	4a6b      	ldr	r2, [pc, #428]	@ (8003218 <HAL_I2C_Master_Receive+0x4d4>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0a1a      	lsrs	r2, r3, #8
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	00da      	lsls	r2, r3, #3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	3b01      	subs	r3, #1
 8003080:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d118      	bne.n	80030ba <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	f043 0220 	orr.w	r2, r3, #32
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80030aa:	b662      	cpsie	i
}
 80030ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0a6      	b.n	8003208 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d1d9      	bne.n	800307c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800310a:	b662      	cpsie	i
}
 800310c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003140:	e04e      	b.n	80031e0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003144:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fb62 	bl	8003810 <I2C_WaitOnRXNEFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e058      	b.n	8003208 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b04      	cmp	r3, #4
 8003194:	d124      	bne.n	80031e0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319a:	2b03      	cmp	r3, #3
 800319c:	d107      	bne.n	80031ae <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ac:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f47f ae88 	bne.w	8002efa <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e000      	b.n	8003208 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
  }
}
 8003208:	4618      	mov	r0, r3
 800320a:	3728      	adds	r7, #40	@ 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	00010004 	.word	0x00010004
 8003214:	20000000 	.word	0x20000000
 8003218:	14f8b589 	.word	0x14f8b589

0800321c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	460b      	mov	r3, r1
 800322a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003230:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d006      	beq.n	8003246 <I2C_MasterRequestWrite+0x2a>
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d003      	beq.n	8003246 <I2C_MasterRequestWrite+0x2a>
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003244:	d108      	bne.n	8003258 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e00b      	b.n	8003270 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325c:	2b12      	cmp	r3, #18
 800325e:	d107      	bne.n	8003270 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800326e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f91d 	bl	80034bc <I2C_WaitOnFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00d      	beq.n	80032a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003296:	d103      	bne.n	80032a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800329e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e035      	b.n	8003310 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032ac:	d108      	bne.n	80032c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ae:	897b      	ldrh	r3, [r7, #10]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	461a      	mov	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032bc:	611a      	str	r2, [r3, #16]
 80032be:	e01b      	b.n	80032f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032c0:	897b      	ldrh	r3, [r7, #10]
 80032c2:	11db      	asrs	r3, r3, #7
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	f003 0306 	and.w	r3, r3, #6
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f063 030f 	orn	r3, r3, #15
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	490e      	ldr	r1, [pc, #56]	@ (8003318 <I2C_MasterRequestWrite+0xfc>)
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f966 	bl	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e010      	b.n	8003310 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032ee:	897b      	ldrh	r3, [r7, #10]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	4907      	ldr	r1, [pc, #28]	@ (800331c <I2C_MasterRequestWrite+0x100>)
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f956 	bl	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	00010008 	.word	0x00010008
 800331c:	00010002 	.word	0x00010002

08003320 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	460b      	mov	r3, r1
 800332e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003334:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003344:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d006      	beq.n	800335a <I2C_MasterRequestRead+0x3a>
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d003      	beq.n	800335a <I2C_MasterRequestRead+0x3a>
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003358:	d108      	bne.n	800336c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e00b      	b.n	8003384 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003370:	2b11      	cmp	r3, #17
 8003372:	d107      	bne.n	8003384 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003382:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f893 	bl	80034bc <I2C_WaitOnFlagUntilTimeout>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00d      	beq.n	80033b8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033aa:	d103      	bne.n	80033b4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e079      	b.n	80034ac <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033c0:	d108      	bne.n	80033d4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033c2:	897b      	ldrh	r3, [r7, #10]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	611a      	str	r2, [r3, #16]
 80033d2:	e05f      	b.n	8003494 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033d4:	897b      	ldrh	r3, [r7, #10]
 80033d6:	11db      	asrs	r3, r3, #7
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f003 0306 	and.w	r3, r3, #6
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f063 030f 	orn	r3, r3, #15
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4930      	ldr	r1, [pc, #192]	@ (80034b4 <I2C_MasterRequestRead+0x194>)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f8dc 	bl	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e054      	b.n	80034ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003402:	897b      	ldrh	r3, [r7, #10]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4929      	ldr	r1, [pc, #164]	@ (80034b8 <I2C_MasterRequestRead+0x198>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f8cc 	bl	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e044      	b.n	80034ac <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003446:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f831 	bl	80034bc <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00d      	beq.n	800347c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800346e:	d103      	bne.n	8003478 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003476:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e017      	b.n	80034ac <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800347c:	897b      	ldrh	r3, [r7, #10]
 800347e:	11db      	asrs	r3, r3, #7
 8003480:	b2db      	uxtb	r3, r3
 8003482:	f003 0306 	and.w	r3, r3, #6
 8003486:	b2db      	uxtb	r3, r3
 8003488:	f063 030e 	orn	r3, r3, #14
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4907      	ldr	r1, [pc, #28]	@ (80034b8 <I2C_MasterRequestRead+0x198>)
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 f888 	bl	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	00010008 	.word	0x00010008
 80034b8:	00010002 	.word	0x00010002

080034bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034cc:	e048      	b.n	8003560 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034d4:	d044      	beq.n	8003560 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	f7fe f881 	bl	80015dc <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d302      	bcc.n	80034ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d139      	bne.n	8003560 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	0c1b      	lsrs	r3, r3, #16
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d10d      	bne.n	8003512 <I2C_WaitOnFlagUntilTimeout+0x56>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	43da      	mvns	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4013      	ands	r3, r2
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	e00c      	b.n	800352c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	43da      	mvns	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4013      	ands	r3, r2
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	429a      	cmp	r2, r3
 8003530:	d116      	bne.n	8003560 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354c:	f043 0220 	orr.w	r2, r3, #32
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e023      	b.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	0c1b      	lsrs	r3, r3, #16
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d10d      	bne.n	8003586 <I2C_WaitOnFlagUntilTimeout+0xca>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	43da      	mvns	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4013      	ands	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	e00c      	b.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	43da      	mvns	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4013      	ands	r3, r2
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d093      	beq.n	80034ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035be:	e071      	b.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ce:	d123      	bne.n	8003618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	f043 0204 	orr.w	r2, r3, #4
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e067      	b.n	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800361e:	d041      	beq.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003620:	f7fd ffdc 	bl	80015dc <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	429a      	cmp	r2, r3
 800362e:	d302      	bcc.n	8003636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d136      	bne.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	d10c      	bne.n	800365a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	43da      	mvns	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4013      	ands	r3, r2
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	bf14      	ite	ne
 8003652:	2301      	movne	r3, #1
 8003654:	2300      	moveq	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	e00b      	b.n	8003672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	43da      	mvns	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4013      	ands	r3, r2
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf14      	ite	ne
 800366c:	2301      	movne	r3, #1
 800366e:	2300      	moveq	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d016      	beq.n	80036a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003690:	f043 0220 	orr.w	r2, r3, #32
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e021      	b.n	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d10c      	bne.n	80036c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	43da      	mvns	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	4013      	ands	r3, r2
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf14      	ite	ne
 80036c0:	2301      	movne	r3, #1
 80036c2:	2300      	moveq	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e00b      	b.n	80036e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	43da      	mvns	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4013      	ands	r3, r2
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bf14      	ite	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	2300      	moveq	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f47f af6d 	bne.w	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036fc:	e034      	b.n	8003768 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 f8e3 	bl	80038ca <I2C_IsAcknowledgeFailed>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e034      	b.n	8003778 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003714:	d028      	beq.n	8003768 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003716:	f7fd ff61 	bl	80015dc <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d11d      	bne.n	8003768 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003736:	2b80      	cmp	r3, #128	@ 0x80
 8003738:	d016      	beq.n	8003768 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003754:	f043 0220 	orr.w	r2, r3, #32
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e007      	b.n	8003778 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003772:	2b80      	cmp	r3, #128	@ 0x80
 8003774:	d1c3      	bne.n	80036fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800378c:	e034      	b.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f89b 	bl	80038ca <I2C_IsAcknowledgeFailed>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e034      	b.n	8003808 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037a4:	d028      	beq.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7fd ff19 	bl	80015dc <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d11d      	bne.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d016      	beq.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e007      	b.n	8003808 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	2b04      	cmp	r3, #4
 8003804:	d1c3      	bne.n	800378e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800381c:	e049      	b.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b10      	cmp	r3, #16
 800382a:	d119      	bne.n	8003860 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0210 	mvn.w	r2, #16
 8003834:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e030      	b.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003860:	f7fd febc 	bl	80015dc <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	d302      	bcc.n	8003876 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d11d      	bne.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	d016      	beq.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	f043 0220 	orr.w	r2, r3, #32
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e007      	b.n	80038c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038bc:	2b40      	cmp	r3, #64	@ 0x40
 80038be:	d1ae      	bne.n	800381e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e0:	d11b      	bne.n	800391a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	f043 0204 	orr.w	r2, r3, #4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0e8      	b.n	8003b0a <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f007 f94f 	bl	800abf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2203      	movs	r2, #3
 8003956:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f003 f8ca 	bl	8006afe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3304      	adds	r3, #4
 8003972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003974:	f003 f8a0 	bl	8006ab8 <USB_CoreInit>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e0bf      	b.n	8003b0a <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f003 f8ce 	bl	8006b32 <USB_SetCurrentMode>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0b0      	b.n	8003b0a <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
 80039ac:	e03e      	b.n	8003a2c <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039ae:	7bfa      	ldrb	r2, [r7, #15]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	440b      	add	r3, r1
 80039bc:	3311      	adds	r3, #17
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039c2:	7bfa      	ldrb	r2, [r7, #15]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	440b      	add	r3, r1
 80039d0:	3310      	adds	r3, #16
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039d6:	7bfa      	ldrb	r2, [r7, #15]
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	440b      	add	r3, r1
 80039e4:	3313      	adds	r3, #19
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039ea:	7bfa      	ldrb	r2, [r7, #15]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	440b      	add	r3, r1
 80039f8:	3320      	adds	r3, #32
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039fe:	7bfa      	ldrb	r2, [r7, #15]
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	440b      	add	r3, r1
 8003a0c:	3324      	adds	r3, #36	@ 0x24
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	440b      	add	r3, r1
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	791b      	ldrb	r3, [r3, #4]
 8003a30:	7bfa      	ldrb	r2, [r7, #15]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d3bb      	bcc.n	80039ae <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
 8003a3a:	e044      	b.n	8003ac6 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a3c:	7bfa      	ldrb	r2, [r7, #15]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	440b      	add	r3, r1
 8003a4a:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	440b      	add	r3, r1
 8003a60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a64:	7bfa      	ldrb	r2, [r7, #15]
 8003a66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	440b      	add	r3, r1
 8003a76:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a94:	7bfa      	ldrb	r2, [r7, #15]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	440b      	add	r3, r1
 8003aa2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	791b      	ldrb	r3, [r3, #4]
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d3b5      	bcc.n	8003a3c <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ada:	f003 f836 	bl	8006b4a <USB_DevInit>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e00c      	b.n	8003b0a <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f005 fab5 	bl	8009072 <USB_DevDisconnect>

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_PCD_Start+0x16>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e016      	b.n	8003b56 <HAL_PCD_Start+0x44>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f002 ffcc 	bl	8006ad2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f007 faca 	bl	800b0d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f005 fa89 	bl	800905e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b088      	sub	sp, #32
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f005 fa8b 	bl	8009086 <USB_ReadInterrupts>
 8003b70:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fb1a 	bl	80041b6 <PCD_EP_ISR_Handler>

    return;
 8003b82:	e119      	b.n	8003db8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d013      	beq.n	8003bb6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba0:	b292      	uxth	r2, r2
 8003ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f007 f89d 	bl	800ace6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003bac:	2100      	movs	r1, #0
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f905 	bl	8003dbe <HAL_PCD_SetAddress>

    return;
 8003bb4:	e100      	b.n	8003db8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003bd8:	e0ee      	b.n	8003db8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00c      	beq.n	8003bfe <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003bfc:	e0dc      	b.n	8003db8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d027      	beq.n	8003c58 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0204 	bic.w	r2, r2, #4
 8003c1a:	b292      	uxth	r2, r2
 8003c1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0208 	bic.w	r2, r2, #8
 8003c32:	b292      	uxth	r2, r2
 8003c34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f007 f88d 	bl	800ad58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c50:	b292      	uxth	r2, r2
 8003c52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003c56:	e0af      	b.n	8003db8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8083 	beq.w	8003d6a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003c64:	2300      	movs	r3, #0
 8003c66:	77fb      	strb	r3, [r7, #31]
 8003c68:	e010      	b.n	8003c8c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	7ffb      	ldrb	r3, [r7, #31]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	441a      	add	r2, r3
 8003c76:	7ffb      	ldrb	r3, [r7, #31]
 8003c78:	8812      	ldrh	r2, [r2, #0]
 8003c7a:	b292      	uxth	r2, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	3320      	adds	r3, #32
 8003c80:	443b      	add	r3, r7
 8003c82:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003c86:	7ffb      	ldrb	r3, [r7, #31]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	7ffb      	ldrb	r3, [r7, #31]
 8003c8e:	2b07      	cmp	r3, #7
 8003c90:	d9eb      	bls.n	8003c6a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 0201 	orr.w	r2, r2, #1
 8003ca4:	b292      	uxth	r2, r2
 8003ca6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	b292      	uxth	r2, r2
 8003cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003cc2:	bf00      	nop
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f6      	beq.n	8003cc4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce8:	b292      	uxth	r2, r2
 8003cea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	77fb      	strb	r3, [r7, #31]
 8003cf2:	e00f      	b.n	8003d14 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003cf4:	7ffb      	ldrb	r3, [r7, #31]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	7ffa      	ldrb	r2, [r7, #31]
 8003cfe:	0092      	lsls	r2, r2, #2
 8003d00:	440a      	add	r2, r1
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	3320      	adds	r3, #32
 8003d06:	443b      	add	r3, r7
 8003d08:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003d0c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003d0e:	7ffb      	ldrb	r3, [r7, #31]
 8003d10:	3301      	adds	r3, #1
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	7ffb      	ldrb	r3, [r7, #31]
 8003d16:	2b07      	cmp	r3, #7
 8003d18:	d9ec      	bls.n	8003cf4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0208 	orr.w	r2, r2, #8
 8003d2c:	b292      	uxth	r2, r2
 8003d2e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d44:	b292      	uxth	r2, r2
 8003d46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0204 	orr.w	r2, r2, #4
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f006 ffde 	bl	800ad24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d68:	e026      	b.n	8003db8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00f      	beq.n	8003d94 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d86:	b292      	uxth	r2, r2
 8003d88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f006 ff9c 	bl	800acca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d92:	e011      	b.n	8003db8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003db0:	b292      	uxth	r2, r2
 8003db2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003db6:	bf00      	nop
  }
}
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_PCD_SetAddress+0x1a>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e012      	b.n	8003dfe <HAL_PCD_SetAddress+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	4611      	mov	r1, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f005 f922 	bl	8009038 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	4608      	mov	r0, r1
 8003e10:	4611      	mov	r1, r2
 8003e12:	461a      	mov	r2, r3
 8003e14:	4603      	mov	r3, r0
 8003e16:	70fb      	strb	r3, [r7, #3]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	803b      	strh	r3, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	da0e      	bge.n	8003e4a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	f003 0207 	and.w	r2, r3, #7
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	3310      	adds	r3, #16
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	705a      	strb	r2, [r3, #1]
 8003e48:	e00e      	b.n	8003e68 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	f003 0207 	and.w	r2, r3, #7
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	4413      	add	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e74:	883a      	ldrh	r2, [r7, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	78ba      	ldrb	r2, [r7, #2]
 8003e7e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e80:	78bb      	ldrb	r3, [r7, #2]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d102      	bne.n	8003e8c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d101      	bne.n	8003e9a <HAL_PCD_EP_Open+0x94>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e00e      	b.n	8003eb8 <HAL_PCD_EP_Open+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68f9      	ldr	r1, [r7, #12]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f002 fe6b 	bl	8006b84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003eb6:	7afb      	ldrb	r3, [r7, #11]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ecc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	da0e      	bge.n	8003ef2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	f003 0207 	and.w	r2, r3, #7
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	3310      	adds	r3, #16
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	705a      	strb	r2, [r3, #1]
 8003ef0:	e00e      	b.n	8003f10 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ef2:	78fb      	ldrb	r3, [r7, #3]
 8003ef4:	f003 0207 	and.w	r2, r3, #7
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4413      	add	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_PCD_EP_Close+0x6a>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e00e      	b.n	8003f48 <HAL_PCD_EP_Close+0x88>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f003 f9e3 	bl	8007304 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	607a      	str	r2, [r7, #4]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f60:	7afb      	ldrb	r3, [r7, #11]
 8003f62:	f003 0207 	and.w	r2, r3, #7
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4413      	add	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2200      	movs	r2, #0
 8003f88:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f90:	7afb      	ldrb	r3, [r7, #11]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6979      	ldr	r1, [r7, #20]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f003 fb9a 	bl	80076dc <USB_EPStartXfer>

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	f003 0207 	and.w	r2, r3, #7
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	440b      	add	r3, r1
 8003fd0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003fd4:	681b      	ldr	r3, [r3, #0]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	460b      	mov	r3, r1
 8003fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff0:	7afb      	ldrb	r3, [r7, #11]
 8003ff2:	f003 0207 	and.w	r2, r3, #7
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	3310      	adds	r3, #16
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2200      	movs	r2, #0
 8004024:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2201      	movs	r2, #1
 800402a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800402c:	7afb      	ldrb	r3, [r7, #11]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	b2da      	uxtb	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6979      	ldr	r1, [r7, #20]
 800403e:	4618      	mov	r0, r3
 8004040:	f003 fb4c 	bl	80076dc <USB_EPStartXfer>

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	460b      	mov	r3, r1
 8004058:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	7912      	ldrb	r2, [r2, #4]
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e04c      	b.n	8004106 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800406c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004070:	2b00      	cmp	r3, #0
 8004072:	da0e      	bge.n	8004092 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 0207 	and.w	r2, r3, #7
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	3310      	adds	r3, #16
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	4413      	add	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	705a      	strb	r2, [r3, #1]
 8004090:	e00c      	b.n	80040ac <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004092:	78fa      	ldrb	r2, [r7, #3]
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4413      	add	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_PCD_EP_SetStall+0x7e>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e01c      	b.n	8004106 <HAL_PCD_EP_SetStall+0xb8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68f9      	ldr	r1, [r7, #12]
 80040da:	4618      	mov	r0, r3
 80040dc:	f004 feaf 	bl	8008e3e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d108      	bne.n	80040fc <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f004 ffd4 	bl	80090a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	7912      	ldrb	r2, [r2, #4]
 8004124:	4293      	cmp	r3, r2
 8004126:	d901      	bls.n	800412c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e040      	b.n	80041ae <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800412c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004130:	2b00      	cmp	r3, #0
 8004132:	da0e      	bge.n	8004152 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	f003 0207 	and.w	r2, r3, #7
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	3310      	adds	r3, #16
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	705a      	strb	r2, [r3, #1]
 8004150:	e00e      	b.n	8004170 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	f003 0207 	and.w	r2, r3, #7
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	4413      	add	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_PCD_EP_ClrStall+0x82>
 800418c:	2302      	movs	r3, #2
 800418e:	e00e      	b.n	80041ae <HAL_PCD_EP_ClrStall+0xa0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68f9      	ldr	r1, [r7, #12]
 800419e:	4618      	mov	r0, r3
 80041a0:	f004 fe9d 	bl	8008ede <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b096      	sub	sp, #88	@ 0x58
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041be:	e3bb      	b.n	8004938 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80041cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80041da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f040 8175 	bne.w	80044ce <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80041e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d14e      	bne.n	800428e <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80041fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004200:	81fb      	strh	r3, [r7, #14]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	89fb      	ldrh	r3, [r7, #14]
 8004208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800420c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004210:	b29b      	uxth	r3, r3
 8004212:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3310      	adds	r3, #16
 8004218:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004222:	b29b      	uxth	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	3302      	adds	r3, #2
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004244:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	441a      	add	r2, r3
 8004250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004252:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004254:	2100      	movs	r1, #0
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f006 fd1d 	bl	800ac96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7b5b      	ldrb	r3, [r3, #13]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8368 	beq.w	8004938 <PCD_EP_ISR_Handler+0x782>
 8004268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f040 8363 	bne.w	8004938 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	7b5b      	ldrb	r3, [r3, #13]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800427c:	b2da      	uxtb	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	735a      	strb	r2, [r3, #13]
 800428c:	e354      	b.n	8004938 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004294:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80042a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80042a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d034      	beq.n	8004316 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	3306      	adds	r3, #6
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80042e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80042e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f004 ff2a 	bl	8009144 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80042fc:	4013      	ands	r3, r2
 80042fe:	823b      	strh	r3, [r7, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	8a3a      	ldrh	r2, [r7, #16]
 8004306:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800430a:	b292      	uxth	r2, r2
 800430c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f006 fc94 	bl	800ac3c <HAL_PCD_SetupStageCallback>
 8004314:	e310      	b.n	8004938 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004316:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800431a:	2b00      	cmp	r3, #0
 800431c:	f280 830c 	bge.w	8004938 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29a      	uxth	r2, r3
 8004328:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800432c:	4013      	ands	r3, r2
 800432e:	83fb      	strh	r3, [r7, #30]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	8bfa      	ldrh	r2, [r7, #30]
 8004336:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800433a:	b292      	uxth	r2, r2
 800433c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004346:	b29b      	uxth	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4413      	add	r3, r2
 8004352:	3306      	adds	r3, #6
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004368:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800436a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d019      	beq.n	80043a6 <PCD_EP_ISR_Handler+0x1f0>
 8004372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d015      	beq.n	80043a6 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004380:	6959      	ldr	r1, [r3, #20]
 8004382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004384:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004388:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800438a:	b29b      	uxth	r3, r3
 800438c:	f004 feda 	bl	8009144 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	441a      	add	r2, r3
 800439a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800439c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800439e:	2100      	movs	r1, #0
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f006 fc5d 	bl	800ac60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80043b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f040 82bd 	bne.w	8004938 <PCD_EP_ISR_Handler+0x782>
 80043be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043c2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80043c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80043ca:	f000 82b5 	beq.w	8004938 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043dc:	b29b      	uxth	r3, r3
 80043de:	461a      	mov	r2, r3
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	4413      	add	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	801a      	strh	r2, [r3, #0]
 80043fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b3e      	cmp	r3, #62	@ 0x3e
 8004404:	d91d      	bls.n	8004442 <PCD_EP_ISR_Handler+0x28c>
 8004406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
 800440e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <PCD_EP_ISR_Handler+0x26a>
 800441a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800441c:	3b01      	subs	r3, #1
 800441e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29a      	uxth	r2, r3
 8004426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004428:	b29b      	uxth	r3, r3
 800442a:	029b      	lsls	r3, r3, #10
 800442c:	b29b      	uxth	r3, r3
 800442e:	4313      	orrs	r3, r2
 8004430:	b29b      	uxth	r3, r3
 8004432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443a:	b29a      	uxth	r2, r3
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	e026      	b.n	8004490 <PCD_EP_ISR_Handler+0x2da>
 8004442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <PCD_EP_ISR_Handler+0x2aa>
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004458:	b29a      	uxth	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	e017      	b.n	8004490 <PCD_EP_ISR_Handler+0x2da>
 8004460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	647b      	str	r3, [r7, #68]	@ 0x44
 8004468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <PCD_EP_ISR_Handler+0x2c4>
 8004474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004476:	3301      	adds	r3, #1
 8004478:	647b      	str	r3, [r7, #68]	@ 0x44
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29a      	uxth	r2, r3
 8004480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004482:	b29b      	uxth	r3, r3
 8004484:	029b      	lsls	r3, r3, #10
 8004486:	b29b      	uxth	r3, r3
 8004488:	4313      	orrs	r3, r2
 800448a:	b29a      	uxth	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800449c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a0:	827b      	strh	r3, [r7, #18]
 80044a2:	8a7b      	ldrh	r3, [r7, #18]
 80044a4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80044a8:	827b      	strh	r3, [r7, #18]
 80044aa:	8a7b      	ldrh	r3, [r7, #18]
 80044ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044b0:	827b      	strh	r3, [r7, #18]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	8a7b      	ldrh	r3, [r7, #18]
 80044b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	8013      	strh	r3, [r2, #0]
 80044cc:	e234      	b.n	8004938 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044e2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f280 80fc 	bge.w	80046e4 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004502:	4013      	ands	r3, r2
 8004504:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800451a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800451e:	b292      	uxth	r2, r2
 8004520:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004522:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4413      	add	r3, r2
 8004536:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800453a:	7b1b      	ldrb	r3, [r3, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d125      	bne.n	800458c <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004548:	b29b      	uxth	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4413      	add	r3, r2
 8004554:	3306      	adds	r3, #6
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004568:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800456c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8092 	beq.w	800469a <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457c:	6959      	ldr	r1, [r3, #20]
 800457e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004580:	88da      	ldrh	r2, [r3, #6]
 8004582:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004586:	f004 fddd 	bl	8009144 <USB_ReadPMA>
 800458a:	e086      	b.n	800469a <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800458c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800458e:	78db      	ldrb	r3, [r3, #3]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d10a      	bne.n	80045aa <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004594:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004598:	461a      	mov	r2, r3
 800459a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f9d9 	bl	8004954 <HAL_PCD_EP_DB_Receive>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80045a8:	e077      	b.n	800469a <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	461a      	mov	r2, r3
 80045ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	441a      	add	r2, r3
 80045d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80045da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d024      	beq.n	8004652 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004610:	b29b      	uxth	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	3302      	adds	r3, #2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004630:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004634:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004638:	2b00      	cmp	r3, #0
 800463a:	d02e      	beq.n	800469a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004642:	6959      	ldr	r1, [r3, #20]
 8004644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004646:	891a      	ldrh	r2, [r3, #8]
 8004648:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800464c:	f004 fd7a 	bl	8009144 <USB_ReadPMA>
 8004650:	e023      	b.n	800469a <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800465a:	b29b      	uxth	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4413      	add	r3, r2
 8004666:	3306      	adds	r3, #6
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800467a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800467e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800468c:	6959      	ldr	r1, [r3, #20]
 800468e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004690:	895a      	ldrh	r2, [r3, #10]
 8004692:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004696:	f004 fd55 	bl	8009144 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800469a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80046a2:	441a      	add	r2, r3
 80046a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80046a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80046b0:	441a      	add	r2, r3
 80046b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80046b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <PCD_EP_ISR_Handler+0x514>
 80046be:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80046c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d206      	bcs.n	80046d8 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80046ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f006 fac5 	bl	800ac60 <HAL_PCD_DataOutStageCallback>
 80046d6:	e005      	b.n	80046e4 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046de:	4618      	mov	r0, r3
 80046e0:	f002 fffc 	bl	80076dc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80046e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80046e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8123 	beq.w	8004938 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80046f2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	3310      	adds	r3, #16
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4413      	add	r3, r2
 8004704:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b29b      	uxth	r3, r3
 8004718:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800471c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004720:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800473a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473e:	b29b      	uxth	r3, r3
 8004740:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004744:	78db      	ldrb	r3, [r3, #3]
 8004746:	2b01      	cmp	r3, #1
 8004748:	f040 80a2 	bne.w	8004890 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800474c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800474e:	2200      	movs	r2, #0
 8004750:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004754:	7b1b      	ldrb	r3, [r3, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8093 	beq.w	8004882 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800475c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d046      	beq.n	80047f6 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800476a:	785b      	ldrb	r3, [r3, #1]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d126      	bne.n	80047be <PCD_EP_ISR_Handler+0x608>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004784:	4413      	add	r3, r2
 8004786:	627b      	str	r3, [r7, #36]	@ 0x24
 8004788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	011a      	lsls	r2, r3, #4
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	4413      	add	r3, r2
 8004792:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	b29b      	uxth	r3, r3
 800479e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	801a      	strh	r2, [r3, #0]
 80047bc:	e061      	b.n	8004882 <PCD_EP_ISR_Handler+0x6cc>
 80047be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d15d      	bne.n	8004882 <PCD_EP_ISR_Handler+0x6cc>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	461a      	mov	r2, r3
 80047d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047da:	4413      	add	r3, r2
 80047dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	011a      	lsls	r2, r3, #4
 80047e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e6:	4413      	add	r3, r2
 80047e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f0:	2200      	movs	r2, #0
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	e045      	b.n	8004882 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047fe:	785b      	ldrb	r3, [r3, #1]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d126      	bne.n	8004852 <PCD_EP_ISR_Handler+0x69c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	637b      	str	r3, [r7, #52]	@ 0x34
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004812:	b29b      	uxth	r3, r3
 8004814:	461a      	mov	r2, r3
 8004816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004818:	4413      	add	r3, r2
 800481a:	637b      	str	r3, [r7, #52]	@ 0x34
 800481c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	011a      	lsls	r2, r3, #4
 8004822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004824:	4413      	add	r3, r2
 8004826:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800482a:	633b      	str	r3, [r7, #48]	@ 0x30
 800482c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004836:	b29a      	uxth	r2, r3
 8004838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800484a:	b29a      	uxth	r2, r3
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	e017      	b.n	8004882 <PCD_EP_ISR_Handler+0x6cc>
 8004852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004854:	785b      	ldrb	r3, [r3, #1]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d113      	bne.n	8004882 <PCD_EP_ISR_Handler+0x6cc>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004862:	b29b      	uxth	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004868:	4413      	add	r3, r2
 800486a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800486c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	011a      	lsls	r2, r3, #4
 8004872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004874:	4413      	add	r3, r2
 8004876:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800487a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800487c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487e:	2200      	movs	r2, #0
 8004880:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	4619      	mov	r1, r3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f006 fa04 	bl	800ac96 <HAL_PCD_DataInStageCallback>
 800488e:	e053      	b.n	8004938 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004890:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d146      	bne.n	800492a <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	4413      	add	r3, r2
 80048b0:	3302      	adds	r3, #2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048c4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80048c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d907      	bls.n	80048e4 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80048d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048dc:	1ad2      	subs	r2, r2, r3
 80048de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e0:	619a      	str	r2, [r3, #24]
 80048e2:	e002      	b.n	80048ea <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80048e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e6:	2200      	movs	r2, #0
 80048e8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80048ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	4619      	mov	r1, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f006 f9cc 	bl	800ac96 <HAL_PCD_DataInStageCallback>
 80048fe:	e01b      	b.n	8004938 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004902:	695a      	ldr	r2, [r3, #20]
 8004904:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004908:	441a      	add	r2, r3
 800490a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800490c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800490e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004910:	69da      	ldr	r2, [r3, #28]
 8004912:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004916:	441a      	add	r2, r3
 8004918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800491a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004922:	4618      	mov	r0, r3
 8004924:	f002 feda 	bl	80076dc <USB_EPStartXfer>
 8004928:	e006      	b.n	8004938 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800492a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800492e:	461a      	mov	r2, r3
 8004930:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f91b 	bl	8004b6e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004940:	b29b      	uxth	r3, r3
 8004942:	b21b      	sxth	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	f6ff ac3b 	blt.w	80041c0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3758      	adds	r7, #88	@ 0x58
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	4613      	mov	r3, r2
 8004960:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d07e      	beq.n	8004a6a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4413      	add	r3, r2
 8004980:	3302      	adds	r3, #2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004994:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	8b7b      	ldrh	r3, [r7, #26]
 800499c:	429a      	cmp	r2, r3
 800499e:	d306      	bcc.n	80049ae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	699a      	ldr	r2, [r3, #24]
 80049a4:	8b7b      	ldrh	r3, [r7, #26]
 80049a6:	1ad2      	subs	r2, r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	619a      	str	r2, [r3, #24]
 80049ac:	e002      	b.n	80049b4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2200      	movs	r2, #0
 80049b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d123      	bne.n	8004a04 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049d6:	833b      	strh	r3, [r7, #24]
 80049d8:	8b3b      	ldrh	r3, [r7, #24]
 80049da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049de:	833b      	strh	r3, [r7, #24]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	441a      	add	r2, r3
 80049ee:	8b3b      	ldrh	r3, [r7, #24]
 80049f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01f      	beq.n	8004a4e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a28:	82fb      	strh	r3, [r7, #22]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	8afb      	ldrh	r3, [r7, #22]
 8004a3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a4e:	8b7b      	ldrh	r3, [r7, #26]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8087 	beq.w	8004b64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6959      	ldr	r1, [r3, #20]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	891a      	ldrh	r2, [r3, #8]
 8004a62:	8b7b      	ldrh	r3, [r7, #26]
 8004a64:	f004 fb6e 	bl	8009144 <USB_ReadPMA>
 8004a68:	e07c      	b.n	8004b64 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	3306      	adds	r3, #6
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a8c:	881b      	ldrh	r3, [r3, #0]
 8004a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	699a      	ldr	r2, [r3, #24]
 8004a98:	8b7b      	ldrh	r3, [r7, #26]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d306      	bcc.n	8004aac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	8b7b      	ldrh	r3, [r7, #26]
 8004aa4:	1ad2      	subs	r2, r2, r3
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	619a      	str	r2, [r3, #24]
 8004aaa:	e002      	b.n	8004ab2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d123      	bne.n	8004b02 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad4:	83fb      	strh	r3, [r7, #30]
 8004ad6:	8bfb      	ldrh	r3, [r7, #30]
 8004ad8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004adc:	83fb      	strh	r3, [r7, #30]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	441a      	add	r2, r3
 8004aec:	8bfb      	ldrh	r3, [r7, #30]
 8004aee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004af2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d11f      	bne.n	8004b4c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b26:	83bb      	strh	r3, [r7, #28]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	441a      	add	r2, r3
 8004b36:	8bbb      	ldrh	r3, [r7, #28]
 8004b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b4c:	8b7b      	ldrh	r3, [r7, #26]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d008      	beq.n	8004b64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6959      	ldr	r1, [r3, #20]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	895a      	ldrh	r2, [r3, #10]
 8004b5e:	8b7b      	ldrh	r3, [r7, #26]
 8004b60:	f004 faf0 	bl	8009144 <USB_ReadPMA>
    }
  }

  return count;
 8004b64:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b0a4      	sub	sp, #144	@ 0x90
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 81dd 	beq.w	8004f42 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bb0:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	699a      	ldr	r2, [r3, #24]
 8004bb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d907      	bls.n	8004bd0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	699a      	ldr	r2, [r3, #24]
 8004bc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bc8:	1ad2      	subs	r2, r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	619a      	str	r2, [r3, #24]
 8004bce:	e002      	b.n	8004bd6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f040 80b9 	bne.w	8004d52 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	785b      	ldrb	r3, [r3, #1]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d126      	bne.n	8004c36 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfc:	4413      	add	r3, r2
 8004bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	011a      	lsls	r2, r3, #4
 8004c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c08:	4413      	add	r3, r2
 8004c0a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1e:	801a      	strh	r2, [r3, #0]
 8004c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	801a      	strh	r2, [r3, #0]
 8004c34:	e01a      	b.n	8004c6c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	785b      	ldrb	r3, [r3, #1]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d116      	bne.n	8004c6c <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c52:	4413      	add	r3, r2
 8004c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	011a      	lsls	r2, r3, #4
 8004c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c5e:	4413      	add	r3, r2
 8004c60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c64:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c68:	2200      	movs	r2, #0
 8004c6a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	785b      	ldrb	r3, [r3, #1]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d126      	bne.n	8004cc8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	011a      	lsls	r2, r3, #4
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	801a      	strh	r2, [r3, #0]
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	801a      	strh	r2, [r3, #0]
 8004cc6:	e017      	b.n	8004cf8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	785b      	ldrb	r3, [r3, #1]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d113      	bne.n	8004cf8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	461a      	mov	r2, r3
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	4413      	add	r3, r2
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	011a      	lsls	r2, r3, #4
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	4413      	add	r3, r2
 8004cec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004cf0:	623b      	str	r3, [r7, #32]
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f005 ffc9 	bl	800ac96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 82fc 	beq.w	8005308 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d2a:	82fb      	strh	r3, [r7, #22]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	8afb      	ldrh	r3, [r7, #22]
 8004d3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	8013      	strh	r3, [r2, #0]
 8004d50:	e2da      	b.n	8005308 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d021      	beq.n	8004da0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d76:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	441a      	add	r2, r3
 8004d88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004d8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	f040 82ae 	bne.w	8005308 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004db4:	441a      	add	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	69da      	ldr	r2, [r3, #28]
 8004dbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004dc2:	441a      	add	r2, r3
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6a1a      	ldr	r2, [r3, #32]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d30b      	bcc.n	8004dec <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004de4:	1ad2      	subs	r2, r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	621a      	str	r2, [r3, #32]
 8004dea:	e017      	b.n	8004e1c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d108      	bne.n	8004e06 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004df4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004df8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004e04:	e00a      	b.n	8004e1c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d165      	bne.n	8004ef0 <HAL_PCD_EP_DB_Transmit+0x382>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e38:	4413      	add	r3, r2
 8004e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	011a      	lsls	r2, r3, #4
 8004e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e44:	4413      	add	r3, r2
 8004e46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e60:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e62:	d91d      	bls.n	8004ea0 <HAL_PCD_EP_DB_Transmit+0x332>
 8004e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <HAL_PCD_EP_DB_Transmit+0x310>
 8004e78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	029b      	lsls	r3, r3, #10
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e044      	b.n	8004f2a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <HAL_PCD_EP_DB_Transmit+0x350>
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	e035      	b.n	8004f2a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	029b      	lsls	r3, r3, #10
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	e01c      	b.n	8004f2a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	785b      	ldrb	r3, [r3, #1]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d118      	bne.n	8004f2a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f0c:	4413      	add	r3, r2
 8004f0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	011a      	lsls	r2, r3, #4
 8004f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f18:	4413      	add	r3, r2
 8004f1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f28:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6818      	ldr	r0, [r3, #0]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	6959      	ldr	r1, [r3, #20]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	891a      	ldrh	r2, [r3, #8]
 8004f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f004 f8bd 	bl	80090ba <USB_WritePMA>
 8004f40:	e1e2      	b.n	8005308 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4413      	add	r3, r2
 8004f56:	3306      	adds	r3, #6
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	6812      	ldr	r2, [r2, #0]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f6a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d307      	bcc.n	8004f8a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f82:	1ad2      	subs	r2, r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	619a      	str	r2, [r3, #24]
 8004f88:	e002      	b.n	8004f90 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f040 80c0 	bne.w	800511a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d126      	bne.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x482>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fb6:	4413      	add	r3, r2
 8004fb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	011a      	lsls	r2, r3, #4
 8004fc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fd8:	801a      	strh	r2, [r3, #0]
 8004fda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fec:	801a      	strh	r2, [r3, #0]
 8004fee:	e01a      	b.n	8005026 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d116      	bne.n	8005026 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005006:	b29b      	uxth	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800500c:	4413      	add	r3, r2
 800500e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	011a      	lsls	r2, r3, #4
 8005016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005018:	4413      	add	r3, r2
 800501a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800501e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005020:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005022:	2200      	movs	r2, #0
 8005024:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	677b      	str	r3, [r7, #116]	@ 0x74
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d12b      	bne.n	800508c <HAL_PCD_EP_DB_Transmit+0x51e>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005042:	b29b      	uxth	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005048:	4413      	add	r3, r2
 800504a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	011a      	lsls	r2, r3, #4
 8005052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005054:	4413      	add	r3, r2
 8005056:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800505a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800505e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800506a:	b29a      	uxth	r2, r3
 800506c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005070:	801a      	strh	r2, [r3, #0]
 8005072:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005082:	b29a      	uxth	r2, r3
 8005084:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	e017      	b.n	80050bc <HAL_PCD_EP_DB_Transmit+0x54e>
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	785b      	ldrb	r3, [r3, #1]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d113      	bne.n	80050bc <HAL_PCD_EP_DB_Transmit+0x54e>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800509c:	b29b      	uxth	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050a2:	4413      	add	r3, r2
 80050a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	011a      	lsls	r2, r3, #4
 80050ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ae:	4413      	add	r3, r2
 80050b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80050b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050b8:	2200      	movs	r2, #0
 80050ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	4619      	mov	r1, r3
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f005 fde7 	bl	800ac96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f040 811a 	bne.w	8005308 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ee:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	441a      	add	r2, r3
 8005100:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800510c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005114:	b29b      	uxth	r3, r3
 8005116:	8013      	strh	r3, [r2, #0]
 8005118:	e0f6      	b.n	8005308 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800511a:	88fb      	ldrh	r3, [r7, #6]
 800511c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d121      	bne.n	8005168 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b29b      	uxth	r3, r3
 8005136:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800513a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800513e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	441a      	add	r2, r3
 8005150:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005154:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005158:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800515c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005164:	b29b      	uxth	r3, r3
 8005166:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800516e:	2b01      	cmp	r3, #1
 8005170:	f040 80ca 	bne.w	8005308 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800517c:	441a      	add	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	69da      	ldr	r2, [r3, #28]
 8005186:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800518a:	441a      	add	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	429a      	cmp	r2, r3
 800519a:	d30b      	bcc.n	80051b4 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051ac:	1ad2      	subs	r2, r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	621a      	str	r2, [r3, #32]
 80051b2:	e017      	b.n	80051e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d108      	bne.n	80051ce <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80051bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80051c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80051cc:	e00a      	b.n	80051e4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2200      	movs	r2, #0
 80051da:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	785b      	ldrb	r3, [r3, #1]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d165      	bne.n	80052be <HAL_PCD_EP_DB_Transmit+0x750>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005200:	b29b      	uxth	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005206:	4413      	add	r3, r2
 8005208:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	011a      	lsls	r2, r3, #4
 8005210:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005212:	4413      	add	r3, r2
 8005214:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005218:	65bb      	str	r3, [r7, #88]	@ 0x58
 800521a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005224:	b29a      	uxth	r2, r3
 8005226:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005228:	801a      	strh	r2, [r3, #0]
 800522a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800522e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005230:	d91d      	bls.n	800526e <HAL_PCD_EP_DB_Transmit+0x700>
 8005232:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800523a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2b00      	cmp	r3, #0
 8005244:	d102      	bne.n	800524c <HAL_PCD_EP_DB_Transmit+0x6de>
 8005246:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005248:	3b01      	subs	r3, #1
 800524a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800524c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29a      	uxth	r2, r3
 8005252:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005254:	b29b      	uxth	r3, r3
 8005256:	029b      	lsls	r3, r3, #10
 8005258:	b29b      	uxth	r3, r3
 800525a:	4313      	orrs	r3, r2
 800525c:	b29b      	uxth	r3, r3
 800525e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005266:	b29a      	uxth	r2, r3
 8005268:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800526a:	801a      	strh	r2, [r3, #0]
 800526c:	e041      	b.n	80052f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800526e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <HAL_PCD_EP_DB_Transmit+0x71e>
 8005276:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005284:	b29a      	uxth	r2, r3
 8005286:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005288:	801a      	strh	r2, [r3, #0]
 800528a:	e032      	b.n	80052f2 <HAL_PCD_EP_DB_Transmit+0x784>
 800528c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005290:	085b      	lsrs	r3, r3, #1
 8005292:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_PCD_EP_DB_Transmit+0x738>
 80052a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052a2:	3301      	adds	r3, #1
 80052a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	029b      	lsls	r3, r3, #10
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	4313      	orrs	r3, r2
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ba:	801a      	strh	r2, [r3, #0]
 80052bc:	e019      	b.n	80052f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	785b      	ldrb	r3, [r3, #1]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d115      	bne.n	80052f2 <HAL_PCD_EP_DB_Transmit+0x784>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d4:	4413      	add	r3, r2
 80052d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	011a      	lsls	r2, r3, #4
 80052de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e0:	4413      	add	r3, r2
 80052e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80052e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80052e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052f0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	6959      	ldr	r1, [r3, #20]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	895a      	ldrh	r2, [r3, #10]
 80052fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005302:	b29b      	uxth	r3, r3
 8005304:	f003 fed9 	bl	80090ba <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	461a      	mov	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800531e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005322:	82bb      	strh	r3, [r7, #20]
 8005324:	8abb      	ldrh	r3, [r7, #20]
 8005326:	f083 0310 	eor.w	r3, r3, #16
 800532a:	82bb      	strh	r3, [r7, #20]
 800532c:	8abb      	ldrh	r3, [r7, #20]
 800532e:	f083 0320 	eor.w	r3, r3, #32
 8005332:	82bb      	strh	r3, [r7, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	441a      	add	r2, r3
 8005342:	8abb      	ldrh	r3, [r7, #20]
 8005344:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005348:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800534c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005354:	b29b      	uxth	r3, r3
 8005356:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3790      	adds	r7, #144	@ 0x90
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005362:	b480      	push	{r7}
 8005364:	b087      	sub	sp, #28
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	817b      	strh	r3, [r7, #10]
 8005370:	4613      	mov	r3, r2
 8005372:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005374:	897b      	ldrh	r3, [r7, #10]
 8005376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00b      	beq.n	8005398 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005380:	897b      	ldrh	r3, [r7, #10]
 8005382:	f003 0207 	and.w	r2, r3, #7
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	3310      	adds	r3, #16
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	e009      	b.n	80053ac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005398:	897a      	ldrh	r2, [r7, #10]
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80053ac:	893b      	ldrh	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d107      	bne.n	80053c2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2200      	movs	r2, #0
 80053b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	80da      	strh	r2, [r3, #6]
 80053c0:	e00b      	b.n	80053da <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2201      	movs	r2, #1
 80053c6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	0c1b      	lsrs	r3, r3, #16
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr
	...

080053e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e272      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8087 	beq.w	8005516 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005408:	4b92      	ldr	r3, [pc, #584]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 030c 	and.w	r3, r3, #12
 8005410:	2b04      	cmp	r3, #4
 8005412:	d00c      	beq.n	800542e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005414:	4b8f      	ldr	r3, [pc, #572]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 030c 	and.w	r3, r3, #12
 800541c:	2b08      	cmp	r3, #8
 800541e:	d112      	bne.n	8005446 <HAL_RCC_OscConfig+0x5e>
 8005420:	4b8c      	ldr	r3, [pc, #560]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800542c:	d10b      	bne.n	8005446 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800542e:	4b89      	ldr	r3, [pc, #548]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d06c      	beq.n	8005514 <HAL_RCC_OscConfig+0x12c>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d168      	bne.n	8005514 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e24c      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800544e:	d106      	bne.n	800545e <HAL_RCC_OscConfig+0x76>
 8005450:	4b80      	ldr	r3, [pc, #512]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a7f      	ldr	r2, [pc, #508]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005456:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	e02e      	b.n	80054bc <HAL_RCC_OscConfig+0xd4>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10c      	bne.n	8005480 <HAL_RCC_OscConfig+0x98>
 8005466:	4b7b      	ldr	r3, [pc, #492]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a7a      	ldr	r2, [pc, #488]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 800546c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	4b78      	ldr	r3, [pc, #480]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a77      	ldr	r2, [pc, #476]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005478:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e01d      	b.n	80054bc <HAL_RCC_OscConfig+0xd4>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005488:	d10c      	bne.n	80054a4 <HAL_RCC_OscConfig+0xbc>
 800548a:	4b72      	ldr	r3, [pc, #456]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a71      	ldr	r2, [pc, #452]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	4b6f      	ldr	r3, [pc, #444]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a6e      	ldr	r2, [pc, #440]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 800549c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	e00b      	b.n	80054bc <HAL_RCC_OscConfig+0xd4>
 80054a4:	4b6b      	ldr	r3, [pc, #428]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a6a      	ldr	r2, [pc, #424]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 80054aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	4b68      	ldr	r3, [pc, #416]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a67      	ldr	r2, [pc, #412]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 80054b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d013      	beq.n	80054ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c4:	f7fc f88a 	bl	80015dc <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054cc:	f7fc f886 	bl	80015dc <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b64      	cmp	r3, #100	@ 0x64
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e200      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054de:	4b5d      	ldr	r3, [pc, #372]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0xe4>
 80054ea:	e014      	b.n	8005516 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ec:	f7fc f876 	bl	80015dc <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054f4:	f7fc f872 	bl	80015dc <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b64      	cmp	r3, #100	@ 0x64
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e1ec      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005506:	4b53      	ldr	r3, [pc, #332]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f0      	bne.n	80054f4 <HAL_RCC_OscConfig+0x10c>
 8005512:	e000      	b.n	8005516 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d063      	beq.n	80055ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005522:	4b4c      	ldr	r3, [pc, #304]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f003 030c 	and.w	r3, r3, #12
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00b      	beq.n	8005546 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800552e:	4b49      	ldr	r3, [pc, #292]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b08      	cmp	r3, #8
 8005538:	d11c      	bne.n	8005574 <HAL_RCC_OscConfig+0x18c>
 800553a:	4b46      	ldr	r3, [pc, #280]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d116      	bne.n	8005574 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005546:	4b43      	ldr	r3, [pc, #268]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d005      	beq.n	800555e <HAL_RCC_OscConfig+0x176>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d001      	beq.n	800555e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e1c0      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800555e:	4b3d      	ldr	r3, [pc, #244]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4939      	ldr	r1, [pc, #228]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 800556e:	4313      	orrs	r3, r2
 8005570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005572:	e03a      	b.n	80055ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d020      	beq.n	80055be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800557c:	4b36      	ldr	r3, [pc, #216]	@ (8005658 <HAL_RCC_OscConfig+0x270>)
 800557e:	2201      	movs	r2, #1
 8005580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005582:	f7fc f82b 	bl	80015dc <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800558a:	f7fc f827 	bl	80015dc <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e1a1      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800559c:	4b2d      	ldr	r3, [pc, #180]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	4927      	ldr	r1, [pc, #156]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	600b      	str	r3, [r1, #0]
 80055bc:	e015      	b.n	80055ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055be:	4b26      	ldr	r3, [pc, #152]	@ (8005658 <HAL_RCC_OscConfig+0x270>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c4:	f7fc f80a 	bl	80015dc <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055cc:	f7fc f806 	bl	80015dc <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e180      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055de:	4b1d      	ldr	r3, [pc, #116]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f0      	bne.n	80055cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d03a      	beq.n	800566c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d019      	beq.n	8005632 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055fe:	4b17      	ldr	r3, [pc, #92]	@ (800565c <HAL_RCC_OscConfig+0x274>)
 8005600:	2201      	movs	r2, #1
 8005602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005604:	f7fb ffea 	bl	80015dc <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800560c:	f7fb ffe6 	bl	80015dc <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e160      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800561e:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <HAL_RCC_OscConfig+0x26c>)
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d0f0      	beq.n	800560c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800562a:	2001      	movs	r0, #1
 800562c:	f000 face 	bl	8005bcc <RCC_Delay>
 8005630:	e01c      	b.n	800566c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005632:	4b0a      	ldr	r3, [pc, #40]	@ (800565c <HAL_RCC_OscConfig+0x274>)
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005638:	f7fb ffd0 	bl	80015dc <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800563e:	e00f      	b.n	8005660 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005640:	f7fb ffcc 	bl	80015dc <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d908      	bls.n	8005660 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e146      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
 8005652:	bf00      	nop
 8005654:	40021000 	.word	0x40021000
 8005658:	42420000 	.word	0x42420000
 800565c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005660:	4b92      	ldr	r3, [pc, #584]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e9      	bne.n	8005640 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 80a6 	beq.w	80057c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800567a:	2300      	movs	r3, #0
 800567c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800567e:	4b8b      	ldr	r3, [pc, #556]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10d      	bne.n	80056a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568a:	4b88      	ldr	r3, [pc, #544]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	4a87      	ldr	r2, [pc, #540]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005694:	61d3      	str	r3, [r2, #28]
 8005696:	4b85      	ldr	r3, [pc, #532]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569e:	60bb      	str	r3, [r7, #8]
 80056a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a6:	4b82      	ldr	r3, [pc, #520]	@ (80058b0 <HAL_RCC_OscConfig+0x4c8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d118      	bne.n	80056e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b2:	4b7f      	ldr	r3, [pc, #508]	@ (80058b0 <HAL_RCC_OscConfig+0x4c8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a7e      	ldr	r2, [pc, #504]	@ (80058b0 <HAL_RCC_OscConfig+0x4c8>)
 80056b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056be:	f7fb ff8d 	bl	80015dc <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c6:	f7fb ff89 	bl	80015dc <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b64      	cmp	r3, #100	@ 0x64
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e103      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d8:	4b75      	ldr	r3, [pc, #468]	@ (80058b0 <HAL_RCC_OscConfig+0x4c8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d106      	bne.n	80056fa <HAL_RCC_OscConfig+0x312>
 80056ec:	4b6f      	ldr	r3, [pc, #444]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	4a6e      	ldr	r2, [pc, #440]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6213      	str	r3, [r2, #32]
 80056f8:	e02d      	b.n	8005756 <HAL_RCC_OscConfig+0x36e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10c      	bne.n	800571c <HAL_RCC_OscConfig+0x334>
 8005702:	4b6a      	ldr	r3, [pc, #424]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	4a69      	ldr	r2, [pc, #420]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	6213      	str	r3, [r2, #32]
 800570e:	4b67      	ldr	r3, [pc, #412]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	4a66      	ldr	r2, [pc, #408]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005714:	f023 0304 	bic.w	r3, r3, #4
 8005718:	6213      	str	r3, [r2, #32]
 800571a:	e01c      	b.n	8005756 <HAL_RCC_OscConfig+0x36e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	2b05      	cmp	r3, #5
 8005722:	d10c      	bne.n	800573e <HAL_RCC_OscConfig+0x356>
 8005724:	4b61      	ldr	r3, [pc, #388]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	4a60      	ldr	r2, [pc, #384]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 800572a:	f043 0304 	orr.w	r3, r3, #4
 800572e:	6213      	str	r3, [r2, #32]
 8005730:	4b5e      	ldr	r3, [pc, #376]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	4a5d      	ldr	r2, [pc, #372]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005736:	f043 0301 	orr.w	r3, r3, #1
 800573a:	6213      	str	r3, [r2, #32]
 800573c:	e00b      	b.n	8005756 <HAL_RCC_OscConfig+0x36e>
 800573e:	4b5b      	ldr	r3, [pc, #364]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	4a5a      	ldr	r2, [pc, #360]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005744:	f023 0301 	bic.w	r3, r3, #1
 8005748:	6213      	str	r3, [r2, #32]
 800574a:	4b58      	ldr	r3, [pc, #352]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	4a57      	ldr	r2, [pc, #348]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005750:	f023 0304 	bic.w	r3, r3, #4
 8005754:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d015      	beq.n	800578a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800575e:	f7fb ff3d 	bl	80015dc <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005764:	e00a      	b.n	800577c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005766:	f7fb ff39 	bl	80015dc <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e0b1      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800577c:	4b4b      	ldr	r3, [pc, #300]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d0ee      	beq.n	8005766 <HAL_RCC_OscConfig+0x37e>
 8005788:	e014      	b.n	80057b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578a:	f7fb ff27 	bl	80015dc <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005790:	e00a      	b.n	80057a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005792:	f7fb ff23 	bl	80015dc <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e09b      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057a8:	4b40      	ldr	r3, [pc, #256]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1ee      	bne.n	8005792 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d105      	bne.n	80057c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ba:	4b3c      	ldr	r3, [pc, #240]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	4a3b      	ldr	r2, [pc, #236]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 80057c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 8087 	beq.w	80058de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057d0:	4b36      	ldr	r3, [pc, #216]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f003 030c 	and.w	r3, r3, #12
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d061      	beq.n	80058a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d146      	bne.n	8005872 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e4:	4b33      	ldr	r3, [pc, #204]	@ (80058b4 <HAL_RCC_OscConfig+0x4cc>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ea:	f7fb fef7 	bl	80015dc <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f2:	f7fb fef3 	bl	80015dc <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e06d      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005804:	4b29      	ldr	r3, [pc, #164]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f0      	bne.n	80057f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005818:	d108      	bne.n	800582c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800581a:	4b24      	ldr	r3, [pc, #144]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	4921      	ldr	r1, [pc, #132]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005828:	4313      	orrs	r3, r2
 800582a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800582c:	4b1f      	ldr	r3, [pc, #124]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a19      	ldr	r1, [r3, #32]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	430b      	orrs	r3, r1
 800583e:	491b      	ldr	r1, [pc, #108]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005840:	4313      	orrs	r3, r2
 8005842:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005844:	4b1b      	ldr	r3, [pc, #108]	@ (80058b4 <HAL_RCC_OscConfig+0x4cc>)
 8005846:	2201      	movs	r2, #1
 8005848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584a:	f7fb fec7 	bl	80015dc <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005852:	f7fb fec3 	bl	80015dc <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e03d      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005864:	4b11      	ldr	r3, [pc, #68]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f0      	beq.n	8005852 <HAL_RCC_OscConfig+0x46a>
 8005870:	e035      	b.n	80058de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005872:	4b10      	ldr	r3, [pc, #64]	@ (80058b4 <HAL_RCC_OscConfig+0x4cc>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005878:	f7fb feb0 	bl	80015dc <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005880:	f7fb feac 	bl	80015dc <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e026      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005892:	4b06      	ldr	r3, [pc, #24]	@ (80058ac <HAL_RCC_OscConfig+0x4c4>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x498>
 800589e:	e01e      	b.n	80058de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d107      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e019      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
 80058ac:	40021000 	.word	0x40021000
 80058b0:	40007000 	.word	0x40007000
 80058b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058b8:	4b0b      	ldr	r3, [pc, #44]	@ (80058e8 <HAL_RCC_OscConfig+0x500>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d106      	bne.n	80058da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d001      	beq.n	80058de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40021000 	.word	0x40021000

080058ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e0d0      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005900:	4b6a      	ldr	r3, [pc, #424]	@ (8005aac <HAL_RCC_ClockConfig+0x1c0>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d910      	bls.n	8005930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590e:	4b67      	ldr	r3, [pc, #412]	@ (8005aac <HAL_RCC_ClockConfig+0x1c0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f023 0207 	bic.w	r2, r3, #7
 8005916:	4965      	ldr	r1, [pc, #404]	@ (8005aac <HAL_RCC_ClockConfig+0x1c0>)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	4313      	orrs	r3, r2
 800591c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800591e:	4b63      	ldr	r3, [pc, #396]	@ (8005aac <HAL_RCC_ClockConfig+0x1c0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d001      	beq.n	8005930 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0b8      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d020      	beq.n	800597e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005948:	4b59      	ldr	r3, [pc, #356]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a58      	ldr	r2, [pc, #352]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800594e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005952:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005960:	4b53      	ldr	r3, [pc, #332]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	4a52      	ldr	r2, [pc, #328]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8005966:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800596a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800596c:	4b50      	ldr	r3, [pc, #320]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	494d      	ldr	r1, [pc, #308]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 800597a:	4313      	orrs	r3, r2
 800597c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d040      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d107      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005992:	4b47      	ldr	r3, [pc, #284]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d115      	bne.n	80059ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e07f      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d107      	bne.n	80059ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059aa:	4b41      	ldr	r3, [pc, #260]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e073      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ba:	4b3d      	ldr	r3, [pc, #244]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e06b      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ca:	4b39      	ldr	r3, [pc, #228]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f023 0203 	bic.w	r2, r3, #3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	4936      	ldr	r1, [pc, #216]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059dc:	f7fb fdfe 	bl	80015dc <HAL_GetTick>
 80059e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e4:	f7fb fdfa 	bl	80015dc <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e053      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fa:	4b2d      	ldr	r3, [pc, #180]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 020c 	and.w	r2, r3, #12
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d1eb      	bne.n	80059e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a0c:	4b27      	ldr	r3, [pc, #156]	@ (8005aac <HAL_RCC_ClockConfig+0x1c0>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d210      	bcs.n	8005a3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1a:	4b24      	ldr	r3, [pc, #144]	@ (8005aac <HAL_RCC_ClockConfig+0x1c0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f023 0207 	bic.w	r2, r3, #7
 8005a22:	4922      	ldr	r1, [pc, #136]	@ (8005aac <HAL_RCC_ClockConfig+0x1c0>)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a2a:	4b20      	ldr	r3, [pc, #128]	@ (8005aac <HAL_RCC_ClockConfig+0x1c0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d001      	beq.n	8005a3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e032      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d008      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a48:	4b19      	ldr	r3, [pc, #100]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	4916      	ldr	r1, [pc, #88]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a66:	4b12      	ldr	r3, [pc, #72]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	490e      	ldr	r1, [pc, #56]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a7a:	f000 f821 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	490a      	ldr	r1, [pc, #40]	@ (8005ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8005a8c:	5ccb      	ldrb	r3, [r1, r3]
 8005a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a92:	4a09      	ldr	r2, [pc, #36]	@ (8005ab8 <HAL_RCC_ClockConfig+0x1cc>)
 8005a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a96:	4b09      	ldr	r3, [pc, #36]	@ (8005abc <HAL_RCC_ClockConfig+0x1d0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fb fd5c 	bl	8001558 <HAL_InitTick>

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40022000 	.word	0x40022000
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	0800bca0 	.word	0x0800bca0
 8005ab8:	20000000 	.word	0x20000000
 8005abc:	20000004 	.word	0x20000004

08005ac0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	2300      	movs	r3, #0
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ada:	4b1e      	ldr	r3, [pc, #120]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x94>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 030c 	and.w	r3, r3, #12
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d002      	beq.n	8005af0 <HAL_RCC_GetSysClockFreq+0x30>
 8005aea:	2b08      	cmp	r3, #8
 8005aec:	d003      	beq.n	8005af6 <HAL_RCC_GetSysClockFreq+0x36>
 8005aee:	e027      	b.n	8005b40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005af0:	4b19      	ldr	r3, [pc, #100]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x98>)
 8005af2:	613b      	str	r3, [r7, #16]
      break;
 8005af4:	e027      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	0c9b      	lsrs	r3, r3, #18
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	4a17      	ldr	r2, [pc, #92]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b00:	5cd3      	ldrb	r3, [r2, r3]
 8005b02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d010      	beq.n	8005b30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b0e:	4b11      	ldr	r3, [pc, #68]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x94>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	0c5b      	lsrs	r3, r3, #17
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	4a11      	ldr	r2, [pc, #68]	@ (8005b60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b1a:	5cd3      	ldrb	r3, [r2, r3]
 8005b1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a0d      	ldr	r2, [pc, #52]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b22:	fb03 f202 	mul.w	r2, r3, r2
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	e004      	b.n	8005b3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a0c      	ldr	r2, [pc, #48]	@ (8005b64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b34:	fb02 f303 	mul.w	r3, r2, r3
 8005b38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	613b      	str	r3, [r7, #16]
      break;
 8005b3e:	e002      	b.n	8005b46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b40:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x98>)
 8005b42:	613b      	str	r3, [r7, #16]
      break;
 8005b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b46:	693b      	ldr	r3, [r7, #16]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bc80      	pop	{r7}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40021000 	.word	0x40021000
 8005b58:	007a1200 	.word	0x007a1200
 8005b5c:	0800bcb8 	.word	0x0800bcb8
 8005b60:	0800bcc8 	.word	0x0800bcc8
 8005b64:	003d0900 	.word	0x003d0900

08005b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b6c:	4b02      	ldr	r3, [pc, #8]	@ (8005b78 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr
 8005b78:	20000000 	.word	0x20000000

08005b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b80:	f7ff fff2 	bl	8005b68 <HAL_RCC_GetHCLKFreq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4b05      	ldr	r3, [pc, #20]	@ (8005b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	0a1b      	lsrs	r3, r3, #8
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	4903      	ldr	r1, [pc, #12]	@ (8005ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b92:	5ccb      	ldrb	r3, [r1, r3]
 8005b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	0800bcb0 	.word	0x0800bcb0

08005ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ba8:	f7ff ffde 	bl	8005b68 <HAL_RCC_GetHCLKFreq>
 8005bac:	4602      	mov	r2, r0
 8005bae:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	0adb      	lsrs	r3, r3, #11
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	4903      	ldr	r1, [pc, #12]	@ (8005bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bba:	5ccb      	ldrb	r3, [r1, r3]
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	0800bcb0 	.word	0x0800bcb0

08005bcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c00 <RCC_Delay+0x34>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8005c04 <RCC_Delay+0x38>)
 8005bda:	fba2 2303 	umull	r2, r3, r2, r3
 8005bde:	0a5b      	lsrs	r3, r3, #9
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	fb02 f303 	mul.w	r3, r2, r3
 8005be6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005be8:	bf00      	nop
  }
  while (Delay --);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1e5a      	subs	r2, r3, #1
 8005bee:	60fa      	str	r2, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f9      	bne.n	8005be8 <RCC_Delay+0x1c>
}
 8005bf4:	bf00      	nop
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr
 8005c00:	20000000 	.word	0x20000000
 8005c04:	10624dd3 	.word	0x10624dd3

08005c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d07d      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005c24:	2300      	movs	r3, #0
 8005c26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c28:	4b4f      	ldr	r3, [pc, #316]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10d      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c34:	4b4c      	ldr	r3, [pc, #304]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	4a4b      	ldr	r2, [pc, #300]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c3e:	61d3      	str	r3, [r2, #28]
 8005c40:	4b49      	ldr	r3, [pc, #292]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c50:	4b46      	ldr	r3, [pc, #280]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d118      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c5c:	4b43      	ldr	r3, [pc, #268]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a42      	ldr	r2, [pc, #264]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c68:	f7fb fcb8 	bl	80015dc <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6e:	e008      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c70:	f7fb fcb4 	bl	80015dc <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b64      	cmp	r3, #100	@ 0x64
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e06d      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c82:	4b3a      	ldr	r3, [pc, #232]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0f0      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c8e:	4b36      	ldr	r3, [pc, #216]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d02e      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d027      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cac:	4b2e      	ldr	r3, [pc, #184]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cb8:	2201      	movs	r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005cc2:	4a29      	ldr	r2, [pc, #164]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d014      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd2:	f7fb fc83 	bl	80015dc <HAL_GetTick>
 8005cd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd8:	e00a      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cda:	f7fb fc7f 	bl	80015dc <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e036      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d0ee      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	4917      	ldr	r1, [pc, #92]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d105      	bne.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d14:	4b14      	ldr	r3, [pc, #80]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	4a13      	ldr	r2, [pc, #76]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d1e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	490b      	ldr	r1, [pc, #44]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d4a:	4b07      	ldr	r3, [pc, #28]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	4904      	ldr	r1, [pc, #16]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	40007000 	.word	0x40007000
 8005d70:	42420440 	.word	0x42420440

08005d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e041      	b.n	8005e0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fb fab0 	bl	8001300 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4619      	mov	r1, r3
 8005db2:	4610      	mov	r0, r2
 8005db4:	f000 f992 	bl	80060dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d109      	bne.n	8005e38 <HAL_TIM_PWM_Start+0x24>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	e022      	b.n	8005e7e <HAL_TIM_PWM_Start+0x6a>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d109      	bne.n	8005e52 <HAL_TIM_PWM_Start+0x3e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	bf14      	ite	ne
 8005e4a:	2301      	movne	r3, #1
 8005e4c:	2300      	moveq	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	e015      	b.n	8005e7e <HAL_TIM_PWM_Start+0x6a>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d109      	bne.n	8005e6c <HAL_TIM_PWM_Start+0x58>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	e008      	b.n	8005e7e <HAL_TIM_PWM_Start+0x6a>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	bf14      	ite	ne
 8005e78:	2301      	movne	r3, #1
 8005e7a:	2300      	moveq	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e05e      	b.n	8005f44 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_PWM_Start+0x82>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e94:	e013      	b.n	8005ebe <HAL_TIM_PWM_Start+0xaa>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d104      	bne.n	8005ea6 <HAL_TIM_PWM_Start+0x92>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ea4:	e00b      	b.n	8005ebe <HAL_TIM_PWM_Start+0xaa>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d104      	bne.n	8005eb6 <HAL_TIM_PWM_Start+0xa2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005eb4:	e003      	b.n	8005ebe <HAL_TIM_PWM_Start+0xaa>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fafe 	bl	80064c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8005f4c <HAL_TIM_PWM_Start+0x138>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d107      	bne.n	8005ee6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <HAL_TIM_PWM_Start+0x138>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00e      	beq.n	8005f0e <HAL_TIM_PWM_Start+0xfa>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef8:	d009      	beq.n	8005f0e <HAL_TIM_PWM_Start+0xfa>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a14      	ldr	r2, [pc, #80]	@ (8005f50 <HAL_TIM_PWM_Start+0x13c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d004      	beq.n	8005f0e <HAL_TIM_PWM_Start+0xfa>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a12      	ldr	r2, [pc, #72]	@ (8005f54 <HAL_TIM_PWM_Start+0x140>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d111      	bne.n	8005f32 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b06      	cmp	r3, #6
 8005f1e:	d010      	beq.n	8005f42 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f30:	e007      	b.n	8005f42 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40012c00 	.word	0x40012c00
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800

08005f58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e0ae      	b.n	80060d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b0c      	cmp	r3, #12
 8005f82:	f200 809f 	bhi.w	80060c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f86:	a201      	add	r2, pc, #4	@ (adr r2, 8005f8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8c:	08005fc1 	.word	0x08005fc1
 8005f90:	080060c5 	.word	0x080060c5
 8005f94:	080060c5 	.word	0x080060c5
 8005f98:	080060c5 	.word	0x080060c5
 8005f9c:	08006001 	.word	0x08006001
 8005fa0:	080060c5 	.word	0x080060c5
 8005fa4:	080060c5 	.word	0x080060c5
 8005fa8:	080060c5 	.word	0x080060c5
 8005fac:	08006043 	.word	0x08006043
 8005fb0:	080060c5 	.word	0x080060c5
 8005fb4:	080060c5 	.word	0x080060c5
 8005fb8:	080060c5 	.word	0x080060c5
 8005fbc:	08006083 	.word	0x08006083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 f8f6 	bl	80061b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0208 	orr.w	r2, r2, #8
 8005fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0204 	bic.w	r2, r2, #4
 8005fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6999      	ldr	r1, [r3, #24]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	619a      	str	r2, [r3, #24]
      break;
 8005ffe:	e064      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	4618      	mov	r0, r3
 8006008:	f000 f93c 	bl	8006284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800601a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800602a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6999      	ldr	r1, [r3, #24]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	021a      	lsls	r2, r3, #8
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	619a      	str	r2, [r3, #24]
      break;
 8006040:	e043      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	4618      	mov	r0, r3
 800604a:	f000 f985 	bl	8006358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0208 	orr.w	r2, r2, #8
 800605c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0204 	bic.w	r2, r2, #4
 800606c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69d9      	ldr	r1, [r3, #28]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	61da      	str	r2, [r3, #28]
      break;
 8006080:	e023      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	4618      	mov	r0, r3
 800608a:	f000 f9cf 	bl	800642c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69da      	ldr	r2, [r3, #28]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800609c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69d9      	ldr	r1, [r3, #28]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	021a      	lsls	r2, r3, #8
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	61da      	str	r2, [r3, #28]
      break;
 80060c2:	e002      	b.n	80060ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	75fb      	strb	r3, [r7, #23]
      break;
 80060c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a2f      	ldr	r2, [pc, #188]	@ (80061ac <TIM_Base_SetConfig+0xd0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00b      	beq.n	800610c <TIM_Base_SetConfig+0x30>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fa:	d007      	beq.n	800610c <TIM_Base_SetConfig+0x30>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a2c      	ldr	r2, [pc, #176]	@ (80061b0 <TIM_Base_SetConfig+0xd4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_Base_SetConfig+0x30>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a2b      	ldr	r2, [pc, #172]	@ (80061b4 <TIM_Base_SetConfig+0xd8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d108      	bne.n	800611e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a22      	ldr	r2, [pc, #136]	@ (80061ac <TIM_Base_SetConfig+0xd0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00b      	beq.n	800613e <TIM_Base_SetConfig+0x62>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800612c:	d007      	beq.n	800613e <TIM_Base_SetConfig+0x62>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a1f      	ldr	r2, [pc, #124]	@ (80061b0 <TIM_Base_SetConfig+0xd4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d003      	beq.n	800613e <TIM_Base_SetConfig+0x62>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a1e      	ldr	r2, [pc, #120]	@ (80061b4 <TIM_Base_SetConfig+0xd8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d108      	bne.n	8006150 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a0d      	ldr	r2, [pc, #52]	@ (80061ac <TIM_Base_SetConfig+0xd0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d103      	bne.n	8006184 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d005      	beq.n	80061a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f023 0201 	bic.w	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	611a      	str	r2, [r3, #16]
  }
}
 80061a2:	bf00      	nop
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr
 80061ac:	40012c00 	.word	0x40012c00
 80061b0:	40000400 	.word	0x40000400
 80061b4:	40000800 	.word	0x40000800

080061b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f023 0201 	bic.w	r2, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f023 0302 	bic.w	r3, r3, #2
 8006200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a1c      	ldr	r2, [pc, #112]	@ (8006280 <TIM_OC1_SetConfig+0xc8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d10c      	bne.n	800622e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f023 0308 	bic.w	r3, r3, #8
 800621a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f023 0304 	bic.w	r3, r3, #4
 800622c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a13      	ldr	r2, [pc, #76]	@ (8006280 <TIM_OC1_SetConfig+0xc8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d111      	bne.n	800625a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800623c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40012c00 	.word	0x40012c00

08006284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	f023 0210 	bic.w	r2, r3, #16
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	021b      	lsls	r3, r3, #8
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f023 0320 	bic.w	r3, r3, #32
 80062ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a1d      	ldr	r2, [pc, #116]	@ (8006354 <TIM_OC2_SetConfig+0xd0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d10d      	bne.n	8006300 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a14      	ldr	r2, [pc, #80]	@ (8006354 <TIM_OC2_SetConfig+0xd0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d113      	bne.n	8006330 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800630e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	621a      	str	r2, [r3, #32]
}
 800634a:	bf00      	nop
 800634c:	371c      	adds	r7, #28
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr
 8006354:	40012c00 	.word	0x40012c00

08006358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0303 	bic.w	r3, r3, #3
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006428 <TIM_OC3_SetConfig+0xd0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d10d      	bne.n	80063d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a14      	ldr	r2, [pc, #80]	@ (8006428 <TIM_OC3_SetConfig+0xd0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d113      	bne.n	8006402 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	621a      	str	r2, [r3, #32]
}
 800641c:	bf00      	nop
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40012c00 	.word	0x40012c00

0800642c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800645a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	031b      	lsls	r3, r3, #12
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a0f      	ldr	r2, [pc, #60]	@ (80064c4 <TIM_OC4_SetConfig+0x98>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d109      	bne.n	80064a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	019b      	lsls	r3, r3, #6
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	621a      	str	r2, [r3, #32]
}
 80064ba:	bf00      	nop
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr
 80064c4:	40012c00 	.word	0x40012c00

080064c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2201      	movs	r2, #1
 80064dc:	fa02 f303 	lsl.w	r3, r2, r3
 80064e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a1a      	ldr	r2, [r3, #32]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	43db      	mvns	r3, r3
 80064ea:	401a      	ands	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1a      	ldr	r2, [r3, #32]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006500:	431a      	orrs	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	621a      	str	r2, [r3, #32]
}
 8006506:	bf00      	nop
 8006508:	371c      	adds	r7, #28
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr

08006510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006524:	2302      	movs	r3, #2
 8006526:	e046      	b.n	80065b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800654e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	4313      	orrs	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a16      	ldr	r2, [pc, #88]	@ (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00e      	beq.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006574:	d009      	beq.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a12      	ldr	r2, [pc, #72]	@ (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a10      	ldr	r2, [pc, #64]	@ (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d10c      	bne.n	80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	4313      	orrs	r3, r2
 800659a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bc80      	pop	{r7}
 80065be:	4770      	bx	lr
 80065c0:	40012c00 	.word	0x40012c00
 80065c4:	40000400 	.word	0x40000400
 80065c8:	40000800 	.word	0x40000800

080065cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e03d      	b.n	8006664 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	4313      	orrs	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	bc80      	pop	{r7}
 800666c:	4770      	bx	lr

0800666e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e042      	b.n	8006706 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7fa feaf 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2224      	movs	r2, #36	@ 0x24
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f972 	bl	800699c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691a      	ldr	r2, [r3, #16]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b08a      	sub	sp, #40	@ 0x28
 8006712:	af02      	add	r7, sp, #8
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	603b      	str	r3, [r7, #0]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b20      	cmp	r3, #32
 800672c:	d175      	bne.n	800681a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <HAL_UART_Transmit+0x2c>
 8006734:	88fb      	ldrh	r3, [r7, #6]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e06e      	b.n	800681c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2221      	movs	r2, #33	@ 0x21
 8006748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800674c:	f7fa ff46 	bl	80015dc <HAL_GetTick>
 8006750:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	88fa      	ldrh	r2, [r7, #6]
 8006756:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	88fa      	ldrh	r2, [r7, #6]
 800675c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006766:	d108      	bne.n	800677a <HAL_UART_Transmit+0x6c>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d104      	bne.n	800677a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006770:	2300      	movs	r3, #0
 8006772:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	61bb      	str	r3, [r7, #24]
 8006778:	e003      	b.n	8006782 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006782:	e02e      	b.n	80067e2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	2200      	movs	r2, #0
 800678c:	2180      	movs	r1, #128	@ 0x80
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 f848 	bl	8006824 <UART_WaitOnFlagUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e03a      	b.n	800681c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10b      	bne.n	80067c4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	3302      	adds	r3, #2
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	e007      	b.n	80067d4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	781a      	ldrb	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3301      	adds	r3, #1
 80067d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1cb      	bne.n	8006784 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2200      	movs	r2, #0
 80067f4:	2140      	movs	r1, #64	@ 0x40
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 f814 	bl	8006824 <UART_WaitOnFlagUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e006      	b.n	800681c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	e000      	b.n	800681c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800681a:	2302      	movs	r3, #2
  }
}
 800681c:	4618      	mov	r0, r3
 800681e:	3720      	adds	r7, #32
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	4613      	mov	r3, r2
 8006832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006834:	e03b      	b.n	80068ae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800683c:	d037      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800683e:	f7fa fecd 	bl	80015dc <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	6a3a      	ldr	r2, [r7, #32]
 800684a:	429a      	cmp	r2, r3
 800684c:	d302      	bcc.n	8006854 <UART_WaitOnFlagUntilTimeout+0x30>
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e03a      	b.n	80068ce <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	d023      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0x8a>
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b80      	cmp	r3, #128	@ 0x80
 800686a:	d020      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0x8a>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b40      	cmp	r3, #64	@ 0x40
 8006870:	d01d      	beq.n	80068ae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b08      	cmp	r3, #8
 800687e:	d116      	bne.n	80068ae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f81d 	bl	80068d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2208      	movs	r2, #8
 80068a0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e00f      	b.n	80068ce <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	bf0c      	ite	eq
 80068be:	2301      	moveq	r3, #1
 80068c0:	2300      	movne	r3, #0
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d0b4      	beq.n	8006836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b095      	sub	sp, #84	@ 0x54
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	330c      	adds	r3, #12
 80068e4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	330c      	adds	r3, #12
 80068fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068fe:	643a      	str	r2, [r7, #64]	@ 0x40
 8006900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006904:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800690c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e5      	bne.n	80068de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3314      	adds	r3, #20
 8006918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	61fb      	str	r3, [r7, #28]
   return(result);
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	f023 0301 	bic.w	r3, r3, #1
 8006928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3314      	adds	r3, #20
 8006930:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006934:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e5      	bne.n	8006912 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800694a:	2b01      	cmp	r3, #1
 800694c:	d119      	bne.n	8006982 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	60bb      	str	r3, [r7, #8]
   return(result);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f023 0310 	bic.w	r3, r3, #16
 8006964:	647b      	str	r3, [r7, #68]	@ 0x44
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	330c      	adds	r3, #12
 800696c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800696e:	61ba      	str	r2, [r7, #24]
 8006970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6979      	ldr	r1, [r7, #20]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	613b      	str	r3, [r7, #16]
   return(result);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e5      	bne.n	800694e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006990:	bf00      	nop
 8006992:	3754      	adds	r7, #84	@ 0x54
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr
	...

0800699c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689a      	ldr	r2, [r3, #8]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80069d6:	f023 030c 	bic.w	r3, r3, #12
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6812      	ldr	r2, [r2, #0]
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	430b      	orrs	r3, r1
 80069e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a2c      	ldr	r2, [pc, #176]	@ (8006ab0 <UART_SetConfig+0x114>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d103      	bne.n	8006a0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a04:	f7ff f8ce 	bl	8005ba4 <HAL_RCC_GetPCLK2Freq>
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	e002      	b.n	8006a12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006a0c:	f7ff f8b6 	bl	8005b7c <HAL_RCC_GetPCLK1Freq>
 8006a10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009a      	lsls	r2, r3, #2
 8006a1c:	441a      	add	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a28:	4a22      	ldr	r2, [pc, #136]	@ (8006ab4 <UART_SetConfig+0x118>)
 8006a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	0119      	lsls	r1, r3, #4
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	009a      	lsls	r2, r3, #2
 8006a3c:	441a      	add	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a48:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab4 <UART_SetConfig+0x118>)
 8006a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a4e:	095b      	lsrs	r3, r3, #5
 8006a50:	2064      	movs	r0, #100	@ 0x64
 8006a52:	fb00 f303 	mul.w	r3, r0, r3
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	3332      	adds	r3, #50	@ 0x32
 8006a5c:	4a15      	ldr	r2, [pc, #84]	@ (8006ab4 <UART_SetConfig+0x118>)
 8006a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a62:	095b      	lsrs	r3, r3, #5
 8006a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a68:	4419      	add	r1, r3
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	009a      	lsls	r2, r3, #2
 8006a74:	441a      	add	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a80:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab4 <UART_SetConfig+0x118>)
 8006a82:	fba3 0302 	umull	r0, r3, r3, r2
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	2064      	movs	r0, #100	@ 0x64
 8006a8a:	fb00 f303 	mul.w	r3, r0, r3
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	011b      	lsls	r3, r3, #4
 8006a92:	3332      	adds	r3, #50	@ 0x32
 8006a94:	4a07      	ldr	r2, [pc, #28]	@ (8006ab4 <UART_SetConfig+0x118>)
 8006a96:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	f003 020f 	and.w	r2, r3, #15
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006aa8:	bf00      	nop
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40013800 	.word	0x40013800
 8006ab4:	51eb851f 	.word	0x51eb851f

08006ab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006ae2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006ae6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b06:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006b0a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr

08006b32 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bc80      	pop	{r7}
 8006b48:	4770      	bx	lr

08006b4a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	4638      	mov	r0, r7
 8006b54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bc80      	pop	{r7}
 8006b82:	4770      	bx	lr

08006b84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b09d      	sub	sp, #116	@ 0x74
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006baa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	78db      	ldrb	r3, [r3, #3]
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d81f      	bhi.n	8006bf6 <USB_ActivateEndpoint+0x72>
 8006bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bbc <USB_ActivateEndpoint+0x38>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bcd 	.word	0x08006bcd
 8006bc0:	08006be9 	.word	0x08006be9
 8006bc4:	08006bff 	.word	0x08006bff
 8006bc8:	08006bdb 	.word	0x08006bdb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006bcc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006bd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006bd4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006bd8:	e012      	b.n	8006c00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006bda:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006bde:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006be2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006be6:	e00b      	b.n	8006c00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006be8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006bec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006bf0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006bf4:	e004      	b.n	8006c00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006bfc:	e000      	b.n	8006c00 <USB_ActivateEndpoint+0x7c>
      break;
 8006bfe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	441a      	add	r2, r3
 8006c0a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006c0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	7812      	ldrb	r2, [r2, #0]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	441a      	add	r2, r3
 8006c4e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006c52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	7b1b      	ldrb	r3, [r3, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f040 8178 	bne.w	8006f60 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	785b      	ldrb	r3, [r3, #1]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 8084 	beq.w	8006d82 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	011a      	lsls	r2, r3, #4
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	88db      	ldrh	r3, [r3, #6]
 8006ca2:	085b      	lsrs	r3, r3, #1
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	827b      	strh	r3, [r7, #18]
 8006cbc:	8a7b      	ldrh	r3, [r7, #18]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d01b      	beq.n	8006cfe <USB_ActivateEndpoint+0x17a>
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cdc:	823b      	strh	r3, [r7, #16]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	441a      	add	r2, r3
 8006ce8:	8a3b      	ldrh	r3, [r7, #16]
 8006cea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cf6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	78db      	ldrb	r3, [r3, #3]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d020      	beq.n	8006d48 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d1c:	81bb      	strh	r3, [r7, #12]
 8006d1e:	89bb      	ldrh	r3, [r7, #12]
 8006d20:	f083 0320 	eor.w	r3, r3, #32
 8006d24:	81bb      	strh	r3, [r7, #12]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	89bb      	ldrh	r3, [r7, #12]
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
 8006d46:	e2d5      	b.n	80072f4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d5e:	81fb      	strh	r3, [r7, #14]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	441a      	add	r2, r3
 8006d6a:	89fb      	ldrh	r3, [r7, #14]
 8006d6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	8013      	strh	r3, [r2, #0]
 8006d80:	e2b8      	b.n	80072f4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d92:	4413      	add	r3, r2
 8006d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	011a      	lsls	r2, r3, #4
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	88db      	ldrh	r3, [r3, #6]
 8006daa:	085b      	lsrs	r3, r3, #1
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc6:	4413      	add	r3, r2
 8006dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	011a      	lsls	r2, r3, #4
 8006dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	801a      	strh	r2, [r3, #0]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	2b3e      	cmp	r3, #62	@ 0x3e
 8006df0:	d91d      	bls.n	8006e2e <USB_ActivateEndpoint+0x2aa>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	095b      	lsrs	r3, r3, #5
 8006df8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f003 031f 	and.w	r3, r3, #31
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d102      	bne.n	8006e0c <USB_ActivateEndpoint+0x288>
 8006e06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	029b      	lsls	r3, r3, #10
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2a:	801a      	strh	r2, [r3, #0]
 8006e2c:	e026      	b.n	8006e7c <USB_ActivateEndpoint+0x2f8>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <USB_ActivateEndpoint+0x2c8>
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	e017      	b.n	8006e7c <USB_ActivateEndpoint+0x2f8>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	085b      	lsrs	r3, r3, #1
 8006e52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d002      	beq.n	8006e66 <USB_ActivateEndpoint+0x2e2>
 8006e60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e62:	3301      	adds	r3, #1
 8006e64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	029b      	lsls	r3, r3, #10
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	4313      	orrs	r3, r2
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006e8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01b      	beq.n	8006ecc <USB_ActivateEndpoint+0x348>
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eaa:	843b      	strh	r3, [r7, #32]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	441a      	add	r2, r3
 8006eb6:	8c3b      	ldrh	r3, [r7, #32]
 8006eb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ebc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ec0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d124      	bne.n	8006f1e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eea:	83bb      	strh	r3, [r7, #28]
 8006eec:	8bbb      	ldrh	r3, [r7, #28]
 8006eee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006ef2:	83bb      	strh	r3, [r7, #28]
 8006ef4:	8bbb      	ldrh	r3, [r7, #28]
 8006ef6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006efa:	83bb      	strh	r3, [r7, #28]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	441a      	add	r2, r3
 8006f06:	8bbb      	ldrh	r3, [r7, #28]
 8006f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	8013      	strh	r3, [r2, #0]
 8006f1c:	e1ea      	b.n	80072f4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f34:	83fb      	strh	r3, [r7, #30]
 8006f36:	8bfb      	ldrh	r3, [r7, #30]
 8006f38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f3c:	83fb      	strh	r3, [r7, #30]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	441a      	add	r2, r3
 8006f48:	8bfb      	ldrh	r3, [r7, #30]
 8006f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	8013      	strh	r3, [r2, #0]
 8006f5e:	e1c9      	b.n	80072f4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	78db      	ldrb	r3, [r3, #3]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	d11e      	bne.n	8006fa6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f7e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	441a      	add	r2, r3
 8006f8c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f98:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	8013      	strh	r3, [r2, #0]
 8006fa4:	e01d      	b.n	8006fe2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fbc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	441a      	add	r2, r3
 8006fca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006fce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff2:	4413      	add	r3, r2
 8006ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	011a      	lsls	r2, r3, #4
 8006ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007004:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	891b      	ldrh	r3, [r3, #8]
 800700a:	085b      	lsrs	r3, r3, #1
 800700c:	b29b      	uxth	r3, r3
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	b29a      	uxth	r2, r3
 8007012:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007014:	801a      	strh	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	657b      	str	r3, [r7, #84]	@ 0x54
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007020:	b29b      	uxth	r3, r3
 8007022:	461a      	mov	r2, r3
 8007024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007026:	4413      	add	r3, r2
 8007028:	657b      	str	r3, [r7, #84]	@ 0x54
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	011a      	lsls	r2, r3, #4
 8007030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007032:	4413      	add	r3, r2
 8007034:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007038:	653b      	str	r3, [r7, #80]	@ 0x50
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	895b      	ldrh	r3, [r3, #10]
 800703e:	085b      	lsrs	r3, r3, #1
 8007040:	b29b      	uxth	r3, r3
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	b29a      	uxth	r2, r3
 8007046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007048:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2b00      	cmp	r3, #0
 8007050:	f040 8093 	bne.w	800717a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	881b      	ldrh	r3, [r3, #0]
 8007060:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007064:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007068:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d01b      	beq.n	80070a8 <USB_ActivateEndpoint+0x524>
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007086:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	441a      	add	r2, r3
 8007092:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800709c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80070b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80070b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01b      	beq.n	80070f8 <USB_ActivateEndpoint+0x574>
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070d6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	441a      	add	r2, r3
 80070e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80070e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800710a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800710e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007110:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007112:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007116:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007118:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800711a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800711e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	441a      	add	r2, r3
 800712a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800712c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800713c:	b29b      	uxth	r3, r3
 800713e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007152:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007156:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	441a      	add	r2, r3
 8007162:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007164:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007168:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800716c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007174:	b29b      	uxth	r3, r3
 8007176:	8013      	strh	r3, [r2, #0]
 8007178:	e0bc      	b.n	80072f4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800718a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800718e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d01d      	beq.n	80071d2 <USB_ActivateEndpoint+0x64e>
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071ac:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	441a      	add	r2, r3
 80071ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80071be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80071e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80071e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d01d      	beq.n	800722a <USB_ActivateEndpoint+0x6a6>
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007204:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	441a      	add	r2, r3
 8007212:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800721a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800721e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007222:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007226:	b29b      	uxth	r3, r3
 8007228:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	78db      	ldrb	r3, [r3, #3]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d024      	beq.n	800727c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007248:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800724c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007250:	f083 0320 	eor.w	r3, r3, #32
 8007254:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	441a      	add	r2, r3
 8007262:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800726a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800726e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007276:	b29b      	uxth	r3, r3
 8007278:	8013      	strh	r3, [r2, #0]
 800727a:	e01d      	b.n	80072b8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29b      	uxth	r3, r3
 800728a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800728e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007292:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	441a      	add	r2, r3
 80072a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80072a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	441a      	add	r2, r3
 80072dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80072e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80072f4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3774      	adds	r7, #116	@ 0x74
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop

08007304 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007304:	b480      	push	{r7}
 8007306:	b08d      	sub	sp, #52	@ 0x34
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	7b1b      	ldrb	r3, [r3, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	f040 808e 	bne.w	8007434 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	785b      	ldrb	r3, [r3, #1]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d044      	beq.n	80073aa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	81bb      	strh	r3, [r7, #12]
 800732e:	89bb      	ldrh	r3, [r7, #12]
 8007330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01b      	beq.n	8007370 <USB_DeactivateEndpoint+0x6c>
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800734a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734e:	817b      	strh	r3, [r7, #10]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	441a      	add	r2, r3
 800735a:	897b      	ldrh	r3, [r7, #10]
 800735c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007368:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800736c:	b29b      	uxth	r3, r3
 800736e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007386:	813b      	strh	r3, [r7, #8]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	441a      	add	r2, r3
 8007392:	893b      	ldrh	r3, [r7, #8]
 8007394:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007398:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800739c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	8013      	strh	r3, [r2, #0]
 80073a8:	e192      	b.n	80076d0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	881b      	ldrh	r3, [r3, #0]
 80073b6:	827b      	strh	r3, [r7, #18]
 80073b8:	8a7b      	ldrh	r3, [r7, #18]
 80073ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01b      	beq.n	80073fa <USB_DeactivateEndpoint+0xf6>
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073d8:	823b      	strh	r3, [r7, #16]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	441a      	add	r2, r3
 80073e4:	8a3b      	ldrh	r3, [r7, #16]
 80073e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	b29b      	uxth	r3, r3
 8007408:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800740c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007410:	81fb      	strh	r3, [r7, #14]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	441a      	add	r2, r3
 800741c:	89fb      	ldrh	r3, [r7, #14]
 800741e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800742a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800742e:	b29b      	uxth	r3, r3
 8007430:	8013      	strh	r3, [r2, #0]
 8007432:	e14d      	b.n	80076d0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b00      	cmp	r3, #0
 800743a:	f040 80a5 	bne.w	8007588 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	843b      	strh	r3, [r7, #32]
 800744c:	8c3b      	ldrh	r3, [r7, #32]
 800744e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d01b      	beq.n	800748e <USB_DeactivateEndpoint+0x18a>
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800746c:	83fb      	strh	r3, [r7, #30]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	441a      	add	r2, r3
 8007478:	8bfb      	ldrh	r3, [r7, #30]
 800747a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800747e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007482:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007486:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800748a:	b29b      	uxth	r3, r3
 800748c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	881b      	ldrh	r3, [r3, #0]
 800749a:	83bb      	strh	r3, [r7, #28]
 800749c:	8bbb      	ldrh	r3, [r7, #28]
 800749e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01b      	beq.n	80074de <USB_DeactivateEndpoint+0x1da>
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074bc:	837b      	strh	r3, [r7, #26]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	441a      	add	r2, r3
 80074c8:	8b7b      	ldrh	r3, [r7, #26]
 80074ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074da:	b29b      	uxth	r3, r3
 80074dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074f4:	833b      	strh	r3, [r7, #24]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	441a      	add	r2, r3
 8007500:	8b3b      	ldrh	r3, [r7, #24]
 8007502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800750a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800750e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007512:	b29b      	uxth	r3, r3
 8007514:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800752c:	82fb      	strh	r3, [r7, #22]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	441a      	add	r2, r3
 8007538:	8afb      	ldrh	r3, [r7, #22]
 800753a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800753e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800754a:	b29b      	uxth	r3, r3
 800754c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007560:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007564:	82bb      	strh	r3, [r7, #20]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	441a      	add	r2, r3
 8007570:	8abb      	ldrh	r3, [r7, #20]
 8007572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800757a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800757e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007582:	b29b      	uxth	r3, r3
 8007584:	8013      	strh	r3, [r2, #0]
 8007586:	e0a3      	b.n	80076d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007596:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01b      	beq.n	80075d8 <USB_DeactivateEndpoint+0x2d4>
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075b6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	441a      	add	r2, r3
 80075c2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80075c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80075e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80075e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01b      	beq.n	8007628 <USB_DeactivateEndpoint+0x324>
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007606:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	441a      	add	r2, r3
 8007612:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007614:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007618:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800761c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007620:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007624:	b29b      	uxth	r3, r3
 8007626:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	b29b      	uxth	r3, r3
 8007636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800763a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800763e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	441a      	add	r2, r3
 800764a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800764c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007650:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007654:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800765c:	b29b      	uxth	r3, r3
 800765e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007676:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	441a      	add	r2, r3
 8007682:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800768c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007694:	b29b      	uxth	r3, r3
 8007696:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	441a      	add	r2, r3
 80076ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3734      	adds	r7, #52	@ 0x34
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bc80      	pop	{r7}
 80076da:	4770      	bx	lr

080076dc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b0c2      	sub	sp, #264	@ 0x108
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ea:	6018      	str	r0, [r3, #0]
 80076ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b01      	cmp	r3, #1
 8007704:	f040 86b7 	bne.w	8008476 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	699a      	ldr	r2, [r3, #24]
 8007714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	429a      	cmp	r2, r3
 8007722:	d908      	bls.n	8007736 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007734:	e007      	b.n	8007746 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	7b1b      	ldrb	r3, [r3, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d13a      	bne.n	80077cc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6959      	ldr	r1, [r3, #20]
 8007762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	88da      	ldrh	r2, [r3, #6]
 800776e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007772:	b29b      	uxth	r3, r3
 8007774:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007778:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800777c:	6800      	ldr	r0, [r0, #0]
 800777e:	f001 fc9c 	bl	80090ba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800779c:	b29b      	uxth	r3, r3
 800779e:	461a      	mov	r2, r3
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	4413      	add	r3, r2
 80077a4:	613b      	str	r3, [r7, #16]
 80077a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	011a      	lsls	r2, r3, #4
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	4413      	add	r3, r2
 80077b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	801a      	strh	r2, [r3, #0]
 80077c8:	f000 be1f 	b.w	800840a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80077cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	78db      	ldrb	r3, [r3, #3]
 80077d8:	2b02      	cmp	r3, #2
 80077da:	f040 8462 	bne.w	80080a2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80077de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6a1a      	ldr	r2, [r3, #32]
 80077ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	f240 83df 	bls.w	8007fba <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80077fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800781e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007822:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	441a      	add	r2, r3
 8007840:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800784c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007854:	b29b      	uxth	r3, r3
 8007856:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6a1a      	ldr	r2, [r3, #32]
 8007864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007868:	1ad2      	subs	r2, r2, r3
 800786a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4413      	add	r3, r2
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	b29b      	uxth	r3, r3
 8007894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 81c7 	beq.w	8007c2c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800789e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80078aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d177      	bne.n	80079aa <USB_EPStartXfer+0x2ce>
 80078ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078da:	4413      	add	r3, r2
 80078dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	011a      	lsls	r2, r3, #4
 80078ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ee:	4413      	add	r3, r2
 80078f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80078f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007900:	b29a      	uxth	r2, r3
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	801a      	strh	r2, [r3, #0]
 8007906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790a:	2b3e      	cmp	r3, #62	@ 0x3e
 800790c:	d921      	bls.n	8007952 <USB_EPStartXfer+0x276>
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007912:	095b      	lsrs	r3, r3, #5
 8007914:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791c:	f003 031f 	and.w	r3, r3, #31
 8007920:	2b00      	cmp	r3, #0
 8007922:	d104      	bne.n	800792e <USB_EPStartXfer+0x252>
 8007924:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007928:	3b01      	subs	r3, #1
 800792a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800792e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	b29a      	uxth	r2, r3
 8007934:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007938:	b29b      	uxth	r3, r3
 800793a:	029b      	lsls	r3, r3, #10
 800793c:	b29b      	uxth	r3, r3
 800793e:	4313      	orrs	r3, r2
 8007940:	b29b      	uxth	r3, r3
 8007942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794a:	b29a      	uxth	r2, r3
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	801a      	strh	r2, [r3, #0]
 8007950:	e050      	b.n	80079f4 <USB_EPStartXfer+0x318>
 8007952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10a      	bne.n	8007970 <USB_EPStartXfer+0x294>
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007968:	b29a      	uxth	r2, r3
 800796a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796c:	801a      	strh	r2, [r3, #0]
 800796e:	e041      	b.n	80079f4 <USB_EPStartXfer+0x318>
 8007970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007974:	085b      	lsrs	r3, r3, #1
 8007976:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800797a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <USB_EPStartXfer+0x2b4>
 8007986:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800798a:	3301      	adds	r3, #1
 800798c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29a      	uxth	r2, r3
 8007996:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800799a:	b29b      	uxth	r3, r3
 800799c:	029b      	lsls	r3, r3, #10
 800799e:	b29b      	uxth	r3, r3
 80079a0:	4313      	orrs	r3, r2
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	e024      	b.n	80079f4 <USB_EPStartXfer+0x318>
 80079aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d11c      	bne.n	80079f4 <USB_EPStartXfer+0x318>
 80079ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ce:	4413      	add	r3, r2
 80079d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80079d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	011a      	lsls	r2, r3, #4
 80079e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e2:	4413      	add	r3, r2
 80079e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	895b      	ldrh	r3, [r3, #10]
 8007a00:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6959      	ldr	r1, [r3, #20]
 8007a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a1a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a1e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a22:	6800      	ldr	r0, [r0, #0]
 8007a24:	f001 fb49 	bl	80090ba <USB_WritePMA>
            ep->xfer_buff += len;
 8007a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	695a      	ldr	r2, [r3, #20]
 8007a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a38:	441a      	add	r2, r3
 8007a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6a1a      	ldr	r2, [r3, #32]
 8007a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d90f      	bls.n	8007a82 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007a62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6a1a      	ldr	r2, [r3, #32]
 8007a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a72:	1ad2      	subs	r2, r2, r3
 8007a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	621a      	str	r2, [r3, #32]
 8007a80:	e00e      	b.n	8007aa0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	785b      	ldrb	r3, [r3, #1]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d177      	bne.n	8007ba0 <USB_EPStartXfer+0x4c4>
 8007ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	61bb      	str	r3, [r7, #24]
 8007abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	461a      	mov	r2, r3
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	61bb      	str	r3, [r7, #24]
 8007ad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	011a      	lsls	r2, r3, #4
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007aea:	617b      	str	r3, [r7, #20]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	801a      	strh	r2, [r3, #0]
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b00:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b02:	d921      	bls.n	8007b48 <USB_EPStartXfer+0x46c>
 8007b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b08:	095b      	lsrs	r3, r3, #5
 8007b0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b12:	f003 031f 	and.w	r3, r3, #31
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d104      	bne.n	8007b24 <USB_EPStartXfer+0x448>
 8007b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	029b      	lsls	r3, r3, #10
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	4313      	orrs	r3, r2
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	e056      	b.n	8007bf6 <USB_EPStartXfer+0x51a>
 8007b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <USB_EPStartXfer+0x48a>
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	801a      	strh	r2, [r3, #0]
 8007b64:	e047      	b.n	8007bf6 <USB_EPStartXfer+0x51a>
 8007b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b6a:	085b      	lsrs	r3, r3, #1
 8007b6c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <USB_EPStartXfer+0x4aa>
 8007b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b80:	3301      	adds	r3, #1
 8007b82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	029b      	lsls	r3, r3, #10
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	4313      	orrs	r3, r2
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	801a      	strh	r2, [r3, #0]
 8007b9e:	e02a      	b.n	8007bf6 <USB_EPStartXfer+0x51a>
 8007ba0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d122      	bne.n	8007bf6 <USB_EPStartXfer+0x51a>
 8007bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	623b      	str	r3, [r7, #32]
 8007bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	461a      	mov	r2, r3
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	623b      	str	r3, [r7, #32]
 8007bd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	011a      	lsls	r2, r3, #4
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	4413      	add	r3, r2
 8007be6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007bea:	61fb      	str	r3, [r7, #28]
 8007bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	891b      	ldrh	r3, [r3, #8]
 8007c02:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6959      	ldr	r1, [r3, #20]
 8007c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c1c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c20:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c24:	6800      	ldr	r0, [r0, #0]
 8007c26:	f001 fa48 	bl	80090ba <USB_WritePMA>
 8007c2a:	e3ee      	b.n	800840a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d177      	bne.n	8007d2c <USB_EPStartXfer+0x650>
 8007c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c5c:	4413      	add	r3, r2
 8007c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	011a      	lsls	r2, r3, #4
 8007c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c70:	4413      	add	r3, r2
 8007c72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c86:	801a      	strh	r2, [r3, #0]
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c8e:	d921      	bls.n	8007cd4 <USB_EPStartXfer+0x5f8>
 8007c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c94:	095b      	lsrs	r3, r3, #5
 8007c96:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9e:	f003 031f 	and.w	r3, r3, #31
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d104      	bne.n	8007cb0 <USB_EPStartXfer+0x5d4>
 8007ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007caa:	3b01      	subs	r3, #1
 8007cac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	029b      	lsls	r3, r3, #10
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cd0:	801a      	strh	r2, [r3, #0]
 8007cd2:	e056      	b.n	8007d82 <USB_EPStartXfer+0x6a6>
 8007cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <USB_EPStartXfer+0x616>
 8007cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cee:	801a      	strh	r2, [r3, #0]
 8007cf0:	e047      	b.n	8007d82 <USB_EPStartXfer+0x6a6>
 8007cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cf6:	085b      	lsrs	r3, r3, #1
 8007cf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <USB_EPStartXfer+0x636>
 8007d08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	029b      	lsls	r3, r3, #10
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	4313      	orrs	r3, r2
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d28:	801a      	strh	r2, [r3, #0]
 8007d2a:	e02a      	b.n	8007d82 <USB_EPStartXfer+0x6a6>
 8007d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d122      	bne.n	8007d82 <USB_EPStartXfer+0x6a6>
 8007d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d5c:	4413      	add	r3, r2
 8007d5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	011a      	lsls	r2, r3, #4
 8007d6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d70:	4413      	add	r3, r2
 8007d72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	891b      	ldrh	r3, [r3, #8]
 8007d8e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6959      	ldr	r1, [r3, #20]
 8007d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007da8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007dac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007db0:	6800      	ldr	r0, [r0, #0]
 8007db2:	f001 f982 	bl	80090ba <USB_WritePMA>
            ep->xfer_buff += len;
 8007db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	695a      	ldr	r2, [r3, #20]
 8007dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc6:	441a      	add	r2, r3
 8007dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6a1a      	ldr	r2, [r3, #32]
 8007de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d90f      	bls.n	8007e10 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6a1a      	ldr	r2, [r3, #32]
 8007dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	621a      	str	r2, [r3, #32]
 8007e0e:	e00e      	b.n	8007e2e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	785b      	ldrb	r3, [r3, #1]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d177      	bne.n	8007f3a <USB_EPStartXfer+0x85e>
 8007e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	461a      	mov	r2, r3
 8007e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6a:	4413      	add	r3, r2
 8007e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	011a      	lsls	r2, r3, #4
 8007e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e7e:	4413      	add	r3, r2
 8007e80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e94:	801a      	strh	r2, [r3, #0]
 8007e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e9c:	d921      	bls.n	8007ee2 <USB_EPStartXfer+0x806>
 8007e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d104      	bne.n	8007ebe <USB_EPStartXfer+0x7e2>
 8007eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	029b      	lsls	r3, r3, #10
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ede:	801a      	strh	r2, [r3, #0]
 8007ee0:	e050      	b.n	8007f84 <USB_EPStartXfer+0x8a8>
 8007ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10a      	bne.n	8007f00 <USB_EPStartXfer+0x824>
 8007eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007efc:	801a      	strh	r2, [r3, #0]
 8007efe:	e041      	b.n	8007f84 <USB_EPStartXfer+0x8a8>
 8007f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f04:	085b      	lsrs	r3, r3, #1
 8007f06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d004      	beq.n	8007f20 <USB_EPStartXfer+0x844>
 8007f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	029b      	lsls	r3, r3, #10
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	4313      	orrs	r3, r2
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f36:	801a      	strh	r2, [r3, #0]
 8007f38:	e024      	b.n	8007f84 <USB_EPStartXfer+0x8a8>
 8007f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d11c      	bne.n	8007f84 <USB_EPStartXfer+0x8a8>
 8007f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f5e:	4413      	add	r3, r2
 8007f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	011a      	lsls	r2, r3, #4
 8007f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f72:	4413      	add	r3, r2
 8007f74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	895b      	ldrh	r3, [r3, #10]
 8007f90:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6959      	ldr	r1, [r3, #20]
 8007fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007faa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007fae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007fb2:	6800      	ldr	r0, [r0, #0]
 8007fb4:	f001 f881 	bl	80090ba <USB_WritePMA>
 8007fb8:	e227      	b.n	800840a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ff0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	441a      	add	r2, r3
 800800e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800801a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800801e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008022:	b29b      	uxth	r3, r3
 8008024:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800802a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008036:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008040:	b29b      	uxth	r3, r3
 8008042:	461a      	mov	r2, r3
 8008044:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008046:	4413      	add	r3, r2
 8008048:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800804a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	011a      	lsls	r2, r3, #4
 8008058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800805a:	4413      	add	r3, r2
 800805c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008060:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008066:	b29a      	uxth	r2, r3
 8008068:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800806a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800806c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	891b      	ldrh	r3, [r3, #8]
 8008078:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800807c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6959      	ldr	r1, [r3, #20]
 8008088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800808c:	b29b      	uxth	r3, r3
 800808e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008092:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008096:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800809a:	6800      	ldr	r0, [r0, #0]
 800809c:	f001 f80d 	bl	80090ba <USB_WritePMA>
 80080a0:	e1b3      	b.n	800840a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80080a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6a1a      	ldr	r2, [r3, #32]
 80080ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080b2:	1ad2      	subs	r2, r2, r3
 80080b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80080c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 80c6 	beq.w	8008274 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80080f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	785b      	ldrb	r3, [r3, #1]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d177      	bne.n	80081f4 <USB_EPStartXfer+0xb18>
 8008104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008108:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800811e:	b29b      	uxth	r3, r3
 8008120:	461a      	mov	r2, r3
 8008122:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008124:	4413      	add	r3, r2
 8008126:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800812c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	011a      	lsls	r2, r3, #4
 8008136:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008138:	4413      	add	r3, r2
 800813a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800813e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008140:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	b29b      	uxth	r3, r3
 8008146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800814a:	b29a      	uxth	r2, r3
 800814c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800814e:	801a      	strh	r2, [r3, #0]
 8008150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008154:	2b3e      	cmp	r3, #62	@ 0x3e
 8008156:	d921      	bls.n	800819c <USB_EPStartXfer+0xac0>
 8008158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800815c:	095b      	lsrs	r3, r3, #5
 800815e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008166:	f003 031f 	and.w	r3, r3, #31
 800816a:	2b00      	cmp	r3, #0
 800816c:	d104      	bne.n	8008178 <USB_EPStartXfer+0xa9c>
 800816e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008172:	3b01      	subs	r3, #1
 8008174:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	b29a      	uxth	r2, r3
 800817e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008182:	b29b      	uxth	r3, r3
 8008184:	029b      	lsls	r3, r3, #10
 8008186:	b29b      	uxth	r3, r3
 8008188:	4313      	orrs	r3, r2
 800818a:	b29b      	uxth	r3, r3
 800818c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008194:	b29a      	uxth	r2, r3
 8008196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008198:	801a      	strh	r2, [r3, #0]
 800819a:	e050      	b.n	800823e <USB_EPStartXfer+0xb62>
 800819c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <USB_EPStartXfer+0xade>
 80081a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081b6:	801a      	strh	r2, [r3, #0]
 80081b8:	e041      	b.n	800823e <USB_EPStartXfer+0xb62>
 80081ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081be:	085b      	lsrs	r3, r3, #1
 80081c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d004      	beq.n	80081da <USB_EPStartXfer+0xafe>
 80081d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80081d4:	3301      	adds	r3, #1
 80081d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	b29a      	uxth	r2, r3
 80081e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	029b      	lsls	r3, r3, #10
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	4313      	orrs	r3, r2
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081f0:	801a      	strh	r2, [r3, #0]
 80081f2:	e024      	b.n	800823e <USB_EPStartXfer+0xb62>
 80081f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d11c      	bne.n	800823e <USB_EPStartXfer+0xb62>
 8008204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008208:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008212:	b29b      	uxth	r3, r3
 8008214:	461a      	mov	r2, r3
 8008216:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008218:	4413      	add	r3, r2
 800821a:	673b      	str	r3, [r7, #112]	@ 0x70
 800821c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	011a      	lsls	r2, r3, #4
 800822a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800822c:	4413      	add	r3, r2
 800822e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008232:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008238:	b29a      	uxth	r2, r3
 800823a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800823c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800823e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	895b      	ldrh	r3, [r3, #10]
 800824a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800824e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6959      	ldr	r1, [r3, #20]
 800825a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800825e:	b29b      	uxth	r3, r3
 8008260:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008264:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008268:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800826c:	6800      	ldr	r0, [r0, #0]
 800826e:	f000 ff24 	bl	80090ba <USB_WritePMA>
 8008272:	e0ca      	b.n	800840a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d177      	bne.n	8008374 <USB_EPStartXfer+0xc98>
 8008284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008288:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008294:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800829e:	b29b      	uxth	r3, r3
 80082a0:	461a      	mov	r2, r3
 80082a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80082a4:	4413      	add	r3, r2
 80082a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80082a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	011a      	lsls	r2, r3, #4
 80082b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80082b8:	4413      	add	r3, r2
 80082ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082ce:	801a      	strh	r2, [r3, #0]
 80082d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80082d6:	d921      	bls.n	800831c <USB_EPStartXfer+0xc40>
 80082d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082dc:	095b      	lsrs	r3, r3, #5
 80082de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e6:	f003 031f 	and.w	r3, r3, #31
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <USB_EPStartXfer+0xc1c>
 80082ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80082f2:	3b01      	subs	r3, #1
 80082f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082fa:	881b      	ldrh	r3, [r3, #0]
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008302:	b29b      	uxth	r3, r3
 8008304:	029b      	lsls	r3, r3, #10
 8008306:	b29b      	uxth	r3, r3
 8008308:	4313      	orrs	r3, r2
 800830a:	b29b      	uxth	r3, r3
 800830c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008314:	b29a      	uxth	r2, r3
 8008316:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008318:	801a      	strh	r2, [r3, #0]
 800831a:	e05c      	b.n	80083d6 <USB_EPStartXfer+0xcfa>
 800831c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10a      	bne.n	800833a <USB_EPStartXfer+0xc5e>
 8008324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b29b      	uxth	r3, r3
 800832a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800832e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008332:	b29a      	uxth	r2, r3
 8008334:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008336:	801a      	strh	r2, [r3, #0]
 8008338:	e04d      	b.n	80083d6 <USB_EPStartXfer+0xcfa>
 800833a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b00      	cmp	r3, #0
 800834e:	d004      	beq.n	800835a <USB_EPStartXfer+0xc7e>
 8008350:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008354:	3301      	adds	r3, #1
 8008356:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800835a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29a      	uxth	r2, r3
 8008360:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008364:	b29b      	uxth	r3, r3
 8008366:	029b      	lsls	r3, r3, #10
 8008368:	b29b      	uxth	r3, r3
 800836a:	4313      	orrs	r3, r2
 800836c:	b29a      	uxth	r2, r3
 800836e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008370:	801a      	strh	r2, [r3, #0]
 8008372:	e030      	b.n	80083d6 <USB_EPStartXfer+0xcfa>
 8008374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	785b      	ldrb	r3, [r3, #1]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d128      	bne.n	80083d6 <USB_EPStartXfer+0xcfa>
 8008384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	461a      	mov	r2, r3
 80083a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083a8:	4413      	add	r3, r2
 80083aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80083ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	011a      	lsls	r2, r3, #4
 80083bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083c0:	4413      	add	r3, r2
 80083c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80083c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80083d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80083d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	891b      	ldrh	r3, [r3, #8]
 80083e2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80083e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6959      	ldr	r1, [r3, #20]
 80083f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80083fc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008400:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008404:	6800      	ldr	r0, [r0, #0]
 8008406:	f000 fe58 	bl	80090ba <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800840a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800840e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	b29b      	uxth	r3, r3
 8008428:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800842c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008430:	817b      	strh	r3, [r7, #10]
 8008432:	897b      	ldrh	r3, [r7, #10]
 8008434:	f083 0310 	eor.w	r3, r3, #16
 8008438:	817b      	strh	r3, [r7, #10]
 800843a:	897b      	ldrh	r3, [r7, #10]
 800843c:	f083 0320 	eor.w	r3, r3, #32
 8008440:	817b      	strh	r3, [r7, #10]
 8008442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	441a      	add	r2, r3
 800845c:	897b      	ldrh	r3, [r7, #10]
 800845e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800846a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800846e:	b29b      	uxth	r3, r3
 8008470:	8013      	strh	r3, [r2, #0]
 8008472:	f000 bcde 	b.w	8008e32 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	7b1b      	ldrb	r3, [r3, #12]
 8008482:	2b00      	cmp	r3, #0
 8008484:	f040 80bb 	bne.w	80085fe <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	699a      	ldr	r2, [r3, #24]
 8008494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d917      	bls.n	80084d4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80084a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80084b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	699a      	ldr	r2, [r3, #24]
 80084c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c4:	1ad2      	subs	r2, r2, r3
 80084c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	619a      	str	r2, [r3, #24]
 80084d2:	e00e      	b.n	80084f2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80084d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80084e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2200      	movs	r2, #0
 80084f0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80084f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008504:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800850e:	b29b      	uxth	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008516:	4413      	add	r3, r2
 8008518:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800851c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	011a      	lsls	r2, r3, #4
 800852a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800852e:	4413      	add	r3, r2
 8008530:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008534:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	b29b      	uxth	r3, r3
 8008540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008544:	b29a      	uxth	r2, r3
 8008546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800854a:	801a      	strh	r2, [r3, #0]
 800854c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008550:	2b3e      	cmp	r3, #62	@ 0x3e
 8008552:	d924      	bls.n	800859e <USB_EPStartXfer+0xec2>
 8008554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008558:	095b      	lsrs	r3, r3, #5
 800855a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800855e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008562:	f003 031f 	and.w	r3, r3, #31
 8008566:	2b00      	cmp	r3, #0
 8008568:	d104      	bne.n	8008574 <USB_EPStartXfer+0xe98>
 800856a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800856e:	3b01      	subs	r3, #1
 8008570:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	b29a      	uxth	r2, r3
 800857c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008580:	b29b      	uxth	r3, r3
 8008582:	029b      	lsls	r3, r3, #10
 8008584:	b29b      	uxth	r3, r3
 8008586:	4313      	orrs	r3, r2
 8008588:	b29b      	uxth	r3, r3
 800858a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008592:	b29a      	uxth	r2, r3
 8008594:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008598:	801a      	strh	r2, [r3, #0]
 800859a:	f000 bc10 	b.w	8008dbe <USB_EPStartXfer+0x16e2>
 800859e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10c      	bne.n	80085c0 <USB_EPStartXfer+0xee4>
 80085a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085bc:	801a      	strh	r2, [r3, #0]
 80085be:	e3fe      	b.n	8008dbe <USB_EPStartXfer+0x16e2>
 80085c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085c4:	085b      	lsrs	r3, r3, #1
 80085c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <USB_EPStartXfer+0xf04>
 80085d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80085da:	3301      	adds	r3, #1
 80085dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	029b      	lsls	r3, r3, #10
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	4313      	orrs	r3, r2
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085fa:	801a      	strh	r2, [r3, #0]
 80085fc:	e3df      	b.n	8008dbe <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80085fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	78db      	ldrb	r3, [r3, #3]
 800860a:	2b02      	cmp	r3, #2
 800860c:	f040 8218 	bne.w	8008a40 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	785b      	ldrb	r3, [r3, #1]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f040 809d 	bne.w	800875c <USB_EPStartXfer+0x1080>
 8008622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800863e:	b29b      	uxth	r3, r3
 8008640:	461a      	mov	r2, r3
 8008642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008646:	4413      	add	r3, r2
 8008648:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800864c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	011a      	lsls	r2, r3, #4
 800865a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800865e:	4413      	add	r3, r2
 8008660:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008664:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	b29b      	uxth	r3, r3
 8008670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008674:	b29a      	uxth	r2, r3
 8008676:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800867a:	801a      	strh	r2, [r3, #0]
 800867c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	2b3e      	cmp	r3, #62	@ 0x3e
 800868a:	d92b      	bls.n	80086e4 <USB_EPStartXfer+0x1008>
 800868c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	095b      	lsrs	r3, r3, #5
 800869a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800869e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f003 031f 	and.w	r3, r3, #31
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d104      	bne.n	80086bc <USB_EPStartXfer+0xfe0>
 80086b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b6:	3b01      	subs	r3, #1
 80086b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80086bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	029b      	lsls	r3, r3, #10
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	4313      	orrs	r3, r2
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086da:	b29a      	uxth	r2, r3
 80086dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80086e0:	801a      	strh	r2, [r3, #0]
 80086e2:	e070      	b.n	80087c6 <USB_EPStartXfer+0x10ea>
 80086e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10c      	bne.n	800870e <USB_EPStartXfer+0x1032>
 80086f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008704:	b29a      	uxth	r2, r3
 8008706:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800870a:	801a      	strh	r2, [r3, #0]
 800870c:	e05b      	b.n	80087c6 <USB_EPStartXfer+0x10ea>
 800870e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	085b      	lsrs	r3, r3, #1
 800871c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	f003 0301 	and.w	r3, r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	d004      	beq.n	800873e <USB_EPStartXfer+0x1062>
 8008734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008738:	3301      	adds	r3, #1
 800873a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800873e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	b29a      	uxth	r2, r3
 8008746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800874a:	b29b      	uxth	r3, r3
 800874c:	029b      	lsls	r3, r3, #10
 800874e:	b29b      	uxth	r3, r3
 8008750:	4313      	orrs	r3, r2
 8008752:	b29a      	uxth	r2, r3
 8008754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008758:	801a      	strh	r2, [r3, #0]
 800875a:	e034      	b.n	80087c6 <USB_EPStartXfer+0x10ea>
 800875c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	785b      	ldrb	r3, [r3, #1]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d12c      	bne.n	80087c6 <USB_EPStartXfer+0x10ea>
 800876c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008770:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800877a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800877e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008788:	b29b      	uxth	r3, r3
 800878a:	461a      	mov	r2, r3
 800878c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008790:	4413      	add	r3, r2
 8008792:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	011a      	lsls	r2, r3, #4
 80087a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087a8:	4413      	add	r3, r2
 80087aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80087ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80087b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80087c4:	801a      	strh	r2, [r3, #0]
 80087c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80087d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	785b      	ldrb	r3, [r3, #1]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f040 809d 	bne.w	8008920 <USB_EPStartXfer+0x1244>
 80087e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008802:	b29b      	uxth	r3, r3
 8008804:	461a      	mov	r2, r3
 8008806:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800880a:	4413      	add	r3, r2
 800880c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	011a      	lsls	r2, r3, #4
 800881e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008822:	4413      	add	r3, r2
 8008824:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800882c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	b29b      	uxth	r3, r3
 8008834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008838:	b29a      	uxth	r2, r3
 800883a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800883e:	801a      	strh	r2, [r3, #0]
 8008840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b3e      	cmp	r3, #62	@ 0x3e
 800884e:	d92b      	bls.n	80088a8 <USB_EPStartXfer+0x11cc>
 8008850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	095b      	lsrs	r3, r3, #5
 800885e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f003 031f 	and.w	r3, r3, #31
 8008872:	2b00      	cmp	r3, #0
 8008874:	d104      	bne.n	8008880 <USB_EPStartXfer+0x11a4>
 8008876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800887a:	3b01      	subs	r3, #1
 800887c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008880:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29a      	uxth	r2, r3
 8008888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800888c:	b29b      	uxth	r3, r3
 800888e:	029b      	lsls	r3, r3, #10
 8008890:	b29b      	uxth	r3, r3
 8008892:	4313      	orrs	r3, r2
 8008894:	b29b      	uxth	r3, r3
 8008896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800889a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800889e:	b29a      	uxth	r2, r3
 80088a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088a4:	801a      	strh	r2, [r3, #0]
 80088a6:	e069      	b.n	800897c <USB_EPStartXfer+0x12a0>
 80088a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10c      	bne.n	80088d2 <USB_EPStartXfer+0x11f6>
 80088b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088ce:	801a      	strh	r2, [r3, #0]
 80088d0:	e054      	b.n	800897c <USB_EPStartXfer+0x12a0>
 80088d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	085b      	lsrs	r3, r3, #1
 80088e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d004      	beq.n	8008902 <USB_EPStartXfer+0x1226>
 80088f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088fc:	3301      	adds	r3, #1
 80088fe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008902:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	b29a      	uxth	r2, r3
 800890a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800890e:	b29b      	uxth	r3, r3
 8008910:	029b      	lsls	r3, r3, #10
 8008912:	b29b      	uxth	r3, r3
 8008914:	4313      	orrs	r3, r2
 8008916:	b29a      	uxth	r2, r3
 8008918:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800891c:	801a      	strh	r2, [r3, #0]
 800891e:	e02d      	b.n	800897c <USB_EPStartXfer+0x12a0>
 8008920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	785b      	ldrb	r3, [r3, #1]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d125      	bne.n	800897c <USB_EPStartXfer+0x12a0>
 8008930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800893e:	b29b      	uxth	r3, r3
 8008940:	461a      	mov	r2, r3
 8008942:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008946:	4413      	add	r3, r2
 8008948:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800894c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	011a      	lsls	r2, r3, #4
 800895a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800895e:	4413      	add	r3, r2
 8008960:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008964:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800896c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	b29a      	uxth	r2, r3
 8008976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800897a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800897c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 8218 	beq.w	8008dbe <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800898e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008992:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800899c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	881b      	ldrh	r3, [r3, #0]
 80089aa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80089ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80089b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d005      	beq.n	80089c6 <USB_EPStartXfer+0x12ea>
 80089ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80089be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10d      	bne.n	80089e2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80089c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80089ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f040 81f5 	bne.w	8008dbe <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80089d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80089d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f040 81ee 	bne.w	8008dbe <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80089e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	4413      	add	r3, r2
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a08:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	441a      	add	r2, r3
 8008a26:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008a2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a36:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	8013      	strh	r3, [r2, #0]
 8008a3e:	e1be      	b.n	8008dbe <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	78db      	ldrb	r3, [r3, #3]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	f040 81b4 	bne.w	8008dba <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	699a      	ldr	r2, [r3, #24]
 8008a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d917      	bls.n	8008a9e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	699a      	ldr	r2, [r3, #24]
 8008a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a8e:	1ad2      	subs	r2, r2, r3
 8008a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	619a      	str	r2, [r3, #24]
 8008a9c:	e00e      	b.n	8008abc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	785b      	ldrb	r3, [r3, #1]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f040 8085 	bne.w	8008bd8 <USB_EPStartXfer+0x14fc>
 8008ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	461a      	mov	r2, r3
 8008aee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008af2:	4413      	add	r3, r2
 8008af4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	011a      	lsls	r2, r3, #4
 8008b06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008b10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b2e:	d923      	bls.n	8008b78 <USB_EPStartXfer+0x149c>
 8008b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b34:	095b      	lsrs	r3, r3, #5
 8008b36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b3e:	f003 031f 	and.w	r3, r3, #31
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d104      	bne.n	8008b50 <USB_EPStartXfer+0x1474>
 8008b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008b50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	029b      	lsls	r3, r3, #10
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	4313      	orrs	r3, r2
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b74:	801a      	strh	r2, [r3, #0]
 8008b76:	e060      	b.n	8008c3a <USB_EPStartXfer+0x155e>
 8008b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10c      	bne.n	8008b9a <USB_EPStartXfer+0x14be>
 8008b80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b96:	801a      	strh	r2, [r3, #0]
 8008b98:	e04f      	b.n	8008c3a <USB_EPStartXfer+0x155e>
 8008b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b9e:	085b      	lsrs	r3, r3, #1
 8008ba0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d004      	beq.n	8008bba <USB_EPStartXfer+0x14de>
 8008bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008bba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	029b      	lsls	r3, r3, #10
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bd4:	801a      	strh	r2, [r3, #0]
 8008bd6:	e030      	b.n	8008c3a <USB_EPStartXfer+0x155e>
 8008bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d128      	bne.n	8008c3a <USB_EPStartXfer+0x155e>
 8008be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	461a      	mov	r2, r3
 8008c08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	011a      	lsls	r2, r3, #4
 8008c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c24:	4413      	add	r3, r2
 8008c26:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008c38:	801a      	strh	r2, [r3, #0]
 8008c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	785b      	ldrb	r3, [r3, #1]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f040 8085 	bne.w	8008d64 <USB_EPStartXfer+0x1688>
 8008c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008c68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	461a      	mov	r2, r3
 8008c7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008c7e:	4413      	add	r3, r2
 8008c80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	011a      	lsls	r2, r3, #4
 8008c92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008c96:	4413      	add	r3, r2
 8008c98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008cb2:	801a      	strh	r2, [r3, #0]
 8008cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cba:	d923      	bls.n	8008d04 <USB_EPStartXfer+0x1628>
 8008cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc0:	095b      	lsrs	r3, r3, #5
 8008cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cca:	f003 031f 	and.w	r3, r3, #31
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d104      	bne.n	8008cdc <USB_EPStartXfer+0x1600>
 8008cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008cdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	029b      	lsls	r3, r3, #10
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d00:	801a      	strh	r2, [r3, #0]
 8008d02:	e05c      	b.n	8008dbe <USB_EPStartXfer+0x16e2>
 8008d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10c      	bne.n	8008d26 <USB_EPStartXfer+0x164a>
 8008d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d10:	881b      	ldrh	r3, [r3, #0]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d22:	801a      	strh	r2, [r3, #0]
 8008d24:	e04b      	b.n	8008dbe <USB_EPStartXfer+0x16e2>
 8008d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d2a:	085b      	lsrs	r3, r3, #1
 8008d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d004      	beq.n	8008d46 <USB_EPStartXfer+0x166a>
 8008d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d40:	3301      	adds	r3, #1
 8008d42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	029b      	lsls	r3, r3, #10
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d60:	801a      	strh	r2, [r3, #0]
 8008d62:	e02c      	b.n	8008dbe <USB_EPStartXfer+0x16e2>
 8008d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d124      	bne.n	8008dbe <USB_EPStartXfer+0x16e2>
 8008d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	461a      	mov	r2, r3
 8008d86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008d8a:	4413      	add	r3, r2
 8008d8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	011a      	lsls	r2, r3, #4
 8008d9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008da2:	4413      	add	r3, r2
 8008da4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008da8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008db6:	801a      	strh	r2, [r3, #0]
 8008db8:	e001      	b.n	8008dbe <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e03a      	b.n	8008e34 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008de4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008de8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008dec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008df0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008df4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008df8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008dfc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	441a      	add	r2, r3
 8008e1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b085      	sub	sp, #20
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	785b      	ldrb	r3, [r3, #1]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d020      	beq.n	8008e92 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e66:	81bb      	strh	r3, [r7, #12]
 8008e68:	89bb      	ldrh	r3, [r7, #12]
 8008e6a:	f083 0310 	eor.w	r3, r3, #16
 8008e6e:	81bb      	strh	r3, [r7, #12]
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	441a      	add	r2, r3
 8008e7a:	89bb      	ldrh	r3, [r7, #12]
 8008e7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	8013      	strh	r3, [r2, #0]
 8008e90:	e01f      	b.n	8008ed2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	881b      	ldrh	r3, [r3, #0]
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea8:	81fb      	strh	r3, [r7, #14]
 8008eaa:	89fb      	ldrh	r3, [r7, #14]
 8008eac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008eb0:	81fb      	strh	r3, [r7, #14]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	441a      	add	r2, r3
 8008ebc:	89fb      	ldrh	r3, [r7, #14]
 8008ebe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bc80      	pop	{r7}
 8008edc:	4770      	bx	lr

08008ede <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b087      	sub	sp, #28
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	7b1b      	ldrb	r3, [r3, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f040 809d 	bne.w	800902c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	785b      	ldrb	r3, [r3, #1]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d04c      	beq.n	8008f94 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	823b      	strh	r3, [r7, #16]
 8008f08:	8a3b      	ldrh	r3, [r7, #16]
 8008f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d01b      	beq.n	8008f4a <USB_EPClearStall+0x6c>
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f28:	81fb      	strh	r3, [r7, #14]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	441a      	add	r2, r3
 8008f34:	89fb      	ldrh	r3, [r7, #14]
 8008f36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	78db      	ldrb	r3, [r3, #3]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d06c      	beq.n	800902c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f68:	81bb      	strh	r3, [r7, #12]
 8008f6a:	89bb      	ldrh	r3, [r7, #12]
 8008f6c:	f083 0320 	eor.w	r3, r3, #32
 8008f70:	81bb      	strh	r3, [r7, #12]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	441a      	add	r2, r3
 8008f7c:	89bb      	ldrh	r3, [r7, #12]
 8008f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	8013      	strh	r3, [r2, #0]
 8008f92:	e04b      	b.n	800902c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	82fb      	strh	r3, [r7, #22]
 8008fa2:	8afb      	ldrh	r3, [r7, #22]
 8008fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01b      	beq.n	8008fe4 <USB_EPClearStall+0x106>
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fc2:	82bb      	strh	r3, [r7, #20]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	441a      	add	r2, r3
 8008fce:	8abb      	ldrh	r3, [r7, #20]
 8008fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	4413      	add	r3, r2
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ffa:	827b      	strh	r3, [r7, #18]
 8008ffc:	8a7b      	ldrh	r3, [r7, #18]
 8008ffe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009002:	827b      	strh	r3, [r7, #18]
 8009004:	8a7b      	ldrh	r3, [r7, #18]
 8009006:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800900a:	827b      	strh	r3, [r7, #18]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	441a      	add	r2, r3
 8009016:	8a7b      	ldrh	r3, [r7, #18]
 8009018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800901c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009028:	b29b      	uxth	r3, r3
 800902a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	371c      	adds	r7, #28
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr

08009038 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d103      	bne.n	8009052 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2280      	movs	r2, #128	@ 0x80
 800904e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	bc80      	pop	{r7}
 800905c:	4770      	bx	lr

0800905e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	bc80      	pop	{r7}
 8009070:	4770      	bx	lr

08009072 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009072:	b480      	push	{r7}
 8009074:	b083      	sub	sp, #12
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	bc80      	pop	{r7}
 8009084:	4770      	bx	lr

08009086 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009086:	b480      	push	{r7}
 8009088:	b085      	sub	sp, #20
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009094:	b29b      	uxth	r3, r3
 8009096:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009098:	68fb      	ldr	r3, [r7, #12]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	bc80      	pop	{r7}
 80090a2:	4770      	bx	lr

080090a4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bc80      	pop	{r7}
 80090b8:	4770      	bx	lr

080090ba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b08b      	sub	sp, #44	@ 0x2c
 80090be:	af00      	add	r7, sp, #0
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	4611      	mov	r1, r2
 80090c6:	461a      	mov	r2, r3
 80090c8:	460b      	mov	r3, r1
 80090ca:	80fb      	strh	r3, [r7, #6]
 80090cc:	4613      	mov	r3, r2
 80090ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80090d0:	88bb      	ldrh	r3, [r7, #4]
 80090d2:	3301      	adds	r3, #1
 80090d4:	085b      	lsrs	r3, r3, #1
 80090d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	005a      	lsls	r2, r3, #1
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80090ec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80090f2:	e01e      	b.n	8009132 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	3301      	adds	r3, #1
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	b21a      	sxth	r2, r3
 8009104:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009108:	4313      	orrs	r3, r2
 800910a:	b21b      	sxth	r3, r3
 800910c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	8a7a      	ldrh	r2, [r7, #18]
 8009112:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	3302      	adds	r3, #2
 8009118:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	3302      	adds	r3, #2
 800911e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	3301      	adds	r3, #1
 8009124:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	3301      	adds	r3, #1
 800912a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800912c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912e:	3b01      	subs	r3, #1
 8009130:	627b      	str	r3, [r7, #36]	@ 0x24
 8009132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1dd      	bne.n	80090f4 <USB_WritePMA+0x3a>
  }
}
 8009138:	bf00      	nop
 800913a:	bf00      	nop
 800913c:	372c      	adds	r7, #44	@ 0x2c
 800913e:	46bd      	mov	sp, r7
 8009140:	bc80      	pop	{r7}
 8009142:	4770      	bx	lr

08009144 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009144:	b480      	push	{r7}
 8009146:	b08b      	sub	sp, #44	@ 0x2c
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	4611      	mov	r1, r2
 8009150:	461a      	mov	r2, r3
 8009152:	460b      	mov	r3, r1
 8009154:	80fb      	strh	r3, [r7, #6]
 8009156:	4613      	mov	r3, r2
 8009158:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800915a:	88bb      	ldrh	r3, [r7, #4]
 800915c:	085b      	lsrs	r3, r3, #1
 800915e:	b29b      	uxth	r3, r3
 8009160:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800916a:	88fb      	ldrh	r3, [r7, #6]
 800916c:	005a      	lsls	r2, r3, #1
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009176:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	627b      	str	r3, [r7, #36]	@ 0x24
 800917c:	e01b      	b.n	80091b6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	b29b      	uxth	r3, r3
 8009184:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	3302      	adds	r3, #2
 800918a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	b2da      	uxtb	r2, r3
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	3301      	adds	r3, #1
 8009198:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	0a1b      	lsrs	r3, r3, #8
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	3301      	adds	r3, #1
 80091a8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	3302      	adds	r3, #2
 80091ae:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80091b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b2:	3b01      	subs	r3, #1
 80091b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80091b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e0      	bne.n	800917e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80091bc:	88bb      	ldrh	r3, [r7, #4]
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d007      	beq.n	80091d8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80091c8:	6a3b      	ldr	r3, [r7, #32]
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	701a      	strb	r2, [r3, #0]
  }
}
 80091d8:	bf00      	nop
 80091da:	372c      	adds	r7, #44	@ 0x2c
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc80      	pop	{r7}
 80091e0:	4770      	bx	lr

080091e2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	7c1b      	ldrb	r3, [r3, #16]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d115      	bne.n	8009226 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80091fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091fe:	2202      	movs	r2, #2
 8009200:	2181      	movs	r1, #129	@ 0x81
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 fe2b 	bl	800ae5e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800920e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009212:	2202      	movs	r2, #2
 8009214:	2101      	movs	r1, #1
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f001 fe21 	bl	800ae5e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8009224:	e012      	b.n	800924c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009226:	2340      	movs	r3, #64	@ 0x40
 8009228:	2202      	movs	r2, #2
 800922a:	2181      	movs	r1, #129	@ 0x81
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 fe16 	bl	800ae5e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009238:	2340      	movs	r3, #64	@ 0x40
 800923a:	2202      	movs	r2, #2
 800923c:	2101      	movs	r1, #1
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 fe0d 	bl	800ae5e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800924c:	2308      	movs	r3, #8
 800924e:	2203      	movs	r2, #3
 8009250:	2182      	movs	r1, #130	@ 0x82
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 fe03 	bl	800ae5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800925e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009262:	f001 ff23 	bl	800b0ac <USBD_static_malloc>
 8009266:	4602      	mov	r2, r0
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009278:	2301      	movs	r3, #1
 800927a:	73fb      	strb	r3, [r7, #15]
 800927c:	e026      	b.n	80092cc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009284:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	7c1b      	ldrb	r3, [r3, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d109      	bne.n	80092bc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80092ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092b2:	2101      	movs	r1, #1
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 fec2 	bl	800b03e <USBD_LL_PrepareReceive>
 80092ba:	e007      	b.n	80092cc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80092c2:	2340      	movs	r3, #64	@ 0x40
 80092c4:	2101      	movs	r1, #1
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f001 feb9 	bl	800b03e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	460b      	mov	r3, r1
 80092e0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80092e6:	2181      	movs	r1, #129	@ 0x81
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 fdde 	bl	800aeaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80092f4:	2101      	movs	r1, #1
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 fdd7 	bl	800aeaa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009304:	2182      	movs	r1, #130	@ 0x82
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f001 fdcf 	bl	800aeaa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00e      	beq.n	800933a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800932c:	4618      	mov	r0, r3
 800932e:	f001 fec9 	bl	800b0c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009354:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800936a:	2b00      	cmp	r3, #0
 800936c:	d039      	beq.n	80093e2 <USBD_CDC_Setup+0x9e>
 800936e:	2b20      	cmp	r3, #32
 8009370:	d17f      	bne.n	8009472 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	88db      	ldrh	r3, [r3, #6]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d029      	beq.n	80093ce <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	b25b      	sxtb	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	da11      	bge.n	80093a8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009390:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	88d2      	ldrh	r2, [r2, #6]
 8009396:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009398:	6939      	ldr	r1, [r7, #16]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	88db      	ldrh	r3, [r3, #6]
 800939e:	461a      	mov	r2, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 f9d5 	bl	800a750 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80093a6:	e06b      	b.n	8009480 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	785a      	ldrb	r2, [r3, #1]
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	88db      	ldrh	r3, [r3, #6]
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80093be:	6939      	ldr	r1, [r7, #16]
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	88db      	ldrh	r3, [r3, #6]
 80093c4:	461a      	mov	r2, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f001 f9f0 	bl	800a7ac <USBD_CtlPrepareRx>
      break;
 80093cc:	e058      	b.n	8009480 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	7850      	ldrb	r0, [r2, #1]
 80093da:	2200      	movs	r2, #0
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	4798      	blx	r3
      break;
 80093e0:	e04e      	b.n	8009480 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	785b      	ldrb	r3, [r3, #1]
 80093e6:	2b0b      	cmp	r3, #11
 80093e8:	d02e      	beq.n	8009448 <USBD_CDC_Setup+0x104>
 80093ea:	2b0b      	cmp	r3, #11
 80093ec:	dc38      	bgt.n	8009460 <USBD_CDC_Setup+0x11c>
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d002      	beq.n	80093f8 <USBD_CDC_Setup+0xb4>
 80093f2:	2b0a      	cmp	r3, #10
 80093f4:	d014      	beq.n	8009420 <USBD_CDC_Setup+0xdc>
 80093f6:	e033      	b.n	8009460 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d107      	bne.n	8009412 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009402:	f107 030c 	add.w	r3, r7, #12
 8009406:	2202      	movs	r2, #2
 8009408:	4619      	mov	r1, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f001 f9a0 	bl	800a750 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009410:	e02e      	b.n	8009470 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 f931 	bl	800a67c <USBD_CtlError>
            ret = USBD_FAIL;
 800941a:	2302      	movs	r3, #2
 800941c:	75fb      	strb	r3, [r7, #23]
          break;
 800941e:	e027      	b.n	8009470 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009426:	2b03      	cmp	r3, #3
 8009428:	d107      	bne.n	800943a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800942a:	f107 030f 	add.w	r3, r7, #15
 800942e:	2201      	movs	r2, #1
 8009430:	4619      	mov	r1, r3
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f001 f98c 	bl	800a750 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009438:	e01a      	b.n	8009470 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f001 f91d 	bl	800a67c <USBD_CtlError>
            ret = USBD_FAIL;
 8009442:	2302      	movs	r3, #2
 8009444:	75fb      	strb	r3, [r7, #23]
          break;
 8009446:	e013      	b.n	8009470 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800944e:	2b03      	cmp	r3, #3
 8009450:	d00d      	beq.n	800946e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 f911 	bl	800a67c <USBD_CtlError>
            ret = USBD_FAIL;
 800945a:	2302      	movs	r3, #2
 800945c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800945e:	e006      	b.n	800946e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f001 f90a 	bl	800a67c <USBD_CtlError>
          ret = USBD_FAIL;
 8009468:	2302      	movs	r3, #2
 800946a:	75fb      	strb	r3, [r7, #23]
          break;
 800946c:	e000      	b.n	8009470 <USBD_CDC_Setup+0x12c>
          break;
 800946e:	bf00      	nop
      }
      break;
 8009470:	e006      	b.n	8009480 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f001 f901 	bl	800a67c <USBD_CtlError>
      ret = USBD_FAIL;
 800947a:	2302      	movs	r3, #2
 800947c:	75fb      	strb	r3, [r7, #23]
      break;
 800947e:	bf00      	nop
  }

  return ret;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b084      	sub	sp, #16
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	460b      	mov	r3, r1
 8009494:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800949c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80094a4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d03a      	beq.n	8009526 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	440b      	add	r3, r1
 80094be:	331c      	adds	r3, #28
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d029      	beq.n	800951a <USBD_CDC_DataIn+0x90>
 80094c6:	78fa      	ldrb	r2, [r7, #3]
 80094c8:	6879      	ldr	r1, [r7, #4]
 80094ca:	4613      	mov	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	440b      	add	r3, r1
 80094d4:	331c      	adds	r3, #28
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	78f9      	ldrb	r1, [r7, #3]
 80094da:	68b8      	ldr	r0, [r7, #8]
 80094dc:	460b      	mov	r3, r1
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	440b      	add	r3, r1
 80094e2:	00db      	lsls	r3, r3, #3
 80094e4:	4403      	add	r3, r0
 80094e6:	3320      	adds	r3, #32
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	fbb2 f1f3 	udiv	r1, r2, r3
 80094ee:	fb01 f303 	mul.w	r3, r1, r3
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d110      	bne.n	800951a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80094f8:	78fa      	ldrb	r2, [r7, #3]
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	4613      	mov	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	440b      	add	r3, r1
 8009506:	331c      	adds	r3, #28
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800950c:	78f9      	ldrb	r1, [r7, #3]
 800950e:	2300      	movs	r3, #0
 8009510:	2200      	movs	r2, #0
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 fd70 	bl	800aff8 <USBD_LL_Transmit>
 8009518:	e003      	b.n	8009522 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	e000      	b.n	8009528 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009526:	2302      	movs	r3, #2
  }
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009542:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 fd9b 	bl	800b084 <USBD_LL_GetRxDataSize>
 800954e:	4602      	mov	r2, r0
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00d      	beq.n	800957c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009574:	4611      	mov	r1, r2
 8009576:	4798      	blx	r3

    return USBD_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	e000      	b.n	800957e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800957c:	2302      	movs	r3, #2
  }
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009594:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800959c:	2b00      	cmp	r3, #0
 800959e:	d014      	beq.n	80095ca <USBD_CDC_EP0_RxReady+0x44>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80095a6:	2bff      	cmp	r3, #255	@ 0xff
 80095a8:	d00f      	beq.n	80095ca <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80095b8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80095c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	22ff      	movs	r2, #255	@ 0xff
 80095c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2243      	movs	r2, #67	@ 0x43
 80095e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80095e2:	4b03      	ldr	r3, [pc, #12]	@ (80095f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	20000094 	.word	0x20000094

080095f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2243      	movs	r2, #67	@ 0x43
 8009600:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009602:	4b03      	ldr	r3, [pc, #12]	@ (8009610 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009604:	4618      	mov	r0, r3
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	bc80      	pop	{r7}
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	20000050 	.word	0x20000050

08009614 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2243      	movs	r2, #67	@ 0x43
 8009620:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009622:	4b03      	ldr	r3, [pc, #12]	@ (8009630 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009624:	4618      	mov	r0, r3
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	bc80      	pop	{r7}
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	200000d8 	.word	0x200000d8

08009634 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	220a      	movs	r2, #10
 8009640:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009642:	4b03      	ldr	r3, [pc, #12]	@ (8009650 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	bc80      	pop	{r7}
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	2000000c 	.word	0x2000000c

08009654 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800965e:	2302      	movs	r3, #2
 8009660:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d005      	beq.n	8009674 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009674:	7bfb      	ldrb	r3, [r7, #15]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	bc80      	pop	{r7}
 800967e:	4770      	bx	lr

08009680 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	4613      	mov	r3, r2
 800968c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009694:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800969e:	88fa      	ldrh	r2, [r7, #6]
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	371c      	adds	r7, #28
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc80      	pop	{r7}
 80096b0:	4770      	bx	lr

080096b2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096c2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bc80      	pop	{r7}
 80096d6:	4770      	bx	lr

080096d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d017      	beq.n	8009722 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	7c1b      	ldrb	r3, [r3, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d109      	bne.n	800970e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009700:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009704:	2101      	movs	r1, #1
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 fc99 	bl	800b03e <USBD_LL_PrepareReceive>
 800970c:	e007      	b.n	800971e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009714:	2340      	movs	r3, #64	@ 0x40
 8009716:	2101      	movs	r1, #1
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 fc90 	bl	800b03e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	e000      	b.n	8009724 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009722:	2302      	movs	r3, #2
  }
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	4613      	mov	r3, r2
 8009738:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009740:	2302      	movs	r3, #2
 8009742:	e01a      	b.n	800977a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	79fa      	ldrb	r2, [r7, #7]
 8009770:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f001 fafe 	bl	800ad74 <USBD_LL_Init>

  return USBD_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009782:	b480      	push	{r7}
 8009784:	b085      	sub	sp, #20
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d006      	beq.n	80097a4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	73fb      	strb	r3, [r7, #15]
 80097a2:	e001      	b.n	80097a8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80097a4:	2302      	movs	r3, #2
 80097a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bc80      	pop	{r7}
 80097b2:	4770      	bx	lr

080097b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f001 fb33 	bl	800ae28 <USBD_LL_Start>

  return USBD_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	bc80      	pop	{r7}
 80097de:	4770      	bx	lr

080097e0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80097ec:	2302      	movs	r3, #2
 80097ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00c      	beq.n	8009814 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	78fa      	ldrb	r2, [r7, #3]
 8009804:	4611      	mov	r1, r2
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009814:	7bfb      	ldrb	r3, [r7, #15]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b082      	sub	sp, #8
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	460b      	mov	r3, r1
 8009828:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	78fa      	ldrb	r2, [r7, #3]
 8009834:	4611      	mov	r1, r2
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	4798      	blx	r3

  return USBD_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fed7 	bl	800a60a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800986a:	461a      	mov	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009878:	f003 031f 	and.w	r3, r3, #31
 800987c:	2b02      	cmp	r3, #2
 800987e:	d016      	beq.n	80098ae <USBD_LL_SetupStage+0x6a>
 8009880:	2b02      	cmp	r3, #2
 8009882:	d81c      	bhi.n	80098be <USBD_LL_SetupStage+0x7a>
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <USBD_LL_SetupStage+0x4a>
 8009888:	2b01      	cmp	r3, #1
 800988a:	d008      	beq.n	800989e <USBD_LL_SetupStage+0x5a>
 800988c:	e017      	b.n	80098be <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f9ca 	bl	8009c30 <USBD_StdDevReq>
      break;
 800989c:	e01a      	b.n	80098d4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa2c 	bl	8009d04 <USBD_StdItfReq>
      break;
 80098ac:	e012      	b.n	80098d4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80098b4:	4619      	mov	r1, r3
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fa6c 	bl	8009d94 <USBD_StdEPReq>
      break;
 80098bc:	e00a      	b.n	80098d4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80098c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f001 fb0b 	bl	800aee8 <USBD_LL_StallEP>
      break;
 80098d2:	bf00      	nop
  }

  return USBD_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b086      	sub	sp, #24
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	60f8      	str	r0, [r7, #12]
 80098e6:	460b      	mov	r3, r1
 80098e8:	607a      	str	r2, [r7, #4]
 80098ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80098ec:	7afb      	ldrb	r3, [r7, #11]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d14b      	bne.n	800998a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80098f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009900:	2b03      	cmp	r3, #3
 8009902:	d134      	bne.n	800996e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	68da      	ldr	r2, [r3, #12]
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	429a      	cmp	r2, r3
 800990e:	d919      	bls.n	8009944 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	1ad2      	subs	r2, r2, r3
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009926:	429a      	cmp	r2, r3
 8009928:	d203      	bcs.n	8009932 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800992e:	b29b      	uxth	r3, r3
 8009930:	e002      	b.n	8009938 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009936:	b29b      	uxth	r3, r3
 8009938:	461a      	mov	r2, r3
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f000 ff53 	bl	800a7e8 <USBD_CtlContinueRx>
 8009942:	e038      	b.n	80099b6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00a      	beq.n	8009966 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009956:	2b03      	cmp	r3, #3
 8009958:	d105      	bne.n	8009966 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 ff50 	bl	800a80c <USBD_CtlSendStatus>
 800996c:	e023      	b.n	80099b6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009974:	2b05      	cmp	r3, #5
 8009976:	d11e      	bne.n	80099b6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009980:	2100      	movs	r1, #0
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f001 fab0 	bl	800aee8 <USBD_LL_StallEP>
 8009988:	e015      	b.n	80099b6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00d      	beq.n	80099b2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800999c:	2b03      	cmp	r3, #3
 800999e:	d108      	bne.n	80099b2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	7afa      	ldrb	r2, [r7, #11]
 80099aa:	4611      	mov	r1, r2
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	4798      	blx	r3
 80099b0:	e001      	b.n	80099b6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80099b2:	2302      	movs	r3, #2
 80099b4:	e000      	b.n	80099b8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3718      	adds	r7, #24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	460b      	mov	r3, r1
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80099ce:	7afb      	ldrb	r3, [r7, #11]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d17f      	bne.n	8009ad4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	3314      	adds	r3, #20
 80099d8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d15c      	bne.n	8009a9e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d915      	bls.n	8009a1c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	68da      	ldr	r2, [r3, #12]
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	1ad2      	subs	r2, r2, r3
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	461a      	mov	r2, r3
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 febd 	bl	800a788 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a0e:	2300      	movs	r3, #0
 8009a10:	2200      	movs	r2, #0
 8009a12:	2100      	movs	r1, #0
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f001 fb12 	bl	800b03e <USBD_LL_PrepareReceive>
 8009a1a:	e04e      	b.n	8009aba <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	6912      	ldr	r2, [r2, #16]
 8009a24:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a28:	fb01 f202 	mul.w	r2, r1, r2
 8009a2c:	1a9b      	subs	r3, r3, r2
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d11c      	bne.n	8009a6c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	689a      	ldr	r2, [r3, #8]
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d316      	bcc.n	8009a6c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	689a      	ldr	r2, [r3, #8]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d20f      	bcs.n	8009a6c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2100      	movs	r1, #0
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 fe99 	bl	800a788 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a5e:	2300      	movs	r3, #0
 8009a60:	2200      	movs	r2, #0
 8009a62:	2100      	movs	r1, #0
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f001 faea 	bl	800b03e <USBD_LL_PrepareReceive>
 8009a6a:	e026      	b.n	8009aba <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00a      	beq.n	8009a8e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d105      	bne.n	8009a8e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009a8e:	2180      	movs	r1, #128	@ 0x80
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f001 fa29 	bl	800aee8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f000 fecb 	bl	800a832 <USBD_CtlReceiveStatus>
 8009a9c:	e00d      	b.n	8009aba <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	d004      	beq.n	8009ab2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d103      	bne.n	8009aba <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009ab2:	2180      	movs	r1, #128	@ 0x80
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f001 fa17 	bl	800aee8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d11d      	bne.n	8009b00 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f7ff fe81 	bl	80097cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009ad2:	e015      	b.n	8009b00 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00d      	beq.n	8009afc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d108      	bne.n	8009afc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	7afa      	ldrb	r2, [r7, #11]
 8009af4:	4611      	mov	r1, r2
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	4798      	blx	r3
 8009afa:	e001      	b.n	8009b00 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009afc:	2302      	movs	r3, #2
 8009afe:	e000      	b.n	8009b02 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b12:	2340      	movs	r3, #64	@ 0x40
 8009b14:	2200      	movs	r2, #0
 8009b16:	2100      	movs	r1, #0
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f001 f9a0 	bl	800ae5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2240      	movs	r2, #64	@ 0x40
 8009b2a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b2e:	2340      	movs	r3, #64	@ 0x40
 8009b30:	2200      	movs	r2, #0
 8009b32:	2180      	movs	r1, #128	@ 0x80
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f001 f992 	bl	800ae5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2240      	movs	r2, #64	@ 0x40
 8009b44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d009      	beq.n	8009b82 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	6852      	ldr	r2, [r2, #4]
 8009b7a:	b2d2      	uxtb	r2, r2
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	4798      	blx	r3
  }

  return USBD_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	78fa      	ldrb	r2, [r7, #3]
 8009b9c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bc80      	pop	{r7}
 8009ba8:	4770      	bx	lr

08009baa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b083      	sub	sp, #12
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2204      	movs	r2, #4
 8009bc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bc80      	pop	{r7}
 8009bd0:	4770      	bx	lr

08009bd2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009be0:	2b04      	cmp	r3, #4
 8009be2:	d105      	bne.n	8009bf0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bc80      	pop	{r7}
 8009bfa:	4770      	bx	lr

08009bfc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c0a:	2b03      	cmp	r3, #3
 8009c0c:	d10b      	bne.n	8009c26 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d005      	beq.n	8009c26 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c20:	69db      	ldr	r3, [r3, #28]
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c46:	2b40      	cmp	r3, #64	@ 0x40
 8009c48:	d005      	beq.n	8009c56 <USBD_StdDevReq+0x26>
 8009c4a:	2b40      	cmp	r3, #64	@ 0x40
 8009c4c:	d84f      	bhi.n	8009cee <USBD_StdDevReq+0xbe>
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d009      	beq.n	8009c66 <USBD_StdDevReq+0x36>
 8009c52:	2b20      	cmp	r3, #32
 8009c54:	d14b      	bne.n	8009cee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	4798      	blx	r3
      break;
 8009c64:	e048      	b.n	8009cf8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	785b      	ldrb	r3, [r3, #1]
 8009c6a:	2b09      	cmp	r3, #9
 8009c6c:	d839      	bhi.n	8009ce2 <USBD_StdDevReq+0xb2>
 8009c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c74 <USBD_StdDevReq+0x44>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009cc5 	.word	0x08009cc5
 8009c78:	08009cd9 	.word	0x08009cd9
 8009c7c:	08009ce3 	.word	0x08009ce3
 8009c80:	08009ccf 	.word	0x08009ccf
 8009c84:	08009ce3 	.word	0x08009ce3
 8009c88:	08009ca7 	.word	0x08009ca7
 8009c8c:	08009c9d 	.word	0x08009c9d
 8009c90:	08009ce3 	.word	0x08009ce3
 8009c94:	08009cbb 	.word	0x08009cbb
 8009c98:	08009cb1 	.word	0x08009cb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 f9dc 	bl	800a05c <USBD_GetDescriptor>
          break;
 8009ca4:	e022      	b.n	8009cec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fb3f 	bl	800a32c <USBD_SetAddress>
          break;
 8009cae:	e01d      	b.n	8009cec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fb7e 	bl	800a3b4 <USBD_SetConfig>
          break;
 8009cb8:	e018      	b.n	8009cec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fc07 	bl	800a4d0 <USBD_GetConfig>
          break;
 8009cc2:	e013      	b.n	8009cec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fc37 	bl	800a53a <USBD_GetStatus>
          break;
 8009ccc:	e00e      	b.n	8009cec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fc65 	bl	800a5a0 <USBD_SetFeature>
          break;
 8009cd6:	e009      	b.n	8009cec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009cd8:	6839      	ldr	r1, [r7, #0]
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fc74 	bl	800a5c8 <USBD_ClrFeature>
          break;
 8009ce0:	e004      	b.n	8009cec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fcc9 	bl	800a67c <USBD_CtlError>
          break;
 8009cea:	bf00      	nop
      }
      break;
 8009cec:	e004      	b.n	8009cf8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fcc3 	bl	800a67c <USBD_CtlError>
      break;
 8009cf6:	bf00      	nop
  }

  return ret;
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop

08009d04 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d1a:	2b40      	cmp	r3, #64	@ 0x40
 8009d1c:	d005      	beq.n	8009d2a <USBD_StdItfReq+0x26>
 8009d1e:	2b40      	cmp	r3, #64	@ 0x40
 8009d20:	d82e      	bhi.n	8009d80 <USBD_StdItfReq+0x7c>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <USBD_StdItfReq+0x26>
 8009d26:	2b20      	cmp	r3, #32
 8009d28:	d12a      	bne.n	8009d80 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d30:	3b01      	subs	r3, #1
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d81d      	bhi.n	8009d72 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	889b      	ldrh	r3, [r3, #4]
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d813      	bhi.n	8009d68 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	4798      	blx	r3
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	88db      	ldrh	r3, [r3, #6]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d110      	bne.n	8009d7c <USBD_StdItfReq+0x78>
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10d      	bne.n	8009d7c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fd53 	bl	800a80c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d66:	e009      	b.n	8009d7c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fc86 	bl	800a67c <USBD_CtlError>
          break;
 8009d70:	e004      	b.n	8009d7c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fc81 	bl	800a67c <USBD_CtlError>
          break;
 8009d7a:	e000      	b.n	8009d7e <USBD_StdItfReq+0x7a>
          break;
 8009d7c:	bf00      	nop
      }
      break;
 8009d7e:	e004      	b.n	8009d8a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fc7a 	bl	800a67c <USBD_CtlError>
      break;
 8009d88:	bf00      	nop
  }

  return USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	889b      	ldrh	r3, [r3, #4]
 8009da6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009db0:	2b40      	cmp	r3, #64	@ 0x40
 8009db2:	d007      	beq.n	8009dc4 <USBD_StdEPReq+0x30>
 8009db4:	2b40      	cmp	r3, #64	@ 0x40
 8009db6:	f200 8146 	bhi.w	800a046 <USBD_StdEPReq+0x2b2>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00a      	beq.n	8009dd4 <USBD_StdEPReq+0x40>
 8009dbe:	2b20      	cmp	r3, #32
 8009dc0:	f040 8141 	bne.w	800a046 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	6839      	ldr	r1, [r7, #0]
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	4798      	blx	r3
      break;
 8009dd2:	e13d      	b.n	800a050 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ddc:	2b20      	cmp	r3, #32
 8009dde:	d10a      	bne.n	8009df6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	6839      	ldr	r1, [r7, #0]
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	4798      	blx	r3
 8009dee:	4603      	mov	r3, r0
 8009df0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	e12d      	b.n	800a052 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	785b      	ldrb	r3, [r3, #1]
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d007      	beq.n	8009e0e <USBD_StdEPReq+0x7a>
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	f300 811b 	bgt.w	800a03a <USBD_StdEPReq+0x2a6>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d072      	beq.n	8009eee <USBD_StdEPReq+0x15a>
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d03a      	beq.n	8009e82 <USBD_StdEPReq+0xee>
 8009e0c:	e115      	b.n	800a03a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e14:	2b02      	cmp	r3, #2
 8009e16:	d002      	beq.n	8009e1e <USBD_StdEPReq+0x8a>
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d015      	beq.n	8009e48 <USBD_StdEPReq+0xb4>
 8009e1c:	e02b      	b.n	8009e76 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00c      	beq.n	8009e3e <USBD_StdEPReq+0xaa>
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
 8009e26:	2b80      	cmp	r3, #128	@ 0x80
 8009e28:	d009      	beq.n	8009e3e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009e2a:	7bbb      	ldrb	r3, [r7, #14]
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f001 f85a 	bl	800aee8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009e34:	2180      	movs	r1, #128	@ 0x80
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f001 f856 	bl	800aee8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e3c:	e020      	b.n	8009e80 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fc1b 	bl	800a67c <USBD_CtlError>
              break;
 8009e46:	e01b      	b.n	8009e80 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	885b      	ldrh	r3, [r3, #2]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d10e      	bne.n	8009e6e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009e50:	7bbb      	ldrb	r3, [r7, #14]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00b      	beq.n	8009e6e <USBD_StdEPReq+0xda>
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b80      	cmp	r3, #128	@ 0x80
 8009e5a:	d008      	beq.n	8009e6e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	88db      	ldrh	r3, [r3, #6]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d104      	bne.n	8009e6e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 f83d 	bl	800aee8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fccc 	bl	800a80c <USBD_CtlSendStatus>

              break;
 8009e74:	e004      	b.n	8009e80 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fbff 	bl	800a67c <USBD_CtlError>
              break;
 8009e7e:	bf00      	nop
          }
          break;
 8009e80:	e0e0      	b.n	800a044 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d002      	beq.n	8009e92 <USBD_StdEPReq+0xfe>
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	d015      	beq.n	8009ebc <USBD_StdEPReq+0x128>
 8009e90:	e026      	b.n	8009ee0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e92:	7bbb      	ldrb	r3, [r7, #14]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00c      	beq.n	8009eb2 <USBD_StdEPReq+0x11e>
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
 8009e9a:	2b80      	cmp	r3, #128	@ 0x80
 8009e9c:	d009      	beq.n	8009eb2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f001 f820 	bl	800aee8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009ea8:	2180      	movs	r1, #128	@ 0x80
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 f81c 	bl	800aee8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009eb0:	e01c      	b.n	8009eec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fbe1 	bl	800a67c <USBD_CtlError>
              break;
 8009eba:	e017      	b.n	8009eec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	885b      	ldrh	r3, [r3, #2]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d112      	bne.n	8009eea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d004      	beq.n	8009ed8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ece:	7bbb      	ldrb	r3, [r7, #14]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 f827 	bl	800af26 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fc97 	bl	800a80c <USBD_CtlSendStatus>
              }
              break;
 8009ede:	e004      	b.n	8009eea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fbca 	bl	800a67c <USBD_CtlError>
              break;
 8009ee8:	e000      	b.n	8009eec <USBD_StdEPReq+0x158>
              break;
 8009eea:	bf00      	nop
          }
          break;
 8009eec:	e0aa      	b.n	800a044 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d002      	beq.n	8009efe <USBD_StdEPReq+0x16a>
 8009ef8:	2b03      	cmp	r3, #3
 8009efa:	d032      	beq.n	8009f62 <USBD_StdEPReq+0x1ce>
 8009efc:	e097      	b.n	800a02e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d007      	beq.n	8009f14 <USBD_StdEPReq+0x180>
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
 8009f06:	2b80      	cmp	r3, #128	@ 0x80
 8009f08:	d004      	beq.n	8009f14 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fbb5 	bl	800a67c <USBD_CtlError>
                break;
 8009f12:	e091      	b.n	800a038 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	da0b      	bge.n	8009f34 <USBD_StdEPReq+0x1a0>
 8009f1c:	7bbb      	ldrb	r3, [r7, #14]
 8009f1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f22:	4613      	mov	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	4413      	add	r3, r2
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	3310      	adds	r3, #16
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	4413      	add	r3, r2
 8009f30:	3304      	adds	r3, #4
 8009f32:	e00b      	b.n	8009f4c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f34:	7bbb      	ldrb	r3, [r7, #14]
 8009f36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	4413      	add	r3, r2
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	2200      	movs	r2, #0
 8009f52:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2202      	movs	r2, #2
 8009f58:	4619      	mov	r1, r3
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fbf8 	bl	800a750 <USBD_CtlSendData>
              break;
 8009f60:	e06a      	b.n	800a038 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	da11      	bge.n	8009f8e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	f003 020f 	and.w	r2, r3, #15
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	440b      	add	r3, r1
 8009f7c:	3318      	adds	r3, #24
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d117      	bne.n	8009fb4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fb78 	bl	800a67c <USBD_CtlError>
                  break;
 8009f8c:	e054      	b.n	800a038 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f8e:	7bbb      	ldrb	r3, [r7, #14]
 8009f90:	f003 020f 	and.w	r2, r3, #15
 8009f94:	6879      	ldr	r1, [r7, #4]
 8009f96:	4613      	mov	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	440b      	add	r3, r1
 8009fa0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d104      	bne.n	8009fb4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fb65 	bl	800a67c <USBD_CtlError>
                  break;
 8009fb2:	e041      	b.n	800a038 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	da0b      	bge.n	8009fd4 <USBD_StdEPReq+0x240>
 8009fbc:	7bbb      	ldrb	r3, [r7, #14]
 8009fbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	3310      	adds	r3, #16
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	4413      	add	r3, r2
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	e00b      	b.n	8009fec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
 8009fd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fda:	4613      	mov	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	4413      	add	r3, r2
 8009fea:	3304      	adds	r3, #4
 8009fec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fee:	7bbb      	ldrb	r3, [r7, #14]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <USBD_StdEPReq+0x266>
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	2b80      	cmp	r3, #128	@ 0x80
 8009ff8:	d103      	bne.n	800a002 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	e00e      	b.n	800a020 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a002:	7bbb      	ldrb	r3, [r7, #14]
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 ffac 	bl	800af64 <USBD_LL_IsStallEP>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d003      	beq.n	800a01a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2201      	movs	r2, #1
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	e002      	b.n	800a020 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2200      	movs	r2, #0
 800a01e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2202      	movs	r2, #2
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fb92 	bl	800a750 <USBD_CtlSendData>
              break;
 800a02c:	e004      	b.n	800a038 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 fb23 	bl	800a67c <USBD_CtlError>
              break;
 800a036:	bf00      	nop
          }
          break;
 800a038:	e004      	b.n	800a044 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 fb1d 	bl	800a67c <USBD_CtlError>
          break;
 800a042:	bf00      	nop
      }
      break;
 800a044:	e004      	b.n	800a050 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fb17 	bl	800a67c <USBD_CtlError>
      break;
 800a04e:	bf00      	nop
  }

  return ret;
 800a050:	7bfb      	ldrb	r3, [r7, #15]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a06e:	2300      	movs	r3, #0
 800a070:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	885b      	ldrh	r3, [r3, #2]
 800a076:	0a1b      	lsrs	r3, r3, #8
 800a078:	b29b      	uxth	r3, r3
 800a07a:	3b01      	subs	r3, #1
 800a07c:	2b06      	cmp	r3, #6
 800a07e:	f200 8128 	bhi.w	800a2d2 <USBD_GetDescriptor+0x276>
 800a082:	a201      	add	r2, pc, #4	@ (adr r2, 800a088 <USBD_GetDescriptor+0x2c>)
 800a084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a088:	0800a0a5 	.word	0x0800a0a5
 800a08c:	0800a0bd 	.word	0x0800a0bd
 800a090:	0800a0fd 	.word	0x0800a0fd
 800a094:	0800a2d3 	.word	0x0800a2d3
 800a098:	0800a2d3 	.word	0x0800a2d3
 800a09c:	0800a273 	.word	0x0800a273
 800a0a0:	0800a29f 	.word	0x0800a29f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	7c12      	ldrb	r2, [r2, #16]
 800a0b0:	f107 0108 	add.w	r1, r7, #8
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	4798      	blx	r3
 800a0b8:	60f8      	str	r0, [r7, #12]
      break;
 800a0ba:	e112      	b.n	800a2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	7c1b      	ldrb	r3, [r3, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10d      	bne.n	800a0e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0cc:	f107 0208 	add.w	r2, r7, #8
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	2202      	movs	r2, #2
 800a0dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0de:	e100      	b.n	800a2e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e8:	f107 0208 	add.w	r2, r7, #8
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	4798      	blx	r3
 800a0f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	701a      	strb	r2, [r3, #0]
      break;
 800a0fa:	e0f2      	b.n	800a2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	885b      	ldrh	r3, [r3, #2]
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b05      	cmp	r3, #5
 800a104:	f200 80ac 	bhi.w	800a260 <USBD_GetDescriptor+0x204>
 800a108:	a201      	add	r2, pc, #4	@ (adr r2, 800a110 <USBD_GetDescriptor+0xb4>)
 800a10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10e:	bf00      	nop
 800a110:	0800a129 	.word	0x0800a129
 800a114:	0800a15d 	.word	0x0800a15d
 800a118:	0800a191 	.word	0x0800a191
 800a11c:	0800a1c5 	.word	0x0800a1c5
 800a120:	0800a1f9 	.word	0x0800a1f9
 800a124:	0800a22d 	.word	0x0800a22d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00b      	beq.n	800a14c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	7c12      	ldrb	r2, [r2, #16]
 800a140:	f107 0108 	add.w	r1, r7, #8
 800a144:	4610      	mov	r0, r2
 800a146:	4798      	blx	r3
 800a148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a14a:	e091      	b.n	800a270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fa94 	bl	800a67c <USBD_CtlError>
            err++;
 800a154:	7afb      	ldrb	r3, [r7, #11]
 800a156:	3301      	adds	r3, #1
 800a158:	72fb      	strb	r3, [r7, #11]
          break;
 800a15a:	e089      	b.n	800a270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00b      	beq.n	800a180 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	7c12      	ldrb	r2, [r2, #16]
 800a174:	f107 0108 	add.w	r1, r7, #8
 800a178:	4610      	mov	r0, r2
 800a17a:	4798      	blx	r3
 800a17c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a17e:	e077      	b.n	800a270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 fa7a 	bl	800a67c <USBD_CtlError>
            err++;
 800a188:	7afb      	ldrb	r3, [r7, #11]
 800a18a:	3301      	adds	r3, #1
 800a18c:	72fb      	strb	r3, [r7, #11]
          break;
 800a18e:	e06f      	b.n	800a270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00b      	beq.n	800a1b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	7c12      	ldrb	r2, [r2, #16]
 800a1a8:	f107 0108 	add.w	r1, r7, #8
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4798      	blx	r3
 800a1b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1b2:	e05d      	b.n	800a270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fa60 	bl	800a67c <USBD_CtlError>
            err++;
 800a1bc:	7afb      	ldrb	r3, [r7, #11]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1c2:	e055      	b.n	800a270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00b      	beq.n	800a1e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	7c12      	ldrb	r2, [r2, #16]
 800a1dc:	f107 0108 	add.w	r1, r7, #8
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	4798      	blx	r3
 800a1e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1e6:	e043      	b.n	800a270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fa46 	bl	800a67c <USBD_CtlError>
            err++;
 800a1f0:	7afb      	ldrb	r3, [r7, #11]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1f6:	e03b      	b.n	800a270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00b      	beq.n	800a21c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	7c12      	ldrb	r2, [r2, #16]
 800a210:	f107 0108 	add.w	r1, r7, #8
 800a214:	4610      	mov	r0, r2
 800a216:	4798      	blx	r3
 800a218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a21a:	e029      	b.n	800a270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a21c:	6839      	ldr	r1, [r7, #0]
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fa2c 	bl	800a67c <USBD_CtlError>
            err++;
 800a224:	7afb      	ldrb	r3, [r7, #11]
 800a226:	3301      	adds	r3, #1
 800a228:	72fb      	strb	r3, [r7, #11]
          break;
 800a22a:	e021      	b.n	800a270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00b      	beq.n	800a250 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	7c12      	ldrb	r2, [r2, #16]
 800a244:	f107 0108 	add.w	r1, r7, #8
 800a248:	4610      	mov	r0, r2
 800a24a:	4798      	blx	r3
 800a24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a24e:	e00f      	b.n	800a270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fa12 	bl	800a67c <USBD_CtlError>
            err++;
 800a258:	7afb      	ldrb	r3, [r7, #11]
 800a25a:	3301      	adds	r3, #1
 800a25c:	72fb      	strb	r3, [r7, #11]
          break;
 800a25e:	e007      	b.n	800a270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fa0a 	bl	800a67c <USBD_CtlError>
          err++;
 800a268:	7afb      	ldrb	r3, [r7, #11]
 800a26a:	3301      	adds	r3, #1
 800a26c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a26e:	e038      	b.n	800a2e2 <USBD_GetDescriptor+0x286>
 800a270:	e037      	b.n	800a2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	7c1b      	ldrb	r3, [r3, #16]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d109      	bne.n	800a28e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a282:	f107 0208 	add.w	r2, r7, #8
 800a286:	4610      	mov	r0, r2
 800a288:	4798      	blx	r3
 800a28a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a28c:	e029      	b.n	800a2e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f9f3 	bl	800a67c <USBD_CtlError>
        err++;
 800a296:	7afb      	ldrb	r3, [r7, #11]
 800a298:	3301      	adds	r3, #1
 800a29a:	72fb      	strb	r3, [r7, #11]
      break;
 800a29c:	e021      	b.n	800a2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	7c1b      	ldrb	r3, [r3, #16]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10d      	bne.n	800a2c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ae:	f107 0208 	add.w	r2, r7, #8
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	4798      	blx	r3
 800a2b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	2207      	movs	r2, #7
 800a2be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2c0:	e00f      	b.n	800a2e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f9d9 	bl	800a67c <USBD_CtlError>
        err++;
 800a2ca:	7afb      	ldrb	r3, [r7, #11]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	72fb      	strb	r3, [r7, #11]
      break;
 800a2d0:	e007      	b.n	800a2e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 f9d1 	bl	800a67c <USBD_CtlError>
      err++;
 800a2da:	7afb      	ldrb	r3, [r7, #11]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	72fb      	strb	r3, [r7, #11]
      break;
 800a2e0:	bf00      	nop
  }

  if (err != 0U)
 800a2e2:	7afb      	ldrb	r3, [r7, #11]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d11c      	bne.n	800a322 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a2e8:	893b      	ldrh	r3, [r7, #8]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d011      	beq.n	800a312 <USBD_GetDescriptor+0x2b6>
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	88db      	ldrh	r3, [r3, #6]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00d      	beq.n	800a312 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	88da      	ldrh	r2, [r3, #6]
 800a2fa:	893b      	ldrh	r3, [r7, #8]
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	bf28      	it	cs
 800a300:	4613      	movcs	r3, r2
 800a302:	b29b      	uxth	r3, r3
 800a304:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a306:	893b      	ldrh	r3, [r7, #8]
 800a308:	461a      	mov	r2, r3
 800a30a:	68f9      	ldr	r1, [r7, #12]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fa1f 	bl	800a750 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	88db      	ldrh	r3, [r3, #6]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d104      	bne.n	800a324 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 fa76 	bl	800a80c <USBD_CtlSendStatus>
 800a320:	e000      	b.n	800a324 <USBD_GetDescriptor+0x2c8>
    return;
 800a322:	bf00      	nop
    }
  }
}
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop

0800a32c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	889b      	ldrh	r3, [r3, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d130      	bne.n	800a3a0 <USBD_SetAddress+0x74>
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	88db      	ldrh	r3, [r3, #6]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d12c      	bne.n	800a3a0 <USBD_SetAddress+0x74>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	885b      	ldrh	r3, [r3, #2]
 800a34a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a34c:	d828      	bhi.n	800a3a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	885b      	ldrh	r3, [r3, #2]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a358:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a360:	2b03      	cmp	r3, #3
 800a362:	d104      	bne.n	800a36e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a364:	6839      	ldr	r1, [r7, #0]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f988 	bl	800a67c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a36c:	e01d      	b.n	800a3aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	7bfa      	ldrb	r2, [r7, #15]
 800a372:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a376:	7bfb      	ldrb	r3, [r7, #15]
 800a378:	4619      	mov	r1, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fe1d 	bl	800afba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fa43 	bl	800a80c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a386:	7bfb      	ldrb	r3, [r7, #15]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d004      	beq.n	800a396 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2202      	movs	r2, #2
 800a390:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a394:	e009      	b.n	800a3aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a39e:	e004      	b.n	800a3aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f96a 	bl	800a67c <USBD_CtlError>
  }
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	885b      	ldrh	r3, [r3, #2]
 800a3c2:	b2da      	uxtb	r2, r3
 800a3c4:	4b41      	ldr	r3, [pc, #260]	@ (800a4cc <USBD_SetConfig+0x118>)
 800a3c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3c8:	4b40      	ldr	r3, [pc, #256]	@ (800a4cc <USBD_SetConfig+0x118>)
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d904      	bls.n	800a3da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f952 	bl	800a67c <USBD_CtlError>
 800a3d8:	e075      	b.n	800a4c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d002      	beq.n	800a3ea <USBD_SetConfig+0x36>
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d023      	beq.n	800a430 <USBD_SetConfig+0x7c>
 800a3e8:	e062      	b.n	800a4b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a3ea:	4b38      	ldr	r3, [pc, #224]	@ (800a4cc <USBD_SetConfig+0x118>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d01a      	beq.n	800a428 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a3f2:	4b36      	ldr	r3, [pc, #216]	@ (800a4cc <USBD_SetConfig+0x118>)
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2203      	movs	r2, #3
 800a400:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a404:	4b31      	ldr	r3, [pc, #196]	@ (800a4cc <USBD_SetConfig+0x118>)
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	4619      	mov	r1, r3
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff f9e8 	bl	80097e0 <USBD_SetClassConfig>
 800a410:	4603      	mov	r3, r0
 800a412:	2b02      	cmp	r3, #2
 800a414:	d104      	bne.n	800a420 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 f92f 	bl	800a67c <USBD_CtlError>
            return;
 800a41e:	e052      	b.n	800a4c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f9f3 	bl	800a80c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a426:	e04e      	b.n	800a4c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 f9ef 	bl	800a80c <USBD_CtlSendStatus>
        break;
 800a42e:	e04a      	b.n	800a4c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a430:	4b26      	ldr	r3, [pc, #152]	@ (800a4cc <USBD_SetConfig+0x118>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d112      	bne.n	800a45e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2202      	movs	r2, #2
 800a43c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a440:	4b22      	ldr	r3, [pc, #136]	@ (800a4cc <USBD_SetConfig+0x118>)
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	461a      	mov	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a44a:	4b20      	ldr	r3, [pc, #128]	@ (800a4cc <USBD_SetConfig+0x118>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7ff f9e4 	bl	800981e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f9d8 	bl	800a80c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a45c:	e033      	b.n	800a4c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a45e:	4b1b      	ldr	r3, [pc, #108]	@ (800a4cc <USBD_SetConfig+0x118>)
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d01d      	beq.n	800a4a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	b2db      	uxtb	r3, r3
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7ff f9d2 	bl	800981e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a47a:	4b14      	ldr	r3, [pc, #80]	@ (800a4cc <USBD_SetConfig+0x118>)
 800a47c:	781b      	ldrb	r3, [r3, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a484:	4b11      	ldr	r3, [pc, #68]	@ (800a4cc <USBD_SetConfig+0x118>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7ff f9a8 	bl	80097e0 <USBD_SetClassConfig>
 800a490:	4603      	mov	r3, r0
 800a492:	2b02      	cmp	r3, #2
 800a494:	d104      	bne.n	800a4a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a496:	6839      	ldr	r1, [r7, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f8ef 	bl	800a67c <USBD_CtlError>
            return;
 800a49e:	e012      	b.n	800a4c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f9b3 	bl	800a80c <USBD_CtlSendStatus>
        break;
 800a4a6:	e00e      	b.n	800a4c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f9af 	bl	800a80c <USBD_CtlSendStatus>
        break;
 800a4ae:	e00a      	b.n	800a4c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a4b0:	6839      	ldr	r1, [r7, #0]
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f8e2 	bl	800a67c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a4b8:	4b04      	ldr	r3, [pc, #16]	@ (800a4cc <USBD_SetConfig+0x118>)
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7ff f9ad 	bl	800981e <USBD_ClrClassConfig>
        break;
 800a4c4:	bf00      	nop
    }
  }
}
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	200003a0 	.word	0x200003a0

0800a4d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	88db      	ldrh	r3, [r3, #6]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d004      	beq.n	800a4ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f8c9 	bl	800a67c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a4ea:	e022      	b.n	800a532 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	dc02      	bgt.n	800a4fc <USBD_GetConfig+0x2c>
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	dc03      	bgt.n	800a502 <USBD_GetConfig+0x32>
 800a4fa:	e015      	b.n	800a528 <USBD_GetConfig+0x58>
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d00b      	beq.n	800a518 <USBD_GetConfig+0x48>
 800a500:	e012      	b.n	800a528 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	3308      	adds	r3, #8
 800a50c:	2201      	movs	r2, #1
 800a50e:	4619      	mov	r1, r3
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f91d 	bl	800a750 <USBD_CtlSendData>
        break;
 800a516:	e00c      	b.n	800a532 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	3304      	adds	r3, #4
 800a51c:	2201      	movs	r2, #1
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f915 	bl	800a750 <USBD_CtlSendData>
        break;
 800a526:	e004      	b.n	800a532 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f8a6 	bl	800a67c <USBD_CtlError>
        break;
 800a530:	bf00      	nop
}
 800a532:	bf00      	nop
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b082      	sub	sp, #8
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a54a:	3b01      	subs	r3, #1
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d81e      	bhi.n	800a58e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	88db      	ldrh	r3, [r3, #6]
 800a554:	2b02      	cmp	r3, #2
 800a556:	d004      	beq.n	800a562 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f88e 	bl	800a67c <USBD_CtlError>
        break;
 800a560:	e01a      	b.n	800a598 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d005      	beq.n	800a57e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	f043 0202 	orr.w	r2, r3, #2
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	330c      	adds	r3, #12
 800a582:	2202      	movs	r2, #2
 800a584:	4619      	mov	r1, r3
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f8e2 	bl	800a750 <USBD_CtlSendData>
      break;
 800a58c:	e004      	b.n	800a598 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f873 	bl	800a67c <USBD_CtlError>
      break;
 800a596:	bf00      	nop
  }
}
 800a598:	bf00      	nop
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	885b      	ldrh	r3, [r3, #2]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d106      	bne.n	800a5c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f926 	bl	800a80c <USBD_CtlSendStatus>
  }
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d80b      	bhi.n	800a5f6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	885b      	ldrh	r3, [r3, #2]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d10c      	bne.n	800a600 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f90c 	bl	800a80c <USBD_CtlSendStatus>
      }
      break;
 800a5f4:	e004      	b.n	800a600 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f83f 	bl	800a67c <USBD_CtlError>
      break;
 800a5fe:	e000      	b.n	800a602 <USBD_ClrFeature+0x3a>
      break;
 800a600:	bf00      	nop
  }
}
 800a602:	bf00      	nop
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	781a      	ldrb	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	785a      	ldrb	r2, [r3, #1]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	3302      	adds	r3, #2
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	3303      	adds	r3, #3
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	021b      	lsls	r3, r3, #8
 800a634:	b29b      	uxth	r3, r3
 800a636:	4413      	add	r3, r2
 800a638:	b29a      	uxth	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	3304      	adds	r3, #4
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	461a      	mov	r2, r3
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	3305      	adds	r3, #5
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	021b      	lsls	r3, r3, #8
 800a64e:	b29b      	uxth	r3, r3
 800a650:	4413      	add	r3, r2
 800a652:	b29a      	uxth	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	3306      	adds	r3, #6
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	3307      	adds	r3, #7
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	021b      	lsls	r3, r3, #8
 800a668:	b29b      	uxth	r3, r3
 800a66a:	4413      	add	r3, r2
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	80da      	strh	r2, [r3, #6]

}
 800a672:	bf00      	nop
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	bc80      	pop	{r7}
 800a67a:	4770      	bx	lr

0800a67c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a686:	2180      	movs	r1, #128	@ 0x80
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fc2d 	bl	800aee8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a68e:	2100      	movs	r1, #0
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fc29 	bl	800aee8 <USBD_LL_StallEP>
}
 800a696:	bf00      	nop
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b086      	sub	sp, #24
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d032      	beq.n	800a71a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f000 f834 	bl	800a722 <USBD_GetLen>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	3301      	adds	r3, #1
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	005b      	lsls	r3, r3, #1
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a6c8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ca:	1c5a      	adds	r2, r3, #1
 800a6cc:	75fa      	strb	r2, [r7, #23]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	7812      	ldrb	r2, [r2, #0]
 800a6d8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a6da:	7dfb      	ldrb	r3, [r7, #23]
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	75fa      	strb	r2, [r7, #23]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	2203      	movs	r2, #3
 800a6e8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a6ea:	e012      	b.n	800a712 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	1c5a      	adds	r2, r3, #1
 800a6f0:	60fa      	str	r2, [r7, #12]
 800a6f2:	7dfa      	ldrb	r2, [r7, #23]
 800a6f4:	1c51      	adds	r1, r2, #1
 800a6f6:	75f9      	strb	r1, [r7, #23]
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	440a      	add	r2, r1
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a702:	7dfb      	ldrb	r3, [r7, #23]
 800a704:	1c5a      	adds	r2, r3, #1
 800a706:	75fa      	strb	r2, [r7, #23]
 800a708:	461a      	mov	r2, r3
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	4413      	add	r3, r2
 800a70e:	2200      	movs	r2, #0
 800a710:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e8      	bne.n	800a6ec <USBD_GetString+0x4e>
    }
  }
}
 800a71a:	bf00      	nop
 800a71c:	3718      	adds	r7, #24
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a722:	b480      	push	{r7}
 800a724:	b085      	sub	sp, #20
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a72a:	2300      	movs	r3, #0
 800a72c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a72e:	e005      	b.n	800a73c <USBD_GetLen+0x1a>
  {
    len++;
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	3301      	adds	r3, #1
 800a734:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	3301      	adds	r3, #1
 800a73a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	781b      	ldrb	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1f5      	bne.n	800a730 <USBD_GetLen+0xe>
  }

  return len;
 800a744:	7bfb      	ldrb	r3, [r7, #15]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bc80      	pop	{r7}
 800a74e:	4770      	bx	lr

0800a750 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	4613      	mov	r3, r2
 800a75c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2202      	movs	r2, #2
 800a762:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a766:	88fa      	ldrh	r2, [r7, #6]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a76c:	88fa      	ldrh	r2, [r7, #6]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a772:	88fb      	ldrh	r3, [r7, #6]
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	2100      	movs	r1, #0
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f000 fc3d 	bl	800aff8 <USBD_LL_Transmit>

  return USBD_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3710      	adds	r7, #16
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	4613      	mov	r3, r2
 800a794:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a796:	88fb      	ldrh	r3, [r7, #6]
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	2100      	movs	r1, #0
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f000 fc2b 	bl	800aff8 <USBD_LL_Transmit>

  return USBD_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2203      	movs	r2, #3
 800a7be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a7c2:	88fa      	ldrh	r2, [r7, #6]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a7ca:	88fa      	ldrh	r2, [r7, #6]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7d2:	88fb      	ldrh	r3, [r7, #6]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f000 fc30 	bl	800b03e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	4613      	mov	r3, r2
 800a7f4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7f6:	88fb      	ldrh	r3, [r7, #6]
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 fc1e 	bl	800b03e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2204      	movs	r2, #4
 800a818:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a81c:	2300      	movs	r3, #0
 800a81e:	2200      	movs	r2, #0
 800a820:	2100      	movs	r1, #0
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fbe8 	bl	800aff8 <USBD_LL_Transmit>

  return USBD_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b082      	sub	sp, #8
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2205      	movs	r2, #5
 800a83e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a842:	2300      	movs	r3, #0
 800a844:	2200      	movs	r2, #0
 800a846:	2100      	movs	r1, #0
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 fbf8 	bl	800b03e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a85c:	2200      	movs	r2, #0
 800a85e:	4912      	ldr	r1, [pc, #72]	@ (800a8a8 <MX_USB_DEVICE_Init+0x50>)
 800a860:	4812      	ldr	r0, [pc, #72]	@ (800a8ac <MX_USB_DEVICE_Init+0x54>)
 800a862:	f7fe ff63 	bl	800972c <USBD_Init>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a86c:	f7f6 fc06 	bl	800107c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a870:	490f      	ldr	r1, [pc, #60]	@ (800a8b0 <MX_USB_DEVICE_Init+0x58>)
 800a872:	480e      	ldr	r0, [pc, #56]	@ (800a8ac <MX_USB_DEVICE_Init+0x54>)
 800a874:	f7fe ff85 	bl	8009782 <USBD_RegisterClass>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d001      	beq.n	800a882 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a87e:	f7f6 fbfd 	bl	800107c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a882:	490c      	ldr	r1, [pc, #48]	@ (800a8b4 <MX_USB_DEVICE_Init+0x5c>)
 800a884:	4809      	ldr	r0, [pc, #36]	@ (800a8ac <MX_USB_DEVICE_Init+0x54>)
 800a886:	f7fe fee5 	bl	8009654 <USBD_CDC_RegisterInterface>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a890:	f7f6 fbf4 	bl	800107c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a894:	4805      	ldr	r0, [pc, #20]	@ (800a8ac <MX_USB_DEVICE_Init+0x54>)
 800a896:	f7fe ff8d 	bl	80097b4 <USBD_Start>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a8a0:	f7f6 fbec 	bl	800107c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a8a4:	bf00      	nop
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	2000012c 	.word	0x2000012c
 800a8ac:	200003a4 	.word	0x200003a4
 800a8b0:	20000018 	.word	0x20000018
 800a8b4:	2000011c 	.word	0x2000011c

0800a8b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a8bc:	2200      	movs	r2, #0
 800a8be:	4905      	ldr	r1, [pc, #20]	@ (800a8d4 <CDC_Init_FS+0x1c>)
 800a8c0:	4805      	ldr	r0, [pc, #20]	@ (800a8d8 <CDC_Init_FS+0x20>)
 800a8c2:	f7fe fedd 	bl	8009680 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a8c6:	4905      	ldr	r1, [pc, #20]	@ (800a8dc <CDC_Init_FS+0x24>)
 800a8c8:	4803      	ldr	r0, [pc, #12]	@ (800a8d8 <CDC_Init_FS+0x20>)
 800a8ca:	f7fe fef2 	bl	80096b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a8ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	20000a68 	.word	0x20000a68
 800a8d8:	200003a4 	.word	0x200003a4
 800a8dc:	20000668 	.word	0x20000668

0800a8e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a8e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bc80      	pop	{r7}
 800a8ec:	4770      	bx	lr
	...

0800a8f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	6039      	str	r1, [r7, #0]
 800a8fa:	71fb      	strb	r3, [r7, #7]
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a900:	79fb      	ldrb	r3, [r7, #7]
 800a902:	2b23      	cmp	r3, #35	@ 0x23
 800a904:	d84a      	bhi.n	800a99c <CDC_Control_FS+0xac>
 800a906:	a201      	add	r2, pc, #4	@ (adr r2, 800a90c <CDC_Control_FS+0x1c>)
 800a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90c:	0800a99d 	.word	0x0800a99d
 800a910:	0800a99d 	.word	0x0800a99d
 800a914:	0800a99d 	.word	0x0800a99d
 800a918:	0800a99d 	.word	0x0800a99d
 800a91c:	0800a99d 	.word	0x0800a99d
 800a920:	0800a99d 	.word	0x0800a99d
 800a924:	0800a99d 	.word	0x0800a99d
 800a928:	0800a99d 	.word	0x0800a99d
 800a92c:	0800a99d 	.word	0x0800a99d
 800a930:	0800a99d 	.word	0x0800a99d
 800a934:	0800a99d 	.word	0x0800a99d
 800a938:	0800a99d 	.word	0x0800a99d
 800a93c:	0800a99d 	.word	0x0800a99d
 800a940:	0800a99d 	.word	0x0800a99d
 800a944:	0800a99d 	.word	0x0800a99d
 800a948:	0800a99d 	.word	0x0800a99d
 800a94c:	0800a99d 	.word	0x0800a99d
 800a950:	0800a99d 	.word	0x0800a99d
 800a954:	0800a99d 	.word	0x0800a99d
 800a958:	0800a99d 	.word	0x0800a99d
 800a95c:	0800a99d 	.word	0x0800a99d
 800a960:	0800a99d 	.word	0x0800a99d
 800a964:	0800a99d 	.word	0x0800a99d
 800a968:	0800a99d 	.word	0x0800a99d
 800a96c:	0800a99d 	.word	0x0800a99d
 800a970:	0800a99d 	.word	0x0800a99d
 800a974:	0800a99d 	.word	0x0800a99d
 800a978:	0800a99d 	.word	0x0800a99d
 800a97c:	0800a99d 	.word	0x0800a99d
 800a980:	0800a99d 	.word	0x0800a99d
 800a984:	0800a99d 	.word	0x0800a99d
 800a988:	0800a99d 	.word	0x0800a99d
 800a98c:	0800a99d 	.word	0x0800a99d
 800a990:	0800a99d 	.word	0x0800a99d
 800a994:	0800a99d 	.word	0x0800a99d
 800a998:	0800a99d 	.word	0x0800a99d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a99c:	bf00      	nop
  }

  return (USBD_OK);
 800a99e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bc80      	pop	{r7}
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop

0800a9ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a9b6:	6879      	ldr	r1, [r7, #4]
 800a9b8:	4805      	ldr	r0, [pc, #20]	@ (800a9d0 <CDC_Receive_FS+0x24>)
 800a9ba:	f7fe fe7a 	bl	80096b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a9be:	4804      	ldr	r0, [pc, #16]	@ (800a9d0 <CDC_Receive_FS+0x24>)
 800a9c0:	f7fe fe8a 	bl	80096d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a9c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	200003a4 	.word	0x200003a4

0800a9d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	6039      	str	r1, [r7, #0]
 800a9de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	2212      	movs	r2, #18
 800a9e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a9e6:	4b03      	ldr	r3, [pc, #12]	@ (800a9f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bc80      	pop	{r7}
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	20000148 	.word	0x20000148

0800a9f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	6039      	str	r1, [r7, #0]
 800aa02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	2204      	movs	r2, #4
 800aa08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa0a:	4b03      	ldr	r3, [pc, #12]	@ (800aa18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bc80      	pop	{r7}
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	2000015c 	.word	0x2000015c

0800aa1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	6039      	str	r1, [r7, #0]
 800aa26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa28:	79fb      	ldrb	r3, [r7, #7]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d105      	bne.n	800aa3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	4907      	ldr	r1, [pc, #28]	@ (800aa50 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa32:	4808      	ldr	r0, [pc, #32]	@ (800aa54 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa34:	f7ff fe33 	bl	800a69e <USBD_GetString>
 800aa38:	e004      	b.n	800aa44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	4904      	ldr	r1, [pc, #16]	@ (800aa50 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa3e:	4805      	ldr	r0, [pc, #20]	@ (800aa54 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa40:	f7ff fe2d 	bl	800a69e <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa44:	4b02      	ldr	r3, [pc, #8]	@ (800aa50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20000e68 	.word	0x20000e68
 800aa54:	0800bc58 	.word	0x0800bc58

0800aa58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	6039      	str	r1, [r7, #0]
 800aa62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	4904      	ldr	r1, [pc, #16]	@ (800aa78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa68:	4804      	ldr	r0, [pc, #16]	@ (800aa7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa6a:	f7ff fe18 	bl	800a69e <USBD_GetString>
  return USBD_StrDesc;
 800aa6e:	4b02      	ldr	r3, [pc, #8]	@ (800aa78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20000e68 	.word	0x20000e68
 800aa7c:	0800bc70 	.word	0x0800bc70

0800aa80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	6039      	str	r1, [r7, #0]
 800aa8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	221a      	movs	r2, #26
 800aa90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa92:	f000 f843 	bl	800ab1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa96:	4b02      	ldr	r3, [pc, #8]	@ (800aaa0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	20000160 	.word	0x20000160

0800aaa4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	4603      	mov	r3, r0
 800aaac:	6039      	str	r1, [r7, #0]
 800aaae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aab0:	79fb      	ldrb	r3, [r7, #7]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d105      	bne.n	800aac2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	4907      	ldr	r1, [pc, #28]	@ (800aad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aaba:	4808      	ldr	r0, [pc, #32]	@ (800aadc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aabc:	f7ff fdef 	bl	800a69e <USBD_GetString>
 800aac0:	e004      	b.n	800aacc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	4904      	ldr	r1, [pc, #16]	@ (800aad8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aac6:	4805      	ldr	r0, [pc, #20]	@ (800aadc <USBD_FS_ConfigStrDescriptor+0x38>)
 800aac8:	f7ff fde9 	bl	800a69e <USBD_GetString>
  }
  return USBD_StrDesc;
 800aacc:	4b02      	ldr	r3, [pc, #8]	@ (800aad8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20000e68 	.word	0x20000e68
 800aadc:	0800bc84 	.word	0x0800bc84

0800aae0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	4603      	mov	r3, r0
 800aae8:	6039      	str	r1, [r7, #0]
 800aaea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d105      	bne.n	800aafe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	4907      	ldr	r1, [pc, #28]	@ (800ab14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaf6:	4808      	ldr	r0, [pc, #32]	@ (800ab18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaf8:	f7ff fdd1 	bl	800a69e <USBD_GetString>
 800aafc:	e004      	b.n	800ab08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aafe:	683a      	ldr	r2, [r7, #0]
 800ab00:	4904      	ldr	r1, [pc, #16]	@ (800ab14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab02:	4805      	ldr	r0, [pc, #20]	@ (800ab18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab04:	f7ff fdcb 	bl	800a69e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab08:	4b02      	ldr	r3, [pc, #8]	@ (800ab14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20000e68 	.word	0x20000e68
 800ab18:	0800bc90 	.word	0x0800bc90

0800ab1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab22:	4b0f      	ldr	r3, [pc, #60]	@ (800ab60 <Get_SerialNum+0x44>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab28:	4b0e      	ldr	r3, [pc, #56]	@ (800ab64 <Get_SerialNum+0x48>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ab68 <Get_SerialNum+0x4c>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	4413      	add	r3, r2
 800ab3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d009      	beq.n	800ab56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab42:	2208      	movs	r2, #8
 800ab44:	4909      	ldr	r1, [pc, #36]	@ (800ab6c <Get_SerialNum+0x50>)
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f000 f814 	bl	800ab74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab4c:	2204      	movs	r2, #4
 800ab4e:	4908      	ldr	r1, [pc, #32]	@ (800ab70 <Get_SerialNum+0x54>)
 800ab50:	68b8      	ldr	r0, [r7, #8]
 800ab52:	f000 f80f 	bl	800ab74 <IntToUnicode>
  }
}
 800ab56:	bf00      	nop
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	1ffff7e8 	.word	0x1ffff7e8
 800ab64:	1ffff7ec 	.word	0x1ffff7ec
 800ab68:	1ffff7f0 	.word	0x1ffff7f0
 800ab6c:	20000162 	.word	0x20000162
 800ab70:	20000172 	.word	0x20000172

0800ab74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b087      	sub	sp, #28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab82:	2300      	movs	r3, #0
 800ab84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab86:	2300      	movs	r3, #0
 800ab88:	75fb      	strb	r3, [r7, #23]
 800ab8a:	e027      	b.n	800abdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	0f1b      	lsrs	r3, r3, #28
 800ab90:	2b09      	cmp	r3, #9
 800ab92:	d80b      	bhi.n	800abac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	0f1b      	lsrs	r3, r3, #28
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	7dfb      	ldrb	r3, [r7, #23]
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	4619      	mov	r1, r3
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	440b      	add	r3, r1
 800aba4:	3230      	adds	r2, #48	@ 0x30
 800aba6:	b2d2      	uxtb	r2, r2
 800aba8:	701a      	strb	r2, [r3, #0]
 800abaa:	e00a      	b.n	800abc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	0f1b      	lsrs	r3, r3, #28
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	4619      	mov	r1, r3
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	440b      	add	r3, r1
 800abbc:	3237      	adds	r2, #55	@ 0x37
 800abbe:	b2d2      	uxtb	r2, r2
 800abc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	011b      	lsls	r3, r3, #4
 800abc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abc8:	7dfb      	ldrb	r3, [r7, #23]
 800abca:	005b      	lsls	r3, r3, #1
 800abcc:	3301      	adds	r3, #1
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	4413      	add	r3, r2
 800abd2:	2200      	movs	r2, #0
 800abd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abd6:	7dfb      	ldrb	r3, [r7, #23]
 800abd8:	3301      	adds	r3, #1
 800abda:	75fb      	strb	r3, [r7, #23]
 800abdc:	7dfa      	ldrb	r2, [r7, #23]
 800abde:	79fb      	ldrb	r3, [r7, #7]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d3d3      	bcc.n	800ab8c <IntToUnicode+0x18>
  }
}
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop
 800abe8:	371c      	adds	r7, #28
 800abea:	46bd      	mov	sp, r7
 800abec:	bc80      	pop	{r7}
 800abee:	4770      	bx	lr

0800abf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a0d      	ldr	r2, [pc, #52]	@ (800ac34 <HAL_PCD_MspInit+0x44>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d113      	bne.n	800ac2a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ac02:	4b0d      	ldr	r3, [pc, #52]	@ (800ac38 <HAL_PCD_MspInit+0x48>)
 800ac04:	69db      	ldr	r3, [r3, #28]
 800ac06:	4a0c      	ldr	r2, [pc, #48]	@ (800ac38 <HAL_PCD_MspInit+0x48>)
 800ac08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ac0c:	61d3      	str	r3, [r2, #28]
 800ac0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac38 <HAL_PCD_MspInit+0x48>)
 800ac10:	69db      	ldr	r3, [r3, #28]
 800ac12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac16:	60fb      	str	r3, [r7, #12]
 800ac18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	2014      	movs	r0, #20
 800ac20:	f7f7 fa73 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ac24:	2014      	movs	r0, #20
 800ac26:	f7f7 fa8c 	bl	8002142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ac2a:	bf00      	nop
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	40005c00 	.word	0x40005c00
 800ac38:	40021000 	.word	0x40021000

0800ac3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800ac50:	4619      	mov	r1, r3
 800ac52:	4610      	mov	r0, r2
 800ac54:	f7fe fdf6 	bl	8009844 <USBD_LL_SetupStage>
}
 800ac58:	bf00      	nop
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ac72:	78fa      	ldrb	r2, [r7, #3]
 800ac74:	6879      	ldr	r1, [r7, #4]
 800ac76:	4613      	mov	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	440b      	add	r3, r1
 800ac80:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	78fb      	ldrb	r3, [r7, #3]
 800ac88:	4619      	mov	r1, r3
 800ac8a:	f7fe fe28 	bl	80098de <USBD_LL_DataOutStage>
}
 800ac8e:	bf00      	nop
 800ac90:	3708      	adds	r7, #8
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b082      	sub	sp, #8
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800aca8:	78fa      	ldrb	r2, [r7, #3]
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	4613      	mov	r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	00db      	lsls	r3, r3, #3
 800acb4:	440b      	add	r3, r1
 800acb6:	3324      	adds	r3, #36	@ 0x24
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	78fb      	ldrb	r3, [r7, #3]
 800acbc:	4619      	mov	r1, r3
 800acbe:	f7fe fe7f 	bl	80099c0 <USBD_LL_DataInStage>
}
 800acc2:	bf00      	nop
 800acc4:	3708      	adds	r7, #8
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b082      	sub	sp, #8
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acd8:	4618      	mov	r0, r3
 800acda:	f7fe ff8f 	bl	8009bfc <USBD_LL_SOF>
}
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b084      	sub	sp, #16
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800acee:	2301      	movs	r3, #1
 800acf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	799b      	ldrb	r3, [r3, #6]
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	d001      	beq.n	800acfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800acfa:	f7f6 f9bf 	bl	800107c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad04:	7bfa      	ldrb	r2, [r7, #15]
 800ad06:	4611      	mov	r1, r2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fe ff3f 	bl	8009b8c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fe fef8 	bl	8009b0a <USBD_LL_Reset>
}
 800ad1a:	bf00      	nop
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fe ff39 	bl	8009baa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	7a9b      	ldrb	r3, [r3, #10]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d005      	beq.n	800ad4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad40:	4b04      	ldr	r3, [pc, #16]	@ (800ad54 <HAL_PCD_SuspendCallback+0x30>)
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	4a03      	ldr	r2, [pc, #12]	@ (800ad54 <HAL_PCD_SuspendCallback+0x30>)
 800ad46:	f043 0306 	orr.w	r3, r3, #6
 800ad4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad4c:	bf00      	nop
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	e000ed00 	.word	0xe000ed00

0800ad58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe ff33 	bl	8009bd2 <USBD_LL_Resume>
}
 800ad6c:	bf00      	nop
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ad7c:	4a28      	ldr	r2, [pc, #160]	@ (800ae20 <USBD_LL_Init+0xac>)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a26      	ldr	r2, [pc, #152]	@ (800ae20 <USBD_LL_Init+0xac>)
 800ad88:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ad8c:	4b24      	ldr	r3, [pc, #144]	@ (800ae20 <USBD_LL_Init+0xac>)
 800ad8e:	4a25      	ldr	r2, [pc, #148]	@ (800ae24 <USBD_LL_Init+0xb0>)
 800ad90:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ad92:	4b23      	ldr	r3, [pc, #140]	@ (800ae20 <USBD_LL_Init+0xac>)
 800ad94:	2208      	movs	r2, #8
 800ad96:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ad98:	4b21      	ldr	r3, [pc, #132]	@ (800ae20 <USBD_LL_Init+0xac>)
 800ad9a:	2202      	movs	r2, #2
 800ad9c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ad9e:	4b20      	ldr	r3, [pc, #128]	@ (800ae20 <USBD_LL_Init+0xac>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ada4:	4b1e      	ldr	r3, [pc, #120]	@ (800ae20 <USBD_LL_Init+0xac>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800adaa:	4b1d      	ldr	r3, [pc, #116]	@ (800ae20 <USBD_LL_Init+0xac>)
 800adac:	2200      	movs	r2, #0
 800adae:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800adb0:	481b      	ldr	r0, [pc, #108]	@ (800ae20 <USBD_LL_Init+0xac>)
 800adb2:	f7f8 fdb8 	bl	8003926 <HAL_PCD_Init>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800adbc:	f7f6 f95e 	bl	800107c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800adc6:	2318      	movs	r3, #24
 800adc8:	2200      	movs	r2, #0
 800adca:	2100      	movs	r1, #0
 800adcc:	f7fa fac9 	bl	8005362 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800add6:	2358      	movs	r3, #88	@ 0x58
 800add8:	2200      	movs	r2, #0
 800adda:	2180      	movs	r1, #128	@ 0x80
 800addc:	f7fa fac1 	bl	8005362 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ade6:	23c0      	movs	r3, #192	@ 0xc0
 800ade8:	2200      	movs	r2, #0
 800adea:	2181      	movs	r1, #129	@ 0x81
 800adec:	f7fa fab9 	bl	8005362 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800adf6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800adfa:	2200      	movs	r2, #0
 800adfc:	2101      	movs	r1, #1
 800adfe:	f7fa fab0 	bl	8005362 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ae08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2182      	movs	r1, #130	@ 0x82
 800ae10:	f7fa faa7 	bl	8005362 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	20001068 	.word	0x20001068
 800ae24:	40005c00 	.word	0x40005c00

0800ae28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7f8 fe67 	bl	8003b12 <HAL_PCD_Start>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 f94e 	bl	800b0ec <USBD_Get_USB_Status>
 800ae50:	4603      	mov	r3, r0
 800ae52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b084      	sub	sp, #16
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	4608      	mov	r0, r1
 800ae68:	4611      	mov	r1, r2
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	70fb      	strb	r3, [r7, #3]
 800ae70:	460b      	mov	r3, r1
 800ae72:	70bb      	strb	r3, [r7, #2]
 800ae74:	4613      	mov	r3, r2
 800ae76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ae86:	78bb      	ldrb	r3, [r7, #2]
 800ae88:	883a      	ldrh	r2, [r7, #0]
 800ae8a:	78f9      	ldrb	r1, [r7, #3]
 800ae8c:	f7f8 ffbb 	bl	8003e06 <HAL_PCD_EP_Open>
 800ae90:	4603      	mov	r3, r0
 800ae92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae94:	7bfb      	ldrb	r3, [r7, #15]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f000 f928 	bl	800b0ec <USBD_Get_USB_Status>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b084      	sub	sp, #16
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aec4:	78fa      	ldrb	r2, [r7, #3]
 800aec6:	4611      	mov	r1, r2
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7f8 fff9 	bl	8003ec0 <HAL_PCD_EP_Close>
 800aece:	4603      	mov	r3, r0
 800aed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f000 f909 	bl	800b0ec <USBD_Get_USB_Status>
 800aeda:	4603      	mov	r3, r0
 800aedc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aede:	7bbb      	ldrb	r3, [r7, #14]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	460b      	mov	r3, r1
 800aef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af02:	78fa      	ldrb	r2, [r7, #3]
 800af04:	4611      	mov	r1, r2
 800af06:	4618      	mov	r0, r3
 800af08:	f7f9 f8a1 	bl	800404e <HAL_PCD_EP_SetStall>
 800af0c:	4603      	mov	r3, r0
 800af0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af10:	7bfb      	ldrb	r3, [r7, #15]
 800af12:	4618      	mov	r0, r3
 800af14:	f000 f8ea 	bl	800b0ec <USBD_Get_USB_Status>
 800af18:	4603      	mov	r3, r0
 800af1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b084      	sub	sp, #16
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	460b      	mov	r3, r1
 800af30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af36:	2300      	movs	r3, #0
 800af38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af40:	78fa      	ldrb	r2, [r7, #3]
 800af42:	4611      	mov	r1, r2
 800af44:	4618      	mov	r0, r3
 800af46:	f7f9 f8e2 	bl	800410e <HAL_PCD_EP_ClrStall>
 800af4a:	4603      	mov	r3, r0
 800af4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af4e:	7bfb      	ldrb	r3, [r7, #15]
 800af50:	4618      	mov	r0, r3
 800af52:	f000 f8cb 	bl	800b0ec <USBD_Get_USB_Status>
 800af56:	4603      	mov	r3, r0
 800af58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	460b      	mov	r3, r1
 800af6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	da0b      	bge.n	800af98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af80:	78fb      	ldrb	r3, [r7, #3]
 800af82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af86:	68f9      	ldr	r1, [r7, #12]
 800af88:	4613      	mov	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4413      	add	r3, r2
 800af8e:	00db      	lsls	r3, r3, #3
 800af90:	440b      	add	r3, r1
 800af92:	3312      	adds	r3, #18
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	e00b      	b.n	800afb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af98:	78fb      	ldrb	r3, [r7, #3]
 800af9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af9e:	68f9      	ldr	r1, [r7, #12]
 800afa0:	4613      	mov	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	4413      	add	r3, r2
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	440b      	add	r3, r1
 800afaa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800afae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3714      	adds	r7, #20
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bc80      	pop	{r7}
 800afb8:	4770      	bx	lr

0800afba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b084      	sub	sp, #16
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	460b      	mov	r3, r1
 800afc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800afd4:	78fa      	ldrb	r2, [r7, #3]
 800afd6:	4611      	mov	r1, r2
 800afd8:	4618      	mov	r0, r3
 800afda:	f7f8 fef0 	bl	8003dbe <HAL_PCD_SetAddress>
 800afde:	4603      	mov	r3, r0
 800afe0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f000 f881 	bl	800b0ec <USBD_Get_USB_Status>
 800afea:	4603      	mov	r3, r0
 800afec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afee:	7bbb      	ldrb	r3, [r7, #14]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	607a      	str	r2, [r7, #4]
 800b002:	461a      	mov	r2, r3
 800b004:	460b      	mov	r3, r1
 800b006:	72fb      	strb	r3, [r7, #11]
 800b008:	4613      	mov	r3, r2
 800b00a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b00c:	2300      	movs	r3, #0
 800b00e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b010:	2300      	movs	r3, #0
 800b012:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b01a:	893b      	ldrh	r3, [r7, #8]
 800b01c:	7af9      	ldrb	r1, [r7, #11]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	f7f8 ffde 	bl	8003fe0 <HAL_PCD_EP_Transmit>
 800b024:	4603      	mov	r3, r0
 800b026:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b028:	7dfb      	ldrb	r3, [r7, #23]
 800b02a:	4618      	mov	r0, r3
 800b02c:	f000 f85e 	bl	800b0ec <USBD_Get_USB_Status>
 800b030:	4603      	mov	r3, r0
 800b032:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b034:	7dbb      	ldrb	r3, [r7, #22]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b086      	sub	sp, #24
 800b042:	af00      	add	r7, sp, #0
 800b044:	60f8      	str	r0, [r7, #12]
 800b046:	607a      	str	r2, [r7, #4]
 800b048:	461a      	mov	r2, r3
 800b04a:	460b      	mov	r3, r1
 800b04c:	72fb      	strb	r3, [r7, #11]
 800b04e:	4613      	mov	r3, r2
 800b050:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b060:	893b      	ldrh	r3, [r7, #8]
 800b062:	7af9      	ldrb	r1, [r7, #11]
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	f7f8 ff73 	bl	8003f50 <HAL_PCD_EP_Receive>
 800b06a:	4603      	mov	r3, r0
 800b06c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b06e:	7dfb      	ldrb	r3, [r7, #23]
 800b070:	4618      	mov	r0, r3
 800b072:	f000 f83b 	bl	800b0ec <USBD_Get_USB_Status>
 800b076:	4603      	mov	r3, r0
 800b078:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b07a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3718      	adds	r7, #24
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b096:	78fa      	ldrb	r2, [r7, #3]
 800b098:	4611      	mov	r1, r2
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7f8 ff89 	bl	8003fb2 <HAL_PCD_EP_GetRxCount>
 800b0a0:	4603      	mov	r3, r0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
	...

0800b0ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b0b4:	4b02      	ldr	r3, [pc, #8]	@ (800b0c0 <USBD_static_malloc+0x14>)
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	370c      	adds	r7, #12
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bc80      	pop	{r7}
 800b0be:	4770      	bx	lr
 800b0c0:	20001340 	.word	0x20001340

0800b0c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]

}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bc80      	pop	{r7}
 800b0d4:	4770      	bx	lr

0800b0d6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d6:	b480      	push	{r7}
 800b0d8:	b083      	sub	sp, #12
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	460b      	mov	r3, r1
 800b0e0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b0e2:	bf00      	nop
 800b0e4:	370c      	adds	r7, #12
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bc80      	pop	{r7}
 800b0ea:	4770      	bx	lr

0800b0ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	2b03      	cmp	r3, #3
 800b0fe:	d817      	bhi.n	800b130 <USBD_Get_USB_Status+0x44>
 800b100:	a201      	add	r2, pc, #4	@ (adr r2, 800b108 <USBD_Get_USB_Status+0x1c>)
 800b102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b106:	bf00      	nop
 800b108:	0800b119 	.word	0x0800b119
 800b10c:	0800b11f 	.word	0x0800b11f
 800b110:	0800b125 	.word	0x0800b125
 800b114:	0800b12b 	.word	0x0800b12b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b118:	2300      	movs	r3, #0
 800b11a:	73fb      	strb	r3, [r7, #15]
    break;
 800b11c:	e00b      	b.n	800b136 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b11e:	2302      	movs	r3, #2
 800b120:	73fb      	strb	r3, [r7, #15]
    break;
 800b122:	e008      	b.n	800b136 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b124:	2301      	movs	r3, #1
 800b126:	73fb      	strb	r3, [r7, #15]
    break;
 800b128:	e005      	b.n	800b136 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b12a:	2302      	movs	r3, #2
 800b12c:	73fb      	strb	r3, [r7, #15]
    break;
 800b12e:	e002      	b.n	800b136 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b130:	2302      	movs	r3, #2
 800b132:	73fb      	strb	r3, [r7, #15]
    break;
 800b134:	bf00      	nop
  }
  return usb_status;
 800b136:	7bfb      	ldrb	r3, [r7, #15]
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3714      	adds	r7, #20
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bc80      	pop	{r7}
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop

0800b144 <sniprintf>:
 800b144:	b40c      	push	{r2, r3}
 800b146:	b530      	push	{r4, r5, lr}
 800b148:	4b17      	ldr	r3, [pc, #92]	@ (800b1a8 <sniprintf+0x64>)
 800b14a:	1e0c      	subs	r4, r1, #0
 800b14c:	681d      	ldr	r5, [r3, #0]
 800b14e:	b09d      	sub	sp, #116	@ 0x74
 800b150:	da08      	bge.n	800b164 <sniprintf+0x20>
 800b152:	238b      	movs	r3, #139	@ 0x8b
 800b154:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b158:	602b      	str	r3, [r5, #0]
 800b15a:	b01d      	add	sp, #116	@ 0x74
 800b15c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b160:	b002      	add	sp, #8
 800b162:	4770      	bx	lr
 800b164:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b168:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b16c:	bf0c      	ite	eq
 800b16e:	4623      	moveq	r3, r4
 800b170:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b174:	9304      	str	r3, [sp, #16]
 800b176:	9307      	str	r3, [sp, #28]
 800b178:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b17c:	9002      	str	r0, [sp, #8]
 800b17e:	9006      	str	r0, [sp, #24]
 800b180:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b184:	4628      	mov	r0, r5
 800b186:	ab21      	add	r3, sp, #132	@ 0x84
 800b188:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b18a:	a902      	add	r1, sp, #8
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	f000 f89d 	bl	800b2cc <_svfiprintf_r>
 800b192:	1c43      	adds	r3, r0, #1
 800b194:	bfbc      	itt	lt
 800b196:	238b      	movlt	r3, #139	@ 0x8b
 800b198:	602b      	strlt	r3, [r5, #0]
 800b19a:	2c00      	cmp	r4, #0
 800b19c:	d0dd      	beq.n	800b15a <sniprintf+0x16>
 800b19e:	2200      	movs	r2, #0
 800b1a0:	9b02      	ldr	r3, [sp, #8]
 800b1a2:	701a      	strb	r2, [r3, #0]
 800b1a4:	e7d9      	b.n	800b15a <sniprintf+0x16>
 800b1a6:	bf00      	nop
 800b1a8:	2000017c 	.word	0x2000017c

0800b1ac <memset>:
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	4402      	add	r2, r0
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d100      	bne.n	800b1b6 <memset+0xa>
 800b1b4:	4770      	bx	lr
 800b1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ba:	e7f9      	b.n	800b1b0 <memset+0x4>

0800b1bc <__errno>:
 800b1bc:	4b01      	ldr	r3, [pc, #4]	@ (800b1c4 <__errno+0x8>)
 800b1be:	6818      	ldr	r0, [r3, #0]
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	2000017c 	.word	0x2000017c

0800b1c8 <__libc_init_array>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	2600      	movs	r6, #0
 800b1cc:	4d0c      	ldr	r5, [pc, #48]	@ (800b200 <__libc_init_array+0x38>)
 800b1ce:	4c0d      	ldr	r4, [pc, #52]	@ (800b204 <__libc_init_array+0x3c>)
 800b1d0:	1b64      	subs	r4, r4, r5
 800b1d2:	10a4      	asrs	r4, r4, #2
 800b1d4:	42a6      	cmp	r6, r4
 800b1d6:	d109      	bne.n	800b1ec <__libc_init_array+0x24>
 800b1d8:	f000 fc78 	bl	800bacc <_init>
 800b1dc:	2600      	movs	r6, #0
 800b1de:	4d0a      	ldr	r5, [pc, #40]	@ (800b208 <__libc_init_array+0x40>)
 800b1e0:	4c0a      	ldr	r4, [pc, #40]	@ (800b20c <__libc_init_array+0x44>)
 800b1e2:	1b64      	subs	r4, r4, r5
 800b1e4:	10a4      	asrs	r4, r4, #2
 800b1e6:	42a6      	cmp	r6, r4
 800b1e8:	d105      	bne.n	800b1f6 <__libc_init_array+0x2e>
 800b1ea:	bd70      	pop	{r4, r5, r6, pc}
 800b1ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1f0:	4798      	blx	r3
 800b1f2:	3601      	adds	r6, #1
 800b1f4:	e7ee      	b.n	800b1d4 <__libc_init_array+0xc>
 800b1f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1fa:	4798      	blx	r3
 800b1fc:	3601      	adds	r6, #1
 800b1fe:	e7f2      	b.n	800b1e6 <__libc_init_array+0x1e>
 800b200:	0800bd08 	.word	0x0800bd08
 800b204:	0800bd08 	.word	0x0800bd08
 800b208:	0800bd08 	.word	0x0800bd08
 800b20c:	0800bd0c 	.word	0x0800bd0c

0800b210 <__retarget_lock_acquire_recursive>:
 800b210:	4770      	bx	lr

0800b212 <__retarget_lock_release_recursive>:
 800b212:	4770      	bx	lr

0800b214 <__ssputs_r>:
 800b214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b218:	461f      	mov	r7, r3
 800b21a:	688e      	ldr	r6, [r1, #8]
 800b21c:	4682      	mov	sl, r0
 800b21e:	42be      	cmp	r6, r7
 800b220:	460c      	mov	r4, r1
 800b222:	4690      	mov	r8, r2
 800b224:	680b      	ldr	r3, [r1, #0]
 800b226:	d82d      	bhi.n	800b284 <__ssputs_r+0x70>
 800b228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b22c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b230:	d026      	beq.n	800b280 <__ssputs_r+0x6c>
 800b232:	6965      	ldr	r5, [r4, #20]
 800b234:	6909      	ldr	r1, [r1, #16]
 800b236:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b23a:	eba3 0901 	sub.w	r9, r3, r1
 800b23e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b242:	1c7b      	adds	r3, r7, #1
 800b244:	444b      	add	r3, r9
 800b246:	106d      	asrs	r5, r5, #1
 800b248:	429d      	cmp	r5, r3
 800b24a:	bf38      	it	cc
 800b24c:	461d      	movcc	r5, r3
 800b24e:	0553      	lsls	r3, r2, #21
 800b250:	d527      	bpl.n	800b2a2 <__ssputs_r+0x8e>
 800b252:	4629      	mov	r1, r5
 800b254:	f000 f958 	bl	800b508 <_malloc_r>
 800b258:	4606      	mov	r6, r0
 800b25a:	b360      	cbz	r0, 800b2b6 <__ssputs_r+0xa2>
 800b25c:	464a      	mov	r2, r9
 800b25e:	6921      	ldr	r1, [r4, #16]
 800b260:	f000 fbd6 	bl	800ba10 <memcpy>
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b26a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b26e:	81a3      	strh	r3, [r4, #12]
 800b270:	6126      	str	r6, [r4, #16]
 800b272:	444e      	add	r6, r9
 800b274:	6026      	str	r6, [r4, #0]
 800b276:	463e      	mov	r6, r7
 800b278:	6165      	str	r5, [r4, #20]
 800b27a:	eba5 0509 	sub.w	r5, r5, r9
 800b27e:	60a5      	str	r5, [r4, #8]
 800b280:	42be      	cmp	r6, r7
 800b282:	d900      	bls.n	800b286 <__ssputs_r+0x72>
 800b284:	463e      	mov	r6, r7
 800b286:	4632      	mov	r2, r6
 800b288:	4641      	mov	r1, r8
 800b28a:	6820      	ldr	r0, [r4, #0]
 800b28c:	f000 fb88 	bl	800b9a0 <memmove>
 800b290:	2000      	movs	r0, #0
 800b292:	68a3      	ldr	r3, [r4, #8]
 800b294:	1b9b      	subs	r3, r3, r6
 800b296:	60a3      	str	r3, [r4, #8]
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	4433      	add	r3, r6
 800b29c:	6023      	str	r3, [r4, #0]
 800b29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2a2:	462a      	mov	r2, r5
 800b2a4:	f000 fb4e 	bl	800b944 <_realloc_r>
 800b2a8:	4606      	mov	r6, r0
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d1e0      	bne.n	800b270 <__ssputs_r+0x5c>
 800b2ae:	4650      	mov	r0, sl
 800b2b0:	6921      	ldr	r1, [r4, #16]
 800b2b2:	f000 fbbb 	bl	800ba2c <_free_r>
 800b2b6:	230c      	movs	r3, #12
 800b2b8:	f8ca 3000 	str.w	r3, [sl]
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2c6:	81a3      	strh	r3, [r4, #12]
 800b2c8:	e7e9      	b.n	800b29e <__ssputs_r+0x8a>
	...

0800b2cc <_svfiprintf_r>:
 800b2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d0:	4698      	mov	r8, r3
 800b2d2:	898b      	ldrh	r3, [r1, #12]
 800b2d4:	4607      	mov	r7, r0
 800b2d6:	061b      	lsls	r3, r3, #24
 800b2d8:	460d      	mov	r5, r1
 800b2da:	4614      	mov	r4, r2
 800b2dc:	b09d      	sub	sp, #116	@ 0x74
 800b2de:	d510      	bpl.n	800b302 <_svfiprintf_r+0x36>
 800b2e0:	690b      	ldr	r3, [r1, #16]
 800b2e2:	b973      	cbnz	r3, 800b302 <_svfiprintf_r+0x36>
 800b2e4:	2140      	movs	r1, #64	@ 0x40
 800b2e6:	f000 f90f 	bl	800b508 <_malloc_r>
 800b2ea:	6028      	str	r0, [r5, #0]
 800b2ec:	6128      	str	r0, [r5, #16]
 800b2ee:	b930      	cbnz	r0, 800b2fe <_svfiprintf_r+0x32>
 800b2f0:	230c      	movs	r3, #12
 800b2f2:	603b      	str	r3, [r7, #0]
 800b2f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2f8:	b01d      	add	sp, #116	@ 0x74
 800b2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fe:	2340      	movs	r3, #64	@ 0x40
 800b300:	616b      	str	r3, [r5, #20]
 800b302:	2300      	movs	r3, #0
 800b304:	9309      	str	r3, [sp, #36]	@ 0x24
 800b306:	2320      	movs	r3, #32
 800b308:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b30c:	2330      	movs	r3, #48	@ 0x30
 800b30e:	f04f 0901 	mov.w	r9, #1
 800b312:	f8cd 800c 	str.w	r8, [sp, #12]
 800b316:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b4b0 <_svfiprintf_r+0x1e4>
 800b31a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b31e:	4623      	mov	r3, r4
 800b320:	469a      	mov	sl, r3
 800b322:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b326:	b10a      	cbz	r2, 800b32c <_svfiprintf_r+0x60>
 800b328:	2a25      	cmp	r2, #37	@ 0x25
 800b32a:	d1f9      	bne.n	800b320 <_svfiprintf_r+0x54>
 800b32c:	ebba 0b04 	subs.w	fp, sl, r4
 800b330:	d00b      	beq.n	800b34a <_svfiprintf_r+0x7e>
 800b332:	465b      	mov	r3, fp
 800b334:	4622      	mov	r2, r4
 800b336:	4629      	mov	r1, r5
 800b338:	4638      	mov	r0, r7
 800b33a:	f7ff ff6b 	bl	800b214 <__ssputs_r>
 800b33e:	3001      	adds	r0, #1
 800b340:	f000 80a7 	beq.w	800b492 <_svfiprintf_r+0x1c6>
 800b344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b346:	445a      	add	r2, fp
 800b348:	9209      	str	r2, [sp, #36]	@ 0x24
 800b34a:	f89a 3000 	ldrb.w	r3, [sl]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f000 809f 	beq.w	800b492 <_svfiprintf_r+0x1c6>
 800b354:	2300      	movs	r3, #0
 800b356:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b35a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b35e:	f10a 0a01 	add.w	sl, sl, #1
 800b362:	9304      	str	r3, [sp, #16]
 800b364:	9307      	str	r3, [sp, #28]
 800b366:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b36a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b36c:	4654      	mov	r4, sl
 800b36e:	2205      	movs	r2, #5
 800b370:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b374:	484e      	ldr	r0, [pc, #312]	@ (800b4b0 <_svfiprintf_r+0x1e4>)
 800b376:	f000 fb3d 	bl	800b9f4 <memchr>
 800b37a:	9a04      	ldr	r2, [sp, #16]
 800b37c:	b9d8      	cbnz	r0, 800b3b6 <_svfiprintf_r+0xea>
 800b37e:	06d0      	lsls	r0, r2, #27
 800b380:	bf44      	itt	mi
 800b382:	2320      	movmi	r3, #32
 800b384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b388:	0711      	lsls	r1, r2, #28
 800b38a:	bf44      	itt	mi
 800b38c:	232b      	movmi	r3, #43	@ 0x2b
 800b38e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b392:	f89a 3000 	ldrb.w	r3, [sl]
 800b396:	2b2a      	cmp	r3, #42	@ 0x2a
 800b398:	d015      	beq.n	800b3c6 <_svfiprintf_r+0xfa>
 800b39a:	4654      	mov	r4, sl
 800b39c:	2000      	movs	r0, #0
 800b39e:	f04f 0c0a 	mov.w	ip, #10
 800b3a2:	9a07      	ldr	r2, [sp, #28]
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3aa:	3b30      	subs	r3, #48	@ 0x30
 800b3ac:	2b09      	cmp	r3, #9
 800b3ae:	d94b      	bls.n	800b448 <_svfiprintf_r+0x17c>
 800b3b0:	b1b0      	cbz	r0, 800b3e0 <_svfiprintf_r+0x114>
 800b3b2:	9207      	str	r2, [sp, #28]
 800b3b4:	e014      	b.n	800b3e0 <_svfiprintf_r+0x114>
 800b3b6:	eba0 0308 	sub.w	r3, r0, r8
 800b3ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	46a2      	mov	sl, r4
 800b3c2:	9304      	str	r3, [sp, #16]
 800b3c4:	e7d2      	b.n	800b36c <_svfiprintf_r+0xa0>
 800b3c6:	9b03      	ldr	r3, [sp, #12]
 800b3c8:	1d19      	adds	r1, r3, #4
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	9103      	str	r1, [sp, #12]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	bfbb      	ittet	lt
 800b3d2:	425b      	neglt	r3, r3
 800b3d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b3d8:	9307      	strge	r3, [sp, #28]
 800b3da:	9307      	strlt	r3, [sp, #28]
 800b3dc:	bfb8      	it	lt
 800b3de:	9204      	strlt	r2, [sp, #16]
 800b3e0:	7823      	ldrb	r3, [r4, #0]
 800b3e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3e4:	d10a      	bne.n	800b3fc <_svfiprintf_r+0x130>
 800b3e6:	7863      	ldrb	r3, [r4, #1]
 800b3e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3ea:	d132      	bne.n	800b452 <_svfiprintf_r+0x186>
 800b3ec:	9b03      	ldr	r3, [sp, #12]
 800b3ee:	3402      	adds	r4, #2
 800b3f0:	1d1a      	adds	r2, r3, #4
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	9203      	str	r2, [sp, #12]
 800b3f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b3fa:	9305      	str	r3, [sp, #20]
 800b3fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b4b4 <_svfiprintf_r+0x1e8>
 800b400:	2203      	movs	r2, #3
 800b402:	4650      	mov	r0, sl
 800b404:	7821      	ldrb	r1, [r4, #0]
 800b406:	f000 faf5 	bl	800b9f4 <memchr>
 800b40a:	b138      	cbz	r0, 800b41c <_svfiprintf_r+0x150>
 800b40c:	2240      	movs	r2, #64	@ 0x40
 800b40e:	9b04      	ldr	r3, [sp, #16]
 800b410:	eba0 000a 	sub.w	r0, r0, sl
 800b414:	4082      	lsls	r2, r0
 800b416:	4313      	orrs	r3, r2
 800b418:	3401      	adds	r4, #1
 800b41a:	9304      	str	r3, [sp, #16]
 800b41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b420:	2206      	movs	r2, #6
 800b422:	4825      	ldr	r0, [pc, #148]	@ (800b4b8 <_svfiprintf_r+0x1ec>)
 800b424:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b428:	f000 fae4 	bl	800b9f4 <memchr>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d036      	beq.n	800b49e <_svfiprintf_r+0x1d2>
 800b430:	4b22      	ldr	r3, [pc, #136]	@ (800b4bc <_svfiprintf_r+0x1f0>)
 800b432:	bb1b      	cbnz	r3, 800b47c <_svfiprintf_r+0x1b0>
 800b434:	9b03      	ldr	r3, [sp, #12]
 800b436:	3307      	adds	r3, #7
 800b438:	f023 0307 	bic.w	r3, r3, #7
 800b43c:	3308      	adds	r3, #8
 800b43e:	9303      	str	r3, [sp, #12]
 800b440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b442:	4433      	add	r3, r6
 800b444:	9309      	str	r3, [sp, #36]	@ 0x24
 800b446:	e76a      	b.n	800b31e <_svfiprintf_r+0x52>
 800b448:	460c      	mov	r4, r1
 800b44a:	2001      	movs	r0, #1
 800b44c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b450:	e7a8      	b.n	800b3a4 <_svfiprintf_r+0xd8>
 800b452:	2300      	movs	r3, #0
 800b454:	f04f 0c0a 	mov.w	ip, #10
 800b458:	4619      	mov	r1, r3
 800b45a:	3401      	adds	r4, #1
 800b45c:	9305      	str	r3, [sp, #20]
 800b45e:	4620      	mov	r0, r4
 800b460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b464:	3a30      	subs	r2, #48	@ 0x30
 800b466:	2a09      	cmp	r2, #9
 800b468:	d903      	bls.n	800b472 <_svfiprintf_r+0x1a6>
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0c6      	beq.n	800b3fc <_svfiprintf_r+0x130>
 800b46e:	9105      	str	r1, [sp, #20]
 800b470:	e7c4      	b.n	800b3fc <_svfiprintf_r+0x130>
 800b472:	4604      	mov	r4, r0
 800b474:	2301      	movs	r3, #1
 800b476:	fb0c 2101 	mla	r1, ip, r1, r2
 800b47a:	e7f0      	b.n	800b45e <_svfiprintf_r+0x192>
 800b47c:	ab03      	add	r3, sp, #12
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	462a      	mov	r2, r5
 800b482:	4638      	mov	r0, r7
 800b484:	4b0e      	ldr	r3, [pc, #56]	@ (800b4c0 <_svfiprintf_r+0x1f4>)
 800b486:	a904      	add	r1, sp, #16
 800b488:	f3af 8000 	nop.w
 800b48c:	1c42      	adds	r2, r0, #1
 800b48e:	4606      	mov	r6, r0
 800b490:	d1d6      	bne.n	800b440 <_svfiprintf_r+0x174>
 800b492:	89ab      	ldrh	r3, [r5, #12]
 800b494:	065b      	lsls	r3, r3, #25
 800b496:	f53f af2d 	bmi.w	800b2f4 <_svfiprintf_r+0x28>
 800b49a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b49c:	e72c      	b.n	800b2f8 <_svfiprintf_r+0x2c>
 800b49e:	ab03      	add	r3, sp, #12
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4638      	mov	r0, r7
 800b4a6:	4b06      	ldr	r3, [pc, #24]	@ (800b4c0 <_svfiprintf_r+0x1f4>)
 800b4a8:	a904      	add	r1, sp, #16
 800b4aa:	f000 f91f 	bl	800b6ec <_printf_i>
 800b4ae:	e7ed      	b.n	800b48c <_svfiprintf_r+0x1c0>
 800b4b0:	0800bcca 	.word	0x0800bcca
 800b4b4:	0800bcd0 	.word	0x0800bcd0
 800b4b8:	0800bcd4 	.word	0x0800bcd4
 800b4bc:	00000000 	.word	0x00000000
 800b4c0:	0800b215 	.word	0x0800b215

0800b4c4 <sbrk_aligned>:
 800b4c4:	b570      	push	{r4, r5, r6, lr}
 800b4c6:	4e0f      	ldr	r6, [pc, #60]	@ (800b504 <sbrk_aligned+0x40>)
 800b4c8:	460c      	mov	r4, r1
 800b4ca:	6831      	ldr	r1, [r6, #0]
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	b911      	cbnz	r1, 800b4d6 <sbrk_aligned+0x12>
 800b4d0:	f000 fa80 	bl	800b9d4 <_sbrk_r>
 800b4d4:	6030      	str	r0, [r6, #0]
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f000 fa7b 	bl	800b9d4 <_sbrk_r>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	d103      	bne.n	800b4ea <sbrk_aligned+0x26>
 800b4e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ea:	1cc4      	adds	r4, r0, #3
 800b4ec:	f024 0403 	bic.w	r4, r4, #3
 800b4f0:	42a0      	cmp	r0, r4
 800b4f2:	d0f8      	beq.n	800b4e6 <sbrk_aligned+0x22>
 800b4f4:	1a21      	subs	r1, r4, r0
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	f000 fa6c 	bl	800b9d4 <_sbrk_r>
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d1f2      	bne.n	800b4e6 <sbrk_aligned+0x22>
 800b500:	e7ef      	b.n	800b4e2 <sbrk_aligned+0x1e>
 800b502:	bf00      	nop
 800b504:	2000169c 	.word	0x2000169c

0800b508 <_malloc_r>:
 800b508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b50c:	1ccd      	adds	r5, r1, #3
 800b50e:	f025 0503 	bic.w	r5, r5, #3
 800b512:	3508      	adds	r5, #8
 800b514:	2d0c      	cmp	r5, #12
 800b516:	bf38      	it	cc
 800b518:	250c      	movcc	r5, #12
 800b51a:	2d00      	cmp	r5, #0
 800b51c:	4606      	mov	r6, r0
 800b51e:	db01      	blt.n	800b524 <_malloc_r+0x1c>
 800b520:	42a9      	cmp	r1, r5
 800b522:	d904      	bls.n	800b52e <_malloc_r+0x26>
 800b524:	230c      	movs	r3, #12
 800b526:	6033      	str	r3, [r6, #0]
 800b528:	2000      	movs	r0, #0
 800b52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b604 <_malloc_r+0xfc>
 800b532:	f000 f9fb 	bl	800b92c <__malloc_lock>
 800b536:	f8d8 3000 	ldr.w	r3, [r8]
 800b53a:	461c      	mov	r4, r3
 800b53c:	bb44      	cbnz	r4, 800b590 <_malloc_r+0x88>
 800b53e:	4629      	mov	r1, r5
 800b540:	4630      	mov	r0, r6
 800b542:	f7ff ffbf 	bl	800b4c4 <sbrk_aligned>
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	4604      	mov	r4, r0
 800b54a:	d158      	bne.n	800b5fe <_malloc_r+0xf6>
 800b54c:	f8d8 4000 	ldr.w	r4, [r8]
 800b550:	4627      	mov	r7, r4
 800b552:	2f00      	cmp	r7, #0
 800b554:	d143      	bne.n	800b5de <_malloc_r+0xd6>
 800b556:	2c00      	cmp	r4, #0
 800b558:	d04b      	beq.n	800b5f2 <_malloc_r+0xea>
 800b55a:	6823      	ldr	r3, [r4, #0]
 800b55c:	4639      	mov	r1, r7
 800b55e:	4630      	mov	r0, r6
 800b560:	eb04 0903 	add.w	r9, r4, r3
 800b564:	f000 fa36 	bl	800b9d4 <_sbrk_r>
 800b568:	4581      	cmp	r9, r0
 800b56a:	d142      	bne.n	800b5f2 <_malloc_r+0xea>
 800b56c:	6821      	ldr	r1, [r4, #0]
 800b56e:	4630      	mov	r0, r6
 800b570:	1a6d      	subs	r5, r5, r1
 800b572:	4629      	mov	r1, r5
 800b574:	f7ff ffa6 	bl	800b4c4 <sbrk_aligned>
 800b578:	3001      	adds	r0, #1
 800b57a:	d03a      	beq.n	800b5f2 <_malloc_r+0xea>
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	442b      	add	r3, r5
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	f8d8 3000 	ldr.w	r3, [r8]
 800b586:	685a      	ldr	r2, [r3, #4]
 800b588:	bb62      	cbnz	r2, 800b5e4 <_malloc_r+0xdc>
 800b58a:	f8c8 7000 	str.w	r7, [r8]
 800b58e:	e00f      	b.n	800b5b0 <_malloc_r+0xa8>
 800b590:	6822      	ldr	r2, [r4, #0]
 800b592:	1b52      	subs	r2, r2, r5
 800b594:	d420      	bmi.n	800b5d8 <_malloc_r+0xd0>
 800b596:	2a0b      	cmp	r2, #11
 800b598:	d917      	bls.n	800b5ca <_malloc_r+0xc2>
 800b59a:	1961      	adds	r1, r4, r5
 800b59c:	42a3      	cmp	r3, r4
 800b59e:	6025      	str	r5, [r4, #0]
 800b5a0:	bf18      	it	ne
 800b5a2:	6059      	strne	r1, [r3, #4]
 800b5a4:	6863      	ldr	r3, [r4, #4]
 800b5a6:	bf08      	it	eq
 800b5a8:	f8c8 1000 	streq.w	r1, [r8]
 800b5ac:	5162      	str	r2, [r4, r5]
 800b5ae:	604b      	str	r3, [r1, #4]
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f000 f9c1 	bl	800b938 <__malloc_unlock>
 800b5b6:	f104 000b 	add.w	r0, r4, #11
 800b5ba:	1d23      	adds	r3, r4, #4
 800b5bc:	f020 0007 	bic.w	r0, r0, #7
 800b5c0:	1ac2      	subs	r2, r0, r3
 800b5c2:	bf1c      	itt	ne
 800b5c4:	1a1b      	subne	r3, r3, r0
 800b5c6:	50a3      	strne	r3, [r4, r2]
 800b5c8:	e7af      	b.n	800b52a <_malloc_r+0x22>
 800b5ca:	6862      	ldr	r2, [r4, #4]
 800b5cc:	42a3      	cmp	r3, r4
 800b5ce:	bf0c      	ite	eq
 800b5d0:	f8c8 2000 	streq.w	r2, [r8]
 800b5d4:	605a      	strne	r2, [r3, #4]
 800b5d6:	e7eb      	b.n	800b5b0 <_malloc_r+0xa8>
 800b5d8:	4623      	mov	r3, r4
 800b5da:	6864      	ldr	r4, [r4, #4]
 800b5dc:	e7ae      	b.n	800b53c <_malloc_r+0x34>
 800b5de:	463c      	mov	r4, r7
 800b5e0:	687f      	ldr	r7, [r7, #4]
 800b5e2:	e7b6      	b.n	800b552 <_malloc_r+0x4a>
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	42a3      	cmp	r3, r4
 800b5ea:	d1fb      	bne.n	800b5e4 <_malloc_r+0xdc>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	6053      	str	r3, [r2, #4]
 800b5f0:	e7de      	b.n	800b5b0 <_malloc_r+0xa8>
 800b5f2:	230c      	movs	r3, #12
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	6033      	str	r3, [r6, #0]
 800b5f8:	f000 f99e 	bl	800b938 <__malloc_unlock>
 800b5fc:	e794      	b.n	800b528 <_malloc_r+0x20>
 800b5fe:	6005      	str	r5, [r0, #0]
 800b600:	e7d6      	b.n	800b5b0 <_malloc_r+0xa8>
 800b602:	bf00      	nop
 800b604:	200016a0 	.word	0x200016a0

0800b608 <_printf_common>:
 800b608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b60c:	4616      	mov	r6, r2
 800b60e:	4698      	mov	r8, r3
 800b610:	688a      	ldr	r2, [r1, #8]
 800b612:	690b      	ldr	r3, [r1, #16]
 800b614:	4607      	mov	r7, r0
 800b616:	4293      	cmp	r3, r2
 800b618:	bfb8      	it	lt
 800b61a:	4613      	movlt	r3, r2
 800b61c:	6033      	str	r3, [r6, #0]
 800b61e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b622:	460c      	mov	r4, r1
 800b624:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b628:	b10a      	cbz	r2, 800b62e <_printf_common+0x26>
 800b62a:	3301      	adds	r3, #1
 800b62c:	6033      	str	r3, [r6, #0]
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	0699      	lsls	r1, r3, #26
 800b632:	bf42      	ittt	mi
 800b634:	6833      	ldrmi	r3, [r6, #0]
 800b636:	3302      	addmi	r3, #2
 800b638:	6033      	strmi	r3, [r6, #0]
 800b63a:	6825      	ldr	r5, [r4, #0]
 800b63c:	f015 0506 	ands.w	r5, r5, #6
 800b640:	d106      	bne.n	800b650 <_printf_common+0x48>
 800b642:	f104 0a19 	add.w	sl, r4, #25
 800b646:	68e3      	ldr	r3, [r4, #12]
 800b648:	6832      	ldr	r2, [r6, #0]
 800b64a:	1a9b      	subs	r3, r3, r2
 800b64c:	42ab      	cmp	r3, r5
 800b64e:	dc2b      	bgt.n	800b6a8 <_printf_common+0xa0>
 800b650:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b654:	6822      	ldr	r2, [r4, #0]
 800b656:	3b00      	subs	r3, #0
 800b658:	bf18      	it	ne
 800b65a:	2301      	movne	r3, #1
 800b65c:	0692      	lsls	r2, r2, #26
 800b65e:	d430      	bmi.n	800b6c2 <_printf_common+0xba>
 800b660:	4641      	mov	r1, r8
 800b662:	4638      	mov	r0, r7
 800b664:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b668:	47c8      	blx	r9
 800b66a:	3001      	adds	r0, #1
 800b66c:	d023      	beq.n	800b6b6 <_printf_common+0xae>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	6922      	ldr	r2, [r4, #16]
 800b672:	f003 0306 	and.w	r3, r3, #6
 800b676:	2b04      	cmp	r3, #4
 800b678:	bf14      	ite	ne
 800b67a:	2500      	movne	r5, #0
 800b67c:	6833      	ldreq	r3, [r6, #0]
 800b67e:	f04f 0600 	mov.w	r6, #0
 800b682:	bf08      	it	eq
 800b684:	68e5      	ldreq	r5, [r4, #12]
 800b686:	f104 041a 	add.w	r4, r4, #26
 800b68a:	bf08      	it	eq
 800b68c:	1aed      	subeq	r5, r5, r3
 800b68e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b692:	bf08      	it	eq
 800b694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b698:	4293      	cmp	r3, r2
 800b69a:	bfc4      	itt	gt
 800b69c:	1a9b      	subgt	r3, r3, r2
 800b69e:	18ed      	addgt	r5, r5, r3
 800b6a0:	42b5      	cmp	r5, r6
 800b6a2:	d11a      	bne.n	800b6da <_printf_common+0xd2>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	e008      	b.n	800b6ba <_printf_common+0xb2>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	4652      	mov	r2, sl
 800b6ac:	4641      	mov	r1, r8
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	47c8      	blx	r9
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	d103      	bne.n	800b6be <_printf_common+0xb6>
 800b6b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6be:	3501      	adds	r5, #1
 800b6c0:	e7c1      	b.n	800b646 <_printf_common+0x3e>
 800b6c2:	2030      	movs	r0, #48	@ 0x30
 800b6c4:	18e1      	adds	r1, r4, r3
 800b6c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6d0:	4422      	add	r2, r4
 800b6d2:	3302      	adds	r3, #2
 800b6d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6d8:	e7c2      	b.n	800b660 <_printf_common+0x58>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	4622      	mov	r2, r4
 800b6de:	4641      	mov	r1, r8
 800b6e0:	4638      	mov	r0, r7
 800b6e2:	47c8      	blx	r9
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	d0e6      	beq.n	800b6b6 <_printf_common+0xae>
 800b6e8:	3601      	adds	r6, #1
 800b6ea:	e7d9      	b.n	800b6a0 <_printf_common+0x98>

0800b6ec <_printf_i>:
 800b6ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f0:	7e0f      	ldrb	r7, [r1, #24]
 800b6f2:	4691      	mov	r9, r2
 800b6f4:	2f78      	cmp	r7, #120	@ 0x78
 800b6f6:	4680      	mov	r8, r0
 800b6f8:	460c      	mov	r4, r1
 800b6fa:	469a      	mov	sl, r3
 800b6fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b702:	d807      	bhi.n	800b714 <_printf_i+0x28>
 800b704:	2f62      	cmp	r7, #98	@ 0x62
 800b706:	d80a      	bhi.n	800b71e <_printf_i+0x32>
 800b708:	2f00      	cmp	r7, #0
 800b70a:	f000 80d3 	beq.w	800b8b4 <_printf_i+0x1c8>
 800b70e:	2f58      	cmp	r7, #88	@ 0x58
 800b710:	f000 80ba 	beq.w	800b888 <_printf_i+0x19c>
 800b714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b718:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b71c:	e03a      	b.n	800b794 <_printf_i+0xa8>
 800b71e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b722:	2b15      	cmp	r3, #21
 800b724:	d8f6      	bhi.n	800b714 <_printf_i+0x28>
 800b726:	a101      	add	r1, pc, #4	@ (adr r1, 800b72c <_printf_i+0x40>)
 800b728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b72c:	0800b785 	.word	0x0800b785
 800b730:	0800b799 	.word	0x0800b799
 800b734:	0800b715 	.word	0x0800b715
 800b738:	0800b715 	.word	0x0800b715
 800b73c:	0800b715 	.word	0x0800b715
 800b740:	0800b715 	.word	0x0800b715
 800b744:	0800b799 	.word	0x0800b799
 800b748:	0800b715 	.word	0x0800b715
 800b74c:	0800b715 	.word	0x0800b715
 800b750:	0800b715 	.word	0x0800b715
 800b754:	0800b715 	.word	0x0800b715
 800b758:	0800b89b 	.word	0x0800b89b
 800b75c:	0800b7c3 	.word	0x0800b7c3
 800b760:	0800b855 	.word	0x0800b855
 800b764:	0800b715 	.word	0x0800b715
 800b768:	0800b715 	.word	0x0800b715
 800b76c:	0800b8bd 	.word	0x0800b8bd
 800b770:	0800b715 	.word	0x0800b715
 800b774:	0800b7c3 	.word	0x0800b7c3
 800b778:	0800b715 	.word	0x0800b715
 800b77c:	0800b715 	.word	0x0800b715
 800b780:	0800b85d 	.word	0x0800b85d
 800b784:	6833      	ldr	r3, [r6, #0]
 800b786:	1d1a      	adds	r2, r3, #4
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6032      	str	r2, [r6, #0]
 800b78c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b790:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b794:	2301      	movs	r3, #1
 800b796:	e09e      	b.n	800b8d6 <_printf_i+0x1ea>
 800b798:	6833      	ldr	r3, [r6, #0]
 800b79a:	6820      	ldr	r0, [r4, #0]
 800b79c:	1d19      	adds	r1, r3, #4
 800b79e:	6031      	str	r1, [r6, #0]
 800b7a0:	0606      	lsls	r6, r0, #24
 800b7a2:	d501      	bpl.n	800b7a8 <_printf_i+0xbc>
 800b7a4:	681d      	ldr	r5, [r3, #0]
 800b7a6:	e003      	b.n	800b7b0 <_printf_i+0xc4>
 800b7a8:	0645      	lsls	r5, r0, #25
 800b7aa:	d5fb      	bpl.n	800b7a4 <_printf_i+0xb8>
 800b7ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7b0:	2d00      	cmp	r5, #0
 800b7b2:	da03      	bge.n	800b7bc <_printf_i+0xd0>
 800b7b4:	232d      	movs	r3, #45	@ 0x2d
 800b7b6:	426d      	negs	r5, r5
 800b7b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7bc:	230a      	movs	r3, #10
 800b7be:	4859      	ldr	r0, [pc, #356]	@ (800b924 <_printf_i+0x238>)
 800b7c0:	e011      	b.n	800b7e6 <_printf_i+0xfa>
 800b7c2:	6821      	ldr	r1, [r4, #0]
 800b7c4:	6833      	ldr	r3, [r6, #0]
 800b7c6:	0608      	lsls	r0, r1, #24
 800b7c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7cc:	d402      	bmi.n	800b7d4 <_printf_i+0xe8>
 800b7ce:	0649      	lsls	r1, r1, #25
 800b7d0:	bf48      	it	mi
 800b7d2:	b2ad      	uxthmi	r5, r5
 800b7d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7d6:	6033      	str	r3, [r6, #0]
 800b7d8:	bf14      	ite	ne
 800b7da:	230a      	movne	r3, #10
 800b7dc:	2308      	moveq	r3, #8
 800b7de:	4851      	ldr	r0, [pc, #324]	@ (800b924 <_printf_i+0x238>)
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7e6:	6866      	ldr	r6, [r4, #4]
 800b7e8:	2e00      	cmp	r6, #0
 800b7ea:	bfa8      	it	ge
 800b7ec:	6821      	ldrge	r1, [r4, #0]
 800b7ee:	60a6      	str	r6, [r4, #8]
 800b7f0:	bfa4      	itt	ge
 800b7f2:	f021 0104 	bicge.w	r1, r1, #4
 800b7f6:	6021      	strge	r1, [r4, #0]
 800b7f8:	b90d      	cbnz	r5, 800b7fe <_printf_i+0x112>
 800b7fa:	2e00      	cmp	r6, #0
 800b7fc:	d04b      	beq.n	800b896 <_printf_i+0x1aa>
 800b7fe:	4616      	mov	r6, r2
 800b800:	fbb5 f1f3 	udiv	r1, r5, r3
 800b804:	fb03 5711 	mls	r7, r3, r1, r5
 800b808:	5dc7      	ldrb	r7, [r0, r7]
 800b80a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b80e:	462f      	mov	r7, r5
 800b810:	42bb      	cmp	r3, r7
 800b812:	460d      	mov	r5, r1
 800b814:	d9f4      	bls.n	800b800 <_printf_i+0x114>
 800b816:	2b08      	cmp	r3, #8
 800b818:	d10b      	bne.n	800b832 <_printf_i+0x146>
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	07df      	lsls	r7, r3, #31
 800b81e:	d508      	bpl.n	800b832 <_printf_i+0x146>
 800b820:	6923      	ldr	r3, [r4, #16]
 800b822:	6861      	ldr	r1, [r4, #4]
 800b824:	4299      	cmp	r1, r3
 800b826:	bfde      	ittt	le
 800b828:	2330      	movle	r3, #48	@ 0x30
 800b82a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b82e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b832:	1b92      	subs	r2, r2, r6
 800b834:	6122      	str	r2, [r4, #16]
 800b836:	464b      	mov	r3, r9
 800b838:	4621      	mov	r1, r4
 800b83a:	4640      	mov	r0, r8
 800b83c:	f8cd a000 	str.w	sl, [sp]
 800b840:	aa03      	add	r2, sp, #12
 800b842:	f7ff fee1 	bl	800b608 <_printf_common>
 800b846:	3001      	adds	r0, #1
 800b848:	d14a      	bne.n	800b8e0 <_printf_i+0x1f4>
 800b84a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b84e:	b004      	add	sp, #16
 800b850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b854:	6823      	ldr	r3, [r4, #0]
 800b856:	f043 0320 	orr.w	r3, r3, #32
 800b85a:	6023      	str	r3, [r4, #0]
 800b85c:	2778      	movs	r7, #120	@ 0x78
 800b85e:	4832      	ldr	r0, [pc, #200]	@ (800b928 <_printf_i+0x23c>)
 800b860:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	6831      	ldr	r1, [r6, #0]
 800b868:	061f      	lsls	r7, r3, #24
 800b86a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b86e:	d402      	bmi.n	800b876 <_printf_i+0x18a>
 800b870:	065f      	lsls	r7, r3, #25
 800b872:	bf48      	it	mi
 800b874:	b2ad      	uxthmi	r5, r5
 800b876:	6031      	str	r1, [r6, #0]
 800b878:	07d9      	lsls	r1, r3, #31
 800b87a:	bf44      	itt	mi
 800b87c:	f043 0320 	orrmi.w	r3, r3, #32
 800b880:	6023      	strmi	r3, [r4, #0]
 800b882:	b11d      	cbz	r5, 800b88c <_printf_i+0x1a0>
 800b884:	2310      	movs	r3, #16
 800b886:	e7ab      	b.n	800b7e0 <_printf_i+0xf4>
 800b888:	4826      	ldr	r0, [pc, #152]	@ (800b924 <_printf_i+0x238>)
 800b88a:	e7e9      	b.n	800b860 <_printf_i+0x174>
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	f023 0320 	bic.w	r3, r3, #32
 800b892:	6023      	str	r3, [r4, #0]
 800b894:	e7f6      	b.n	800b884 <_printf_i+0x198>
 800b896:	4616      	mov	r6, r2
 800b898:	e7bd      	b.n	800b816 <_printf_i+0x12a>
 800b89a:	6833      	ldr	r3, [r6, #0]
 800b89c:	6825      	ldr	r5, [r4, #0]
 800b89e:	1d18      	adds	r0, r3, #4
 800b8a0:	6961      	ldr	r1, [r4, #20]
 800b8a2:	6030      	str	r0, [r6, #0]
 800b8a4:	062e      	lsls	r6, r5, #24
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	d501      	bpl.n	800b8ae <_printf_i+0x1c2>
 800b8aa:	6019      	str	r1, [r3, #0]
 800b8ac:	e002      	b.n	800b8b4 <_printf_i+0x1c8>
 800b8ae:	0668      	lsls	r0, r5, #25
 800b8b0:	d5fb      	bpl.n	800b8aa <_printf_i+0x1be>
 800b8b2:	8019      	strh	r1, [r3, #0]
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	4616      	mov	r6, r2
 800b8b8:	6123      	str	r3, [r4, #16]
 800b8ba:	e7bc      	b.n	800b836 <_printf_i+0x14a>
 800b8bc:	6833      	ldr	r3, [r6, #0]
 800b8be:	2100      	movs	r1, #0
 800b8c0:	1d1a      	adds	r2, r3, #4
 800b8c2:	6032      	str	r2, [r6, #0]
 800b8c4:	681e      	ldr	r6, [r3, #0]
 800b8c6:	6862      	ldr	r2, [r4, #4]
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	f000 f893 	bl	800b9f4 <memchr>
 800b8ce:	b108      	cbz	r0, 800b8d4 <_printf_i+0x1e8>
 800b8d0:	1b80      	subs	r0, r0, r6
 800b8d2:	6060      	str	r0, [r4, #4]
 800b8d4:	6863      	ldr	r3, [r4, #4]
 800b8d6:	6123      	str	r3, [r4, #16]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8de:	e7aa      	b.n	800b836 <_printf_i+0x14a>
 800b8e0:	4632      	mov	r2, r6
 800b8e2:	4649      	mov	r1, r9
 800b8e4:	4640      	mov	r0, r8
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	47d0      	blx	sl
 800b8ea:	3001      	adds	r0, #1
 800b8ec:	d0ad      	beq.n	800b84a <_printf_i+0x15e>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	079b      	lsls	r3, r3, #30
 800b8f2:	d413      	bmi.n	800b91c <_printf_i+0x230>
 800b8f4:	68e0      	ldr	r0, [r4, #12]
 800b8f6:	9b03      	ldr	r3, [sp, #12]
 800b8f8:	4298      	cmp	r0, r3
 800b8fa:	bfb8      	it	lt
 800b8fc:	4618      	movlt	r0, r3
 800b8fe:	e7a6      	b.n	800b84e <_printf_i+0x162>
 800b900:	2301      	movs	r3, #1
 800b902:	4632      	mov	r2, r6
 800b904:	4649      	mov	r1, r9
 800b906:	4640      	mov	r0, r8
 800b908:	47d0      	blx	sl
 800b90a:	3001      	adds	r0, #1
 800b90c:	d09d      	beq.n	800b84a <_printf_i+0x15e>
 800b90e:	3501      	adds	r5, #1
 800b910:	68e3      	ldr	r3, [r4, #12]
 800b912:	9903      	ldr	r1, [sp, #12]
 800b914:	1a5b      	subs	r3, r3, r1
 800b916:	42ab      	cmp	r3, r5
 800b918:	dcf2      	bgt.n	800b900 <_printf_i+0x214>
 800b91a:	e7eb      	b.n	800b8f4 <_printf_i+0x208>
 800b91c:	2500      	movs	r5, #0
 800b91e:	f104 0619 	add.w	r6, r4, #25
 800b922:	e7f5      	b.n	800b910 <_printf_i+0x224>
 800b924:	0800bcdb 	.word	0x0800bcdb
 800b928:	0800bcec 	.word	0x0800bcec

0800b92c <__malloc_lock>:
 800b92c:	4801      	ldr	r0, [pc, #4]	@ (800b934 <__malloc_lock+0x8>)
 800b92e:	f7ff bc6f 	b.w	800b210 <__retarget_lock_acquire_recursive>
 800b932:	bf00      	nop
 800b934:	20001698 	.word	0x20001698

0800b938 <__malloc_unlock>:
 800b938:	4801      	ldr	r0, [pc, #4]	@ (800b940 <__malloc_unlock+0x8>)
 800b93a:	f7ff bc6a 	b.w	800b212 <__retarget_lock_release_recursive>
 800b93e:	bf00      	nop
 800b940:	20001698 	.word	0x20001698

0800b944 <_realloc_r>:
 800b944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b948:	4680      	mov	r8, r0
 800b94a:	4615      	mov	r5, r2
 800b94c:	460c      	mov	r4, r1
 800b94e:	b921      	cbnz	r1, 800b95a <_realloc_r+0x16>
 800b950:	4611      	mov	r1, r2
 800b952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b956:	f7ff bdd7 	b.w	800b508 <_malloc_r>
 800b95a:	b92a      	cbnz	r2, 800b968 <_realloc_r+0x24>
 800b95c:	f000 f866 	bl	800ba2c <_free_r>
 800b960:	2400      	movs	r4, #0
 800b962:	4620      	mov	r0, r4
 800b964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b968:	f000 f8a8 	bl	800babc <_malloc_usable_size_r>
 800b96c:	4285      	cmp	r5, r0
 800b96e:	4606      	mov	r6, r0
 800b970:	d802      	bhi.n	800b978 <_realloc_r+0x34>
 800b972:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b976:	d8f4      	bhi.n	800b962 <_realloc_r+0x1e>
 800b978:	4629      	mov	r1, r5
 800b97a:	4640      	mov	r0, r8
 800b97c:	f7ff fdc4 	bl	800b508 <_malloc_r>
 800b980:	4607      	mov	r7, r0
 800b982:	2800      	cmp	r0, #0
 800b984:	d0ec      	beq.n	800b960 <_realloc_r+0x1c>
 800b986:	42b5      	cmp	r5, r6
 800b988:	462a      	mov	r2, r5
 800b98a:	4621      	mov	r1, r4
 800b98c:	bf28      	it	cs
 800b98e:	4632      	movcs	r2, r6
 800b990:	f000 f83e 	bl	800ba10 <memcpy>
 800b994:	4621      	mov	r1, r4
 800b996:	4640      	mov	r0, r8
 800b998:	f000 f848 	bl	800ba2c <_free_r>
 800b99c:	463c      	mov	r4, r7
 800b99e:	e7e0      	b.n	800b962 <_realloc_r+0x1e>

0800b9a0 <memmove>:
 800b9a0:	4288      	cmp	r0, r1
 800b9a2:	b510      	push	{r4, lr}
 800b9a4:	eb01 0402 	add.w	r4, r1, r2
 800b9a8:	d902      	bls.n	800b9b0 <memmove+0x10>
 800b9aa:	4284      	cmp	r4, r0
 800b9ac:	4623      	mov	r3, r4
 800b9ae:	d807      	bhi.n	800b9c0 <memmove+0x20>
 800b9b0:	1e43      	subs	r3, r0, #1
 800b9b2:	42a1      	cmp	r1, r4
 800b9b4:	d008      	beq.n	800b9c8 <memmove+0x28>
 800b9b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9be:	e7f8      	b.n	800b9b2 <memmove+0x12>
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	4402      	add	r2, r0
 800b9c4:	428a      	cmp	r2, r1
 800b9c6:	d100      	bne.n	800b9ca <memmove+0x2a>
 800b9c8:	bd10      	pop	{r4, pc}
 800b9ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9d2:	e7f7      	b.n	800b9c4 <memmove+0x24>

0800b9d4 <_sbrk_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	4d05      	ldr	r5, [pc, #20]	@ (800b9f0 <_sbrk_r+0x1c>)
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4608      	mov	r0, r1
 800b9de:	602b      	str	r3, [r5, #0]
 800b9e0:	f7f5 fbce 	bl	8001180 <_sbrk>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	d102      	bne.n	800b9ee <_sbrk_r+0x1a>
 800b9e8:	682b      	ldr	r3, [r5, #0]
 800b9ea:	b103      	cbz	r3, 800b9ee <_sbrk_r+0x1a>
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	bd38      	pop	{r3, r4, r5, pc}
 800b9f0:	200016a4 	.word	0x200016a4

0800b9f4 <memchr>:
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	b510      	push	{r4, lr}
 800b9f8:	b2c9      	uxtb	r1, r1
 800b9fa:	4402      	add	r2, r0
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	4618      	mov	r0, r3
 800ba00:	d101      	bne.n	800ba06 <memchr+0x12>
 800ba02:	2000      	movs	r0, #0
 800ba04:	e003      	b.n	800ba0e <memchr+0x1a>
 800ba06:	7804      	ldrb	r4, [r0, #0]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	428c      	cmp	r4, r1
 800ba0c:	d1f6      	bne.n	800b9fc <memchr+0x8>
 800ba0e:	bd10      	pop	{r4, pc}

0800ba10 <memcpy>:
 800ba10:	440a      	add	r2, r1
 800ba12:	4291      	cmp	r1, r2
 800ba14:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ba18:	d100      	bne.n	800ba1c <memcpy+0xc>
 800ba1a:	4770      	bx	lr
 800ba1c:	b510      	push	{r4, lr}
 800ba1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba22:	4291      	cmp	r1, r2
 800ba24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba28:	d1f9      	bne.n	800ba1e <memcpy+0xe>
 800ba2a:	bd10      	pop	{r4, pc}

0800ba2c <_free_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4605      	mov	r5, r0
 800ba30:	2900      	cmp	r1, #0
 800ba32:	d040      	beq.n	800bab6 <_free_r+0x8a>
 800ba34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba38:	1f0c      	subs	r4, r1, #4
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	bfb8      	it	lt
 800ba3e:	18e4      	addlt	r4, r4, r3
 800ba40:	f7ff ff74 	bl	800b92c <__malloc_lock>
 800ba44:	4a1c      	ldr	r2, [pc, #112]	@ (800bab8 <_free_r+0x8c>)
 800ba46:	6813      	ldr	r3, [r2, #0]
 800ba48:	b933      	cbnz	r3, 800ba58 <_free_r+0x2c>
 800ba4a:	6063      	str	r3, [r4, #4]
 800ba4c:	6014      	str	r4, [r2, #0]
 800ba4e:	4628      	mov	r0, r5
 800ba50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba54:	f7ff bf70 	b.w	800b938 <__malloc_unlock>
 800ba58:	42a3      	cmp	r3, r4
 800ba5a:	d908      	bls.n	800ba6e <_free_r+0x42>
 800ba5c:	6820      	ldr	r0, [r4, #0]
 800ba5e:	1821      	adds	r1, r4, r0
 800ba60:	428b      	cmp	r3, r1
 800ba62:	bf01      	itttt	eq
 800ba64:	6819      	ldreq	r1, [r3, #0]
 800ba66:	685b      	ldreq	r3, [r3, #4]
 800ba68:	1809      	addeq	r1, r1, r0
 800ba6a:	6021      	streq	r1, [r4, #0]
 800ba6c:	e7ed      	b.n	800ba4a <_free_r+0x1e>
 800ba6e:	461a      	mov	r2, r3
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	b10b      	cbz	r3, 800ba78 <_free_r+0x4c>
 800ba74:	42a3      	cmp	r3, r4
 800ba76:	d9fa      	bls.n	800ba6e <_free_r+0x42>
 800ba78:	6811      	ldr	r1, [r2, #0]
 800ba7a:	1850      	adds	r0, r2, r1
 800ba7c:	42a0      	cmp	r0, r4
 800ba7e:	d10b      	bne.n	800ba98 <_free_r+0x6c>
 800ba80:	6820      	ldr	r0, [r4, #0]
 800ba82:	4401      	add	r1, r0
 800ba84:	1850      	adds	r0, r2, r1
 800ba86:	4283      	cmp	r3, r0
 800ba88:	6011      	str	r1, [r2, #0]
 800ba8a:	d1e0      	bne.n	800ba4e <_free_r+0x22>
 800ba8c:	6818      	ldr	r0, [r3, #0]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	4408      	add	r0, r1
 800ba92:	6010      	str	r0, [r2, #0]
 800ba94:	6053      	str	r3, [r2, #4]
 800ba96:	e7da      	b.n	800ba4e <_free_r+0x22>
 800ba98:	d902      	bls.n	800baa0 <_free_r+0x74>
 800ba9a:	230c      	movs	r3, #12
 800ba9c:	602b      	str	r3, [r5, #0]
 800ba9e:	e7d6      	b.n	800ba4e <_free_r+0x22>
 800baa0:	6820      	ldr	r0, [r4, #0]
 800baa2:	1821      	adds	r1, r4, r0
 800baa4:	428b      	cmp	r3, r1
 800baa6:	bf01      	itttt	eq
 800baa8:	6819      	ldreq	r1, [r3, #0]
 800baaa:	685b      	ldreq	r3, [r3, #4]
 800baac:	1809      	addeq	r1, r1, r0
 800baae:	6021      	streq	r1, [r4, #0]
 800bab0:	6063      	str	r3, [r4, #4]
 800bab2:	6054      	str	r4, [r2, #4]
 800bab4:	e7cb      	b.n	800ba4e <_free_r+0x22>
 800bab6:	bd38      	pop	{r3, r4, r5, pc}
 800bab8:	200016a0 	.word	0x200016a0

0800babc <_malloc_usable_size_r>:
 800babc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac0:	1f18      	subs	r0, r3, #4
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	bfbc      	itt	lt
 800bac6:	580b      	ldrlt	r3, [r1, r0]
 800bac8:	18c0      	addlt	r0, r0, r3
 800baca:	4770      	bx	lr

0800bacc <_init>:
 800bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bace:	bf00      	nop
 800bad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad2:	bc08      	pop	{r3}
 800bad4:	469e      	mov	lr, r3
 800bad6:	4770      	bx	lr

0800bad8 <_fini>:
 800bad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bada:	bf00      	nop
 800badc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bade:	bc08      	pop	{r3}
 800bae0:	469e      	mov	lr, r3
 800bae2:	4770      	bx	lr
