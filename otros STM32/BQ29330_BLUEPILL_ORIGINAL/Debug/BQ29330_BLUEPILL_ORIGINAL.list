
BQ29330_BLUEPILL_ORIGINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b978  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800ba88  0800ba88  0000ca88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbdc  0800bbdc  0000d1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbdc  0800bbdc  0000cbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbe4  0800bbe4  0000d1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbe4  0800bbe4  0000cbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bbe8  0800bbe8  0000cbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800bbec  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014dc  200001cc  0800bdb8  0000d1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016a8  0800bdb8  0000d6a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3d9  00000000  00000000  0000d1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048f7  00000000  00000000  000285ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  0002cec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000128a  00000000  00000000  0002e6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d4f8  00000000  00000000  0002f962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000211d2  00000000  00000000  0004ce5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097462  00000000  00000000  0006e02c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010548e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006920  00000000  00000000  001054d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0010bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001cc 	.word	0x200001cc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ba70 	.word	0x0800ba70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d0 	.word	0x200001d0
 800014c:	0800ba70 	.word	0x0800ba70

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	@ 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <MX_ADC1_Init+0x94>)
 800077e:	4a21      	ldr	r2, [pc, #132]	@ (8000804 <MX_ADC1_Init+0x98>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_ADC1_Init+0x94>)
 8000784:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_ADC1_Init+0x94>)
 800078c:	2201      	movs	r2, #1
 800078e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <MX_ADC1_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000796:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_ADC1_Init+0x94>)
 8000798:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800079c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <MX_ADC1_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_ADC1_Init+0x94>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007aa:	4815      	ldr	r0, [pc, #84]	@ (8000800 <MX_ADC1_Init+0x94>)
 80007ac:	f000 ff16 	bl	80015dc <HAL_ADC_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80007b6:	f000 fc33 	bl	8001020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007be:	2301      	movs	r3, #1
 80007c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 80007c2:	2304      	movs	r3, #4
 80007c4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_ADC1_Init+0x94>)
 80007cc:	f001 f996 	bl	8001afc <HAL_ADC_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 fc23 	bl	8001020 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007da:	2302      	movs	r3, #2
 80007dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007de:	2302      	movs	r3, #2
 80007e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	@ (8000800 <MX_ADC1_Init+0x94>)
 80007e8:	f001 f988 	bl	8001afc <HAL_ADC_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80007f2:	f000 fc15 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200001e8 	.word	0x200001e8
 8000804:	40012400 	.word	0x40012400

08000808 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a2c      	ldr	r2, [pc, #176]	@ (80008d4 <HAL_ADC_MspInit+0xcc>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d151      	bne.n	80008cc <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000828:	4b2b      	ldr	r3, [pc, #172]	@ (80008d8 <HAL_ADC_MspInit+0xd0>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a2a      	ldr	r2, [pc, #168]	@ (80008d8 <HAL_ADC_MspInit+0xd0>)
 800082e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <HAL_ADC_MspInit+0xd0>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b25      	ldr	r3, [pc, #148]	@ (80008d8 <HAL_ADC_MspInit+0xd0>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a24      	ldr	r2, [pc, #144]	@ (80008d8 <HAL_ADC_MspInit+0xd0>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b22      	ldr	r3, [pc, #136]	@ (80008d8 <HAL_ADC_MspInit+0xd0>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Curr_bats_Pin|Vbat1_Pin|Vbat2_Pin;
 8000858:	2307      	movs	r3, #7
 800085a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085c:	2303      	movs	r3, #3
 800085e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	481d      	ldr	r0, [pc, #116]	@ (80008dc <HAL_ADC_MspInit+0xd4>)
 8000868:	f001 fe46 	bl	80024f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800086c:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 800086e:	4a1d      	ldr	r2, [pc, #116]	@ (80008e4 <HAL_ADC_MspInit+0xdc>)
 8000870:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000872:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000878:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 8000880:	2280      	movs	r2, #128	@ 0x80
 8000882:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 8000886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800088a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 800088e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000892:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 8000896:	2220      	movs	r2, #32
 8000898:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008a0:	480f      	ldr	r0, [pc, #60]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 80008a2:	f001 fc3b 	bl	800211c <HAL_DMA_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80008ac:	f000 fbb8 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a0b      	ldr	r2, [pc, #44]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 80008b4:	621a      	str	r2, [r3, #32]
 80008b6:	4a0a      	ldr	r2, [pc, #40]	@ (80008e0 <HAL_ADC_MspInit+0xd8>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2012      	movs	r0, #18
 80008c2:	f001 fbf4 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80008c6:	2012      	movs	r0, #18
 80008c8:	f001 fc0d 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40012400 	.word	0x40012400
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010800 	.word	0x40010800
 80008e0:	20000218 	.word	0x20000218
 80008e4:	40020008 	.word	0x40020008

080008e8 <BMSVoltageCorrection>:

/* USER CODE BEGIN 1 */
uint16_t currentScale(uint16_t rawValue){
	  return  (uint16_t) rawValue  * CONVERSION_FACTOR;
}
uint16_t BMSVoltageCorrection(uint16_t rawValue){
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
	  return (uint16_t) ((975 - rawValue)*100/15);
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	f5c3 7373 	rsb	r3, r3, #972	@ 0x3cc
 80008f8:	3303      	adds	r3, #3
 80008fa:	2264      	movs	r2, #100	@ 0x64
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	4a06      	ldr	r2, [pc, #24]	@ (800091c <BMSVoltageCorrection+0x34>)
 8000902:	fb82 1203 	smull	r1, r2, r2, r3
 8000906:	441a      	add	r2, r3
 8000908:	10d2      	asrs	r2, r2, #3
 800090a:	17db      	asrs	r3, r3, #31
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	b29b      	uxth	r3, r3
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	88888889 	.word	0x88888889

08000920 <BQ29330_ReadFunctionControl>:



// Lee el valor actual del registro FUNCTION_CONTROL (0x03) del BQ29330
HAL_StatusTypeDef BQ29330_ReadFunctionControl(BQ29330_Registers reg, uint8_t *valor_leido)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af02      	add	r7, sp, #8
 8000926:	4603      	mov	r3, r0
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[1];
    buffer[0] = reg; 		// Dirección del registro
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	733b      	strb	r3, [r7, #12]
    // Paso 1: Enviar la dirección del registro que queremos leer (0x03)
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 1, HAL_MAX_DELAY);
 8000930:	f107 020c 	add.w	r2, r7, #12
 8000934:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	2140      	movs	r1, #64	@ 0x40
 800093e:	480c      	ldr	r0, [pc, #48]	@ (8000970 <BQ29330_ReadFunctionControl+0x50>)
 8000940:	f002 f8d4 	bl	8002aec <HAL_I2C_Master_Transmit>
 8000944:	4603      	mov	r3, r0
 8000946:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;  // Si falla al enviar la dirección del registro, retornamos el error
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <BQ29330_ReadFunctionControl+0x32>
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	e009      	b.n	8000966 <BQ29330_ReadFunctionControl+0x46>
    // Paso 2: Leer un byte desde el dispositivo (valor del registro FUNCTION_CONTROL)
    return HAL_I2C_Master_Receive(&hi2c1, BMS_I2C_ADDRESS, valor_leido, 1, HAL_MAX_DELAY);  // Devolver el estado de la operación y el valor leído en *valor_leido
 8000952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	2140      	movs	r1, #64	@ 0x40
 800095e:	4804      	ldr	r0, [pc, #16]	@ (8000970 <BQ29330_ReadFunctionControl+0x50>)
 8000960:	f002 f9c2 	bl	8002ce8 <HAL_I2C_Master_Receive>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000025c 	.word	0x2000025c

08000974 <BQ29330_WriteRegister>:



// Función para escribir en un registro del BQ29330
HAL_StatusTypeDef BQ29330_WriteRegister(BQ29330_Registers reg, uint8_t data)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af02      	add	r7, sp, #8
 800097a:	4603      	mov	r3, r0
 800097c:	460a      	mov	r2, r1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	4613      	mov	r3, r2
 8000982:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = reg; 		// Dirección del registro
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;        // Dato a escribir
 8000988:	79bb      	ldrb	r3, [r7, #6]
 800098a:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 800098c:	f107 020c 	add.w	r2, r7, #12
 8000990:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2302      	movs	r3, #2
 8000998:	2140      	movs	r1, #64	@ 0x40
 800099a:	4804      	ldr	r0, [pc, #16]	@ (80009ac <BQ29330_WriteRegister+0x38>)
 800099c:	f002 f8a6 	bl	8002aec <HAL_I2C_Master_Transmit>
 80009a0:	4603      	mov	r3, r0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000025c 	.word	0x2000025c

080009b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_DMA_Init+0x38>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a0b      	ldr	r2, [pc, #44]	@ (80009e8 <MX_DMA_Init+0x38>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6153      	str	r3, [r2, #20]
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_DMA_Init+0x38>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	200b      	movs	r0, #11
 80009d4:	f001 fb6b 	bl	80020ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009d8:	200b      	movs	r0, #11
 80009da:	f001 fb84 	bl	80020e6 <HAL_NVIC_EnableIRQ>

}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a00:	4b29      	ldr	r3, [pc, #164]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a28      	ldr	r2, [pc, #160]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a18:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a22      	ldr	r2, [pc, #136]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a48:	4b17      	ldr	r3, [pc, #92]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a16      	ldr	r2, [pc, #88]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_GPIO_Init+0xbc>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0308 	and.w	r3, r3, #8
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activador_GPIO_Port, activador_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a66:	4811      	ldr	r0, [pc, #68]	@ (8000aac <MX_GPIO_Init+0xc0>)
 8000a68:	f001 feca 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activador_Pin;
 8000a6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(activador_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4619      	mov	r1, r3
 8000a84:	4809      	ldr	r0, [pc, #36]	@ (8000aac <MX_GPIO_Init+0xc0>)
 8000a86:	f001 fd37 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a90:	2303      	movs	r3, #3
 8000a92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <MX_GPIO_Init+0xc4>)
 8000a9c:	f001 fd2c 	bl	80024f8 <HAL_GPIO_Init>

}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40011000 	.word	0x40011000
 8000ab0:	40010c00 	.word	0x40010c00

08000ab4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000aba:	4a13      	ldr	r2, [pc, #76]	@ (8000b08 <MX_I2C1_Init+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ac0:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <MX_I2C1_Init+0x58>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ad2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ad6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000af2:	f001 feb7 	bl	8002864 <HAL_I2C_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000afc:	f000 fa90 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000025c 	.word	0x2000025c
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	000186a0 	.word	0x000186a0

08000b10 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b16:	4a13      	ldr	r2, [pc, #76]	@ (8000b64 <MX_I2C2_Init+0x54>)
 8000b18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b1c:	4a12      	ldr	r2, [pc, #72]	@ (8000b68 <MX_I2C2_Init+0x58>)
 8000b1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_I2C2_Init+0x50>)
 8000b4e:	f001 fe89 	bl	8002864 <HAL_I2C_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b58:	f000 fa62 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200002b0 	.word	0x200002b0
 8000b64:	40005800 	.word	0x40005800
 8000b68:	000186a0 	.word	0x000186a0

08000b6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a2b      	ldr	r2, [pc, #172]	@ (8000c34 <HAL_I2C_MspInit+0xc8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d124      	bne.n	8000bd6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a29      	ldr	r2, [pc, #164]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ba4:	23c0      	movs	r3, #192	@ 0xc0
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba8:	2312      	movs	r3, #18
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4821      	ldr	r0, [pc, #132]	@ (8000c3c <HAL_I2C_MspInit+0xd0>)
 8000bb8:	f001 fc9e 	bl	80024f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000bc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bc6:	61d3      	str	r3, [r2, #28]
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000bd4:	e029      	b.n	8000c2a <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a19      	ldr	r2, [pc, #100]	@ (8000c40 <HAL_I2C_MspInit+0xd4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d124      	bne.n	8000c2a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a14      	ldr	r2, [pc, #80]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bf8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bfe:	2312      	movs	r3, #18
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <HAL_I2C_MspInit+0xd0>)
 8000c0e:	f001 fc73 	bl	80024f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000c18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c1c:	61d3      	str	r3, [r2, #28]
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_I2C_MspInit+0xcc>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	@ 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	40005800 	.word	0x40005800

08000c44 <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t convCompleted=0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	convCompleted=1;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	@ (8000c5c <HAL_ADC_ConvCpltCallback+0x18>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	20000304 	.word	0x20000304

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0c0      	sub	sp, #256	@ 0x100
 8000c64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c66:	f000 fc33 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6a:	f000 f97b 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6e:	f7ff febd 	bl	80009ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000c72:	f7ff fe9d 	bl	80009b0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000c76:	f000 fb67 	bl	8001348 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000c7a:	f7ff fd77 	bl	800076c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c7e:	f000 fa8d 	bl	800119c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000c82:	f009 fdbb 	bl	800a7fc <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000c86:	f7ff ff15 	bl	8000ab4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c8a:	f7ff ff41 	bl	8000b10 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //start PWMs
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c8e:	2100      	movs	r1, #0
 8000c90:	48a7      	ldr	r0, [pc, #668]	@ (8000f30 <main+0x2d0>)
 8000c92:	f005 f891 	bl	8005db8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period/2);
 8000c96:	4ba6      	ldr	r3, [pc, #664]	@ (8000f30 <main+0x2d0>)
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	4ba5      	ldr	r3, [pc, #660]	@ (8000f30 <main+0x2d0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	0852      	lsrs	r2, r2, #1
 8000ca0:	635a      	str	r2, [r3, #52]	@ 0x34


  //ADC Variables
   uint16_t rawValues[2];
   HAL_ADC_Start_DMA(&hadc1,(uint32_t *) rawValues, 3);
 8000ca2:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	4619      	mov	r1, r3
 8000caa:	48a2      	ldr	r0, [pc, #648]	@ (8000f34 <main+0x2d4>)
 8000cac:	f000 fd6e 	bl	800178c <HAL_ADC_Start_DMA>

   //BMS
   BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL,0x06);
 8000cb0:	2106      	movs	r1, #6
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff fe5e 	bl	8000974 <BQ29330_WriteRegister>
   BQ29330_Device bq = { .hi2c = &hi2c1 };
 8000cb8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]
 8000cca:	619a      	str	r2, [r3, #24]
 8000ccc:	4b9a      	ldr	r3, [pc, #616]	@ (8000f38 <main+0x2d8>)
 8000cce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
   uint8_t n = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//read all adcs
	while(!convCompleted);
 8000cd8:	bf00      	nop
 8000cda:	4b98      	ldr	r3, [pc, #608]	@ (8000f3c <main+0x2dc>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0fb      	beq.n	8000cda <main+0x7a>
	//factor de multiplicacion de la corriente en entradas mppt (50 x 33mohm)^-1
	//las tensiones se multiplican x2
	uint16_t cell_mas = rawValues[0] * CONVERSION_FACTOR;
 8000ce2:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fcb6 	bl	8000658 <__aeabi_i2d>
 8000cec:	a38e      	add	r3, pc, #568	@ (adr r3, 8000f28 <main+0x2c8>)
 8000cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf2:	f7ff fa35 	bl	8000160 <__aeabi_dmul>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	4610      	mov	r0, r2
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f7ff fd15 	bl	800072c <__aeabi_d2uiz>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
	uint16_t cell_menos = rawValues[1] * CONVERSION_FACTOR;
 8000d08:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fca3 	bl	8000658 <__aeabi_i2d>
 8000d12:	a385      	add	r3, pc, #532	@ (adr r3, 8000f28 <main+0x2c8>)
 8000d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d18:	f7ff fa22 	bl	8000160 <__aeabi_dmul>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4610      	mov	r0, r2
 8000d22:	4619      	mov	r1, r3
 8000d24:	f7ff fd02 	bl	800072c <__aeabi_d2uiz>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2
	uint16_t difference = BMSVoltageCorrection(cell_mas - cell_menos); //correcion tener la tension de la celda
 8000d2e:	f8b7 20f4 	ldrh.w	r2, [r7, #244]	@ 0xf4
 8000d32:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fdd4 	bl	80008e8 <BMSVoltageCorrection>
 8000d40:	4603      	mov	r3, r0
 8000d42:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0

	// Imprimo cosas
	char buffer[STR_LEN];
	snprintf(buffer, STR_LEN, "\n \n I LIKE THE WAY YOU WORKING \n");
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4a7d      	ldr	r2, [pc, #500]	@ (8000f40 <main+0x2e0>)
 8000d4a:	21c8      	movs	r1, #200	@ 0xc8
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f00a f9cb 	bl	800b0e8 <sniprintf>
	HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff f9fb 	bl	8000150 <strlen>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	1d3a      	adds	r2, r7, #4
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d64:	9100      	str	r1, [sp, #0]
 8000d66:	2110      	movs	r1, #16
 8000d68:	4873      	ldr	r0, [pc, #460]	@ (8000f38 <main+0x2d8>)
 8000d6a:	f001 febf 	bl	8002aec <HAL_I2C_Master_Transmit>
/*
    sprintf(buffer,"Corriente: %u \n", current);
	HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
*/
	//FORMA NUEVA DE IMPRIMIR LLAMANDO A UNA FUNCION SI NO ANDA USAR LA FORMA VIEJA
	sendUsartMsg("Tension cell +: ", rawValues[0]);
 8000d6e:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 8000d72:	4619      	mov	r1, r3
 8000d74:	4873      	ldr	r0, [pc, #460]	@ (8000f44 <main+0x2e4>)
 8000d76:	f000 fb5d 	bl	8001434 <sendUsartMsg>
	sendUsartMsg("Tension cell -: ", rawValues[1]);
 8000d7a:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4871      	ldr	r0, [pc, #452]	@ (8000f48 <main+0x2e8>)
 8000d82:	f000 fb57 	bl	8001434 <sendUsartMsg>
	sendUsartMsg("Tension celda: ", difference);
 8000d86:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	486f      	ldr	r0, [pc, #444]	@ (8000f4c <main+0x2ec>)
 8000d8e:	f000 fb51 	bl	8001434 <sendUsartMsg>


	//BMS 29330

    //escribo
    BQ29330_WriteRegister(BQ29330_STATE_CONTROL, 0x0C);   // WDDIS = 1, all else = 0
 8000d92:	210c      	movs	r1, #12
 8000d94:	2002      	movs	r0, #2
 8000d96:	f7ff fded 	bl	8000974 <BQ29330_WriteRegister>

    BQ29330_WriteRegister(BQ29330_FUNCTION_CONTROL, 0x01); // VMEN||BAT = 0
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f7ff fde9 	bl	8000974 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_CELL, n); 			   //
 8000da2:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8000da6:	4619      	mov	r1, r3
 8000da8:	2004      	movs	r0, #4
 8000daa:	f7ff fde3 	bl	8000974 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLV, 0x00);              // 50 mV 0x00
 8000dae:	2100      	movs	r1, #0
 8000db0:	2005      	movs	r0, #5
 8000db2:	f7ff fddf 	bl	8000974 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLD, 0x0F);              // 31 ms
 8000db6:	210f      	movs	r1, #15
 8000db8:	2006      	movs	r0, #6
 8000dba:	f7ff fddb 	bl	8000974 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCC, 0x00);              // 475 mV y 915 μs
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2007      	movs	r0, #7
 8000dc2:	f7ff fdd7 	bl	8000974 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCD, 0x00);              // idem for discharge
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2008      	movs	r0, #8
 8000dca:	f7ff fdd3 	bl	8000974 <BQ29330_WriteRegister>
    n++;
 8000dce:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
    n = n%2;
 8000dd8:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7


    //leo
	HAL_StatusTypeDef statusI2c = BQ29330_ReadFunctionControl(BQ29330_STATUS, &bq.BQ29330_status);
 8000de4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000de8:	3310      	adds	r3, #16
 8000dea:	4619      	mov	r1, r3
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fd97 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

	//LEO el registro que escribi
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_OUTPUT_CONTROL, &bq.BQ29330_output_countrol);
 8000df8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000dfc:	3311      	adds	r3, #17
 8000dfe:	4619      	mov	r1, r3
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff fd8d 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_STATE_CONTROL, &bq.BQ29330_state_countrol);
 8000e0c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e10:	3312      	adds	r3, #18
 8000e12:	4619      	mov	r1, r3
 8000e14:	2002      	movs	r0, #2
 8000e16:	f7ff fd83 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_FUNCTION_CONTROL, &bq.BQ29330_function_control);
 8000e20:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e24:	3313      	adds	r3, #19
 8000e26:	4619      	mov	r1, r3
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f7ff fd79 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_CELL, &bq.BQ29330_cell);
 8000e34:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e38:	3314      	adds	r3, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	2004      	movs	r0, #4
 8000e3e:	f7ff fd6f 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_OLV, &bq.BQ29330_OLV);
 8000e48:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e4c:	3315      	adds	r3, #21
 8000e4e:	4619      	mov	r1, r3
 8000e50:	2005      	movs	r0, #5
 8000e52:	f7ff fd65 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000e56:	4603      	mov	r3, r0
 8000e58:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_OLD, &bq.BQ29330_OLD);
 8000e5c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e60:	3316      	adds	r3, #22
 8000e62:	4619      	mov	r1, r3
 8000e64:	2006      	movs	r0, #6
 8000e66:	f7ff fd5b 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_SCC, &bq.BQ29330_SCC);
 8000e70:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e74:	3317      	adds	r3, #23
 8000e76:	4619      	mov	r1, r3
 8000e78:	2007      	movs	r0, #7
 8000e7a:	f7ff fd51 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	statusI2c =  BQ29330_ReadFunctionControl(BQ29330_SCD, &bq.BQ29330_SCD);
 8000e84:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e88:	3318      	adds	r3, #24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	2008      	movs	r0, #8
 8000e8e:	f7ff fd47 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

	sendUsartMsg("statusI2c : ", statusI2c);
 8000e98:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	482b      	ldr	r0, [pc, #172]	@ (8000f50 <main+0x2f0>)
 8000ea2:	f000 fac7 	bl	8001434 <sendUsartMsg>
	sendUsartMsg("celda medida : ", n + 1);
 8000ea6:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	3301      	adds	r3, #1
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4828      	ldr	r0, [pc, #160]	@ (8000f54 <main+0x2f4>)
 8000eb4:	f000 fabe 	bl	8001434 <sendUsartMsg>
	sendUsartMsg("SCC (Short circuit in charge): ", bq.BQ29330_SCC);
	sendUsartMsg("SCD (Short circuit in discharge): ", bq.BQ29330_SCD);
	 */

	//si hay una fall reiniciar el bq
	if(bq.BQ29330_status & (1U << 4) || (bq.BQ29330_status && bq.BQ29330_status != 16)){
 8000eb8:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d107      	bne.n	8000ed4 <main+0x274>
 8000ec4:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d01b      	beq.n	8000f04 <main+0x2a4>
 8000ecc:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8000ed0:	2b10      	cmp	r3, #16
 8000ed2:	d017      	beq.n	8000f04 <main+0x2a4>
	    BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL,0x07);
 8000ed4:	2107      	movs	r1, #7
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff fd4c 	bl	8000974 <BQ29330_WriteRegister>
	    BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL,0x06);
 8000edc:	2106      	movs	r1, #6
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f7ff fd48 	bl	8000974 <BQ29330_WriteRegister>
		statusI2c =  BQ29330_ReadFunctionControl(BQ29330_STATUS, &bq.BQ29330_status);
 8000ee4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ee8:	3310      	adds	r3, #16
 8000eea:	4619      	mov	r1, r3
 8000eec:	2000      	movs	r0, #0
 8000eee:	f7ff fd17 	bl	8000920 <BQ29330_ReadFunctionControl>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	    sendUsartMsg("Estatus del bms despues del latch: ", bq.BQ29330_status);
 8000ef8:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8000efc:	4619      	mov	r1, r3
 8000efe:	4816      	ldr	r0, [pc, #88]	@ (8000f58 <main+0x2f8>)
 8000f00:	f000 fa98 	bl	8001434 <sendUsartMsg>
    }

	sendUsartMsg(" ", 9999); //renglon en blanco
 8000f04:	f242 710f 	movw	r1, #9999	@ 0x270f
 8000f08:	4814      	ldr	r0, [pc, #80]	@ (8000f5c <main+0x2fc>)
 8000f0a:	f000 fa93 	bl	8001434 <sendUsartMsg>
*/




	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f12:	4813      	ldr	r0, [pc, #76]	@ (8000f60 <main+0x300>)
 8000f14:	f001 fc8c 	bl	8002830 <HAL_GPIO_TogglePin>
	HAL_Delay(DELAY);
 8000f18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f1c:	f000 fb3a 	bl	8001594 <HAL_Delay>
  {
 8000f20:	e6da      	b.n	8000cd8 <main+0x78>
 8000f22:	bf00      	nop
 8000f24:	f3af 8000 	nop.w
 8000f28:	99c99c9a 	.word	0x99c99c9a
 8000f2c:	3fe9c99c 	.word	0x3fe9c99c
 8000f30:	2000030c 	.word	0x2000030c
 8000f34:	200001e8 	.word	0x200001e8
 8000f38:	2000025c 	.word	0x2000025c
 8000f3c:	20000304 	.word	0x20000304
 8000f40:	0800ba88 	.word	0x0800ba88
 8000f44:	0800baac 	.word	0x0800baac
 8000f48:	0800bac0 	.word	0x0800bac0
 8000f4c:	0800bad4 	.word	0x0800bad4
 8000f50:	0800bae4 	.word	0x0800bae4
 8000f54:	0800baf4 	.word	0x0800baf4
 8000f58:	0800bb04 	.word	0x0800bb04
 8000f5c:	0800bb28 	.word	0x0800bb28
 8000f60:	40011000 	.word	0x40011000

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	@ 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f6e:	2228      	movs	r2, #40	@ 0x28
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f00a f8ec 	bl	800b150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000faa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000fb0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f004 f9e6 	bl	800538c <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fc6:	f000 f82b 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fda:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 fc52 	bl	8005890 <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ff2:	f000 f815 	bl	8001020 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000ff6:	2312      	movs	r3, #18
 8000ff8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000ffa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ffe:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001000:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001004:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	4618      	mov	r0, r3
 800100a:	f004 fdcf 	bl	8005bac <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001014:	f000 f804 	bl	8001020 <Error_Handler>
  }
}
 8001018:	bf00      	nop
 800101a:	3750      	adds	r7, #80	@ 0x50
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <Error_Handler+0x8>

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_MspInit+0x5c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a14      	ldr	r2, [pc, #80]	@ (8001088 <HAL_MspInit+0x5c>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_MspInit+0x5c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <HAL_MspInit+0x5c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a0e      	ldr	r2, [pc, #56]	@ (8001088 <HAL_MspInit+0x5c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <HAL_MspInit+0x5c>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_MspInit+0x60>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <HAL_MspInit+0x60>)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <NMI_Handler+0x4>

08001098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <MemManage_Handler+0x4>

080010a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 fa3c 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <DMA1_Channel1_IRQHandler+0x10>)
 80010ee:	f001 f8cf 	bl	8002290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000218 	.word	0x20000218

080010fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <ADC1_2_IRQHandler+0x10>)
 8001102:	f000 fc21 	bl	8001948 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200001e8 	.word	0x200001e8

08001110 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001116:	f002 fcf4 	bl	8003b02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20001068 	.word	0x20001068

08001124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800112c:	4a14      	ldr	r2, [pc, #80]	@ (8001180 <_sbrk+0x5c>)
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <_sbrk+0x60>)
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <_sbrk+0x64>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <_sbrk+0x64>)
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <_sbrk+0x68>)
 8001144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	429a      	cmp	r2, r3
 8001152:	d207      	bcs.n	8001164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001154:	f00a f804 	bl	800b160 <__errno>
 8001158:	4603      	mov	r3, r0
 800115a:	220c      	movs	r2, #12
 800115c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001162:	e009      	b.n	8001178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <_sbrk+0x64>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	4a05      	ldr	r2, [pc, #20]	@ (8001188 <_sbrk+0x64>)
 8001174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20005000 	.word	0x20005000
 8001184:	00000400 	.word	0x00000400
 8001188:	20000308 	.word	0x20000308
 800118c:	200016a8 	.word	0x200016a8

08001190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b092      	sub	sp, #72	@ 0x48
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	615a      	str	r2, [r3, #20]
 80011be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2220      	movs	r2, #32
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 ffc2 	bl	800b150 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011cc:	4b33      	ldr	r3, [pc, #204]	@ (800129c <MX_TIM1_Init+0x100>)
 80011ce:	4a34      	ldr	r2, [pc, #208]	@ (80012a0 <MX_TIM1_Init+0x104>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80011d2:	4b32      	ldr	r3, [pc, #200]	@ (800129c <MX_TIM1_Init+0x100>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b30      	ldr	r3, [pc, #192]	@ (800129c <MX_TIM1_Init+0x100>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 750;
 80011de:	4b2f      	ldr	r3, [pc, #188]	@ (800129c <MX_TIM1_Init+0x100>)
 80011e0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80011e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80011e6:	4b2d      	ldr	r3, [pc, #180]	@ (800129c <MX_TIM1_Init+0x100>)
 80011e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ee:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <MX_TIM1_Init+0x100>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b29      	ldr	r3, [pc, #164]	@ (800129c <MX_TIM1_Init+0x100>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011fa:	4828      	ldr	r0, [pc, #160]	@ (800129c <MX_TIM1_Init+0x100>)
 80011fc:	f004 fd8c 	bl	8005d18 <HAL_TIM_PWM_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001206:	f7ff ff0b 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120e:	2300      	movs	r3, #0
 8001210:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001212:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001216:	4619      	mov	r1, r3
 8001218:	4820      	ldr	r0, [pc, #128]	@ (800129c <MX_TIM1_Init+0x100>)
 800121a:	f005 f94b 	bl	80064b4 <HAL_TIMEx_MasterConfigSynchronization>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001224:	f7ff fefc 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001228:	2360      	movs	r3, #96	@ 0x60
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001230:	2300      	movs	r3, #0
 8001232:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001234:	2300      	movs	r3, #0
 8001236:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800123c:	2300      	movs	r3, #0
 800123e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001248:	2200      	movs	r2, #0
 800124a:	4619      	mov	r1, r3
 800124c:	4813      	ldr	r0, [pc, #76]	@ (800129c <MX_TIM1_Init+0x100>)
 800124e:	f004 fe55 	bl	8005efc <HAL_TIM_PWM_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001258:	f7ff fee2 	bl	8001020 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001270:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001274:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	4619      	mov	r1, r3
 800127e:	4807      	ldr	r0, [pc, #28]	@ (800129c <MX_TIM1_Init+0x100>)
 8001280:	f005 f976 	bl	8006570 <HAL_TIMEx_ConfigBreakDeadTime>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800128a:	f7ff fec9 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800128e:	4803      	ldr	r0, [pc, #12]	@ (800129c <MX_TIM1_Init+0x100>)
 8001290:	f000 f826 	bl	80012e0 <HAL_TIM_MspPostInit>

}
 8001294:	bf00      	nop
 8001296:	3748      	adds	r7, #72	@ 0x48
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000030c 	.word	0x2000030c
 80012a0:	40012c00 	.word	0x40012c00

080012a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a09      	ldr	r2, [pc, #36]	@ (80012d8 <HAL_TIM_PWM_MspInit+0x34>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d10b      	bne.n	80012ce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_TIM_PWM_MspInit+0x38>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_TIM_PWM_MspInit+0x38>)
 80012bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_TIM_PWM_MspInit+0x38>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	40012c00 	.word	0x40012c00
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a10      	ldr	r2, [pc, #64]	@ (800133c <HAL_TIM_MspPostInit+0x5c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d118      	bne.n	8001332 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <HAL_TIM_MspPostInit+0x60>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a0e      	ldr	r2, [pc, #56]	@ (8001340 <HAL_TIM_MspPostInit+0x60>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <HAL_TIM_MspPostInit+0x60>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = WDI_32KHz_Pin;
 8001318:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800131c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2302      	movs	r3, #2
 8001324:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WDI_32KHz_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	@ (8001344 <HAL_TIM_MspPostInit+0x64>)
 800132e:	f001 f8e3 	bl	80024f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40012c00 	.word	0x40012c00
 8001340:	40021000 	.word	0x40021000
 8001344:	40010800 	.word	0x40010800

08001348 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 800134e:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <MX_USART1_UART_Init+0x50>)
 8001350:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 8001354:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001358:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	@ (8001394 <MX_USART1_UART_Init+0x4c>)
 8001380:	f005 f947 	bl	8006612 <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800138a:	f7ff fe49 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000354 	.word	0x20000354
 8001398:	40013800 	.word	0x40013800

0800139c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001428 <HAL_UART_MspInit+0x8c>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d131      	bne.n	8001420 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <HAL_UART_MspInit+0x90>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a1a      	ldr	r2, [pc, #104]	@ (800142c <HAL_UART_MspInit+0x90>)
 80013c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b18      	ldr	r3, [pc, #96]	@ (800142c <HAL_UART_MspInit+0x90>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_UART_MspInit+0x90>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a14      	ldr	r2, [pc, #80]	@ (800142c <HAL_UART_MspInit+0x90>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <HAL_UART_MspInit+0x90>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	480b      	ldr	r0, [pc, #44]	@ (8001430 <HAL_UART_MspInit+0x94>)
 8001402:	f001 f879 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800140a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	4619      	mov	r1, r3
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <HAL_UART_MspInit+0x94>)
 800141c:	f001 f86c 	bl	80024f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40013800 	.word	0x40013800
 800142c:	40021000 	.word	0x40021000
 8001430:	40010800 	.word	0x40010800

08001434 <sendUsartMsg>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void sendUsartMsg(const char* label, uint16_t value) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	@ 0x50
 8001438:	af02      	add	r7, sp, #8
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
    char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "%s %u \n", label, value);
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	f107 0008 	add.w	r0, r7, #8
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a0c      	ldr	r2, [pc, #48]	@ (800147c <sendUsartMsg+0x48>)
 800144c:	2140      	movs	r1, #64	@ 0x40
 800144e:	f009 fe4b 	bl	800b0e8 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe fe7a 	bl	8000150 <strlen>
 800145c:	4603      	mov	r3, r0
 800145e:	b29a      	uxth	r2, r3
 8001460:	f107 0108 	add.w	r1, r7, #8
 8001464:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <sendUsartMsg+0x4c>)
 800146a:	f005 f922 	bl	80066b2 <HAL_UART_Transmit>
    HAL_Delay(10);
 800146e:	200a      	movs	r0, #10
 8001470:	f000 f890 	bl	8001594 <HAL_Delay>
}
 8001474:	bf00      	nop
 8001476:	3748      	adds	r7, #72	@ 0x48
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	0800bb2c 	.word	0x0800bb2c
 8001480:	20000354 	.word	0x20000354

08001484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001484:	f7ff fe84 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480b      	ldr	r0, [pc, #44]	@ (80014b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800148a:	490c      	ldr	r1, [pc, #48]	@ (80014bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800148c:	4a0c      	ldr	r2, [pc, #48]	@ (80014c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a09      	ldr	r2, [pc, #36]	@ (80014c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014a0:	4c09      	ldr	r4, [pc, #36]	@ (80014c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ae:	f009 fe5d 	bl	800b16c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b2:	f7ff fbd5 	bl	8000c60 <main>
  bx lr
 80014b6:	4770      	bx	lr
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80014c0:	0800bbec 	.word	0x0800bbec
  ldr r2, =_sbss
 80014c4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80014c8:	200016a8 	.word	0x200016a8

080014cc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <CAN1_RX1_IRQHandler>
	...

080014d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d4:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <HAL_Init+0x28>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a07      	ldr	r2, [pc, #28]	@ (80014f8 <HAL_Init+0x28>)
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 fdd9 	bl	8002098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e6:	200f      	movs	r0, #15
 80014e8:	f000 f808 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ec:	f7ff fd9e 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fdf1 	bl	8002102 <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001538:	f000 fdb9 	bl	80020ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	@ (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000000 	.word	0x20000000
 8001554:	20000008 	.word	0x20000008
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <HAL_IncTick+0x1c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b05      	ldr	r3, [pc, #20]	@ (800157c <HAL_IncTick+0x20>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a03      	ldr	r2, [pc, #12]	@ (800157c <HAL_IncTick+0x20>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000008 	.word	0x20000008
 800157c:	2000039c 	.word	0x2000039c

08001580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b02      	ldr	r3, [pc, #8]	@ (8001590 <HAL_GetTick+0x10>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	2000039c 	.word	0x2000039c

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff fff0 	bl	8001580 <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffe0 	bl	8001580 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000008 	.word	0x20000008

080015dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0be      	b.n	800177c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff f8f4 	bl	8000808 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fbbd 	bl	8001da0 <ADC_ConversionStop_Disable>
 8001626:	4603      	mov	r3, r0
 8001628:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 8099 	bne.w	800176a <HAL_ADC_Init+0x18e>
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 8095 	bne.w	800176a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001644:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001648:	f023 0302 	bic.w	r3, r3, #2
 800164c:	f043 0202 	orr.w	r2, r3, #2
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800165c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7b1b      	ldrb	r3, [r3, #12]
 8001662:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001664:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	4313      	orrs	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001674:	d003      	beq.n	800167e <HAL_ADC_Init+0xa2>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d102      	bne.n	8001684 <HAL_ADC_Init+0xa8>
 800167e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001682:	e000      	b.n	8001686 <HAL_ADC_Init+0xaa>
 8001684:	2300      	movs	r3, #0
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7d1b      	ldrb	r3, [r3, #20]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d119      	bne.n	80016c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7b1b      	ldrb	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d109      	bne.n	80016b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	035a      	lsls	r2, r3, #13
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	e00b      	b.n	80016c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b4:	f043 0220 	orr.w	r2, r3, #32
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	4b28      	ldr	r3, [pc, #160]	@ (8001784 <HAL_ADC_Init+0x1a8>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	68b9      	ldr	r1, [r7, #8]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016f8:	d003      	beq.n	8001702 <HAL_ADC_Init+0x126>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d104      	bne.n	800170c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	3b01      	subs	r3, #1
 8001708:	051b      	lsls	r3, r3, #20
 800170a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001712:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	430a      	orrs	r2, r1
 800171e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <HAL_ADC_Init+0x1ac>)
 8001728:	4013      	ands	r3, r2
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	429a      	cmp	r2, r3
 800172e:	d10b      	bne.n	8001748 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	f043 0201 	orr.w	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001746:	e018      	b.n	800177a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	f023 0312 	bic.w	r3, r3, #18
 8001750:	f043 0210 	orr.w	r2, r3, #16
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175c:	f043 0201 	orr.w	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001768:	e007      	b.n	800177a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176e:	f043 0210 	orr.w	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	ffe1f7fd 	.word	0xffe1f7fd
 8001788:	ff1f0efe 	.word	0xff1f0efe

0800178c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a64      	ldr	r2, [pc, #400]	@ (8001934 <HAL_ADC_Start_DMA+0x1a8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d004      	beq.n	80017b0 <HAL_ADC_Start_DMA+0x24>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a63      	ldr	r2, [pc, #396]	@ (8001938 <HAL_ADC_Start_DMA+0x1ac>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d106      	bne.n	80017be <HAL_ADC_Start_DMA+0x32>
 80017b0:	4b60      	ldr	r3, [pc, #384]	@ (8001934 <HAL_ADC_Start_DMA+0x1a8>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 80b3 	bne.w	8001924 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_ADC_Start_DMA+0x40>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e0ae      	b.n	800192a <HAL_ADC_Start_DMA+0x19e>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 fa89 	bl	8001cec <ADC_Enable>
 80017da:	4603      	mov	r3, r0
 80017dc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f040 809a 	bne.w	800191a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001938 <HAL_ADC_Start_DMA+0x1ac>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d105      	bne.n	8001810 <HAL_ADC_Start_DMA+0x84>
 8001804:	4b4b      	ldr	r3, [pc, #300]	@ (8001934 <HAL_ADC_Start_DMA+0x1a8>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d115      	bne.n	800183c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001814:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001826:	2b00      	cmp	r3, #0
 8001828:	d026      	beq.n	8001878 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001832:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800183a:	e01d      	b.n	8001878 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001840:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a39      	ldr	r2, [pc, #228]	@ (8001934 <HAL_ADC_Start_DMA+0x1a8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d004      	beq.n	800185c <HAL_ADC_Start_DMA+0xd0>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a38      	ldr	r2, [pc, #224]	@ (8001938 <HAL_ADC_Start_DMA+0x1ac>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d10d      	bne.n	8001878 <HAL_ADC_Start_DMA+0xec>
 800185c:	4b35      	ldr	r3, [pc, #212]	@ (8001934 <HAL_ADC_Start_DMA+0x1a8>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001864:	2b00      	cmp	r3, #0
 8001866:	d007      	beq.n	8001878 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001870:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001888:	f023 0206 	bic.w	r2, r3, #6
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001890:	e002      	b.n	8001898 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4a25      	ldr	r2, [pc, #148]	@ (800193c <HAL_ADC_Start_DMA+0x1b0>)
 80018a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a24      	ldr	r2, [pc, #144]	@ (8001940 <HAL_ADC_Start_DMA+0x1b4>)
 80018ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4a23      	ldr	r2, [pc, #140]	@ (8001944 <HAL_ADC_Start_DMA+0x1b8>)
 80018b6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f06f 0202 	mvn.w	r2, #2
 80018c0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018d0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a18      	ldr	r0, [r3, #32]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	334c      	adds	r3, #76	@ 0x4c
 80018dc:	4619      	mov	r1, r3
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f000 fc75 	bl	80021d0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018f0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80018f4:	d108      	bne.n	8001908 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001904:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001906:	e00f      	b.n	8001928 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001916:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001918:	e006      	b.n	8001928 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001922:	e001      	b.n	8001928 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001928:	7dfb      	ldrb	r3, [r7, #23]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40012400 	.word	0x40012400
 8001938:	40012800 	.word	0x40012800
 800193c:	08001e23 	.word	0x08001e23
 8001940:	08001e9f 	.word	0x08001e9f
 8001944:	08001ebb 	.word	0x08001ebb

08001948 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	2b00      	cmp	r3, #0
 8001968:	d03e      	beq.n	80019e8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d039      	beq.n	80019e8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001984:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001996:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800199a:	d11d      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d119      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0220 	bic.w	r2, r2, #32
 80019b2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff f933 	bl	8000c44 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f06f 0212 	mvn.w	r2, #18
 80019e6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d04d      	beq.n	8001a8e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d048      	beq.n	8001a8e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d105      	bne.n	8001a14 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001a1e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001a22:	d012      	beq.n	8001a4a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d125      	bne.n	8001a7e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001a3c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a40:	d11d      	bne.n	8001a7e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d119      	bne.n	8001a7e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a58:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d105      	bne.n	8001a7e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fa35 	bl	8001eee <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 020c 	mvn.w	r2, #12
 8001a8c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d012      	beq.n	8001abe <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00d      	beq.n	8001abe <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f812 	bl	8001ad8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0201 	mvn.w	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b06:	2300      	movs	r3, #0
 8001b08:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x20>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e0dc      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x1da>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b06      	cmp	r3, #6
 8001b2a:	d81c      	bhi.n	8001b66 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3b05      	subs	r3, #5
 8001b3e:	221f      	movs	r2, #31
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	4019      	ands	r1, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b05      	subs	r3, #5
 8001b58:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b64:	e03c      	b.n	8001be0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d81c      	bhi.n	8001ba8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3b23      	subs	r3, #35	@ 0x23
 8001b80:	221f      	movs	r2, #31
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4019      	ands	r1, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3b23      	subs	r3, #35	@ 0x23
 8001b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ba6:	e01b      	b.n	8001be0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3b41      	subs	r3, #65	@ 0x41
 8001bba:	221f      	movs	r2, #31
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4019      	ands	r1, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b41      	subs	r3, #65	@ 0x41
 8001bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b09      	cmp	r3, #9
 8001be6:	d91c      	bls.n	8001c22 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68d9      	ldr	r1, [r3, #12]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3b1e      	subs	r3, #30
 8001bfa:	2207      	movs	r2, #7
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4019      	ands	r1, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6898      	ldr	r0, [r3, #8]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	3b1e      	subs	r3, #30
 8001c14:	fa00 f203 	lsl.w	r2, r0, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	e019      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6919      	ldr	r1, [r3, #16]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	2207      	movs	r2, #7
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	4019      	ands	r1, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6898      	ldr	r0, [r3, #8]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d003      	beq.n	8001c66 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c62:	2b11      	cmp	r3, #17
 8001c64:	d132      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d125      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d126      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001c8c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	d11a      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c96:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ce8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	0c9a      	lsrs	r2, r3, #18
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cac:	e002      	b.n	8001cb4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f9      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x1b2>
 8001cba:	e007      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc0:	f043 0220 	orr.w	r2, r3, #32
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr
 8001ce0:	40012400 	.word	0x40012400
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	431bde83 	.word	0x431bde83

08001cec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d040      	beq.n	8001d8c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <ADC_Enable+0xac>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d9c <ADC_Enable+0xb0>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	0c9b      	lsrs	r3, r3, #18
 8001d26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d28:	e002      	b.n	8001d30 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f9      	bne.n	8001d2a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d36:	f7ff fc23 	bl	8001580 <HAL_GetTick>
 8001d3a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d3c:	e01f      	b.n	8001d7e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d3e:	f7ff fc1f 	bl	8001580 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d918      	bls.n	8001d7e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d011      	beq.n	8001d7e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5e:	f043 0210 	orr.w	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e007      	b.n	8001d8e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d1d8      	bne.n	8001d3e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	431bde83 	.word	0x431bde83

08001da0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d12e      	bne.n	8001e18 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dca:	f7ff fbd9 	bl	8001580 <HAL_GetTick>
 8001dce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001dd0:	e01b      	b.n	8001e0a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dd2:	f7ff fbd5 	bl	8001580 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d914      	bls.n	8001e0a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d10d      	bne.n	8001e0a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df2:	f043 0210 	orr.w	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e007      	b.n	8001e1a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d0dc      	beq.n	8001dd2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b084      	sub	sp, #16
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d127      	bne.n	8001e8c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e52:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e56:	d115      	bne.n	8001e84 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d111      	bne.n	8001e84 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d105      	bne.n	8001e84 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f7fe fedd 	bl	8000c44 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e8a:	e004      	b.n	8001e96 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	4798      	blx	r3
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fe0a 	bl	8001ac6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed8:	f043 0204 	orr.w	r2, r3, #4
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f7ff fe02 	bl	8001aea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f10:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	@ (8001f44 <__NVIC_SetPriorityGrouping+0x44>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f4c:	4b04      	ldr	r3, [pc, #16]	@ (8001f60 <__NVIC_GetPriorityGrouping+0x18>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	f003 0307 	and.w	r3, r3, #7
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	db0b      	blt.n	8001f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	f003 021f 	and.w	r2, r3, #31
 8001f7c:	4906      	ldr	r1, [pc, #24]	@ (8001f98 <__NVIC_EnableIRQ+0x34>)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	2001      	movs	r0, #1
 8001f86:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	e000e100 	.word	0xe000e100

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	@ (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	@ (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	@ 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	@ 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3b01      	subs	r3, #1
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002064:	d301      	bcc.n	800206a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002066:	2301      	movs	r3, #1
 8002068:	e00f      	b.n	800208a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206a:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <SysTick_Config+0x40>)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002072:	210f      	movs	r1, #15
 8002074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002078:	f7ff ff90 	bl	8001f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <SysTick_Config+0x40>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <SysTick_Config+0x40>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff2d 	bl	8001f00 <__NVIC_SetPriorityGrouping>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c0:	f7ff ff42 	bl	8001f48 <__NVIC_GetPriorityGrouping>
 80020c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f7ff ff90 	bl	8001ff0 <NVIC_EncodePriority>
 80020d0:	4602      	mov	r2, r0
 80020d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff5f 	bl	8001f9c <__NVIC_SetPriority>
}
 80020de:	bf00      	nop
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff35 	bl	8001f64 <__NVIC_EnableIRQ>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffa2 	bl	8002054 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e043      	b.n	80021ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	4b22      	ldr	r3, [pc, #136]	@ (80021c4 <HAL_DMA_Init+0xa8>)
 800213a:	4413      	add	r3, r2
 800213c:	4a22      	ldr	r2, [pc, #136]	@ (80021c8 <HAL_DMA_Init+0xac>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	009a      	lsls	r2, r3, #2
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a1f      	ldr	r2, [pc, #124]	@ (80021cc <HAL_DMA_Init+0xb0>)
 800214e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002166:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800216a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	bffdfff8 	.word	0xbffdfff8
 80021c8:	cccccccd 	.word	0xcccccccd
 80021cc:	40020000 	.word	0x40020000

080021d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_DMA_Start_IT+0x20>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e04b      	b.n	8002288 <HAL_DMA_Start_IT+0xb8>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d13a      	bne.n	800227a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0201 	bic.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 f937 	bl	800249c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 020e 	orr.w	r2, r2, #14
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e00f      	b.n	8002268 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0204 	bic.w	r2, r2, #4
 8002256:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 020a 	orr.w	r2, r2, #10
 8002266:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	e005      	b.n	8002286 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002282:	2302      	movs	r3, #2
 8002284:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002286:	7dfb      	ldrb	r3, [r7, #23]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	2204      	movs	r2, #4
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d04f      	beq.n	8002358 <HAL_DMA_IRQHandler+0xc8>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d04a      	beq.n	8002358 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0204 	bic.w	r2, r2, #4
 80022de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a66      	ldr	r2, [pc, #408]	@ (8002480 <HAL_DMA_IRQHandler+0x1f0>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d029      	beq.n	800233e <HAL_DMA_IRQHandler+0xae>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a65      	ldr	r2, [pc, #404]	@ (8002484 <HAL_DMA_IRQHandler+0x1f4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d022      	beq.n	800233a <HAL_DMA_IRQHandler+0xaa>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a63      	ldr	r2, [pc, #396]	@ (8002488 <HAL_DMA_IRQHandler+0x1f8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d01a      	beq.n	8002334 <HAL_DMA_IRQHandler+0xa4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a62      	ldr	r2, [pc, #392]	@ (800248c <HAL_DMA_IRQHandler+0x1fc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d012      	beq.n	800232e <HAL_DMA_IRQHandler+0x9e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a60      	ldr	r2, [pc, #384]	@ (8002490 <HAL_DMA_IRQHandler+0x200>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00a      	beq.n	8002328 <HAL_DMA_IRQHandler+0x98>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a5f      	ldr	r2, [pc, #380]	@ (8002494 <HAL_DMA_IRQHandler+0x204>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d102      	bne.n	8002322 <HAL_DMA_IRQHandler+0x92>
 800231c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002320:	e00e      	b.n	8002340 <HAL_DMA_IRQHandler+0xb0>
 8002322:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002326:	e00b      	b.n	8002340 <HAL_DMA_IRQHandler+0xb0>
 8002328:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800232c:	e008      	b.n	8002340 <HAL_DMA_IRQHandler+0xb0>
 800232e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002332:	e005      	b.n	8002340 <HAL_DMA_IRQHandler+0xb0>
 8002334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002338:	e002      	b.n	8002340 <HAL_DMA_IRQHandler+0xb0>
 800233a:	2340      	movs	r3, #64	@ 0x40
 800233c:	e000      	b.n	8002340 <HAL_DMA_IRQHandler+0xb0>
 800233e:	2304      	movs	r3, #4
 8002340:	4a55      	ldr	r2, [pc, #340]	@ (8002498 <HAL_DMA_IRQHandler+0x208>)
 8002342:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8094 	beq.w	8002476 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002356:	e08e      	b.n	8002476 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	2202      	movs	r2, #2
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d056      	beq.n	8002416 <HAL_DMA_IRQHandler+0x186>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d051      	beq.n	8002416 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 020a 	bic.w	r2, r2, #10
 800238e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a38      	ldr	r2, [pc, #224]	@ (8002480 <HAL_DMA_IRQHandler+0x1f0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d029      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x166>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a37      	ldr	r2, [pc, #220]	@ (8002484 <HAL_DMA_IRQHandler+0x1f4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d022      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x162>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a35      	ldr	r2, [pc, #212]	@ (8002488 <HAL_DMA_IRQHandler+0x1f8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01a      	beq.n	80023ec <HAL_DMA_IRQHandler+0x15c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a34      	ldr	r2, [pc, #208]	@ (800248c <HAL_DMA_IRQHandler+0x1fc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d012      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x156>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a32      	ldr	r2, [pc, #200]	@ (8002490 <HAL_DMA_IRQHandler+0x200>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00a      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x150>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a31      	ldr	r2, [pc, #196]	@ (8002494 <HAL_DMA_IRQHandler+0x204>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d102      	bne.n	80023da <HAL_DMA_IRQHandler+0x14a>
 80023d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80023d8:	e00e      	b.n	80023f8 <HAL_DMA_IRQHandler+0x168>
 80023da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023de:	e00b      	b.n	80023f8 <HAL_DMA_IRQHandler+0x168>
 80023e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023e4:	e008      	b.n	80023f8 <HAL_DMA_IRQHandler+0x168>
 80023e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023ea:	e005      	b.n	80023f8 <HAL_DMA_IRQHandler+0x168>
 80023ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023f0:	e002      	b.n	80023f8 <HAL_DMA_IRQHandler+0x168>
 80023f2:	2320      	movs	r3, #32
 80023f4:	e000      	b.n	80023f8 <HAL_DMA_IRQHandler+0x168>
 80023f6:	2302      	movs	r3, #2
 80023f8:	4a27      	ldr	r2, [pc, #156]	@ (8002498 <HAL_DMA_IRQHandler+0x208>)
 80023fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d034      	beq.n	8002476 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002414:	e02f      	b.n	8002476 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	2208      	movs	r2, #8
 800241c:	409a      	lsls	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d028      	beq.n	8002478 <HAL_DMA_IRQHandler+0x1e8>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 020e 	bic.w	r2, r2, #14
 800243e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002448:	2101      	movs	r1, #1
 800244a:	fa01 f202 	lsl.w	r2, r1, r2
 800244e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	4798      	blx	r3
    }
  }
  return;
 8002476:	bf00      	nop
 8002478:	bf00      	nop
}
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40020008 	.word	0x40020008
 8002484:	4002001c 	.word	0x4002001c
 8002488:	40020030 	.word	0x40020030
 800248c:	40020044 	.word	0x40020044
 8002490:	40020058 	.word	0x40020058
 8002494:	4002006c 	.word	0x4002006c
 8002498:	40020000 	.word	0x40020000

0800249c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b2:	2101      	movs	r1, #1
 80024b4:	fa01 f202 	lsl.w	r2, r1, r2
 80024b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d108      	bne.n	80024dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024da:	e007      	b.n	80024ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	60da      	str	r2, [r3, #12]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
	...

080024f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b08b      	sub	sp, #44	@ 0x2c
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002506:	2300      	movs	r3, #0
 8002508:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250a:	e169      	b.n	80027e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800250c:	2201      	movs	r2, #1
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	429a      	cmp	r2, r3
 8002526:	f040 8158 	bne.w	80027da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a9a      	ldr	r2, [pc, #616]	@ (8002798 <HAL_GPIO_Init+0x2a0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d05e      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002534:	4a98      	ldr	r2, [pc, #608]	@ (8002798 <HAL_GPIO_Init+0x2a0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d875      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 800253a:	4a98      	ldr	r2, [pc, #608]	@ (800279c <HAL_GPIO_Init+0x2a4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d058      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002540:	4a96      	ldr	r2, [pc, #600]	@ (800279c <HAL_GPIO_Init+0x2a4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d86f      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 8002546:	4a96      	ldr	r2, [pc, #600]	@ (80027a0 <HAL_GPIO_Init+0x2a8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d052      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 800254c:	4a94      	ldr	r2, [pc, #592]	@ (80027a0 <HAL_GPIO_Init+0x2a8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d869      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 8002552:	4a94      	ldr	r2, [pc, #592]	@ (80027a4 <HAL_GPIO_Init+0x2ac>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d04c      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002558:	4a92      	ldr	r2, [pc, #584]	@ (80027a4 <HAL_GPIO_Init+0x2ac>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d863      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 800255e:	4a92      	ldr	r2, [pc, #584]	@ (80027a8 <HAL_GPIO_Init+0x2b0>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d046      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
 8002564:	4a90      	ldr	r2, [pc, #576]	@ (80027a8 <HAL_GPIO_Init+0x2b0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d85d      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 800256a:	2b12      	cmp	r3, #18
 800256c:	d82a      	bhi.n	80025c4 <HAL_GPIO_Init+0xcc>
 800256e:	2b12      	cmp	r3, #18
 8002570:	d859      	bhi.n	8002626 <HAL_GPIO_Init+0x12e>
 8002572:	a201      	add	r2, pc, #4	@ (adr r2, 8002578 <HAL_GPIO_Init+0x80>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	080025f3 	.word	0x080025f3
 800257c:	080025cd 	.word	0x080025cd
 8002580:	080025df 	.word	0x080025df
 8002584:	08002621 	.word	0x08002621
 8002588:	08002627 	.word	0x08002627
 800258c:	08002627 	.word	0x08002627
 8002590:	08002627 	.word	0x08002627
 8002594:	08002627 	.word	0x08002627
 8002598:	08002627 	.word	0x08002627
 800259c:	08002627 	.word	0x08002627
 80025a0:	08002627 	.word	0x08002627
 80025a4:	08002627 	.word	0x08002627
 80025a8:	08002627 	.word	0x08002627
 80025ac:	08002627 	.word	0x08002627
 80025b0:	08002627 	.word	0x08002627
 80025b4:	08002627 	.word	0x08002627
 80025b8:	08002627 	.word	0x08002627
 80025bc:	080025d5 	.word	0x080025d5
 80025c0:	080025e9 	.word	0x080025e9
 80025c4:	4a79      	ldr	r2, [pc, #484]	@ (80027ac <HAL_GPIO_Init+0x2b4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025ca:	e02c      	b.n	8002626 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	623b      	str	r3, [r7, #32]
          break;
 80025d2:	e029      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	3304      	adds	r3, #4
 80025da:	623b      	str	r3, [r7, #32]
          break;
 80025dc:	e024      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	3308      	adds	r3, #8
 80025e4:	623b      	str	r3, [r7, #32]
          break;
 80025e6:	e01f      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	330c      	adds	r3, #12
 80025ee:	623b      	str	r3, [r7, #32]
          break;
 80025f0:	e01a      	b.n	8002628 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025fa:	2304      	movs	r3, #4
 80025fc:	623b      	str	r3, [r7, #32]
          break;
 80025fe:	e013      	b.n	8002628 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d105      	bne.n	8002614 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002608:	2308      	movs	r3, #8
 800260a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	611a      	str	r2, [r3, #16]
          break;
 8002612:	e009      	b.n	8002628 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002614:	2308      	movs	r3, #8
 8002616:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	615a      	str	r2, [r3, #20]
          break;
 800261e:	e003      	b.n	8002628 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002620:	2300      	movs	r3, #0
 8002622:	623b      	str	r3, [r7, #32]
          break;
 8002624:	e000      	b.n	8002628 <HAL_GPIO_Init+0x130>
          break;
 8002626:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2bff      	cmp	r3, #255	@ 0xff
 800262c:	d801      	bhi.n	8002632 <HAL_GPIO_Init+0x13a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	e001      	b.n	8002636 <HAL_GPIO_Init+0x13e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2bff      	cmp	r3, #255	@ 0xff
 800263c:	d802      	bhi.n	8002644 <HAL_GPIO_Init+0x14c>
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	e002      	b.n	800264a <HAL_GPIO_Init+0x152>
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	3b08      	subs	r3, #8
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	210f      	movs	r1, #15
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	401a      	ands	r2, r3
 800265c:	6a39      	ldr	r1, [r7, #32]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	fa01 f303 	lsl.w	r3, r1, r3
 8002664:	431a      	orrs	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80b1 	beq.w	80027da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002678:	4b4d      	ldr	r3, [pc, #308]	@ (80027b0 <HAL_GPIO_Init+0x2b8>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	4a4c      	ldr	r2, [pc, #304]	@ (80027b0 <HAL_GPIO_Init+0x2b8>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6193      	str	r3, [r2, #24]
 8002684:	4b4a      	ldr	r3, [pc, #296]	@ (80027b0 <HAL_GPIO_Init+0x2b8>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002690:	4a48      	ldr	r2, [pc, #288]	@ (80027b4 <HAL_GPIO_Init+0x2bc>)
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	220f      	movs	r2, #15
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4013      	ands	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a40      	ldr	r2, [pc, #256]	@ (80027b8 <HAL_GPIO_Init+0x2c0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d013      	beq.n	80026e4 <HAL_GPIO_Init+0x1ec>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a3f      	ldr	r2, [pc, #252]	@ (80027bc <HAL_GPIO_Init+0x2c4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00d      	beq.n	80026e0 <HAL_GPIO_Init+0x1e8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a3e      	ldr	r2, [pc, #248]	@ (80027c0 <HAL_GPIO_Init+0x2c8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d007      	beq.n	80026dc <HAL_GPIO_Init+0x1e4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a3d      	ldr	r2, [pc, #244]	@ (80027c4 <HAL_GPIO_Init+0x2cc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_GPIO_Init+0x1e0>
 80026d4:	2303      	movs	r3, #3
 80026d6:	e006      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026d8:	2304      	movs	r3, #4
 80026da:	e004      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026dc:	2302      	movs	r3, #2
 80026de:	e002      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_GPIO_Init+0x1ee>
 80026e4:	2300      	movs	r3, #0
 80026e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e8:	f002 0203 	and.w	r2, r2, #3
 80026ec:	0092      	lsls	r2, r2, #2
 80026ee:	4093      	lsls	r3, r2
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026f6:	492f      	ldr	r1, [pc, #188]	@ (80027b4 <HAL_GPIO_Init+0x2bc>)
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002710:	4b2d      	ldr	r3, [pc, #180]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	492c      	ldr	r1, [pc, #176]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]
 800271c:	e006      	b.n	800272c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800271e:	4b2a      	ldr	r3, [pc, #168]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	43db      	mvns	r3, r3
 8002726:	4928      	ldr	r1, [pc, #160]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002728:	4013      	ands	r3, r2
 800272a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002738:	4b23      	ldr	r3, [pc, #140]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4922      	ldr	r1, [pc, #136]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002746:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	43db      	mvns	r3, r3
 800274e:	491e      	ldr	r1, [pc, #120]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002750:	4013      	ands	r3, r2
 8002752:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002760:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4918      	ldr	r1, [pc, #96]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800276e:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	43db      	mvns	r3, r3
 8002776:	4914      	ldr	r1, [pc, #80]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 8002778:	4013      	ands	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d021      	beq.n	80027cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002788:	4b0f      	ldr	r3, [pc, #60]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	490e      	ldr	r1, [pc, #56]	@ (80027c8 <HAL_GPIO_Init+0x2d0>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e021      	b.n	80027da <HAL_GPIO_Init+0x2e2>
 8002796:	bf00      	nop
 8002798:	10320000 	.word	0x10320000
 800279c:	10310000 	.word	0x10310000
 80027a0:	10220000 	.word	0x10220000
 80027a4:	10210000 	.word	0x10210000
 80027a8:	10120000 	.word	0x10120000
 80027ac:	10110000 	.word	0x10110000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40010800 	.word	0x40010800
 80027bc:	40010c00 	.word	0x40010c00
 80027c0:	40011000 	.word	0x40011000
 80027c4:	40011400 	.word	0x40011400
 80027c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_GPIO_Init+0x304>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	4909      	ldr	r1, [pc, #36]	@ (80027fc <HAL_GPIO_Init+0x304>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	3301      	adds	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f47f ae8e 	bne.w	800250c <HAL_GPIO_Init+0x14>
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	372c      	adds	r7, #44	@ 0x2c
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	40010400 	.word	0x40010400

08002800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002810:	787b      	ldrb	r3, [r7, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800281c:	e003      	b.n	8002826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	041a      	lsls	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4013      	ands	r3, r2
 8002848:	041a      	lsls	r2, r3, #16
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	43d9      	mvns	r1, r3
 800284e:	887b      	ldrh	r3, [r7, #2]
 8002850:	400b      	ands	r3, r1
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	611a      	str	r2, [r3, #16]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
	...

08002864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e12b      	b.n	8002ace <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe f96e 	bl	8000b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2224      	movs	r2, #36	@ 0x24
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028c8:	f003 f92a 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
 80028cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4a81      	ldr	r2, [pc, #516]	@ (8002ad8 <HAL_I2C_Init+0x274>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d807      	bhi.n	80028e8 <HAL_I2C_Init+0x84>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a80      	ldr	r2, [pc, #512]	@ (8002adc <HAL_I2C_Init+0x278>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	bf94      	ite	ls
 80028e0:	2301      	movls	r3, #1
 80028e2:	2300      	movhi	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	e006      	b.n	80028f6 <HAL_I2C_Init+0x92>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4a7d      	ldr	r2, [pc, #500]	@ (8002ae0 <HAL_I2C_Init+0x27c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	bf94      	ite	ls
 80028f0:	2301      	movls	r3, #1
 80028f2:	2300      	movhi	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e0e7      	b.n	8002ace <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4a78      	ldr	r2, [pc, #480]	@ (8002ae4 <HAL_I2C_Init+0x280>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0c9b      	lsrs	r3, r3, #18
 8002908:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	430a      	orrs	r2, r1
 800291c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ad8 <HAL_I2C_Init+0x274>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d802      	bhi.n	8002938 <HAL_I2C_Init+0xd4>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3301      	adds	r3, #1
 8002936:	e009      	b.n	800294c <HAL_I2C_Init+0xe8>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	4a69      	ldr	r2, [pc, #420]	@ (8002ae8 <HAL_I2C_Init+0x284>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	3301      	adds	r3, #1
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	430b      	orrs	r3, r1
 8002952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800295e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	495c      	ldr	r1, [pc, #368]	@ (8002ad8 <HAL_I2C_Init+0x274>)
 8002968:	428b      	cmp	r3, r1
 800296a:	d819      	bhi.n	80029a0 <HAL_I2C_Init+0x13c>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	1e59      	subs	r1, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	fbb1 f3f3 	udiv	r3, r1, r3
 800297a:	1c59      	adds	r1, r3, #1
 800297c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002980:	400b      	ands	r3, r1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_I2C_Init+0x138>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1e59      	subs	r1, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fbb1 f3f3 	udiv	r3, r1, r3
 8002994:	3301      	adds	r3, #1
 8002996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299a:	e051      	b.n	8002a40 <HAL_I2C_Init+0x1dc>
 800299c:	2304      	movs	r3, #4
 800299e:	e04f      	b.n	8002a40 <HAL_I2C_Init+0x1dc>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d111      	bne.n	80029cc <HAL_I2C_Init+0x168>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1e58      	subs	r0, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	440b      	add	r3, r1
 80029b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e012      	b.n	80029f2 <HAL_I2C_Init+0x18e>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1e58      	subs	r0, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	0099      	lsls	r1, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e2:	3301      	adds	r3, #1
 80029e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf0c      	ite	eq
 80029ec:	2301      	moveq	r3, #1
 80029ee:	2300      	movne	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Init+0x196>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e022      	b.n	8002a40 <HAL_I2C_Init+0x1dc>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10e      	bne.n	8002a20 <HAL_I2C_Init+0x1bc>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1e58      	subs	r0, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6859      	ldr	r1, [r3, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	440b      	add	r3, r1
 8002a10:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a14:	3301      	adds	r3, #1
 8002a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a1e:	e00f      	b.n	8002a40 <HAL_I2C_Init+0x1dc>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1e58      	subs	r0, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6859      	ldr	r1, [r3, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	0099      	lsls	r1, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a36:	3301      	adds	r3, #1
 8002a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	6809      	ldr	r1, [r1, #0]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6911      	ldr	r1, [r2, #16]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68d2      	ldr	r2, [r2, #12]
 8002a7a:	4311      	orrs	r1, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	430b      	orrs	r3, r1
 8002a82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	000186a0 	.word	0x000186a0
 8002adc:	001e847f 	.word	0x001e847f
 8002ae0:	003d08ff 	.word	0x003d08ff
 8002ae4:	431bde83 	.word	0x431bde83
 8002ae8:	10624dd3 	.word	0x10624dd3

08002aec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	461a      	mov	r2, r3
 8002af8:	460b      	mov	r3, r1
 8002afa:	817b      	strh	r3, [r7, #10]
 8002afc:	4613      	mov	r3, r2
 8002afe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7fe fd3e 	bl	8001580 <HAL_GetTick>
 8002b04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	f040 80e0 	bne.w	8002cd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	2319      	movs	r3, #25
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4970      	ldr	r1, [pc, #448]	@ (8002ce0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 fc9e 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e0d3      	b.n	8002cd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_I2C_Master_Transmit+0x50>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e0cc      	b.n	8002cd6 <HAL_I2C_Master_Transmit+0x1ea>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d007      	beq.n	8002b62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0201 	orr.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2221      	movs	r2, #33	@ 0x21
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	893a      	ldrh	r2, [r7, #8]
 8002b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a50      	ldr	r2, [pc, #320]	@ (8002ce4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ba2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ba4:	8979      	ldrh	r1, [r7, #10]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	6a3a      	ldr	r2, [r7, #32]
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 fb08 	bl	80031c0 <I2C_MasterRequestWrite>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e08d      	b.n	8002cd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bd0:	e066      	b.n	8002ca0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	6a39      	ldr	r1, [r7, #32]
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 fd5c 	bl	8003694 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00d      	beq.n	8002bfe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d107      	bne.n	8002bfa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e06b      	b.n	8002cd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d11b      	bne.n	8002c74 <HAL_I2C_Master_Transmit+0x188>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d017      	beq.n	8002c74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	6a39      	ldr	r1, [r7, #32]
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 fd53 	bl	8003724 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00d      	beq.n	8002ca0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d107      	bne.n	8002c9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e01a      	b.n	8002cd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d194      	bne.n	8002bd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e000      	b.n	8002cd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cd4:	2302      	movs	r3, #2
  }
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	00100002 	.word	0x00100002
 8002ce4:	ffff0000 	.word	0xffff0000

08002ce8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	@ 0x30
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	817b      	strh	r3, [r7, #10]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d00:	f7fe fc3e 	bl	8001580 <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	f040 824b 	bne.w	80031aa <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	2319      	movs	r3, #25
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	497f      	ldr	r1, [pc, #508]	@ (8002f1c <HAL_I2C_Master_Receive+0x234>)
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fb9e 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e23e      	b.n	80031ac <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_I2C_Master_Receive+0x54>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e237      	b.n	80031ac <HAL_I2C_Master_Receive+0x4c4>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d007      	beq.n	8002d62 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2222      	movs	r2, #34	@ 0x22
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	893a      	ldrh	r2, [r7, #8]
 8002d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4a5f      	ldr	r2, [pc, #380]	@ (8002f20 <HAL_I2C_Master_Receive+0x238>)
 8002da2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002da4:	8979      	ldrh	r1, [r7, #10]
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 fa8a 	bl	80032c4 <I2C_MasterRequestRead>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e1f8      	b.n	80031ac <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d113      	bne.n	8002dea <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e1cc      	b.n	8003184 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d11e      	bne.n	8002e30 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e02:	b672      	cpsid	i
}
 8002e04:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e2c:	b662      	cpsie	i
}
 8002e2e:	e035      	b.n	8002e9c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d11e      	bne.n	8002e76 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e48:	b672      	cpsid	i
}
 8002e4a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e72:	b662      	cpsie	i
}
 8002e74:	e012      	b.n	8002e9c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e86:	2300      	movs	r3, #0
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e9c:	e172      	b.n	8003184 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	f200 811f 	bhi.w	80030e6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d123      	bne.n	8002ef8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 fc7d 	bl	80037b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e173      	b.n	80031ac <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ef6:	e145      	b.n	8003184 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d152      	bne.n	8002fa6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f06:	2200      	movs	r2, #0
 8002f08:	4906      	ldr	r1, [pc, #24]	@ (8002f24 <HAL_I2C_Master_Receive+0x23c>)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 faa8 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e148      	b.n	80031ac <HAL_I2C_Master_Receive+0x4c4>
 8002f1a:	bf00      	nop
 8002f1c:	00100002 	.word	0x00100002
 8002f20:	ffff0000 	.word	0xffff0000
 8002f24:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f28:	b672      	cpsid	i
}
 8002f2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f6e:	b662      	cpsie	i
}
 8002f70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fa4:	e0ee      	b.n	8003184 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fac:	2200      	movs	r2, #0
 8002fae:	4981      	ldr	r1, [pc, #516]	@ (80031b4 <HAL_I2C_Master_Receive+0x4cc>)
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fa55 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0f5      	b.n	80031ac <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd0:	b672      	cpsid	i
}
 8002fd2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003006:	4b6c      	ldr	r3, [pc, #432]	@ (80031b8 <HAL_I2C_Master_Receive+0x4d0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	08db      	lsrs	r3, r3, #3
 800300c:	4a6b      	ldr	r2, [pc, #428]	@ (80031bc <HAL_I2C_Master_Receive+0x4d4>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	0a1a      	lsrs	r2, r3, #8
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00da      	lsls	r2, r3, #3
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	3b01      	subs	r3, #1
 8003024:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d118      	bne.n	800305e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f043 0220 	orr.w	r2, r3, #32
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800304e:	b662      	cpsie	i
}
 8003050:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e0a6      	b.n	80031ac <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d1d9      	bne.n	8003020 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800307a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030ae:	b662      	cpsie	i
}
 80030b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030e4:	e04e      	b.n	8003184 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fb62 	bl	80037b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e058      	b.n	80031ac <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d124      	bne.n	8003184 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313e:	2b03      	cmp	r3, #3
 8003140:	d107      	bne.n	8003152 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003150:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	f47f ae88 	bne.w	8002e9e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e000      	b.n	80031ac <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
  }
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3728      	adds	r7, #40	@ 0x28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	00010004 	.word	0x00010004
 80031b8:	20000000 	.word	0x20000000
 80031bc:	14f8b589 	.word	0x14f8b589

080031c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	607a      	str	r2, [r7, #4]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	460b      	mov	r3, r1
 80031ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d006      	beq.n	80031ea <I2C_MasterRequestWrite+0x2a>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d003      	beq.n	80031ea <I2C_MasterRequestWrite+0x2a>
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031e8:	d108      	bne.n	80031fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e00b      	b.n	8003214 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	2b12      	cmp	r3, #18
 8003202:	d107      	bne.n	8003214 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003212:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f91d 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00d      	beq.n	8003248 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800323a:	d103      	bne.n	8003244 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003242:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e035      	b.n	80032b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003250:	d108      	bne.n	8003264 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003252:	897b      	ldrh	r3, [r7, #10]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	461a      	mov	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003260:	611a      	str	r2, [r3, #16]
 8003262:	e01b      	b.n	800329c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003264:	897b      	ldrh	r3, [r7, #10]
 8003266:	11db      	asrs	r3, r3, #7
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f003 0306 	and.w	r3, r3, #6
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f063 030f 	orn	r3, r3, #15
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	490e      	ldr	r1, [pc, #56]	@ (80032bc <I2C_MasterRequestWrite+0xfc>)
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f966 	bl	8003554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e010      	b.n	80032b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003292:	897b      	ldrh	r3, [r7, #10]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	4907      	ldr	r1, [pc, #28]	@ (80032c0 <I2C_MasterRequestWrite+0x100>)
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f956 	bl	8003554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	00010008 	.word	0x00010008
 80032c0:	00010002 	.word	0x00010002

080032c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	460b      	mov	r3, r1
 80032d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d006      	beq.n	80032fe <I2C_MasterRequestRead+0x3a>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d003      	beq.n	80032fe <I2C_MasterRequestRead+0x3a>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032fc:	d108      	bne.n	8003310 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	e00b      	b.n	8003328 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003314:	2b11      	cmp	r3, #17
 8003316:	d107      	bne.n	8003328 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003326:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f893 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800334e:	d103      	bne.n	8003358 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003356:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e079      	b.n	8003450 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003364:	d108      	bne.n	8003378 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003366:	897b      	ldrh	r3, [r7, #10]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	b2da      	uxtb	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	611a      	str	r2, [r3, #16]
 8003376:	e05f      	b.n	8003438 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003378:	897b      	ldrh	r3, [r7, #10]
 800337a:	11db      	asrs	r3, r3, #7
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f003 0306 	and.w	r3, r3, #6
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f063 030f 	orn	r3, r3, #15
 8003388:	b2da      	uxtb	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4930      	ldr	r1, [pc, #192]	@ (8003458 <I2C_MasterRequestRead+0x194>)
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f8dc 	bl	8003554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e054      	b.n	8003450 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033a6:	897b      	ldrh	r3, [r7, #10]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4929      	ldr	r1, [pc, #164]	@ (800345c <I2C_MasterRequestRead+0x198>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f8cc 	bl	8003554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e044      	b.n	8003450 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f831 	bl	8003460 <I2C_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00d      	beq.n	8003420 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003412:	d103      	bne.n	800341c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800341a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e017      	b.n	8003450 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003420:	897b      	ldrh	r3, [r7, #10]
 8003422:	11db      	asrs	r3, r3, #7
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 0306 	and.w	r3, r3, #6
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f063 030e 	orn	r3, r3, #14
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4907      	ldr	r1, [pc, #28]	@ (800345c <I2C_MasterRequestRead+0x198>)
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f888 	bl	8003554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	00010008 	.word	0x00010008
 800345c:	00010002 	.word	0x00010002

08003460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003470:	e048      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003478:	d044      	beq.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347a:	f7fe f881 	bl	8001580 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d139      	bne.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	0c1b      	lsrs	r3, r3, #16
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d10d      	bne.n	80034b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	43da      	mvns	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	4013      	ands	r3, r2
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	e00c      	b.n	80034d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	43da      	mvns	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4013      	ands	r3, r2
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	bf0c      	ite	eq
 80034c8:	2301      	moveq	r3, #1
 80034ca:	2300      	movne	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d116      	bne.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	f043 0220 	orr.w	r2, r3, #32
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e023      	b.n	800354c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	0c1b      	lsrs	r3, r3, #16
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d10d      	bne.n	800352a <I2C_WaitOnFlagUntilTimeout+0xca>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	43da      	mvns	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	4013      	ands	r3, r2
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	461a      	mov	r2, r3
 8003528:	e00c      	b.n	8003544 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	43da      	mvns	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4013      	ands	r3, r2
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	429a      	cmp	r2, r3
 8003548:	d093      	beq.n	8003472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003562:	e071      	b.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003572:	d123      	bne.n	80035bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003582:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800358c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f043 0204 	orr.w	r2, r3, #4
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e067      	b.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035c2:	d041      	beq.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c4:	f7fd ffdc 	bl	8001580 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d302      	bcc.n	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d136      	bne.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10c      	bne.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	e00b      	b.n	8003616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	43da      	mvns	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf14      	ite	ne
 8003610:	2301      	movne	r3, #1
 8003612:	2300      	moveq	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003634:	f043 0220 	orr.w	r2, r3, #32
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e021      	b.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	0c1b      	lsrs	r3, r3, #16
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d10c      	bne.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	43da      	mvns	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf14      	ite	ne
 8003664:	2301      	movne	r3, #1
 8003666:	2300      	moveq	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e00b      	b.n	8003684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4013      	ands	r3, r2
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f af6d 	bne.w	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a0:	e034      	b.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f8e3 	bl	800386e <I2C_IsAcknowledgeFailed>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e034      	b.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036b8:	d028      	beq.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	f7fd ff61 	bl	8001580 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d302      	bcc.n	80036d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d11d      	bne.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036da:	2b80      	cmp	r3, #128	@ 0x80
 80036dc:	d016      	beq.n	800370c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	f043 0220 	orr.w	r2, r3, #32
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e007      	b.n	800371c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003716:	2b80      	cmp	r3, #128	@ 0x80
 8003718:	d1c3      	bne.n	80036a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003730:	e034      	b.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f89b 	bl	800386e <I2C_IsAcknowledgeFailed>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e034      	b.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003748:	d028      	beq.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374a:	f7fd ff19 	bl	8001580 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11d      	bne.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b04      	cmp	r3, #4
 800376c:	d016      	beq.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e007      	b.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d1c3      	bne.n	8003732 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037c0:	e049      	b.n	8003856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d119      	bne.n	8003804 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0210 	mvn.w	r2, #16
 80037d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e030      	b.n	8003866 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003804:	f7fd febc 	bl	8001580 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	429a      	cmp	r2, r3
 8003812:	d302      	bcc.n	800381a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11d      	bne.n	8003856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003824:	2b40      	cmp	r3, #64	@ 0x40
 8003826:	d016      	beq.n	8003856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e007      	b.n	8003866 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003860:	2b40      	cmp	r3, #64	@ 0x40
 8003862:	d1ae      	bne.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003884:	d11b      	bne.n	80038be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800388e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	f043 0204 	orr.w	r2, r3, #4
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0e8      	b.n	8003aae <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f007 f94f 	bl	800ab94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2203      	movs	r2, #3
 80038fa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f003 f8ca 	bl	8006aa2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003918:	f003 f8a0 	bl	8006a5c <USB_CoreInit>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e0bf      	b.n	8003aae <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f003 f8ce 	bl	8006ad6 <USB_SetCurrentMode>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0b0      	b.n	8003aae <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	e03e      	b.n	80039d0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	440b      	add	r3, r1
 8003960:	3311      	adds	r3, #17
 8003962:	2201      	movs	r2, #1
 8003964:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003966:	7bfa      	ldrb	r2, [r7, #15]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	440b      	add	r3, r1
 8003974:	3310      	adds	r3, #16
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	3313      	adds	r3, #19
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	440b      	add	r3, r1
 800399c:	3320      	adds	r3, #32
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039a2:	7bfa      	ldrb	r2, [r7, #15]
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	440b      	add	r3, r1
 80039b0:	3324      	adds	r3, #36	@ 0x24
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	440b      	add	r3, r1
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	3301      	adds	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	791b      	ldrb	r3, [r3, #4]
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d3bb      	bcc.n	8003952 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
 80039de:	e044      	b.n	8003a6a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	440b      	add	r3, r1
 80039ee:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039f6:	7bfa      	ldrb	r2, [r7, #15]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	440b      	add	r3, r1
 8003a04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a0c:	7bfa      	ldrb	r2, [r7, #15]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	440b      	add	r3, r1
 8003a1a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	440b      	add	r3, r1
 8003a30:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	440b      	add	r3, r1
 8003a46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a4e:	7bfa      	ldrb	r2, [r7, #15]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	440b      	add	r3, r1
 8003a5c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	3301      	adds	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	791b      	ldrb	r3, [r3, #4]
 8003a6e:	7bfa      	ldrb	r2, [r7, #15]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d3b5      	bcc.n	80039e0 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a7e:	f003 f836 	bl	8006aee <USB_DevInit>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e00c      	b.n	8003aae <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f005 fab5 	bl	8009016 <USB_DevDisconnect>

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_PCD_Start+0x16>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e016      	b.n	8003afa <HAL_PCD_Start+0x44>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f002 ffcc 	bl	8006a76 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003ade:	2101      	movs	r1, #1
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f007 faca 	bl	800b07a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f005 fa89 	bl	8009002 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b088      	sub	sp, #32
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f005 fa8b 	bl	800902a <USB_ReadInterrupts>
 8003b14:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fb1a 	bl	800415a <PCD_EP_ISR_Handler>

    return;
 8003b26:	e119      	b.n	8003d5c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d013      	beq.n	8003b5a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b44:	b292      	uxth	r2, r2
 8003b46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f007 f89d 	bl	800ac8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b50:	2100      	movs	r1, #0
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f905 	bl	8003d62 <HAL_PCD_SetAddress>

    return;
 8003b58:	e100      	b.n	8003d5c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00c      	beq.n	8003b7e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b76:	b292      	uxth	r2, r2
 8003b78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003b7c:	e0ee      	b.n	8003d5c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00c      	beq.n	8003ba2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b9a:	b292      	uxth	r2, r2
 8003b9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003ba0:	e0dc      	b.n	8003d5c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d027      	beq.n	8003bfc <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0204 	bic.w	r2, r2, #4
 8003bbe:	b292      	uxth	r2, r2
 8003bc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0208 	bic.w	r2, r2, #8
 8003bd6:	b292      	uxth	r2, r2
 8003bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f007 f88d 	bl	800acfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bf4:	b292      	uxth	r2, r2
 8003bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003bfa:	e0af      	b.n	8003d5c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 8083 	beq.w	8003d0e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e010      	b.n	8003c30 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	7ffb      	ldrb	r3, [r7, #31]
 8003c1c:	8812      	ldrh	r2, [r2, #0]
 8003c1e:	b292      	uxth	r2, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	3320      	adds	r3, #32
 8003c24:	443b      	add	r3, r7
 8003c26:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003c2a:	7ffb      	ldrb	r3, [r7, #31]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	77fb      	strb	r3, [r7, #31]
 8003c30:	7ffb      	ldrb	r3, [r7, #31]
 8003c32:	2b07      	cmp	r3, #7
 8003c34:	d9eb      	bls.n	8003c0e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	b292      	uxth	r2, r2
 8003c4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	b292      	uxth	r2, r2
 8003c62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003c66:	bf00      	nop
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f6      	beq.n	8003c68 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c8c:	b292      	uxth	r2, r2
 8003c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003c92:	2300      	movs	r3, #0
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e00f      	b.n	8003cb8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003c98:	7ffb      	ldrb	r3, [r7, #31]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6812      	ldr	r2, [r2, #0]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	7ffa      	ldrb	r2, [r7, #31]
 8003ca2:	0092      	lsls	r2, r2, #2
 8003ca4:	440a      	add	r2, r1
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	3320      	adds	r3, #32
 8003caa:	443b      	add	r3, r7
 8003cac:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003cb0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003cb2:	7ffb      	ldrb	r3, [r7, #31]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	77fb      	strb	r3, [r7, #31]
 8003cb8:	7ffb      	ldrb	r3, [r7, #31]
 8003cba:	2b07      	cmp	r3, #7
 8003cbc:	d9ec      	bls.n	8003c98 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0208 	orr.w	r2, r2, #8
 8003cd0:	b292      	uxth	r2, r2
 8003cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ce8:	b292      	uxth	r2, r2
 8003cea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0204 	orr.w	r2, r2, #4
 8003d00:	b292      	uxth	r2, r2
 8003d02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f006 ffde 	bl	800acc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d0c:	e026      	b.n	8003d5c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00f      	beq.n	8003d38 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d2a:	b292      	uxth	r2, r2
 8003d2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f006 ff9c 	bl	800ac6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d36:	e011      	b.n	8003d5c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d54:	b292      	uxth	r2, r2
 8003d56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003d5a:	bf00      	nop
  }
}
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_PCD_SetAddress+0x1a>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e012      	b.n	8003da2 <HAL_PCD_SetAddress+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f005 f922 	bl	8008fdc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	4608      	mov	r0, r1
 8003db4:	4611      	mov	r1, r2
 8003db6:	461a      	mov	r2, r3
 8003db8:	4603      	mov	r3, r0
 8003dba:	70fb      	strb	r3, [r7, #3]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	803b      	strh	r3, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	da0e      	bge.n	8003dee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	f003 0207 	and.w	r2, r3, #7
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	3310      	adds	r3, #16
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	4413      	add	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	705a      	strb	r2, [r3, #1]
 8003dec:	e00e      	b.n	8003e0c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	f003 0207 	and.w	r2, r3, #7
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	b2da      	uxtb	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e18:	883a      	ldrh	r2, [r7, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	78ba      	ldrb	r2, [r7, #2]
 8003e22:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e24:	78bb      	ldrb	r3, [r7, #2]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d102      	bne.n	8003e30 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_PCD_EP_Open+0x94>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e00e      	b.n	8003e5c <HAL_PCD_EP_Open+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68f9      	ldr	r1, [r7, #12]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f002 fe6b 	bl	8006b28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da0e      	bge.n	8003e96 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	f003 0207 	and.w	r2, r3, #7
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	3310      	adds	r3, #16
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	705a      	strb	r2, [r3, #1]
 8003e94:	e00e      	b.n	8003eb4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	f003 0207 	and.w	r2, r3, #7
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4413      	add	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d101      	bne.n	8003ece <HAL_PCD_EP_Close+0x6a>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e00e      	b.n	8003eec <HAL_PCD_EP_Close+0x88>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68f9      	ldr	r1, [r7, #12]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f003 f9e3 	bl	80072a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	603b      	str	r3, [r7, #0]
 8003f00:	460b      	mov	r3, r1
 8003f02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f04:	7afb      	ldrb	r3, [r7, #11]
 8003f06:	f003 0207 	and.w	r2, r3, #7
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f34:	7afb      	ldrb	r3, [r7, #11]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6979      	ldr	r1, [r7, #20]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 fb9a 	bl	8007680 <USB_EPStartXfer>

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	f003 0207 	and.w	r2, r3, #7
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	440b      	add	r3, r1
 8003f74:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003f78:	681b      	ldr	r3, [r3, #0]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	460b      	mov	r3, r1
 8003f92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f94:	7afb      	ldrb	r3, [r7, #11]
 8003f96:	f003 0207 	and.w	r2, r3, #7
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	3310      	adds	r3, #16
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fd0:	7afb      	ldrb	r3, [r7, #11]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6979      	ldr	r1, [r7, #20]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f003 fb4c 	bl	8007680 <USB_EPStartXfer>

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	7912      	ldrb	r2, [r2, #4]
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e04c      	b.n	80040aa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004014:	2b00      	cmp	r3, #0
 8004016:	da0e      	bge.n	8004036 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	f003 0207 	and.w	r2, r3, #7
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	3310      	adds	r3, #16
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4413      	add	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2201      	movs	r2, #1
 8004032:	705a      	strb	r2, [r3, #1]
 8004034:	e00c      	b.n	8004050 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4413      	add	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	b2da      	uxtb	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_PCD_EP_SetStall+0x7e>
 800406c:	2302      	movs	r3, #2
 800406e:	e01c      	b.n	80040aa <HAL_PCD_EP_SetStall+0xb8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68f9      	ldr	r1, [r7, #12]
 800407e:	4618      	mov	r0, r3
 8004080:	f004 feaf 	bl	8008de2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	2b00      	cmp	r3, #0
 800408c:	d108      	bne.n	80040a0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f004 ffd4 	bl	8009048 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	7912      	ldrb	r2, [r2, #4]
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d901      	bls.n	80040d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e040      	b.n	8004152 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	da0e      	bge.n	80040f6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 0207 	and.w	r2, r3, #7
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	3310      	adds	r3, #16
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4413      	add	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	705a      	strb	r2, [r3, #1]
 80040f4:	e00e      	b.n	8004114 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	f003 0207 	and.w	r2, r3, #7
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	b2da      	uxtb	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_PCD_EP_ClrStall+0x82>
 8004130:	2302      	movs	r3, #2
 8004132:	e00e      	b.n	8004152 <HAL_PCD_EP_ClrStall+0xa0>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68f9      	ldr	r1, [r7, #12]
 8004142:	4618      	mov	r0, r3
 8004144:	f004 fe9d 	bl	8008e82 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b096      	sub	sp, #88	@ 0x58
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004162:	e3bb      	b.n	80048dc <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800416c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004170:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800417e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004182:	2b00      	cmp	r3, #0
 8004184:	f040 8175 	bne.w	8004472 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004188:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d14e      	bne.n	8004232 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80041a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a4:	81fb      	strh	r3, [r7, #14]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	89fb      	ldrh	r3, [r7, #14]
 80041ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3310      	adds	r3, #16
 80041bc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4413      	add	r3, r2
 80041d2:	3302      	adds	r3, #2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6812      	ldr	r2, [r2, #0]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80041ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	441a      	add	r2, r3
 80041f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80041f8:	2100      	movs	r1, #0
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f006 fd1d 	bl	800ac3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	7b5b      	ldrb	r3, [r3, #13]
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8368 	beq.w	80048dc <PCD_EP_ISR_Handler+0x782>
 800420c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 8363 	bne.w	80048dc <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	7b5b      	ldrb	r3, [r3, #13]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004220:	b2da      	uxtb	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	735a      	strb	r2, [r3, #13]
 8004230:	e354      	b.n	80048dc <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004238:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004244:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800424c:	2b00      	cmp	r3, #0
 800424e:	d034      	beq.n	80042ba <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004258:	b29b      	uxth	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	3306      	adds	r3, #6
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004288:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800428a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800428e:	b29b      	uxth	r3, r3
 8004290:	f004 ff2a 	bl	80090e8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b29a      	uxth	r2, r3
 800429c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80042a0:	4013      	ands	r3, r2
 80042a2:	823b      	strh	r3, [r7, #16]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	8a3a      	ldrh	r2, [r7, #16]
 80042aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042ae:	b292      	uxth	r2, r2
 80042b0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f006 fc94 	bl	800abe0 <HAL_PCD_SetupStageCallback>
 80042b8:	e310      	b.n	80048dc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80042ba:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f280 830c 	bge.w	80048dc <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80042d0:	4013      	ands	r3, r2
 80042d2:	83fb      	strh	r3, [r7, #30]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	8bfa      	ldrh	r2, [r7, #30]
 80042da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042de:	b292      	uxth	r2, r2
 80042e0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	3306      	adds	r3, #6
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800430a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800430c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800430e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d019      	beq.n	800434a <PCD_EP_ISR_Handler+0x1f0>
 8004316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d015      	beq.n	800434a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004324:	6959      	ldr	r1, [r3, #20]
 8004326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004328:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800432a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800432c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800432e:	b29b      	uxth	r3, r3
 8004330:	f004 feda 	bl	80090e8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	441a      	add	r2, r3
 800433e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004340:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004342:	2100      	movs	r1, #0
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f006 fc5d 	bl	800ac04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004354:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800435c:	2b00      	cmp	r3, #0
 800435e:	f040 82bd 	bne.w	80048dc <PCD_EP_ISR_Handler+0x782>
 8004362:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004366:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800436a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800436e:	f000 82b5 	beq.w	80048dc <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004380:	b29b      	uxth	r3, r3
 8004382:	461a      	mov	r2, r3
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	4413      	add	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800439c:	b29a      	uxth	r2, r3
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	801a      	strh	r2, [r3, #0]
 80043a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80043a8:	d91d      	bls.n	80043e6 <PCD_EP_ISR_Handler+0x28c>
 80043aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <PCD_EP_ISR_Handler+0x26a>
 80043be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043c0:	3b01      	subs	r3, #1
 80043c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	029b      	lsls	r3, r3, #10
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	4313      	orrs	r3, r2
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043de:	b29a      	uxth	r2, r3
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	801a      	strh	r2, [r3, #0]
 80043e4:	e026      	b.n	8004434 <PCD_EP_ISR_Handler+0x2da>
 80043e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <PCD_EP_ISR_Handler+0x2aa>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	e017      	b.n	8004434 <PCD_EP_ISR_Handler+0x2da>
 8004404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	647b      	str	r3, [r7, #68]	@ 0x44
 800440c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <PCD_EP_ISR_Handler+0x2c4>
 8004418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800441a:	3301      	adds	r3, #1
 800441c:	647b      	str	r3, [r7, #68]	@ 0x44
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29a      	uxth	r2, r3
 8004424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004426:	b29b      	uxth	r3, r3
 8004428:	029b      	lsls	r3, r3, #10
 800442a:	b29b      	uxth	r3, r3
 800442c:	4313      	orrs	r3, r2
 800442e:	b29a      	uxth	r2, r3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	881b      	ldrh	r3, [r3, #0]
 800443a:	b29b      	uxth	r3, r3
 800443c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004444:	827b      	strh	r3, [r7, #18]
 8004446:	8a7b      	ldrh	r3, [r7, #18]
 8004448:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800444c:	827b      	strh	r3, [r7, #18]
 800444e:	8a7b      	ldrh	r3, [r7, #18]
 8004450:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004454:	827b      	strh	r3, [r7, #18]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	8a7b      	ldrh	r3, [r7, #18]
 800445c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004460:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004464:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800446c:	b29b      	uxth	r3, r3
 800446e:	8013      	strh	r3, [r2, #0]
 8004470:	e234      	b.n	80048dc <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004486:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800448a:	2b00      	cmp	r3, #0
 800448c:	f280 80fc 	bge.w	8004688 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80044a6:	4013      	ands	r3, r2
 80044a8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80044be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044c2:	b292      	uxth	r2, r2
 80044c4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80044c6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	4413      	add	r3, r2
 80044da:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80044dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044de:	7b1b      	ldrb	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d125      	bne.n	8004530 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	4413      	add	r3, r2
 80044f8:	3306      	adds	r3, #6
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800450c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004510:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8092 	beq.w	800463e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004520:	6959      	ldr	r1, [r3, #20]
 8004522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004524:	88da      	ldrh	r2, [r3, #6]
 8004526:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800452a:	f004 fddd 	bl	80090e8 <USB_ReadPMA>
 800452e:	e086      	b.n	800463e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004532:	78db      	ldrb	r3, [r3, #3]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d10a      	bne.n	800454e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004538:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800453c:	461a      	mov	r2, r3
 800453e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f9d9 	bl	80048f8 <HAL_PCD_EP_DB_Receive>
 8004546:	4603      	mov	r3, r0
 8004548:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800454c:	e077      	b.n	800463e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004564:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004568:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	441a      	add	r2, r3
 800457a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800457e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004582:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004586:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800458a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800458e:	b29b      	uxth	r3, r3
 8004590:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d024      	beq.n	80045f6 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4413      	add	r3, r2
 80045c0:	3302      	adds	r3, #2
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80045d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02e      	beq.n	800463e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e6:	6959      	ldr	r1, [r3, #20]
 80045e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ea:	891a      	ldrh	r2, [r3, #8]
 80045ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80045f0:	f004 fd7a 	bl	80090e8 <USB_ReadPMA>
 80045f4:	e023      	b.n	800463e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045fe:	b29b      	uxth	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	3306      	adds	r3, #6
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800461e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004622:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004630:	6959      	ldr	r1, [r3, #20]
 8004632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004634:	895a      	ldrh	r2, [r3, #10]
 8004636:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800463a:	f004 fd55 	bl	80090e8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800463e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004640:	69da      	ldr	r2, [r3, #28]
 8004642:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004646:	441a      	add	r2, r3
 8004648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800464c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004654:	441a      	add	r2, r3
 8004656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004658:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800465a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <PCD_EP_ISR_Handler+0x514>
 8004662:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	429a      	cmp	r2, r3
 800466c:	d206      	bcs.n	800467c <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800466e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f006 fac5 	bl	800ac04 <HAL_PCD_DataOutStageCallback>
 800467a:	e005      	b.n	8004688 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004682:	4618      	mov	r0, r3
 8004684:	f002 fffc 	bl	8007680 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004688:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800468c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8123 	beq.w	80048dc <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004696:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	3310      	adds	r3, #16
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	4413      	add	r3, r2
 80046a8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80046c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80046da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80046e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e8:	78db      	ldrb	r3, [r3, #3]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	f040 80a2 	bne.w	8004834 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80046f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f2:	2200      	movs	r2, #0
 80046f4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80046f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f8:	7b1b      	ldrb	r3, [r3, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 8093 	beq.w	8004826 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004700:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004708:	2b00      	cmp	r3, #0
 800470a:	d046      	beq.n	800479a <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800470c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d126      	bne.n	8004762 <PCD_EP_ISR_Handler+0x608>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004722:	b29b      	uxth	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	4413      	add	r3, r2
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
 800472c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	011a      	lsls	r2, r3, #4
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	4413      	add	r3, r2
 8004736:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800473a:	623b      	str	r3, [r7, #32]
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004746:	b29a      	uxth	r2, r3
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	801a      	strh	r2, [r3, #0]
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800475a:	b29a      	uxth	r2, r3
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	e061      	b.n	8004826 <PCD_EP_ISR_Handler+0x6cc>
 8004762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004764:	785b      	ldrb	r3, [r3, #1]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d15d      	bne.n	8004826 <PCD_EP_ISR_Handler+0x6cc>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004778:	b29b      	uxth	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477e:	4413      	add	r3, r2
 8004780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	011a      	lsls	r2, r3, #4
 8004788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800478a:	4413      	add	r3, r2
 800478c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	2200      	movs	r2, #0
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	e045      	b.n	8004826 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d126      	bne.n	80047f6 <PCD_EP_ISR_Handler+0x69c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047bc:	4413      	add	r3, r2
 80047be:	637b      	str	r3, [r7, #52]	@ 0x34
 80047c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	011a      	lsls	r2, r3, #4
 80047c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c8:	4413      	add	r3, r2
 80047ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80047d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	801a      	strh	r2, [r3, #0]
 80047e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	e017      	b.n	8004826 <PCD_EP_ISR_Handler+0x6cc>
 80047f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f8:	785b      	ldrb	r3, [r3, #1]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d113      	bne.n	8004826 <PCD_EP_ISR_Handler+0x6cc>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004806:	b29b      	uxth	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800480c:	4413      	add	r3, r2
 800480e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	011a      	lsls	r2, r3, #4
 8004816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004818:	4413      	add	r3, r2
 800481a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800481e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004822:	2200      	movs	r2, #0
 8004824:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	4619      	mov	r1, r3
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f006 fa04 	bl	800ac3a <HAL_PCD_DataInStageCallback>
 8004832:	e053      	b.n	80048dc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004834:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d146      	bne.n	80048ce <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004848:	b29b      	uxth	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	4413      	add	r3, r2
 8004854:	3302      	adds	r3, #2
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6812      	ldr	r2, [r2, #0]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004868:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800486c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800486e:	699a      	ldr	r2, [r3, #24]
 8004870:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004874:	429a      	cmp	r2, r3
 8004876:	d907      	bls.n	8004888 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487a:	699a      	ldr	r2, [r3, #24]
 800487c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004880:	1ad2      	subs	r2, r2, r3
 8004882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004884:	619a      	str	r2, [r3, #24]
 8004886:	e002      	b.n	800488e <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800488a:	2200      	movs	r2, #0
 800488c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800488e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f006 f9cc 	bl	800ac3a <HAL_PCD_DataInStageCallback>
 80048a2:	e01b      	b.n	80048dc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80048a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a6:	695a      	ldr	r2, [r3, #20]
 80048a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048ac:	441a      	add	r2, r3
 80048ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80048b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80048ba:	441a      	add	r2, r3
 80048bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048be:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048c6:	4618      	mov	r0, r3
 80048c8:	f002 feda 	bl	8007680 <USB_EPStartXfer>
 80048cc:	e006      	b.n	80048dc <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80048ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80048d2:	461a      	mov	r2, r3
 80048d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f91b 	bl	8004b12 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	b21b      	sxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f6ff ac3b 	blt.w	8004164 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3758      	adds	r7, #88	@ 0x58
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	4613      	mov	r3, r2
 8004904:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d07e      	beq.n	8004a0e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004918:	b29b      	uxth	r3, r3
 800491a:	461a      	mov	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	3302      	adds	r3, #2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004938:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	8b7b      	ldrh	r3, [r7, #26]
 8004940:	429a      	cmp	r2, r3
 8004942:	d306      	bcc.n	8004952 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	699a      	ldr	r2, [r3, #24]
 8004948:	8b7b      	ldrh	r3, [r7, #26]
 800494a:	1ad2      	subs	r2, r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	619a      	str	r2, [r3, #24]
 8004950:	e002      	b.n	8004958 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d123      	bne.n	80049a8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	b29b      	uxth	r3, r3
 8004972:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497a:	833b      	strh	r3, [r7, #24]
 800497c:	8b3b      	ldrh	r3, [r7, #24]
 800497e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004982:	833b      	strh	r3, [r7, #24]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	441a      	add	r2, r3
 8004992:	8b3b      	ldrh	r3, [r7, #24]
 8004994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800499c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01f      	beq.n	80049f2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049cc:	82fb      	strh	r3, [r7, #22]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	441a      	add	r2, r3
 80049dc:	8afb      	ldrh	r3, [r7, #22]
 80049de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80049f2:	8b7b      	ldrh	r3, [r7, #26]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8087 	beq.w	8004b08 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6959      	ldr	r1, [r3, #20]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	891a      	ldrh	r2, [r3, #8]
 8004a06:	8b7b      	ldrh	r3, [r7, #26]
 8004a08:	f004 fb6e 	bl	80090e8 <USB_ReadPMA>
 8004a0c:	e07c      	b.n	8004b08 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4413      	add	r3, r2
 8004a22:	3306      	adds	r3, #6
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a36:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	699a      	ldr	r2, [r3, #24]
 8004a3c:	8b7b      	ldrh	r3, [r7, #26]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d306      	bcc.n	8004a50 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	8b7b      	ldrh	r3, [r7, #26]
 8004a48:	1ad2      	subs	r2, r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	619a      	str	r2, [r3, #24]
 8004a4e:	e002      	b.n	8004a56 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d123      	bne.n	8004aa6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a78:	83fb      	strh	r3, [r7, #30]
 8004a7a:	8bfb      	ldrh	r3, [r7, #30]
 8004a7c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a80:	83fb      	strh	r3, [r7, #30]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	8bfb      	ldrh	r3, [r7, #30]
 8004a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d11f      	bne.n	8004af0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aca:	83bb      	strh	r3, [r7, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	8bbb      	ldrh	r3, [r7, #28]
 8004adc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ae0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ae8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004af0:	8b7b      	ldrh	r3, [r7, #26]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	6959      	ldr	r1, [r3, #20]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	895a      	ldrh	r2, [r3, #10]
 8004b02:	8b7b      	ldrh	r3, [r7, #26]
 8004b04:	f004 faf0 	bl	80090e8 <USB_ReadPMA>
    }
  }

  return count;
 8004b08:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b0a4      	sub	sp, #144	@ 0x90
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 81dd 	beq.w	8004ee6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	461a      	mov	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	4413      	add	r3, r2
 8004b40:	3302      	adds	r3, #2
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b54:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	699a      	ldr	r2, [r3, #24]
 8004b5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d907      	bls.n	8004b74 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	699a      	ldr	r2, [r3, #24]
 8004b68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b6c:	1ad2      	subs	r2, r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	619a      	str	r2, [r3, #24]
 8004b72:	e002      	b.n	8004b7a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2200      	movs	r2, #0
 8004b78:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f040 80b9 	bne.w	8004cf6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d126      	bne.n	8004bda <HAL_PCD_EP_DB_Transmit+0xc8>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba0:	4413      	add	r3, r2
 8004ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	011a      	lsls	r2, r3, #4
 8004baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bac:	4413      	add	r3, r2
 8004bae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	801a      	strh	r2, [r3, #0]
 8004bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd6:	801a      	strh	r2, [r3, #0]
 8004bd8:	e01a      	b.n	8004c10 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	785b      	ldrb	r3, [r3, #1]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d116      	bne.n	8004c10 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf6:	4413      	add	r3, r2
 8004bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	011a      	lsls	r2, r3, #4
 8004c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c02:	4413      	add	r3, r2
 8004c04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	785b      	ldrb	r3, [r3, #1]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d126      	bne.n	8004c6c <HAL_PCD_EP_DB_Transmit+0x15a>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	61fb      	str	r3, [r7, #28]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	011a      	lsls	r2, r3, #4
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	801a      	strh	r2, [r3, #0]
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	801a      	strh	r2, [r3, #0]
 8004c6a:	e017      	b.n	8004c9c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d113      	bne.n	8004c9c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	4413      	add	r3, r2
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	011a      	lsls	r2, r3, #4
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	4413      	add	r3, r2
 8004c90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f005 ffc9 	bl	800ac3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 82fc 	beq.w	80052ac <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cce:	82fb      	strh	r3, [r7, #22]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	8afb      	ldrh	r3, [r7, #22]
 8004ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ce8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	8013      	strh	r3, [r2, #0]
 8004cf4:	e2da      	b.n	80052ac <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d021      	beq.n	8004d44 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	f040 82ae 	bne.w	80052ac <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d58:	441a      	add	r2, r3
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	69da      	ldr	r2, [r3, #28]
 8004d62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d66:	441a      	add	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	6a1a      	ldr	r2, [r3, #32]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d30b      	bcc.n	8004d90 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6a1a      	ldr	r2, [r3, #32]
 8004d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d88:	1ad2      	subs	r2, r2, r3
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	621a      	str	r2, [r3, #32]
 8004d8e:	e017      	b.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d108      	bne.n	8004daa <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004d98:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004d9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004da8:	e00a      	b.n	8004dc0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d165      	bne.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x382>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ddc:	4413      	add	r3, r2
 8004dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	011a      	lsls	r2, r3, #4
 8004de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de8:	4413      	add	r3, r2
 8004dea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004dee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfe:	801a      	strh	r2, [r3, #0]
 8004e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e04:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e06:	d91d      	bls.n	8004e44 <HAL_PCD_EP_DB_Transmit+0x332>
 8004e08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <HAL_PCD_EP_DB_Transmit+0x310>
 8004e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	029b      	lsls	r3, r3, #10
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	4313      	orrs	r3, r2
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	801a      	strh	r2, [r3, #0]
 8004e42:	e044      	b.n	8004ece <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <HAL_PCD_EP_DB_Transmit+0x350>
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5e:	801a      	strh	r2, [r3, #0]
 8004e60:	e035      	b.n	8004ece <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e66:	085b      	lsrs	r3, r3, #1
 8004e68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_PCD_EP_DB_Transmit+0x36a>
 8004e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e78:	3301      	adds	r3, #1
 8004e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	029b      	lsls	r3, r3, #10
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e90:	801a      	strh	r2, [r3, #0]
 8004e92:	e01c      	b.n	8004ece <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	785b      	ldrb	r3, [r3, #1]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d118      	bne.n	8004ece <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eb0:	4413      	add	r3, r2
 8004eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	011a      	lsls	r2, r3, #4
 8004eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ec2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ecc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	6959      	ldr	r1, [r3, #20]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	891a      	ldrh	r2, [r3, #8]
 8004eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	f004 f8bd 	bl	800905e <USB_WritePMA>
 8004ee4:	e1e2      	b.n	80052ac <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	3306      	adds	r3, #6
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f0e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	699a      	ldr	r2, [r3, #24]
 8004f16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d307      	bcc.n	8004f2e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004f26:	1ad2      	subs	r2, r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	619a      	str	r2, [r3, #24]
 8004f2c:	e002      	b.n	8004f34 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2200      	movs	r2, #0
 8004f32:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f040 80c0 	bne.w	80050be <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d126      	bne.n	8004f94 <HAL_PCD_EP_DB_Transmit+0x482>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f5a:	4413      	add	r3, r2
 8004f5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	011a      	lsls	r2, r3, #4
 8004f64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f66:	4413      	add	r3, r2
 8004f68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f7c:	801a      	strh	r2, [r3, #0]
 8004f7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	e01a      	b.n	8004fca <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	785b      	ldrb	r3, [r3, #1]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d116      	bne.n	8004fca <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fb0:	4413      	add	r3, r2
 8004fb2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	011a      	lsls	r2, r3, #4
 8004fba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	677b      	str	r3, [r7, #116]	@ 0x74
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d12b      	bne.n	8005030 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fec:	4413      	add	r3, r2
 8004fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	011a      	lsls	r2, r3, #4
 8004ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ffe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005002:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800500e:	b29a      	uxth	r2, r3
 8005010:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005014:	801a      	strh	r2, [r3, #0]
 8005016:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005022:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005026:	b29a      	uxth	r2, r3
 8005028:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800502c:	801a      	strh	r2, [r3, #0]
 800502e:	e017      	b.n	8005060 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	785b      	ldrb	r3, [r3, #1]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d113      	bne.n	8005060 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005040:	b29b      	uxth	r3, r3
 8005042:	461a      	mov	r2, r3
 8005044:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005046:	4413      	add	r3, r2
 8005048:	677b      	str	r3, [r7, #116]	@ 0x74
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	011a      	lsls	r2, r3, #4
 8005050:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005052:	4413      	add	r3, r2
 8005054:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005058:	673b      	str	r3, [r7, #112]	@ 0x70
 800505a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800505c:	2200      	movs	r2, #0
 800505e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	4619      	mov	r1, r3
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f005 fde7 	bl	800ac3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005072:	2b00      	cmp	r3, #0
 8005074:	f040 811a 	bne.w	80052ac <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800508e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005092:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	441a      	add	r2, r3
 80050a4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80050a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	8013      	strh	r3, [r2, #0]
 80050bc:	e0f6      	b.n	80052ac <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d121      	bne.n	800510c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	461a      	mov	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	441a      	add	r2, r3
 80050f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80050f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005100:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005108:	b29b      	uxth	r3, r3
 800510a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005112:	2b01      	cmp	r3, #1
 8005114:	f040 80ca 	bne.w	80052ac <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	695a      	ldr	r2, [r3, #20]
 800511c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005120:	441a      	add	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	69da      	ldr	r2, [r3, #28]
 800512a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800512e:	441a      	add	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	6a1a      	ldr	r2, [r3, #32]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	429a      	cmp	r2, r3
 800513e:	d30b      	bcc.n	8005158 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005150:	1ad2      	subs	r2, r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	621a      	str	r2, [r3, #32]
 8005156:	e017      	b.n	8005188 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d108      	bne.n	8005172 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005160:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005164:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005170:	e00a      	b.n	8005188 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2200      	movs	r2, #0
 800517e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	657b      	str	r3, [r7, #84]	@ 0x54
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d165      	bne.n	8005262 <HAL_PCD_EP_DB_Transmit+0x750>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051aa:	4413      	add	r3, r2
 80051ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	011a      	lsls	r2, r3, #4
 80051b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051b6:	4413      	add	r3, r2
 80051b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051cc:	801a      	strh	r2, [r3, #0]
 80051ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80051d4:	d91d      	bls.n	8005212 <HAL_PCD_EP_DB_Transmit+0x700>
 80051d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d102      	bne.n	80051f0 <HAL_PCD_EP_DB_Transmit+0x6de>
 80051ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051ec:	3b01      	subs	r3, #1
 80051ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	029b      	lsls	r3, r3, #10
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	4313      	orrs	r3, r2
 8005200:	b29b      	uxth	r3, r3
 8005202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800520a:	b29a      	uxth	r2, r3
 800520c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800520e:	801a      	strh	r2, [r3, #0]
 8005210:	e041      	b.n	8005296 <HAL_PCD_EP_DB_Transmit+0x784>
 8005212:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <HAL_PCD_EP_DB_Transmit+0x71e>
 800521a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005228:	b29a      	uxth	r2, r3
 800522a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800522c:	801a      	strh	r2, [r3, #0]
 800522e:	e032      	b.n	8005296 <HAL_PCD_EP_DB_Transmit+0x784>
 8005230:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_PCD_EP_DB_Transmit+0x738>
 8005244:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005246:	3301      	adds	r3, #1
 8005248:	66bb      	str	r3, [r7, #104]	@ 0x68
 800524a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29a      	uxth	r2, r3
 8005250:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005252:	b29b      	uxth	r3, r3
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	b29b      	uxth	r3, r3
 8005258:	4313      	orrs	r3, r2
 800525a:	b29a      	uxth	r2, r3
 800525c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800525e:	801a      	strh	r2, [r3, #0]
 8005260:	e019      	b.n	8005296 <HAL_PCD_EP_DB_Transmit+0x784>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d115      	bne.n	8005296 <HAL_PCD_EP_DB_Transmit+0x784>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005272:	b29b      	uxth	r3, r3
 8005274:	461a      	mov	r2, r3
 8005276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005278:	4413      	add	r3, r2
 800527a:	657b      	str	r3, [r7, #84]	@ 0x54
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	011a      	lsls	r2, r3, #4
 8005282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005284:	4413      	add	r3, r2
 8005286:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800528a:	653b      	str	r3, [r7, #80]	@ 0x50
 800528c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005290:	b29a      	uxth	r2, r3
 8005292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005294:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	6959      	ldr	r1, [r3, #20]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	895a      	ldrh	r2, [r3, #10]
 80052a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	f003 fed9 	bl	800905e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052c6:	82bb      	strh	r3, [r7, #20]
 80052c8:	8abb      	ldrh	r3, [r7, #20]
 80052ca:	f083 0310 	eor.w	r3, r3, #16
 80052ce:	82bb      	strh	r3, [r7, #20]
 80052d0:	8abb      	ldrh	r3, [r7, #20]
 80052d2:	f083 0320 	eor.w	r3, r3, #32
 80052d6:	82bb      	strh	r3, [r7, #20]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	8abb      	ldrh	r3, [r7, #20]
 80052e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3790      	adds	r7, #144	@ 0x90
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005306:	b480      	push	{r7}
 8005308:	b087      	sub	sp, #28
 800530a:	af00      	add	r7, sp, #0
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	607b      	str	r3, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	817b      	strh	r3, [r7, #10]
 8005314:	4613      	mov	r3, r2
 8005316:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005318:	897b      	ldrh	r3, [r7, #10]
 800531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00b      	beq.n	800533c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005324:	897b      	ldrh	r3, [r7, #10]
 8005326:	f003 0207 	and.w	r2, r3, #7
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	3310      	adds	r3, #16
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	e009      	b.n	8005350 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800533c:	897a      	ldrh	r2, [r7, #10]
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005350:	893b      	ldrh	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d107      	bne.n	8005366 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	b29a      	uxth	r2, r3
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	80da      	strh	r2, [r3, #6]
 8005364:	e00b      	b.n	800537e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2201      	movs	r2, #1
 800536a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	b29a      	uxth	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	0c1b      	lsrs	r3, r3, #16
 8005378:	b29a      	uxth	r2, r3
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	bc80      	pop	{r7}
 8005388:	4770      	bx	lr
	...

0800538c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e272      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 8087 	beq.w	80054ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053ac:	4b92      	ldr	r3, [pc, #584]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f003 030c 	and.w	r3, r3, #12
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d00c      	beq.n	80053d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053b8:	4b8f      	ldr	r3, [pc, #572]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f003 030c 	and.w	r3, r3, #12
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d112      	bne.n	80053ea <HAL_RCC_OscConfig+0x5e>
 80053c4:	4b8c      	ldr	r3, [pc, #560]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053d0:	d10b      	bne.n	80053ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d2:	4b89      	ldr	r3, [pc, #548]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d06c      	beq.n	80054b8 <HAL_RCC_OscConfig+0x12c>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d168      	bne.n	80054b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e24c      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f2:	d106      	bne.n	8005402 <HAL_RCC_OscConfig+0x76>
 80053f4:	4b80      	ldr	r3, [pc, #512]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a7f      	ldr	r2, [pc, #508]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 80053fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	e02e      	b.n	8005460 <HAL_RCC_OscConfig+0xd4>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10c      	bne.n	8005424 <HAL_RCC_OscConfig+0x98>
 800540a:	4b7b      	ldr	r3, [pc, #492]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a7a      	ldr	r2, [pc, #488]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 8005410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	4b78      	ldr	r3, [pc, #480]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a77      	ldr	r2, [pc, #476]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 800541c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e01d      	b.n	8005460 <HAL_RCC_OscConfig+0xd4>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800542c:	d10c      	bne.n	8005448 <HAL_RCC_OscConfig+0xbc>
 800542e:	4b72      	ldr	r3, [pc, #456]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a71      	ldr	r2, [pc, #452]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 8005434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	4b6f      	ldr	r3, [pc, #444]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a6e      	ldr	r2, [pc, #440]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 8005440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	e00b      	b.n	8005460 <HAL_RCC_OscConfig+0xd4>
 8005448:	4b6b      	ldr	r3, [pc, #428]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a6a      	ldr	r2, [pc, #424]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 800544e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	4b68      	ldr	r3, [pc, #416]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a67      	ldr	r2, [pc, #412]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 800545a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800545e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d013      	beq.n	8005490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005468:	f7fc f88a 	bl	8001580 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005470:	f7fc f886 	bl	8001580 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b64      	cmp	r3, #100	@ 0x64
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e200      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005482:	4b5d      	ldr	r3, [pc, #372]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCC_OscConfig+0xe4>
 800548e:	e014      	b.n	80054ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005490:	f7fc f876 	bl	8001580 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005498:	f7fc f872 	bl	8001580 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b64      	cmp	r3, #100	@ 0x64
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e1ec      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054aa:	4b53      	ldr	r3, [pc, #332]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x10c>
 80054b6:	e000      	b.n	80054ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d063      	beq.n	800558e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054c6:	4b4c      	ldr	r3, [pc, #304]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 030c 	and.w	r3, r3, #12
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054d2:	4b49      	ldr	r3, [pc, #292]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f003 030c 	and.w	r3, r3, #12
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d11c      	bne.n	8005518 <HAL_RCC_OscConfig+0x18c>
 80054de:	4b46      	ldr	r3, [pc, #280]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d116      	bne.n	8005518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ea:	4b43      	ldr	r3, [pc, #268]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <HAL_RCC_OscConfig+0x176>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d001      	beq.n	8005502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e1c0      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005502:	4b3d      	ldr	r3, [pc, #244]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	4939      	ldr	r1, [pc, #228]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005516:	e03a      	b.n	800558e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d020      	beq.n	8005562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005520:	4b36      	ldr	r3, [pc, #216]	@ (80055fc <HAL_RCC_OscConfig+0x270>)
 8005522:	2201      	movs	r2, #1
 8005524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005526:	f7fc f82b 	bl	8001580 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800552e:	f7fc f827 	bl	8001580 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e1a1      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005540:	4b2d      	ldr	r3, [pc, #180]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800554c:	4b2a      	ldr	r3, [pc, #168]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	4927      	ldr	r1, [pc, #156]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 800555c:	4313      	orrs	r3, r2
 800555e:	600b      	str	r3, [r1, #0]
 8005560:	e015      	b.n	800558e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005562:	4b26      	ldr	r3, [pc, #152]	@ (80055fc <HAL_RCC_OscConfig+0x270>)
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005568:	f7fc f80a 	bl	8001580 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005570:	f7fc f806 	bl	8001580 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e180      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005582:	4b1d      	ldr	r3, [pc, #116]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f0      	bne.n	8005570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d03a      	beq.n	8005610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d019      	beq.n	80055d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055a2:	4b17      	ldr	r3, [pc, #92]	@ (8005600 <HAL_RCC_OscConfig+0x274>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a8:	f7fb ffea 	bl	8001580 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b0:	f7fb ffe6 	bl	8001580 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e160      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c2:	4b0d      	ldr	r3, [pc, #52]	@ (80055f8 <HAL_RCC_OscConfig+0x26c>)
 80055c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055ce:	2001      	movs	r0, #1
 80055d0:	f000 face 	bl	8005b70 <RCC_Delay>
 80055d4:	e01c      	b.n	8005610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005600 <HAL_RCC_OscConfig+0x274>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055dc:	f7fb ffd0 	bl	8001580 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e2:	e00f      	b.n	8005604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055e4:	f7fb ffcc 	bl	8001580 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d908      	bls.n	8005604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e146      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
 80055f6:	bf00      	nop
 80055f8:	40021000 	.word	0x40021000
 80055fc:	42420000 	.word	0x42420000
 8005600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005604:	4b92      	ldr	r3, [pc, #584]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 8005606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e9      	bne.n	80055e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80a6 	beq.w	800576a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005622:	4b8b      	ldr	r3, [pc, #556]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10d      	bne.n	800564a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800562e:	4b88      	ldr	r3, [pc, #544]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	4a87      	ldr	r2, [pc, #540]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 8005634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005638:	61d3      	str	r3, [r2, #28]
 800563a:	4b85      	ldr	r3, [pc, #532]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005642:	60bb      	str	r3, [r7, #8]
 8005644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005646:	2301      	movs	r3, #1
 8005648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564a:	4b82      	ldr	r3, [pc, #520]	@ (8005854 <HAL_RCC_OscConfig+0x4c8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d118      	bne.n	8005688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005656:	4b7f      	ldr	r3, [pc, #508]	@ (8005854 <HAL_RCC_OscConfig+0x4c8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a7e      	ldr	r2, [pc, #504]	@ (8005854 <HAL_RCC_OscConfig+0x4c8>)
 800565c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005662:	f7fb ff8d 	bl	8001580 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566a:	f7fb ff89 	bl	8001580 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b64      	cmp	r3, #100	@ 0x64
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e103      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567c:	4b75      	ldr	r3, [pc, #468]	@ (8005854 <HAL_RCC_OscConfig+0x4c8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0f0      	beq.n	800566a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d106      	bne.n	800569e <HAL_RCC_OscConfig+0x312>
 8005690:	4b6f      	ldr	r3, [pc, #444]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	4a6e      	ldr	r2, [pc, #440]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	6213      	str	r3, [r2, #32]
 800569c:	e02d      	b.n	80056fa <HAL_RCC_OscConfig+0x36e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10c      	bne.n	80056c0 <HAL_RCC_OscConfig+0x334>
 80056a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	4a69      	ldr	r2, [pc, #420]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	6213      	str	r3, [r2, #32]
 80056b2:	4b67      	ldr	r3, [pc, #412]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	4a66      	ldr	r2, [pc, #408]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80056b8:	f023 0304 	bic.w	r3, r3, #4
 80056bc:	6213      	str	r3, [r2, #32]
 80056be:	e01c      	b.n	80056fa <HAL_RCC_OscConfig+0x36e>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	2b05      	cmp	r3, #5
 80056c6:	d10c      	bne.n	80056e2 <HAL_RCC_OscConfig+0x356>
 80056c8:	4b61      	ldr	r3, [pc, #388]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	4a60      	ldr	r2, [pc, #384]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80056ce:	f043 0304 	orr.w	r3, r3, #4
 80056d2:	6213      	str	r3, [r2, #32]
 80056d4:	4b5e      	ldr	r3, [pc, #376]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	4a5d      	ldr	r2, [pc, #372]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80056da:	f043 0301 	orr.w	r3, r3, #1
 80056de:	6213      	str	r3, [r2, #32]
 80056e0:	e00b      	b.n	80056fa <HAL_RCC_OscConfig+0x36e>
 80056e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	4a5a      	ldr	r2, [pc, #360]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	6213      	str	r3, [r2, #32]
 80056ee:	4b58      	ldr	r3, [pc, #352]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	4a57      	ldr	r2, [pc, #348]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80056f4:	f023 0304 	bic.w	r3, r3, #4
 80056f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d015      	beq.n	800572e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005702:	f7fb ff3d 	bl	8001580 <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005708:	e00a      	b.n	8005720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570a:	f7fb ff39 	bl	8001580 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005718:	4293      	cmp	r3, r2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e0b1      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005720:	4b4b      	ldr	r3, [pc, #300]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0ee      	beq.n	800570a <HAL_RCC_OscConfig+0x37e>
 800572c:	e014      	b.n	8005758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800572e:	f7fb ff27 	bl	8001580 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005734:	e00a      	b.n	800574c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f7fb ff23 	bl	8001580 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e09b      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574c:	4b40      	ldr	r3, [pc, #256]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1ee      	bne.n	8005736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d105      	bne.n	800576a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800575e:	4b3c      	ldr	r3, [pc, #240]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	4a3b      	ldr	r2, [pc, #236]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 8005764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8087 	beq.w	8005882 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005774:	4b36      	ldr	r3, [pc, #216]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 030c 	and.w	r3, r3, #12
 800577c:	2b08      	cmp	r3, #8
 800577e:	d061      	beq.n	8005844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d146      	bne.n	8005816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005788:	4b33      	ldr	r3, [pc, #204]	@ (8005858 <HAL_RCC_OscConfig+0x4cc>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578e:	f7fb fef7 	bl	8001580 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005796:	f7fb fef3 	bl	8001580 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e06d      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057a8:	4b29      	ldr	r3, [pc, #164]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1f0      	bne.n	8005796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057bc:	d108      	bne.n	80057d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057be:	4b24      	ldr	r3, [pc, #144]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	4921      	ldr	r1, [pc, #132]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a19      	ldr	r1, [r3, #32]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e0:	430b      	orrs	r3, r1
 80057e2:	491b      	ldr	r1, [pc, #108]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005858 <HAL_RCC_OscConfig+0x4cc>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ee:	f7fb fec7 	bl	8001580 <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f6:	f7fb fec3 	bl	8001580 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e03d      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005808:	4b11      	ldr	r3, [pc, #68]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x46a>
 8005814:	e035      	b.n	8005882 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005816:	4b10      	ldr	r3, [pc, #64]	@ (8005858 <HAL_RCC_OscConfig+0x4cc>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581c:	f7fb feb0 	bl	8001580 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005824:	f7fb feac 	bl	8001580 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e026      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005836:	4b06      	ldr	r3, [pc, #24]	@ (8005850 <HAL_RCC_OscConfig+0x4c4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x498>
 8005842:	e01e      	b.n	8005882 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d107      	bne.n	800585c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e019      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
 8005850:	40021000 	.word	0x40021000
 8005854:	40007000 	.word	0x40007000
 8005858:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800585c:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <HAL_RCC_OscConfig+0x500>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	429a      	cmp	r2, r3
 800586e:	d106      	bne.n	800587e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587a:	429a      	cmp	r2, r3
 800587c:	d001      	beq.n	8005882 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40021000 	.word	0x40021000

08005890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0d0      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c0>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d910      	bls.n	80058d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b2:	4b67      	ldr	r3, [pc, #412]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 0207 	bic.w	r2, r3, #7
 80058ba:	4965      	ldr	r1, [pc, #404]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c0>)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	4313      	orrs	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c2:	4b63      	ldr	r3, [pc, #396]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0307 	and.w	r3, r3, #7
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d001      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0b8      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d020      	beq.n	8005922 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058ec:	4b59      	ldr	r3, [pc, #356]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	4a58      	ldr	r2, [pc, #352]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 80058f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005904:	4b53      	ldr	r3, [pc, #332]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4a52      	ldr	r2, [pc, #328]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 800590a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800590e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005910:	4b50      	ldr	r3, [pc, #320]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	494d      	ldr	r1, [pc, #308]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 800591e:	4313      	orrs	r3, r2
 8005920:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d040      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d107      	bne.n	8005946 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005936:	4b47      	ldr	r3, [pc, #284]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d115      	bne.n	800596e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e07f      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d107      	bne.n	800595e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594e:	4b41      	ldr	r3, [pc, #260]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e073      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e06b      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800596e:	4b39      	ldr	r3, [pc, #228]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4936      	ldr	r1, [pc, #216]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 800597c:	4313      	orrs	r3, r2
 800597e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005980:	f7fb fdfe 	bl	8001580 <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005986:	e00a      	b.n	800599e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005988:	f7fb fdfa 	bl	8001580 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e053      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	4b2d      	ldr	r3, [pc, #180]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f003 020c 	and.w	r2, r3, #12
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d1eb      	bne.n	8005988 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059b0:	4b27      	ldr	r3, [pc, #156]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d210      	bcs.n	80059e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4b24      	ldr	r3, [pc, #144]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 0207 	bic.w	r2, r3, #7
 80059c6:	4922      	ldr	r1, [pc, #136]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c0>)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	4b20      	ldr	r3, [pc, #128]	@ (8005a50 <HAL_RCC_ClockConfig+0x1c0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e032      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059ec:	4b19      	ldr	r3, [pc, #100]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4916      	ldr	r1, [pc, #88]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a0a:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	490e      	ldr	r1, [pc, #56]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a1e:	f000 f821 	bl	8005a64 <HAL_RCC_GetSysClockFreq>
 8005a22:	4602      	mov	r2, r0
 8005a24:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	490a      	ldr	r1, [pc, #40]	@ (8005a58 <HAL_RCC_ClockConfig+0x1c8>)
 8005a30:	5ccb      	ldrb	r3, [r1, r3]
 8005a32:	fa22 f303 	lsr.w	r3, r2, r3
 8005a36:	4a09      	ldr	r2, [pc, #36]	@ (8005a5c <HAL_RCC_ClockConfig+0x1cc>)
 8005a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a3a:	4b09      	ldr	r3, [pc, #36]	@ (8005a60 <HAL_RCC_ClockConfig+0x1d0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fb fd5c 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40022000 	.word	0x40022000
 8005a54:	40021000 	.word	0x40021000
 8005a58:	0800bb7c 	.word	0x0800bb7c
 8005a5c:	20000000 	.word	0x20000000
 8005a60:	20000004 	.word	0x20000004

08005a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60bb      	str	r3, [r7, #8]
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	2300      	movs	r3, #0
 8005a78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 030c 	and.w	r3, r3, #12
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d002      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0x30>
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d003      	beq.n	8005a9a <HAL_RCC_GetSysClockFreq+0x36>
 8005a92:	e027      	b.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a94:	4b19      	ldr	r3, [pc, #100]	@ (8005afc <HAL_RCC_GetSysClockFreq+0x98>)
 8005a96:	613b      	str	r3, [r7, #16]
      break;
 8005a98:	e027      	b.n	8005aea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	0c9b      	lsrs	r3, r3, #18
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	4a17      	ldr	r2, [pc, #92]	@ (8005b00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005aa4:	5cd3      	ldrb	r3, [r2, r3]
 8005aa6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d010      	beq.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ab2:	4b11      	ldr	r3, [pc, #68]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	0c5b      	lsrs	r3, r3, #17
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	4a11      	ldr	r2, [pc, #68]	@ (8005b04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005abe:	5cd3      	ldrb	r3, [r2, r3]
 8005ac0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8005afc <HAL_RCC_GetSysClockFreq+0x98>)
 8005ac6:	fb03 f202 	mul.w	r2, r3, r2
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	e004      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8005b08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ad8:	fb02 f303 	mul.w	r3, r2, r3
 8005adc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	613b      	str	r3, [r7, #16]
      break;
 8005ae2:	e002      	b.n	8005aea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ae4:	4b05      	ldr	r3, [pc, #20]	@ (8005afc <HAL_RCC_GetSysClockFreq+0x98>)
 8005ae6:	613b      	str	r3, [r7, #16]
      break;
 8005ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aea:	693b      	ldr	r3, [r7, #16]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40021000 	.word	0x40021000
 8005afc:	007a1200 	.word	0x007a1200
 8005b00:	0800bb94 	.word	0x0800bb94
 8005b04:	0800bba4 	.word	0x0800bba4
 8005b08:	003d0900 	.word	0x003d0900

08005b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b10:	4b02      	ldr	r3, [pc, #8]	@ (8005b1c <HAL_RCC_GetHCLKFreq+0x10>)
 8005b12:	681b      	ldr	r3, [r3, #0]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bc80      	pop	{r7}
 8005b1a:	4770      	bx	lr
 8005b1c:	20000000 	.word	0x20000000

08005b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b24:	f7ff fff2 	bl	8005b0c <HAL_RCC_GetHCLKFreq>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b05      	ldr	r3, [pc, #20]	@ (8005b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	0a1b      	lsrs	r3, r3, #8
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	4903      	ldr	r1, [pc, #12]	@ (8005b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b36:	5ccb      	ldrb	r3, [r1, r3]
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40021000 	.word	0x40021000
 8005b44:	0800bb8c 	.word	0x0800bb8c

08005b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b4c:	f7ff ffde 	bl	8005b0c <HAL_RCC_GetHCLKFreq>
 8005b50:	4602      	mov	r2, r0
 8005b52:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	0adb      	lsrs	r3, r3, #11
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	4903      	ldr	r1, [pc, #12]	@ (8005b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b5e:	5ccb      	ldrb	r3, [r1, r3]
 8005b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	0800bb8c 	.word	0x0800bb8c

08005b70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b78:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba4 <RCC_Delay+0x34>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba8 <RCC_Delay+0x38>)
 8005b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b82:	0a5b      	lsrs	r3, r3, #9
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	fb02 f303 	mul.w	r3, r2, r3
 8005b8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b8c:	bf00      	nop
  }
  while (Delay --);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1e5a      	subs	r2, r3, #1
 8005b92:	60fa      	str	r2, [r7, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1f9      	bne.n	8005b8c <RCC_Delay+0x1c>
}
 8005b98:	bf00      	nop
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bc80      	pop	{r7}
 8005ba2:	4770      	bx	lr
 8005ba4:	20000000 	.word	0x20000000
 8005ba8:	10624dd3 	.word	0x10624dd3

08005bac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d07d      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bcc:	4b4f      	ldr	r3, [pc, #316]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10d      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd8:	4b4c      	ldr	r3, [pc, #304]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	4a4b      	ldr	r2, [pc, #300]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be2:	61d3      	str	r3, [r2, #28]
 8005be4:	4b49      	ldr	r3, [pc, #292]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf4:	4b46      	ldr	r3, [pc, #280]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d118      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c00:	4b43      	ldr	r3, [pc, #268]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a42      	ldr	r2, [pc, #264]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c0c:	f7fb fcb8 	bl	8001580 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c12:	e008      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c14:	f7fb fcb4 	bl	8001580 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b64      	cmp	r3, #100	@ 0x64
 8005c20:	d901      	bls.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e06d      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c26:	4b3a      	ldr	r3, [pc, #232]	@ (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c32:	4b36      	ldr	r3, [pc, #216]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c3a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d02e      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d027      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c50:	4b2e      	ldr	r3, [pc, #184]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c58:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c5a:	4b2e      	ldr	r3, [pc, #184]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c60:	4b2c      	ldr	r3, [pc, #176]	@ (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c66:	4a29      	ldr	r2, [pc, #164]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d014      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c76:	f7fb fc83 	bl	8001580 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c7c:	e00a      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7e:	f7fb fc7f 	bl	8001580 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e036      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c94:	4b1d      	ldr	r3, [pc, #116]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c96:	6a1b      	ldr	r3, [r3, #32]
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0ee      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	4917      	ldr	r1, [pc, #92]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cb2:	7dfb      	ldrb	r3, [r7, #23]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d105      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb8:	4b14      	ldr	r3, [pc, #80]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	4a13      	ldr	r2, [pc, #76]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cc2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	490b      	ldr	r1, [pc, #44]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cee:	4b07      	ldr	r3, [pc, #28]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	4904      	ldr	r1, [pc, #16]	@ (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40021000 	.word	0x40021000
 8005d10:	40007000 	.word	0x40007000
 8005d14:	42420440 	.word	0x42420440

08005d18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e041      	b.n	8005dae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fb fab0 	bl	80012a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f000 f992 	bl	8006080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <HAL_TIM_PWM_Start+0x24>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	bf14      	ite	ne
 8005dd4:	2301      	movne	r3, #1
 8005dd6:	2300      	moveq	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	e022      	b.n	8005e22 <HAL_TIM_PWM_Start+0x6a>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d109      	bne.n	8005df6 <HAL_TIM_PWM_Start+0x3e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	bf14      	ite	ne
 8005dee:	2301      	movne	r3, #1
 8005df0:	2300      	moveq	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	e015      	b.n	8005e22 <HAL_TIM_PWM_Start+0x6a>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d109      	bne.n	8005e10 <HAL_TIM_PWM_Start+0x58>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	e008      	b.n	8005e22 <HAL_TIM_PWM_Start+0x6a>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	bf14      	ite	ne
 8005e1c:	2301      	movne	r3, #1
 8005e1e:	2300      	moveq	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e05e      	b.n	8005ee8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <HAL_TIM_PWM_Start+0x82>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e38:	e013      	b.n	8005e62 <HAL_TIM_PWM_Start+0xaa>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIM_PWM_Start+0x92>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e48:	e00b      	b.n	8005e62 <HAL_TIM_PWM_Start+0xaa>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d104      	bne.n	8005e5a <HAL_TIM_PWM_Start+0xa2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e58:	e003      	b.n	8005e62 <HAL_TIM_PWM_Start+0xaa>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2201      	movs	r2, #1
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fafe 	bl	800646c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1e      	ldr	r2, [pc, #120]	@ (8005ef0 <HAL_TIM_PWM_Start+0x138>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d107      	bne.n	8005e8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a18      	ldr	r2, [pc, #96]	@ (8005ef0 <HAL_TIM_PWM_Start+0x138>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00e      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0xfa>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e9c:	d009      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0xfa>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a14      	ldr	r2, [pc, #80]	@ (8005ef4 <HAL_TIM_PWM_Start+0x13c>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0xfa>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a12      	ldr	r2, [pc, #72]	@ (8005ef8 <HAL_TIM_PWM_Start+0x140>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d111      	bne.n	8005ed6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b06      	cmp	r3, #6
 8005ec2:	d010      	beq.n	8005ee6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed4:	e007      	b.n	8005ee6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40000400 	.word	0x40000400
 8005ef8:	40000800 	.word	0x40000800

08005efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e0ae      	b.n	8006078 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b0c      	cmp	r3, #12
 8005f26:	f200 809f 	bhi.w	8006068 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f30:	08005f65 	.word	0x08005f65
 8005f34:	08006069 	.word	0x08006069
 8005f38:	08006069 	.word	0x08006069
 8005f3c:	08006069 	.word	0x08006069
 8005f40:	08005fa5 	.word	0x08005fa5
 8005f44:	08006069 	.word	0x08006069
 8005f48:	08006069 	.word	0x08006069
 8005f4c:	08006069 	.word	0x08006069
 8005f50:	08005fe7 	.word	0x08005fe7
 8005f54:	08006069 	.word	0x08006069
 8005f58:	08006069 	.word	0x08006069
 8005f5c:	08006069 	.word	0x08006069
 8005f60:	08006027 	.word	0x08006027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 f8f6 	bl	800615c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0208 	orr.w	r2, r2, #8
 8005f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0204 	bic.w	r2, r2, #4
 8005f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6999      	ldr	r1, [r3, #24]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	619a      	str	r2, [r3, #24]
      break;
 8005fa2:	e064      	b.n	800606e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 f93c 	bl	8006228 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6999      	ldr	r1, [r3, #24]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	021a      	lsls	r2, r3, #8
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	619a      	str	r2, [r3, #24]
      break;
 8005fe4:	e043      	b.n	800606e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68b9      	ldr	r1, [r7, #8]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f000 f985 	bl	80062fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 0208 	orr.w	r2, r2, #8
 8006000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0204 	bic.w	r2, r2, #4
 8006010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69d9      	ldr	r1, [r3, #28]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	61da      	str	r2, [r3, #28]
      break;
 8006024:	e023      	b.n	800606e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	4618      	mov	r0, r3
 800602e:	f000 f9cf 	bl	80063d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69d9      	ldr	r1, [r3, #28]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	021a      	lsls	r2, r3, #8
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	61da      	str	r2, [r3, #28]
      break;
 8006066:	e002      	b.n	800606e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	75fb      	strb	r3, [r7, #23]
      break;
 800606c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006076:	7dfb      	ldrb	r3, [r7, #23]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a2f      	ldr	r2, [pc, #188]	@ (8006150 <TIM_Base_SetConfig+0xd0>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d00b      	beq.n	80060b0 <TIM_Base_SetConfig+0x30>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800609e:	d007      	beq.n	80060b0 <TIM_Base_SetConfig+0x30>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006154 <TIM_Base_SetConfig+0xd4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_Base_SetConfig+0x30>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a2b      	ldr	r2, [pc, #172]	@ (8006158 <TIM_Base_SetConfig+0xd8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d108      	bne.n	80060c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a22      	ldr	r2, [pc, #136]	@ (8006150 <TIM_Base_SetConfig+0xd0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00b      	beq.n	80060e2 <TIM_Base_SetConfig+0x62>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d0:	d007      	beq.n	80060e2 <TIM_Base_SetConfig+0x62>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006154 <TIM_Base_SetConfig+0xd4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d003      	beq.n	80060e2 <TIM_Base_SetConfig+0x62>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006158 <TIM_Base_SetConfig+0xd8>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d108      	bne.n	80060f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a0d      	ldr	r2, [pc, #52]	@ (8006150 <TIM_Base_SetConfig+0xd0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d103      	bne.n	8006128 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	f023 0201 	bic.w	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	611a      	str	r2, [r3, #16]
  }
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr
 8006150:	40012c00 	.word	0x40012c00
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800

0800615c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f023 0201 	bic.w	r2, r3, #1
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0303 	bic.w	r3, r3, #3
 8006192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 0302 	bic.w	r3, r3, #2
 80061a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006224 <TIM_OC1_SetConfig+0xc8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d10c      	bne.n	80061d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f023 0308 	bic.w	r3, r3, #8
 80061be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f023 0304 	bic.w	r3, r3, #4
 80061d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a13      	ldr	r2, [pc, #76]	@ (8006224 <TIM_OC1_SetConfig+0xc8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d111      	bne.n	80061fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	621a      	str	r2, [r3, #32]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40012c00 	.word	0x40012c00

08006228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	f023 0210 	bic.w	r2, r3, #16
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800625e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f023 0320 	bic.w	r3, r3, #32
 8006272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <TIM_OC2_SetConfig+0xd0>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d10d      	bne.n	80062a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800628e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a14      	ldr	r2, [pc, #80]	@ (80062f8 <TIM_OC2_SetConfig+0xd0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d113      	bne.n	80062d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr
 80062f8:	40012c00 	.word	0x40012c00

080062fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a1d      	ldr	r2, [pc, #116]	@ (80063cc <TIM_OC3_SetConfig+0xd0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d10d      	bne.n	8006376 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a14      	ldr	r2, [pc, #80]	@ (80063cc <TIM_OC3_SetConfig+0xd0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d113      	bne.n	80063a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800638c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	621a      	str	r2, [r3, #32]
}
 80063c0:	bf00      	nop
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40012c00 	.word	0x40012c00

080063d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800641a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	031b      	lsls	r3, r3, #12
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a0f      	ldr	r2, [pc, #60]	@ (8006468 <TIM_OC4_SetConfig+0x98>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d109      	bne.n	8006444 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	019b      	lsls	r3, r3, #6
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	621a      	str	r2, [r3, #32]
}
 800645e:	bf00      	nop
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	bc80      	pop	{r7}
 8006466:	4770      	bx	lr
 8006468:	40012c00 	.word	0x40012c00

0800646c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800646c:	b480      	push	{r7}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f003 031f 	and.w	r3, r3, #31
 800647e:	2201      	movs	r2, #1
 8006480:	fa02 f303 	lsl.w	r3, r2, r3
 8006484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a1a      	ldr	r2, [r3, #32]
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	43db      	mvns	r3, r3
 800648e:	401a      	ands	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a1a      	ldr	r2, [r3, #32]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f003 031f 	and.w	r3, r3, #31
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	fa01 f303 	lsl.w	r3, r1, r3
 80064a4:	431a      	orrs	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	621a      	str	r2, [r3, #32]
}
 80064aa:	bf00      	nop
 80064ac:	371c      	adds	r7, #28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bc80      	pop	{r7}
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e046      	b.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a16      	ldr	r2, [pc, #88]	@ (8006564 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00e      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006518:	d009      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a12      	ldr	r2, [pc, #72]	@ (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d004      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a10      	ldr	r2, [pc, #64]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d10c      	bne.n	8006548 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	4313      	orrs	r3, r2
 800653e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	bc80      	pop	{r7}
 8006562:	4770      	bx	lr
 8006564:	40012c00 	.word	0x40012c00
 8006568:	40000400 	.word	0x40000400
 800656c:	40000800 	.word	0x40000800

08006570 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006588:	2302      	movs	r3, #2
 800658a:	e03d      	b.n	8006608 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr

08006612 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b082      	sub	sp, #8
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e042      	b.n	80066aa <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d106      	bne.n	800663e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fa feaf 	bl	800139c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2224      	movs	r2, #36	@ 0x24
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006654:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f972 	bl	8006940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691a      	ldr	r2, [r3, #16]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800666a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695a      	ldr	r2, [r3, #20]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800667a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800668a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b08a      	sub	sp, #40	@ 0x28
 80066b6:	af02      	add	r7, sp, #8
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	603b      	str	r3, [r7, #0]
 80066be:	4613      	mov	r3, r2
 80066c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b20      	cmp	r3, #32
 80066d0:	d175      	bne.n	80067be <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <HAL_UART_Transmit+0x2c>
 80066d8:	88fb      	ldrh	r3, [r7, #6]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e06e      	b.n	80067c0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2221      	movs	r2, #33	@ 0x21
 80066ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066f0:	f7fa ff46 	bl	8001580 <HAL_GetTick>
 80066f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	88fa      	ldrh	r2, [r7, #6]
 80066fa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	88fa      	ldrh	r2, [r7, #6]
 8006700:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800670a:	d108      	bne.n	800671e <HAL_UART_Transmit+0x6c>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	61bb      	str	r3, [r7, #24]
 800671c:	e003      	b.n	8006726 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006726:	e02e      	b.n	8006786 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2200      	movs	r2, #0
 8006730:	2180      	movs	r1, #128	@ 0x80
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f848 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d005      	beq.n	800674a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e03a      	b.n	80067c0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10b      	bne.n	8006768 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800675e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	3302      	adds	r3, #2
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e007      	b.n	8006778 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	781a      	ldrb	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	3301      	adds	r3, #1
 8006776:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29a      	uxth	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1cb      	bne.n	8006728 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	2140      	movs	r1, #64	@ 0x40
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f814 	bl	80067c8 <UART_WaitOnFlagUntilTimeout>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e006      	b.n	80067c0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	e000      	b.n	80067c0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80067be:	2302      	movs	r3, #2
  }
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3720      	adds	r7, #32
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d8:	e03b      	b.n	8006852 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067e0:	d037      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e2:	f7fa fecd 	bl	8001580 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	6a3a      	ldr	r2, [r7, #32]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e03a      	b.n	8006872 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	2b00      	cmp	r3, #0
 8006808:	d023      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0x8a>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b80      	cmp	r3, #128	@ 0x80
 800680e:	d020      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b40      	cmp	r3, #64	@ 0x40
 8006814:	d01d      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b08      	cmp	r3, #8
 8006822:	d116      	bne.n	8006852 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	617b      	str	r3, [r7, #20]
 8006838:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 f81d 	bl	800687a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2208      	movs	r2, #8
 8006844:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e00f      	b.n	8006872 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4013      	ands	r3, r2
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	bf0c      	ite	eq
 8006862:	2301      	moveq	r3, #1
 8006864:	2300      	movne	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	429a      	cmp	r2, r3
 800686e:	d0b4      	beq.n	80067da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800687a:	b480      	push	{r7}
 800687c:	b095      	sub	sp, #84	@ 0x54
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	330c      	adds	r3, #12
 8006888:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	330c      	adds	r3, #12
 80068a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80068a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e5      	bne.n	8006882 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3314      	adds	r3, #20
 80068bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3314      	adds	r3, #20
 80068d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e5      	bne.n	80068b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d119      	bne.n	8006926 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	60bb      	str	r3, [r7, #8]
   return(result);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f023 0310 	bic.w	r3, r3, #16
 8006908:	647b      	str	r3, [r7, #68]	@ 0x44
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	330c      	adds	r3, #12
 8006910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006912:	61ba      	str	r2, [r7, #24]
 8006914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	6979      	ldr	r1, [r7, #20]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	613b      	str	r3, [r7, #16]
   return(result);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e5      	bne.n	80068f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2220      	movs	r2, #32
 800692a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006934:	bf00      	nop
 8006936:	3754      	adds	r7, #84	@ 0x54
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr
	...

08006940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800697a:	f023 030c 	bic.w	r3, r3, #12
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6812      	ldr	r2, [r2, #0]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	430b      	orrs	r3, r1
 8006986:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699a      	ldr	r2, [r3, #24]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006a54 <UART_SetConfig+0x114>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d103      	bne.n	80069b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069a8:	f7ff f8ce 	bl	8005b48 <HAL_RCC_GetPCLK2Freq>
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	e002      	b.n	80069b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069b0:	f7ff f8b6 	bl	8005b20 <HAL_RCC_GetPCLK1Freq>
 80069b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4613      	mov	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	009a      	lsls	r2, r3, #2
 80069c0:	441a      	add	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069cc:	4a22      	ldr	r2, [pc, #136]	@ (8006a58 <UART_SetConfig+0x118>)
 80069ce:	fba2 2303 	umull	r2, r3, r2, r3
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	0119      	lsls	r1, r3, #4
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	009a      	lsls	r2, r3, #2
 80069e0:	441a      	add	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80069ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006a58 <UART_SetConfig+0x118>)
 80069ee:	fba3 0302 	umull	r0, r3, r3, r2
 80069f2:	095b      	lsrs	r3, r3, #5
 80069f4:	2064      	movs	r0, #100	@ 0x64
 80069f6:	fb00 f303 	mul.w	r3, r0, r3
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	3332      	adds	r3, #50	@ 0x32
 8006a00:	4a15      	ldr	r2, [pc, #84]	@ (8006a58 <UART_SetConfig+0x118>)
 8006a02:	fba2 2303 	umull	r2, r3, r2, r3
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a0c:	4419      	add	r1, r3
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4613      	mov	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4413      	add	r3, r2
 8006a16:	009a      	lsls	r2, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a24:	4b0c      	ldr	r3, [pc, #48]	@ (8006a58 <UART_SetConfig+0x118>)
 8006a26:	fba3 0302 	umull	r0, r3, r3, r2
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	2064      	movs	r0, #100	@ 0x64
 8006a2e:	fb00 f303 	mul.w	r3, r0, r3
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	3332      	adds	r3, #50	@ 0x32
 8006a38:	4a07      	ldr	r2, [pc, #28]	@ (8006a58 <UART_SetConfig+0x118>)
 8006a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	f003 020f 	and.w	r2, r3, #15
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	440a      	add	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40013800 	.word	0x40013800
 8006a58:	51eb851f 	.word	0x51eb851f

08006a5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	4638      	mov	r0, r7
 8006a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bc80      	pop	{r7}
 8006a74:	4770      	bx	lr

08006a76 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006a86:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006a8a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr

08006aa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006aaa:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006aae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	43db      	mvns	r3, r3
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr

08006ad6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bc80      	pop	{r7}
 8006aec:	4770      	bx	lr

08006aee <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b085      	sub	sp, #20
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	4638      	mov	r0, r7
 8006af8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bc80      	pop	{r7}
 8006b26:	4770      	bx	lr

08006b28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b09d      	sub	sp, #116	@ 0x74
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b4e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	78db      	ldrb	r3, [r3, #3]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d81f      	bhi.n	8006b9a <USB_ActivateEndpoint+0x72>
 8006b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <USB_ActivateEndpoint+0x38>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b71 	.word	0x08006b71
 8006b64:	08006b8d 	.word	0x08006b8d
 8006b68:	08006ba3 	.word	0x08006ba3
 8006b6c:	08006b7f 	.word	0x08006b7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006b70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006b7c:	e012      	b.n	8006ba4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006b7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b82:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006b86:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006b8a:	e00b      	b.n	8006ba4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006b8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006b90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006b94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006b98:	e004      	b.n	8006ba4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006ba0:	e000      	b.n	8006ba4 <USB_ActivateEndpoint+0x7c>
      break;
 8006ba2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	441a      	add	r2, r3
 8006bae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006bb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	7812      	ldrb	r2, [r2, #0]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	441a      	add	r2, r3
 8006bf2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	7b1b      	ldrb	r3, [r3, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f040 8178 	bne.w	8006f04 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 8084 	beq.w	8006d26 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	61bb      	str	r3, [r7, #24]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	4413      	add	r3, r2
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	011a      	lsls	r2, r3, #4
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	88db      	ldrh	r3, [r3, #6]
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	827b      	strh	r3, [r7, #18]
 8006c60:	8a7b      	ldrh	r3, [r7, #18]
 8006c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d01b      	beq.n	8006ca2 <USB_ActivateEndpoint+0x17a>
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c80:	823b      	strh	r3, [r7, #16]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	441a      	add	r2, r3
 8006c8c:	8a3b      	ldrh	r3, [r7, #16]
 8006c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	78db      	ldrb	r3, [r3, #3]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d020      	beq.n	8006cec <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	881b      	ldrh	r3, [r3, #0]
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cc0:	81bb      	strh	r3, [r7, #12]
 8006cc2:	89bb      	ldrh	r3, [r7, #12]
 8006cc4:	f083 0320 	eor.w	r3, r3, #32
 8006cc8:	81bb      	strh	r3, [r7, #12]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	441a      	add	r2, r3
 8006cd4:	89bb      	ldrh	r3, [r7, #12]
 8006cd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	8013      	strh	r3, [r2, #0]
 8006cea:	e2d5      	b.n	8007298 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d02:	81fb      	strh	r3, [r7, #14]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	441a      	add	r2, r3
 8006d0e:	89fb      	ldrh	r3, [r7, #14]
 8006d10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	8013      	strh	r3, [r2, #0]
 8006d24:	e2b8      	b.n	8007298 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	461a      	mov	r2, r3
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	4413      	add	r3, r2
 8006d38:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	011a      	lsls	r2, r3, #4
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	88db      	ldrh	r3, [r3, #6]
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d58:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	461a      	mov	r2, r3
 8006d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6a:	4413      	add	r3, r2
 8006d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	011a      	lsls	r2, r3, #4
 8006d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d76:	4413      	add	r3, r2
 8006d78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	801a      	strh	r2, [r3, #0]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d94:	d91d      	bls.n	8006dd2 <USB_ActivateEndpoint+0x2aa>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d102      	bne.n	8006db0 <USB_ActivateEndpoint+0x288>
 8006daa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dac:	3b01      	subs	r3, #1
 8006dae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	029b      	lsls	r3, r3, #10
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dce:	801a      	strh	r2, [r3, #0]
 8006dd0:	e026      	b.n	8006e20 <USB_ActivateEndpoint+0x2f8>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <USB_ActivateEndpoint+0x2c8>
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	e017      	b.n	8006e20 <USB_ActivateEndpoint+0x2f8>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	085b      	lsrs	r3, r3, #1
 8006df6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <USB_ActivateEndpoint+0x2e2>
 8006e04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e06:	3301      	adds	r3, #1
 8006e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	029b      	lsls	r3, r3, #10
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006e2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006e30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01b      	beq.n	8006e70 <USB_ActivateEndpoint+0x348>
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e4e:	843b      	strh	r3, [r7, #32]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	441a      	add	r2, r3
 8006e5a:	8c3b      	ldrh	r3, [r7, #32]
 8006e5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d124      	bne.n	8006ec2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e8e:	83bb      	strh	r3, [r7, #28]
 8006e90:	8bbb      	ldrh	r3, [r7, #28]
 8006e92:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006e96:	83bb      	strh	r3, [r7, #28]
 8006e98:	8bbb      	ldrh	r3, [r7, #28]
 8006e9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006e9e:	83bb      	strh	r3, [r7, #28]
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	441a      	add	r2, r3
 8006eaa:	8bbb      	ldrh	r3, [r7, #28]
 8006eac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006eb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	8013      	strh	r3, [r2, #0]
 8006ec0:	e1ea      	b.n	8007298 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4413      	add	r3, r2
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed8:	83fb      	strh	r3, [r7, #30]
 8006eda:	8bfb      	ldrh	r3, [r7, #30]
 8006edc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ee0:	83fb      	strh	r3, [r7, #30]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	441a      	add	r2, r3
 8006eec:	8bfb      	ldrh	r3, [r7, #30]
 8006eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	8013      	strh	r3, [r2, #0]
 8006f02:	e1c9      	b.n	8007298 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	78db      	ldrb	r3, [r3, #3]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d11e      	bne.n	8006f4a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f22:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	441a      	add	r2, r3
 8006f30:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006f34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f3c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	8013      	strh	r3, [r2, #0]
 8006f48:	e01d      	b.n	8006f86 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f60:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f96:	4413      	add	r3, r2
 8006f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	011a      	lsls	r2, r3, #4
 8006fa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	891b      	ldrh	r3, [r3, #8]
 8006fae:	085b      	lsrs	r3, r3, #1
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fb8:	801a      	strh	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fca:	4413      	add	r3, r2
 8006fcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	011a      	lsls	r2, r3, #4
 8006fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006fdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	895b      	ldrh	r3, [r3, #10]
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fec:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	785b      	ldrb	r3, [r3, #1]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f040 8093 	bne.w	800711e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8007008:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800700c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d01b      	beq.n	800704c <USB_ActivateEndpoint+0x524>
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	b29b      	uxth	r3, r3
 8007022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800702a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	441a      	add	r2, r3
 8007036:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800703c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007040:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007048:	b29b      	uxth	r3, r3
 800704a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800705a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800705c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01b      	beq.n	800709c <USB_ActivateEndpoint+0x574>
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	b29b      	uxth	r3, r3
 8007072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800707a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	441a      	add	r2, r3
 8007086:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800708c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007094:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007098:	b29b      	uxth	r3, r3
 800709a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070b2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80070b4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80070b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80070ba:	873b      	strh	r3, [r7, #56]	@ 0x38
 80070bc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80070be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80070c2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	441a      	add	r2, r3
 80070ce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80070d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	441a      	add	r2, r3
 8007106:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007108:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800710c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007118:	b29b      	uxth	r3, r3
 800711a:	8013      	strh	r3, [r2, #0]
 800711c:	e0bc      	b.n	8007298 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800712e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d01d      	beq.n	8007176 <USB_ActivateEndpoint+0x64e>
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	b29b      	uxth	r3, r3
 8007148:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800714c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007150:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	441a      	add	r2, r3
 800715e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800716a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800716e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007172:	b29b      	uxth	r3, r3
 8007174:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007186:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800718a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800718e:	2b00      	cmp	r3, #0
 8007190:	d01d      	beq.n	80071ce <USB_ActivateEndpoint+0x6a6>
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071a8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	441a      	add	r2, r3
 80071b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80071ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	78db      	ldrb	r3, [r3, #3]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d024      	beq.n	8007220 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071ec:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80071f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80071f4:	f083 0320 	eor.w	r3, r3, #32
 80071f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	441a      	add	r2, r3
 8007206:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800720a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800720e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800721a:	b29b      	uxth	r3, r3
 800721c:	8013      	strh	r3, [r2, #0]
 800721e:	e01d      	b.n	800725c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007236:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	441a      	add	r2, r3
 8007244:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007248:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800724c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007258:	b29b      	uxth	r3, r3
 800725a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	4413      	add	r3, r2
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	b29b      	uxth	r3, r3
 800726a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800726e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007272:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	441a      	add	r2, r3
 8007280:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007284:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007288:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800728c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007294:	b29b      	uxth	r3, r3
 8007296:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007298:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800729c:	4618      	mov	r0, r3
 800729e:	3774      	adds	r7, #116	@ 0x74
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bc80      	pop	{r7}
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop

080072a8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b08d      	sub	sp, #52	@ 0x34
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	7b1b      	ldrb	r3, [r3, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f040 808e 	bne.w	80073d8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	785b      	ldrb	r3, [r3, #1]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d044      	beq.n	800734e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	81bb      	strh	r3, [r7, #12]
 80072d2:	89bb      	ldrh	r3, [r7, #12]
 80072d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01b      	beq.n	8007314 <USB_DeactivateEndpoint+0x6c>
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072f2:	817b      	strh	r3, [r7, #10]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	441a      	add	r2, r3
 80072fe:	897b      	ldrh	r3, [r7, #10]
 8007300:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007304:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800730c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007310:	b29b      	uxth	r3, r3
 8007312:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	b29b      	uxth	r3, r3
 8007322:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007326:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800732a:	813b      	strh	r3, [r7, #8]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	441a      	add	r2, r3
 8007336:	893b      	ldrh	r3, [r7, #8]
 8007338:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800733c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007340:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007348:	b29b      	uxth	r3, r3
 800734a:	8013      	strh	r3, [r2, #0]
 800734c:	e192      	b.n	8007674 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	827b      	strh	r3, [r7, #18]
 800735c:	8a7b      	ldrh	r3, [r7, #18]
 800735e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d01b      	beq.n	800739e <USB_DeactivateEndpoint+0xf6>
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	b29b      	uxth	r3, r3
 8007374:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800737c:	823b      	strh	r3, [r7, #16]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	441a      	add	r2, r3
 8007388:	8a3b      	ldrh	r3, [r7, #16]
 800738a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800738e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007392:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800739a:	b29b      	uxth	r3, r3
 800739c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073b4:	81fb      	strh	r3, [r7, #14]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	441a      	add	r2, r3
 80073c0:	89fb      	ldrh	r3, [r7, #14]
 80073c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	8013      	strh	r3, [r2, #0]
 80073d6:	e14d      	b.n	8007674 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f040 80a5 	bne.w	800752c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	843b      	strh	r3, [r7, #32]
 80073f0:	8c3b      	ldrh	r3, [r7, #32]
 80073f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d01b      	beq.n	8007432 <USB_DeactivateEndpoint+0x18a>
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	b29b      	uxth	r3, r3
 8007408:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800740c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007410:	83fb      	strh	r3, [r7, #30]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	441a      	add	r2, r3
 800741c:	8bfb      	ldrh	r3, [r7, #30]
 800741e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007426:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800742a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800742e:	b29b      	uxth	r3, r3
 8007430:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	83bb      	strh	r3, [r7, #28]
 8007440:	8bbb      	ldrh	r3, [r7, #28]
 8007442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007446:	2b00      	cmp	r3, #0
 8007448:	d01b      	beq.n	8007482 <USB_DeactivateEndpoint+0x1da>
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800745c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007460:	837b      	strh	r3, [r7, #26]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	441a      	add	r2, r3
 800746c:	8b7b      	ldrh	r3, [r7, #26]
 800746e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800747a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800747e:	b29b      	uxth	r3, r3
 8007480:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b29b      	uxth	r3, r3
 8007490:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007498:	833b      	strh	r3, [r7, #24]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	441a      	add	r2, r3
 80074a4:	8b3b      	ldrh	r3, [r7, #24]
 80074a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074d0:	82fb      	strh	r3, [r7, #22]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	441a      	add	r2, r3
 80074dc:	8afb      	ldrh	r3, [r7, #22]
 80074de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007508:	82bb      	strh	r3, [r7, #20]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	441a      	add	r2, r3
 8007514:	8abb      	ldrh	r3, [r7, #20]
 8007516:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800751a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800751e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007526:	b29b      	uxth	r3, r3
 8007528:	8013      	strh	r3, [r2, #0]
 800752a:	e0a3      	b.n	8007674 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800753a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800753c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01b      	beq.n	800757c <USB_DeactivateEndpoint+0x2d4>
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	b29b      	uxth	r3, r3
 8007552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	441a      	add	r2, r3
 8007566:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800756c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007578:	b29b      	uxth	r3, r3
 800757a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800758a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800758c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01b      	beq.n	80075cc <USB_DeactivateEndpoint+0x324>
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	441a      	add	r2, r3
 80075b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80075b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	441a      	add	r2, r3
 80075ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80075f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80075fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007600:	b29b      	uxth	r3, r3
 8007602:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	4413      	add	r3, r2
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	b29b      	uxth	r3, r3
 8007612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800761a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	441a      	add	r2, r3
 8007626:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007628:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800762c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007638:	b29b      	uxth	r3, r3
 800763a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	b29b      	uxth	r3, r3
 800764a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800764e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007652:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	441a      	add	r2, r3
 800765e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007660:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007664:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800766c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007670:	b29b      	uxth	r3, r3
 8007672:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3734      	adds	r7, #52	@ 0x34
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr

08007680 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b0c2      	sub	sp, #264	@ 0x108
 8007684:	af00      	add	r7, sp, #0
 8007686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800768e:	6018      	str	r0, [r3, #0]
 8007690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007698:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800769a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	785b      	ldrb	r3, [r3, #1]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	f040 86b7 	bne.w	800841a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80076ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	699a      	ldr	r2, [r3, #24]
 80076b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d908      	bls.n	80076da <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80076c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80076d8:	e007      	b.n	80076ea <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80076da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80076ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	7b1b      	ldrb	r3, [r3, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d13a      	bne.n	8007770 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80076fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6959      	ldr	r1, [r3, #20]
 8007706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	88da      	ldrh	r2, [r3, #6]
 8007712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007716:	b29b      	uxth	r3, r3
 8007718:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800771c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007720:	6800      	ldr	r0, [r0, #0]
 8007722:	f001 fc9c 	bl	800905e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007736:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007740:	b29b      	uxth	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	4413      	add	r3, r2
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	011a      	lsls	r2, r3, #4
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	4413      	add	r3, r2
 800775c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007766:	b29a      	uxth	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	801a      	strh	r2, [r3, #0]
 800776c:	f000 be1f 	b.w	80083ae <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	78db      	ldrb	r3, [r3, #3]
 800777c:	2b02      	cmp	r3, #2
 800777e:	f040 8462 	bne.w	8008046 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	6a1a      	ldr	r2, [r3, #32]
 800778e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	429a      	cmp	r2, r3
 800779c:	f240 83df 	bls.w	8007f5e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80077a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077c6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	441a      	add	r2, r3
 80077e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80077e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077f0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80077f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80077fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	6a1a      	ldr	r2, [r3, #32]
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780c:	1ad2      	subs	r2, r2, r3
 800780e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007812:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800781a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	881b      	ldrh	r3, [r3, #0]
 8007836:	b29b      	uxth	r3, r3
 8007838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 81c7 	beq.w	8007bd0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007846:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	633b      	str	r3, [r7, #48]	@ 0x30
 800784e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d177      	bne.n	800794e <USB_EPStartXfer+0x2ce>
 800785e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800786a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007878:	b29b      	uxth	r3, r3
 800787a:	461a      	mov	r2, r3
 800787c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787e:	4413      	add	r3, r2
 8007880:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	011a      	lsls	r2, r3, #4
 8007890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007892:	4413      	add	r3, r2
 8007894:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007898:	627b      	str	r3, [r7, #36]	@ 0x24
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80078b0:	d921      	bls.n	80078f6 <USB_EPStartXfer+0x276>
 80078b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b6:	095b      	lsrs	r3, r3, #5
 80078b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80078bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078c0:	f003 031f 	and.w	r3, r3, #31
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <USB_EPStartXfer+0x252>
 80078c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80078cc:	3b01      	subs	r3, #1
 80078ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80078dc:	b29b      	uxth	r3, r3
 80078de:	029b      	lsls	r3, r3, #10
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	4313      	orrs	r3, r2
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	e050      	b.n	8007998 <USB_EPStartXfer+0x318>
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <USB_EPStartXfer+0x294>
 80078fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800790c:	b29a      	uxth	r2, r3
 800790e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007910:	801a      	strh	r2, [r3, #0]
 8007912:	e041      	b.n	8007998 <USB_EPStartXfer+0x318>
 8007914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007918:	085b      	lsrs	r3, r3, #1
 800791a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800791e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d004      	beq.n	8007934 <USB_EPStartXfer+0x2b4>
 800792a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800792e:	3301      	adds	r3, #1
 8007930:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	b29a      	uxth	r2, r3
 800793a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800793e:	b29b      	uxth	r3, r3
 8007940:	029b      	lsls	r3, r3, #10
 8007942:	b29b      	uxth	r3, r3
 8007944:	4313      	orrs	r3, r2
 8007946:	b29a      	uxth	r2, r3
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	801a      	strh	r2, [r3, #0]
 800794c:	e024      	b.n	8007998 <USB_EPStartXfer+0x318>
 800794e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	785b      	ldrb	r3, [r3, #1]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d11c      	bne.n	8007998 <USB_EPStartXfer+0x318>
 800795e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800796c:	b29b      	uxth	r3, r3
 800796e:	461a      	mov	r2, r3
 8007970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007972:	4413      	add	r3, r2
 8007974:	633b      	str	r3, [r7, #48]	@ 0x30
 8007976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	011a      	lsls	r2, r3, #4
 8007984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007986:	4413      	add	r3, r2
 8007988:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800798c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800798e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007992:	b29a      	uxth	r2, r3
 8007994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007996:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	895b      	ldrh	r3, [r3, #10]
 80079a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6959      	ldr	r1, [r3, #20]
 80079b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80079be:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80079c2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80079c6:	6800      	ldr	r0, [r0, #0]
 80079c8:	f001 fb49 	bl	800905e <USB_WritePMA>
            ep->xfer_buff += len;
 80079cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695a      	ldr	r2, [r3, #20]
 80079d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079dc:	441a      	add	r2, r3
 80079de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80079ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6a1a      	ldr	r2, [r3, #32]
 80079f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d90f      	bls.n	8007a26 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6a1a      	ldr	r2, [r3, #32]
 8007a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a16:	1ad2      	subs	r2, r2, r3
 8007a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	621a      	str	r2, [r3, #32]
 8007a24:	e00e      	b.n	8007a44 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2200      	movs	r2, #0
 8007a42:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	785b      	ldrb	r3, [r3, #1]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d177      	bne.n	8007b44 <USB_EPStartXfer+0x4c4>
 8007a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	61bb      	str	r3, [r7, #24]
 8007a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	4413      	add	r3, r2
 8007a76:	61bb      	str	r3, [r7, #24]
 8007a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	011a      	lsls	r2, r3, #4
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	801a      	strh	r2, [r3, #0]
 8007aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007aa6:	d921      	bls.n	8007aec <USB_EPStartXfer+0x46c>
 8007aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aac:	095b      	lsrs	r3, r3, #5
 8007aae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d104      	bne.n	8007ac8 <USB_EPStartXfer+0x448>
 8007abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	029b      	lsls	r3, r3, #10
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	801a      	strh	r2, [r3, #0]
 8007aea:	e056      	b.n	8007b9a <USB_EPStartXfer+0x51a>
 8007aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <USB_EPStartXfer+0x48a>
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	801a      	strh	r2, [r3, #0]
 8007b08:	e047      	b.n	8007b9a <USB_EPStartXfer+0x51a>
 8007b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0e:	085b      	lsrs	r3, r3, #1
 8007b10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d004      	beq.n	8007b2a <USB_EPStartXfer+0x4aa>
 8007b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b24:	3301      	adds	r3, #1
 8007b26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	029b      	lsls	r3, r3, #10
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	801a      	strh	r2, [r3, #0]
 8007b42:	e02a      	b.n	8007b9a <USB_EPStartXfer+0x51a>
 8007b44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	785b      	ldrb	r3, [r3, #1]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d122      	bne.n	8007b9a <USB_EPStartXfer+0x51a>
 8007b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	623b      	str	r3, [r7, #32]
 8007b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	461a      	mov	r2, r3
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	4413      	add	r3, r2
 8007b76:	623b      	str	r3, [r7, #32]
 8007b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	011a      	lsls	r2, r3, #4
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b8e:	61fb      	str	r3, [r7, #28]
 8007b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	891b      	ldrh	r3, [r3, #8]
 8007ba6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6959      	ldr	r1, [r3, #20]
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007bc0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007bc4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007bc8:	6800      	ldr	r0, [r0, #0]
 8007bca:	f001 fa48 	bl	800905e <USB_WritePMA>
 8007bce:	e3ee      	b.n	80083ae <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	785b      	ldrb	r3, [r3, #1]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d177      	bne.n	8007cd0 <USB_EPStartXfer+0x650>
 8007be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c00:	4413      	add	r3, r2
 8007c02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	011a      	lsls	r2, r3, #4
 8007c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c14:	4413      	add	r3, r2
 8007c16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c30:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c32:	d921      	bls.n	8007c78 <USB_EPStartXfer+0x5f8>
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c38:	095b      	lsrs	r3, r3, #5
 8007c3a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c42:	f003 031f 	and.w	r3, r3, #31
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d104      	bne.n	8007c54 <USB_EPStartXfer+0x5d4>
 8007c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	029b      	lsls	r3, r3, #10
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	4313      	orrs	r3, r2
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c74:	801a      	strh	r2, [r3, #0]
 8007c76:	e056      	b.n	8007d26 <USB_EPStartXfer+0x6a6>
 8007c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <USB_EPStartXfer+0x616>
 8007c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c92:	801a      	strh	r2, [r3, #0]
 8007c94:	e047      	b.n	8007d26 <USB_EPStartXfer+0x6a6>
 8007c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9a:	085b      	lsrs	r3, r3, #1
 8007c9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <USB_EPStartXfer+0x636>
 8007cac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007cb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	b29a      	uxth	r2, r3
 8007cbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	029b      	lsls	r3, r3, #10
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ccc:	801a      	strh	r2, [r3, #0]
 8007cce:	e02a      	b.n	8007d26 <USB_EPStartXfer+0x6a6>
 8007cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d122      	bne.n	8007d26 <USB_EPStartXfer+0x6a6>
 8007ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d00:	4413      	add	r3, r2
 8007d02:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	011a      	lsls	r2, r3, #4
 8007d12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d14:	4413      	add	r3, r2
 8007d16:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	891b      	ldrh	r3, [r3, #8]
 8007d32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6959      	ldr	r1, [r3, #20]
 8007d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007d4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007d50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007d54:	6800      	ldr	r0, [r0, #0]
 8007d56:	f001 f982 	bl	800905e <USB_WritePMA>
            ep->xfer_buff += len;
 8007d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	695a      	ldr	r2, [r3, #20]
 8007d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d6a:	441a      	add	r2, r3
 8007d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6a1a      	ldr	r2, [r3, #32]
 8007d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d90f      	bls.n	8007db4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6a1a      	ldr	r2, [r3, #32]
 8007da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da4:	1ad2      	subs	r2, r2, r3
 8007da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	621a      	str	r2, [r3, #32]
 8007db2:	e00e      	b.n	8007dd2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	785b      	ldrb	r3, [r3, #1]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d177      	bne.n	8007ede <USB_EPStartXfer+0x85e>
 8007dee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0e:	4413      	add	r3, r2
 8007e10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	011a      	lsls	r2, r3, #4
 8007e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e22:	4413      	add	r3, r2
 8007e24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e38:	801a      	strh	r2, [r3, #0]
 8007e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e40:	d921      	bls.n	8007e86 <USB_EPStartXfer+0x806>
 8007e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e46:	095b      	lsrs	r3, r3, #5
 8007e48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e50:	f003 031f 	and.w	r3, r3, #31
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d104      	bne.n	8007e62 <USB_EPStartXfer+0x7e2>
 8007e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	029b      	lsls	r3, r3, #10
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	4313      	orrs	r3, r2
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e82:	801a      	strh	r2, [r3, #0]
 8007e84:	e050      	b.n	8007f28 <USB_EPStartXfer+0x8a8>
 8007e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <USB_EPStartXfer+0x824>
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea0:	801a      	strh	r2, [r3, #0]
 8007ea2:	e041      	b.n	8007f28 <USB_EPStartXfer+0x8a8>
 8007ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <USB_EPStartXfer+0x844>
 8007eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	029b      	lsls	r3, r3, #10
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eda:	801a      	strh	r2, [r3, #0]
 8007edc:	e024      	b.n	8007f28 <USB_EPStartXfer+0x8a8>
 8007ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	785b      	ldrb	r3, [r3, #1]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d11c      	bne.n	8007f28 <USB_EPStartXfer+0x8a8>
 8007eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	461a      	mov	r2, r3
 8007f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f02:	4413      	add	r3, r2
 8007f04:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	011a      	lsls	r2, r3, #4
 8007f14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f16:	4413      	add	r3, r2
 8007f18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	895b      	ldrh	r3, [r3, #10]
 8007f34:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6959      	ldr	r1, [r3, #20]
 8007f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007f4e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007f52:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007f56:	6800      	ldr	r0, [r0, #0]
 8007f58:	f001 f881 	bl	800905e <USB_WritePMA>
 8007f5c:	e227      	b.n	80083ae <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f94:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	441a      	add	r2, r3
 8007fb2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fea:	4413      	add	r3, r2
 8007fec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	011a      	lsls	r2, r3, #4
 8007ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ffe:	4413      	add	r3, r2
 8008000:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008004:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800a:	b29a      	uxth	r2, r3
 800800c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800800e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	891b      	ldrh	r3, [r3, #8]
 800801c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6959      	ldr	r1, [r3, #20]
 800802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008030:	b29b      	uxth	r3, r3
 8008032:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008036:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800803a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800803e:	6800      	ldr	r0, [r0, #0]
 8008040:	f001 f80d 	bl	800905e <USB_WritePMA>
 8008044:	e1b3      	b.n	80083ae <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6a1a      	ldr	r2, [r3, #32]
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008056:	1ad2      	subs	r2, r2, r3
 8008058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008068:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	b29b      	uxth	r3, r3
 8008082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 80c6 	beq.w	8008218 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800808c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008090:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	673b      	str	r3, [r7, #112]	@ 0x70
 8008098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	785b      	ldrb	r3, [r3, #1]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d177      	bne.n	8008198 <USB_EPStartXfer+0xb18>
 80080a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	461a      	mov	r2, r3
 80080c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080c8:	4413      	add	r3, r2
 80080ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	011a      	lsls	r2, r3, #4
 80080da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080dc:	4413      	add	r3, r2
 80080de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80080e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80080e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080e6:	881b      	ldrh	r3, [r3, #0]
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080f2:	801a      	strh	r2, [r3, #0]
 80080f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80080f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80080fa:	d921      	bls.n	8008140 <USB_EPStartXfer+0xac0>
 80080fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008100:	095b      	lsrs	r3, r3, #5
 8008102:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	2b00      	cmp	r3, #0
 8008110:	d104      	bne.n	800811c <USB_EPStartXfer+0xa9c>
 8008112:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008116:	3b01      	subs	r3, #1
 8008118:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800811c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800811e:	881b      	ldrh	r3, [r3, #0]
 8008120:	b29a      	uxth	r2, r3
 8008122:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008126:	b29b      	uxth	r3, r3
 8008128:	029b      	lsls	r3, r3, #10
 800812a:	b29b      	uxth	r3, r3
 800812c:	4313      	orrs	r3, r2
 800812e:	b29b      	uxth	r3, r3
 8008130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008138:	b29a      	uxth	r2, r3
 800813a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800813c:	801a      	strh	r2, [r3, #0]
 800813e:	e050      	b.n	80081e2 <USB_EPStartXfer+0xb62>
 8008140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10a      	bne.n	800815e <USB_EPStartXfer+0xade>
 8008148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800814a:	881b      	ldrh	r3, [r3, #0]
 800814c:	b29b      	uxth	r3, r3
 800814e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008156:	b29a      	uxth	r2, r3
 8008158:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800815a:	801a      	strh	r2, [r3, #0]
 800815c:	e041      	b.n	80081e2 <USB_EPStartXfer+0xb62>
 800815e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008162:	085b      	lsrs	r3, r3, #1
 8008164:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <USB_EPStartXfer+0xafe>
 8008174:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008178:	3301      	adds	r3, #1
 800817a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800817e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	b29a      	uxth	r2, r3
 8008184:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008188:	b29b      	uxth	r3, r3
 800818a:	029b      	lsls	r3, r3, #10
 800818c:	b29b      	uxth	r3, r3
 800818e:	4313      	orrs	r3, r2
 8008190:	b29a      	uxth	r2, r3
 8008192:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008194:	801a      	strh	r2, [r3, #0]
 8008196:	e024      	b.n	80081e2 <USB_EPStartXfer+0xb62>
 8008198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800819c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	785b      	ldrb	r3, [r3, #1]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d11c      	bne.n	80081e2 <USB_EPStartXfer+0xb62>
 80081a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	461a      	mov	r2, r3
 80081ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081bc:	4413      	add	r3, r2
 80081be:	673b      	str	r3, [r7, #112]	@ 0x70
 80081c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	011a      	lsls	r2, r3, #4
 80081ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081d0:	4413      	add	r3, r2
 80081d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081dc:	b29a      	uxth	r2, r3
 80081de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80081e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	895b      	ldrh	r3, [r3, #10]
 80081ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6959      	ldr	r1, [r3, #20]
 80081fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008202:	b29b      	uxth	r3, r3
 8008204:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008208:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800820c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008210:	6800      	ldr	r0, [r0, #0]
 8008212:	f000 ff24 	bl	800905e <USB_WritePMA>
 8008216:	e0ca      	b.n	80083ae <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800821c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	785b      	ldrb	r3, [r3, #1]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d177      	bne.n	8008318 <USB_EPStartXfer+0xc98>
 8008228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800822c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008238:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008242:	b29b      	uxth	r3, r3
 8008244:	461a      	mov	r2, r3
 8008246:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008248:	4413      	add	r3, r2
 800824a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800824c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	011a      	lsls	r2, r3, #4
 800825a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800825c:	4413      	add	r3, r2
 800825e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008262:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	b29b      	uxth	r3, r3
 800826a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800826e:	b29a      	uxth	r2, r3
 8008270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008272:	801a      	strh	r2, [r3, #0]
 8008274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008278:	2b3e      	cmp	r3, #62	@ 0x3e
 800827a:	d921      	bls.n	80082c0 <USB_EPStartXfer+0xc40>
 800827c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008280:	095b      	lsrs	r3, r3, #5
 8008282:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800828a:	f003 031f 	and.w	r3, r3, #31
 800828e:	2b00      	cmp	r3, #0
 8008290:	d104      	bne.n	800829c <USB_EPStartXfer+0xc1c>
 8008292:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008296:	3b01      	subs	r3, #1
 8008298:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800829c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	029b      	lsls	r3, r3, #10
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	4313      	orrs	r3, r2
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082bc:	801a      	strh	r2, [r3, #0]
 80082be:	e05c      	b.n	800837a <USB_EPStartXfer+0xcfa>
 80082c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10a      	bne.n	80082de <USB_EPStartXfer+0xc5e>
 80082c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082ca:	881b      	ldrh	r3, [r3, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082da:	801a      	strh	r2, [r3, #0]
 80082dc:	e04d      	b.n	800837a <USB_EPStartXfer+0xcfa>
 80082de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082e2:	085b      	lsrs	r3, r3, #1
 80082e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d004      	beq.n	80082fe <USB_EPStartXfer+0xc7e>
 80082f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80082f8:	3301      	adds	r3, #1
 80082fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	b29a      	uxth	r2, r3
 8008304:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008308:	b29b      	uxth	r3, r3
 800830a:	029b      	lsls	r3, r3, #10
 800830c:	b29b      	uxth	r3, r3
 800830e:	4313      	orrs	r3, r2
 8008310:	b29a      	uxth	r2, r3
 8008312:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008314:	801a      	strh	r2, [r3, #0]
 8008316:	e030      	b.n	800837a <USB_EPStartXfer+0xcfa>
 8008318:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800831c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d128      	bne.n	800837a <USB_EPStartXfer+0xcfa>
 8008328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800833a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008344:	b29b      	uxth	r3, r3
 8008346:	461a      	mov	r2, r3
 8008348:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800834c:	4413      	add	r3, r2
 800834e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	011a      	lsls	r2, r3, #4
 8008360:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008364:	4413      	add	r3, r2
 8008366:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800836a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800836e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008372:	b29a      	uxth	r2, r3
 8008374:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008378:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800837a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	891b      	ldrh	r3, [r3, #8]
 8008386:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800838a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800838e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6959      	ldr	r1, [r3, #20]
 8008396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800839a:	b29b      	uxth	r3, r3
 800839c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80083a0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80083a4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80083a8:	6800      	ldr	r0, [r0, #0]
 80083aa:	f000 fe58 	bl	800905e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80083ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083d4:	817b      	strh	r3, [r7, #10]
 80083d6:	897b      	ldrh	r3, [r7, #10]
 80083d8:	f083 0310 	eor.w	r3, r3, #16
 80083dc:	817b      	strh	r3, [r7, #10]
 80083de:	897b      	ldrh	r3, [r7, #10]
 80083e0:	f083 0320 	eor.w	r3, r3, #32
 80083e4:	817b      	strh	r3, [r7, #10]
 80083e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	441a      	add	r2, r3
 8008400:	897b      	ldrh	r3, [r7, #10]
 8008402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800840a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800840e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008412:	b29b      	uxth	r3, r3
 8008414:	8013      	strh	r3, [r2, #0]
 8008416:	f000 bcde 	b.w	8008dd6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800841a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800841e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	7b1b      	ldrb	r3, [r3, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	f040 80bb 	bne.w	80085a2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800842c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	699a      	ldr	r2, [r3, #24]
 8008438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800843c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	429a      	cmp	r2, r3
 8008446:	d917      	bls.n	8008478 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800844c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800845c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	699a      	ldr	r2, [r3, #24]
 8008464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008468:	1ad2      	subs	r2, r2, r3
 800846a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800846e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	619a      	str	r2, [r3, #24]
 8008476:	e00e      	b.n	8008496 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800848c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2200      	movs	r2, #0
 8008494:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800849a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	461a      	mov	r2, r3
 80084b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80084ba:	4413      	add	r3, r2
 80084bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	011a      	lsls	r2, r3, #4
 80084ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80084d2:	4413      	add	r3, r2
 80084d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80084d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80084dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084ee:	801a      	strh	r2, [r3, #0]
 80084f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80084f6:	d924      	bls.n	8008542 <USB_EPStartXfer+0xec2>
 80084f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084fc:	095b      	lsrs	r3, r3, #5
 80084fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008506:	f003 031f 	and.w	r3, r3, #31
 800850a:	2b00      	cmp	r3, #0
 800850c:	d104      	bne.n	8008518 <USB_EPStartXfer+0xe98>
 800850e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008512:	3b01      	subs	r3, #1
 8008514:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008518:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	b29a      	uxth	r2, r3
 8008520:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008524:	b29b      	uxth	r3, r3
 8008526:	029b      	lsls	r3, r3, #10
 8008528:	b29b      	uxth	r3, r3
 800852a:	4313      	orrs	r3, r2
 800852c:	b29b      	uxth	r3, r3
 800852e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008536:	b29a      	uxth	r2, r3
 8008538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800853c:	801a      	strh	r2, [r3, #0]
 800853e:	f000 bc10 	b.w	8008d62 <USB_EPStartXfer+0x16e2>
 8008542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10c      	bne.n	8008564 <USB_EPStartXfer+0xee4>
 800854a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800855a:	b29a      	uxth	r2, r3
 800855c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008560:	801a      	strh	r2, [r3, #0]
 8008562:	e3fe      	b.n	8008d62 <USB_EPStartXfer+0x16e2>
 8008564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008568:	085b      	lsrs	r3, r3, #1
 800856a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800856e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d004      	beq.n	8008584 <USB_EPStartXfer+0xf04>
 800857a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800857e:	3301      	adds	r3, #1
 8008580:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008584:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	b29a      	uxth	r2, r3
 800858c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008590:	b29b      	uxth	r3, r3
 8008592:	029b      	lsls	r3, r3, #10
 8008594:	b29b      	uxth	r3, r3
 8008596:	4313      	orrs	r3, r2
 8008598:	b29a      	uxth	r2, r3
 800859a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800859e:	801a      	strh	r2, [r3, #0]
 80085a0:	e3df      	b.n	8008d62 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80085a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	78db      	ldrb	r3, [r3, #3]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	f040 8218 	bne.w	80089e4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80085b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	785b      	ldrb	r3, [r3, #1]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f040 809d 	bne.w	8008700 <USB_EPStartXfer+0x1080>
 80085c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	461a      	mov	r2, r3
 80085e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80085ea:	4413      	add	r3, r2
 80085ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	011a      	lsls	r2, r3, #4
 80085fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008602:	4413      	add	r3, r2
 8008604:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008608:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800860c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	b29b      	uxth	r3, r3
 8008614:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008618:	b29a      	uxth	r2, r3
 800861a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800861e:	801a      	strh	r2, [r3, #0]
 8008620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	2b3e      	cmp	r3, #62	@ 0x3e
 800862e:	d92b      	bls.n	8008688 <USB_EPStartXfer+0x1008>
 8008630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f003 031f 	and.w	r3, r3, #31
 8008652:	2b00      	cmp	r3, #0
 8008654:	d104      	bne.n	8008660 <USB_EPStartXfer+0xfe0>
 8008656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800865a:	3b01      	subs	r3, #1
 800865c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	b29a      	uxth	r2, r3
 8008668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800866c:	b29b      	uxth	r3, r3
 800866e:	029b      	lsls	r3, r3, #10
 8008670:	b29b      	uxth	r3, r3
 8008672:	4313      	orrs	r3, r2
 8008674:	b29b      	uxth	r3, r3
 8008676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800867a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800867e:	b29a      	uxth	r2, r3
 8008680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008684:	801a      	strh	r2, [r3, #0]
 8008686:	e070      	b.n	800876a <USB_EPStartXfer+0x10ea>
 8008688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800868c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10c      	bne.n	80086b2 <USB_EPStartXfer+0x1032>
 8008698:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80086ae:	801a      	strh	r2, [r3, #0]
 80086b0:	e05b      	b.n	800876a <USB_EPStartXfer+0x10ea>
 80086b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	085b      	lsrs	r3, r3, #1
 80086c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80086c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d004      	beq.n	80086e2 <USB_EPStartXfer+0x1062>
 80086d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086dc:	3301      	adds	r3, #1
 80086de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80086e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	029b      	lsls	r3, r3, #10
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	4313      	orrs	r3, r2
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80086fc:	801a      	strh	r2, [r3, #0]
 80086fe:	e034      	b.n	800876a <USB_EPStartXfer+0x10ea>
 8008700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d12c      	bne.n	800876a <USB_EPStartXfer+0x10ea>
 8008710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800871e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008722:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800872c:	b29b      	uxth	r3, r3
 800872e:	461a      	mov	r2, r3
 8008730:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008734:	4413      	add	r3, r2
 8008736:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800873a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800873e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	011a      	lsls	r2, r3, #4
 8008748:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800874c:	4413      	add	r3, r2
 800874e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008752:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	b29a      	uxth	r2, r3
 8008764:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008768:	801a      	strh	r2, [r3, #0]
 800876a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800876e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800877c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f040 809d 	bne.w	80088c4 <USB_EPStartXfer+0x1244>
 800878a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800878e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800879c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	461a      	mov	r2, r3
 80087aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087ae:	4413      	add	r3, r2
 80087b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	011a      	lsls	r2, r3, #4
 80087c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087c6:	4413      	add	r3, r2
 80087c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80087cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80087d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087dc:	b29a      	uxth	r2, r3
 80087de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087e2:	801a      	strh	r2, [r3, #0]
 80087e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80087f2:	d92b      	bls.n	800884c <USB_EPStartXfer+0x11cc>
 80087f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	095b      	lsrs	r3, r3, #5
 8008802:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800880a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	f003 031f 	and.w	r3, r3, #31
 8008816:	2b00      	cmp	r3, #0
 8008818:	d104      	bne.n	8008824 <USB_EPStartXfer+0x11a4>
 800881a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800881e:	3b01      	subs	r3, #1
 8008820:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008824:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	b29a      	uxth	r2, r3
 800882c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008830:	b29b      	uxth	r3, r3
 8008832:	029b      	lsls	r3, r3, #10
 8008834:	b29b      	uxth	r3, r3
 8008836:	4313      	orrs	r3, r2
 8008838:	b29b      	uxth	r3, r3
 800883a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800883e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008842:	b29a      	uxth	r2, r3
 8008844:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008848:	801a      	strh	r2, [r3, #0]
 800884a:	e069      	b.n	8008920 <USB_EPStartXfer+0x12a0>
 800884c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008850:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10c      	bne.n	8008876 <USB_EPStartXfer+0x11f6>
 800885c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	b29b      	uxth	r3, r3
 8008864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800886c:	b29a      	uxth	r2, r3
 800886e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008872:	801a      	strh	r2, [r3, #0]
 8008874:	e054      	b.n	8008920 <USB_EPStartXfer+0x12a0>
 8008876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800887a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	085b      	lsrs	r3, r3, #1
 8008884:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	d004      	beq.n	80088a6 <USB_EPStartXfer+0x1226>
 800889c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088a0:	3301      	adds	r3, #1
 80088a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80088a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	029b      	lsls	r3, r3, #10
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088c0:	801a      	strh	r2, [r3, #0]
 80088c2:	e02d      	b.n	8008920 <USB_EPStartXfer+0x12a0>
 80088c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	785b      	ldrb	r3, [r3, #1]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d125      	bne.n	8008920 <USB_EPStartXfer+0x12a0>
 80088d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80088ea:	4413      	add	r3, r2
 80088ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80088f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	011a      	lsls	r2, r3, #4
 80088fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008902:	4413      	add	r3, r2
 8008904:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008908:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800890c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	b29a      	uxth	r2, r3
 800891a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800891e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 8218 	beq.w	8008d62 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008936:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008952:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d005      	beq.n	800896a <USB_EPStartXfer+0x12ea>
 800895e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008966:	2b00      	cmp	r3, #0
 8008968:	d10d      	bne.n	8008986 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800896a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800896e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008972:	2b00      	cmp	r3, #0
 8008974:	f040 81f5 	bne.w	8008d62 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008978:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800897c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008980:	2b00      	cmp	r3, #0
 8008982:	f040 81ee 	bne.w	8008d62 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800898a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ac:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80089b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	441a      	add	r2, r3
 80089ca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80089ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80089de:	b29b      	uxth	r3, r3
 80089e0:	8013      	strh	r3, [r2, #0]
 80089e2:	e1be      	b.n	8008d62 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80089e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	78db      	ldrb	r3, [r3, #3]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	f040 81b4 	bne.w	8008d5e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80089f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	699a      	ldr	r2, [r3, #24]
 8008a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d917      	bls.n	8008a42 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699a      	ldr	r2, [r3, #24]
 8008a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a32:	1ad2      	subs	r2, r2, r3
 8008a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	619a      	str	r2, [r3, #24]
 8008a40:	e00e      	b.n	8008a60 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008a60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	785b      	ldrb	r3, [r3, #1]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f040 8085 	bne.w	8008b7c <USB_EPStartXfer+0x14fc>
 8008a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	461a      	mov	r2, r3
 8008a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a96:	4413      	add	r3, r2
 8008a98:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	011a      	lsls	r2, r3, #4
 8008aaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008aae:	4413      	add	r3, r2
 8008ab0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ab8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008aca:	801a      	strh	r2, [r3, #0]
 8008acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ad0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ad2:	d923      	bls.n	8008b1c <USB_EPStartXfer+0x149c>
 8008ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ad8:	095b      	lsrs	r3, r3, #5
 8008ada:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ae2:	f003 031f 	and.w	r3, r3, #31
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d104      	bne.n	8008af4 <USB_EPStartXfer+0x1474>
 8008aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aee:	3b01      	subs	r3, #1
 8008af0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008af4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008af8:	881b      	ldrh	r3, [r3, #0]
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	029b      	lsls	r3, r3, #10
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	4313      	orrs	r3, r2
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b18:	801a      	strh	r2, [r3, #0]
 8008b1a:	e060      	b.n	8008bde <USB_EPStartXfer+0x155e>
 8008b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10c      	bne.n	8008b3e <USB_EPStartXfer+0x14be>
 8008b24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b3a:	801a      	strh	r2, [r3, #0]
 8008b3c:	e04f      	b.n	8008bde <USB_EPStartXfer+0x155e>
 8008b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b42:	085b      	lsrs	r3, r3, #1
 8008b44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d004      	beq.n	8008b5e <USB_EPStartXfer+0x14de>
 8008b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b58:	3301      	adds	r3, #1
 8008b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	029b      	lsls	r3, r3, #10
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	4313      	orrs	r3, r2
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008b78:	801a      	strh	r2, [r3, #0]
 8008b7a:	e030      	b.n	8008bde <USB_EPStartXfer+0x155e>
 8008b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	785b      	ldrb	r3, [r3, #1]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d128      	bne.n	8008bde <USB_EPStartXfer+0x155e>
 8008b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	461a      	mov	r2, r3
 8008bac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	011a      	lsls	r2, r3, #4
 8008bc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bc8:	4413      	add	r3, r2
 8008bca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008bce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008bdc:	801a      	strh	r2, [r3, #0]
 8008bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	785b      	ldrb	r3, [r3, #1]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f040 8085 	bne.w	8008d08 <USB_EPStartXfer+0x1688>
 8008bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008c22:	4413      	add	r3, r2
 8008c24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	011a      	lsls	r2, r3, #4
 8008c36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008c40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c56:	801a      	strh	r2, [r3, #0]
 8008c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c5e:	d923      	bls.n	8008ca8 <USB_EPStartXfer+0x1628>
 8008c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c64:	095b      	lsrs	r3, r3, #5
 8008c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c6e:	f003 031f 	and.w	r3, r3, #31
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d104      	bne.n	8008c80 <USB_EPStartXfer+0x1600>
 8008c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	029b      	lsls	r3, r3, #10
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	4313      	orrs	r3, r2
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ca4:	801a      	strh	r2, [r3, #0]
 8008ca6:	e05c      	b.n	8008d62 <USB_EPStartXfer+0x16e2>
 8008ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10c      	bne.n	8008cca <USB_EPStartXfer+0x164a>
 8008cb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008cc6:	801a      	strh	r2, [r3, #0]
 8008cc8:	e04b      	b.n	8008d62 <USB_EPStartXfer+0x16e2>
 8008cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cce:	085b      	lsrs	r3, r3, #1
 8008cd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cd8:	f003 0301 	and.w	r3, r3, #1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d004      	beq.n	8008cea <USB_EPStartXfer+0x166a>
 8008ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008cea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	029b      	lsls	r3, r3, #10
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008d04:	801a      	strh	r2, [r3, #0]
 8008d06:	e02c      	b.n	8008d62 <USB_EPStartXfer+0x16e2>
 8008d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	785b      	ldrb	r3, [r3, #1]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d124      	bne.n	8008d62 <USB_EPStartXfer+0x16e2>
 8008d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008d2e:	4413      	add	r3, r2
 8008d30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	011a      	lsls	r2, r3, #4
 8008d42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008d46:	4413      	add	r3, r2
 8008d48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008d5a:	801a      	strh	r2, [r3, #0]
 8008d5c:	e001      	b.n	8008d62 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e03a      	b.n	8008dd8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d90:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d94:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008d98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008d9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008da0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008da8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	441a      	add	r2, r3
 8008dbe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b085      	sub	sp, #20
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	785b      	ldrb	r3, [r3, #1]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d020      	beq.n	8008e36 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4413      	add	r3, r2
 8008dfe:	881b      	ldrh	r3, [r3, #0]
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e0a:	81bb      	strh	r3, [r7, #12]
 8008e0c:	89bb      	ldrh	r3, [r7, #12]
 8008e0e:	f083 0310 	eor.w	r3, r3, #16
 8008e12:	81bb      	strh	r3, [r7, #12]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	441a      	add	r2, r3
 8008e1e:	89bb      	ldrh	r3, [r7, #12]
 8008e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	8013      	strh	r3, [r2, #0]
 8008e34:	e01f      	b.n	8008e76 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e4c:	81fb      	strh	r3, [r7, #14]
 8008e4e:	89fb      	ldrh	r3, [r7, #14]
 8008e50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008e54:	81fb      	strh	r3, [r7, #14]
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	441a      	add	r2, r3
 8008e60:	89fb      	ldrh	r3, [r7, #14]
 8008e62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bc80      	pop	{r7}
 8008e80:	4770      	bx	lr

08008e82 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b087      	sub	sp, #28
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	7b1b      	ldrb	r3, [r3, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f040 809d 	bne.w	8008fd0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	785b      	ldrb	r3, [r3, #1]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d04c      	beq.n	8008f38 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	823b      	strh	r3, [r7, #16]
 8008eac:	8a3b      	ldrh	r3, [r7, #16]
 8008eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d01b      	beq.n	8008eee <USB_EPClearStall+0x6c>
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ecc:	81fb      	strh	r3, [r7, #14]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	441a      	add	r2, r3
 8008ed8:	89fb      	ldrh	r3, [r7, #14]
 8008eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ee6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	78db      	ldrb	r3, [r3, #3]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d06c      	beq.n	8008fd0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f0c:	81bb      	strh	r3, [r7, #12]
 8008f0e:	89bb      	ldrh	r3, [r7, #12]
 8008f10:	f083 0320 	eor.w	r3, r3, #32
 8008f14:	81bb      	strh	r3, [r7, #12]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	441a      	add	r2, r3
 8008f20:	89bb      	ldrh	r3, [r7, #12]
 8008f22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	8013      	strh	r3, [r2, #0]
 8008f36:	e04b      	b.n	8008fd0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	82fb      	strh	r3, [r7, #22]
 8008f46:	8afb      	ldrh	r3, [r7, #22]
 8008f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d01b      	beq.n	8008f88 <USB_EPClearStall+0x106>
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f66:	82bb      	strh	r3, [r7, #20]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	441a      	add	r2, r3
 8008f72:	8abb      	ldrh	r3, [r7, #20]
 8008f74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f9e:	827b      	strh	r3, [r7, #18]
 8008fa0:	8a7b      	ldrh	r3, [r7, #18]
 8008fa2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008fa6:	827b      	strh	r3, [r7, #18]
 8008fa8:	8a7b      	ldrh	r3, [r7, #18]
 8008faa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008fae:	827b      	strh	r3, [r7, #18]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	441a      	add	r2, r3
 8008fba:	8a7b      	ldrh	r3, [r7, #18]
 8008fbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bc80      	pop	{r7}
 8008fda:	4770      	bx	lr

08008fdc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d103      	bne.n	8008ff6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2280      	movs	r2, #128	@ 0x80
 8008ff2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr

08009002 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr

08009016 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	bc80      	pop	{r7}
 8009028:	4770      	bx	lr

0800902a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009038:	b29b      	uxth	r3, r3
 800903a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800903c:	68fb      	ldr	r3, [r7, #12]
}
 800903e:	4618      	mov	r0, r3
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	bc80      	pop	{r7}
 8009046:	4770      	bx	lr

08009048 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	bc80      	pop	{r7}
 800905c:	4770      	bx	lr

0800905e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800905e:	b480      	push	{r7}
 8009060:	b08b      	sub	sp, #44	@ 0x2c
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	4611      	mov	r1, r2
 800906a:	461a      	mov	r2, r3
 800906c:	460b      	mov	r3, r1
 800906e:	80fb      	strh	r3, [r7, #6]
 8009070:	4613      	mov	r3, r2
 8009072:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009074:	88bb      	ldrh	r3, [r7, #4]
 8009076:	3301      	adds	r3, #1
 8009078:	085b      	lsrs	r3, r3, #1
 800907a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009084:	88fb      	ldrh	r3, [r7, #6]
 8009086:	005a      	lsls	r2, r3, #1
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009090:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	627b      	str	r3, [r7, #36]	@ 0x24
 8009096:	e01e      	b.n	80090d6 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	3301      	adds	r3, #1
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	021b      	lsls	r3, r3, #8
 80090a6:	b21a      	sxth	r2, r3
 80090a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	b21b      	sxth	r3, r3
 80090b0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	8a7a      	ldrh	r2, [r7, #18]
 80090b6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	3302      	adds	r3, #2
 80090bc:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	3302      	adds	r3, #2
 80090c2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	3301      	adds	r3, #1
 80090c8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	3301      	adds	r3, #1
 80090ce:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	3b01      	subs	r3, #1
 80090d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80090d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1dd      	bne.n	8009098 <USB_WritePMA+0x3a>
  }
}
 80090dc:	bf00      	nop
 80090de:	bf00      	nop
 80090e0:	372c      	adds	r7, #44	@ 0x2c
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bc80      	pop	{r7}
 80090e6:	4770      	bx	lr

080090e8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b08b      	sub	sp, #44	@ 0x2c
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	4611      	mov	r1, r2
 80090f4:	461a      	mov	r2, r3
 80090f6:	460b      	mov	r3, r1
 80090f8:	80fb      	strh	r3, [r7, #6]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80090fe:	88bb      	ldrh	r3, [r7, #4]
 8009100:	085b      	lsrs	r3, r3, #1
 8009102:	b29b      	uxth	r3, r3
 8009104:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	005a      	lsls	r2, r3, #1
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800911a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009120:	e01b      	b.n	800915a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009122:	6a3b      	ldr	r3, [r7, #32]
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	b29b      	uxth	r3, r3
 8009128:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	3302      	adds	r3, #2
 800912e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	b2da      	uxtb	r2, r3
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	3301      	adds	r3, #1
 800913c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	0a1b      	lsrs	r3, r3, #8
 8009142:	b2da      	uxtb	r2, r3
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	3301      	adds	r3, #1
 800914c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	3302      	adds	r3, #2
 8009152:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009156:	3b01      	subs	r3, #1
 8009158:	627b      	str	r3, [r7, #36]	@ 0x24
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e0      	bne.n	8009122 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009160:	88bb      	ldrh	r3, [r7, #4]
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	b29b      	uxth	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d007      	beq.n	800917c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800916c:	6a3b      	ldr	r3, [r7, #32]
 800916e:	881b      	ldrh	r3, [r3, #0]
 8009170:	b29b      	uxth	r3, r3
 8009172:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	b2da      	uxtb	r2, r3
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	701a      	strb	r2, [r3, #0]
  }
}
 800917c:	bf00      	nop
 800917e:	372c      	adds	r7, #44	@ 0x2c
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr

08009186 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
 800918e:	460b      	mov	r3, r1
 8009190:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	7c1b      	ldrb	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d115      	bne.n	80091ca <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800919e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091a2:	2202      	movs	r2, #2
 80091a4:	2181      	movs	r1, #129	@ 0x81
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f001 fe2b 	bl	800ae02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80091b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091b6:	2202      	movs	r2, #2
 80091b8:	2101      	movs	r1, #1
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f001 fe21 	bl	800ae02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80091c8:	e012      	b.n	80091f0 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80091ca:	2340      	movs	r3, #64	@ 0x40
 80091cc:	2202      	movs	r2, #2
 80091ce:	2181      	movs	r1, #129	@ 0x81
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f001 fe16 	bl	800ae02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80091dc:	2340      	movs	r3, #64	@ 0x40
 80091de:	2202      	movs	r2, #2
 80091e0:	2101      	movs	r1, #1
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f001 fe0d 	bl	800ae02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091f0:	2308      	movs	r3, #8
 80091f2:	2203      	movs	r2, #3
 80091f4:	2182      	movs	r1, #130	@ 0x82
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f001 fe03 	bl	800ae02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009202:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009206:	f001 ff23 	bl	800b050 <USBD_static_malloc>
 800920a:	4602      	mov	r2, r0
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009218:	2b00      	cmp	r3, #0
 800921a:	d102      	bne.n	8009222 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800921c:	2301      	movs	r3, #1
 800921e:	73fb      	strb	r3, [r7, #15]
 8009220:	e026      	b.n	8009270 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009228:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2200      	movs	r2, #0
 8009238:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2200      	movs	r2, #0
 8009240:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	7c1b      	ldrb	r3, [r3, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d109      	bne.n	8009260 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009252:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009256:	2101      	movs	r1, #1
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 fec2 	bl	800afe2 <USBD_LL_PrepareReceive>
 800925e:	e007      	b.n	8009270 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009266:	2340      	movs	r3, #64	@ 0x40
 8009268:	2101      	movs	r1, #1
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f001 feb9 	bl	800afe2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800928a:	2181      	movs	r1, #129	@ 0x81
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f001 fdde 	bl	800ae4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009298:	2101      	movs	r1, #1
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f001 fdd7 	bl	800ae4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80092a8:	2182      	movs	r1, #130	@ 0x82
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 fdcf 	bl	800ae4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00e      	beq.n	80092de <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092d0:	4618      	mov	r0, r3
 80092d2:	f001 fec9 	bl	800b068 <USBD_static_free>
    pdev->pClassData = NULL;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80092de:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092f8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80092fa:	2300      	movs	r3, #0
 80092fc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009302:	2300      	movs	r3, #0
 8009304:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800930e:	2b00      	cmp	r3, #0
 8009310:	d039      	beq.n	8009386 <USBD_CDC_Setup+0x9e>
 8009312:	2b20      	cmp	r3, #32
 8009314:	d17f      	bne.n	8009416 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	88db      	ldrh	r3, [r3, #6]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d029      	beq.n	8009372 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	b25b      	sxtb	r3, r3
 8009324:	2b00      	cmp	r3, #0
 8009326:	da11      	bge.n	800934c <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009334:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	88d2      	ldrh	r2, [r2, #6]
 800933a:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800933c:	6939      	ldr	r1, [r7, #16]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	88db      	ldrh	r3, [r3, #6]
 8009342:	461a      	mov	r2, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 f9d5 	bl	800a6f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800934a:	e06b      	b.n	8009424 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	785a      	ldrb	r2, [r3, #1]
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	88db      	ldrh	r3, [r3, #6]
 800935a:	b2da      	uxtb	r2, r3
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009362:	6939      	ldr	r1, [r7, #16]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	88db      	ldrh	r3, [r3, #6]
 8009368:	461a      	mov	r2, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 f9f0 	bl	800a750 <USBD_CtlPrepareRx>
      break;
 8009370:	e058      	b.n	8009424 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	7850      	ldrb	r0, [r2, #1]
 800937e:	2200      	movs	r2, #0
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	4798      	blx	r3
      break;
 8009384:	e04e      	b.n	8009424 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	785b      	ldrb	r3, [r3, #1]
 800938a:	2b0b      	cmp	r3, #11
 800938c:	d02e      	beq.n	80093ec <USBD_CDC_Setup+0x104>
 800938e:	2b0b      	cmp	r3, #11
 8009390:	dc38      	bgt.n	8009404 <USBD_CDC_Setup+0x11c>
 8009392:	2b00      	cmp	r3, #0
 8009394:	d002      	beq.n	800939c <USBD_CDC_Setup+0xb4>
 8009396:	2b0a      	cmp	r3, #10
 8009398:	d014      	beq.n	80093c4 <USBD_CDC_Setup+0xdc>
 800939a:	e033      	b.n	8009404 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d107      	bne.n	80093b6 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80093a6:	f107 030c 	add.w	r3, r7, #12
 80093aa:	2202      	movs	r2, #2
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f001 f9a0 	bl	800a6f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093b4:	e02e      	b.n	8009414 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f001 f931 	bl	800a620 <USBD_CtlError>
            ret = USBD_FAIL;
 80093be:	2302      	movs	r3, #2
 80093c0:	75fb      	strb	r3, [r7, #23]
          break;
 80093c2:	e027      	b.n	8009414 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d107      	bne.n	80093de <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80093ce:	f107 030f 	add.w	r3, r7, #15
 80093d2:	2201      	movs	r2, #1
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f001 f98c 	bl	800a6f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80093dc:	e01a      	b.n	8009414 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80093de:	6839      	ldr	r1, [r7, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 f91d 	bl	800a620 <USBD_CtlError>
            ret = USBD_FAIL;
 80093e6:	2302      	movs	r3, #2
 80093e8:	75fb      	strb	r3, [r7, #23]
          break;
 80093ea:	e013      	b.n	8009414 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d00d      	beq.n	8009412 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f001 f911 	bl	800a620 <USBD_CtlError>
            ret = USBD_FAIL;
 80093fe:	2302      	movs	r3, #2
 8009400:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009402:	e006      	b.n	8009412 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f001 f90a 	bl	800a620 <USBD_CtlError>
          ret = USBD_FAIL;
 800940c:	2302      	movs	r3, #2
 800940e:	75fb      	strb	r3, [r7, #23]
          break;
 8009410:	e000      	b.n	8009414 <USBD_CDC_Setup+0x12c>
          break;
 8009412:	bf00      	nop
      }
      break;
 8009414:	e006      	b.n	8009424 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 f901 	bl	800a620 <USBD_CtlError>
      ret = USBD_FAIL;
 800941e:	2302      	movs	r3, #2
 8009420:	75fb      	strb	r3, [r7, #23]
      break;
 8009422:	bf00      	nop
  }

  return ret;
 8009424:	7dfb      	ldrb	r3, [r7, #23]
}
 8009426:	4618      	mov	r0, r3
 8009428:	3718      	adds	r7, #24
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	460b      	mov	r3, r1
 8009438:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009440:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009448:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009450:	2b00      	cmp	r3, #0
 8009452:	d03a      	beq.n	80094ca <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009454:	78fa      	ldrb	r2, [r7, #3]
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4613      	mov	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	440b      	add	r3, r1
 8009462:	331c      	adds	r3, #28
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d029      	beq.n	80094be <USBD_CDC_DataIn+0x90>
 800946a:	78fa      	ldrb	r2, [r7, #3]
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	4613      	mov	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	4413      	add	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	440b      	add	r3, r1
 8009478:	331c      	adds	r3, #28
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	78f9      	ldrb	r1, [r7, #3]
 800947e:	68b8      	ldr	r0, [r7, #8]
 8009480:	460b      	mov	r3, r1
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	4403      	add	r3, r0
 800948a:	3320      	adds	r3, #32
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	fbb2 f1f3 	udiv	r1, r2, r3
 8009492:	fb01 f303 	mul.w	r3, r1, r3
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	2b00      	cmp	r3, #0
 800949a:	d110      	bne.n	80094be <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800949c:	78fa      	ldrb	r2, [r7, #3]
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	331c      	adds	r3, #28
 80094ac:	2200      	movs	r2, #0
 80094ae:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80094b0:	78f9      	ldrb	r1, [r7, #3]
 80094b2:	2300      	movs	r3, #0
 80094b4:	2200      	movs	r2, #0
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f001 fd70 	bl	800af9c <USBD_LL_Transmit>
 80094bc:	e003      	b.n	80094c6 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	e000      	b.n	80094cc <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80094ca:	2302      	movs	r3, #2
  }
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 fd9b 	bl	800b028 <USBD_LL_GetRxDataSize>
 80094f2:	4602      	mov	r2, r0
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00d      	beq.n	8009520 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009518:	4611      	mov	r1, r2
 800951a:	4798      	blx	r3

    return USBD_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	e000      	b.n	8009522 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009520:	2302      	movs	r3, #2
  }
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009538:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009540:	2b00      	cmp	r3, #0
 8009542:	d014      	beq.n	800956e <USBD_CDC_EP0_RxReady+0x44>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800954a:	2bff      	cmp	r3, #255	@ 0xff
 800954c:	d00f      	beq.n	800956e <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800955c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009564:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	22ff      	movs	r2, #255	@ 0xff
 800956a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2243      	movs	r2, #67	@ 0x43
 8009584:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009586:	4b03      	ldr	r3, [pc, #12]	@ (8009594 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009588:	4618      	mov	r0, r3
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	bc80      	pop	{r7}
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	20000094 	.word	0x20000094

08009598 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2243      	movs	r2, #67	@ 0x43
 80095a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80095a6:	4b03      	ldr	r3, [pc, #12]	@ (80095b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bc80      	pop	{r7}
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	20000050 	.word	0x20000050

080095b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2243      	movs	r2, #67	@ 0x43
 80095c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80095c6:	4b03      	ldr	r3, [pc, #12]	@ (80095d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bc80      	pop	{r7}
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	200000d8 	.word	0x200000d8

080095d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	220a      	movs	r2, #10
 80095e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80095e6:	4b03      	ldr	r3, [pc, #12]	@ (80095f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bc80      	pop	{r7}
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	2000000c 	.word	0x2000000c

080095f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009602:	2302      	movs	r3, #2
 8009604:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d005      	beq.n	8009618 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009618:	7bfb      	ldrb	r3, [r7, #15]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	bc80      	pop	{r7}
 8009622:	4770      	bx	lr

08009624 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009624:	b480      	push	{r7}
 8009626:	b087      	sub	sp, #28
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	4613      	mov	r3, r2
 8009630:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009638:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009642:	88fa      	ldrh	r2, [r7, #6]
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	bc80      	pop	{r7}
 8009654:	4770      	bx	lr

08009656 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009656:	b480      	push	{r7}
 8009658:	b085      	sub	sp, #20
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009666:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	bc80      	pop	{r7}
 800967a:	4770      	bx	lr

0800967c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800968a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009692:	2b00      	cmp	r3, #0
 8009694:	d017      	beq.n	80096c6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	7c1b      	ldrb	r3, [r3, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d109      	bne.n	80096b2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80096a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096a8:	2101      	movs	r1, #1
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f001 fc99 	bl	800afe2 <USBD_LL_PrepareReceive>
 80096b0:	e007      	b.n	80096c2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80096b8:	2340      	movs	r3, #64	@ 0x40
 80096ba:	2101      	movs	r1, #1
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 fc90 	bl	800afe2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	e000      	b.n	80096c8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80096c6:	2302      	movs	r3, #2
  }
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	4613      	mov	r3, r2
 80096dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80096e4:	2302      	movs	r3, #2
 80096e6:	e01a      	b.n	800971e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d003      	beq.n	8009708 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	79fa      	ldrb	r2, [r7, #7]
 8009714:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f001 fafe 	bl	800ad18 <USBD_LL_Init>

  return USBD_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009726:	b480      	push	{r7}
 8009728:	b085      	sub	sp, #20
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009730:	2300      	movs	r3, #0
 8009732:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d006      	beq.n	8009748 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	73fb      	strb	r3, [r7, #15]
 8009746:	e001      	b.n	800974c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009748:	2302      	movs	r3, #2
 800974a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800974c:	7bfb      	ldrb	r3, [r7, #15]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	bc80      	pop	{r7}
 8009756:	4770      	bx	lr

08009758 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f001 fb33 	bl	800adcc <USBD_LL_Start>

  return USBD_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	bc80      	pop	{r7}
 8009782:	4770      	bx	lr

08009784 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009790:	2302      	movs	r3, #2
 8009792:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00c      	beq.n	80097b8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	78fa      	ldrb	r2, [r7, #3]
 80097a8:	4611      	mov	r1, r2
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	4798      	blx	r3
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d101      	bne.n	80097b8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b082      	sub	sp, #8
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	78fa      	ldrb	r2, [r7, #3]
 80097d8:	4611      	mov	r1, r2
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	4798      	blx	r3

  return USBD_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fed7 	bl	800a5ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800980e:	461a      	mov	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800981c:	f003 031f 	and.w	r3, r3, #31
 8009820:	2b02      	cmp	r3, #2
 8009822:	d016      	beq.n	8009852 <USBD_LL_SetupStage+0x6a>
 8009824:	2b02      	cmp	r3, #2
 8009826:	d81c      	bhi.n	8009862 <USBD_LL_SetupStage+0x7a>
 8009828:	2b00      	cmp	r3, #0
 800982a:	d002      	beq.n	8009832 <USBD_LL_SetupStage+0x4a>
 800982c:	2b01      	cmp	r3, #1
 800982e:	d008      	beq.n	8009842 <USBD_LL_SetupStage+0x5a>
 8009830:	e017      	b.n	8009862 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f9ca 	bl	8009bd4 <USBD_StdDevReq>
      break;
 8009840:	e01a      	b.n	8009878 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fa2c 	bl	8009ca8 <USBD_StdItfReq>
      break;
 8009850:	e012      	b.n	8009878 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fa6c 	bl	8009d38 <USBD_StdEPReq>
      break;
 8009860:	e00a      	b.n	8009878 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009868:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800986c:	b2db      	uxtb	r3, r3
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 fb0b 	bl	800ae8c <USBD_LL_StallEP>
      break;
 8009876:	bf00      	nop
  }

  return USBD_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b086      	sub	sp, #24
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	460b      	mov	r3, r1
 800988c:	607a      	str	r2, [r7, #4]
 800988e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d14b      	bne.n	800992e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800989c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d134      	bne.n	8009912 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	68da      	ldr	r2, [r3, #12]
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d919      	bls.n	80098e8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	68da      	ldr	r2, [r3, #12]
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	1ad2      	subs	r2, r2, r3
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d203      	bcs.n	80098d6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	e002      	b.n	80098dc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80098da:	b29b      	uxth	r3, r3
 80098dc:	461a      	mov	r2, r3
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 ff53 	bl	800a78c <USBD_CtlContinueRx>
 80098e6:	e038      	b.n	800995a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00a      	beq.n	800990a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d105      	bne.n	800990a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 ff50 	bl	800a7b0 <USBD_CtlSendStatus>
 8009910:	e023      	b.n	800995a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009918:	2b05      	cmp	r3, #5
 800991a:	d11e      	bne.n	800995a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009924:	2100      	movs	r1, #0
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f001 fab0 	bl	800ae8c <USBD_LL_StallEP>
 800992c:	e015      	b.n	800995a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00d      	beq.n	8009956 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009940:	2b03      	cmp	r3, #3
 8009942:	d108      	bne.n	8009956 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	7afa      	ldrb	r2, [r7, #11]
 800994e:	4611      	mov	r1, r2
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	4798      	blx	r3
 8009954:	e001      	b.n	800995a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009956:	2302      	movs	r3, #2
 8009958:	e000      	b.n	800995c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	460b      	mov	r3, r1
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009972:	7afb      	ldrb	r3, [r7, #11]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d17f      	bne.n	8009a78 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	3314      	adds	r3, #20
 800997c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009984:	2b02      	cmp	r3, #2
 8009986:	d15c      	bne.n	8009a42 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	68da      	ldr	r2, [r3, #12]
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	429a      	cmp	r2, r3
 8009992:	d915      	bls.n	80099c0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	1ad2      	subs	r2, r2, r3
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	461a      	mov	r2, r3
 80099aa:	6879      	ldr	r1, [r7, #4]
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 febd 	bl	800a72c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099b2:	2300      	movs	r3, #0
 80099b4:	2200      	movs	r2, #0
 80099b6:	2100      	movs	r1, #0
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f001 fb12 	bl	800afe2 <USBD_LL_PrepareReceive>
 80099be:	e04e      	b.n	8009a5e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	6912      	ldr	r2, [r2, #16]
 80099c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80099cc:	fb01 f202 	mul.w	r2, r1, r2
 80099d0:	1a9b      	subs	r3, r3, r2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d11c      	bne.n	8009a10 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	689a      	ldr	r2, [r3, #8]
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80099de:	429a      	cmp	r2, r3
 80099e0:	d316      	bcc.n	8009a10 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	689a      	ldr	r2, [r3, #8]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d20f      	bcs.n	8009a10 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80099f0:	2200      	movs	r2, #0
 80099f2:	2100      	movs	r1, #0
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 fe99 	bl	800a72c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a02:	2300      	movs	r3, #0
 8009a04:	2200      	movs	r2, #0
 8009a06:	2100      	movs	r1, #0
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f001 faea 	bl	800afe2 <USBD_LL_PrepareReceive>
 8009a0e:	e026      	b.n	8009a5e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00a      	beq.n	8009a32 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	d105      	bne.n	8009a32 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009a32:	2180      	movs	r1, #128	@ 0x80
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f001 fa29 	bl	800ae8c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 fecb 	bl	800a7d6 <USBD_CtlReceiveStatus>
 8009a40:	e00d      	b.n	8009a5e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009a48:	2b04      	cmp	r3, #4
 8009a4a:	d004      	beq.n	8009a56 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d103      	bne.n	8009a5e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009a56:	2180      	movs	r1, #128	@ 0x80
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f001 fa17 	bl	800ae8c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d11d      	bne.n	8009aa4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f7ff fe81 	bl	8009770 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009a76:	e015      	b.n	8009aa4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00d      	beq.n	8009aa0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d108      	bne.n	8009aa0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	7afa      	ldrb	r2, [r7, #11]
 8009a98:	4611      	mov	r1, r2
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	4798      	blx	r3
 8009a9e:	e001      	b.n	8009aa4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e000      	b.n	8009aa6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3718      	adds	r7, #24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ab6:	2340      	movs	r3, #64	@ 0x40
 8009ab8:	2200      	movs	r2, #0
 8009aba:	2100      	movs	r1, #0
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f001 f9a0 	bl	800ae02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2240      	movs	r2, #64	@ 0x40
 8009ace:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ad2:	2340      	movs	r3, #64	@ 0x40
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	2180      	movs	r1, #128	@ 0x80
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f001 f992 	bl	800ae02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2240      	movs	r2, #64	@ 0x40
 8009ae8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d009      	beq.n	8009b26 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	6852      	ldr	r2, [r2, #4]
 8009b1e:	b2d2      	uxtb	r2, r2
 8009b20:	4611      	mov	r1, r2
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	4798      	blx	r3
  }

  return USBD_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	78fa      	ldrb	r2, [r7, #3]
 8009b40:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bc80      	pop	{r7}
 8009b4c:	4770      	bx	lr

08009b4e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b4e:	b480      	push	{r7}
 8009b50:	b083      	sub	sp, #12
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2204      	movs	r2, #4
 8009b66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bc80      	pop	{r7}
 8009b74:	4770      	bx	lr

08009b76 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b76:	b480      	push	{r7}
 8009b78:	b083      	sub	sp, #12
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	d105      	bne.n	8009b94 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bc80      	pop	{r7}
 8009b9e:	4770      	bx	lr

08009ba0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	d10b      	bne.n	8009bca <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d005      	beq.n	8009bca <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bea:	2b40      	cmp	r3, #64	@ 0x40
 8009bec:	d005      	beq.n	8009bfa <USBD_StdDevReq+0x26>
 8009bee:	2b40      	cmp	r3, #64	@ 0x40
 8009bf0:	d84f      	bhi.n	8009c92 <USBD_StdDevReq+0xbe>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d009      	beq.n	8009c0a <USBD_StdDevReq+0x36>
 8009bf6:	2b20      	cmp	r3, #32
 8009bf8:	d14b      	bne.n	8009c92 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	4798      	blx	r3
      break;
 8009c08:	e048      	b.n	8009c9c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	785b      	ldrb	r3, [r3, #1]
 8009c0e:	2b09      	cmp	r3, #9
 8009c10:	d839      	bhi.n	8009c86 <USBD_StdDevReq+0xb2>
 8009c12:	a201      	add	r2, pc, #4	@ (adr r2, 8009c18 <USBD_StdDevReq+0x44>)
 8009c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c18:	08009c69 	.word	0x08009c69
 8009c1c:	08009c7d 	.word	0x08009c7d
 8009c20:	08009c87 	.word	0x08009c87
 8009c24:	08009c73 	.word	0x08009c73
 8009c28:	08009c87 	.word	0x08009c87
 8009c2c:	08009c4b 	.word	0x08009c4b
 8009c30:	08009c41 	.word	0x08009c41
 8009c34:	08009c87 	.word	0x08009c87
 8009c38:	08009c5f 	.word	0x08009c5f
 8009c3c:	08009c55 	.word	0x08009c55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f9dc 	bl	800a000 <USBD_GetDescriptor>
          break;
 8009c48:	e022      	b.n	8009c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fb3f 	bl	800a2d0 <USBD_SetAddress>
          break;
 8009c52:	e01d      	b.n	8009c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fb7e 	bl	800a358 <USBD_SetConfig>
          break;
 8009c5c:	e018      	b.n	8009c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fc07 	bl	800a474 <USBD_GetConfig>
          break;
 8009c66:	e013      	b.n	8009c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fc37 	bl	800a4de <USBD_GetStatus>
          break;
 8009c70:	e00e      	b.n	8009c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c72:	6839      	ldr	r1, [r7, #0]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fc65 	bl	800a544 <USBD_SetFeature>
          break;
 8009c7a:	e009      	b.n	8009c90 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fc74 	bl	800a56c <USBD_ClrFeature>
          break;
 8009c84:	e004      	b.n	8009c90 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fcc9 	bl	800a620 <USBD_CtlError>
          break;
 8009c8e:	bf00      	nop
      }
      break;
 8009c90:	e004      	b.n	8009c9c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fcc3 	bl	800a620 <USBD_CtlError>
      break;
 8009c9a:	bf00      	nop
  }

  return ret;
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop

08009ca8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cbe:	2b40      	cmp	r3, #64	@ 0x40
 8009cc0:	d005      	beq.n	8009cce <USBD_StdItfReq+0x26>
 8009cc2:	2b40      	cmp	r3, #64	@ 0x40
 8009cc4:	d82e      	bhi.n	8009d24 <USBD_StdItfReq+0x7c>
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <USBD_StdItfReq+0x26>
 8009cca:	2b20      	cmp	r3, #32
 8009ccc:	d12a      	bne.n	8009d24 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d81d      	bhi.n	8009d16 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	889b      	ldrh	r3, [r3, #4]
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d813      	bhi.n	8009d0c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	4798      	blx	r3
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	88db      	ldrh	r3, [r3, #6]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d110      	bne.n	8009d20 <USBD_StdItfReq+0x78>
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10d      	bne.n	8009d20 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fd53 	bl	800a7b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d0a:	e009      	b.n	8009d20 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009d0c:	6839      	ldr	r1, [r7, #0]
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fc86 	bl	800a620 <USBD_CtlError>
          break;
 8009d14:	e004      	b.n	8009d20 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fc81 	bl	800a620 <USBD_CtlError>
          break;
 8009d1e:	e000      	b.n	8009d22 <USBD_StdItfReq+0x7a>
          break;
 8009d20:	bf00      	nop
      }
      break;
 8009d22:	e004      	b.n	8009d2e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fc7a 	bl	800a620 <USBD_CtlError>
      break;
 8009d2c:	bf00      	nop
  }

  return USBD_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	889b      	ldrh	r3, [r3, #4]
 8009d4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d54:	2b40      	cmp	r3, #64	@ 0x40
 8009d56:	d007      	beq.n	8009d68 <USBD_StdEPReq+0x30>
 8009d58:	2b40      	cmp	r3, #64	@ 0x40
 8009d5a:	f200 8146 	bhi.w	8009fea <USBD_StdEPReq+0x2b2>
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00a      	beq.n	8009d78 <USBD_StdEPReq+0x40>
 8009d62:	2b20      	cmp	r3, #32
 8009d64:	f040 8141 	bne.w	8009fea <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	4798      	blx	r3
      break;
 8009d76:	e13d      	b.n	8009ff4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d80:	2b20      	cmp	r3, #32
 8009d82:	d10a      	bne.n	8009d9a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	4798      	blx	r3
 8009d92:	4603      	mov	r3, r0
 8009d94:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	e12d      	b.n	8009ff6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	785b      	ldrb	r3, [r3, #1]
 8009d9e:	2b03      	cmp	r3, #3
 8009da0:	d007      	beq.n	8009db2 <USBD_StdEPReq+0x7a>
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	f300 811b 	bgt.w	8009fde <USBD_StdEPReq+0x2a6>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d072      	beq.n	8009e92 <USBD_StdEPReq+0x15a>
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d03a      	beq.n	8009e26 <USBD_StdEPReq+0xee>
 8009db0:	e115      	b.n	8009fde <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d002      	beq.n	8009dc2 <USBD_StdEPReq+0x8a>
 8009dbc:	2b03      	cmp	r3, #3
 8009dbe:	d015      	beq.n	8009dec <USBD_StdEPReq+0xb4>
 8009dc0:	e02b      	b.n	8009e1a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dc2:	7bbb      	ldrb	r3, [r7, #14]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00c      	beq.n	8009de2 <USBD_StdEPReq+0xaa>
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b80      	cmp	r3, #128	@ 0x80
 8009dcc:	d009      	beq.n	8009de2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f001 f85a 	bl	800ae8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009dd8:	2180      	movs	r1, #128	@ 0x80
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f001 f856 	bl	800ae8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009de0:	e020      	b.n	8009e24 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fc1b 	bl	800a620 <USBD_CtlError>
              break;
 8009dea:	e01b      	b.n	8009e24 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	885b      	ldrh	r3, [r3, #2]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10e      	bne.n	8009e12 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00b      	beq.n	8009e12 <USBD_StdEPReq+0xda>
 8009dfa:	7bbb      	ldrb	r3, [r7, #14]
 8009dfc:	2b80      	cmp	r3, #128	@ 0x80
 8009dfe:	d008      	beq.n	8009e12 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	88db      	ldrh	r3, [r3, #6]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d104      	bne.n	8009e12 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 f83d 	bl	800ae8c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fccc 	bl	800a7b0 <USBD_CtlSendStatus>

              break;
 8009e18:	e004      	b.n	8009e24 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fbff 	bl	800a620 <USBD_CtlError>
              break;
 8009e22:	bf00      	nop
          }
          break;
 8009e24:	e0e0      	b.n	8009fe8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d002      	beq.n	8009e36 <USBD_StdEPReq+0xfe>
 8009e30:	2b03      	cmp	r3, #3
 8009e32:	d015      	beq.n	8009e60 <USBD_StdEPReq+0x128>
 8009e34:	e026      	b.n	8009e84 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00c      	beq.n	8009e56 <USBD_StdEPReq+0x11e>
 8009e3c:	7bbb      	ldrb	r3, [r7, #14]
 8009e3e:	2b80      	cmp	r3, #128	@ 0x80
 8009e40:	d009      	beq.n	8009e56 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	4619      	mov	r1, r3
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 f820 	bl	800ae8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009e4c:	2180      	movs	r1, #128	@ 0x80
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f001 f81c 	bl	800ae8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e54:	e01c      	b.n	8009e90 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fbe1 	bl	800a620 <USBD_CtlError>
              break;
 8009e5e:	e017      	b.n	8009e90 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	885b      	ldrh	r3, [r3, #2]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d112      	bne.n	8009e8e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 f827 	bl	800aeca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fc97 	bl	800a7b0 <USBD_CtlSendStatus>
              }
              break;
 8009e82:	e004      	b.n	8009e8e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fbca 	bl	800a620 <USBD_CtlError>
              break;
 8009e8c:	e000      	b.n	8009e90 <USBD_StdEPReq+0x158>
              break;
 8009e8e:	bf00      	nop
          }
          break;
 8009e90:	e0aa      	b.n	8009fe8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d002      	beq.n	8009ea2 <USBD_StdEPReq+0x16a>
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d032      	beq.n	8009f06 <USBD_StdEPReq+0x1ce>
 8009ea0:	e097      	b.n	8009fd2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ea2:	7bbb      	ldrb	r3, [r7, #14]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d007      	beq.n	8009eb8 <USBD_StdEPReq+0x180>
 8009ea8:	7bbb      	ldrb	r3, [r7, #14]
 8009eaa:	2b80      	cmp	r3, #128	@ 0x80
 8009eac:	d004      	beq.n	8009eb8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fbb5 	bl	800a620 <USBD_CtlError>
                break;
 8009eb6:	e091      	b.n	8009fdc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	da0b      	bge.n	8009ed8 <USBD_StdEPReq+0x1a0>
 8009ec0:	7bbb      	ldrb	r3, [r7, #14]
 8009ec2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	4413      	add	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	3310      	adds	r3, #16
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	e00b      	b.n	8009ef0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
 8009eda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ede:	4613      	mov	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	4413      	add	r3, r2
 8009eee:	3304      	adds	r3, #4
 8009ef0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	2202      	movs	r2, #2
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fbf8 	bl	800a6f4 <USBD_CtlSendData>
              break;
 8009f04:	e06a      	b.n	8009fdc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	da11      	bge.n	8009f32 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f0e:	7bbb      	ldrb	r3, [r7, #14]
 8009f10:	f003 020f 	and.w	r2, r3, #15
 8009f14:	6879      	ldr	r1, [r7, #4]
 8009f16:	4613      	mov	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	440b      	add	r3, r1
 8009f20:	3318      	adds	r3, #24
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d117      	bne.n	8009f58 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f28:	6839      	ldr	r1, [r7, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fb78 	bl	800a620 <USBD_CtlError>
                  break;
 8009f30:	e054      	b.n	8009fdc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	f003 020f 	and.w	r2, r3, #15
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	440b      	add	r3, r1
 8009f44:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d104      	bne.n	8009f58 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fb65 	bl	800a620 <USBD_CtlError>
                  break;
 8009f56:	e041      	b.n	8009fdc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	da0b      	bge.n	8009f78 <USBD_StdEPReq+0x240>
 8009f60:	7bbb      	ldrb	r3, [r7, #14]
 8009f62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f66:	4613      	mov	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	3310      	adds	r3, #16
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	4413      	add	r3, r2
 8009f74:	3304      	adds	r3, #4
 8009f76:	e00b      	b.n	8009f90 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f7e:	4613      	mov	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	3304      	adds	r3, #4
 8009f90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d002      	beq.n	8009f9e <USBD_StdEPReq+0x266>
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	2b80      	cmp	r3, #128	@ 0x80
 8009f9c:	d103      	bne.n	8009fa6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	e00e      	b.n	8009fc4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009fa6:	7bbb      	ldrb	r3, [r7, #14]
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 ffac 	bl	800af08 <USBD_LL_IsStallEP>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	601a      	str	r2, [r3, #0]
 8009fbc:	e002      	b.n	8009fc4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fb92 	bl	800a6f4 <USBD_CtlSendData>
              break;
 8009fd0:	e004      	b.n	8009fdc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fb23 	bl	800a620 <USBD_CtlError>
              break;
 8009fda:	bf00      	nop
          }
          break;
 8009fdc:	e004      	b.n	8009fe8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fb1d 	bl	800a620 <USBD_CtlError>
          break;
 8009fe6:	bf00      	nop
      }
      break;
 8009fe8:	e004      	b.n	8009ff4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009fea:	6839      	ldr	r1, [r7, #0]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fb17 	bl	800a620 <USBD_CtlError>
      break;
 8009ff2:	bf00      	nop
  }

  return ret;
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
	...

0800a000 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a00a:	2300      	movs	r3, #0
 800a00c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a00e:	2300      	movs	r3, #0
 800a010:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	885b      	ldrh	r3, [r3, #2]
 800a01a:	0a1b      	lsrs	r3, r3, #8
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	3b01      	subs	r3, #1
 800a020:	2b06      	cmp	r3, #6
 800a022:	f200 8128 	bhi.w	800a276 <USBD_GetDescriptor+0x276>
 800a026:	a201      	add	r2, pc, #4	@ (adr r2, 800a02c <USBD_GetDescriptor+0x2c>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a049 	.word	0x0800a049
 800a030:	0800a061 	.word	0x0800a061
 800a034:	0800a0a1 	.word	0x0800a0a1
 800a038:	0800a277 	.word	0x0800a277
 800a03c:	0800a277 	.word	0x0800a277
 800a040:	0800a217 	.word	0x0800a217
 800a044:	0800a243 	.word	0x0800a243
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	7c12      	ldrb	r2, [r2, #16]
 800a054:	f107 0108 	add.w	r1, r7, #8
 800a058:	4610      	mov	r0, r2
 800a05a:	4798      	blx	r3
 800a05c:	60f8      	str	r0, [r7, #12]
      break;
 800a05e:	e112      	b.n	800a286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	7c1b      	ldrb	r3, [r3, #16]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10d      	bne.n	800a084 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a070:	f107 0208 	add.w	r2, r7, #8
 800a074:	4610      	mov	r0, r2
 800a076:	4798      	blx	r3
 800a078:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3301      	adds	r3, #1
 800a07e:	2202      	movs	r2, #2
 800a080:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a082:	e100      	b.n	800a286 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a08c:	f107 0208 	add.w	r2, r7, #8
 800a090:	4610      	mov	r0, r2
 800a092:	4798      	blx	r3
 800a094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3301      	adds	r3, #1
 800a09a:	2202      	movs	r2, #2
 800a09c:	701a      	strb	r2, [r3, #0]
      break;
 800a09e:	e0f2      	b.n	800a286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	885b      	ldrh	r3, [r3, #2]
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	2b05      	cmp	r3, #5
 800a0a8:	f200 80ac 	bhi.w	800a204 <USBD_GetDescriptor+0x204>
 800a0ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a0b4 <USBD_GetDescriptor+0xb4>)
 800a0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b2:	bf00      	nop
 800a0b4:	0800a0cd 	.word	0x0800a0cd
 800a0b8:	0800a101 	.word	0x0800a101
 800a0bc:	0800a135 	.word	0x0800a135
 800a0c0:	0800a169 	.word	0x0800a169
 800a0c4:	0800a19d 	.word	0x0800a19d
 800a0c8:	0800a1d1 	.word	0x0800a1d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00b      	beq.n	800a0f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	7c12      	ldrb	r2, [r2, #16]
 800a0e4:	f107 0108 	add.w	r1, r7, #8
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	4798      	blx	r3
 800a0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ee:	e091      	b.n	800a214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fa94 	bl	800a620 <USBD_CtlError>
            err++;
 800a0f8:	7afb      	ldrb	r3, [r7, #11]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0fe:	e089      	b.n	800a214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00b      	beq.n	800a124 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	7c12      	ldrb	r2, [r2, #16]
 800a118:	f107 0108 	add.w	r1, r7, #8
 800a11c:	4610      	mov	r0, r2
 800a11e:	4798      	blx	r3
 800a120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a122:	e077      	b.n	800a214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fa7a 	bl	800a620 <USBD_CtlError>
            err++;
 800a12c:	7afb      	ldrb	r3, [r7, #11]
 800a12e:	3301      	adds	r3, #1
 800a130:	72fb      	strb	r3, [r7, #11]
          break;
 800a132:	e06f      	b.n	800a214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00b      	beq.n	800a158 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	7c12      	ldrb	r2, [r2, #16]
 800a14c:	f107 0108 	add.w	r1, r7, #8
 800a150:	4610      	mov	r0, r2
 800a152:	4798      	blx	r3
 800a154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a156:	e05d      	b.n	800a214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fa60 	bl	800a620 <USBD_CtlError>
            err++;
 800a160:	7afb      	ldrb	r3, [r7, #11]
 800a162:	3301      	adds	r3, #1
 800a164:	72fb      	strb	r3, [r7, #11]
          break;
 800a166:	e055      	b.n	800a214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00b      	beq.n	800a18c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	7c12      	ldrb	r2, [r2, #16]
 800a180:	f107 0108 	add.w	r1, r7, #8
 800a184:	4610      	mov	r0, r2
 800a186:	4798      	blx	r3
 800a188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a18a:	e043      	b.n	800a214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a18c:	6839      	ldr	r1, [r7, #0]
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 fa46 	bl	800a620 <USBD_CtlError>
            err++;
 800a194:	7afb      	ldrb	r3, [r7, #11]
 800a196:	3301      	adds	r3, #1
 800a198:	72fb      	strb	r3, [r7, #11]
          break;
 800a19a:	e03b      	b.n	800a214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1a2:	695b      	ldr	r3, [r3, #20]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00b      	beq.n	800a1c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1ae:	695b      	ldr	r3, [r3, #20]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	7c12      	ldrb	r2, [r2, #16]
 800a1b4:	f107 0108 	add.w	r1, r7, #8
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	4798      	blx	r3
 800a1bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1be:	e029      	b.n	800a214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 fa2c 	bl	800a620 <USBD_CtlError>
            err++;
 800a1c8:	7afb      	ldrb	r3, [r7, #11]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ce:	e021      	b.n	800a214 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1d6:	699b      	ldr	r3, [r3, #24]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00b      	beq.n	800a1f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	7c12      	ldrb	r2, [r2, #16]
 800a1e8:	f107 0108 	add.w	r1, r7, #8
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	4798      	blx	r3
 800a1f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1f2:	e00f      	b.n	800a214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1f4:	6839      	ldr	r1, [r7, #0]
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fa12 	bl	800a620 <USBD_CtlError>
            err++;
 800a1fc:	7afb      	ldrb	r3, [r7, #11]
 800a1fe:	3301      	adds	r3, #1
 800a200:	72fb      	strb	r3, [r7, #11]
          break;
 800a202:	e007      	b.n	800a214 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fa0a 	bl	800a620 <USBD_CtlError>
          err++;
 800a20c:	7afb      	ldrb	r3, [r7, #11]
 800a20e:	3301      	adds	r3, #1
 800a210:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a212:	e038      	b.n	800a286 <USBD_GetDescriptor+0x286>
 800a214:	e037      	b.n	800a286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	7c1b      	ldrb	r3, [r3, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d109      	bne.n	800a232 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a226:	f107 0208 	add.w	r2, r7, #8
 800a22a:	4610      	mov	r0, r2
 800a22c:	4798      	blx	r3
 800a22e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a230:	e029      	b.n	800a286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a232:	6839      	ldr	r1, [r7, #0]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f9f3 	bl	800a620 <USBD_CtlError>
        err++;
 800a23a:	7afb      	ldrb	r3, [r7, #11]
 800a23c:	3301      	adds	r3, #1
 800a23e:	72fb      	strb	r3, [r7, #11]
      break;
 800a240:	e021      	b.n	800a286 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	7c1b      	ldrb	r3, [r3, #16]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10d      	bne.n	800a266 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a252:	f107 0208 	add.w	r2, r7, #8
 800a256:	4610      	mov	r0, r2
 800a258:	4798      	blx	r3
 800a25a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	3301      	adds	r3, #1
 800a260:	2207      	movs	r2, #7
 800a262:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a264:	e00f      	b.n	800a286 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f9d9 	bl	800a620 <USBD_CtlError>
        err++;
 800a26e:	7afb      	ldrb	r3, [r7, #11]
 800a270:	3301      	adds	r3, #1
 800a272:	72fb      	strb	r3, [r7, #11]
      break;
 800a274:	e007      	b.n	800a286 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f9d1 	bl	800a620 <USBD_CtlError>
      err++;
 800a27e:	7afb      	ldrb	r3, [r7, #11]
 800a280:	3301      	adds	r3, #1
 800a282:	72fb      	strb	r3, [r7, #11]
      break;
 800a284:	bf00      	nop
  }

  if (err != 0U)
 800a286:	7afb      	ldrb	r3, [r7, #11]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d11c      	bne.n	800a2c6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a28c:	893b      	ldrh	r3, [r7, #8]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d011      	beq.n	800a2b6 <USBD_GetDescriptor+0x2b6>
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	88db      	ldrh	r3, [r3, #6]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00d      	beq.n	800a2b6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	88da      	ldrh	r2, [r3, #6]
 800a29e:	893b      	ldrh	r3, [r7, #8]
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	bf28      	it	cs
 800a2a4:	4613      	movcs	r3, r2
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2aa:	893b      	ldrh	r3, [r7, #8]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	68f9      	ldr	r1, [r7, #12]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fa1f 	bl	800a6f4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	88db      	ldrh	r3, [r3, #6]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d104      	bne.n	800a2c8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fa76 	bl	800a7b0 <USBD_CtlSendStatus>
 800a2c4:	e000      	b.n	800a2c8 <USBD_GetDescriptor+0x2c8>
    return;
 800a2c6:	bf00      	nop
    }
  }
}
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop

0800a2d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	889b      	ldrh	r3, [r3, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d130      	bne.n	800a344 <USBD_SetAddress+0x74>
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	88db      	ldrh	r3, [r3, #6]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d12c      	bne.n	800a344 <USBD_SetAddress+0x74>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	885b      	ldrh	r3, [r3, #2]
 800a2ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800a2f0:	d828      	bhi.n	800a344 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	885b      	ldrh	r3, [r3, #2]
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a304:	2b03      	cmp	r3, #3
 800a306:	d104      	bne.n	800a312 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f988 	bl	800a620 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a310:	e01d      	b.n	800a34e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	7bfa      	ldrb	r2, [r7, #15]
 800a316:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a31a:	7bfb      	ldrb	r3, [r7, #15]
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fe1d 	bl	800af5e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fa43 	bl	800a7b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d004      	beq.n	800a33a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2202      	movs	r2, #2
 800a334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a338:	e009      	b.n	800a34e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a342:	e004      	b.n	800a34e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f96a 	bl	800a620 <USBD_CtlError>
  }
}
 800a34c:	bf00      	nop
 800a34e:	bf00      	nop
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
	...

0800a358 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	885b      	ldrh	r3, [r3, #2]
 800a366:	b2da      	uxtb	r2, r3
 800a368:	4b41      	ldr	r3, [pc, #260]	@ (800a470 <USBD_SetConfig+0x118>)
 800a36a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a36c:	4b40      	ldr	r3, [pc, #256]	@ (800a470 <USBD_SetConfig+0x118>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d904      	bls.n	800a37e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f952 	bl	800a620 <USBD_CtlError>
 800a37c:	e075      	b.n	800a46a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a384:	2b02      	cmp	r3, #2
 800a386:	d002      	beq.n	800a38e <USBD_SetConfig+0x36>
 800a388:	2b03      	cmp	r3, #3
 800a38a:	d023      	beq.n	800a3d4 <USBD_SetConfig+0x7c>
 800a38c:	e062      	b.n	800a454 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a38e:	4b38      	ldr	r3, [pc, #224]	@ (800a470 <USBD_SetConfig+0x118>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d01a      	beq.n	800a3cc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a396:	4b36      	ldr	r3, [pc, #216]	@ (800a470 <USBD_SetConfig+0x118>)
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	461a      	mov	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2203      	movs	r2, #3
 800a3a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a3a8:	4b31      	ldr	r3, [pc, #196]	@ (800a470 <USBD_SetConfig+0x118>)
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7ff f9e8 	bl	8009784 <USBD_SetClassConfig>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d104      	bne.n	800a3c4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f92f 	bl	800a620 <USBD_CtlError>
            return;
 800a3c2:	e052      	b.n	800a46a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f9f3 	bl	800a7b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a3ca:	e04e      	b.n	800a46a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f9ef 	bl	800a7b0 <USBD_CtlSendStatus>
        break;
 800a3d2:	e04a      	b.n	800a46a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a3d4:	4b26      	ldr	r3, [pc, #152]	@ (800a470 <USBD_SetConfig+0x118>)
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d112      	bne.n	800a402 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2202      	movs	r2, #2
 800a3e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a3e4:	4b22      	ldr	r3, [pc, #136]	@ (800a470 <USBD_SetConfig+0x118>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a3ee:	4b20      	ldr	r3, [pc, #128]	@ (800a470 <USBD_SetConfig+0x118>)
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7ff f9e4 	bl	80097c2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f9d8 	bl	800a7b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a400:	e033      	b.n	800a46a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a402:	4b1b      	ldr	r3, [pc, #108]	@ (800a470 <USBD_SetConfig+0x118>)
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d01d      	beq.n	800a44c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff f9d2 	bl	80097c2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a41e:	4b14      	ldr	r3, [pc, #80]	@ (800a470 <USBD_SetConfig+0x118>)
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a428:	4b11      	ldr	r3, [pc, #68]	@ (800a470 <USBD_SetConfig+0x118>)
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	4619      	mov	r1, r3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7ff f9a8 	bl	8009784 <USBD_SetClassConfig>
 800a434:	4603      	mov	r3, r0
 800a436:	2b02      	cmp	r3, #2
 800a438:	d104      	bne.n	800a444 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f8ef 	bl	800a620 <USBD_CtlError>
            return;
 800a442:	e012      	b.n	800a46a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f9b3 	bl	800a7b0 <USBD_CtlSendStatus>
        break;
 800a44a:	e00e      	b.n	800a46a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f9af 	bl	800a7b0 <USBD_CtlSendStatus>
        break;
 800a452:	e00a      	b.n	800a46a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a454:	6839      	ldr	r1, [r7, #0]
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f000 f8e2 	bl	800a620 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a45c:	4b04      	ldr	r3, [pc, #16]	@ (800a470 <USBD_SetConfig+0x118>)
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7ff f9ad 	bl	80097c2 <USBD_ClrClassConfig>
        break;
 800a468:	bf00      	nop
    }
  }
}
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	200003a0 	.word	0x200003a0

0800a474 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	88db      	ldrh	r3, [r3, #6]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d004      	beq.n	800a490 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f8c9 	bl	800a620 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a48e:	e022      	b.n	800a4d6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a496:	2b02      	cmp	r3, #2
 800a498:	dc02      	bgt.n	800a4a0 <USBD_GetConfig+0x2c>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	dc03      	bgt.n	800a4a6 <USBD_GetConfig+0x32>
 800a49e:	e015      	b.n	800a4cc <USBD_GetConfig+0x58>
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d00b      	beq.n	800a4bc <USBD_GetConfig+0x48>
 800a4a4:	e012      	b.n	800a4cc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f91d 	bl	800a6f4 <USBD_CtlSendData>
        break;
 800a4ba:	e00c      	b.n	800a4d6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	3304      	adds	r3, #4
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 f915 	bl	800a6f4 <USBD_CtlSendData>
        break;
 800a4ca:	e004      	b.n	800a4d6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a4cc:	6839      	ldr	r1, [r7, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f8a6 	bl	800a620 <USBD_CtlError>
        break;
 800a4d4:	bf00      	nop
}
 800a4d6:	bf00      	nop
 800a4d8:	3708      	adds	r7, #8
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b082      	sub	sp, #8
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d81e      	bhi.n	800a532 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	88db      	ldrh	r3, [r3, #6]
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d004      	beq.n	800a506 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a4fc:	6839      	ldr	r1, [r7, #0]
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 f88e 	bl	800a620 <USBD_CtlError>
        break;
 800a504:	e01a      	b.n	800a53c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a512:	2b00      	cmp	r3, #0
 800a514:	d005      	beq.n	800a522 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	f043 0202 	orr.w	r2, r3, #2
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	330c      	adds	r3, #12
 800a526:	2202      	movs	r2, #2
 800a528:	4619      	mov	r1, r3
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f8e2 	bl	800a6f4 <USBD_CtlSendData>
      break;
 800a530:	e004      	b.n	800a53c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a532:	6839      	ldr	r1, [r7, #0]
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 f873 	bl	800a620 <USBD_CtlError>
      break;
 800a53a:	bf00      	nop
  }
}
 800a53c:	bf00      	nop
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	885b      	ldrh	r3, [r3, #2]
 800a552:	2b01      	cmp	r3, #1
 800a554:	d106      	bne.n	800a564 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f926 	bl	800a7b0 <USBD_CtlSendStatus>
  }
}
 800a564:	bf00      	nop
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a57c:	3b01      	subs	r3, #1
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d80b      	bhi.n	800a59a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	885b      	ldrh	r3, [r3, #2]
 800a586:	2b01      	cmp	r3, #1
 800a588:	d10c      	bne.n	800a5a4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f90c 	bl	800a7b0 <USBD_CtlSendStatus>
      }
      break;
 800a598:	e004      	b.n	800a5a4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f83f 	bl	800a620 <USBD_CtlError>
      break;
 800a5a2:	e000      	b.n	800a5a6 <USBD_ClrFeature+0x3a>
      break;
 800a5a4:	bf00      	nop
  }
}
 800a5a6:	bf00      	nop
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	781a      	ldrb	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	785a      	ldrb	r2, [r3, #1]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	3302      	adds	r3, #2
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	3303      	adds	r3, #3
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	021b      	lsls	r3, r3, #8
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	4413      	add	r3, r2
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	3305      	adds	r3, #5
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	021b      	lsls	r3, r3, #8
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	4413      	add	r3, r2
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	3306      	adds	r3, #6
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	461a      	mov	r2, r3
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	3307      	adds	r3, #7
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	021b      	lsls	r3, r3, #8
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	4413      	add	r3, r2
 800a610:	b29a      	uxth	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	80da      	strh	r2, [r3, #6]

}
 800a616:	bf00      	nop
 800a618:	370c      	adds	r7, #12
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bc80      	pop	{r7}
 800a61e:	4770      	bx	lr

0800a620 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a62a:	2180      	movs	r1, #128	@ 0x80
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 fc2d 	bl	800ae8c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a632:	2100      	movs	r1, #0
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fc29 	bl	800ae8c <USBD_LL_StallEP>
}
 800a63a:	bf00      	nop
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b086      	sub	sp, #24
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	60b9      	str	r1, [r7, #8]
 800a64c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a64e:	2300      	movs	r3, #0
 800a650:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d032      	beq.n	800a6be <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 f834 	bl	800a6c6 <USBD_GetLen>
 800a65e:	4603      	mov	r3, r0
 800a660:	3301      	adds	r3, #1
 800a662:	b29b      	uxth	r3, r3
 800a664:	005b      	lsls	r3, r3, #1
 800a666:	b29a      	uxth	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a66c:	7dfb      	ldrb	r3, [r7, #23]
 800a66e:	1c5a      	adds	r2, r3, #1
 800a670:	75fa      	strb	r2, [r7, #23]
 800a672:	461a      	mov	r2, r3
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	4413      	add	r3, r2
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	7812      	ldrb	r2, [r2, #0]
 800a67c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a67e:	7dfb      	ldrb	r3, [r7, #23]
 800a680:	1c5a      	adds	r2, r3, #1
 800a682:	75fa      	strb	r2, [r7, #23]
 800a684:	461a      	mov	r2, r3
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	4413      	add	r3, r2
 800a68a:	2203      	movs	r2, #3
 800a68c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a68e:	e012      	b.n	800a6b6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	60fa      	str	r2, [r7, #12]
 800a696:	7dfa      	ldrb	r2, [r7, #23]
 800a698:	1c51      	adds	r1, r2, #1
 800a69a:	75f9      	strb	r1, [r7, #23]
 800a69c:	4611      	mov	r1, r2
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	440a      	add	r2, r1
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a6a6:	7dfb      	ldrb	r3, [r7, #23]
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	75fa      	strb	r2, [r7, #23]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d1e8      	bne.n	800a690 <USBD_GetString+0x4e>
    }
  }
}
 800a6be:	bf00      	nop
 800a6c0:	3718      	adds	r7, #24
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b085      	sub	sp, #20
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a6d2:	e005      	b.n	800a6e0 <USBD_GetLen+0x1a>
  {
    len++;
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1f5      	bne.n	800a6d4 <USBD_GetLen+0xe>
  }

  return len;
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bc80      	pop	{r7}
 800a6f2:	4770      	bx	lr

0800a6f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	4613      	mov	r3, r2
 800a700:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2202      	movs	r2, #2
 800a706:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a70a:	88fa      	ldrh	r2, [r7, #6]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a710:	88fa      	ldrh	r2, [r7, #6]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a716:	88fb      	ldrh	r3, [r7, #6]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	2100      	movs	r1, #0
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f000 fc3d 	bl	800af9c <USBD_LL_Transmit>

  return USBD_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	4613      	mov	r3, r2
 800a738:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a73a:	88fb      	ldrh	r3, [r7, #6]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	2100      	movs	r1, #0
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 fc2b 	bl	800af9c <USBD_LL_Transmit>

  return USBD_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	4613      	mov	r3, r2
 800a75c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2203      	movs	r2, #3
 800a762:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a766:	88fa      	ldrh	r2, [r7, #6]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a76e:	88fa      	ldrh	r2, [r7, #6]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a776:	88fb      	ldrh	r3, [r7, #6]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	2100      	movs	r1, #0
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f000 fc30 	bl	800afe2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	4613      	mov	r3, r2
 800a798:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a79a:	88fb      	ldrh	r3, [r7, #6]
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	2100      	movs	r1, #0
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 fc1e 	bl	800afe2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2204      	movs	r2, #4
 800a7bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fbe8 	bl	800af9c <USBD_LL_Transmit>

  return USBD_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b082      	sub	sp, #8
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2205      	movs	r2, #5
 800a7e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fbf8 	bl	800afe2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a800:	2200      	movs	r2, #0
 800a802:	4912      	ldr	r1, [pc, #72]	@ (800a84c <MX_USB_DEVICE_Init+0x50>)
 800a804:	4812      	ldr	r0, [pc, #72]	@ (800a850 <MX_USB_DEVICE_Init+0x54>)
 800a806:	f7fe ff63 	bl	80096d0 <USBD_Init>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d001      	beq.n	800a814 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a810:	f7f6 fc06 	bl	8001020 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a814:	490f      	ldr	r1, [pc, #60]	@ (800a854 <MX_USB_DEVICE_Init+0x58>)
 800a816:	480e      	ldr	r0, [pc, #56]	@ (800a850 <MX_USB_DEVICE_Init+0x54>)
 800a818:	f7fe ff85 	bl	8009726 <USBD_RegisterClass>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d001      	beq.n	800a826 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a822:	f7f6 fbfd 	bl	8001020 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a826:	490c      	ldr	r1, [pc, #48]	@ (800a858 <MX_USB_DEVICE_Init+0x5c>)
 800a828:	4809      	ldr	r0, [pc, #36]	@ (800a850 <MX_USB_DEVICE_Init+0x54>)
 800a82a:	f7fe fee5 	bl	80095f8 <USBD_CDC_RegisterInterface>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a834:	f7f6 fbf4 	bl	8001020 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a838:	4805      	ldr	r0, [pc, #20]	@ (800a850 <MX_USB_DEVICE_Init+0x54>)
 800a83a:	f7fe ff8d 	bl	8009758 <USBD_Start>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a844:	f7f6 fbec 	bl	8001020 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a848:	bf00      	nop
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	2000012c 	.word	0x2000012c
 800a850:	200003a4 	.word	0x200003a4
 800a854:	20000018 	.word	0x20000018
 800a858:	2000011c 	.word	0x2000011c

0800a85c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a860:	2200      	movs	r2, #0
 800a862:	4905      	ldr	r1, [pc, #20]	@ (800a878 <CDC_Init_FS+0x1c>)
 800a864:	4805      	ldr	r0, [pc, #20]	@ (800a87c <CDC_Init_FS+0x20>)
 800a866:	f7fe fedd 	bl	8009624 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a86a:	4905      	ldr	r1, [pc, #20]	@ (800a880 <CDC_Init_FS+0x24>)
 800a86c:	4803      	ldr	r0, [pc, #12]	@ (800a87c <CDC_Init_FS+0x20>)
 800a86e:	f7fe fef2 	bl	8009656 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a872:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a874:	4618      	mov	r0, r3
 800a876:	bd80      	pop	{r7, pc}
 800a878:	20000a68 	.word	0x20000a68
 800a87c:	200003a4 	.word	0x200003a4
 800a880:	20000668 	.word	0x20000668

0800a884 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a884:	b480      	push	{r7}
 800a886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a888:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bc80      	pop	{r7}
 800a890:	4770      	bx	lr
	...

0800a894 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	6039      	str	r1, [r7, #0]
 800a89e:	71fb      	strb	r3, [r7, #7]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a8a4:	79fb      	ldrb	r3, [r7, #7]
 800a8a6:	2b23      	cmp	r3, #35	@ 0x23
 800a8a8:	d84a      	bhi.n	800a940 <CDC_Control_FS+0xac>
 800a8aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a8b0 <CDC_Control_FS+0x1c>)
 800a8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b0:	0800a941 	.word	0x0800a941
 800a8b4:	0800a941 	.word	0x0800a941
 800a8b8:	0800a941 	.word	0x0800a941
 800a8bc:	0800a941 	.word	0x0800a941
 800a8c0:	0800a941 	.word	0x0800a941
 800a8c4:	0800a941 	.word	0x0800a941
 800a8c8:	0800a941 	.word	0x0800a941
 800a8cc:	0800a941 	.word	0x0800a941
 800a8d0:	0800a941 	.word	0x0800a941
 800a8d4:	0800a941 	.word	0x0800a941
 800a8d8:	0800a941 	.word	0x0800a941
 800a8dc:	0800a941 	.word	0x0800a941
 800a8e0:	0800a941 	.word	0x0800a941
 800a8e4:	0800a941 	.word	0x0800a941
 800a8e8:	0800a941 	.word	0x0800a941
 800a8ec:	0800a941 	.word	0x0800a941
 800a8f0:	0800a941 	.word	0x0800a941
 800a8f4:	0800a941 	.word	0x0800a941
 800a8f8:	0800a941 	.word	0x0800a941
 800a8fc:	0800a941 	.word	0x0800a941
 800a900:	0800a941 	.word	0x0800a941
 800a904:	0800a941 	.word	0x0800a941
 800a908:	0800a941 	.word	0x0800a941
 800a90c:	0800a941 	.word	0x0800a941
 800a910:	0800a941 	.word	0x0800a941
 800a914:	0800a941 	.word	0x0800a941
 800a918:	0800a941 	.word	0x0800a941
 800a91c:	0800a941 	.word	0x0800a941
 800a920:	0800a941 	.word	0x0800a941
 800a924:	0800a941 	.word	0x0800a941
 800a928:	0800a941 	.word	0x0800a941
 800a92c:	0800a941 	.word	0x0800a941
 800a930:	0800a941 	.word	0x0800a941
 800a934:	0800a941 	.word	0x0800a941
 800a938:	0800a941 	.word	0x0800a941
 800a93c:	0800a941 	.word	0x0800a941
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a940:	bf00      	nop
  }

  return (USBD_OK);
 800a942:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a944:	4618      	mov	r0, r3
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	bc80      	pop	{r7}
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop

0800a950 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a95a:	6879      	ldr	r1, [r7, #4]
 800a95c:	4805      	ldr	r0, [pc, #20]	@ (800a974 <CDC_Receive_FS+0x24>)
 800a95e:	f7fe fe7a 	bl	8009656 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a962:	4804      	ldr	r0, [pc, #16]	@ (800a974 <CDC_Receive_FS+0x24>)
 800a964:	f7fe fe8a 	bl	800967c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a968:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	200003a4 	.word	0x200003a4

0800a978 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	4603      	mov	r3, r0
 800a980:	6039      	str	r1, [r7, #0]
 800a982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2212      	movs	r2, #18
 800a988:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a98a:	4b03      	ldr	r3, [pc, #12]	@ (800a998 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	bc80      	pop	{r7}
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	20000148 	.word	0x20000148

0800a99c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	6039      	str	r1, [r7, #0]
 800a9a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	2204      	movs	r2, #4
 800a9ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a9ae:	4b03      	ldr	r3, [pc, #12]	@ (800a9bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bc80      	pop	{r7}
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	2000015c 	.word	0x2000015c

0800a9c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	6039      	str	r1, [r7, #0]
 800a9ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9cc:	79fb      	ldrb	r3, [r7, #7]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d105      	bne.n	800a9de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	4907      	ldr	r1, [pc, #28]	@ (800a9f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a9d6:	4808      	ldr	r0, [pc, #32]	@ (800a9f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9d8:	f7ff fe33 	bl	800a642 <USBD_GetString>
 800a9dc:	e004      	b.n	800a9e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	4904      	ldr	r1, [pc, #16]	@ (800a9f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a9e2:	4805      	ldr	r0, [pc, #20]	@ (800a9f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9e4:	f7ff fe2d 	bl	800a642 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9e8:	4b02      	ldr	r3, [pc, #8]	@ (800a9f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	20000e68 	.word	0x20000e68
 800a9f8:	0800bb34 	.word	0x0800bb34

0800a9fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	4603      	mov	r3, r0
 800aa04:	6039      	str	r1, [r7, #0]
 800aa06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	4904      	ldr	r1, [pc, #16]	@ (800aa1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa0c:	4804      	ldr	r0, [pc, #16]	@ (800aa20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa0e:	f7ff fe18 	bl	800a642 <USBD_GetString>
  return USBD_StrDesc;
 800aa12:	4b02      	ldr	r3, [pc, #8]	@ (800aa1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	20000e68 	.word	0x20000e68
 800aa20:	0800bb4c 	.word	0x0800bb4c

0800aa24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	6039      	str	r1, [r7, #0]
 800aa2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	221a      	movs	r2, #26
 800aa34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa36:	f000 f843 	bl	800aac0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa3a:	4b02      	ldr	r3, [pc, #8]	@ (800aa44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	20000160 	.word	0x20000160

0800aa48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	4603      	mov	r3, r0
 800aa50:	6039      	str	r1, [r7, #0]
 800aa52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa54:	79fb      	ldrb	r3, [r7, #7]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d105      	bne.n	800aa66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	4907      	ldr	r1, [pc, #28]	@ (800aa7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa5e:	4808      	ldr	r0, [pc, #32]	@ (800aa80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa60:	f7ff fdef 	bl	800a642 <USBD_GetString>
 800aa64:	e004      	b.n	800aa70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	4904      	ldr	r1, [pc, #16]	@ (800aa7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa6a:	4805      	ldr	r0, [pc, #20]	@ (800aa80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa6c:	f7ff fde9 	bl	800a642 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa70:	4b02      	ldr	r3, [pc, #8]	@ (800aa7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20000e68 	.word	0x20000e68
 800aa80:	0800bb60 	.word	0x0800bb60

0800aa84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	6039      	str	r1, [r7, #0]
 800aa8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa90:	79fb      	ldrb	r3, [r7, #7]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d105      	bne.n	800aaa2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	4907      	ldr	r1, [pc, #28]	@ (800aab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa9a:	4808      	ldr	r0, [pc, #32]	@ (800aabc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa9c:	f7ff fdd1 	bl	800a642 <USBD_GetString>
 800aaa0:	e004      	b.n	800aaac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	4904      	ldr	r1, [pc, #16]	@ (800aab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaa6:	4805      	ldr	r0, [pc, #20]	@ (800aabc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaa8:	f7ff fdcb 	bl	800a642 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaac:	4b02      	ldr	r3, [pc, #8]	@ (800aab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3708      	adds	r7, #8
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	20000e68 	.word	0x20000e68
 800aabc:	0800bb6c 	.word	0x0800bb6c

0800aac0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aac6:	4b0f      	ldr	r3, [pc, #60]	@ (800ab04 <Get_SerialNum+0x44>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aacc:	4b0e      	ldr	r3, [pc, #56]	@ (800ab08 <Get_SerialNum+0x48>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aad2:	4b0e      	ldr	r3, [pc, #56]	@ (800ab0c <Get_SerialNum+0x4c>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4413      	add	r3, r2
 800aade:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d009      	beq.n	800aafa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aae6:	2208      	movs	r2, #8
 800aae8:	4909      	ldr	r1, [pc, #36]	@ (800ab10 <Get_SerialNum+0x50>)
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f000 f814 	bl	800ab18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aaf0:	2204      	movs	r2, #4
 800aaf2:	4908      	ldr	r1, [pc, #32]	@ (800ab14 <Get_SerialNum+0x54>)
 800aaf4:	68b8      	ldr	r0, [r7, #8]
 800aaf6:	f000 f80f 	bl	800ab18 <IntToUnicode>
  }
}
 800aafa:	bf00      	nop
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	1ffff7e8 	.word	0x1ffff7e8
 800ab08:	1ffff7ec 	.word	0x1ffff7ec
 800ab0c:	1ffff7f0 	.word	0x1ffff7f0
 800ab10:	20000162 	.word	0x20000162
 800ab14:	20000172 	.word	0x20000172

0800ab18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b087      	sub	sp, #28
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	4613      	mov	r3, r2
 800ab24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	75fb      	strb	r3, [r7, #23]
 800ab2e:	e027      	b.n	800ab80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	0f1b      	lsrs	r3, r3, #28
 800ab34:	2b09      	cmp	r3, #9
 800ab36:	d80b      	bhi.n	800ab50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	0f1b      	lsrs	r3, r3, #28
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	7dfb      	ldrb	r3, [r7, #23]
 800ab40:	005b      	lsls	r3, r3, #1
 800ab42:	4619      	mov	r1, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	440b      	add	r3, r1
 800ab48:	3230      	adds	r2, #48	@ 0x30
 800ab4a:	b2d2      	uxtb	r2, r2
 800ab4c:	701a      	strb	r2, [r3, #0]
 800ab4e:	e00a      	b.n	800ab66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	0f1b      	lsrs	r3, r3, #28
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	7dfb      	ldrb	r3, [r7, #23]
 800ab58:	005b      	lsls	r3, r3, #1
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	440b      	add	r3, r1
 800ab60:	3237      	adds	r2, #55	@ 0x37
 800ab62:	b2d2      	uxtb	r2, r2
 800ab64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	011b      	lsls	r3, r3, #4
 800ab6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	3301      	adds	r3, #1
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	4413      	add	r3, r2
 800ab76:	2200      	movs	r2, #0
 800ab78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab7a:	7dfb      	ldrb	r3, [r7, #23]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	75fb      	strb	r3, [r7, #23]
 800ab80:	7dfa      	ldrb	r2, [r7, #23]
 800ab82:	79fb      	ldrb	r3, [r7, #7]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d3d3      	bcc.n	800ab30 <IntToUnicode+0x18>
  }
}
 800ab88:	bf00      	nop
 800ab8a:	bf00      	nop
 800ab8c:	371c      	adds	r7, #28
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bc80      	pop	{r7}
 800ab92:	4770      	bx	lr

0800ab94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a0d      	ldr	r2, [pc, #52]	@ (800abd8 <HAL_PCD_MspInit+0x44>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d113      	bne.n	800abce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aba6:	4b0d      	ldr	r3, [pc, #52]	@ (800abdc <HAL_PCD_MspInit+0x48>)
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	4a0c      	ldr	r2, [pc, #48]	@ (800abdc <HAL_PCD_MspInit+0x48>)
 800abac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800abb0:	61d3      	str	r3, [r2, #28]
 800abb2:	4b0a      	ldr	r3, [pc, #40]	@ (800abdc <HAL_PCD_MspInit+0x48>)
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abba:	60fb      	str	r3, [r7, #12]
 800abbc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800abbe:	2200      	movs	r2, #0
 800abc0:	2100      	movs	r1, #0
 800abc2:	2014      	movs	r0, #20
 800abc4:	f7f7 fa73 	bl	80020ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800abc8:	2014      	movs	r0, #20
 800abca:	f7f7 fa8c 	bl	80020e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800abce:	bf00      	nop
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	40005c00 	.word	0x40005c00
 800abdc:	40021000 	.word	0x40021000

0800abe0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800abf4:	4619      	mov	r1, r3
 800abf6:	4610      	mov	r0, r2
 800abf8:	f7fe fdf6 	bl	80097e8 <USBD_LL_SetupStage>
}
 800abfc:	bf00      	nop
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ac16:	78fa      	ldrb	r2, [r7, #3]
 800ac18:	6879      	ldr	r1, [r7, #4]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	00db      	lsls	r3, r3, #3
 800ac22:	440b      	add	r3, r1
 800ac24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	78fb      	ldrb	r3, [r7, #3]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	f7fe fe28 	bl	8009882 <USBD_LL_DataOutStage>
}
 800ac32:	bf00      	nop
 800ac34:	3708      	adds	r7, #8
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b082      	sub	sp, #8
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	460b      	mov	r3, r1
 800ac44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800ac4c:	78fa      	ldrb	r2, [r7, #3]
 800ac4e:	6879      	ldr	r1, [r7, #4]
 800ac50:	4613      	mov	r3, r2
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	4413      	add	r3, r2
 800ac56:	00db      	lsls	r3, r3, #3
 800ac58:	440b      	add	r3, r1
 800ac5a:	3324      	adds	r3, #36	@ 0x24
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	78fb      	ldrb	r3, [r7, #3]
 800ac60:	4619      	mov	r1, r3
 800ac62:	f7fe fe7f 	bl	8009964 <USBD_LL_DataInStage>
}
 800ac66:	bf00      	nop
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b082      	sub	sp, #8
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fe ff8f 	bl	8009ba0 <USBD_LL_SOF>
}
 800ac82:	bf00      	nop
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac92:	2301      	movs	r3, #1
 800ac94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	799b      	ldrb	r3, [r3, #6]
 800ac9a:	2b02      	cmp	r3, #2
 800ac9c:	d001      	beq.n	800aca2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ac9e:	f7f6 f9bf 	bl	8001020 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aca8:	7bfa      	ldrb	r2, [r7, #15]
 800acaa:	4611      	mov	r1, r2
 800acac:	4618      	mov	r0, r3
 800acae:	f7fe ff3f 	bl	8009b30 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fe fef8 	bl	8009aae <USBD_LL_Reset>
}
 800acbe:	bf00      	nop
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
	...

0800acc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe ff39 	bl	8009b4e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	7a9b      	ldrb	r3, [r3, #10]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d005      	beq.n	800acf0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ace4:	4b04      	ldr	r3, [pc, #16]	@ (800acf8 <HAL_PCD_SuspendCallback+0x30>)
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	4a03      	ldr	r2, [pc, #12]	@ (800acf8 <HAL_PCD_SuspendCallback+0x30>)
 800acea:	f043 0306 	orr.w	r3, r3, #6
 800acee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800acf0:	bf00      	nop
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	e000ed00 	.word	0xe000ed00

0800acfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe ff33 	bl	8009b76 <USBD_LL_Resume>
}
 800ad10:	bf00      	nop
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ad20:	4a28      	ldr	r2, [pc, #160]	@ (800adc4 <USBD_LL_Init+0xac>)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a26      	ldr	r2, [pc, #152]	@ (800adc4 <USBD_LL_Init+0xac>)
 800ad2c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ad30:	4b24      	ldr	r3, [pc, #144]	@ (800adc4 <USBD_LL_Init+0xac>)
 800ad32:	4a25      	ldr	r2, [pc, #148]	@ (800adc8 <USBD_LL_Init+0xb0>)
 800ad34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ad36:	4b23      	ldr	r3, [pc, #140]	@ (800adc4 <USBD_LL_Init+0xac>)
 800ad38:	2208      	movs	r2, #8
 800ad3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ad3c:	4b21      	ldr	r3, [pc, #132]	@ (800adc4 <USBD_LL_Init+0xac>)
 800ad3e:	2202      	movs	r2, #2
 800ad40:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ad42:	4b20      	ldr	r3, [pc, #128]	@ (800adc4 <USBD_LL_Init+0xac>)
 800ad44:	2200      	movs	r2, #0
 800ad46:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ad48:	4b1e      	ldr	r3, [pc, #120]	@ (800adc4 <USBD_LL_Init+0xac>)
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ad4e:	4b1d      	ldr	r3, [pc, #116]	@ (800adc4 <USBD_LL_Init+0xac>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ad54:	481b      	ldr	r0, [pc, #108]	@ (800adc4 <USBD_LL_Init+0xac>)
 800ad56:	f7f8 fdb8 	bl	80038ca <HAL_PCD_Init>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ad60:	f7f6 f95e 	bl	8001020 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ad6a:	2318      	movs	r3, #24
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	2100      	movs	r1, #0
 800ad70:	f7fa fac9 	bl	8005306 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ad7a:	2358      	movs	r3, #88	@ 0x58
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	2180      	movs	r1, #128	@ 0x80
 800ad80:	f7fa fac1 	bl	8005306 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ad8a:	23c0      	movs	r3, #192	@ 0xc0
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	2181      	movs	r1, #129	@ 0x81
 800ad90:	f7fa fab9 	bl	8005306 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ad9a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2101      	movs	r1, #1
 800ada2:	f7fa fab0 	bl	8005306 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800adac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800adb0:	2200      	movs	r2, #0
 800adb2:	2182      	movs	r1, #130	@ 0x82
 800adb4:	f7fa faa7 	bl	8005306 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	20001068 	.word	0x20001068
 800adc8:	40005c00 	.word	0x40005c00

0800adcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7f8 fe67 	bl	8003ab6 <HAL_PCD_Start>
 800ade8:	4603      	mov	r3, r0
 800adea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adec:	7bfb      	ldrb	r3, [r7, #15]
 800adee:	4618      	mov	r0, r3
 800adf0:	f000 f94e 	bl	800b090 <USBD_Get_USB_Status>
 800adf4:	4603      	mov	r3, r0
 800adf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	4608      	mov	r0, r1
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	461a      	mov	r2, r3
 800ae10:	4603      	mov	r3, r0
 800ae12:	70fb      	strb	r3, [r7, #3]
 800ae14:	460b      	mov	r3, r1
 800ae16:	70bb      	strb	r3, [r7, #2]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ae2a:	78bb      	ldrb	r3, [r7, #2]
 800ae2c:	883a      	ldrh	r2, [r7, #0]
 800ae2e:	78f9      	ldrb	r1, [r7, #3]
 800ae30:	f7f8 ffbb 	bl	8003daa <HAL_PCD_EP_Open>
 800ae34:	4603      	mov	r3, r0
 800ae36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 f928 	bl	800b090 <USBD_Get_USB_Status>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b084      	sub	sp, #16
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	460b      	mov	r3, r1
 800ae58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae68:	78fa      	ldrb	r2, [r7, #3]
 800ae6a:	4611      	mov	r1, r2
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7f8 fff9 	bl	8003e64 <HAL_PCD_EP_Close>
 800ae72:	4603      	mov	r3, r0
 800ae74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 f909 	bl	800b090 <USBD_Get_USB_Status>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	460b      	mov	r3, r1
 800ae96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aea6:	78fa      	ldrb	r2, [r7, #3]
 800aea8:	4611      	mov	r1, r2
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7f9 f8a1 	bl	8003ff2 <HAL_PCD_EP_SetStall>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 f8ea 	bl	800b090 <USBD_Get_USB_Status>
 800aebc:	4603      	mov	r3, r0
 800aebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aec0:	7bbb      	ldrb	r3, [r7, #14]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b084      	sub	sp, #16
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	460b      	mov	r3, r1
 800aed4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aee4:	78fa      	ldrb	r2, [r7, #3]
 800aee6:	4611      	mov	r1, r2
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7f9 f8e2 	bl	80040b2 <HAL_PCD_EP_ClrStall>
 800aeee:	4603      	mov	r3, r0
 800aef0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f000 f8cb 	bl	800b090 <USBD_Get_USB_Status>
 800aefa:	4603      	mov	r3, r0
 800aefc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aefe:	7bbb      	ldrb	r3, [r7, #14]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af08:	b480      	push	{r7}
 800af0a:	b085      	sub	sp, #20
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af20:	2b00      	cmp	r3, #0
 800af22:	da0b      	bge.n	800af3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af24:	78fb      	ldrb	r3, [r7, #3]
 800af26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af2a:	68f9      	ldr	r1, [r7, #12]
 800af2c:	4613      	mov	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	00db      	lsls	r3, r3, #3
 800af34:	440b      	add	r3, r1
 800af36:	3312      	adds	r3, #18
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	e00b      	b.n	800af54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800af3c:	78fb      	ldrb	r3, [r7, #3]
 800af3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af42:	68f9      	ldr	r1, [r7, #12]
 800af44:	4613      	mov	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	00db      	lsls	r3, r3, #3
 800af4c:	440b      	add	r3, r1
 800af4e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800af52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af54:	4618      	mov	r0, r3
 800af56:	3714      	adds	r7, #20
 800af58:	46bd      	mov	sp, r7
 800af5a:	bc80      	pop	{r7}
 800af5c:	4770      	bx	lr

0800af5e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	460b      	mov	r3, r1
 800af68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af78:	78fa      	ldrb	r2, [r7, #3]
 800af7a:	4611      	mov	r1, r2
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7f8 fef0 	bl	8003d62 <HAL_PCD_SetAddress>
 800af82:	4603      	mov	r3, r0
 800af84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af86:	7bfb      	ldrb	r3, [r7, #15]
 800af88:	4618      	mov	r0, r3
 800af8a:	f000 f881 	bl	800b090 <USBD_Get_USB_Status>
 800af8e:	4603      	mov	r3, r0
 800af90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af92:	7bbb      	ldrb	r3, [r7, #14]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	607a      	str	r2, [r7, #4]
 800afa6:	461a      	mov	r2, r3
 800afa8:	460b      	mov	r3, r1
 800afaa:	72fb      	strb	r3, [r7, #11]
 800afac:	4613      	mov	r3, r2
 800afae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb4:	2300      	movs	r3, #0
 800afb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800afbe:	893b      	ldrh	r3, [r7, #8]
 800afc0:	7af9      	ldrb	r1, [r7, #11]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	f7f8 ffde 	bl	8003f84 <HAL_PCD_EP_Transmit>
 800afc8:	4603      	mov	r3, r0
 800afca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
 800afce:	4618      	mov	r0, r3
 800afd0:	f000 f85e 	bl	800b090 <USBD_Get_USB_Status>
 800afd4:	4603      	mov	r3, r0
 800afd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afd8:	7dbb      	ldrb	r3, [r7, #22]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b086      	sub	sp, #24
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	607a      	str	r2, [r7, #4]
 800afec:	461a      	mov	r2, r3
 800afee:	460b      	mov	r3, r1
 800aff0:	72fb      	strb	r3, [r7, #11]
 800aff2:	4613      	mov	r3, r2
 800aff4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b004:	893b      	ldrh	r3, [r7, #8]
 800b006:	7af9      	ldrb	r1, [r7, #11]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	f7f8 ff73 	bl	8003ef4 <HAL_PCD_EP_Receive>
 800b00e:	4603      	mov	r3, r0
 800b010:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b012:	7dfb      	ldrb	r3, [r7, #23]
 800b014:	4618      	mov	r0, r3
 800b016:	f000 f83b 	bl	800b090 <USBD_Get_USB_Status>
 800b01a:	4603      	mov	r3, r0
 800b01c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b01e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	460b      	mov	r3, r1
 800b032:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b03a:	78fa      	ldrb	r2, [r7, #3]
 800b03c:	4611      	mov	r1, r2
 800b03e:	4618      	mov	r0, r3
 800b040:	f7f8 ff89 	bl	8003f56 <HAL_PCD_EP_GetRxCount>
 800b044:	4603      	mov	r3, r0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
	...

0800b050 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b058:	4b02      	ldr	r3, [pc, #8]	@ (800b064 <USBD_static_malloc+0x14>)
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	bc80      	pop	{r7}
 800b062:	4770      	bx	lr
 800b064:	20001340 	.word	0x20001340

0800b068 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]

}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	bc80      	pop	{r7}
 800b078:	4770      	bx	lr

0800b07a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b07a:	b480      	push	{r7}
 800b07c:	b083      	sub	sp, #12
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	460b      	mov	r3, r1
 800b084:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b086:	bf00      	nop
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bc80      	pop	{r7}
 800b08e:	4770      	bx	lr

0800b090 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	4603      	mov	r3, r0
 800b098:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b09a:	2300      	movs	r3, #0
 800b09c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b09e:	79fb      	ldrb	r3, [r7, #7]
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	d817      	bhi.n	800b0d4 <USBD_Get_USB_Status+0x44>
 800b0a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b0ac <USBD_Get_USB_Status+0x1c>)
 800b0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0aa:	bf00      	nop
 800b0ac:	0800b0bd 	.word	0x0800b0bd
 800b0b0:	0800b0c3 	.word	0x0800b0c3
 800b0b4:	0800b0c9 	.word	0x0800b0c9
 800b0b8:	0800b0cf 	.word	0x0800b0cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73fb      	strb	r3, [r7, #15]
    break;
 800b0c0:	e00b      	b.n	800b0da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b0c6:	e008      	b.n	800b0da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b0cc:	e005      	b.n	800b0da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d2:	e002      	b.n	800b0da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b0d4:	2302      	movs	r3, #2
 800b0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b0d8:	bf00      	nop
  }
  return usb_status;
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3714      	adds	r7, #20
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bc80      	pop	{r7}
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop

0800b0e8 <sniprintf>:
 800b0e8:	b40c      	push	{r2, r3}
 800b0ea:	b530      	push	{r4, r5, lr}
 800b0ec:	4b17      	ldr	r3, [pc, #92]	@ (800b14c <sniprintf+0x64>)
 800b0ee:	1e0c      	subs	r4, r1, #0
 800b0f0:	681d      	ldr	r5, [r3, #0]
 800b0f2:	b09d      	sub	sp, #116	@ 0x74
 800b0f4:	da08      	bge.n	800b108 <sniprintf+0x20>
 800b0f6:	238b      	movs	r3, #139	@ 0x8b
 800b0f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0fc:	602b      	str	r3, [r5, #0]
 800b0fe:	b01d      	add	sp, #116	@ 0x74
 800b100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b104:	b002      	add	sp, #8
 800b106:	4770      	bx	lr
 800b108:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b10c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b110:	bf0c      	ite	eq
 800b112:	4623      	moveq	r3, r4
 800b114:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b118:	9304      	str	r3, [sp, #16]
 800b11a:	9307      	str	r3, [sp, #28]
 800b11c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b120:	9002      	str	r0, [sp, #8]
 800b122:	9006      	str	r0, [sp, #24]
 800b124:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b128:	4628      	mov	r0, r5
 800b12a:	ab21      	add	r3, sp, #132	@ 0x84
 800b12c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b12e:	a902      	add	r1, sp, #8
 800b130:	9301      	str	r3, [sp, #4]
 800b132:	f000 f89d 	bl	800b270 <_svfiprintf_r>
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	bfbc      	itt	lt
 800b13a:	238b      	movlt	r3, #139	@ 0x8b
 800b13c:	602b      	strlt	r3, [r5, #0]
 800b13e:	2c00      	cmp	r4, #0
 800b140:	d0dd      	beq.n	800b0fe <sniprintf+0x16>
 800b142:	2200      	movs	r2, #0
 800b144:	9b02      	ldr	r3, [sp, #8]
 800b146:	701a      	strb	r2, [r3, #0]
 800b148:	e7d9      	b.n	800b0fe <sniprintf+0x16>
 800b14a:	bf00      	nop
 800b14c:	2000017c 	.word	0x2000017c

0800b150 <memset>:
 800b150:	4603      	mov	r3, r0
 800b152:	4402      	add	r2, r0
 800b154:	4293      	cmp	r3, r2
 800b156:	d100      	bne.n	800b15a <memset+0xa>
 800b158:	4770      	bx	lr
 800b15a:	f803 1b01 	strb.w	r1, [r3], #1
 800b15e:	e7f9      	b.n	800b154 <memset+0x4>

0800b160 <__errno>:
 800b160:	4b01      	ldr	r3, [pc, #4]	@ (800b168 <__errno+0x8>)
 800b162:	6818      	ldr	r0, [r3, #0]
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	2000017c 	.word	0x2000017c

0800b16c <__libc_init_array>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	2600      	movs	r6, #0
 800b170:	4d0c      	ldr	r5, [pc, #48]	@ (800b1a4 <__libc_init_array+0x38>)
 800b172:	4c0d      	ldr	r4, [pc, #52]	@ (800b1a8 <__libc_init_array+0x3c>)
 800b174:	1b64      	subs	r4, r4, r5
 800b176:	10a4      	asrs	r4, r4, #2
 800b178:	42a6      	cmp	r6, r4
 800b17a:	d109      	bne.n	800b190 <__libc_init_array+0x24>
 800b17c:	f000 fc78 	bl	800ba70 <_init>
 800b180:	2600      	movs	r6, #0
 800b182:	4d0a      	ldr	r5, [pc, #40]	@ (800b1ac <__libc_init_array+0x40>)
 800b184:	4c0a      	ldr	r4, [pc, #40]	@ (800b1b0 <__libc_init_array+0x44>)
 800b186:	1b64      	subs	r4, r4, r5
 800b188:	10a4      	asrs	r4, r4, #2
 800b18a:	42a6      	cmp	r6, r4
 800b18c:	d105      	bne.n	800b19a <__libc_init_array+0x2e>
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	f855 3b04 	ldr.w	r3, [r5], #4
 800b194:	4798      	blx	r3
 800b196:	3601      	adds	r6, #1
 800b198:	e7ee      	b.n	800b178 <__libc_init_array+0xc>
 800b19a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b19e:	4798      	blx	r3
 800b1a0:	3601      	adds	r6, #1
 800b1a2:	e7f2      	b.n	800b18a <__libc_init_array+0x1e>
 800b1a4:	0800bbe4 	.word	0x0800bbe4
 800b1a8:	0800bbe4 	.word	0x0800bbe4
 800b1ac:	0800bbe4 	.word	0x0800bbe4
 800b1b0:	0800bbe8 	.word	0x0800bbe8

0800b1b4 <__retarget_lock_acquire_recursive>:
 800b1b4:	4770      	bx	lr

0800b1b6 <__retarget_lock_release_recursive>:
 800b1b6:	4770      	bx	lr

0800b1b8 <__ssputs_r>:
 800b1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1bc:	461f      	mov	r7, r3
 800b1be:	688e      	ldr	r6, [r1, #8]
 800b1c0:	4682      	mov	sl, r0
 800b1c2:	42be      	cmp	r6, r7
 800b1c4:	460c      	mov	r4, r1
 800b1c6:	4690      	mov	r8, r2
 800b1c8:	680b      	ldr	r3, [r1, #0]
 800b1ca:	d82d      	bhi.n	800b228 <__ssputs_r+0x70>
 800b1cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b1d4:	d026      	beq.n	800b224 <__ssputs_r+0x6c>
 800b1d6:	6965      	ldr	r5, [r4, #20]
 800b1d8:	6909      	ldr	r1, [r1, #16]
 800b1da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1de:	eba3 0901 	sub.w	r9, r3, r1
 800b1e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1e6:	1c7b      	adds	r3, r7, #1
 800b1e8:	444b      	add	r3, r9
 800b1ea:	106d      	asrs	r5, r5, #1
 800b1ec:	429d      	cmp	r5, r3
 800b1ee:	bf38      	it	cc
 800b1f0:	461d      	movcc	r5, r3
 800b1f2:	0553      	lsls	r3, r2, #21
 800b1f4:	d527      	bpl.n	800b246 <__ssputs_r+0x8e>
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f000 f958 	bl	800b4ac <_malloc_r>
 800b1fc:	4606      	mov	r6, r0
 800b1fe:	b360      	cbz	r0, 800b25a <__ssputs_r+0xa2>
 800b200:	464a      	mov	r2, r9
 800b202:	6921      	ldr	r1, [r4, #16]
 800b204:	f000 fbd6 	bl	800b9b4 <memcpy>
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b20e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b212:	81a3      	strh	r3, [r4, #12]
 800b214:	6126      	str	r6, [r4, #16]
 800b216:	444e      	add	r6, r9
 800b218:	6026      	str	r6, [r4, #0]
 800b21a:	463e      	mov	r6, r7
 800b21c:	6165      	str	r5, [r4, #20]
 800b21e:	eba5 0509 	sub.w	r5, r5, r9
 800b222:	60a5      	str	r5, [r4, #8]
 800b224:	42be      	cmp	r6, r7
 800b226:	d900      	bls.n	800b22a <__ssputs_r+0x72>
 800b228:	463e      	mov	r6, r7
 800b22a:	4632      	mov	r2, r6
 800b22c:	4641      	mov	r1, r8
 800b22e:	6820      	ldr	r0, [r4, #0]
 800b230:	f000 fb88 	bl	800b944 <memmove>
 800b234:	2000      	movs	r0, #0
 800b236:	68a3      	ldr	r3, [r4, #8]
 800b238:	1b9b      	subs	r3, r3, r6
 800b23a:	60a3      	str	r3, [r4, #8]
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	4433      	add	r3, r6
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b246:	462a      	mov	r2, r5
 800b248:	f000 fb4e 	bl	800b8e8 <_realloc_r>
 800b24c:	4606      	mov	r6, r0
 800b24e:	2800      	cmp	r0, #0
 800b250:	d1e0      	bne.n	800b214 <__ssputs_r+0x5c>
 800b252:	4650      	mov	r0, sl
 800b254:	6921      	ldr	r1, [r4, #16]
 800b256:	f000 fbbb 	bl	800b9d0 <_free_r>
 800b25a:	230c      	movs	r3, #12
 800b25c:	f8ca 3000 	str.w	r3, [sl]
 800b260:	89a3      	ldrh	r3, [r4, #12]
 800b262:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b26a:	81a3      	strh	r3, [r4, #12]
 800b26c:	e7e9      	b.n	800b242 <__ssputs_r+0x8a>
	...

0800b270 <_svfiprintf_r>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	4698      	mov	r8, r3
 800b276:	898b      	ldrh	r3, [r1, #12]
 800b278:	4607      	mov	r7, r0
 800b27a:	061b      	lsls	r3, r3, #24
 800b27c:	460d      	mov	r5, r1
 800b27e:	4614      	mov	r4, r2
 800b280:	b09d      	sub	sp, #116	@ 0x74
 800b282:	d510      	bpl.n	800b2a6 <_svfiprintf_r+0x36>
 800b284:	690b      	ldr	r3, [r1, #16]
 800b286:	b973      	cbnz	r3, 800b2a6 <_svfiprintf_r+0x36>
 800b288:	2140      	movs	r1, #64	@ 0x40
 800b28a:	f000 f90f 	bl	800b4ac <_malloc_r>
 800b28e:	6028      	str	r0, [r5, #0]
 800b290:	6128      	str	r0, [r5, #16]
 800b292:	b930      	cbnz	r0, 800b2a2 <_svfiprintf_r+0x32>
 800b294:	230c      	movs	r3, #12
 800b296:	603b      	str	r3, [r7, #0]
 800b298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b29c:	b01d      	add	sp, #116	@ 0x74
 800b29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a2:	2340      	movs	r3, #64	@ 0x40
 800b2a4:	616b      	str	r3, [r5, #20]
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2aa:	2320      	movs	r3, #32
 800b2ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2b0:	2330      	movs	r3, #48	@ 0x30
 800b2b2:	f04f 0901 	mov.w	r9, #1
 800b2b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2ba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b454 <_svfiprintf_r+0x1e4>
 800b2be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2c2:	4623      	mov	r3, r4
 800b2c4:	469a      	mov	sl, r3
 800b2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ca:	b10a      	cbz	r2, 800b2d0 <_svfiprintf_r+0x60>
 800b2cc:	2a25      	cmp	r2, #37	@ 0x25
 800b2ce:	d1f9      	bne.n	800b2c4 <_svfiprintf_r+0x54>
 800b2d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b2d4:	d00b      	beq.n	800b2ee <_svfiprintf_r+0x7e>
 800b2d6:	465b      	mov	r3, fp
 800b2d8:	4622      	mov	r2, r4
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4638      	mov	r0, r7
 800b2de:	f7ff ff6b 	bl	800b1b8 <__ssputs_r>
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	f000 80a7 	beq.w	800b436 <_svfiprintf_r+0x1c6>
 800b2e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2ea:	445a      	add	r2, fp
 800b2ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f000 809f 	beq.w	800b436 <_svfiprintf_r+0x1c6>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b2fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b302:	f10a 0a01 	add.w	sl, sl, #1
 800b306:	9304      	str	r3, [sp, #16]
 800b308:	9307      	str	r3, [sp, #28]
 800b30a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b30e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b310:	4654      	mov	r4, sl
 800b312:	2205      	movs	r2, #5
 800b314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b318:	484e      	ldr	r0, [pc, #312]	@ (800b454 <_svfiprintf_r+0x1e4>)
 800b31a:	f000 fb3d 	bl	800b998 <memchr>
 800b31e:	9a04      	ldr	r2, [sp, #16]
 800b320:	b9d8      	cbnz	r0, 800b35a <_svfiprintf_r+0xea>
 800b322:	06d0      	lsls	r0, r2, #27
 800b324:	bf44      	itt	mi
 800b326:	2320      	movmi	r3, #32
 800b328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b32c:	0711      	lsls	r1, r2, #28
 800b32e:	bf44      	itt	mi
 800b330:	232b      	movmi	r3, #43	@ 0x2b
 800b332:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b336:	f89a 3000 	ldrb.w	r3, [sl]
 800b33a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b33c:	d015      	beq.n	800b36a <_svfiprintf_r+0xfa>
 800b33e:	4654      	mov	r4, sl
 800b340:	2000      	movs	r0, #0
 800b342:	f04f 0c0a 	mov.w	ip, #10
 800b346:	9a07      	ldr	r2, [sp, #28]
 800b348:	4621      	mov	r1, r4
 800b34a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b34e:	3b30      	subs	r3, #48	@ 0x30
 800b350:	2b09      	cmp	r3, #9
 800b352:	d94b      	bls.n	800b3ec <_svfiprintf_r+0x17c>
 800b354:	b1b0      	cbz	r0, 800b384 <_svfiprintf_r+0x114>
 800b356:	9207      	str	r2, [sp, #28]
 800b358:	e014      	b.n	800b384 <_svfiprintf_r+0x114>
 800b35a:	eba0 0308 	sub.w	r3, r0, r8
 800b35e:	fa09 f303 	lsl.w	r3, r9, r3
 800b362:	4313      	orrs	r3, r2
 800b364:	46a2      	mov	sl, r4
 800b366:	9304      	str	r3, [sp, #16]
 800b368:	e7d2      	b.n	800b310 <_svfiprintf_r+0xa0>
 800b36a:	9b03      	ldr	r3, [sp, #12]
 800b36c:	1d19      	adds	r1, r3, #4
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	9103      	str	r1, [sp, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	bfbb      	ittet	lt
 800b376:	425b      	neglt	r3, r3
 800b378:	f042 0202 	orrlt.w	r2, r2, #2
 800b37c:	9307      	strge	r3, [sp, #28]
 800b37e:	9307      	strlt	r3, [sp, #28]
 800b380:	bfb8      	it	lt
 800b382:	9204      	strlt	r2, [sp, #16]
 800b384:	7823      	ldrb	r3, [r4, #0]
 800b386:	2b2e      	cmp	r3, #46	@ 0x2e
 800b388:	d10a      	bne.n	800b3a0 <_svfiprintf_r+0x130>
 800b38a:	7863      	ldrb	r3, [r4, #1]
 800b38c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b38e:	d132      	bne.n	800b3f6 <_svfiprintf_r+0x186>
 800b390:	9b03      	ldr	r3, [sp, #12]
 800b392:	3402      	adds	r4, #2
 800b394:	1d1a      	adds	r2, r3, #4
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	9203      	str	r2, [sp, #12]
 800b39a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b39e:	9305      	str	r3, [sp, #20]
 800b3a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b458 <_svfiprintf_r+0x1e8>
 800b3a4:	2203      	movs	r2, #3
 800b3a6:	4650      	mov	r0, sl
 800b3a8:	7821      	ldrb	r1, [r4, #0]
 800b3aa:	f000 faf5 	bl	800b998 <memchr>
 800b3ae:	b138      	cbz	r0, 800b3c0 <_svfiprintf_r+0x150>
 800b3b0:	2240      	movs	r2, #64	@ 0x40
 800b3b2:	9b04      	ldr	r3, [sp, #16]
 800b3b4:	eba0 000a 	sub.w	r0, r0, sl
 800b3b8:	4082      	lsls	r2, r0
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	3401      	adds	r4, #1
 800b3be:	9304      	str	r3, [sp, #16]
 800b3c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3c4:	2206      	movs	r2, #6
 800b3c6:	4825      	ldr	r0, [pc, #148]	@ (800b45c <_svfiprintf_r+0x1ec>)
 800b3c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3cc:	f000 fae4 	bl	800b998 <memchr>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d036      	beq.n	800b442 <_svfiprintf_r+0x1d2>
 800b3d4:	4b22      	ldr	r3, [pc, #136]	@ (800b460 <_svfiprintf_r+0x1f0>)
 800b3d6:	bb1b      	cbnz	r3, 800b420 <_svfiprintf_r+0x1b0>
 800b3d8:	9b03      	ldr	r3, [sp, #12]
 800b3da:	3307      	adds	r3, #7
 800b3dc:	f023 0307 	bic.w	r3, r3, #7
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	9303      	str	r3, [sp, #12]
 800b3e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3e6:	4433      	add	r3, r6
 800b3e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3ea:	e76a      	b.n	800b2c2 <_svfiprintf_r+0x52>
 800b3ec:	460c      	mov	r4, r1
 800b3ee:	2001      	movs	r0, #1
 800b3f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3f4:	e7a8      	b.n	800b348 <_svfiprintf_r+0xd8>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	f04f 0c0a 	mov.w	ip, #10
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	3401      	adds	r4, #1
 800b400:	9305      	str	r3, [sp, #20]
 800b402:	4620      	mov	r0, r4
 800b404:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b408:	3a30      	subs	r2, #48	@ 0x30
 800b40a:	2a09      	cmp	r2, #9
 800b40c:	d903      	bls.n	800b416 <_svfiprintf_r+0x1a6>
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d0c6      	beq.n	800b3a0 <_svfiprintf_r+0x130>
 800b412:	9105      	str	r1, [sp, #20]
 800b414:	e7c4      	b.n	800b3a0 <_svfiprintf_r+0x130>
 800b416:	4604      	mov	r4, r0
 800b418:	2301      	movs	r3, #1
 800b41a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b41e:	e7f0      	b.n	800b402 <_svfiprintf_r+0x192>
 800b420:	ab03      	add	r3, sp, #12
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	462a      	mov	r2, r5
 800b426:	4638      	mov	r0, r7
 800b428:	4b0e      	ldr	r3, [pc, #56]	@ (800b464 <_svfiprintf_r+0x1f4>)
 800b42a:	a904      	add	r1, sp, #16
 800b42c:	f3af 8000 	nop.w
 800b430:	1c42      	adds	r2, r0, #1
 800b432:	4606      	mov	r6, r0
 800b434:	d1d6      	bne.n	800b3e4 <_svfiprintf_r+0x174>
 800b436:	89ab      	ldrh	r3, [r5, #12]
 800b438:	065b      	lsls	r3, r3, #25
 800b43a:	f53f af2d 	bmi.w	800b298 <_svfiprintf_r+0x28>
 800b43e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b440:	e72c      	b.n	800b29c <_svfiprintf_r+0x2c>
 800b442:	ab03      	add	r3, sp, #12
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	462a      	mov	r2, r5
 800b448:	4638      	mov	r0, r7
 800b44a:	4b06      	ldr	r3, [pc, #24]	@ (800b464 <_svfiprintf_r+0x1f4>)
 800b44c:	a904      	add	r1, sp, #16
 800b44e:	f000 f91f 	bl	800b690 <_printf_i>
 800b452:	e7ed      	b.n	800b430 <_svfiprintf_r+0x1c0>
 800b454:	0800bba6 	.word	0x0800bba6
 800b458:	0800bbac 	.word	0x0800bbac
 800b45c:	0800bbb0 	.word	0x0800bbb0
 800b460:	00000000 	.word	0x00000000
 800b464:	0800b1b9 	.word	0x0800b1b9

0800b468 <sbrk_aligned>:
 800b468:	b570      	push	{r4, r5, r6, lr}
 800b46a:	4e0f      	ldr	r6, [pc, #60]	@ (800b4a8 <sbrk_aligned+0x40>)
 800b46c:	460c      	mov	r4, r1
 800b46e:	6831      	ldr	r1, [r6, #0]
 800b470:	4605      	mov	r5, r0
 800b472:	b911      	cbnz	r1, 800b47a <sbrk_aligned+0x12>
 800b474:	f000 fa80 	bl	800b978 <_sbrk_r>
 800b478:	6030      	str	r0, [r6, #0]
 800b47a:	4621      	mov	r1, r4
 800b47c:	4628      	mov	r0, r5
 800b47e:	f000 fa7b 	bl	800b978 <_sbrk_r>
 800b482:	1c43      	adds	r3, r0, #1
 800b484:	d103      	bne.n	800b48e <sbrk_aligned+0x26>
 800b486:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b48a:	4620      	mov	r0, r4
 800b48c:	bd70      	pop	{r4, r5, r6, pc}
 800b48e:	1cc4      	adds	r4, r0, #3
 800b490:	f024 0403 	bic.w	r4, r4, #3
 800b494:	42a0      	cmp	r0, r4
 800b496:	d0f8      	beq.n	800b48a <sbrk_aligned+0x22>
 800b498:	1a21      	subs	r1, r4, r0
 800b49a:	4628      	mov	r0, r5
 800b49c:	f000 fa6c 	bl	800b978 <_sbrk_r>
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	d1f2      	bne.n	800b48a <sbrk_aligned+0x22>
 800b4a4:	e7ef      	b.n	800b486 <sbrk_aligned+0x1e>
 800b4a6:	bf00      	nop
 800b4a8:	2000169c 	.word	0x2000169c

0800b4ac <_malloc_r>:
 800b4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b0:	1ccd      	adds	r5, r1, #3
 800b4b2:	f025 0503 	bic.w	r5, r5, #3
 800b4b6:	3508      	adds	r5, #8
 800b4b8:	2d0c      	cmp	r5, #12
 800b4ba:	bf38      	it	cc
 800b4bc:	250c      	movcc	r5, #12
 800b4be:	2d00      	cmp	r5, #0
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	db01      	blt.n	800b4c8 <_malloc_r+0x1c>
 800b4c4:	42a9      	cmp	r1, r5
 800b4c6:	d904      	bls.n	800b4d2 <_malloc_r+0x26>
 800b4c8:	230c      	movs	r3, #12
 800b4ca:	6033      	str	r3, [r6, #0]
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5a8 <_malloc_r+0xfc>
 800b4d6:	f000 f9fb 	bl	800b8d0 <__malloc_lock>
 800b4da:	f8d8 3000 	ldr.w	r3, [r8]
 800b4de:	461c      	mov	r4, r3
 800b4e0:	bb44      	cbnz	r4, 800b534 <_malloc_r+0x88>
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	f7ff ffbf 	bl	800b468 <sbrk_aligned>
 800b4ea:	1c43      	adds	r3, r0, #1
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	d158      	bne.n	800b5a2 <_malloc_r+0xf6>
 800b4f0:	f8d8 4000 	ldr.w	r4, [r8]
 800b4f4:	4627      	mov	r7, r4
 800b4f6:	2f00      	cmp	r7, #0
 800b4f8:	d143      	bne.n	800b582 <_malloc_r+0xd6>
 800b4fa:	2c00      	cmp	r4, #0
 800b4fc:	d04b      	beq.n	800b596 <_malloc_r+0xea>
 800b4fe:	6823      	ldr	r3, [r4, #0]
 800b500:	4639      	mov	r1, r7
 800b502:	4630      	mov	r0, r6
 800b504:	eb04 0903 	add.w	r9, r4, r3
 800b508:	f000 fa36 	bl	800b978 <_sbrk_r>
 800b50c:	4581      	cmp	r9, r0
 800b50e:	d142      	bne.n	800b596 <_malloc_r+0xea>
 800b510:	6821      	ldr	r1, [r4, #0]
 800b512:	4630      	mov	r0, r6
 800b514:	1a6d      	subs	r5, r5, r1
 800b516:	4629      	mov	r1, r5
 800b518:	f7ff ffa6 	bl	800b468 <sbrk_aligned>
 800b51c:	3001      	adds	r0, #1
 800b51e:	d03a      	beq.n	800b596 <_malloc_r+0xea>
 800b520:	6823      	ldr	r3, [r4, #0]
 800b522:	442b      	add	r3, r5
 800b524:	6023      	str	r3, [r4, #0]
 800b526:	f8d8 3000 	ldr.w	r3, [r8]
 800b52a:	685a      	ldr	r2, [r3, #4]
 800b52c:	bb62      	cbnz	r2, 800b588 <_malloc_r+0xdc>
 800b52e:	f8c8 7000 	str.w	r7, [r8]
 800b532:	e00f      	b.n	800b554 <_malloc_r+0xa8>
 800b534:	6822      	ldr	r2, [r4, #0]
 800b536:	1b52      	subs	r2, r2, r5
 800b538:	d420      	bmi.n	800b57c <_malloc_r+0xd0>
 800b53a:	2a0b      	cmp	r2, #11
 800b53c:	d917      	bls.n	800b56e <_malloc_r+0xc2>
 800b53e:	1961      	adds	r1, r4, r5
 800b540:	42a3      	cmp	r3, r4
 800b542:	6025      	str	r5, [r4, #0]
 800b544:	bf18      	it	ne
 800b546:	6059      	strne	r1, [r3, #4]
 800b548:	6863      	ldr	r3, [r4, #4]
 800b54a:	bf08      	it	eq
 800b54c:	f8c8 1000 	streq.w	r1, [r8]
 800b550:	5162      	str	r2, [r4, r5]
 800b552:	604b      	str	r3, [r1, #4]
 800b554:	4630      	mov	r0, r6
 800b556:	f000 f9c1 	bl	800b8dc <__malloc_unlock>
 800b55a:	f104 000b 	add.w	r0, r4, #11
 800b55e:	1d23      	adds	r3, r4, #4
 800b560:	f020 0007 	bic.w	r0, r0, #7
 800b564:	1ac2      	subs	r2, r0, r3
 800b566:	bf1c      	itt	ne
 800b568:	1a1b      	subne	r3, r3, r0
 800b56a:	50a3      	strne	r3, [r4, r2]
 800b56c:	e7af      	b.n	800b4ce <_malloc_r+0x22>
 800b56e:	6862      	ldr	r2, [r4, #4]
 800b570:	42a3      	cmp	r3, r4
 800b572:	bf0c      	ite	eq
 800b574:	f8c8 2000 	streq.w	r2, [r8]
 800b578:	605a      	strne	r2, [r3, #4]
 800b57a:	e7eb      	b.n	800b554 <_malloc_r+0xa8>
 800b57c:	4623      	mov	r3, r4
 800b57e:	6864      	ldr	r4, [r4, #4]
 800b580:	e7ae      	b.n	800b4e0 <_malloc_r+0x34>
 800b582:	463c      	mov	r4, r7
 800b584:	687f      	ldr	r7, [r7, #4]
 800b586:	e7b6      	b.n	800b4f6 <_malloc_r+0x4a>
 800b588:	461a      	mov	r2, r3
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	42a3      	cmp	r3, r4
 800b58e:	d1fb      	bne.n	800b588 <_malloc_r+0xdc>
 800b590:	2300      	movs	r3, #0
 800b592:	6053      	str	r3, [r2, #4]
 800b594:	e7de      	b.n	800b554 <_malloc_r+0xa8>
 800b596:	230c      	movs	r3, #12
 800b598:	4630      	mov	r0, r6
 800b59a:	6033      	str	r3, [r6, #0]
 800b59c:	f000 f99e 	bl	800b8dc <__malloc_unlock>
 800b5a0:	e794      	b.n	800b4cc <_malloc_r+0x20>
 800b5a2:	6005      	str	r5, [r0, #0]
 800b5a4:	e7d6      	b.n	800b554 <_malloc_r+0xa8>
 800b5a6:	bf00      	nop
 800b5a8:	200016a0 	.word	0x200016a0

0800b5ac <_printf_common>:
 800b5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b0:	4616      	mov	r6, r2
 800b5b2:	4698      	mov	r8, r3
 800b5b4:	688a      	ldr	r2, [r1, #8]
 800b5b6:	690b      	ldr	r3, [r1, #16]
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	bfb8      	it	lt
 800b5be:	4613      	movlt	r3, r2
 800b5c0:	6033      	str	r3, [r6, #0]
 800b5c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5cc:	b10a      	cbz	r2, 800b5d2 <_printf_common+0x26>
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	6033      	str	r3, [r6, #0]
 800b5d2:	6823      	ldr	r3, [r4, #0]
 800b5d4:	0699      	lsls	r1, r3, #26
 800b5d6:	bf42      	ittt	mi
 800b5d8:	6833      	ldrmi	r3, [r6, #0]
 800b5da:	3302      	addmi	r3, #2
 800b5dc:	6033      	strmi	r3, [r6, #0]
 800b5de:	6825      	ldr	r5, [r4, #0]
 800b5e0:	f015 0506 	ands.w	r5, r5, #6
 800b5e4:	d106      	bne.n	800b5f4 <_printf_common+0x48>
 800b5e6:	f104 0a19 	add.w	sl, r4, #25
 800b5ea:	68e3      	ldr	r3, [r4, #12]
 800b5ec:	6832      	ldr	r2, [r6, #0]
 800b5ee:	1a9b      	subs	r3, r3, r2
 800b5f0:	42ab      	cmp	r3, r5
 800b5f2:	dc2b      	bgt.n	800b64c <_printf_common+0xa0>
 800b5f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5f8:	6822      	ldr	r2, [r4, #0]
 800b5fa:	3b00      	subs	r3, #0
 800b5fc:	bf18      	it	ne
 800b5fe:	2301      	movne	r3, #1
 800b600:	0692      	lsls	r2, r2, #26
 800b602:	d430      	bmi.n	800b666 <_printf_common+0xba>
 800b604:	4641      	mov	r1, r8
 800b606:	4638      	mov	r0, r7
 800b608:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b60c:	47c8      	blx	r9
 800b60e:	3001      	adds	r0, #1
 800b610:	d023      	beq.n	800b65a <_printf_common+0xae>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	6922      	ldr	r2, [r4, #16]
 800b616:	f003 0306 	and.w	r3, r3, #6
 800b61a:	2b04      	cmp	r3, #4
 800b61c:	bf14      	ite	ne
 800b61e:	2500      	movne	r5, #0
 800b620:	6833      	ldreq	r3, [r6, #0]
 800b622:	f04f 0600 	mov.w	r6, #0
 800b626:	bf08      	it	eq
 800b628:	68e5      	ldreq	r5, [r4, #12]
 800b62a:	f104 041a 	add.w	r4, r4, #26
 800b62e:	bf08      	it	eq
 800b630:	1aed      	subeq	r5, r5, r3
 800b632:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b636:	bf08      	it	eq
 800b638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b63c:	4293      	cmp	r3, r2
 800b63e:	bfc4      	itt	gt
 800b640:	1a9b      	subgt	r3, r3, r2
 800b642:	18ed      	addgt	r5, r5, r3
 800b644:	42b5      	cmp	r5, r6
 800b646:	d11a      	bne.n	800b67e <_printf_common+0xd2>
 800b648:	2000      	movs	r0, #0
 800b64a:	e008      	b.n	800b65e <_printf_common+0xb2>
 800b64c:	2301      	movs	r3, #1
 800b64e:	4652      	mov	r2, sl
 800b650:	4641      	mov	r1, r8
 800b652:	4638      	mov	r0, r7
 800b654:	47c8      	blx	r9
 800b656:	3001      	adds	r0, #1
 800b658:	d103      	bne.n	800b662 <_printf_common+0xb6>
 800b65a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b662:	3501      	adds	r5, #1
 800b664:	e7c1      	b.n	800b5ea <_printf_common+0x3e>
 800b666:	2030      	movs	r0, #48	@ 0x30
 800b668:	18e1      	adds	r1, r4, r3
 800b66a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b66e:	1c5a      	adds	r2, r3, #1
 800b670:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b674:	4422      	add	r2, r4
 800b676:	3302      	adds	r3, #2
 800b678:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b67c:	e7c2      	b.n	800b604 <_printf_common+0x58>
 800b67e:	2301      	movs	r3, #1
 800b680:	4622      	mov	r2, r4
 800b682:	4641      	mov	r1, r8
 800b684:	4638      	mov	r0, r7
 800b686:	47c8      	blx	r9
 800b688:	3001      	adds	r0, #1
 800b68a:	d0e6      	beq.n	800b65a <_printf_common+0xae>
 800b68c:	3601      	adds	r6, #1
 800b68e:	e7d9      	b.n	800b644 <_printf_common+0x98>

0800b690 <_printf_i>:
 800b690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	7e0f      	ldrb	r7, [r1, #24]
 800b696:	4691      	mov	r9, r2
 800b698:	2f78      	cmp	r7, #120	@ 0x78
 800b69a:	4680      	mov	r8, r0
 800b69c:	460c      	mov	r4, r1
 800b69e:	469a      	mov	sl, r3
 800b6a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b6a6:	d807      	bhi.n	800b6b8 <_printf_i+0x28>
 800b6a8:	2f62      	cmp	r7, #98	@ 0x62
 800b6aa:	d80a      	bhi.n	800b6c2 <_printf_i+0x32>
 800b6ac:	2f00      	cmp	r7, #0
 800b6ae:	f000 80d3 	beq.w	800b858 <_printf_i+0x1c8>
 800b6b2:	2f58      	cmp	r7, #88	@ 0x58
 800b6b4:	f000 80ba 	beq.w	800b82c <_printf_i+0x19c>
 800b6b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b6c0:	e03a      	b.n	800b738 <_printf_i+0xa8>
 800b6c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b6c6:	2b15      	cmp	r3, #21
 800b6c8:	d8f6      	bhi.n	800b6b8 <_printf_i+0x28>
 800b6ca:	a101      	add	r1, pc, #4	@ (adr r1, 800b6d0 <_printf_i+0x40>)
 800b6cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6d0:	0800b729 	.word	0x0800b729
 800b6d4:	0800b73d 	.word	0x0800b73d
 800b6d8:	0800b6b9 	.word	0x0800b6b9
 800b6dc:	0800b6b9 	.word	0x0800b6b9
 800b6e0:	0800b6b9 	.word	0x0800b6b9
 800b6e4:	0800b6b9 	.word	0x0800b6b9
 800b6e8:	0800b73d 	.word	0x0800b73d
 800b6ec:	0800b6b9 	.word	0x0800b6b9
 800b6f0:	0800b6b9 	.word	0x0800b6b9
 800b6f4:	0800b6b9 	.word	0x0800b6b9
 800b6f8:	0800b6b9 	.word	0x0800b6b9
 800b6fc:	0800b83f 	.word	0x0800b83f
 800b700:	0800b767 	.word	0x0800b767
 800b704:	0800b7f9 	.word	0x0800b7f9
 800b708:	0800b6b9 	.word	0x0800b6b9
 800b70c:	0800b6b9 	.word	0x0800b6b9
 800b710:	0800b861 	.word	0x0800b861
 800b714:	0800b6b9 	.word	0x0800b6b9
 800b718:	0800b767 	.word	0x0800b767
 800b71c:	0800b6b9 	.word	0x0800b6b9
 800b720:	0800b6b9 	.word	0x0800b6b9
 800b724:	0800b801 	.word	0x0800b801
 800b728:	6833      	ldr	r3, [r6, #0]
 800b72a:	1d1a      	adds	r2, r3, #4
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	6032      	str	r2, [r6, #0]
 800b730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b734:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b738:	2301      	movs	r3, #1
 800b73a:	e09e      	b.n	800b87a <_printf_i+0x1ea>
 800b73c:	6833      	ldr	r3, [r6, #0]
 800b73e:	6820      	ldr	r0, [r4, #0]
 800b740:	1d19      	adds	r1, r3, #4
 800b742:	6031      	str	r1, [r6, #0]
 800b744:	0606      	lsls	r6, r0, #24
 800b746:	d501      	bpl.n	800b74c <_printf_i+0xbc>
 800b748:	681d      	ldr	r5, [r3, #0]
 800b74a:	e003      	b.n	800b754 <_printf_i+0xc4>
 800b74c:	0645      	lsls	r5, r0, #25
 800b74e:	d5fb      	bpl.n	800b748 <_printf_i+0xb8>
 800b750:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b754:	2d00      	cmp	r5, #0
 800b756:	da03      	bge.n	800b760 <_printf_i+0xd0>
 800b758:	232d      	movs	r3, #45	@ 0x2d
 800b75a:	426d      	negs	r5, r5
 800b75c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b760:	230a      	movs	r3, #10
 800b762:	4859      	ldr	r0, [pc, #356]	@ (800b8c8 <_printf_i+0x238>)
 800b764:	e011      	b.n	800b78a <_printf_i+0xfa>
 800b766:	6821      	ldr	r1, [r4, #0]
 800b768:	6833      	ldr	r3, [r6, #0]
 800b76a:	0608      	lsls	r0, r1, #24
 800b76c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b770:	d402      	bmi.n	800b778 <_printf_i+0xe8>
 800b772:	0649      	lsls	r1, r1, #25
 800b774:	bf48      	it	mi
 800b776:	b2ad      	uxthmi	r5, r5
 800b778:	2f6f      	cmp	r7, #111	@ 0x6f
 800b77a:	6033      	str	r3, [r6, #0]
 800b77c:	bf14      	ite	ne
 800b77e:	230a      	movne	r3, #10
 800b780:	2308      	moveq	r3, #8
 800b782:	4851      	ldr	r0, [pc, #324]	@ (800b8c8 <_printf_i+0x238>)
 800b784:	2100      	movs	r1, #0
 800b786:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b78a:	6866      	ldr	r6, [r4, #4]
 800b78c:	2e00      	cmp	r6, #0
 800b78e:	bfa8      	it	ge
 800b790:	6821      	ldrge	r1, [r4, #0]
 800b792:	60a6      	str	r6, [r4, #8]
 800b794:	bfa4      	itt	ge
 800b796:	f021 0104 	bicge.w	r1, r1, #4
 800b79a:	6021      	strge	r1, [r4, #0]
 800b79c:	b90d      	cbnz	r5, 800b7a2 <_printf_i+0x112>
 800b79e:	2e00      	cmp	r6, #0
 800b7a0:	d04b      	beq.n	800b83a <_printf_i+0x1aa>
 800b7a2:	4616      	mov	r6, r2
 800b7a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7a8:	fb03 5711 	mls	r7, r3, r1, r5
 800b7ac:	5dc7      	ldrb	r7, [r0, r7]
 800b7ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7b2:	462f      	mov	r7, r5
 800b7b4:	42bb      	cmp	r3, r7
 800b7b6:	460d      	mov	r5, r1
 800b7b8:	d9f4      	bls.n	800b7a4 <_printf_i+0x114>
 800b7ba:	2b08      	cmp	r3, #8
 800b7bc:	d10b      	bne.n	800b7d6 <_printf_i+0x146>
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	07df      	lsls	r7, r3, #31
 800b7c2:	d508      	bpl.n	800b7d6 <_printf_i+0x146>
 800b7c4:	6923      	ldr	r3, [r4, #16]
 800b7c6:	6861      	ldr	r1, [r4, #4]
 800b7c8:	4299      	cmp	r1, r3
 800b7ca:	bfde      	ittt	le
 800b7cc:	2330      	movle	r3, #48	@ 0x30
 800b7ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7d2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b7d6:	1b92      	subs	r2, r2, r6
 800b7d8:	6122      	str	r2, [r4, #16]
 800b7da:	464b      	mov	r3, r9
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4640      	mov	r0, r8
 800b7e0:	f8cd a000 	str.w	sl, [sp]
 800b7e4:	aa03      	add	r2, sp, #12
 800b7e6:	f7ff fee1 	bl	800b5ac <_printf_common>
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	d14a      	bne.n	800b884 <_printf_i+0x1f4>
 800b7ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7f2:	b004      	add	sp, #16
 800b7f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	f043 0320 	orr.w	r3, r3, #32
 800b7fe:	6023      	str	r3, [r4, #0]
 800b800:	2778      	movs	r7, #120	@ 0x78
 800b802:	4832      	ldr	r0, [pc, #200]	@ (800b8cc <_printf_i+0x23c>)
 800b804:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b808:	6823      	ldr	r3, [r4, #0]
 800b80a:	6831      	ldr	r1, [r6, #0]
 800b80c:	061f      	lsls	r7, r3, #24
 800b80e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b812:	d402      	bmi.n	800b81a <_printf_i+0x18a>
 800b814:	065f      	lsls	r7, r3, #25
 800b816:	bf48      	it	mi
 800b818:	b2ad      	uxthmi	r5, r5
 800b81a:	6031      	str	r1, [r6, #0]
 800b81c:	07d9      	lsls	r1, r3, #31
 800b81e:	bf44      	itt	mi
 800b820:	f043 0320 	orrmi.w	r3, r3, #32
 800b824:	6023      	strmi	r3, [r4, #0]
 800b826:	b11d      	cbz	r5, 800b830 <_printf_i+0x1a0>
 800b828:	2310      	movs	r3, #16
 800b82a:	e7ab      	b.n	800b784 <_printf_i+0xf4>
 800b82c:	4826      	ldr	r0, [pc, #152]	@ (800b8c8 <_printf_i+0x238>)
 800b82e:	e7e9      	b.n	800b804 <_printf_i+0x174>
 800b830:	6823      	ldr	r3, [r4, #0]
 800b832:	f023 0320 	bic.w	r3, r3, #32
 800b836:	6023      	str	r3, [r4, #0]
 800b838:	e7f6      	b.n	800b828 <_printf_i+0x198>
 800b83a:	4616      	mov	r6, r2
 800b83c:	e7bd      	b.n	800b7ba <_printf_i+0x12a>
 800b83e:	6833      	ldr	r3, [r6, #0]
 800b840:	6825      	ldr	r5, [r4, #0]
 800b842:	1d18      	adds	r0, r3, #4
 800b844:	6961      	ldr	r1, [r4, #20]
 800b846:	6030      	str	r0, [r6, #0]
 800b848:	062e      	lsls	r6, r5, #24
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	d501      	bpl.n	800b852 <_printf_i+0x1c2>
 800b84e:	6019      	str	r1, [r3, #0]
 800b850:	e002      	b.n	800b858 <_printf_i+0x1c8>
 800b852:	0668      	lsls	r0, r5, #25
 800b854:	d5fb      	bpl.n	800b84e <_printf_i+0x1be>
 800b856:	8019      	strh	r1, [r3, #0]
 800b858:	2300      	movs	r3, #0
 800b85a:	4616      	mov	r6, r2
 800b85c:	6123      	str	r3, [r4, #16]
 800b85e:	e7bc      	b.n	800b7da <_printf_i+0x14a>
 800b860:	6833      	ldr	r3, [r6, #0]
 800b862:	2100      	movs	r1, #0
 800b864:	1d1a      	adds	r2, r3, #4
 800b866:	6032      	str	r2, [r6, #0]
 800b868:	681e      	ldr	r6, [r3, #0]
 800b86a:	6862      	ldr	r2, [r4, #4]
 800b86c:	4630      	mov	r0, r6
 800b86e:	f000 f893 	bl	800b998 <memchr>
 800b872:	b108      	cbz	r0, 800b878 <_printf_i+0x1e8>
 800b874:	1b80      	subs	r0, r0, r6
 800b876:	6060      	str	r0, [r4, #4]
 800b878:	6863      	ldr	r3, [r4, #4]
 800b87a:	6123      	str	r3, [r4, #16]
 800b87c:	2300      	movs	r3, #0
 800b87e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b882:	e7aa      	b.n	800b7da <_printf_i+0x14a>
 800b884:	4632      	mov	r2, r6
 800b886:	4649      	mov	r1, r9
 800b888:	4640      	mov	r0, r8
 800b88a:	6923      	ldr	r3, [r4, #16]
 800b88c:	47d0      	blx	sl
 800b88e:	3001      	adds	r0, #1
 800b890:	d0ad      	beq.n	800b7ee <_printf_i+0x15e>
 800b892:	6823      	ldr	r3, [r4, #0]
 800b894:	079b      	lsls	r3, r3, #30
 800b896:	d413      	bmi.n	800b8c0 <_printf_i+0x230>
 800b898:	68e0      	ldr	r0, [r4, #12]
 800b89a:	9b03      	ldr	r3, [sp, #12]
 800b89c:	4298      	cmp	r0, r3
 800b89e:	bfb8      	it	lt
 800b8a0:	4618      	movlt	r0, r3
 800b8a2:	e7a6      	b.n	800b7f2 <_printf_i+0x162>
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	4632      	mov	r2, r6
 800b8a8:	4649      	mov	r1, r9
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	47d0      	blx	sl
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	d09d      	beq.n	800b7ee <_printf_i+0x15e>
 800b8b2:	3501      	adds	r5, #1
 800b8b4:	68e3      	ldr	r3, [r4, #12]
 800b8b6:	9903      	ldr	r1, [sp, #12]
 800b8b8:	1a5b      	subs	r3, r3, r1
 800b8ba:	42ab      	cmp	r3, r5
 800b8bc:	dcf2      	bgt.n	800b8a4 <_printf_i+0x214>
 800b8be:	e7eb      	b.n	800b898 <_printf_i+0x208>
 800b8c0:	2500      	movs	r5, #0
 800b8c2:	f104 0619 	add.w	r6, r4, #25
 800b8c6:	e7f5      	b.n	800b8b4 <_printf_i+0x224>
 800b8c8:	0800bbb7 	.word	0x0800bbb7
 800b8cc:	0800bbc8 	.word	0x0800bbc8

0800b8d0 <__malloc_lock>:
 800b8d0:	4801      	ldr	r0, [pc, #4]	@ (800b8d8 <__malloc_lock+0x8>)
 800b8d2:	f7ff bc6f 	b.w	800b1b4 <__retarget_lock_acquire_recursive>
 800b8d6:	bf00      	nop
 800b8d8:	20001698 	.word	0x20001698

0800b8dc <__malloc_unlock>:
 800b8dc:	4801      	ldr	r0, [pc, #4]	@ (800b8e4 <__malloc_unlock+0x8>)
 800b8de:	f7ff bc6a 	b.w	800b1b6 <__retarget_lock_release_recursive>
 800b8e2:	bf00      	nop
 800b8e4:	20001698 	.word	0x20001698

0800b8e8 <_realloc_r>:
 800b8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	4615      	mov	r5, r2
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	b921      	cbnz	r1, 800b8fe <_realloc_r+0x16>
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8fa:	f7ff bdd7 	b.w	800b4ac <_malloc_r>
 800b8fe:	b92a      	cbnz	r2, 800b90c <_realloc_r+0x24>
 800b900:	f000 f866 	bl	800b9d0 <_free_r>
 800b904:	2400      	movs	r4, #0
 800b906:	4620      	mov	r0, r4
 800b908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b90c:	f000 f8a8 	bl	800ba60 <_malloc_usable_size_r>
 800b910:	4285      	cmp	r5, r0
 800b912:	4606      	mov	r6, r0
 800b914:	d802      	bhi.n	800b91c <_realloc_r+0x34>
 800b916:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b91a:	d8f4      	bhi.n	800b906 <_realloc_r+0x1e>
 800b91c:	4629      	mov	r1, r5
 800b91e:	4640      	mov	r0, r8
 800b920:	f7ff fdc4 	bl	800b4ac <_malloc_r>
 800b924:	4607      	mov	r7, r0
 800b926:	2800      	cmp	r0, #0
 800b928:	d0ec      	beq.n	800b904 <_realloc_r+0x1c>
 800b92a:	42b5      	cmp	r5, r6
 800b92c:	462a      	mov	r2, r5
 800b92e:	4621      	mov	r1, r4
 800b930:	bf28      	it	cs
 800b932:	4632      	movcs	r2, r6
 800b934:	f000 f83e 	bl	800b9b4 <memcpy>
 800b938:	4621      	mov	r1, r4
 800b93a:	4640      	mov	r0, r8
 800b93c:	f000 f848 	bl	800b9d0 <_free_r>
 800b940:	463c      	mov	r4, r7
 800b942:	e7e0      	b.n	800b906 <_realloc_r+0x1e>

0800b944 <memmove>:
 800b944:	4288      	cmp	r0, r1
 800b946:	b510      	push	{r4, lr}
 800b948:	eb01 0402 	add.w	r4, r1, r2
 800b94c:	d902      	bls.n	800b954 <memmove+0x10>
 800b94e:	4284      	cmp	r4, r0
 800b950:	4623      	mov	r3, r4
 800b952:	d807      	bhi.n	800b964 <memmove+0x20>
 800b954:	1e43      	subs	r3, r0, #1
 800b956:	42a1      	cmp	r1, r4
 800b958:	d008      	beq.n	800b96c <memmove+0x28>
 800b95a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b95e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b962:	e7f8      	b.n	800b956 <memmove+0x12>
 800b964:	4601      	mov	r1, r0
 800b966:	4402      	add	r2, r0
 800b968:	428a      	cmp	r2, r1
 800b96a:	d100      	bne.n	800b96e <memmove+0x2a>
 800b96c:	bd10      	pop	{r4, pc}
 800b96e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b976:	e7f7      	b.n	800b968 <memmove+0x24>

0800b978 <_sbrk_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	2300      	movs	r3, #0
 800b97c:	4d05      	ldr	r5, [pc, #20]	@ (800b994 <_sbrk_r+0x1c>)
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	602b      	str	r3, [r5, #0]
 800b984:	f7f5 fbce 	bl	8001124 <_sbrk>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_sbrk_r+0x1a>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_sbrk_r+0x1a>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	200016a4 	.word	0x200016a4

0800b998 <memchr>:
 800b998:	4603      	mov	r3, r0
 800b99a:	b510      	push	{r4, lr}
 800b99c:	b2c9      	uxtb	r1, r1
 800b99e:	4402      	add	r2, r0
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	d101      	bne.n	800b9aa <memchr+0x12>
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	e003      	b.n	800b9b2 <memchr+0x1a>
 800b9aa:	7804      	ldrb	r4, [r0, #0]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	428c      	cmp	r4, r1
 800b9b0:	d1f6      	bne.n	800b9a0 <memchr+0x8>
 800b9b2:	bd10      	pop	{r4, pc}

0800b9b4 <memcpy>:
 800b9b4:	440a      	add	r2, r1
 800b9b6:	4291      	cmp	r1, r2
 800b9b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b9bc:	d100      	bne.n	800b9c0 <memcpy+0xc>
 800b9be:	4770      	bx	lr
 800b9c0:	b510      	push	{r4, lr}
 800b9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9c6:	4291      	cmp	r1, r2
 800b9c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9cc:	d1f9      	bne.n	800b9c2 <memcpy+0xe>
 800b9ce:	bd10      	pop	{r4, pc}

0800b9d0 <_free_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	2900      	cmp	r1, #0
 800b9d6:	d040      	beq.n	800ba5a <_free_r+0x8a>
 800b9d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9dc:	1f0c      	subs	r4, r1, #4
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	bfb8      	it	lt
 800b9e2:	18e4      	addlt	r4, r4, r3
 800b9e4:	f7ff ff74 	bl	800b8d0 <__malloc_lock>
 800b9e8:	4a1c      	ldr	r2, [pc, #112]	@ (800ba5c <_free_r+0x8c>)
 800b9ea:	6813      	ldr	r3, [r2, #0]
 800b9ec:	b933      	cbnz	r3, 800b9fc <_free_r+0x2c>
 800b9ee:	6063      	str	r3, [r4, #4]
 800b9f0:	6014      	str	r4, [r2, #0]
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9f8:	f7ff bf70 	b.w	800b8dc <__malloc_unlock>
 800b9fc:	42a3      	cmp	r3, r4
 800b9fe:	d908      	bls.n	800ba12 <_free_r+0x42>
 800ba00:	6820      	ldr	r0, [r4, #0]
 800ba02:	1821      	adds	r1, r4, r0
 800ba04:	428b      	cmp	r3, r1
 800ba06:	bf01      	itttt	eq
 800ba08:	6819      	ldreq	r1, [r3, #0]
 800ba0a:	685b      	ldreq	r3, [r3, #4]
 800ba0c:	1809      	addeq	r1, r1, r0
 800ba0e:	6021      	streq	r1, [r4, #0]
 800ba10:	e7ed      	b.n	800b9ee <_free_r+0x1e>
 800ba12:	461a      	mov	r2, r3
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	b10b      	cbz	r3, 800ba1c <_free_r+0x4c>
 800ba18:	42a3      	cmp	r3, r4
 800ba1a:	d9fa      	bls.n	800ba12 <_free_r+0x42>
 800ba1c:	6811      	ldr	r1, [r2, #0]
 800ba1e:	1850      	adds	r0, r2, r1
 800ba20:	42a0      	cmp	r0, r4
 800ba22:	d10b      	bne.n	800ba3c <_free_r+0x6c>
 800ba24:	6820      	ldr	r0, [r4, #0]
 800ba26:	4401      	add	r1, r0
 800ba28:	1850      	adds	r0, r2, r1
 800ba2a:	4283      	cmp	r3, r0
 800ba2c:	6011      	str	r1, [r2, #0]
 800ba2e:	d1e0      	bne.n	800b9f2 <_free_r+0x22>
 800ba30:	6818      	ldr	r0, [r3, #0]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	4408      	add	r0, r1
 800ba36:	6010      	str	r0, [r2, #0]
 800ba38:	6053      	str	r3, [r2, #4]
 800ba3a:	e7da      	b.n	800b9f2 <_free_r+0x22>
 800ba3c:	d902      	bls.n	800ba44 <_free_r+0x74>
 800ba3e:	230c      	movs	r3, #12
 800ba40:	602b      	str	r3, [r5, #0]
 800ba42:	e7d6      	b.n	800b9f2 <_free_r+0x22>
 800ba44:	6820      	ldr	r0, [r4, #0]
 800ba46:	1821      	adds	r1, r4, r0
 800ba48:	428b      	cmp	r3, r1
 800ba4a:	bf01      	itttt	eq
 800ba4c:	6819      	ldreq	r1, [r3, #0]
 800ba4e:	685b      	ldreq	r3, [r3, #4]
 800ba50:	1809      	addeq	r1, r1, r0
 800ba52:	6021      	streq	r1, [r4, #0]
 800ba54:	6063      	str	r3, [r4, #4]
 800ba56:	6054      	str	r4, [r2, #4]
 800ba58:	e7cb      	b.n	800b9f2 <_free_r+0x22>
 800ba5a:	bd38      	pop	{r3, r4, r5, pc}
 800ba5c:	200016a0 	.word	0x200016a0

0800ba60 <_malloc_usable_size_r>:
 800ba60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba64:	1f18      	subs	r0, r3, #4
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	bfbc      	itt	lt
 800ba6a:	580b      	ldrlt	r3, [r1, r0]
 800ba6c:	18c0      	addlt	r0, r0, r3
 800ba6e:	4770      	bx	lr

0800ba70 <_init>:
 800ba70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba72:	bf00      	nop
 800ba74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba76:	bc08      	pop	{r3}
 800ba78:	469e      	mov	lr, r3
 800ba7a:	4770      	bx	lr

0800ba7c <_fini>:
 800ba7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba7e:	bf00      	nop
 800ba80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba82:	bc08      	pop	{r3}
 800ba84:	469e      	mov	lr, r3
 800ba86:	4770      	bx	lr
