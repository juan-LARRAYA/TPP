
BQ29330_BLUEPILL_ORIGINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc64  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800bd74  0800bd74  0000cd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beb8  0800beb8  0000d1cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800beb8  0800beb8  0000ceb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bec0  0800bec0  0000d1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bec0  0800bec0  0000cec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bec4  0800bec4  0000cec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800bec8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014dc  200001cc  0800c094  0000d1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016a8  0800c094  0000d6a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b208  00000000  00000000  0000d1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048a5  00000000  00000000  000283fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  0002cca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000127e  00000000  00000000  0002e4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d4fe  00000000  00000000  0002f726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021146  00000000  00000000  0004cc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000975dd  00000000  00000000  0006dd6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105347  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006984  00000000  00000000  0010538c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0010bd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001cc 	.word	0x200001cc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bd5c 	.word	0x0800bd5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d0 	.word	0x200001d0
 800014c:	0800bd5c 	.word	0x0800bd5c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	@ 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <__aeabi_frsub>:
 800076c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000770:	e002      	b.n	8000778 <__addsf3>
 8000772:	bf00      	nop

08000774 <__aeabi_fsub>:
 8000774:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000778 <__addsf3>:
 8000778:	0042      	lsls	r2, r0, #1
 800077a:	bf1f      	itttt	ne
 800077c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000780:	ea92 0f03 	teqne	r2, r3
 8000784:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000788:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800078c:	d06a      	beq.n	8000864 <__addsf3+0xec>
 800078e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000792:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000796:	bfc1      	itttt	gt
 8000798:	18d2      	addgt	r2, r2, r3
 800079a:	4041      	eorgt	r1, r0
 800079c:	4048      	eorgt	r0, r1
 800079e:	4041      	eorgt	r1, r0
 80007a0:	bfb8      	it	lt
 80007a2:	425b      	neglt	r3, r3
 80007a4:	2b19      	cmp	r3, #25
 80007a6:	bf88      	it	hi
 80007a8:	4770      	bxhi	lr
 80007aa:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007b2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4240      	negne	r0, r0
 80007ba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007be:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80007c2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80007c6:	bf18      	it	ne
 80007c8:	4249      	negne	r1, r1
 80007ca:	ea92 0f03 	teq	r2, r3
 80007ce:	d03f      	beq.n	8000850 <__addsf3+0xd8>
 80007d0:	f1a2 0201 	sub.w	r2, r2, #1
 80007d4:	fa41 fc03 	asr.w	ip, r1, r3
 80007d8:	eb10 000c 	adds.w	r0, r0, ip
 80007dc:	f1c3 0320 	rsb	r3, r3, #32
 80007e0:	fa01 f103 	lsl.w	r1, r1, r3
 80007e4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007e8:	d502      	bpl.n	80007f0 <__addsf3+0x78>
 80007ea:	4249      	negs	r1, r1
 80007ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007f0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007f4:	d313      	bcc.n	800081e <__addsf3+0xa6>
 80007f6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007fa:	d306      	bcc.n	800080a <__addsf3+0x92>
 80007fc:	0840      	lsrs	r0, r0, #1
 80007fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000802:	f102 0201 	add.w	r2, r2, #1
 8000806:	2afe      	cmp	r2, #254	@ 0xfe
 8000808:	d251      	bcs.n	80008ae <__addsf3+0x136>
 800080a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800080e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000812:	bf08      	it	eq
 8000814:	f020 0001 	biceq.w	r0, r0, #1
 8000818:	ea40 0003 	orr.w	r0, r0, r3
 800081c:	4770      	bx	lr
 800081e:	0049      	lsls	r1, r1, #1
 8000820:	eb40 0000 	adc.w	r0, r0, r0
 8000824:	3a01      	subs	r2, #1
 8000826:	bf28      	it	cs
 8000828:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800082c:	d2ed      	bcs.n	800080a <__addsf3+0x92>
 800082e:	fab0 fc80 	clz	ip, r0
 8000832:	f1ac 0c08 	sub.w	ip, ip, #8
 8000836:	ebb2 020c 	subs.w	r2, r2, ip
 800083a:	fa00 f00c 	lsl.w	r0, r0, ip
 800083e:	bfaa      	itet	ge
 8000840:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000844:	4252      	neglt	r2, r2
 8000846:	4318      	orrge	r0, r3
 8000848:	bfbc      	itt	lt
 800084a:	40d0      	lsrlt	r0, r2
 800084c:	4318      	orrlt	r0, r3
 800084e:	4770      	bx	lr
 8000850:	f092 0f00 	teq	r2, #0
 8000854:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000858:	bf06      	itte	eq
 800085a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800085e:	3201      	addeq	r2, #1
 8000860:	3b01      	subne	r3, #1
 8000862:	e7b5      	b.n	80007d0 <__addsf3+0x58>
 8000864:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000868:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800086c:	bf18      	it	ne
 800086e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000872:	d021      	beq.n	80008b8 <__addsf3+0x140>
 8000874:	ea92 0f03 	teq	r2, r3
 8000878:	d004      	beq.n	8000884 <__addsf3+0x10c>
 800087a:	f092 0f00 	teq	r2, #0
 800087e:	bf08      	it	eq
 8000880:	4608      	moveq	r0, r1
 8000882:	4770      	bx	lr
 8000884:	ea90 0f01 	teq	r0, r1
 8000888:	bf1c      	itt	ne
 800088a:	2000      	movne	r0, #0
 800088c:	4770      	bxne	lr
 800088e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000892:	d104      	bne.n	800089e <__addsf3+0x126>
 8000894:	0040      	lsls	r0, r0, #1
 8000896:	bf28      	it	cs
 8000898:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800089c:	4770      	bx	lr
 800089e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80008a2:	bf3c      	itt	cc
 80008a4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80008a8:	4770      	bxcc	lr
 80008aa:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008ae:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008b6:	4770      	bx	lr
 80008b8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008bc:	bf16      	itet	ne
 80008be:	4608      	movne	r0, r1
 80008c0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008c4:	4601      	movne	r1, r0
 80008c6:	0242      	lsls	r2, r0, #9
 80008c8:	bf06      	itte	eq
 80008ca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008ce:	ea90 0f01 	teqeq	r0, r1
 80008d2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_ui2f>:
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	e004      	b.n	80008e8 <__aeabi_i2f+0x8>
 80008de:	bf00      	nop

080008e0 <__aeabi_i2f>:
 80008e0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008e4:	bf48      	it	mi
 80008e6:	4240      	negmi	r0, r0
 80008e8:	ea5f 0c00 	movs.w	ip, r0
 80008ec:	bf08      	it	eq
 80008ee:	4770      	bxeq	lr
 80008f0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008f4:	4601      	mov	r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	e01c      	b.n	8000936 <__aeabi_l2f+0x2a>

080008fc <__aeabi_ul2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	e00a      	b.n	8000920 <__aeabi_l2f+0x14>
 800090a:	bf00      	nop

0800090c <__aeabi_l2f>:
 800090c:	ea50 0201 	orrs.w	r2, r0, r1
 8000910:	bf08      	it	eq
 8000912:	4770      	bxeq	lr
 8000914:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000918:	d502      	bpl.n	8000920 <__aeabi_l2f+0x14>
 800091a:	4240      	negs	r0, r0
 800091c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000920:	ea5f 0c01 	movs.w	ip, r1
 8000924:	bf02      	ittt	eq
 8000926:	4684      	moveq	ip, r0
 8000928:	4601      	moveq	r1, r0
 800092a:	2000      	moveq	r0, #0
 800092c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000930:	bf08      	it	eq
 8000932:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000936:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800093a:	fabc f28c 	clz	r2, ip
 800093e:	3a08      	subs	r2, #8
 8000940:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000944:	db10      	blt.n	8000968 <__aeabi_l2f+0x5c>
 8000946:	fa01 fc02 	lsl.w	ip, r1, r2
 800094a:	4463      	add	r3, ip
 800094c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000950:	f1c2 0220 	rsb	r2, r2, #32
 8000954:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000958:	fa20 f202 	lsr.w	r2, r0, r2
 800095c:	eb43 0002 	adc.w	r0, r3, r2
 8000960:	bf08      	it	eq
 8000962:	f020 0001 	biceq.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	f102 0220 	add.w	r2, r2, #32
 800096c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000970:	f1c2 0220 	rsb	r2, r2, #32
 8000974:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000978:	fa21 f202 	lsr.w	r2, r1, r2
 800097c:	eb43 0002 	adc.w	r0, r3, r2
 8000980:	bf08      	it	eq
 8000982:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000986:	4770      	bx	lr

08000988 <__aeabi_fmul>:
 8000988:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800098c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000990:	bf1e      	ittt	ne
 8000992:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000996:	ea92 0f0c 	teqne	r2, ip
 800099a:	ea93 0f0c 	teqne	r3, ip
 800099e:	d06f      	beq.n	8000a80 <__aeabi_fmul+0xf8>
 80009a0:	441a      	add	r2, r3
 80009a2:	ea80 0c01 	eor.w	ip, r0, r1
 80009a6:	0240      	lsls	r0, r0, #9
 80009a8:	bf18      	it	ne
 80009aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009ae:	d01e      	beq.n	80009ee <__aeabi_fmul+0x66>
 80009b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009bc:	fba0 3101 	umull	r3, r1, r0, r1
 80009c0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009c4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009c8:	bf3e      	ittt	cc
 80009ca:	0049      	lslcc	r1, r1, #1
 80009cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009d0:	005b      	lslcc	r3, r3, #1
 80009d2:	ea40 0001 	orr.w	r0, r0, r1
 80009d6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009da:	2afd      	cmp	r2, #253	@ 0xfd
 80009dc:	d81d      	bhi.n	8000a1a <__aeabi_fmul+0x92>
 80009de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	4770      	bx	lr
 80009ee:	f090 0f00 	teq	r0, #0
 80009f2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009f6:	bf08      	it	eq
 80009f8:	0249      	lsleq	r1, r1, #9
 80009fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a02:	3a7f      	subs	r2, #127	@ 0x7f
 8000a04:	bfc2      	ittt	gt
 8000a06:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a0e:	4770      	bxgt	lr
 8000a10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	dc5d      	bgt.n	8000ad8 <__aeabi_fmul+0x150>
 8000a1c:	f112 0f19 	cmn.w	r2, #25
 8000a20:	bfdc      	itt	le
 8000a22:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a26:	4770      	bxle	lr
 8000a28:	f1c2 0200 	rsb	r2, r2, #0
 8000a2c:	0041      	lsls	r1, r0, #1
 8000a2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a32:	f1c2 0220 	rsb	r2, r2, #32
 8000a36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a3e:	f140 0000 	adc.w	r0, r0, #0
 8000a42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a46:	bf08      	it	eq
 8000a48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a4c:	4770      	bx	lr
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a56:	bf02      	ittt	eq
 8000a58:	0040      	lsleq	r0, r0, #1
 8000a5a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a5e:	3a01      	subeq	r2, #1
 8000a60:	d0f9      	beq.n	8000a56 <__aeabi_fmul+0xce>
 8000a62:	ea40 000c 	orr.w	r0, r0, ip
 8000a66:	f093 0f00 	teq	r3, #0
 8000a6a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0049      	lsleq	r1, r1, #1
 8000a72:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a76:	3b01      	subeq	r3, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fmul+0xe6>
 8000a7a:	ea41 010c 	orr.w	r1, r1, ip
 8000a7e:	e78f      	b.n	80009a0 <__aeabi_fmul+0x18>
 8000a80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a84:	ea92 0f0c 	teq	r2, ip
 8000a88:	bf18      	it	ne
 8000a8a:	ea93 0f0c 	teqne	r3, ip
 8000a8e:	d00a      	beq.n	8000aa6 <__aeabi_fmul+0x11e>
 8000a90:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a94:	bf18      	it	ne
 8000a96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a9a:	d1d8      	bne.n	8000a4e <__aeabi_fmul+0xc6>
 8000a9c:	ea80 0001 	eor.w	r0, r0, r1
 8000aa0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000aa4:	4770      	bx	lr
 8000aa6:	f090 0f00 	teq	r0, #0
 8000aaa:	bf17      	itett	ne
 8000aac:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	f091 0f00 	teqne	r1, #0
 8000ab6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000aba:	d014      	beq.n	8000ae6 <__aeabi_fmul+0x15e>
 8000abc:	ea92 0f0c 	teq	r2, ip
 8000ac0:	d101      	bne.n	8000ac6 <__aeabi_fmul+0x13e>
 8000ac2:	0242      	lsls	r2, r0, #9
 8000ac4:	d10f      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ac6:	ea93 0f0c 	teq	r3, ip
 8000aca:	d103      	bne.n	8000ad4 <__aeabi_fmul+0x14c>
 8000acc:	024b      	lsls	r3, r1, #9
 8000ace:	bf18      	it	ne
 8000ad0:	4608      	movne	r0, r1
 8000ad2:	d108      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ad4:	ea80 0001 	eor.w	r0, r0, r1
 8000ad8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000adc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae4:	4770      	bx	lr
 8000ae6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aea:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_fdiv>:
 8000af0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000af4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af8:	bf1e      	ittt	ne
 8000afa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000afe:	ea92 0f0c 	teqne	r2, ip
 8000b02:	ea93 0f0c 	teqne	r3, ip
 8000b06:	d069      	beq.n	8000bdc <__aeabi_fdiv+0xec>
 8000b08:	eba2 0203 	sub.w	r2, r2, r3
 8000b0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b10:	0249      	lsls	r1, r1, #9
 8000b12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b16:	d037      	beq.n	8000b88 <__aeabi_fdiv+0x98>
 8000b18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b24:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	bf38      	it	cc
 8000b2c:	005b      	lslcc	r3, r3, #1
 8000b2e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b32:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b36:	428b      	cmp	r3, r1
 8000b38:	bf24      	itt	cs
 8000b3a:	1a5b      	subcs	r3, r3, r1
 8000b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b44:	bf24      	itt	cs
 8000b46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b52:	bf24      	itt	cs
 8000b54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b60:	bf24      	itt	cs
 8000b62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	bf18      	it	ne
 8000b6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b72:	d1e0      	bne.n	8000b36 <__aeabi_fdiv+0x46>
 8000b74:	2afd      	cmp	r2, #253	@ 0xfd
 8000b76:	f63f af50 	bhi.w	8000a1a <__aeabi_fmul+0x92>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b90:	327f      	adds	r2, #127	@ 0x7f
 8000b92:	bfc2      	ittt	gt
 8000b94:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b9c:	4770      	bxgt	lr
 8000b9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba2:	f04f 0300 	mov.w	r3, #0
 8000ba6:	3a01      	subs	r2, #1
 8000ba8:	e737      	b.n	8000a1a <__aeabi_fmul+0x92>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bb2:	bf02      	ittt	eq
 8000bb4:	0040      	lsleq	r0, r0, #1
 8000bb6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bba:	3a01      	subeq	r2, #1
 8000bbc:	d0f9      	beq.n	8000bb2 <__aeabi_fdiv+0xc2>
 8000bbe:	ea40 000c 	orr.w	r0, r0, ip
 8000bc2:	f093 0f00 	teq	r3, #0
 8000bc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bca:	bf02      	ittt	eq
 8000bcc:	0049      	lsleq	r1, r1, #1
 8000bce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bd2:	3b01      	subeq	r3, #1
 8000bd4:	d0f9      	beq.n	8000bca <__aeabi_fdiv+0xda>
 8000bd6:	ea41 010c 	orr.w	r1, r1, ip
 8000bda:	e795      	b.n	8000b08 <__aeabi_fdiv+0x18>
 8000bdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be0:	ea92 0f0c 	teq	r2, ip
 8000be4:	d108      	bne.n	8000bf8 <__aeabi_fdiv+0x108>
 8000be6:	0242      	lsls	r2, r0, #9
 8000be8:	f47f af7d 	bne.w	8000ae6 <__aeabi_fmul+0x15e>
 8000bec:	ea93 0f0c 	teq	r3, ip
 8000bf0:	f47f af70 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e776      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000bf8:	ea93 0f0c 	teq	r3, ip
 8000bfc:	d104      	bne.n	8000c08 <__aeabi_fdiv+0x118>
 8000bfe:	024b      	lsls	r3, r1, #9
 8000c00:	f43f af4c 	beq.w	8000a9c <__aeabi_fmul+0x114>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e76e      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c08:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c0c:	bf18      	it	ne
 8000c0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c12:	d1ca      	bne.n	8000baa <__aeabi_fdiv+0xba>
 8000c14:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c18:	f47f af5c 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000c1c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c20:	f47f af3c 	bne.w	8000a9c <__aeabi_fmul+0x114>
 8000c24:	e75f      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c26:	bf00      	nop

08000c28 <__aeabi_f2uiz>:
 8000c28:	0042      	lsls	r2, r0, #1
 8000c2a:	d20e      	bcs.n	8000c4a <__aeabi_f2uiz+0x22>
 8000c2c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c30:	d30b      	bcc.n	8000c4a <__aeabi_f2uiz+0x22>
 8000c32:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c36:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c3a:	d409      	bmi.n	8000c50 <__aeabi_f2uiz+0x28>
 8000c3c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c44:	fa23 f002 	lsr.w	r0, r3, r2
 8000c48:	4770      	bx	lr
 8000c4a:	f04f 0000 	mov.w	r0, #0
 8000c4e:	4770      	bx	lr
 8000c50:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c54:	d101      	bne.n	8000c5a <__aeabi_f2uiz+0x32>
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	d102      	bne.n	8000c60 <__aeabi_f2uiz+0x38>
 8000c5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c78:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <MX_ADC1_Init+0xb0>)
 8000c7a:	4a28      	ldr	r2, [pc, #160]	@ (8000d1c <MX_ADC1_Init+0xb4>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c7e:	4b26      	ldr	r3, [pc, #152]	@ (8000d18 <MX_ADC1_Init+0xb0>)
 8000c80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c86:	4b24      	ldr	r3, [pc, #144]	@ (8000d18 <MX_ADC1_Init+0xb0>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <MX_ADC1_Init+0xb0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c92:	4b21      	ldr	r3, [pc, #132]	@ (8000d18 <MX_ADC1_Init+0xb0>)
 8000c94:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <MX_ADC1_Init+0xb0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <MX_ADC1_Init+0xb0>)
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca6:	481c      	ldr	r0, [pc, #112]	@ (8000d18 <MX_ADC1_Init+0xb0>)
 8000ca8:	f000 ff32 	bl	8001b10 <HAL_ADC_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000cb2:	f000 fc77 	bl	80015a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4814      	ldr	r0, [pc, #80]	@ (8000d18 <MX_ADC1_Init+0xb0>)
 8000cc8:	f001 f9b2 	bl	8002030 <HAL_ADC_ConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cd2:	f000 fc67 	bl	80015a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480d      	ldr	r0, [pc, #52]	@ (8000d18 <MX_ADC1_Init+0xb0>)
 8000ce4:	f001 f9a4 	bl	8002030 <HAL_ADC_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000cee:	f000 fc59 	bl	80015a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	@ (8000d18 <MX_ADC1_Init+0xb0>)
 8000d00:	f001 f996 	bl	8002030 <HAL_ADC_ConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d0a:	f000 fc4b 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200001e8 	.word	0x200001e8
 8000d1c:	40012400 	.word	0x40012400

08000d20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000dec <HAL_ADC_MspInit+0xcc>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d151      	bne.n	8000de4 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <HAL_ADC_MspInit+0xd0>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a2a      	ldr	r2, [pc, #168]	@ (8000df0 <HAL_ADC_MspInit+0xd0>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <HAL_ADC_MspInit+0xd0>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <HAL_ADC_MspInit+0xd0>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a24      	ldr	r2, [pc, #144]	@ (8000df0 <HAL_ADC_MspInit+0xd0>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <HAL_ADC_MspInit+0xd0>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Curr_bats_Pin|Vbat1_Pin|Vbat2_Pin;
 8000d70:	2307      	movs	r3, #7
 8000d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d74:	2303      	movs	r3, #3
 8000d76:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	481d      	ldr	r0, [pc, #116]	@ (8000df4 <HAL_ADC_MspInit+0xd4>)
 8000d80:	f001 fe54 	bl	8002a2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <HAL_ADC_MspInit+0xd8>)
 8000d86:	4a1d      	ldr	r2, [pc, #116]	@ (8000dfc <HAL_ADC_MspInit+0xdc>)
 8000d88:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000df8 <HAL_ADC_MspInit+0xd8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d90:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <HAL_ADC_MspInit+0xd8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d96:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <HAL_ADC_MspInit+0xd8>)
 8000d98:	2280      	movs	r2, #128	@ 0x80
 8000d9a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <HAL_ADC_MspInit+0xd8>)
 8000d9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000da2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000da4:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <HAL_ADC_MspInit+0xd8>)
 8000da6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000daa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_ADC_MspInit+0xd8>)
 8000dae:	2220      	movs	r2, #32
 8000db0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000db2:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <HAL_ADC_MspInit+0xd8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000db8:	480f      	ldr	r0, [pc, #60]	@ (8000df8 <HAL_ADC_MspInit+0xd8>)
 8000dba:	f001 fc49 	bl	8002650 <HAL_DMA_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000dc4:	f000 fbee 	bl	80015a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a0b      	ldr	r2, [pc, #44]	@ (8000df8 <HAL_ADC_MspInit+0xd8>)
 8000dcc:	621a      	str	r2, [r3, #32]
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <HAL_ADC_MspInit+0xd8>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2012      	movs	r0, #18
 8000dda:	f001 fc02 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000dde:	2012      	movs	r0, #18
 8000de0:	f001 fc1b 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000de4:	bf00      	nop
 8000de6:	3720      	adds	r7, #32
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40012400 	.word	0x40012400
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010800 	.word	0x40010800
 8000df8:	20000218 	.word	0x20000218
 8000dfc:	40020008 	.word	0x40020008

08000e00 <currentScale>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
uint16_t currentScale(uint16_t rawValue){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
	  return  (uint16_t) rawValue * 0.606 * CONVERSION_FACTOR;
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fc23 	bl	8000658 <__aeabi_i2d>
 8000e12:	a30d      	add	r3, pc, #52	@ (adr r3, 8000e48 <currentScale+0x48>)
 8000e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e18:	f7ff f9a2 	bl	8000160 <__aeabi_dmul>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	a30a      	add	r3, pc, #40	@ (adr r3, 8000e50 <currentScale+0x50>)
 8000e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2a:	f7ff f999 	bl	8000160 <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fc79 	bl	800072c <__aeabi_d2uiz>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b29b      	uxth	r3, r3
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	1cac0831 	.word	0x1cac0831
 8000e4c:	3fe3645a 	.word	0x3fe3645a
 8000e50:	99c99c9a 	.word	0x99c99c9a
 8000e54:	3fe9c99c 	.word	0x3fe9c99c

08000e58 <voltageScale>:
uint16_t voltageScale(uint16_t rawValue){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
	  return  (uint16_t) rawValue * 0.606 * CONVERSION_FACTOR;
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fbf7 	bl	8000658 <__aeabi_i2d>
 8000e6a:	a30d      	add	r3, pc, #52	@ (adr r3, 8000ea0 <voltageScale+0x48>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f7ff f976 	bl	8000160 <__aeabi_dmul>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	a30a      	add	r3, pc, #40	@ (adr r3, 8000ea8 <voltageScale+0x50>)
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	f7ff f96d 	bl	8000160 <__aeabi_dmul>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f7ff fc4d 	bl	800072c <__aeabi_d2uiz>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b29b      	uxth	r3, r3
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	1cac0831 	.word	0x1cac0831
 8000ea4:	3fe3645a 	.word	0x3fe3645a
 8000ea8:	99c99c9a 	.word	0x99c99c9a
 8000eac:	3fe9c99c 	.word	0x3fe9c99c

08000eb0 <INA219_ReadBusVoltage>:
    // Aquí podrías configurar registros de calibración si fuera necesario
    // Por defecto, se asume calibración 32V, 2A
}

uint16_t INA219_ReadBusVoltage(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af04      	add	r7, sp, #16
    uint8_t buffer[2];
    uint16_t raw;

    HAL_I2C_Mem_Read(&hi2c2, INA219_ADDRESS, INA219_REG_BUS_VOLTAGE, 1, buffer, 2, HAL_MAX_DELAY);
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	2180      	movs	r1, #128	@ 0x80
 8000eca:	4810      	ldr	r0, [pc, #64]	@ (8000f0c <INA219_ReadBusVoltage+0x5c>)
 8000ecc:	f002 f9a6 	bl	800321c <HAL_I2C_Mem_Read>
    raw = (buffer[0] << 8) | buffer[1];
 8000ed0:	793b      	ldrb	r3, [r7, #4]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	797b      	ldrb	r3, [r7, #5]
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	80fb      	strh	r3, [r7, #6]
    raw >>= 3;  // los 3 bits LSB no son válidos
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	08db      	lsrs	r3, r3, #3
 8000ee4:	80fb      	strh	r3, [r7, #6]
    return raw * 0.004f;  // resolución 4 mV
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fcf9 	bl	80008e0 <__aeabi_i2f>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4907      	ldr	r1, [pc, #28]	@ (8000f10 <INA219_ReadBusVoltage+0x60>)
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fd48 	bl	8000988 <__aeabi_fmul>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fe94 	bl	8000c28 <__aeabi_f2uiz>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b29b      	uxth	r3, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200002b0 	.word	0x200002b0
 8000f10:	3b83126f 	.word	0x3b83126f

08000f14 <INA219_ReadShuntVoltage>:

uint16_t INA219_ReadShuntVoltage(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af04      	add	r7, sp, #16
    uint8_t buffer[2];
    int16_t raw;

    HAL_I2C_Mem_Read(&hi2c2, INA219_ADDRESS, INA219_REG_SHUNT_VOLTAGE, 1, buffer, 2, HAL_MAX_DELAY);
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2302      	movs	r3, #2
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2180      	movs	r1, #128	@ 0x80
 8000f2e:	480f      	ldr	r0, [pc, #60]	@ (8000f6c <INA219_ReadShuntVoltage+0x58>)
 8000f30:	f002 f974 	bl	800321c <HAL_I2C_Mem_Read>
    raw = (int16_t)((buffer[0] << 8) | buffer[1]);
 8000f34:	793b      	ldrb	r3, [r7, #4]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	797b      	ldrb	r3, [r7, #5]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	80fb      	strh	r3, [r7, #6]
    return raw * 0.01f;  // resolución 10 uV
 8000f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fcca 	bl	80008e0 <__aeabi_i2f>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4908      	ldr	r1, [pc, #32]	@ (8000f70 <INA219_ReadShuntVoltage+0x5c>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fd19 	bl	8000988 <__aeabi_fmul>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe65 	bl	8000c28 <__aeabi_f2uiz>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29b      	uxth	r3, r3
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200002b0 	.word	0x200002b0
 8000f70:	3c23d70a 	.word	0x3c23d70a

08000f74 <INA219_ReadCurrent>:

uint16_t INA219_ReadCurrent(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af04      	add	r7, sp, #16
    uint8_t buffer[2];
    int16_t raw;

    HAL_I2C_Mem_Read(&hi2c2, INA219_ADDRESS, INA219_REG_CURRENT, 1, buffer, 2, HAL_MAX_DELAY);
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2302      	movs	r3, #2
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	2180      	movs	r1, #128	@ 0x80
 8000f8e:	480c      	ldr	r0, [pc, #48]	@ (8000fc0 <INA219_ReadCurrent+0x4c>)
 8000f90:	f002 f944 	bl	800321c <HAL_I2C_Mem_Read>
    raw = (int16_t)((buffer[0] << 8) | buffer[1]);
 8000f94:	793b      	ldrb	r3, [r7, #4]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	797b      	ldrb	r3, [r7, #5]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	80fb      	strh	r3, [r7, #6]
    return raw * 1.0f;  // depende de la calibración
 8000fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fc9a 	bl	80008e0 <__aeabi_i2f>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fe3a 	bl	8000c28 <__aeabi_f2uiz>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29b      	uxth	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200002b0 	.word	0x200002b0

08000fc4 <INA219_ReadPower>:

uint16_t INA219_ReadPower(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af04      	add	r7, sp, #16
    uint8_t buffer[2];
    uint16_t raw;

    HAL_I2C_Mem_Read(&hi2c2, INA219_ADDRESS, INA219_REG_POWER, 1, buffer, 2, HAL_MAX_DELAY);
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fce:	9302      	str	r3, [sp, #8]
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	9301      	str	r3, [sp, #4]
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	480f      	ldr	r0, [pc, #60]	@ (800101c <INA219_ReadPower+0x58>)
 8000fe0:	f002 f91c 	bl	800321c <HAL_I2C_Mem_Read>
    raw = (buffer[0] << 8) | buffer[1];
 8000fe4:	793b      	ldrb	r3, [r7, #4]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	b21a      	sxth	r2, r3
 8000fea:	797b      	ldrb	r3, [r7, #5]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	80fb      	strh	r3, [r7, #6]
    return raw * 20.0f;  // resolución depende de calibración: 20 mW/LSB para default
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fc72 	bl	80008e0 <__aeabi_i2f>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	4908      	ldr	r1, [pc, #32]	@ (8001020 <INA219_ReadPower+0x5c>)
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fcc1 	bl	8000988 <__aeabi_fmul>
 8001006:	4603      	mov	r3, r0
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fe0d 	bl	8000c28 <__aeabi_f2uiz>
 800100e:	4603      	mov	r3, r0
 8001010:	b29b      	uxth	r3, r3
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200002b0 	.word	0x200002b0
 8001020:	41a00000 	.word	0x41a00000

08001024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800102a:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <MX_DMA_Init+0x38>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4a0b      	ldr	r2, [pc, #44]	@ (800105c <MX_DMA_Init+0x38>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6153      	str	r3, [r2, #20]
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <MX_DMA_Init+0x38>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200b      	movs	r0, #11
 8001048:	f001 facb 	bl	80025e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800104c:	200b      	movs	r0, #11
 800104e:	f001 fae4 	bl	800261a <HAL_NVIC_EnableIRQ>

}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000

08001060 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001074:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_GPIO_Init+0xbc>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a28      	ldr	r2, [pc, #160]	@ (800111c <MX_GPIO_Init+0xbc>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_GPIO_Init+0xbc>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0310 	and.w	r3, r3, #16
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_GPIO_Init+0xbc>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a22      	ldr	r2, [pc, #136]	@ (800111c <MX_GPIO_Init+0xbc>)
 8001092:	f043 0320 	orr.w	r3, r3, #32
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_GPIO_Init+0xbc>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0320 	and.w	r3, r3, #32
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_GPIO_Init+0xbc>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <MX_GPIO_Init+0xbc>)
 80010aa:	f043 0304 	orr.w	r3, r3, #4
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_GPIO_Init+0xbc>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010bc:	4b17      	ldr	r3, [pc, #92]	@ (800111c <MX_GPIO_Init+0xbc>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a16      	ldr	r2, [pc, #88]	@ (800111c <MX_GPIO_Init+0xbc>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b14      	ldr	r3, [pc, #80]	@ (800111c <MX_GPIO_Init+0xbc>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activador_GPIO_Port, activador_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010da:	4811      	ldr	r0, [pc, #68]	@ (8001120 <MX_GPIO_Init+0xc0>)
 80010dc:	f001 fe2a 	bl	8002d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activador_Pin;
 80010e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(activador_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	4619      	mov	r1, r3
 80010f8:	4809      	ldr	r0, [pc, #36]	@ (8001120 <MX_GPIO_Init+0xc0>)
 80010fa:	f001 fc97 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001104:	2303      	movs	r3, #3
 8001106:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_GPIO_Init+0xc4>)
 8001110:	f001 fc8c 	bl	8002a2c <HAL_GPIO_Init>

}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	40011000 	.word	0x40011000
 8001124:	40010c00 	.word	0x40010c00

08001128 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <MX_I2C1_Init+0x50>)
 800112e:	4a13      	ldr	r2, [pc, #76]	@ (800117c <MX_I2C1_Init+0x54>)
 8001130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_I2C1_Init+0x50>)
 8001134:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <MX_I2C1_Init+0x58>)
 8001136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_I2C1_Init+0x50>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_I2C1_Init+0x50>)
 8001140:	2200      	movs	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_I2C1_Init+0x50>)
 8001146:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800114a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800114c:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <MX_I2C1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_I2C1_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <MX_I2C1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_I2C1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	@ (8001178 <MX_I2C1_Init+0x50>)
 8001166:	f001 fe17 	bl	8002d98 <HAL_I2C_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001170:	f000 fa18 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000025c 	.word	0x2000025c
 800117c:	40005400 	.word	0x40005400
 8001180:	000186a0 	.word	0x000186a0

08001184 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_I2C2_Init+0x50>)
 800118a:	4a13      	ldr	r2, [pc, #76]	@ (80011d8 <MX_I2C2_Init+0x54>)
 800118c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_I2C2_Init+0x50>)
 8001190:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <MX_I2C2_Init+0x58>)
 8001192:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001194:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_I2C2_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800119a:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <MX_I2C2_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <MX_I2C2_Init+0x50>)
 80011a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <MX_I2C2_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <MX_I2C2_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <MX_I2C2_Init+0x50>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ba:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <MX_I2C2_Init+0x50>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	@ (80011d4 <MX_I2C2_Init+0x50>)
 80011c2:	f001 fde9 	bl	8002d98 <HAL_I2C_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011cc:	f000 f9ea 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200002b0 	.word	0x200002b0
 80011d8:	40005800 	.word	0x40005800
 80011dc:	000186a0 	.word	0x000186a0

080011e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a2b      	ldr	r2, [pc, #172]	@ (80012a8 <HAL_I2C_MspInit+0xc8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d124      	bne.n	800124a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b2a      	ldr	r3, [pc, #168]	@ (80012ac <HAL_I2C_MspInit+0xcc>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a29      	ldr	r2, [pc, #164]	@ (80012ac <HAL_I2C_MspInit+0xcc>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <HAL_I2C_MspInit+0xcc>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001218:	23c0      	movs	r3, #192	@ 0xc0
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121c:	2312      	movs	r3, #18
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0318 	add.w	r3, r7, #24
 8001228:	4619      	mov	r1, r3
 800122a:	4821      	ldr	r0, [pc, #132]	@ (80012b0 <HAL_I2C_MspInit+0xd0>)
 800122c:	f001 fbfe 	bl	8002a2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001230:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <HAL_I2C_MspInit+0xcc>)
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	4a1d      	ldr	r2, [pc, #116]	@ (80012ac <HAL_I2C_MspInit+0xcc>)
 8001236:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800123a:	61d3      	str	r3, [r2, #28]
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <HAL_I2C_MspInit+0xcc>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001248:	e029      	b.n	800129e <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a19      	ldr	r2, [pc, #100]	@ (80012b4 <HAL_I2C_MspInit+0xd4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d124      	bne.n	800129e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_I2C_MspInit+0xcc>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a14      	ldr	r2, [pc, #80]	@ (80012ac <HAL_I2C_MspInit+0xcc>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_I2C_MspInit+0xcc>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800126c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001272:	2312      	movs	r3, #18
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f107 0318 	add.w	r3, r7, #24
 800127e:	4619      	mov	r1, r3
 8001280:	480b      	ldr	r0, [pc, #44]	@ (80012b0 <HAL_I2C_MspInit+0xd0>)
 8001282:	f001 fbd3 	bl	8002a2c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <HAL_I2C_MspInit+0xcc>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <HAL_I2C_MspInit+0xcc>)
 800128c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001290:	61d3      	str	r3, [r2, #28]
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_I2C_MspInit+0xcc>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	@ 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40005400 	.word	0x40005400
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40010c00 	.word	0x40010c00
 80012b4:	40005800 	.word	0x40005800

080012b8 <sendI2CMsg>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void sendI2CMsg(const char* label, uint16_t value) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b094      	sub	sp, #80	@ 0x50
 80012bc:	af02      	add	r7, sp, #8
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
    char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "%s %u \n", label, value);
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	f107 0008 	add.w	r0, r7, #8
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <sendI2CMsg+0x4c>)
 80012d0:	2140      	movs	r1, #64	@ 0x40
 80012d2:	f00a f87f 	bl	800b3d4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_I2C_ADDRESS << 1, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ff38 	bl	8000150 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	f107 0208 	add.w	r2, r7, #8
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012ec:	9100      	str	r1, [sp, #0]
 80012ee:	2110      	movs	r1, #16
 80012f0:	4805      	ldr	r0, [pc, #20]	@ (8001308 <sendI2CMsg+0x50>)
 80012f2:	f001 fe95 	bl	8003020 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 80012f6:	200a      	movs	r0, #10
 80012f8:	f000 fbe6 	bl	8001ac8 <HAL_Delay>
}
 80012fc:	bf00      	nop
 80012fe:	3748      	adds	r7, #72	@ 0x48
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	0800bd74 	.word	0x0800bd74
 8001308:	2000025c 	.word	0x2000025c

0800130c <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t convCompleted=0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	convCompleted=1;
 8001314:	4b03      	ldr	r3, [pc, #12]	@ (8001324 <HAL_ADC_ConvCpltCallback+0x18>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000304 	.word	0x20000304

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b0c1      	sub	sp, #260	@ 0x104
 800132c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132e:	f000 fb69 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001332:	f000 f8d9 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001336:	f7ff fe93 	bl	8001060 <MX_GPIO_Init>
  MX_DMA_Init();
 800133a:	f7ff fe73 	bl	8001024 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800133e:	f000 fac5 	bl	80018cc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001342:	f7ff fc91 	bl	8000c68 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001346:	f000 f9eb 	bl	8001720 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800134a:	f009 fbcd 	bl	800aae8 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800134e:	f7ff feeb 	bl	8001128 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001352:	f7ff ff17 	bl	8001184 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //start PWMs
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001356:	2100      	movs	r1, #0
 8001358:	4854      	ldr	r0, [pc, #336]	@ (80014ac <main+0x184>)
 800135a:	f004 ffe9 	bl	8006330 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, htim1.Init.Period/2);
 800135e:	4b53      	ldr	r3, [pc, #332]	@ (80014ac <main+0x184>)
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	4b52      	ldr	r3, [pc, #328]	@ (80014ac <main+0x184>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	0852      	lsrs	r2, r2, #1
 8001368:	635a      	str	r2, [r3, #52]	@ 0x34


  //ADC Variables
   uint16_t rawValues[14];
   HAL_ADC_Start_DMA(&hadc1,(uint32_t *) rawValues, 14);
 800136a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800136e:	220e      	movs	r2, #14
 8001370:	4619      	mov	r1, r3
 8001372:	484f      	ldr	r0, [pc, #316]	@ (80014b0 <main+0x188>)
 8001374:	f000 fca4 	bl	8001cc0 <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//read all adcs
	while(!convCompleted);
 8001378:	bf00      	nop
 800137a:	4b4e      	ldr	r3, [pc, #312]	@ (80014b4 <main+0x18c>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0fb      	beq.n	800137a <main+0x52>
	//factor de multiplicacion de la corriente en entradas mppt (50 x 33mohm)^-1
	//las tensiones se multiplican x2
	uint16_t current = currentScale(rawValues[0]);
 8001382:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fd3a 	bl	8000e00 <currentScale>
 800138c:	4603      	mov	r3, r0
 800138e:	f8a7 30f6 	strh.w	r3, [r7, #246]	@ 0xf6
	uint16_t voltage_bat1 = voltageScale(rawValues[1]);
 8001392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fd5e 	bl	8000e58 <voltageScale>
 800139c:	4603      	mov	r3, r0
 800139e:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
	uint16_t voltage_bat2 = voltageScale(rawValues[1]);
 80013a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fd56 	bl	8000e58 <voltageScale>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f8a7 30f2 	strh.w	r3, [r7, #242]	@ 0xf2

	// Imprimo cosas
	char buffer[STR_LEN];
	snprintf(buffer, STR_LEN, "\n \n I LIKE THE WAY YOU WORKING \n");
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4a40      	ldr	r2, [pc, #256]	@ (80014b8 <main+0x190>)
 80013b6:	21c8      	movs	r1, #200	@ 0xc8
 80013b8:	4618      	mov	r0, r3
 80013ba:	f00a f80b 	bl	800b3d4 <sniprintf>
	HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7fe fec5 	bl	8000150 <strlen>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	1d3a      	adds	r2, r7, #4
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013d0:	9100      	str	r1, [sp, #0]
 80013d2:	2110      	movs	r1, #16
 80013d4:	4839      	ldr	r0, [pc, #228]	@ (80014bc <main+0x194>)
 80013d6:	f001 fe23 	bl	8003020 <HAL_I2C_Master_Transmit>
/*
    sprintf(buffer,"Corriente: %u \n", current);
	HAL_I2C_Master_Transmit(&hi2c1, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
*/
	//FORMA NUEVA DE IMPRIMIR LLAMANDO A UNA FUNCION SI NO ANDA USAR LA FORMA VIEJA
	sendI2CMsg("Corriente: ", current);
 80013da:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	@ 0xf6
 80013de:	4619      	mov	r1, r3
 80013e0:	4837      	ldr	r0, [pc, #220]	@ (80014c0 <main+0x198>)
 80013e2:	f7ff ff69 	bl	80012b8 <sendI2CMsg>
	sendI2CMsg("Tension bat 1: ", voltage_bat1);
 80013e6:	f8b7 30f4 	ldrh.w	r3, [r7, #244]	@ 0xf4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4835      	ldr	r0, [pc, #212]	@ (80014c4 <main+0x19c>)
 80013ee:	f7ff ff63 	bl	80012b8 <sendI2CMsg>
	sendI2CMsg("Tension bat 2: ", voltage_bat2);
 80013f2:	f8b7 30f2 	ldrh.w	r3, [r7, #242]	@ 0xf2
 80013f6:	4619      	mov	r1, r3
 80013f8:	4833      	ldr	r0, [pc, #204]	@ (80014c8 <main+0x1a0>)
 80013fa:	f7ff ff5d 	bl	80012b8 <sendI2CMsg>


	//BMS 29330

	uint16_t shuntVoltage = INA219_ReadShuntVoltage();
 80013fe:	f7ff fd89 	bl	8000f14 <INA219_ReadShuntVoltage>
 8001402:	4603      	mov	r3, r0
 8001404:	f8a7 30f0 	strh.w	r3, [r7, #240]	@ 0xf0
	uint16_t busVoltage = INA219_ReadBusVoltage();
 8001408:	f7ff fd52 	bl	8000eb0 <INA219_ReadBusVoltage>
 800140c:	4603      	mov	r3, r0
 800140e:	f8a7 30ee 	strh.w	r3, [r7, #238]	@ 0xee
	uint16_t current_mA = INA219_ReadCurrent();
 8001412:	f7ff fdaf 	bl	8000f74 <INA219_ReadCurrent>
 8001416:	4603      	mov	r3, r0
 8001418:	f8a7 30ec 	strh.w	r3, [r7, #236]	@ 0xec
	uint16_t power_mW = INA219_ReadPower();
 800141c:	f7ff fdd2 	bl	8000fc4 <INA219_ReadPower>
 8001420:	4603      	mov	r3, r0
 8001422:	f8a7 30ea 	strh.w	r3, [r7, #234]	@ 0xea
	uint16_t loadVoltage = busVoltage + (shuntVoltage / 1000.0f);
 8001426:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fa58 	bl	80008e0 <__aeabi_i2f>
 8001430:	4604      	mov	r4, r0
 8001432:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fa52 	bl	80008e0 <__aeabi_i2f>
 800143c:	4603      	mov	r3, r0
 800143e:	4923      	ldr	r1, [pc, #140]	@ (80014cc <main+0x1a4>)
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fb55 	bl	8000af0 <__aeabi_fdiv>
 8001446:	4603      	mov	r3, r0
 8001448:	4619      	mov	r1, r3
 800144a:	4620      	mov	r0, r4
 800144c:	f7ff f994 	bl	8000778 <__addsf3>
 8001450:	4603      	mov	r3, r0
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fbe8 	bl	8000c28 <__aeabi_f2uiz>
 8001458:	4603      	mov	r3, r0
 800145a:	f8a7 30e8 	strh.w	r3, [r7, #232]	@ 0xe8
	sendI2CMsg("Bus Voltage: ", busVoltage);
 800145e:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	@ 0xee
 8001462:	4619      	mov	r1, r3
 8001464:	481a      	ldr	r0, [pc, #104]	@ (80014d0 <main+0x1a8>)
 8001466:	f7ff ff27 	bl	80012b8 <sendI2CMsg>
	sendI2CMsg("Shunt Voltage: ", shuntVoltage);
 800146a:	f8b7 30f0 	ldrh.w	r3, [r7, #240]	@ 0xf0
 800146e:	4619      	mov	r1, r3
 8001470:	4818      	ldr	r0, [pc, #96]	@ (80014d4 <main+0x1ac>)
 8001472:	f7ff ff21 	bl	80012b8 <sendI2CMsg>
	sendI2CMsg("Load Voltage: ", loadVoltage);
 8001476:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 800147a:	4619      	mov	r1, r3
 800147c:	4816      	ldr	r0, [pc, #88]	@ (80014d8 <main+0x1b0>)
 800147e:	f7ff ff1b 	bl	80012b8 <sendI2CMsg>
	sendI2CMsg("Current: ", current_mA);
 8001482:	f8b7 30ec 	ldrh.w	r3, [r7, #236]	@ 0xec
 8001486:	4619      	mov	r1, r3
 8001488:	4814      	ldr	r0, [pc, #80]	@ (80014dc <main+0x1b4>)
 800148a:	f7ff ff15 	bl	80012b8 <sendI2CMsg>
	sendI2CMsg("Power: ", power_mW);
 800148e:	f8b7 30ea 	ldrh.w	r3, [r7, #234]	@ 0xea
 8001492:	4619      	mov	r1, r3
 8001494:	4812      	ldr	r0, [pc, #72]	@ (80014e0 <main+0x1b8>)
 8001496:	f7ff ff0f 	bl	80012b8 <sendI2CMsg>




	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800149a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800149e:	4811      	ldr	r0, [pc, #68]	@ (80014e4 <main+0x1bc>)
 80014a0:	f001 fc60 	bl	8002d64 <HAL_GPIO_TogglePin>
	HAL_Delay(DELAY);
 80014a4:	20c8      	movs	r0, #200	@ 0xc8
 80014a6:	f000 fb0f 	bl	8001ac8 <HAL_Delay>
  {
 80014aa:	e765      	b.n	8001378 <main+0x50>
 80014ac:	2000030c 	.word	0x2000030c
 80014b0:	200001e8 	.word	0x200001e8
 80014b4:	20000304 	.word	0x20000304
 80014b8:	0800bd7c 	.word	0x0800bd7c
 80014bc:	2000025c 	.word	0x2000025c
 80014c0:	0800bda0 	.word	0x0800bda0
 80014c4:	0800bdac 	.word	0x0800bdac
 80014c8:	0800bdbc 	.word	0x0800bdbc
 80014cc:	447a0000 	.word	0x447a0000
 80014d0:	0800bdcc 	.word	0x0800bdcc
 80014d4:	0800bddc 	.word	0x0800bddc
 80014d8:	0800bdec 	.word	0x0800bdec
 80014dc:	0800bdfc 	.word	0x0800bdfc
 80014e0:	0800be08 	.word	0x0800be08
 80014e4:	40011000 	.word	0x40011000

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b094      	sub	sp, #80	@ 0x50
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014f2:	2228      	movs	r2, #40	@ 0x28
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f009 ffa0 	bl	800b43c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001518:	2301      	movs	r3, #1
 800151a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001526:	2301      	movs	r3, #1
 8001528:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001532:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001534:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001538:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800153e:	4618      	mov	r0, r3
 8001540:	f004 f9e0 	bl	8005904 <HAL_RCC_OscConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800154a:	f000 f82b 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	230f      	movs	r3, #15
 8001550:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001552:	2302      	movs	r3, #2
 8001554:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800155e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2101      	movs	r1, #1
 800156a:	4618      	mov	r0, r3
 800156c:	f004 fc4c 	bl	8005e08 <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001576:	f000 f815 	bl	80015a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800157a:	2312      	movs	r3, #18
 800157c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800157e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001582:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001584:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001588:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4618      	mov	r0, r3
 800158e:	f004 fdc9 	bl	8006124 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001598:	f000 f804 	bl	80015a4 <Error_Handler>
  }
}
 800159c:	bf00      	nop
 800159e:	3750      	adds	r7, #80	@ 0x50
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <Error_Handler+0x8>

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_MspInit+0x5c>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	4a14      	ldr	r2, [pc, #80]	@ (800160c <HAL_MspInit+0x5c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6193      	str	r3, [r2, #24]
 80015c2:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_MspInit+0x5c>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <HAL_MspInit+0x5c>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a0e      	ldr	r2, [pc, #56]	@ (800160c <HAL_MspInit+0x5c>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <HAL_MspInit+0x5c>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_MspInit+0x60>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <HAL_MspInit+0x60>)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000
 8001610:	40010000 	.word	0x40010000

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <NMI_Handler+0x4>

0800161c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <MemManage_Handler+0x4>

0800162c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <UsageFault_Handler+0x4>

0800163c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001664:	f000 fa14 	bl	8001a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <DMA1_Channel1_IRQHandler+0x10>)
 8001672:	f001 f8a7 	bl	80027c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000218 	.word	0x20000218

08001680 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <ADC1_2_IRQHandler+0x10>)
 8001686:	f000 fbf9 	bl	8001e7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200001e8 	.word	0x200001e8

08001694 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800169a:	f002 fcee 	bl	800407a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20001068 	.word	0x20001068

080016a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b0:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <_sbrk+0x5c>)
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <_sbrk+0x60>)
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <_sbrk+0x64>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <_sbrk+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d207      	bcs.n	80016e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d8:	f009 feb8 	bl	800b44c <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	220c      	movs	r2, #12
 80016e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e6:	e009      	b.n	80016fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a05      	ldr	r2, [pc, #20]	@ (800170c <_sbrk+0x64>)
 80016f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20005000 	.word	0x20005000
 8001708:	00000400 	.word	0x00000400
 800170c:	20000308 	.word	0x20000308
 8001710:	200016a8 	.word	0x200016a8

08001714 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b092      	sub	sp, #72	@ 0x48
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001726:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
 8001740:	615a      	str	r2, [r3, #20]
 8001742:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2220      	movs	r2, #32
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f009 fe76 	bl	800b43c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001750:	4b33      	ldr	r3, [pc, #204]	@ (8001820 <MX_TIM1_Init+0x100>)
 8001752:	4a34      	ldr	r2, [pc, #208]	@ (8001824 <MX_TIM1_Init+0x104>)
 8001754:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001756:	4b32      	ldr	r3, [pc, #200]	@ (8001820 <MX_TIM1_Init+0x100>)
 8001758:	2201      	movs	r2, #1
 800175a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b30      	ldr	r3, [pc, #192]	@ (8001820 <MX_TIM1_Init+0x100>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 750;
 8001762:	4b2f      	ldr	r3, [pc, #188]	@ (8001820 <MX_TIM1_Init+0x100>)
 8001764:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001768:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800176a:	4b2d      	ldr	r3, [pc, #180]	@ (8001820 <MX_TIM1_Init+0x100>)
 800176c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001770:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001772:	4b2b      	ldr	r3, [pc, #172]	@ (8001820 <MX_TIM1_Init+0x100>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001778:	4b29      	ldr	r3, [pc, #164]	@ (8001820 <MX_TIM1_Init+0x100>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800177e:	4828      	ldr	r0, [pc, #160]	@ (8001820 <MX_TIM1_Init+0x100>)
 8001780:	f004 fd86 	bl	8006290 <HAL_TIM_PWM_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800178a:	f7ff ff0b 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001796:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800179a:	4619      	mov	r1, r3
 800179c:	4820      	ldr	r0, [pc, #128]	@ (8001820 <MX_TIM1_Init+0x100>)
 800179e:	f005 f945 	bl	8006a2c <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80017a8:	f7ff fefc 	bl	80015a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ac:	2360      	movs	r3, #96	@ 0x60
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017b8:	2300      	movs	r3, #0
 80017ba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017cc:	2200      	movs	r2, #0
 80017ce:	4619      	mov	r1, r3
 80017d0:	4813      	ldr	r0, [pc, #76]	@ (8001820 <MX_TIM1_Init+0x100>)
 80017d2:	f004 fe4f 	bl	8006474 <HAL_TIM_PWM_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80017dc:	f7ff fee2 	bl	80015a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	4619      	mov	r1, r3
 8001802:	4807      	ldr	r0, [pc, #28]	@ (8001820 <MX_TIM1_Init+0x100>)
 8001804:	f005 f970 	bl	8006ae8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800180e:	f7ff fec9 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001812:	4803      	ldr	r0, [pc, #12]	@ (8001820 <MX_TIM1_Init+0x100>)
 8001814:	f000 f826 	bl	8001864 <HAL_TIM_MspPostInit>

}
 8001818:	bf00      	nop
 800181a:	3748      	adds	r7, #72	@ 0x48
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2000030c 	.word	0x2000030c
 8001824:	40012c00 	.word	0x40012c00

08001828 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a09      	ldr	r2, [pc, #36]	@ (800185c <HAL_TIM_PWM_MspInit+0x34>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d10b      	bne.n	8001852 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_TIM_PWM_MspInit+0x38>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4a08      	ldr	r2, [pc, #32]	@ (8001860 <HAL_TIM_PWM_MspInit+0x38>)
 8001840:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001844:	6193      	str	r3, [r2, #24]
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_TIM_PWM_MspInit+0x38>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	40012c00 	.word	0x40012c00
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a10      	ldr	r2, [pc, #64]	@ (80018c0 <HAL_TIM_MspPostInit+0x5c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d118      	bne.n	80018b6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <HAL_TIM_MspPostInit+0x60>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a0e      	ldr	r2, [pc, #56]	@ (80018c4 <HAL_TIM_MspPostInit+0x60>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <HAL_TIM_MspPostInit+0x60>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = WDI_32KHz_Pin;
 800189c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WDI_32KHz_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <HAL_TIM_MspPostInit+0x64>)
 80018b2:	f001 f8bb 	bl	8002a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40012c00 	.word	0x40012c00
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010800 	.word	0x40010800

080018cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <MX_USART1_UART_Init+0x50>)
 80018d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018f0:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018fc:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_USART1_UART_Init+0x4c>)
 8001904:	f005 f941 	bl	8006b8a <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800190e:	f7ff fe49 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000354 	.word	0x20000354
 800191c:	40013800 	.word	0x40013800

08001920 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1c      	ldr	r2, [pc, #112]	@ (80019ac <HAL_UART_MspInit+0x8c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d131      	bne.n	80019a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <HAL_UART_MspInit+0x90>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a1a      	ldr	r2, [pc, #104]	@ (80019b0 <HAL_UART_MspInit+0x90>)
 8001946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b18      	ldr	r3, [pc, #96]	@ (80019b0 <HAL_UART_MspInit+0x90>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_UART_MspInit+0x90>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a14      	ldr	r2, [pc, #80]	@ (80019b0 <HAL_UART_MspInit+0x90>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_UART_MspInit+0x90>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001970:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	4619      	mov	r1, r3
 8001984:	480b      	ldr	r0, [pc, #44]	@ (80019b4 <HAL_UART_MspInit+0x94>)
 8001986:	f001 f851 	bl	8002a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800198a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800198e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	4619      	mov	r1, r3
 800199e:	4805      	ldr	r0, [pc, #20]	@ (80019b4 <HAL_UART_MspInit+0x94>)
 80019a0:	f001 f844 	bl	8002a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40013800 	.word	0x40013800
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40010800 	.word	0x40010800

080019b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b8:	f7ff feac 	bl	8001714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019bc:	480b      	ldr	r0, [pc, #44]	@ (80019ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019be:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019c0:	4a0c      	ldr	r2, [pc, #48]	@ (80019f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a09      	ldr	r2, [pc, #36]	@ (80019f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019d4:	4c09      	ldr	r4, [pc, #36]	@ (80019fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e2:	f009 fd39 	bl	800b458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019e6:	f7ff fc9f 	bl	8001328 <main>
  bx lr
 80019ea:	4770      	bx	lr
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80019f4:	0800bec8 	.word	0x0800bec8
  ldr r2, =_sbss
 80019f8:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80019fc:	200016a8 	.word	0x200016a8

08001a00 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <CAN1_RX1_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <HAL_Init+0x28>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <HAL_Init+0x28>)
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
 8001a16:	f000 fdd9 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1a:	200f      	movs	r0, #15
 8001a1c:	f000 f808 	bl	8001a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a20:	f7ff fdc6 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40022000 	.word	0x40022000

08001a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_InitTick+0x54>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_InitTick+0x58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fdf1 	bl	8002636 <HAL_SYSTICK_Config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00e      	b.n	8001a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d80a      	bhi.n	8001a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a64:	2200      	movs	r2, #0
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a6c:	f000 fdb9 	bl	80025e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a70:	4a06      	ldr	r2, [pc, #24]	@ (8001a8c <HAL_InitTick+0x5c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	e000      	b.n	8001a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000008 	.word	0x20000008
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_IncTick+0x1c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <HAL_IncTick+0x20>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a03      	ldr	r2, [pc, #12]	@ (8001ab0 <HAL_IncTick+0x20>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	2000039c 	.word	0x2000039c

08001ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab8:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <HAL_GetTick+0x10>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	2000039c 	.word	0x2000039c

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff fff0 	bl	8001ab4 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffe0 	bl	8001ab4 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008

08001b10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e0be      	b.n	8001cb0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff f8e6 	bl	8000d20 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 fbbd 	bl	80022d4 <ADC_ConversionStop_Disable>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 8099 	bne.w	8001c9e <HAL_ADC_Init+0x18e>
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 8095 	bne.w	8001c9e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b78:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b7c:	f023 0302 	bic.w	r3, r3, #2
 8001b80:	f043 0202 	orr.w	r2, r3, #2
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7b1b      	ldrb	r3, [r3, #12]
 8001b96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ba8:	d003      	beq.n	8001bb2 <HAL_ADC_Init+0xa2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d102      	bne.n	8001bb8 <HAL_ADC_Init+0xa8>
 8001bb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bb6:	e000      	b.n	8001bba <HAL_ADC_Init+0xaa>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7d1b      	ldrb	r3, [r3, #20]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d119      	bne.n	8001bfc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7b1b      	ldrb	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	035a      	lsls	r2, r3, #13
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e00b      	b.n	8001bfc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	f043 0220 	orr.w	r2, r3, #32
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <HAL_ADC_Init+0x1a8>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	68b9      	ldr	r1, [r7, #8]
 8001c20:	430b      	orrs	r3, r1
 8001c22:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c2c:	d003      	beq.n	8001c36 <HAL_ADC_Init+0x126>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d104      	bne.n	8001c40 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	051b      	lsls	r3, r3, #20
 8001c3e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c46:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	4b18      	ldr	r3, [pc, #96]	@ (8001cbc <HAL_ADC_Init+0x1ac>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d10b      	bne.n	8001c7c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6e:	f023 0303 	bic.w	r3, r3, #3
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c7a:	e018      	b.n	8001cae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	f023 0312 	bic.w	r3, r3, #18
 8001c84:	f043 0210 	orr.w	r2, r3, #16
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c90:	f043 0201 	orr.w	r2, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c9c:	e007      	b.n	8001cae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca2:	f043 0210 	orr.w	r2, r3, #16
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	ffe1f7fd 	.word	0xffe1f7fd
 8001cbc:	ff1f0efe 	.word	0xff1f0efe

08001cc0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a64      	ldr	r2, [pc, #400]	@ (8001e68 <HAL_ADC_Start_DMA+0x1a8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d004      	beq.n	8001ce4 <HAL_ADC_Start_DMA+0x24>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a63      	ldr	r2, [pc, #396]	@ (8001e6c <HAL_ADC_Start_DMA+0x1ac>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d106      	bne.n	8001cf2 <HAL_ADC_Start_DMA+0x32>
 8001ce4:	4b60      	ldr	r3, [pc, #384]	@ (8001e68 <HAL_ADC_Start_DMA+0x1a8>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f040 80b3 	bne.w	8001e58 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_Start_DMA+0x40>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e0ae      	b.n	8001e5e <HAL_ADC_Start_DMA+0x19e>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 fa89 	bl	8002220 <ADC_Enable>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f040 809a 	bne.w	8001e4e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a4e      	ldr	r2, [pc, #312]	@ (8001e6c <HAL_ADC_Start_DMA+0x1ac>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d105      	bne.n	8001d44 <HAL_ADC_Start_DMA+0x84>
 8001d38:	4b4b      	ldr	r3, [pc, #300]	@ (8001e68 <HAL_ADC_Start_DMA+0x1a8>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d115      	bne.n	8001d70 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d026      	beq.n	8001dac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d66:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d6e:	e01d      	b.n	8001dac <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d74:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a39      	ldr	r2, [pc, #228]	@ (8001e68 <HAL_ADC_Start_DMA+0x1a8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d004      	beq.n	8001d90 <HAL_ADC_Start_DMA+0xd0>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a38      	ldr	r2, [pc, #224]	@ (8001e6c <HAL_ADC_Start_DMA+0x1ac>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d10d      	bne.n	8001dac <HAL_ADC_Start_DMA+0xec>
 8001d90:	4b35      	ldr	r3, [pc, #212]	@ (8001e68 <HAL_ADC_Start_DMA+0x1a8>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001da4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbc:	f023 0206 	bic.w	r2, r3, #6
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001dc4:	e002      	b.n	8001dcc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4a25      	ldr	r2, [pc, #148]	@ (8001e70 <HAL_ADC_Start_DMA+0x1b0>)
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a24      	ldr	r2, [pc, #144]	@ (8001e74 <HAL_ADC_Start_DMA+0x1b4>)
 8001de2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4a23      	ldr	r2, [pc, #140]	@ (8001e78 <HAL_ADC_Start_DMA+0x1b8>)
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0202 	mvn.w	r2, #2
 8001df4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e04:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a18      	ldr	r0, [r3, #32]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	334c      	adds	r3, #76	@ 0x4c
 8001e10:	4619      	mov	r1, r3
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f000 fc75 	bl	8002704 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e24:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e28:	d108      	bne.n	8001e3c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001e38:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e3a:	e00f      	b.n	8001e5c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e4a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e4c:	e006      	b.n	8001e5c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001e56:	e001      	b.n	8001e5c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40012400 	.word	0x40012400
 8001e6c:	40012800 	.word	0x40012800
 8001e70:	08002357 	.word	0x08002357
 8001e74:	080023d3 	.word	0x080023d3
 8001e78:	080023ef 	.word	0x080023ef

08001e7c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d03e      	beq.n	8001f1c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d039      	beq.n	8001f1c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001eca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ece:	d11d      	bne.n	8001f0c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d119      	bne.n	8001f0c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0220 	bic.w	r2, r2, #32
 8001ee6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f04:	f043 0201 	orr.w	r2, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff f9fd 	bl	800130c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f06f 0212 	mvn.w	r2, #18
 8001f1a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d04d      	beq.n	8001fc2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d048      	beq.n	8001fc2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d105      	bne.n	8001f48 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001f52:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001f56:	d012      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d125      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f70:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f74:	d11d      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d119      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f8c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d105      	bne.n	8001fb2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001faa:	f043 0201 	orr.w	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fa35 	bl	8002422 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 020c 	mvn.w	r2, #12
 8001fc0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d012      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f812 	bl	800200c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f06f 0201 	mvn.w	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x20>
 800204c:	2302      	movs	r3, #2
 800204e:	e0dc      	b.n	800220a <HAL_ADC_ConfigChannel+0x1da>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b06      	cmp	r3, #6
 800205e:	d81c      	bhi.n	800209a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	3b05      	subs	r3, #5
 8002072:	221f      	movs	r2, #31
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	4019      	ands	r1, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	3b05      	subs	r3, #5
 800208c:	fa00 f203 	lsl.w	r2, r0, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	635a      	str	r2, [r3, #52]	@ 0x34
 8002098:	e03c      	b.n	8002114 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b0c      	cmp	r3, #12
 80020a0:	d81c      	bhi.n	80020dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	3b23      	subs	r3, #35	@ 0x23
 80020b4:	221f      	movs	r2, #31
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	4019      	ands	r1, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	3b23      	subs	r3, #35	@ 0x23
 80020ce:	fa00 f203 	lsl.w	r2, r0, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80020da:	e01b      	b.n	8002114 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	3b41      	subs	r3, #65	@ 0x41
 80020ee:	221f      	movs	r2, #31
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	4019      	ands	r1, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	3b41      	subs	r3, #65	@ 0x41
 8002108:	fa00 f203 	lsl.w	r2, r0, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b09      	cmp	r3, #9
 800211a:	d91c      	bls.n	8002156 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68d9      	ldr	r1, [r3, #12]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	3b1e      	subs	r3, #30
 800212e:	2207      	movs	r2, #7
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	4019      	ands	r1, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6898      	ldr	r0, [r3, #8]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	3b1e      	subs	r3, #30
 8002148:	fa00 f203 	lsl.w	r2, r0, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	60da      	str	r2, [r3, #12]
 8002154:	e019      	b.n	800218a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6919      	ldr	r1, [r3, #16]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	2207      	movs	r2, #7
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	4019      	ands	r1, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6898      	ldr	r0, [r3, #8]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	fa00 f203 	lsl.w	r2, r0, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b10      	cmp	r3, #16
 8002190:	d003      	beq.n	800219a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002196:	2b11      	cmp	r3, #17
 8002198:	d132      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1d      	ldr	r2, [pc, #116]	@ (8002214 <HAL_ADC_ConfigChannel+0x1e4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d125      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d126      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80021c0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d11a      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ca:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <HAL_ADC_ConfigChannel+0x1e8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a13      	ldr	r2, [pc, #76]	@ (800221c <HAL_ADC_ConfigChannel+0x1ec>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	0c9a      	lsrs	r2, r3, #18
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021e0:	e002      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f9      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x1b2>
 80021ee:	e007      	b.n	8002200 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f4:	f043 0220 	orr.w	r2, r3, #32
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	40012400 	.word	0x40012400
 8002218:	20000000 	.word	0x20000000
 800221c:	431bde83 	.word	0x431bde83

08002220 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d040      	beq.n	80022c0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 0201 	orr.w	r2, r2, #1
 800224c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800224e:	4b1f      	ldr	r3, [pc, #124]	@ (80022cc <ADC_Enable+0xac>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a1f      	ldr	r2, [pc, #124]	@ (80022d0 <ADC_Enable+0xb0>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	0c9b      	lsrs	r3, r3, #18
 800225a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800225c:	e002      	b.n	8002264 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3b01      	subs	r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f9      	bne.n	800225e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800226a:	f7ff fc23 	bl	8001ab4 <HAL_GetTick>
 800226e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002270:	e01f      	b.n	80022b2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002272:	f7ff fc1f 	bl	8001ab4 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d918      	bls.n	80022b2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d011      	beq.n	80022b2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002292:	f043 0210 	orr.w	r2, r3, #16
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e007      	b.n	80022c2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d1d8      	bne.n	8002272 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000000 	.word	0x20000000
 80022d0:	431bde83 	.word	0x431bde83

080022d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d12e      	bne.n	800234c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0201 	bic.w	r2, r2, #1
 80022fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022fe:	f7ff fbd9 	bl	8001ab4 <HAL_GetTick>
 8002302:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002304:	e01b      	b.n	800233e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002306:	f7ff fbd5 	bl	8001ab4 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d914      	bls.n	800233e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10d      	bne.n	800233e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	f043 0210 	orr.w	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e007      	b.n	800234e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d0dc      	beq.n	8002306 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800236c:	2b00      	cmp	r3, #0
 800236e:	d127      	bne.n	80023c0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002374:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002386:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800238a:	d115      	bne.n	80023b8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002390:	2b00      	cmp	r3, #0
 8002392:	d111      	bne.n	80023b8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f7fe ffa7 	bl	800130c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023be:	e004      	b.n	80023ca <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b084      	sub	sp, #16
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f7ff fe0a 	bl	8001ffa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240c:	f043 0204 	orr.w	r2, r3, #4
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f7ff fe02 	bl	800201e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002450:	4013      	ands	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800245c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002466:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	60d3      	str	r3, [r2, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002480:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <__NVIC_GetPriorityGrouping+0x18>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	f003 0307 	and.w	r3, r3, #7
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db0b      	blt.n	80024c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4906      	ldr	r1, [pc, #24]	@ (80024cc <__NVIC_EnableIRQ+0x34>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2001      	movs	r0, #1
 80024ba:	fa00 f202 	lsl.w	r2, r0, r2
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	e000e100 	.word	0xe000e100

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	@ (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	@ (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	@ 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025ac:	f7ff ff90 	bl	80024d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff2d 	bl	8002434 <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f4:	f7ff ff42 	bl	800247c <__NVIC_GetPriorityGrouping>
 80025f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f7ff ff90 	bl	8002524 <NVIC_EncodePriority>
 8002604:	4602      	mov	r2, r0
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff5f 	bl	80024d0 <__NVIC_SetPriority>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff35 	bl	8002498 <__NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffa2 	bl	8002588 <SysTick_Config>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e043      	b.n	80026ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <HAL_DMA_Init+0xa8>)
 800266e:	4413      	add	r3, r2
 8002670:	4a22      	ldr	r2, [pc, #136]	@ (80026fc <HAL_DMA_Init+0xac>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	009a      	lsls	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a1f      	ldr	r2, [pc, #124]	@ (8002700 <HAL_DMA_Init+0xb0>)
 8002682:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800269a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800269e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	bffdfff8 	.word	0xbffdfff8
 80026fc:	cccccccd 	.word	0xcccccccd
 8002700:	40020000 	.word	0x40020000

08002704 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_DMA_Start_IT+0x20>
 8002720:	2302      	movs	r3, #2
 8002722:	e04b      	b.n	80027bc <HAL_DMA_Start_IT+0xb8>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d13a      	bne.n	80027ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68b9      	ldr	r1, [r7, #8]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f937 	bl	80029d0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	2b00      	cmp	r3, #0
 8002768:	d008      	beq.n	800277c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 020e 	orr.w	r2, r2, #14
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	e00f      	b.n	800279c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0204 	bic.w	r2, r2, #4
 800278a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 020a 	orr.w	r2, r2, #10
 800279a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	e005      	b.n	80027ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
 80027b8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	2204      	movs	r2, #4
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d04f      	beq.n	800288c <HAL_DMA_IRQHandler+0xc8>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d04a      	beq.n	800288c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0204 	bic.w	r2, r2, #4
 8002812:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a66      	ldr	r2, [pc, #408]	@ (80029b4 <HAL_DMA_IRQHandler+0x1f0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d029      	beq.n	8002872 <HAL_DMA_IRQHandler+0xae>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a65      	ldr	r2, [pc, #404]	@ (80029b8 <HAL_DMA_IRQHandler+0x1f4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d022      	beq.n	800286e <HAL_DMA_IRQHandler+0xaa>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a63      	ldr	r2, [pc, #396]	@ (80029bc <HAL_DMA_IRQHandler+0x1f8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01a      	beq.n	8002868 <HAL_DMA_IRQHandler+0xa4>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a62      	ldr	r2, [pc, #392]	@ (80029c0 <HAL_DMA_IRQHandler+0x1fc>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d012      	beq.n	8002862 <HAL_DMA_IRQHandler+0x9e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a60      	ldr	r2, [pc, #384]	@ (80029c4 <HAL_DMA_IRQHandler+0x200>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00a      	beq.n	800285c <HAL_DMA_IRQHandler+0x98>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a5f      	ldr	r2, [pc, #380]	@ (80029c8 <HAL_DMA_IRQHandler+0x204>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d102      	bne.n	8002856 <HAL_DMA_IRQHandler+0x92>
 8002850:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002854:	e00e      	b.n	8002874 <HAL_DMA_IRQHandler+0xb0>
 8002856:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800285a:	e00b      	b.n	8002874 <HAL_DMA_IRQHandler+0xb0>
 800285c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002860:	e008      	b.n	8002874 <HAL_DMA_IRQHandler+0xb0>
 8002862:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002866:	e005      	b.n	8002874 <HAL_DMA_IRQHandler+0xb0>
 8002868:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800286c:	e002      	b.n	8002874 <HAL_DMA_IRQHandler+0xb0>
 800286e:	2340      	movs	r3, #64	@ 0x40
 8002870:	e000      	b.n	8002874 <HAL_DMA_IRQHandler+0xb0>
 8002872:	2304      	movs	r3, #4
 8002874:	4a55      	ldr	r2, [pc, #340]	@ (80029cc <HAL_DMA_IRQHandler+0x208>)
 8002876:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 8094 	beq.w	80029aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800288a:	e08e      	b.n	80029aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002890:	2202      	movs	r2, #2
 8002892:	409a      	lsls	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d056      	beq.n	800294a <HAL_DMA_IRQHandler+0x186>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d051      	beq.n	800294a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10b      	bne.n	80028cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 020a 	bic.w	r2, r2, #10
 80028c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a38      	ldr	r2, [pc, #224]	@ (80029b4 <HAL_DMA_IRQHandler+0x1f0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d029      	beq.n	800292a <HAL_DMA_IRQHandler+0x166>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a37      	ldr	r2, [pc, #220]	@ (80029b8 <HAL_DMA_IRQHandler+0x1f4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <HAL_DMA_IRQHandler+0x162>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a35      	ldr	r2, [pc, #212]	@ (80029bc <HAL_DMA_IRQHandler+0x1f8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01a      	beq.n	8002920 <HAL_DMA_IRQHandler+0x15c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a34      	ldr	r2, [pc, #208]	@ (80029c0 <HAL_DMA_IRQHandler+0x1fc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d012      	beq.n	800291a <HAL_DMA_IRQHandler+0x156>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <HAL_DMA_IRQHandler+0x200>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00a      	beq.n	8002914 <HAL_DMA_IRQHandler+0x150>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a31      	ldr	r2, [pc, #196]	@ (80029c8 <HAL_DMA_IRQHandler+0x204>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d102      	bne.n	800290e <HAL_DMA_IRQHandler+0x14a>
 8002908:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800290c:	e00e      	b.n	800292c <HAL_DMA_IRQHandler+0x168>
 800290e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002912:	e00b      	b.n	800292c <HAL_DMA_IRQHandler+0x168>
 8002914:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002918:	e008      	b.n	800292c <HAL_DMA_IRQHandler+0x168>
 800291a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800291e:	e005      	b.n	800292c <HAL_DMA_IRQHandler+0x168>
 8002920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002924:	e002      	b.n	800292c <HAL_DMA_IRQHandler+0x168>
 8002926:	2320      	movs	r3, #32
 8002928:	e000      	b.n	800292c <HAL_DMA_IRQHandler+0x168>
 800292a:	2302      	movs	r3, #2
 800292c:	4a27      	ldr	r2, [pc, #156]	@ (80029cc <HAL_DMA_IRQHandler+0x208>)
 800292e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	d034      	beq.n	80029aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002948:	e02f      	b.n	80029aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	2208      	movs	r2, #8
 8002950:	409a      	lsls	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d028      	beq.n	80029ac <HAL_DMA_IRQHandler+0x1e8>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d023      	beq.n	80029ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 020e 	bic.w	r2, r2, #14
 8002972:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
    }
  }
  return;
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
}
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40020008 	.word	0x40020008
 80029b8:	4002001c 	.word	0x4002001c
 80029bc:	40020030 	.word	0x40020030
 80029c0:	40020044 	.word	0x40020044
 80029c4:	40020058 	.word	0x40020058
 80029c8:	4002006c 	.word	0x4002006c
 80029cc:	40020000 	.word	0x40020000

080029d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e6:	2101      	movs	r1, #1
 80029e8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d108      	bne.n	8002a10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a0e:	e007      	b.n	8002a20 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	60da      	str	r2, [r3, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
	...

08002a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b08b      	sub	sp, #44	@ 0x2c
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a36:	2300      	movs	r3, #0
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3e:	e169      	b.n	8002d14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a40:	2201      	movs	r2, #1
 8002a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	f040 8158 	bne.w	8002d0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	4a9a      	ldr	r2, [pc, #616]	@ (8002ccc <HAL_GPIO_Init+0x2a0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d05e      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a68:	4a98      	ldr	r2, [pc, #608]	@ (8002ccc <HAL_GPIO_Init+0x2a0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d875      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a6e:	4a98      	ldr	r2, [pc, #608]	@ (8002cd0 <HAL_GPIO_Init+0x2a4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d058      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a74:	4a96      	ldr	r2, [pc, #600]	@ (8002cd0 <HAL_GPIO_Init+0x2a4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d86f      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a7a:	4a96      	ldr	r2, [pc, #600]	@ (8002cd4 <HAL_GPIO_Init+0x2a8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d052      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a80:	4a94      	ldr	r2, [pc, #592]	@ (8002cd4 <HAL_GPIO_Init+0x2a8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d869      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a86:	4a94      	ldr	r2, [pc, #592]	@ (8002cd8 <HAL_GPIO_Init+0x2ac>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d04c      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a8c:	4a92      	ldr	r2, [pc, #584]	@ (8002cd8 <HAL_GPIO_Init+0x2ac>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d863      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a92:	4a92      	ldr	r2, [pc, #584]	@ (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d046      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
 8002a98:	4a90      	ldr	r2, [pc, #576]	@ (8002cdc <HAL_GPIO_Init+0x2b0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d85d      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002a9e:	2b12      	cmp	r3, #18
 8002aa0:	d82a      	bhi.n	8002af8 <HAL_GPIO_Init+0xcc>
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d859      	bhi.n	8002b5a <HAL_GPIO_Init+0x12e>
 8002aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8002aac <HAL_GPIO_Init+0x80>)
 8002aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aac:	08002b27 	.word	0x08002b27
 8002ab0:	08002b01 	.word	0x08002b01
 8002ab4:	08002b13 	.word	0x08002b13
 8002ab8:	08002b55 	.word	0x08002b55
 8002abc:	08002b5b 	.word	0x08002b5b
 8002ac0:	08002b5b 	.word	0x08002b5b
 8002ac4:	08002b5b 	.word	0x08002b5b
 8002ac8:	08002b5b 	.word	0x08002b5b
 8002acc:	08002b5b 	.word	0x08002b5b
 8002ad0:	08002b5b 	.word	0x08002b5b
 8002ad4:	08002b5b 	.word	0x08002b5b
 8002ad8:	08002b5b 	.word	0x08002b5b
 8002adc:	08002b5b 	.word	0x08002b5b
 8002ae0:	08002b5b 	.word	0x08002b5b
 8002ae4:	08002b5b 	.word	0x08002b5b
 8002ae8:	08002b5b 	.word	0x08002b5b
 8002aec:	08002b5b 	.word	0x08002b5b
 8002af0:	08002b09 	.word	0x08002b09
 8002af4:	08002b1d 	.word	0x08002b1d
 8002af8:	4a79      	ldr	r2, [pc, #484]	@ (8002ce0 <HAL_GPIO_Init+0x2b4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002afe:	e02c      	b.n	8002b5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	623b      	str	r3, [r7, #32]
          break;
 8002b06:	e029      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	623b      	str	r3, [r7, #32]
          break;
 8002b10:	e024      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	3308      	adds	r3, #8
 8002b18:	623b      	str	r3, [r7, #32]
          break;
 8002b1a:	e01f      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	330c      	adds	r3, #12
 8002b22:	623b      	str	r3, [r7, #32]
          break;
 8002b24:	e01a      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d102      	bne.n	8002b34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b2e:	2304      	movs	r3, #4
 8002b30:	623b      	str	r3, [r7, #32]
          break;
 8002b32:	e013      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b3c:	2308      	movs	r3, #8
 8002b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	611a      	str	r2, [r3, #16]
          break;
 8002b46:	e009      	b.n	8002b5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b48:	2308      	movs	r3, #8
 8002b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	615a      	str	r2, [r3, #20]
          break;
 8002b52:	e003      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
          break;
 8002b58:	e000      	b.n	8002b5c <HAL_GPIO_Init+0x130>
          break;
 8002b5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2bff      	cmp	r3, #255	@ 0xff
 8002b60:	d801      	bhi.n	8002b66 <HAL_GPIO_Init+0x13a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	e001      	b.n	8002b6a <HAL_GPIO_Init+0x13e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2bff      	cmp	r3, #255	@ 0xff
 8002b70:	d802      	bhi.n	8002b78 <HAL_GPIO_Init+0x14c>
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	e002      	b.n	8002b7e <HAL_GPIO_Init+0x152>
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	3b08      	subs	r3, #8
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	210f      	movs	r1, #15
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	401a      	ands	r2, r3
 8002b90:	6a39      	ldr	r1, [r7, #32]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80b1 	beq.w	8002d0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bac:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce4 <HAL_GPIO_Init+0x2b8>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	4a4c      	ldr	r2, [pc, #304]	@ (8002ce4 <HAL_GPIO_Init+0x2b8>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6193      	str	r3, [r2, #24]
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce4 <HAL_GPIO_Init+0x2b8>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bc4:	4a48      	ldr	r2, [pc, #288]	@ (8002ce8 <HAL_GPIO_Init+0x2bc>)
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	220f      	movs	r2, #15
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4013      	ands	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a40      	ldr	r2, [pc, #256]	@ (8002cec <HAL_GPIO_Init+0x2c0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d013      	beq.n	8002c18 <HAL_GPIO_Init+0x1ec>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3f      	ldr	r2, [pc, #252]	@ (8002cf0 <HAL_GPIO_Init+0x2c4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d00d      	beq.n	8002c14 <HAL_GPIO_Init+0x1e8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3e      	ldr	r2, [pc, #248]	@ (8002cf4 <HAL_GPIO_Init+0x2c8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d007      	beq.n	8002c10 <HAL_GPIO_Init+0x1e4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a3d      	ldr	r2, [pc, #244]	@ (8002cf8 <HAL_GPIO_Init+0x2cc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d101      	bne.n	8002c0c <HAL_GPIO_Init+0x1e0>
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e006      	b.n	8002c1a <HAL_GPIO_Init+0x1ee>
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	e004      	b.n	8002c1a <HAL_GPIO_Init+0x1ee>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e002      	b.n	8002c1a <HAL_GPIO_Init+0x1ee>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <HAL_GPIO_Init+0x1ee>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c1c:	f002 0203 	and.w	r2, r2, #3
 8002c20:	0092      	lsls	r2, r2, #2
 8002c22:	4093      	lsls	r3, r2
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c2a:	492f      	ldr	r1, [pc, #188]	@ (8002ce8 <HAL_GPIO_Init+0x2bc>)
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d006      	beq.n	8002c52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c44:	4b2d      	ldr	r3, [pc, #180]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	492c      	ldr	r1, [pc, #176]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]
 8002c50:	e006      	b.n	8002c60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c52:	4b2a      	ldr	r3, [pc, #168]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	4928      	ldr	r1, [pc, #160]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c6c:	4b23      	ldr	r3, [pc, #140]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	4922      	ldr	r1, [pc, #136]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60cb      	str	r3, [r1, #12]
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c7a:	4b20      	ldr	r3, [pc, #128]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	491e      	ldr	r1, [pc, #120]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c94:	4b19      	ldr	r3, [pc, #100]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4918      	ldr	r1, [pc, #96]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ca2:	4b16      	ldr	r3, [pc, #88]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	4914      	ldr	r1, [pc, #80]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d021      	beq.n	8002d00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	490e      	ldr	r1, [pc, #56]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]
 8002cc8:	e021      	b.n	8002d0e <HAL_GPIO_Init+0x2e2>
 8002cca:	bf00      	nop
 8002ccc:	10320000 	.word	0x10320000
 8002cd0:	10310000 	.word	0x10310000
 8002cd4:	10220000 	.word	0x10220000
 8002cd8:	10210000 	.word	0x10210000
 8002cdc:	10120000 	.word	0x10120000
 8002ce0:	10110000 	.word	0x10110000
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	40010800 	.word	0x40010800
 8002cf0:	40010c00 	.word	0x40010c00
 8002cf4:	40011000 	.word	0x40011000
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <HAL_GPIO_Init+0x304>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	4909      	ldr	r1, [pc, #36]	@ (8002d30 <HAL_GPIO_Init+0x304>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	3301      	adds	r3, #1
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f47f ae8e 	bne.w	8002a40 <HAL_GPIO_Init+0x14>
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	372c      	adds	r7, #44	@ 0x2c
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	40010400 	.word	0x40010400

08002d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	807b      	strh	r3, [r7, #2]
 8002d40:	4613      	mov	r3, r2
 8002d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d44:	787b      	ldrb	r3, [r7, #1]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d50:	e003      	b.n	8002d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d52:	887b      	ldrh	r3, [r7, #2]
 8002d54:	041a      	lsls	r2, r3, #16
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	611a      	str	r2, [r3, #16]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d76:	887a      	ldrh	r2, [r7, #2]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	041a      	lsls	r2, r3, #16
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43d9      	mvns	r1, r3
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	400b      	ands	r3, r1
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	611a      	str	r2, [r3, #16]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e12b      	b.n	8003002 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe fa0e 	bl	80011e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	@ 0x24
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f003 f94c 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 8002e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4a81      	ldr	r2, [pc, #516]	@ (800300c <HAL_I2C_Init+0x274>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d807      	bhi.n	8002e1c <HAL_I2C_Init+0x84>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a80      	ldr	r2, [pc, #512]	@ (8003010 <HAL_I2C_Init+0x278>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	bf94      	ite	ls
 8002e14:	2301      	movls	r3, #1
 8002e16:	2300      	movhi	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e006      	b.n	8002e2a <HAL_I2C_Init+0x92>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a7d      	ldr	r2, [pc, #500]	@ (8003014 <HAL_I2C_Init+0x27c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	bf94      	ite	ls
 8002e24:	2301      	movls	r3, #1
 8002e26:	2300      	movhi	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e0e7      	b.n	8003002 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4a78      	ldr	r2, [pc, #480]	@ (8003018 <HAL_I2C_Init+0x280>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	0c9b      	lsrs	r3, r3, #18
 8002e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4a6a      	ldr	r2, [pc, #424]	@ (800300c <HAL_I2C_Init+0x274>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d802      	bhi.n	8002e6c <HAL_I2C_Init+0xd4>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	e009      	b.n	8002e80 <HAL_I2C_Init+0xe8>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	4a69      	ldr	r2, [pc, #420]	@ (800301c <HAL_I2C_Init+0x284>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	3301      	adds	r3, #1
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	495c      	ldr	r1, [pc, #368]	@ (800300c <HAL_I2C_Init+0x274>)
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	d819      	bhi.n	8002ed4 <HAL_I2C_Init+0x13c>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1e59      	subs	r1, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eae:	1c59      	adds	r1, r3, #1
 8002eb0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002eb4:	400b      	ands	r3, r1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_I2C_Init+0x138>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1e59      	subs	r1, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ece:	e051      	b.n	8002f74 <HAL_I2C_Init+0x1dc>
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	e04f      	b.n	8002f74 <HAL_I2C_Init+0x1dc>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d111      	bne.n	8002f00 <HAL_I2C_Init+0x168>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1e58      	subs	r0, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	440b      	add	r3, r1
 8002eea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e012      	b.n	8002f26 <HAL_I2C_Init+0x18e>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1e58      	subs	r0, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	0099      	lsls	r1, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f16:	3301      	adds	r3, #1
 8002f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_I2C_Init+0x196>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e022      	b.n	8002f74 <HAL_I2C_Init+0x1dc>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10e      	bne.n	8002f54 <HAL_I2C_Init+0x1bc>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1e58      	subs	r0, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	440b      	add	r3, r1
 8002f44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f52:	e00f      	b.n	8002f74 <HAL_I2C_Init+0x1dc>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1e58      	subs	r0, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	0099      	lsls	r1, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	6809      	ldr	r1, [r1, #0]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fa2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6911      	ldr	r1, [r2, #16]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68d2      	ldr	r2, [r2, #12]
 8002fae:	4311      	orrs	r1, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	000186a0 	.word	0x000186a0
 8003010:	001e847f 	.word	0x001e847f
 8003014:	003d08ff 	.word	0x003d08ff
 8003018:	431bde83 	.word	0x431bde83
 800301c:	10624dd3 	.word	0x10624dd3

08003020 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	461a      	mov	r2, r3
 800302c:	460b      	mov	r3, r1
 800302e:	817b      	strh	r3, [r7, #10]
 8003030:	4613      	mov	r3, r2
 8003032:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003034:	f7fe fd3e 	bl	8001ab4 <HAL_GetTick>
 8003038:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b20      	cmp	r3, #32
 8003044:	f040 80e0 	bne.w	8003208 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2319      	movs	r3, #25
 800304e:	2201      	movs	r2, #1
 8003050:	4970      	ldr	r1, [pc, #448]	@ (8003214 <HAL_I2C_Master_Transmit+0x1f4>)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fcc0 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800305e:	2302      	movs	r3, #2
 8003060:	e0d3      	b.n	800320a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_I2C_Master_Transmit+0x50>
 800306c:	2302      	movs	r3, #2
 800306e:	e0cc      	b.n	800320a <HAL_I2C_Master_Transmit+0x1ea>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d007      	beq.n	8003096 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f042 0201 	orr.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2221      	movs	r2, #33	@ 0x21
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2210      	movs	r2, #16
 80030b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	893a      	ldrh	r2, [r7, #8]
 80030c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4a50      	ldr	r2, [pc, #320]	@ (8003218 <HAL_I2C_Master_Transmit+0x1f8>)
 80030d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030d8:	8979      	ldrh	r1, [r7, #10]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	6a3a      	ldr	r2, [r7, #32]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fb10 	bl	8003704 <I2C_MasterRequestWrite>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e08d      	b.n	800320a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003104:	e066      	b.n	80031d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	6a39      	ldr	r1, [r7, #32]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fd7e 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00d      	beq.n	8003132 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	2b04      	cmp	r3, #4
 800311c:	d107      	bne.n	800312e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800312c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06b      	b.n	800320a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315a:	3b01      	subs	r3, #1
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d11b      	bne.n	80031a8 <HAL_I2C_Master_Transmit+0x188>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d017      	beq.n	80031a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	6a39      	ldr	r1, [r7, #32]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fd75 	bl	8003c9c <I2C_WaitOnBTFFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00d      	beq.n	80031d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d107      	bne.n	80031d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e01a      	b.n	800320a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d194      	bne.n	8003106 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	00100002 	.word	0x00100002
 8003218:	ffff0000 	.word	0xffff0000

0800321c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08c      	sub	sp, #48	@ 0x30
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	4608      	mov	r0, r1
 8003226:	4611      	mov	r1, r2
 8003228:	461a      	mov	r2, r3
 800322a:	4603      	mov	r3, r0
 800322c:	817b      	strh	r3, [r7, #10]
 800322e:	460b      	mov	r3, r1
 8003230:	813b      	strh	r3, [r7, #8]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800323a:	f7fe fc3b 	bl	8001ab4 <HAL_GetTick>
 800323e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b20      	cmp	r3, #32
 800324a:	f040 8250 	bne.w	80036ee <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	2319      	movs	r3, #25
 8003254:	2201      	movs	r2, #1
 8003256:	4982      	ldr	r1, [pc, #520]	@ (8003460 <HAL_I2C_Mem_Read+0x244>)
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fbbd 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
 8003266:	e243      	b.n	80036f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_I2C_Mem_Read+0x5a>
 8003272:	2302      	movs	r3, #2
 8003274:	e23c      	b.n	80036f0 <HAL_I2C_Mem_Read+0x4d4>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d007      	beq.n	800329c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2222      	movs	r2, #34	@ 0x22
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2240      	movs	r2, #64	@ 0x40
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80032cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a62      	ldr	r2, [pc, #392]	@ (8003464 <HAL_I2C_Mem_Read+0x248>)
 80032dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032de:	88f8      	ldrh	r0, [r7, #6]
 80032e0:	893a      	ldrh	r2, [r7, #8]
 80032e2:	8979      	ldrh	r1, [r7, #10]
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	4603      	mov	r3, r0
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fa8a 	bl	8003808 <I2C_RequestMemoryRead>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e1f8      	b.n	80036f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003302:	2b00      	cmp	r3, #0
 8003304:	d113      	bne.n	800332e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e1cc      	b.n	80036c8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003332:	2b01      	cmp	r3, #1
 8003334:	d11e      	bne.n	8003374 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003344:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003346:	b672      	cpsid	i
}
 8003348:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800336e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003370:	b662      	cpsie	i
}
 8003372:	e035      	b.n	80033e0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003378:	2b02      	cmp	r3, #2
 800337a:	d11e      	bne.n	80033ba <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800338a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800338c:	b672      	cpsid	i
}
 800338e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033b6:	b662      	cpsie	i
}
 80033b8:	e012      	b.n	80033e0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033c8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80033e0:	e172      	b.n	80036c8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	f200 811f 	bhi.w	800362a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d123      	bne.n	800343c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fc97 	bl	8003d2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e173      	b.n	80036f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800343a:	e145      	b.n	80036c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003440:	2b02      	cmp	r3, #2
 8003442:	d152      	bne.n	80034ea <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344a:	2200      	movs	r2, #0
 800344c:	4906      	ldr	r1, [pc, #24]	@ (8003468 <HAL_I2C_Mem_Read+0x24c>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fac2 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e148      	b.n	80036f0 <HAL_I2C_Mem_Read+0x4d4>
 800345e:	bf00      	nop
 8003460:	00100002 	.word	0x00100002
 8003464:	ffff0000 	.word	0xffff0000
 8003468:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800346c:	b672      	cpsid	i
}
 800346e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800347e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	b2d2      	uxtb	r2, r2
 800348c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034b2:	b662      	cpsie	i
}
 80034b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034e8:	e0ee      	b.n	80036c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f0:	2200      	movs	r2, #0
 80034f2:	4981      	ldr	r1, [pc, #516]	@ (80036f8 <HAL_I2C_Mem_Read+0x4dc>)
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fa6f 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0f5      	b.n	80036f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003512:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
}
 8003516:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800354a:	4b6c      	ldr	r3, [pc, #432]	@ (80036fc <HAL_I2C_Mem_Read+0x4e0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	08db      	lsrs	r3, r3, #3
 8003550:	4a6b      	ldr	r2, [pc, #428]	@ (8003700 <HAL_I2C_Mem_Read+0x4e4>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0a1a      	lsrs	r2, r3, #8
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	00da      	lsls	r2, r3, #3
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	3b01      	subs	r3, #1
 8003568:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d118      	bne.n	80035a2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003592:	b662      	cpsie	i
}
 8003594:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e0a6      	b.n	80036f0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d1d9      	bne.n	8003564 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035f2:	b662      	cpsie	i
}
 80035f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003628:	e04e      	b.n	80036c8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fb7c 	bl	8003d2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e058      	b.n	80036f0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b04      	cmp	r3, #4
 800367c:	d124      	bne.n	80036c8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003682:	2b03      	cmp	r3, #3
 8003684:	d107      	bne.n	8003696 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003694:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f ae88 	bne.w	80033e2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e000      	b.n	80036f0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80036ee:	2302      	movs	r3, #2
  }
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3728      	adds	r7, #40	@ 0x28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	00010004 	.word	0x00010004
 80036fc:	20000000 	.word	0x20000000
 8003700:	14f8b589 	.word	0x14f8b589

08003704 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	460b      	mov	r3, r1
 8003712:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d006      	beq.n	800372e <I2C_MasterRequestWrite+0x2a>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d003      	beq.n	800372e <I2C_MasterRequestWrite+0x2a>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800372c:	d108      	bne.n	8003740 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e00b      	b.n	8003758 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	2b12      	cmp	r3, #18
 8003746:	d107      	bne.n	8003758 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003756:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f937 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00d      	beq.n	800378c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800377e:	d103      	bne.n	8003788 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e035      	b.n	80037f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003794:	d108      	bne.n	80037a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003796:	897b      	ldrh	r3, [r7, #10]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037a4:	611a      	str	r2, [r3, #16]
 80037a6:	e01b      	b.n	80037e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037a8:	897b      	ldrh	r3, [r7, #10]
 80037aa:	11db      	asrs	r3, r3, #7
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f003 0306 	and.w	r3, r3, #6
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	f063 030f 	orn	r3, r3, #15
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	490e      	ldr	r1, [pc, #56]	@ (8003800 <I2C_MasterRequestWrite+0xfc>)
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 f980 	bl	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e010      	b.n	80037f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4907      	ldr	r1, [pc, #28]	@ (8003804 <I2C_MasterRequestWrite+0x100>)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f970 	bl	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	00010008 	.word	0x00010008
 8003804:	00010002 	.word	0x00010002

08003808 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	4608      	mov	r0, r1
 8003812:	4611      	mov	r1, r2
 8003814:	461a      	mov	r2, r3
 8003816:	4603      	mov	r3, r0
 8003818:	817b      	strh	r3, [r7, #10]
 800381a:	460b      	mov	r3, r1
 800381c:	813b      	strh	r3, [r7, #8]
 800381e:	4613      	mov	r3, r2
 8003820:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003830:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003840:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	2200      	movs	r2, #0
 800384a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f8c2 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00d      	beq.n	8003876 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003868:	d103      	bne.n	8003872 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003870:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0aa      	b.n	80039cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003876:	897b      	ldrh	r3, [r7, #10]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003884:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	6a3a      	ldr	r2, [r7, #32]
 800388a:	4952      	ldr	r1, [pc, #328]	@ (80039d4 <I2C_RequestMemoryRead+0x1cc>)
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 f91d 	bl	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e097      	b.n	80039cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b4:	6a39      	ldr	r1, [r7, #32]
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f9a8 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00d      	beq.n	80038de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d107      	bne.n	80038da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e076      	b.n	80039cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038e4:	893b      	ldrh	r3, [r7, #8]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	611a      	str	r2, [r3, #16]
 80038ee:	e021      	b.n	8003934 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038f0:	893b      	ldrh	r3, [r7, #8]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003900:	6a39      	ldr	r1, [r7, #32]
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f982 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00d      	beq.n	800392a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	2b04      	cmp	r3, #4
 8003914:	d107      	bne.n	8003926 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003924:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e050      	b.n	80039cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800392a:	893b      	ldrh	r3, [r7, #8]
 800392c:	b2da      	uxtb	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003936:	6a39      	ldr	r1, [r7, #32]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f967 	bl	8003c0c <I2C_WaitOnTXEFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	2b04      	cmp	r3, #4
 800394a:	d107      	bne.n	800395c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800395a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e035      	b.n	80039cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800396e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	2200      	movs	r2, #0
 8003978:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f82b 	bl	80039d8 <I2C_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00d      	beq.n	80039a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003996:	d103      	bne.n	80039a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800399e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e013      	b.n	80039cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039a4:	897b      	ldrh	r3, [r7, #10]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	6a3a      	ldr	r2, [r7, #32]
 80039b8:	4906      	ldr	r1, [pc, #24]	@ (80039d4 <I2C_RequestMemoryRead+0x1cc>)
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f886 	bl	8003acc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	00010002 	.word	0x00010002

080039d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e8:	e048      	b.n	8003a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039f0:	d044      	beq.n	8003a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f2:	f7fe f85f 	bl	8001ab4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d302      	bcc.n	8003a08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d139      	bne.n	8003a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	0c1b      	lsrs	r3, r3, #16
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d10d      	bne.n	8003a2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	43da      	mvns	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	e00c      	b.n	8003a48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	43da      	mvns	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf0c      	ite	eq
 8003a40:	2301      	moveq	r3, #1
 8003a42:	2300      	movne	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	461a      	mov	r2, r3
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d116      	bne.n	8003a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	f043 0220 	orr.w	r2, r3, #32
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e023      	b.n	8003ac4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	0c1b      	lsrs	r3, r3, #16
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d10d      	bne.n	8003aa2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	43da      	mvns	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4013      	ands	r3, r2
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	e00c      	b.n	8003abc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d093      	beq.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ada:	e071      	b.n	8003bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ae6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aea:	d123      	bne.n	8003b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	f043 0204 	orr.w	r2, r3, #4
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e067      	b.n	8003c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b3a:	d041      	beq.n	8003bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3c:	f7fd ffba 	bl	8001ab4 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d302      	bcc.n	8003b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d136      	bne.n	8003bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d10c      	bne.n	8003b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	43da      	mvns	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4013      	ands	r3, r2
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	bf14      	ite	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	2300      	moveq	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	e00b      	b.n	8003b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	43da      	mvns	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf14      	ite	ne
 8003b88:	2301      	movne	r3, #1
 8003b8a:	2300      	moveq	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d016      	beq.n	8003bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	f043 0220 	orr.w	r2, r3, #32
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e021      	b.n	8003c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d10c      	bne.n	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf14      	ite	ne
 8003bdc:	2301      	movne	r3, #1
 8003bde:	2300      	moveq	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	e00b      	b.n	8003bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	43da      	mvns	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bf14      	ite	ne
 8003bf6:	2301      	movne	r3, #1
 8003bf8:	2300      	moveq	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f47f af6d 	bne.w	8003adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c18:	e034      	b.n	8003c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f8e3 	bl	8003de6 <I2C_IsAcknowledgeFailed>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e034      	b.n	8003c94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c30:	d028      	beq.n	8003c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7fd ff3f 	bl	8001ab4 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d302      	bcc.n	8003c48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d11d      	bne.n	8003c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c52:	2b80      	cmp	r3, #128	@ 0x80
 8003c54:	d016      	beq.n	8003c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	f043 0220 	orr.w	r2, r3, #32
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e007      	b.n	8003c94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8e:	2b80      	cmp	r3, #128	@ 0x80
 8003c90:	d1c3      	bne.n	8003c1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ca8:	e034      	b.n	8003d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f89b 	bl	8003de6 <I2C_IsAcknowledgeFailed>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e034      	b.n	8003d24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cc0:	d028      	beq.n	8003d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc2:	f7fd fef7 	bl	8001ab4 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d11d      	bne.n	8003d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d016      	beq.n	8003d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e007      	b.n	8003d24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d1c3      	bne.n	8003caa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d38:	e049      	b.n	8003dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d119      	bne.n	8003d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0210 	mvn.w	r2, #16
 8003d50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e030      	b.n	8003dde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7c:	f7fd fe9a 	bl	8001ab4 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d302      	bcc.n	8003d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d11d      	bne.n	8003dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9c:	2b40      	cmp	r3, #64	@ 0x40
 8003d9e:	d016      	beq.n	8003dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	f043 0220 	orr.w	r2, r3, #32
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e007      	b.n	8003dde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd8:	2b40      	cmp	r3, #64	@ 0x40
 8003dda:	d1ae      	bne.n	8003d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dfc:	d11b      	bne.n	8003e36 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e06:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	f043 0204 	orr.w	r2, r3, #4
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0e8      	b.n	8004026 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d106      	bne.n	8003e6e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f007 f809 	bl	800ae80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2203      	movs	r2, #3
 8003e72:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f002 ff84 	bl	8006d8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e90:	f002 ff5a 	bl	8006d48 <USB_CoreInit>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e0bf      	b.n	8004026 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f002 ff88 	bl	8006dc2 <USB_SetCurrentMode>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0b0      	b.n	8004026 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	73fb      	strb	r3, [r7, #15]
 8003ec8:	e03e      	b.n	8003f48 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	440b      	add	r3, r1
 8003ed8:	3311      	adds	r3, #17
 8003eda:	2201      	movs	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	440b      	add	r3, r1
 8003eec:	3310      	adds	r3, #16
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ef2:	7bfa      	ldrb	r2, [r7, #15]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	440b      	add	r3, r1
 8003f00:	3313      	adds	r3, #19
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f06:	7bfa      	ldrb	r2, [r7, #15]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	440b      	add	r3, r1
 8003f14:	3320      	adds	r3, #32
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	440b      	add	r3, r1
 8003f28:	3324      	adds	r3, #36	@ 0x24
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	440b      	add	r3, r1
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	3301      	adds	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	791b      	ldrb	r3, [r3, #4]
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d3bb      	bcc.n	8003eca <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f52:	2300      	movs	r3, #0
 8003f54:	73fb      	strb	r3, [r7, #15]
 8003f56:	e044      	b.n	8003fe2 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f58:	7bfa      	ldrb	r2, [r7, #15]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	440b      	add	r3, r1
 8003f66:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	440b      	add	r3, r1
 8003f7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	440b      	add	r3, r1
 8003f92:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003f96:	2200      	movs	r2, #0
 8003f98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f9a:	7bfa      	ldrb	r2, [r7, #15]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	440b      	add	r3, r1
 8003fa8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	440b      	add	r3, r1
 8003fbe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	440b      	add	r3, r1
 8003fd4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	791b      	ldrb	r3, [r3, #4]
 8003fe6:	7bfa      	ldrb	r2, [r7, #15]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d3b5      	bcc.n	8003f58 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6818      	ldr	r0, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ff6:	f002 fef0 	bl	8006dda <USB_DevInit>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e00c      	b.n	8004026 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f005 f96f 	bl	8009302 <USB_DevDisconnect>

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_PCD_Start+0x16>
 8004040:	2302      	movs	r3, #2
 8004042:	e016      	b.n	8004072 <HAL_PCD_Start+0x44>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f002 fe86 	bl	8006d62 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004056:	2101      	movs	r1, #1
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f007 f984 	bl	800b366 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f005 f943 	bl	80092ee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b088      	sub	sp, #32
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f005 f945 	bl	8009316 <USB_ReadInterrupts>
 800408c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fb1a 	bl	80046d2 <PCD_EP_ISR_Handler>

    return;
 800409e:	e119      	b.n	80042d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d013      	beq.n	80040d2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040bc:	b292      	uxth	r2, r2
 80040be:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f006 ff57 	bl	800af76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80040c8:	2100      	movs	r1, #0
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f905 	bl	80042da <HAL_PCD_SetAddress>

    return;
 80040d0:	e100      	b.n	80042d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00c      	beq.n	80040f6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040ee:	b292      	uxth	r2, r2
 80040f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80040f4:	e0ee      	b.n	80042d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00c      	beq.n	800411a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004112:	b292      	uxth	r2, r2
 8004114:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004118:	e0dc      	b.n	80042d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d027      	beq.n	8004174 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800412c:	b29a      	uxth	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0204 	bic.w	r2, r2, #4
 8004136:	b292      	uxth	r2, r2
 8004138:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004144:	b29a      	uxth	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0208 	bic.w	r2, r2, #8
 800414e:	b292      	uxth	r2, r2
 8004150:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f006 ff47 	bl	800afe8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800416c:	b292      	uxth	r2, r2
 800416e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004172:	e0af      	b.n	80042d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8083 	beq.w	8004286 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8004180:	2300      	movs	r3, #0
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e010      	b.n	80041a8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	7ffb      	ldrb	r3, [r7, #31]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	441a      	add	r2, r3
 8004192:	7ffb      	ldrb	r3, [r7, #31]
 8004194:	8812      	ldrh	r2, [r2, #0]
 8004196:	b292      	uxth	r2, r2
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	3320      	adds	r3, #32
 800419c:	443b      	add	r3, r7
 800419e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80041a2:	7ffb      	ldrb	r3, [r7, #31]
 80041a4:	3301      	adds	r3, #1
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	7ffb      	ldrb	r3, [r7, #31]
 80041aa:	2b07      	cmp	r3, #7
 80041ac:	d9eb      	bls.n	8004186 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	b292      	uxth	r2, r2
 80041c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	b292      	uxth	r2, r2
 80041da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80041de:	bf00      	nop
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f6      	beq.n	80041e0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004204:	b292      	uxth	r2, r2
 8004206:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800420a:	2300      	movs	r3, #0
 800420c:	77fb      	strb	r3, [r7, #31]
 800420e:	e00f      	b.n	8004230 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004210:	7ffb      	ldrb	r3, [r7, #31]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6812      	ldr	r2, [r2, #0]
 8004216:	4611      	mov	r1, r2
 8004218:	7ffa      	ldrb	r2, [r7, #31]
 800421a:	0092      	lsls	r2, r2, #2
 800421c:	440a      	add	r2, r1
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	3320      	adds	r3, #32
 8004222:	443b      	add	r3, r7
 8004224:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004228:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800422a:	7ffb      	ldrb	r3, [r7, #31]
 800422c:	3301      	adds	r3, #1
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	7ffb      	ldrb	r3, [r7, #31]
 8004232:	2b07      	cmp	r3, #7
 8004234:	d9ec      	bls.n	8004210 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0208 	orr.w	r2, r2, #8
 8004248:	b292      	uxth	r2, r2
 800424a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004260:	b292      	uxth	r2, r2
 8004262:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0204 	orr.w	r2, r2, #4
 8004278:	b292      	uxth	r2, r2
 800427a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f006 fe98 	bl	800afb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004284:	e026      	b.n	80042d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00f      	beq.n	80042b0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042a2:	b292      	uxth	r2, r2
 80042a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f006 fe56 	bl	800af5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80042ae:	e011      	b.n	80042d4 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00c      	beq.n	80042d4 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042cc:	b292      	uxth	r2, r2
 80042ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80042d2:	bf00      	nop
  }
}
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b082      	sub	sp, #8
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	460b      	mov	r3, r1
 80042e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_PCD_SetAddress+0x1a>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e012      	b.n	800431a <HAL_PCD_SetAddress+0x40>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	78fa      	ldrb	r2, [r7, #3]
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f004 ffdc 	bl	80092c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	4608      	mov	r0, r1
 800432c:	4611      	mov	r1, r2
 800432e:	461a      	mov	r2, r3
 8004330:	4603      	mov	r3, r0
 8004332:	70fb      	strb	r3, [r7, #3]
 8004334:	460b      	mov	r3, r1
 8004336:	803b      	strh	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004344:	2b00      	cmp	r3, #0
 8004346:	da0e      	bge.n	8004366 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	f003 0207 	and.w	r2, r3, #7
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	3310      	adds	r3, #16
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	4413      	add	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	705a      	strb	r2, [r3, #1]
 8004364:	e00e      	b.n	8004384 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	f003 0207 	and.w	r2, r3, #7
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	4413      	add	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004390:	883a      	ldrh	r2, [r7, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	78ba      	ldrb	r2, [r7, #2]
 800439a:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800439c:	78bb      	ldrb	r3, [r7, #2]
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d102      	bne.n	80043a8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_PCD_EP_Open+0x94>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e00e      	b.n	80043d4 <HAL_PCD_EP_Open+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68f9      	ldr	r1, [r7, #12]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f002 fd25 	bl	8006e14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80043d2:	7afb      	ldrb	r3, [r7, #11]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	da0e      	bge.n	800440e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	f003 0207 	and.w	r2, r3, #7
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	3310      	adds	r3, #16
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	705a      	strb	r2, [r3, #1]
 800440c:	e00e      	b.n	800442c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800440e:	78fb      	ldrb	r3, [r7, #3]
 8004410:	f003 0207 	and.w	r2, r3, #7
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	b2da      	uxtb	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_PCD_EP_Close+0x6a>
 8004442:	2302      	movs	r3, #2
 8004444:	e00e      	b.n	8004464 <HAL_PCD_EP_Close+0x88>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	4618      	mov	r0, r3
 8004456:	f003 f89d 	bl	8007594 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	460b      	mov	r3, r1
 800447a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800447c:	7afb      	ldrb	r3, [r7, #11]
 800447e:	f003 0207 	and.w	r2, r3, #7
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4413      	add	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2200      	movs	r2, #0
 80044a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2200      	movs	r2, #0
 80044aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044ac:	7afb      	ldrb	r3, [r7, #11]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6979      	ldr	r1, [r7, #20]
 80044be:	4618      	mov	r0, r3
 80044c0:	f003 fa54 	bl	800796c <USB_EPStartXfer>

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	f003 0207 	and.w	r2, r3, #7
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	440b      	add	r3, r1
 80044ec:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80044f0:	681b      	ldr	r3, [r3, #0]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	460b      	mov	r3, r1
 800450a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800450c:	7afb      	ldrb	r3, [r7, #11]
 800450e:	f003 0207 	and.w	r2, r3, #7
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	3310      	adds	r3, #16
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2200      	movs	r2, #0
 8004540:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2201      	movs	r2, #1
 8004546:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004548:	7afb      	ldrb	r3, [r7, #11]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	b2da      	uxtb	r2, r3
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6979      	ldr	r1, [r7, #20]
 800455a:	4618      	mov	r0, r3
 800455c:	f003 fa06 	bl	800796c <USB_EPStartXfer>

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	7912      	ldrb	r2, [r2, #4]
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e04c      	b.n	8004622 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800458c:	2b00      	cmp	r3, #0
 800458e:	da0e      	bge.n	80045ae <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	f003 0207 	and.w	r2, r3, #7
 8004596:	4613      	mov	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	3310      	adds	r3, #16
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	4413      	add	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2201      	movs	r2, #1
 80045aa:	705a      	strb	r2, [r3, #1]
 80045ac:	e00c      	b.n	80045c8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	4413      	add	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_PCD_EP_SetStall+0x7e>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e01c      	b.n	8004622 <HAL_PCD_EP_SetStall+0xb8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68f9      	ldr	r1, [r7, #12]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f004 fd69 	bl	80090ce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	2b00      	cmp	r3, #0
 8004604:	d108      	bne.n	8004618 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f004 fe8e 	bl	8009334 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	460b      	mov	r3, r1
 8004634:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004636:	78fb      	ldrb	r3, [r7, #3]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	7912      	ldrb	r2, [r2, #4]
 8004640:	4293      	cmp	r3, r2
 8004642:	d901      	bls.n	8004648 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e040      	b.n	80046ca <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800464c:	2b00      	cmp	r3, #0
 800464e:	da0e      	bge.n	800466e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	f003 0207 	and.w	r2, r3, #7
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	3310      	adds	r3, #16
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	4413      	add	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	705a      	strb	r2, [r3, #1]
 800466c:	e00e      	b.n	800468c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800466e:	78fb      	ldrb	r3, [r7, #3]
 8004670:	f003 0207 	and.w	r2, r3, #7
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d101      	bne.n	80046ac <HAL_PCD_EP_ClrStall+0x82>
 80046a8:	2302      	movs	r3, #2
 80046aa:	e00e      	b.n	80046ca <HAL_PCD_EP_ClrStall+0xa0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68f9      	ldr	r1, [r7, #12]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f004 fd57 	bl	800916e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b096      	sub	sp, #88	@ 0x58
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046da:	e3bb      	b.n	8004e54 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80046e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80046e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80046f6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f040 8175 	bne.w	80049ea <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004700:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d14e      	bne.n	80047aa <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471c:	81fb      	strh	r3, [r7, #14]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	89fb      	ldrh	r3, [r7, #14]
 8004724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800472c:	b29b      	uxth	r3, r3
 800472e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3310      	adds	r3, #16
 8004734:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800473e:	b29b      	uxth	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	3302      	adds	r3, #2
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800475e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004760:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	441a      	add	r2, r3
 800476c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800476e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004770:	2100      	movs	r1, #0
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f006 fbd7 	bl	800af26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	7b5b      	ldrb	r3, [r3, #13]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 8368 	beq.w	8004e54 <PCD_EP_ISR_Handler+0x782>
 8004784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f040 8363 	bne.w	8004e54 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	7b5b      	ldrb	r3, [r3, #13]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004798:	b2da      	uxtb	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	735a      	strb	r2, [r3, #13]
 80047a8:	e354      	b.n	8004e54 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047b0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80047bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80047c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d034      	beq.n	8004832 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	3306      	adds	r3, #6
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80047fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004800:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004804:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004806:	b29b      	uxth	r3, r3
 8004808:	f004 fde4 	bl	80093d4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29a      	uxth	r2, r3
 8004814:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004818:	4013      	ands	r3, r2
 800481a:	823b      	strh	r3, [r7, #16]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	8a3a      	ldrh	r2, [r7, #16]
 8004822:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004826:	b292      	uxth	r2, r2
 8004828:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f006 fb4e 	bl	800aecc <HAL_PCD_SetupStageCallback>
 8004830:	e310      	b.n	8004e54 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004832:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004836:	2b00      	cmp	r3, #0
 8004838:	f280 830c 	bge.w	8004e54 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29a      	uxth	r2, r3
 8004844:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004848:	4013      	ands	r3, r2
 800484a:	83fb      	strh	r3, [r7, #30]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	8bfa      	ldrh	r2, [r7, #30]
 8004852:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004856:	b292      	uxth	r2, r2
 8004858:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004862:	b29b      	uxth	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4413      	add	r3, r2
 800486e:	3306      	adds	r3, #6
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004884:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d019      	beq.n	80048c2 <PCD_EP_ISR_Handler+0x1f0>
 800488e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d015      	beq.n	80048c2 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800489c:	6959      	ldr	r1, [r3, #20]
 800489e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80048a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048a4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f004 fd94 	bl	80093d4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80048ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	441a      	add	r2, r3
 80048b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80048ba:	2100      	movs	r1, #0
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f006 fb17 	bl	800aef0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80048cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80048d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f040 82bd 	bne.w	8004e54 <PCD_EP_ISR_Handler+0x782>
 80048da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80048de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80048e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80048e6:	f000 82b5 	beq.w	8004e54 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	4413      	add	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004914:	b29a      	uxth	r2, r3
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	801a      	strh	r2, [r3, #0]
 800491a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004920:	d91d      	bls.n	800495e <PCD_EP_ISR_Handler+0x28c>
 8004922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	647b      	str	r3, [r7, #68]	@ 0x44
 800492a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <PCD_EP_ISR_Handler+0x26a>
 8004936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004938:	3b01      	subs	r3, #1
 800493a:	647b      	str	r3, [r7, #68]	@ 0x44
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	b29a      	uxth	r2, r3
 8004942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004944:	b29b      	uxth	r3, r3
 8004946:	029b      	lsls	r3, r3, #10
 8004948:	b29b      	uxth	r3, r3
 800494a:	4313      	orrs	r3, r2
 800494c:	b29b      	uxth	r3, r3
 800494e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004956:	b29a      	uxth	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	801a      	strh	r2, [r3, #0]
 800495c:	e026      	b.n	80049ac <PCD_EP_ISR_Handler+0x2da>
 800495e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10a      	bne.n	800497c <PCD_EP_ISR_Handler+0x2aa>
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004974:	b29a      	uxth	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	801a      	strh	r2, [r3, #0]
 800497a:	e017      	b.n	80049ac <PCD_EP_ISR_Handler+0x2da>
 800497c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	647b      	str	r3, [r7, #68]	@ 0x44
 8004984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <PCD_EP_ISR_Handler+0x2c4>
 8004990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004992:	3301      	adds	r3, #1
 8004994:	647b      	str	r3, [r7, #68]	@ 0x44
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29a      	uxth	r2, r3
 800499c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800499e:	b29b      	uxth	r3, r3
 80049a0:	029b      	lsls	r3, r3, #10
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	4313      	orrs	r3, r2
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049bc:	827b      	strh	r3, [r7, #18]
 80049be:	8a7b      	ldrh	r3, [r7, #18]
 80049c0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80049c4:	827b      	strh	r3, [r7, #18]
 80049c6:	8a7b      	ldrh	r3, [r7, #18]
 80049c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049cc:	827b      	strh	r3, [r7, #18]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	8a7b      	ldrh	r3, [r7, #18]
 80049d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	8013      	strh	r3, [r2, #0]
 80049e8:	e234      	b.n	8004e54 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80049fe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f280 80fc 	bge.w	8004c00 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004a1e:	4013      	ands	r3, r2
 8004a20:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004a36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a3a:	b292      	uxth	r2, r2
 8004a3c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004a3e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4413      	add	r3, r2
 8004a52:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a56:	7b1b      	ldrb	r3, [r3, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d125      	bne.n	8004aa8 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3306      	adds	r3, #6
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a84:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004a88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8092 	beq.w	8004bb6 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a98:	6959      	ldr	r1, [r3, #20]
 8004a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a9c:	88da      	ldrh	r2, [r3, #6]
 8004a9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004aa2:	f004 fc97 	bl	80093d4 <USB_ReadPMA>
 8004aa6:	e086      	b.n	8004bb6 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aaa:	78db      	ldrb	r3, [r3, #3]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d10a      	bne.n	8004ac6 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ab0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f9d9 	bl	8004e70 <HAL_PCD_EP_DB_Receive>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004ac4:	e077      	b.n	8004bb6 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	441a      	add	r2, r3
 8004af2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d024      	beq.n	8004b6e <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4413      	add	r3, r2
 8004b38:	3302      	adds	r3, #2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b4c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004b50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d02e      	beq.n	8004bb6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b5e:	6959      	ldr	r1, [r3, #20]
 8004b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b62:	891a      	ldrh	r2, [r3, #8]
 8004b64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004b68:	f004 fc34 	bl	80093d4 <USB_ReadPMA>
 8004b6c:	e023      	b.n	8004bb6 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4413      	add	r3, r2
 8004b82:	3306      	adds	r3, #6
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b96:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004b9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba8:	6959      	ldr	r1, [r3, #20]
 8004baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bac:	895a      	ldrh	r2, [r3, #10]
 8004bae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bb2:	f004 fc0f 	bl	80093d4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bbe:	441a      	add	r2, r3
 8004bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc6:	695a      	ldr	r2, [r3, #20]
 8004bc8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004bcc:	441a      	add	r2, r3
 8004bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <PCD_EP_ISR_Handler+0x514>
 8004bda:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d206      	bcs.n	8004bf4 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	4619      	mov	r1, r3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f006 f97f 	bl	800aef0 <HAL_PCD_DataOutStageCallback>
 8004bf2:	e005      	b.n	8004c00 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f002 feb6 	bl	800796c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8123 	beq.w	8004e54 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8004c0e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	3310      	adds	r3, #16
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	4413      	add	r3, r2
 8004c20:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c3c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	441a      	add	r2, r3
 8004c4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004c52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c60:	78db      	ldrb	r3, [r3, #3]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	f040 80a2 	bne.w	8004dac <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c70:	7b1b      	ldrb	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 8093 	beq.w	8004d9e <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d046      	beq.n	8004d12 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c86:	785b      	ldrb	r3, [r3, #1]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d126      	bne.n	8004cda <PCD_EP_ISR_Handler+0x608>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	4413      	add	r3, r2
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	011a      	lsls	r2, r3, #4
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	4413      	add	r3, r2
 8004cae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cb2:	623b      	str	r3, [r7, #32]
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	801a      	strh	r2, [r3, #0]
 8004cd8:	e061      	b.n	8004d9e <PCD_EP_ISR_Handler+0x6cc>
 8004cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cdc:	785b      	ldrb	r3, [r3, #1]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d15d      	bne.n	8004d9e <PCD_EP_ISR_Handler+0x6cc>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf6:	4413      	add	r3, r2
 8004cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	011a      	lsls	r2, r3, #4
 8004d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d02:	4413      	add	r3, r2
 8004d04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	801a      	strh	r2, [r3, #0]
 8004d10:	e045      	b.n	8004d9e <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d126      	bne.n	8004d6e <PCD_EP_ISR_Handler+0x69c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d34:	4413      	add	r3, r2
 8004d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	011a      	lsls	r2, r3, #4
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d40:	4413      	add	r3, r2
 8004d42:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d46:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	e017      	b.n	8004d9e <PCD_EP_ISR_Handler+0x6cc>
 8004d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d70:	785b      	ldrb	r3, [r3, #1]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d113      	bne.n	8004d9e <PCD_EP_ISR_Handler+0x6cc>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d84:	4413      	add	r3, r2
 8004d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	011a      	lsls	r2, r3, #4
 8004d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d90:	4413      	add	r3, r2
 8004d92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	4619      	mov	r1, r3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f006 f8be 	bl	800af26 <HAL_PCD_DataInStageCallback>
 8004daa:	e053      	b.n	8004e54 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004dac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d146      	bne.n	8004e46 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	3302      	adds	r3, #2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004de0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004de6:	699a      	ldr	r2, [r3, #24]
 8004de8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d907      	bls.n	8004e00 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df2:	699a      	ldr	r2, [r3, #24]
 8004df4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004df8:	1ad2      	subs	r2, r2, r3
 8004dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dfc:	619a      	str	r2, [r3, #24]
 8004dfe:	e002      	b.n	8004e06 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8004e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e02:	2200      	movs	r2, #0
 8004e04:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f006 f886 	bl	800af26 <HAL_PCD_DataInStageCallback>
 8004e1a:	e01b      	b.n	8004e54 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e24:	441a      	add	r2, r3
 8004e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e28:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004e32:	441a      	add	r2, r3
 8004e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e36:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f002 fd94 	bl	800796c <USB_EPStartXfer>
 8004e44:	e006      	b.n	8004e54 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004e46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f91b 	bl	800508a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	b21b      	sxth	r3, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f6ff ac3b 	blt.w	80046dc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3758      	adds	r7, #88	@ 0x58
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d07e      	beq.n	8004f86 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eb0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	8b7b      	ldrh	r3, [r7, #26]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d306      	bcc.n	8004eca <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	8b7b      	ldrh	r3, [r7, #26]
 8004ec2:	1ad2      	subs	r2, r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	619a      	str	r2, [r3, #24]
 8004ec8:	e002      	b.n	8004ed0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d123      	bne.n	8004f20 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	461a      	mov	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef2:	833b      	strh	r3, [r7, #24]
 8004ef4:	8b3b      	ldrh	r3, [r7, #24]
 8004ef6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004efa:	833b      	strh	r3, [r7, #24]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	441a      	add	r2, r3
 8004f0a:	8b3b      	ldrh	r3, [r7, #24]
 8004f0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f20:	88fb      	ldrh	r3, [r7, #6]
 8004f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01f      	beq.n	8004f6a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f44:	82fb      	strh	r3, [r7, #22]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	8afb      	ldrh	r3, [r7, #22]
 8004f56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f6a:	8b7b      	ldrh	r3, [r7, #26]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8087 	beq.w	8005080 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	6959      	ldr	r1, [r3, #20]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	891a      	ldrh	r2, [r3, #8]
 8004f7e:	8b7b      	ldrh	r3, [r7, #26]
 8004f80:	f004 fa28 	bl	80093d4 <USB_ReadPMA>
 8004f84:	e07c      	b.n	8005080 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4413      	add	r3, r2
 8004f9a:	3306      	adds	r3, #6
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	8b7b      	ldrh	r3, [r7, #26]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d306      	bcc.n	8004fc8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	8b7b      	ldrh	r3, [r7, #26]
 8004fc0:	1ad2      	subs	r2, r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	619a      	str	r2, [r3, #24]
 8004fc6:	e002      	b.n	8004fce <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d123      	bne.n	800501e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff0:	83fb      	strh	r3, [r7, #30]
 8004ff2:	8bfb      	ldrh	r3, [r7, #30]
 8004ff4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004ff8:	83fb      	strh	r3, [r7, #30]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	441a      	add	r2, r3
 8005008:	8bfb      	ldrh	r3, [r7, #30]
 800500a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800500e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800501a:	b29b      	uxth	r3, r3
 800501c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005024:	2b00      	cmp	r3, #0
 8005026:	d11f      	bne.n	8005068 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800503e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005042:	83bb      	strh	r3, [r7, #28]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	441a      	add	r2, r3
 8005052:	8bbb      	ldrh	r3, [r7, #28]
 8005054:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005058:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800505c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005060:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005064:	b29b      	uxth	r3, r3
 8005066:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005068:	8b7b      	ldrh	r3, [r7, #26]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d008      	beq.n	8005080 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6959      	ldr	r1, [r3, #20]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	895a      	ldrh	r2, [r3, #10]
 800507a:	8b7b      	ldrh	r3, [r7, #26]
 800507c:	f004 f9aa 	bl	80093d4 <USB_ReadPMA>
    }
  }

  return count;
 8005080:	8b7b      	ldrh	r3, [r7, #26]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3720      	adds	r7, #32
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b0a4      	sub	sp, #144	@ 0x90
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	4613      	mov	r3, r2
 8005096:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005098:	88fb      	ldrh	r3, [r7, #6]
 800509a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 81dd 	beq.w	800545e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4413      	add	r3, r2
 80050b8:	3302      	adds	r3, #2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050cc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	699a      	ldr	r2, [r3, #24]
 80050d4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80050d8:	429a      	cmp	r2, r3
 80050da:	d907      	bls.n	80050ec <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	699a      	ldr	r2, [r3, #24]
 80050e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80050e4:	1ad2      	subs	r2, r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	619a      	str	r2, [r3, #24]
 80050ea:	e002      	b.n	80050f2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2200      	movs	r2, #0
 80050f0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f040 80b9 	bne.w	800526e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d126      	bne.n	8005152 <HAL_PCD_EP_DB_Transmit+0xc8>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005112:	b29b      	uxth	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	4413      	add	r3, r2
 800511a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	011a      	lsls	r2, r3, #4
 8005122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005124:	4413      	add	r3, r2
 8005126:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800512a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	b29b      	uxth	r3, r3
 8005132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005136:	b29a      	uxth	r2, r3
 8005138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514a:	b29a      	uxth	r2, r3
 800514c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514e:	801a      	strh	r2, [r3, #0]
 8005150:	e01a      	b.n	8005188 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	785b      	ldrb	r3, [r3, #1]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d116      	bne.n	8005188 <HAL_PCD_EP_DB_Transmit+0xfe>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005168:	b29b      	uxth	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516e:	4413      	add	r3, r2
 8005170:	637b      	str	r3, [r7, #52]	@ 0x34
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	011a      	lsls	r2, r3, #4
 8005178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517a:	4413      	add	r3, r2
 800517c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005180:	633b      	str	r3, [r7, #48]	@ 0x30
 8005182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005184:	2200      	movs	r2, #0
 8005186:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d126      	bne.n	80051e4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	61fb      	str	r3, [r7, #28]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	4413      	add	r3, r2
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	011a      	lsls	r2, r3, #4
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	801a      	strh	r2, [r3, #0]
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051dc:	b29a      	uxth	r2, r3
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	e017      	b.n	8005214 <HAL_PCD_EP_DB_Transmit+0x18a>
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d113      	bne.n	8005214 <HAL_PCD_EP_DB_Transmit+0x18a>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	4413      	add	r3, r2
 80051fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	011a      	lsls	r2, r3, #4
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	4413      	add	r3, r2
 8005208:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800520c:	623b      	str	r3, [r7, #32]
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	2200      	movs	r2, #0
 8005212:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	4619      	mov	r1, r3
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f005 fe83 	bl	800af26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005220:	88fb      	ldrh	r3, [r7, #6]
 8005222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 82fc 	beq.w	8005824 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005246:	82fb      	strh	r3, [r7, #22]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	8afb      	ldrh	r3, [r7, #22]
 8005258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800525c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005260:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005268:	b29b      	uxth	r3, r3
 800526a:	8013      	strh	r3, [r2, #0]
 800526c:	e2da      	b.n	8005824 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800526e:	88fb      	ldrh	r3, [r7, #6]
 8005270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d021      	beq.n	80052bc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	441a      	add	r2, r3
 80052a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80052a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	f040 82ae 	bne.w	8005824 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80052d0:	441a      	add	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	69da      	ldr	r2, [r3, #28]
 80052da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80052de:	441a      	add	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	6a1a      	ldr	r2, [r3, #32]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d30b      	bcc.n	8005308 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6a1a      	ldr	r2, [r3, #32]
 80052fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005300:	1ad2      	subs	r2, r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	621a      	str	r2, [r3, #32]
 8005306:	e017      	b.n	8005338 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d108      	bne.n	8005322 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005310:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005314:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005320:	e00a      	b.n	8005338 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2200      	movs	r2, #0
 8005336:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d165      	bne.n	800540c <HAL_PCD_EP_DB_Transmit+0x382>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800534e:	b29b      	uxth	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005354:	4413      	add	r3, r2
 8005356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	011a      	lsls	r2, r3, #4
 800535e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005360:	4413      	add	r3, r2
 8005362:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005366:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536a:	881b      	ldrh	r3, [r3, #0]
 800536c:	b29b      	uxth	r3, r3
 800536e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005372:	b29a      	uxth	r2, r3
 8005374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800537c:	2b3e      	cmp	r3, #62	@ 0x3e
 800537e:	d91d      	bls.n	80053bc <HAL_PCD_EP_DB_Transmit+0x332>
 8005380:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005388:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	2b00      	cmp	r3, #0
 8005392:	d102      	bne.n	800539a <HAL_PCD_EP_DB_Transmit+0x310>
 8005394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005396:	3b01      	subs	r3, #1
 8005398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	b29a      	uxth	r2, r3
 80053a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	029b      	lsls	r3, r3, #10
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	4313      	orrs	r3, r2
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	e044      	b.n	8005446 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80053bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <HAL_PCD_EP_DB_Transmit+0x350>
 80053c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	e035      	b.n	8005446 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80053da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80053ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053f0:	3301      	adds	r3, #1
 80053f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	029b      	lsls	r3, r3, #10
 8005400:	b29b      	uxth	r3, r3
 8005402:	4313      	orrs	r3, r2
 8005404:	b29a      	uxth	r2, r3
 8005406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005408:	801a      	strh	r2, [r3, #0]
 800540a:	e01c      	b.n	8005446 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	785b      	ldrb	r3, [r3, #1]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d118      	bne.n	8005446 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	647b      	str	r3, [r7, #68]	@ 0x44
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005422:	b29b      	uxth	r3, r3
 8005424:	461a      	mov	r2, r3
 8005426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005428:	4413      	add	r3, r2
 800542a:	647b      	str	r3, [r7, #68]	@ 0x44
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	011a      	lsls	r2, r3, #4
 8005432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005434:	4413      	add	r3, r2
 8005436:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800543a:	643b      	str	r3, [r7, #64]	@ 0x40
 800543c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005440:	b29a      	uxth	r2, r3
 8005442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005444:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6959      	ldr	r1, [r3, #20]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	891a      	ldrh	r2, [r3, #8]
 8005452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005456:	b29b      	uxth	r3, r3
 8005458:	f003 ff77 	bl	800934a <USB_WritePMA>
 800545c:	e1e2      	b.n	8005824 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005466:	b29b      	uxth	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4413      	add	r3, r2
 8005472:	3306      	adds	r3, #6
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005486:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005492:	429a      	cmp	r2, r3
 8005494:	d307      	bcc.n	80054a6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	619a      	str	r2, [r3, #24]
 80054a4:	e002      	b.n	80054ac <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2200      	movs	r2, #0
 80054aa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f040 80c0 	bne.w	8005636 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	785b      	ldrb	r3, [r3, #1]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d126      	bne.n	800550c <HAL_PCD_EP_DB_Transmit+0x482>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054d2:	4413      	add	r3, r2
 80054d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	011a      	lsls	r2, r3, #4
 80054dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80054de:	4413      	add	r3, r2
 80054e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054f4:	801a      	strh	r2, [r3, #0]
 80054f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005504:	b29a      	uxth	r2, r3
 8005506:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005508:	801a      	strh	r2, [r3, #0]
 800550a:	e01a      	b.n	8005542 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d116      	bne.n	8005542 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	667b      	str	r3, [r7, #100]	@ 0x64
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005522:	b29b      	uxth	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005528:	4413      	add	r3, r2
 800552a:	667b      	str	r3, [r7, #100]	@ 0x64
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	011a      	lsls	r2, r3, #4
 8005532:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005534:	4413      	add	r3, r2
 8005536:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800553a:	663b      	str	r3, [r7, #96]	@ 0x60
 800553c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800553e:	2200      	movs	r2, #0
 8005540:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	677b      	str	r3, [r7, #116]	@ 0x74
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d12b      	bne.n	80055a8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800555e:	b29b      	uxth	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005564:	4413      	add	r3, r2
 8005566:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	011a      	lsls	r2, r3, #4
 800556e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005570:	4413      	add	r3, r2
 8005572:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005576:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800557a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005586:	b29a      	uxth	r2, r3
 8005588:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800559e:	b29a      	uxth	r2, r3
 80055a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	e017      	b.n	80055d8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	785b      	ldrb	r3, [r3, #1]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d113      	bne.n	80055d8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055be:	4413      	add	r3, r2
 80055c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	011a      	lsls	r2, r3, #4
 80055c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055ca:	4413      	add	r3, r2
 80055cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80055d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055d4:	2200      	movs	r2, #0
 80055d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	4619      	mov	r1, r3
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f005 fca1 	bl	800af26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f040 811a 	bne.w	8005824 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	881b      	ldrh	r3, [r3, #0]
 8005600:	b29b      	uxth	r3, r3
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	441a      	add	r2, r3
 800561c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800562c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005630:	b29b      	uxth	r3, r3
 8005632:	8013      	strh	r3, [r2, #0]
 8005634:	e0f6      	b.n	8005824 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d121      	bne.n	8005684 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	441a      	add	r2, r3
 800566c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005678:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800567c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005680:	b29b      	uxth	r3, r3
 8005682:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800568a:	2b01      	cmp	r3, #1
 800568c:	f040 80ca 	bne.w	8005824 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005698:	441a      	add	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	69da      	ldr	r2, [r3, #28]
 80056a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80056a6:	441a      	add	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6a1a      	ldr	r2, [r3, #32]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d30b      	bcc.n	80056d0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6a1a      	ldr	r2, [r3, #32]
 80056c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056c8:	1ad2      	subs	r2, r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	621a      	str	r2, [r3, #32]
 80056ce:	e017      	b.n	8005700 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d108      	bne.n	80056ea <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80056d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80056dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80056e8:	e00a      	b.n	8005700 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2200      	movs	r2, #0
 80056f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	657b      	str	r3, [r7, #84]	@ 0x54
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d165      	bne.n	80057da <HAL_PCD_EP_DB_Transmit+0x750>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800571c:	b29b      	uxth	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005722:	4413      	add	r3, r2
 8005724:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	011a      	lsls	r2, r3, #4
 800572c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800572e:	4413      	add	r3, r2
 8005730:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005734:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005736:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005740:	b29a      	uxth	r2, r3
 8005742:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005744:	801a      	strh	r2, [r3, #0]
 8005746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800574a:	2b3e      	cmp	r3, #62	@ 0x3e
 800574c:	d91d      	bls.n	800578a <HAL_PCD_EP_DB_Transmit+0x700>
 800574e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800575a:	f003 031f 	and.w	r3, r3, #31
 800575e:	2b00      	cmp	r3, #0
 8005760:	d102      	bne.n	8005768 <HAL_PCD_EP_DB_Transmit+0x6de>
 8005762:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005764:	3b01      	subs	r3, #1
 8005766:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005768:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29a      	uxth	r2, r3
 800576e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005770:	b29b      	uxth	r3, r3
 8005772:	029b      	lsls	r3, r3, #10
 8005774:	b29b      	uxth	r3, r3
 8005776:	4313      	orrs	r3, r2
 8005778:	b29b      	uxth	r3, r3
 800577a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800577e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005782:	b29a      	uxth	r2, r3
 8005784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005786:	801a      	strh	r2, [r3, #0]
 8005788:	e041      	b.n	800580e <HAL_PCD_EP_DB_Transmit+0x784>
 800578a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <HAL_PCD_EP_DB_Transmit+0x71e>
 8005792:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800579c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	e032      	b.n	800580e <HAL_PCD_EP_DB_Transmit+0x784>
 80057a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057ac:	085b      	lsrs	r3, r3, #1
 80057ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_PCD_EP_DB_Transmit+0x738>
 80057bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057be:	3301      	adds	r3, #1
 80057c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	029b      	lsls	r3, r3, #10
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	4313      	orrs	r3, r2
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057d6:	801a      	strh	r2, [r3, #0]
 80057d8:	e019      	b.n	800580e <HAL_PCD_EP_DB_Transmit+0x784>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d115      	bne.n	800580e <HAL_PCD_EP_DB_Transmit+0x784>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f0:	4413      	add	r3, r2
 80057f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	011a      	lsls	r2, r3, #4
 80057fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057fc:	4413      	add	r3, r2
 80057fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005802:	653b      	str	r3, [r7, #80]	@ 0x50
 8005804:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005808:	b29a      	uxth	r2, r3
 800580a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800580c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6818      	ldr	r0, [r3, #0]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6959      	ldr	r1, [r3, #20]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	895a      	ldrh	r2, [r3, #10]
 800581a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800581e:	b29b      	uxth	r3, r3
 8005820:	f003 fd93 	bl	800934a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	b29b      	uxth	r3, r3
 8005836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800583a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800583e:	82bb      	strh	r3, [r7, #20]
 8005840:	8abb      	ldrh	r3, [r7, #20]
 8005842:	f083 0310 	eor.w	r3, r3, #16
 8005846:	82bb      	strh	r3, [r7, #20]
 8005848:	8abb      	ldrh	r3, [r7, #20]
 800584a:	f083 0320 	eor.w	r3, r3, #32
 800584e:	82bb      	strh	r3, [r7, #20]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	441a      	add	r2, r3
 800585e:	8abb      	ldrh	r3, [r7, #20]
 8005860:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005864:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800586c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005870:	b29b      	uxth	r3, r3
 8005872:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3790      	adds	r7, #144	@ 0x90
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800587e:	b480      	push	{r7}
 8005880:	b087      	sub	sp, #28
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	817b      	strh	r3, [r7, #10]
 800588c:	4613      	mov	r3, r2
 800588e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005890:	897b      	ldrh	r3, [r7, #10]
 8005892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00b      	beq.n	80058b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800589c:	897b      	ldrh	r3, [r7, #10]
 800589e:	f003 0207 	and.w	r2, r3, #7
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	3310      	adds	r3, #16
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e009      	b.n	80058c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058b4:	897a      	ldrh	r2, [r7, #10]
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	00db      	lsls	r3, r3, #3
 80058be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80058c8:	893b      	ldrh	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d107      	bne.n	80058de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2200      	movs	r2, #0
 80058d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	80da      	strh	r2, [r3, #6]
 80058dc:	e00b      	b.n	80058f6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2201      	movs	r2, #1
 80058e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	0c1b      	lsrs	r3, r3, #16
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	371c      	adds	r7, #28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr
	...

08005904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e272      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 8087 	beq.w	8005a32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005924:	4b92      	ldr	r3, [pc, #584]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b04      	cmp	r3, #4
 800592e:	d00c      	beq.n	800594a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005930:	4b8f      	ldr	r3, [pc, #572]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f003 030c 	and.w	r3, r3, #12
 8005938:	2b08      	cmp	r3, #8
 800593a:	d112      	bne.n	8005962 <HAL_RCC_OscConfig+0x5e>
 800593c:	4b8c      	ldr	r3, [pc, #560]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005948:	d10b      	bne.n	8005962 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594a:	4b89      	ldr	r3, [pc, #548]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d06c      	beq.n	8005a30 <HAL_RCC_OscConfig+0x12c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d168      	bne.n	8005a30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e24c      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800596a:	d106      	bne.n	800597a <HAL_RCC_OscConfig+0x76>
 800596c:	4b80      	ldr	r3, [pc, #512]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a7f      	ldr	r2, [pc, #508]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	e02e      	b.n	80059d8 <HAL_RCC_OscConfig+0xd4>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10c      	bne.n	800599c <HAL_RCC_OscConfig+0x98>
 8005982:	4b7b      	ldr	r3, [pc, #492]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a7a      	ldr	r2, [pc, #488]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	4b78      	ldr	r3, [pc, #480]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a77      	ldr	r2, [pc, #476]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005994:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	e01d      	b.n	80059d8 <HAL_RCC_OscConfig+0xd4>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059a4:	d10c      	bne.n	80059c0 <HAL_RCC_OscConfig+0xbc>
 80059a6:	4b72      	ldr	r3, [pc, #456]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a71      	ldr	r2, [pc, #452]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 80059ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	4b6f      	ldr	r3, [pc, #444]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a6e      	ldr	r2, [pc, #440]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 80059b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	e00b      	b.n	80059d8 <HAL_RCC_OscConfig+0xd4>
 80059c0:	4b6b      	ldr	r3, [pc, #428]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a6a      	ldr	r2, [pc, #424]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 80059c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	4b68      	ldr	r3, [pc, #416]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a67      	ldr	r2, [pc, #412]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 80059d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d013      	beq.n	8005a08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e0:	f7fc f868 	bl	8001ab4 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059e8:	f7fc f864 	bl	8001ab4 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b64      	cmp	r3, #100	@ 0x64
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e200      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f0      	beq.n	80059e8 <HAL_RCC_OscConfig+0xe4>
 8005a06:	e014      	b.n	8005a32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a08:	f7fc f854 	bl	8001ab4 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a10:	f7fc f850 	bl	8001ab4 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b64      	cmp	r3, #100	@ 0x64
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e1ec      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a22:	4b53      	ldr	r3, [pc, #332]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0x10c>
 8005a2e:	e000      	b.n	8005a32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d063      	beq.n	8005b06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a3e:	4b4c      	ldr	r3, [pc, #304]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f003 030c 	and.w	r3, r3, #12
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a4a:	4b49      	ldr	r3, [pc, #292]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d11c      	bne.n	8005a90 <HAL_RCC_OscConfig+0x18c>
 8005a56:	4b46      	ldr	r3, [pc, #280]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d116      	bne.n	8005a90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a62:	4b43      	ldr	r3, [pc, #268]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_RCC_OscConfig+0x176>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d001      	beq.n	8005a7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e1c0      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	4939      	ldr	r1, [pc, #228]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a8e:	e03a      	b.n	8005b06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d020      	beq.n	8005ada <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a98:	4b36      	ldr	r3, [pc, #216]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9e:	f7fc f809 	bl	8001ab4 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa6:	f7fc f805 	bl	8001ab4 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e1a1      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4927      	ldr	r1, [pc, #156]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	600b      	str	r3, [r1, #0]
 8005ad8:	e015      	b.n	8005b06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ada:	4b26      	ldr	r3, [pc, #152]	@ (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae0:	f7fb ffe8 	bl	8001ab4 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae8:	f7fb ffe4 	bl	8001ab4 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e180      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005afa:	4b1d      	ldr	r3, [pc, #116]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d03a      	beq.n	8005b88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d019      	beq.n	8005b4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b1a:	4b17      	ldr	r3, [pc, #92]	@ (8005b78 <HAL_RCC_OscConfig+0x274>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b20:	f7fb ffc8 	bl	8001ab4 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b28:	f7fb ffc4 	bl	8001ab4 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e160      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b70 <HAL_RCC_OscConfig+0x26c>)
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b46:	2001      	movs	r0, #1
 8005b48:	f000 face 	bl	80060e8 <RCC_Delay>
 8005b4c:	e01c      	b.n	8005b88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <HAL_RCC_OscConfig+0x274>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b54:	f7fb ffae 	bl	8001ab4 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b5a:	e00f      	b.n	8005b7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5c:	f7fb ffaa 	bl	8001ab4 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d908      	bls.n	8005b7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e146      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
 8005b6e:	bf00      	nop
 8005b70:	40021000 	.word	0x40021000
 8005b74:	42420000 	.word	0x42420000
 8005b78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b7c:	4b92      	ldr	r3, [pc, #584]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e9      	bne.n	8005b5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 80a6 	beq.w	8005ce2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10d      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba6:	4b88      	ldr	r3, [pc, #544]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	4a87      	ldr	r2, [pc, #540]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bb0:	61d3      	str	r3, [r2, #28]
 8005bb2:	4b85      	ldr	r3, [pc, #532]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bba:	60bb      	str	r3, [r7, #8]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc2:	4b82      	ldr	r3, [pc, #520]	@ (8005dcc <HAL_RCC_OscConfig+0x4c8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d118      	bne.n	8005c00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bce:	4b7f      	ldr	r3, [pc, #508]	@ (8005dcc <HAL_RCC_OscConfig+0x4c8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a7e      	ldr	r2, [pc, #504]	@ (8005dcc <HAL_RCC_OscConfig+0x4c8>)
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bda:	f7fb ff6b 	bl	8001ab4 <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be2:	f7fb ff67 	bl	8001ab4 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b64      	cmp	r3, #100	@ 0x64
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e103      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf4:	4b75      	ldr	r3, [pc, #468]	@ (8005dcc <HAL_RCC_OscConfig+0x4c8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0f0      	beq.n	8005be2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d106      	bne.n	8005c16 <HAL_RCC_OscConfig+0x312>
 8005c08:	4b6f      	ldr	r3, [pc, #444]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	4a6e      	ldr	r2, [pc, #440]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	6213      	str	r3, [r2, #32]
 8005c14:	e02d      	b.n	8005c72 <HAL_RCC_OscConfig+0x36e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10c      	bne.n	8005c38 <HAL_RCC_OscConfig+0x334>
 8005c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	4a69      	ldr	r2, [pc, #420]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c24:	f023 0301 	bic.w	r3, r3, #1
 8005c28:	6213      	str	r3, [r2, #32]
 8005c2a:	4b67      	ldr	r3, [pc, #412]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	4a66      	ldr	r2, [pc, #408]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c30:	f023 0304 	bic.w	r3, r3, #4
 8005c34:	6213      	str	r3, [r2, #32]
 8005c36:	e01c      	b.n	8005c72 <HAL_RCC_OscConfig+0x36e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	2b05      	cmp	r3, #5
 8005c3e:	d10c      	bne.n	8005c5a <HAL_RCC_OscConfig+0x356>
 8005c40:	4b61      	ldr	r3, [pc, #388]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	4a60      	ldr	r2, [pc, #384]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c46:	f043 0304 	orr.w	r3, r3, #4
 8005c4a:	6213      	str	r3, [r2, #32]
 8005c4c:	4b5e      	ldr	r3, [pc, #376]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	4a5d      	ldr	r2, [pc, #372]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c52:	f043 0301 	orr.w	r3, r3, #1
 8005c56:	6213      	str	r3, [r2, #32]
 8005c58:	e00b      	b.n	8005c72 <HAL_RCC_OscConfig+0x36e>
 8005c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	4a5a      	ldr	r2, [pc, #360]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c60:	f023 0301 	bic.w	r3, r3, #1
 8005c64:	6213      	str	r3, [r2, #32]
 8005c66:	4b58      	ldr	r3, [pc, #352]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	4a57      	ldr	r2, [pc, #348]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c6c:	f023 0304 	bic.w	r3, r3, #4
 8005c70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d015      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c7a:	f7fb ff1b 	bl	8001ab4 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c80:	e00a      	b.n	8005c98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c82:	f7fb ff17 	bl	8001ab4 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e0b1      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c98:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0ee      	beq.n	8005c82 <HAL_RCC_OscConfig+0x37e>
 8005ca4:	e014      	b.n	8005cd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ca6:	f7fb ff05 	bl	8001ab4 <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cac:	e00a      	b.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cae:	f7fb ff01 	bl	8001ab4 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d901      	bls.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e09b      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cc4:	4b40      	ldr	r3, [pc, #256]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1ee      	bne.n	8005cae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d105      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	4a3b      	ldr	r2, [pc, #236]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005cdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ce0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 8087 	beq.w	8005dfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cec:	4b36      	ldr	r3, [pc, #216]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f003 030c 	and.w	r3, r3, #12
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d061      	beq.n	8005dbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d146      	bne.n	8005d8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d00:	4b33      	ldr	r3, [pc, #204]	@ (8005dd0 <HAL_RCC_OscConfig+0x4cc>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d06:	f7fb fed5 	bl	8001ab4 <HAL_GetTick>
 8005d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d0c:	e008      	b.n	8005d20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d0e:	f7fb fed1 	bl	8001ab4 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e06d      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d20:	4b29      	ldr	r3, [pc, #164]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1f0      	bne.n	8005d0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
 8005d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d34:	d108      	bne.n	8005d48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005d36:	4b24      	ldr	r3, [pc, #144]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	4921      	ldr	r1, [pc, #132]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d48:	4b1f      	ldr	r3, [pc, #124]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a19      	ldr	r1, [r3, #32]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	491b      	ldr	r1, [pc, #108]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d60:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd0 <HAL_RCC_OscConfig+0x4cc>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d66:	f7fb fea5 	bl	8001ab4 <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d6e:	f7fb fea1 	bl	8001ab4 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e03d      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d80:	4b11      	ldr	r3, [pc, #68]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCC_OscConfig+0x46a>
 8005d8c:	e035      	b.n	8005dfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d8e:	4b10      	ldr	r3, [pc, #64]	@ (8005dd0 <HAL_RCC_OscConfig+0x4cc>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d94:	f7fb fe8e 	bl	8001ab4 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d9c:	f7fb fe8a 	bl	8001ab4 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e026      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005dae:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <HAL_RCC_OscConfig+0x4c4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x498>
 8005dba:	e01e      	b.n	8005dfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e019      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	40007000 	.word	0x40007000
 8005dd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <HAL_RCC_OscConfig+0x500>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d106      	bne.n	8005df6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d001      	beq.n	8005dfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40021000 	.word	0x40021000

08005e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0d0      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e1c:	4b6a      	ldr	r3, [pc, #424]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d910      	bls.n	8005e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2a:	4b67      	ldr	r3, [pc, #412]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f023 0207 	bic.w	r2, r3, #7
 8005e32:	4965      	ldr	r1, [pc, #404]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3a:	4b63      	ldr	r3, [pc, #396]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0b8      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d020      	beq.n	8005e9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e64:	4b59      	ldr	r3, [pc, #356]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	4a58      	ldr	r2, [pc, #352]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005e6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005e6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e7c:	4b53      	ldr	r3, [pc, #332]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4a52      	ldr	r2, [pc, #328]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005e82:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005e86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e88:	4b50      	ldr	r3, [pc, #320]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	494d      	ldr	r1, [pc, #308]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d040      	beq.n	8005f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d107      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eae:	4b47      	ldr	r3, [pc, #284]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d115      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e07f      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d107      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ec6:	4b41      	ldr	r3, [pc, #260]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e073      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed6:	4b3d      	ldr	r3, [pc, #244]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e06b      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ee6:	4b39      	ldr	r3, [pc, #228]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f023 0203 	bic.w	r2, r3, #3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	4936      	ldr	r1, [pc, #216]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ef8:	f7fb fddc 	bl	8001ab4 <HAL_GetTick>
 8005efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efe:	e00a      	b.n	8005f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f00:	f7fb fdd8 	bl	8001ab4 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e053      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f16:	4b2d      	ldr	r3, [pc, #180]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f003 020c 	and.w	r2, r3, #12
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d1eb      	bne.n	8005f00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f28:	4b27      	ldr	r3, [pc, #156]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0307 	and.w	r3, r3, #7
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d210      	bcs.n	8005f58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f36:	4b24      	ldr	r3, [pc, #144]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f023 0207 	bic.w	r2, r3, #7
 8005f3e:	4922      	ldr	r1, [pc, #136]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f46:	4b20      	ldr	r3, [pc, #128]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d001      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e032      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f64:	4b19      	ldr	r3, [pc, #100]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4916      	ldr	r1, [pc, #88]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f82:	4b12      	ldr	r3, [pc, #72]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	490e      	ldr	r1, [pc, #56]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f96:	f000 f821 	bl	8005fdc <HAL_RCC_GetSysClockFreq>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fcc <HAL_RCC_ClockConfig+0x1c4>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	490a      	ldr	r1, [pc, #40]	@ (8005fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8005fa8:	5ccb      	ldrb	r3, [r1, r3]
 8005faa:	fa22 f303 	lsr.w	r3, r2, r3
 8005fae:	4a09      	ldr	r2, [pc, #36]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1cc>)
 8005fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005fb2:	4b09      	ldr	r3, [pc, #36]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1d0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fb fd3a 	bl	8001a30 <HAL_InitTick>

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40022000 	.word	0x40022000
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	0800be58 	.word	0x0800be58
 8005fd4:	20000000 	.word	0x20000000
 8005fd8:	20000004 	.word	0x20000004

08005fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8006070 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	2b04      	cmp	r3, #4
 8006004:	d002      	beq.n	800600c <HAL_RCC_GetSysClockFreq+0x30>
 8006006:	2b08      	cmp	r3, #8
 8006008:	d003      	beq.n	8006012 <HAL_RCC_GetSysClockFreq+0x36>
 800600a:	e027      	b.n	800605c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800600c:	4b19      	ldr	r3, [pc, #100]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x98>)
 800600e:	613b      	str	r3, [r7, #16]
      break;
 8006010:	e027      	b.n	8006062 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	0c9b      	lsrs	r3, r3, #18
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	4a17      	ldr	r2, [pc, #92]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x9c>)
 800601c:	5cd3      	ldrb	r3, [r2, r3]
 800601e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d010      	beq.n	800604c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800602a:	4b11      	ldr	r3, [pc, #68]	@ (8006070 <HAL_RCC_GetSysClockFreq+0x94>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	0c5b      	lsrs	r3, r3, #17
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	4a11      	ldr	r2, [pc, #68]	@ (800607c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006036:	5cd3      	ldrb	r3, [r2, r3]
 8006038:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a0d      	ldr	r2, [pc, #52]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x98>)
 800603e:	fb03 f202 	mul.w	r2, r3, r2
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	fbb2 f3f3 	udiv	r3, r2, r3
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	e004      	b.n	8006056 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a0c      	ldr	r2, [pc, #48]	@ (8006080 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006050:	fb02 f303 	mul.w	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	613b      	str	r3, [r7, #16]
      break;
 800605a:	e002      	b.n	8006062 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800605c:	4b05      	ldr	r3, [pc, #20]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x98>)
 800605e:	613b      	str	r3, [r7, #16]
      break;
 8006060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006062:	693b      	ldr	r3, [r7, #16]
}
 8006064:	4618      	mov	r0, r3
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000
 8006074:	007a1200 	.word	0x007a1200
 8006078:	0800be70 	.word	0x0800be70
 800607c:	0800be80 	.word	0x0800be80
 8006080:	003d0900 	.word	0x003d0900

08006084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006088:	4b02      	ldr	r3, [pc, #8]	@ (8006094 <HAL_RCC_GetHCLKFreq+0x10>)
 800608a:	681b      	ldr	r3, [r3, #0]
}
 800608c:	4618      	mov	r0, r3
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr
 8006094:	20000000 	.word	0x20000000

08006098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800609c:	f7ff fff2 	bl	8006084 <HAL_RCC_GetHCLKFreq>
 80060a0:	4602      	mov	r2, r0
 80060a2:	4b05      	ldr	r3, [pc, #20]	@ (80060b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	0a1b      	lsrs	r3, r3, #8
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	4903      	ldr	r1, [pc, #12]	@ (80060bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80060ae:	5ccb      	ldrb	r3, [r1, r3]
 80060b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40021000 	.word	0x40021000
 80060bc:	0800be68 	.word	0x0800be68

080060c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060c4:	f7ff ffde 	bl	8006084 <HAL_RCC_GetHCLKFreq>
 80060c8:	4602      	mov	r2, r0
 80060ca:	4b05      	ldr	r3, [pc, #20]	@ (80060e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	0adb      	lsrs	r3, r3, #11
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	4903      	ldr	r1, [pc, #12]	@ (80060e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060d6:	5ccb      	ldrb	r3, [r1, r3]
 80060d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060dc:	4618      	mov	r0, r3
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40021000 	.word	0x40021000
 80060e4:	0800be68 	.word	0x0800be68

080060e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060f0:	4b0a      	ldr	r3, [pc, #40]	@ (800611c <RCC_Delay+0x34>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006120 <RCC_Delay+0x38>)
 80060f6:	fba2 2303 	umull	r2, r3, r2, r3
 80060fa:	0a5b      	lsrs	r3, r3, #9
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	fb02 f303 	mul.w	r3, r2, r3
 8006102:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006104:	bf00      	nop
  }
  while (Delay --);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1e5a      	subs	r2, r3, #1
 800610a:	60fa      	str	r2, [r7, #12]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f9      	bne.n	8006104 <RCC_Delay+0x1c>
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	bc80      	pop	{r7}
 800611a:	4770      	bx	lr
 800611c:	20000000 	.word	0x20000000
 8006120:	10624dd3 	.word	0x10624dd3

08006124 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d07d      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006140:	2300      	movs	r3, #0
 8006142:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006144:	4b4f      	ldr	r3, [pc, #316]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10d      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006150:	4b4c      	ldr	r3, [pc, #304]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	4a4b      	ldr	r2, [pc, #300]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800615a:	61d3      	str	r3, [r2, #28]
 800615c:	4b49      	ldr	r3, [pc, #292]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006164:	60bb      	str	r3, [r7, #8]
 8006166:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006168:	2301      	movs	r3, #1
 800616a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800616c:	4b46      	ldr	r3, [pc, #280]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006174:	2b00      	cmp	r3, #0
 8006176:	d118      	bne.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006178:	4b43      	ldr	r3, [pc, #268]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a42      	ldr	r2, [pc, #264]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800617e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006182:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006184:	f7fb fc96 	bl	8001ab4 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800618a:	e008      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800618c:	f7fb fc92 	bl	8001ab4 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b64      	cmp	r3, #100	@ 0x64
 8006198:	d901      	bls.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e06d      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800619e:	4b3a      	ldr	r3, [pc, #232]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0f0      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061aa:	4b36      	ldr	r3, [pc, #216]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d02e      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d027      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061c8:	4b2e      	ldr	r3, [pc, #184]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061d2:	4b2e      	ldr	r3, [pc, #184]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061d8:	4b2c      	ldr	r3, [pc, #176]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80061de:	4a29      	ldr	r2, [pc, #164]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d014      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ee:	f7fb fc61 	bl	8001ab4 <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f4:	e00a      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061f6:	f7fb fc5d 	bl	8001ab4 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006204:	4293      	cmp	r3, r2
 8006206:	d901      	bls.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e036      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800620c:	4b1d      	ldr	r3, [pc, #116]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	f003 0302 	and.w	r3, r3, #2
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0ee      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006218:	4b1a      	ldr	r3, [pc, #104]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	4917      	ldr	r1, [pc, #92]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006226:	4313      	orrs	r3, r2
 8006228:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d105      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006230:	4b14      	ldr	r3, [pc, #80]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	4a13      	ldr	r2, [pc, #76]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006236:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800623a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006248:	4b0e      	ldr	r3, [pc, #56]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	490b      	ldr	r1, [pc, #44]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006256:	4313      	orrs	r3, r2
 8006258:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0310 	and.w	r3, r3, #16
 8006262:	2b00      	cmp	r3, #0
 8006264:	d008      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006266:	4b07      	ldr	r3, [pc, #28]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	4904      	ldr	r1, [pc, #16]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006274:	4313      	orrs	r3, r2
 8006276:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40021000 	.word	0x40021000
 8006288:	40007000 	.word	0x40007000
 800628c:	42420440 	.word	0x42420440

08006290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e041      	b.n	8006326 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fb fab6 	bl	8001828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f000 f992 	bl	80065f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d109      	bne.n	8006354 <HAL_TIM_PWM_Start+0x24>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	bf14      	ite	ne
 800634c:	2301      	movne	r3, #1
 800634e:	2300      	moveq	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	e022      	b.n	800639a <HAL_TIM_PWM_Start+0x6a>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b04      	cmp	r3, #4
 8006358:	d109      	bne.n	800636e <HAL_TIM_PWM_Start+0x3e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b01      	cmp	r3, #1
 8006364:	bf14      	ite	ne
 8006366:	2301      	movne	r3, #1
 8006368:	2300      	moveq	r3, #0
 800636a:	b2db      	uxtb	r3, r3
 800636c:	e015      	b.n	800639a <HAL_TIM_PWM_Start+0x6a>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b08      	cmp	r3, #8
 8006372:	d109      	bne.n	8006388 <HAL_TIM_PWM_Start+0x58>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	e008      	b.n	800639a <HAL_TIM_PWM_Start+0x6a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b01      	cmp	r3, #1
 8006392:	bf14      	ite	ne
 8006394:	2301      	movne	r3, #1
 8006396:	2300      	moveq	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e05e      	b.n	8006460 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <HAL_TIM_PWM_Start+0x82>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063b0:	e013      	b.n	80063da <HAL_TIM_PWM_Start+0xaa>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d104      	bne.n	80063c2 <HAL_TIM_PWM_Start+0x92>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063c0:	e00b      	b.n	80063da <HAL_TIM_PWM_Start+0xaa>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d104      	bne.n	80063d2 <HAL_TIM_PWM_Start+0xa2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d0:	e003      	b.n	80063da <HAL_TIM_PWM_Start+0xaa>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2201      	movs	r2, #1
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fafe 	bl	80069e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006468 <HAL_TIM_PWM_Start+0x138>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d107      	bne.n	8006402 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006400:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a18      	ldr	r2, [pc, #96]	@ (8006468 <HAL_TIM_PWM_Start+0x138>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00e      	beq.n	800642a <HAL_TIM_PWM_Start+0xfa>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006414:	d009      	beq.n	800642a <HAL_TIM_PWM_Start+0xfa>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a14      	ldr	r2, [pc, #80]	@ (800646c <HAL_TIM_PWM_Start+0x13c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_TIM_PWM_Start+0xfa>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a12      	ldr	r2, [pc, #72]	@ (8006470 <HAL_TIM_PWM_Start+0x140>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d111      	bne.n	800644e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b06      	cmp	r3, #6
 800643a:	d010      	beq.n	800645e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644c:	e007      	b.n	800645e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0201 	orr.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40012c00 	.word	0x40012c00
 800646c:	40000400 	.word	0x40000400
 8006470:	40000800 	.word	0x40000800

08006474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800648e:	2302      	movs	r3, #2
 8006490:	e0ae      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b0c      	cmp	r3, #12
 800649e:	f200 809f 	bhi.w	80065e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064a2:	a201      	add	r2, pc, #4	@ (adr r2, 80064a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064dd 	.word	0x080064dd
 80064ac:	080065e1 	.word	0x080065e1
 80064b0:	080065e1 	.word	0x080065e1
 80064b4:	080065e1 	.word	0x080065e1
 80064b8:	0800651d 	.word	0x0800651d
 80064bc:	080065e1 	.word	0x080065e1
 80064c0:	080065e1 	.word	0x080065e1
 80064c4:	080065e1 	.word	0x080065e1
 80064c8:	0800655f 	.word	0x0800655f
 80064cc:	080065e1 	.word	0x080065e1
 80064d0:	080065e1 	.word	0x080065e1
 80064d4:	080065e1 	.word	0x080065e1
 80064d8:	0800659f 	.word	0x0800659f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f8f6 	bl	80066d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699a      	ldr	r2, [r3, #24]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0208 	orr.w	r2, r2, #8
 80064f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699a      	ldr	r2, [r3, #24]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0204 	bic.w	r2, r2, #4
 8006506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6999      	ldr	r1, [r3, #24]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	691a      	ldr	r2, [r3, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	619a      	str	r2, [r3, #24]
      break;
 800651a:	e064      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	4618      	mov	r0, r3
 8006524:	f000 f93c 	bl	80067a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	699a      	ldr	r2, [r3, #24]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6999      	ldr	r1, [r3, #24]
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	021a      	lsls	r2, r3, #8
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	430a      	orrs	r2, r1
 800655a:	619a      	str	r2, [r3, #24]
      break;
 800655c:	e043      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f000 f985 	bl	8006874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0208 	orr.w	r2, r2, #8
 8006578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0204 	bic.w	r2, r2, #4
 8006588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69d9      	ldr	r1, [r3, #28]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	61da      	str	r2, [r3, #28]
      break;
 800659c:	e023      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68b9      	ldr	r1, [r7, #8]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 f9cf 	bl	8006948 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	69da      	ldr	r2, [r3, #28]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69d9      	ldr	r1, [r3, #28]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	021a      	lsls	r2, r3, #8
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	61da      	str	r2, [r3, #28]
      break;
 80065de:	e002      	b.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
      break;
 80065e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a2f      	ldr	r2, [pc, #188]	@ (80066c8 <TIM_Base_SetConfig+0xd0>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00b      	beq.n	8006628 <TIM_Base_SetConfig+0x30>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006616:	d007      	beq.n	8006628 <TIM_Base_SetConfig+0x30>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a2c      	ldr	r2, [pc, #176]	@ (80066cc <TIM_Base_SetConfig+0xd4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_Base_SetConfig+0x30>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a2b      	ldr	r2, [pc, #172]	@ (80066d0 <TIM_Base_SetConfig+0xd8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d108      	bne.n	800663a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a22      	ldr	r2, [pc, #136]	@ (80066c8 <TIM_Base_SetConfig+0xd0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00b      	beq.n	800665a <TIM_Base_SetConfig+0x62>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006648:	d007      	beq.n	800665a <TIM_Base_SetConfig+0x62>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a1f      	ldr	r2, [pc, #124]	@ (80066cc <TIM_Base_SetConfig+0xd4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d003      	beq.n	800665a <TIM_Base_SetConfig+0x62>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a1e      	ldr	r2, [pc, #120]	@ (80066d0 <TIM_Base_SetConfig+0xd8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d108      	bne.n	800666c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a0d      	ldr	r2, [pc, #52]	@ (80066c8 <TIM_Base_SetConfig+0xd0>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d103      	bne.n	80066a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	691a      	ldr	r2, [r3, #16]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f023 0201 	bic.w	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	611a      	str	r2, [r3, #16]
  }
}
 80066be:	bf00      	nop
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bc80      	pop	{r7}
 80066c6:	4770      	bx	lr
 80066c8:	40012c00 	.word	0x40012c00
 80066cc:	40000400 	.word	0x40000400
 80066d0:	40000800 	.word	0x40000800

080066d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f023 0201 	bic.w	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f023 0302 	bic.w	r3, r3, #2
 800671c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a1c      	ldr	r2, [pc, #112]	@ (800679c <TIM_OC1_SetConfig+0xc8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d10c      	bne.n	800674a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0308 	bic.w	r3, r3, #8
 8006736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f023 0304 	bic.w	r3, r3, #4
 8006748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a13      	ldr	r2, [pc, #76]	@ (800679c <TIM_OC1_SetConfig+0xc8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d111      	bne.n	8006776 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	621a      	str	r2, [r3, #32]
}
 8006790:	bf00      	nop
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40012c00 	.word	0x40012c00

080067a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f023 0210 	bic.w	r2, r3, #16
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f023 0320 	bic.w	r3, r3, #32
 80067ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006870 <TIM_OC2_SetConfig+0xd0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d10d      	bne.n	800681c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800681a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a14      	ldr	r2, [pc, #80]	@ (8006870 <TIM_OC2_SetConfig+0xd0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d113      	bne.n	800684c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800682a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr
 8006870:	40012c00 	.word	0x40012c00

08006874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0303 	bic.w	r3, r3, #3
 80068aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	021b      	lsls	r3, r3, #8
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006944 <TIM_OC3_SetConfig+0xd0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d10d      	bne.n	80068ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	021b      	lsls	r3, r3, #8
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a14      	ldr	r2, [pc, #80]	@ (8006944 <TIM_OC3_SetConfig+0xd0>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d113      	bne.n	800691e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40012c00 	.word	0x40012c00

08006948 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800697e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	031b      	lsls	r3, r3, #12
 800699a:	693a      	ldr	r2, [r7, #16]
 800699c:	4313      	orrs	r3, r2
 800699e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a0f      	ldr	r2, [pc, #60]	@ (80069e0 <TIM_OC4_SetConfig+0x98>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d109      	bne.n	80069bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	019b      	lsls	r3, r3, #6
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	621a      	str	r2, [r3, #32]
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr
 80069e0:	40012c00 	.word	0x40012c00

080069e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 031f 	and.w	r3, r3, #31
 80069f6:	2201      	movs	r2, #1
 80069f8:	fa02 f303 	lsl.w	r3, r2, r3
 80069fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a1a      	ldr	r2, [r3, #32]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	43db      	mvns	r3, r3
 8006a06:	401a      	ands	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6a1a      	ldr	r2, [r3, #32]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	6879      	ldr	r1, [r7, #4]
 8006a18:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr

08006a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e046      	b.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a16      	ldr	r2, [pc, #88]	@ (8006adc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00e      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a90:	d009      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a12      	ldr	r2, [pc, #72]	@ (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d004      	beq.n	8006aa6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a10      	ldr	r2, [pc, #64]	@ (8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d10c      	bne.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr
 8006adc:	40012c00 	.word	0x40012c00
 8006ae0:	40000400 	.word	0x40000400
 8006ae4:	40000800 	.word	0x40000800

08006ae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e03d      	b.n	8006b80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr

08006b8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e042      	b.n	8006c22 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d106      	bne.n	8006bb6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fa feb5 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2224      	movs	r2, #36	@ 0x24
 8006bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bcc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f82c 	bl	8006c2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006be2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695a      	ldr	r2, [r3, #20]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bf2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006c66:	f023 030c 	bic.w	r3, r3, #12
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6812      	ldr	r2, [r2, #0]
 8006c6e:	68b9      	ldr	r1, [r7, #8]
 8006c70:	430b      	orrs	r3, r1
 8006c72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	430a      	orrs	r2, r1
 8006c88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8006d40 <UART_SetConfig+0x114>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d103      	bne.n	8006c9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c94:	f7ff fa14 	bl	80060c0 <HAL_RCC_GetPCLK2Freq>
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	e002      	b.n	8006ca2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c9c:	f7ff f9fc 	bl	8006098 <HAL_RCC_GetPCLK1Freq>
 8006ca0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009a      	lsls	r2, r3, #2
 8006cac:	441a      	add	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb8:	4a22      	ldr	r2, [pc, #136]	@ (8006d44 <UART_SetConfig+0x118>)
 8006cba:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	0119      	lsls	r1, r3, #4
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	009a      	lsls	r2, r3, #2
 8006ccc:	441a      	add	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d44 <UART_SetConfig+0x118>)
 8006cda:	fba3 0302 	umull	r0, r3, r3, r2
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	2064      	movs	r0, #100	@ 0x64
 8006ce2:	fb00 f303 	mul.w	r3, r0, r3
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	011b      	lsls	r3, r3, #4
 8006cea:	3332      	adds	r3, #50	@ 0x32
 8006cec:	4a15      	ldr	r2, [pc, #84]	@ (8006d44 <UART_SetConfig+0x118>)
 8006cee:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf2:	095b      	lsrs	r3, r3, #5
 8006cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cf8:	4419      	add	r1, r3
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	009a      	lsls	r2, r3, #2
 8006d04:	441a      	add	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d10:	4b0c      	ldr	r3, [pc, #48]	@ (8006d44 <UART_SetConfig+0x118>)
 8006d12:	fba3 0302 	umull	r0, r3, r3, r2
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	2064      	movs	r0, #100	@ 0x64
 8006d1a:	fb00 f303 	mul.w	r3, r0, r3
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	3332      	adds	r3, #50	@ 0x32
 8006d24:	4a07      	ldr	r2, [pc, #28]	@ (8006d44 <UART_SetConfig+0x118>)
 8006d26:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	f003 020f 	and.w	r2, r3, #15
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	440a      	add	r2, r1
 8006d36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d38:	bf00      	nop
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	40013800 	.word	0x40013800
 8006d44:	51eb851f 	.word	0x51eb851f

08006d48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	4638      	mov	r0, r7
 8006d52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bc80      	pop	{r7}
 8006d60:	4770      	bx	lr

08006d62 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b085      	sub	sp, #20
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d72:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006d76:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr

08006d8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d96:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006d9a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	4013      	ands	r3, r2
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr

08006dc2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr

08006dda <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b085      	sub	sp, #20
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	4638      	mov	r0, r7
 8006de4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b09d      	sub	sp, #116	@ 0x74
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e3a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	78db      	ldrb	r3, [r3, #3]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d81f      	bhi.n	8006e86 <USB_ActivateEndpoint+0x72>
 8006e46:	a201      	add	r2, pc, #4	@ (adr r2, 8006e4c <USB_ActivateEndpoint+0x38>)
 8006e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4c:	08006e5d 	.word	0x08006e5d
 8006e50:	08006e79 	.word	0x08006e79
 8006e54:	08006e8f 	.word	0x08006e8f
 8006e58:	08006e6b 	.word	0x08006e6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006e5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006e68:	e012      	b.n	8006e90 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006e6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e6e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006e72:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006e76:	e00b      	b.n	8006e90 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006e78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006e84:	e004      	b.n	8006e90 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006e8c:	e000      	b.n	8006e90 <USB_ActivateEndpoint+0x7c>
      break;
 8006e8e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	441a      	add	r2, r3
 8006e9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	7812      	ldrb	r2, [r2, #0]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	441a      	add	r2, r3
 8006ede:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	7b1b      	ldrb	r3, [r3, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 8178 	bne.w	80071f0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	785b      	ldrb	r3, [r3, #1]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8084 	beq.w	8007012 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	461a      	mov	r2, r3
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	61bb      	str	r3, [r7, #24]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	011a      	lsls	r2, r3, #4
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	88db      	ldrh	r3, [r3, #6]
 8006f32:	085b      	lsrs	r3, r3, #1
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	827b      	strh	r3, [r7, #18]
 8006f4c:	8a7b      	ldrh	r3, [r7, #18]
 8006f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01b      	beq.n	8006f8e <USB_ActivateEndpoint+0x17a>
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6c:	823b      	strh	r3, [r7, #16]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	8a3b      	ldrh	r3, [r7, #16]
 8006f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	78db      	ldrb	r3, [r3, #3]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d020      	beq.n	8006fd8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fac:	81bb      	strh	r3, [r7, #12]
 8006fae:	89bb      	ldrh	r3, [r7, #12]
 8006fb0:	f083 0320 	eor.w	r3, r3, #32
 8006fb4:	81bb      	strh	r3, [r7, #12]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	441a      	add	r2, r3
 8006fc0:	89bb      	ldrh	r3, [r7, #12]
 8006fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	8013      	strh	r3, [r2, #0]
 8006fd6:	e2d5      	b.n	8007584 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fee:	81fb      	strh	r3, [r7, #14]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	441a      	add	r2, r3
 8006ffa:	89fb      	ldrh	r3, [r7, #14]
 8006ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800700c:	b29b      	uxth	r3, r3
 800700e:	8013      	strh	r3, [r2, #0]
 8007010:	e2b8      	b.n	8007584 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	633b      	str	r3, [r7, #48]	@ 0x30
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800701c:	b29b      	uxth	r3, r3
 800701e:	461a      	mov	r2, r3
 8007020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007022:	4413      	add	r3, r2
 8007024:	633b      	str	r3, [r7, #48]	@ 0x30
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	011a      	lsls	r2, r3, #4
 800702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702e:	4413      	add	r3, r2
 8007030:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8007034:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	88db      	ldrh	r3, [r3, #6]
 800703a:	085b      	lsrs	r3, r3, #1
 800703c:	b29b      	uxth	r3, r3
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	b29a      	uxth	r2, r3
 8007042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007044:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007050:	b29b      	uxth	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007056:	4413      	add	r3, r2
 8007058:	62bb      	str	r3, [r7, #40]	@ 0x28
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	011a      	lsls	r2, r3, #4
 8007060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007062:	4413      	add	r3, r2
 8007064:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29b      	uxth	r3, r3
 8007070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007074:	b29a      	uxth	r2, r3
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	801a      	strh	r2, [r3, #0]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007080:	d91d      	bls.n	80070be <USB_ActivateEndpoint+0x2aa>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	095b      	lsrs	r3, r3, #5
 8007088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 031f 	and.w	r3, r3, #31
 8007092:	2b00      	cmp	r3, #0
 8007094:	d102      	bne.n	800709c <USB_ActivateEndpoint+0x288>
 8007096:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007098:	3b01      	subs	r3, #1
 800709a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	029b      	lsls	r3, r3, #10
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	4313      	orrs	r3, r2
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ba:	801a      	strh	r2, [r3, #0]
 80070bc:	e026      	b.n	800710c <USB_ActivateEndpoint+0x2f8>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <USB_ActivateEndpoint+0x2c8>
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	801a      	strh	r2, [r3, #0]
 80070da:	e017      	b.n	800710c <USB_ActivateEndpoint+0x2f8>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	085b      	lsrs	r3, r3, #1
 80070e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <USB_ActivateEndpoint+0x2e2>
 80070f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070f2:	3301      	adds	r3, #1
 80070f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070fe:	b29b      	uxth	r3, r3
 8007100:	029b      	lsls	r3, r3, #10
 8007102:	b29b      	uxth	r3, r3
 8007104:	4313      	orrs	r3, r2
 8007106:	b29a      	uxth	r2, r3
 8007108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4413      	add	r3, r2
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	847b      	strh	r3, [r7, #34]	@ 0x22
 800711a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800711c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01b      	beq.n	800715c <USB_ActivateEndpoint+0x348>
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713a:	843b      	strh	r3, [r7, #32]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	441a      	add	r2, r3
 8007146:	8c3b      	ldrh	r3, [r7, #32]
 8007148:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800714c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007150:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007158:	b29b      	uxth	r3, r3
 800715a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d124      	bne.n	80071ae <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800717a:	83bb      	strh	r3, [r7, #28]
 800717c:	8bbb      	ldrh	r3, [r7, #28]
 800717e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007182:	83bb      	strh	r3, [r7, #28]
 8007184:	8bbb      	ldrh	r3, [r7, #28]
 8007186:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800718a:	83bb      	strh	r3, [r7, #28]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	441a      	add	r2, r3
 8007196:	8bbb      	ldrh	r3, [r7, #28]
 8007198:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800719c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	8013      	strh	r3, [r2, #0]
 80071ac:	e1ea      	b.n	8007584 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c4:	83fb      	strh	r3, [r7, #30]
 80071c6:	8bfb      	ldrh	r3, [r7, #30]
 80071c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80071cc:	83fb      	strh	r3, [r7, #30]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	441a      	add	r2, r3
 80071d8:	8bfb      	ldrh	r3, [r7, #30]
 80071da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	8013      	strh	r3, [r2, #0]
 80071ee:	e1c9      	b.n	8007584 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	78db      	ldrb	r3, [r3, #3]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d11e      	bne.n	8007236 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	b29b      	uxth	r3, r3
 8007206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800720a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800720e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	441a      	add	r2, r3
 800721c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007220:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007224:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007228:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800722c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007230:	b29b      	uxth	r3, r3
 8007232:	8013      	strh	r3, [r2, #0]
 8007234:	e01d      	b.n	8007272 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	b29b      	uxth	r3, r3
 8007244:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800724c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	441a      	add	r2, r3
 800725a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800725e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800726a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800726e:	b29b      	uxth	r3, r3
 8007270:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800727c:	b29b      	uxth	r3, r3
 800727e:	461a      	mov	r2, r3
 8007280:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007282:	4413      	add	r3, r2
 8007284:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	011a      	lsls	r2, r3, #4
 800728c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800728e:	4413      	add	r3, r2
 8007290:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007294:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	891b      	ldrh	r3, [r3, #8]
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	b29b      	uxth	r3, r3
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072a4:	801a      	strh	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b6:	4413      	add	r3, r2
 80072b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	011a      	lsls	r2, r3, #4
 80072c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80072c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	895b      	ldrh	r3, [r3, #10]
 80072ce:	085b      	lsrs	r3, r3, #1
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072d8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	785b      	ldrb	r3, [r3, #1]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f040 8093 	bne.w	800740a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	881b      	ldrh	r3, [r3, #0]
 80072f0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80072f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80072f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d01b      	beq.n	8007338 <USB_ActivateEndpoint+0x524>
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	881b      	ldrh	r3, [r3, #0]
 800730c:	b29b      	uxth	r3, r3
 800730e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007316:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	441a      	add	r2, r3
 8007322:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800732c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007334:	b29b      	uxth	r3, r3
 8007336:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007346:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800734c:	2b00      	cmp	r3, #0
 800734e:	d01b      	beq.n	8007388 <USB_ActivateEndpoint+0x574>
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	b29b      	uxth	r3, r3
 800735e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007366:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	441a      	add	r2, r3
 8007372:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007374:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007378:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800737c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007380:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007384:	b29b      	uxth	r3, r3
 8007386:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29b      	uxth	r3, r3
 8007396:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800739a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800739e:	873b      	strh	r3, [r7, #56]	@ 0x38
 80073a0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80073a2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80073a6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80073a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80073aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80073ae:	873b      	strh	r3, [r7, #56]	@ 0x38
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	441a      	add	r2, r3
 80073ba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80073bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	441a      	add	r2, r3
 80073f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80073f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007404:	b29b      	uxth	r3, r3
 8007406:	8013      	strh	r3, [r2, #0]
 8007408:	e0bc      	b.n	8007584 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800741a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800741e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01d      	beq.n	8007462 <USB_ActivateEndpoint+0x64e>
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800743c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	441a      	add	r2, r3
 800744a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800744e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007456:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800745a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800745e:	b29b      	uxth	r3, r3
 8007460:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007472:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800747a:	2b00      	cmp	r3, #0
 800747c:	d01d      	beq.n	80074ba <USB_ActivateEndpoint+0x6a6>
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	b29b      	uxth	r3, r3
 800748c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007490:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007494:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	441a      	add	r2, r3
 80074a2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80074a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	78db      	ldrb	r3, [r3, #3]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d024      	beq.n	800750c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074d8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80074dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80074e0:	f083 0320 	eor.w	r3, r3, #32
 80074e4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	441a      	add	r2, r3
 80074f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80074f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007506:	b29b      	uxth	r3, r3
 8007508:	8013      	strh	r3, [r2, #0]
 800750a:	e01d      	b.n	8007548 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800751e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007522:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	441a      	add	r2, r3
 8007530:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007534:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007538:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800753c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007544:	b29b      	uxth	r3, r3
 8007546:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29b      	uxth	r3, r3
 8007556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800755a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800755e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	441a      	add	r2, r3
 800756c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007570:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007574:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800757c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007580:	b29b      	uxth	r3, r3
 8007582:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007584:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007588:	4618      	mov	r0, r3
 800758a:	3774      	adds	r7, #116	@ 0x74
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop

08007594 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007594:	b480      	push	{r7}
 8007596:	b08d      	sub	sp, #52	@ 0x34
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	7b1b      	ldrb	r3, [r3, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f040 808e 	bne.w	80076c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	785b      	ldrb	r3, [r3, #1]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d044      	beq.n	800763a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	81bb      	strh	r3, [r7, #12]
 80075be:	89bb      	ldrh	r3, [r7, #12]
 80075c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01b      	beq.n	8007600 <USB_DeactivateEndpoint+0x6c>
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075de:	817b      	strh	r3, [r7, #10]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	441a      	add	r2, r3
 80075ea:	897b      	ldrh	r3, [r7, #10]
 80075ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007616:	813b      	strh	r3, [r7, #8]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	441a      	add	r2, r3
 8007622:	893b      	ldrh	r3, [r7, #8]
 8007624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800762c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007634:	b29b      	uxth	r3, r3
 8007636:	8013      	strh	r3, [r2, #0]
 8007638:	e192      	b.n	8007960 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	827b      	strh	r3, [r7, #18]
 8007648:	8a7b      	ldrh	r3, [r7, #18]
 800764a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d01b      	beq.n	800768a <USB_DeactivateEndpoint+0xf6>
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	b29b      	uxth	r3, r3
 8007660:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007668:	823b      	strh	r3, [r7, #16]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	441a      	add	r2, r3
 8007674:	8a3b      	ldrh	r3, [r7, #16]
 8007676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800767a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800767e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007686:	b29b      	uxth	r3, r3
 8007688:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	b29b      	uxth	r3, r3
 8007698:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800769c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a0:	81fb      	strh	r3, [r7, #14]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	441a      	add	r2, r3
 80076ac:	89fb      	ldrh	r3, [r7, #14]
 80076ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076be:	b29b      	uxth	r3, r3
 80076c0:	8013      	strh	r3, [r2, #0]
 80076c2:	e14d      	b.n	8007960 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f040 80a5 	bne.w	8007818 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	843b      	strh	r3, [r7, #32]
 80076dc:	8c3b      	ldrh	r3, [r7, #32]
 80076de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01b      	beq.n	800771e <USB_DeactivateEndpoint+0x18a>
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076fc:	83fb      	strh	r3, [r7, #30]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	441a      	add	r2, r3
 8007708:	8bfb      	ldrh	r3, [r7, #30]
 800770a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800770e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800771a:	b29b      	uxth	r3, r3
 800771c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	83bb      	strh	r3, [r7, #28]
 800772c:	8bbb      	ldrh	r3, [r7, #28]
 800772e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d01b      	beq.n	800776e <USB_DeactivateEndpoint+0x1da>
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	b29b      	uxth	r3, r3
 8007744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800774c:	837b      	strh	r3, [r7, #26]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	441a      	add	r2, r3
 8007758:	8b7b      	ldrh	r3, [r7, #26]
 800775a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800775e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007766:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800776a:	b29b      	uxth	r3, r3
 800776c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	b29b      	uxth	r3, r3
 800777c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007780:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007784:	833b      	strh	r3, [r7, #24]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	441a      	add	r2, r3
 8007790:	8b3b      	ldrh	r3, [r7, #24]
 8007792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800779a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800779e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80077b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077bc:	82fb      	strh	r3, [r7, #22]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	441a      	add	r2, r3
 80077c8:	8afb      	ldrh	r3, [r7, #22]
 80077ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077da:	b29b      	uxth	r3, r3
 80077dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077f4:	82bb      	strh	r3, [r7, #20]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	441a      	add	r2, r3
 8007800:	8abb      	ldrh	r3, [r7, #20]
 8007802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800780a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800780e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007812:	b29b      	uxth	r3, r3
 8007814:	8013      	strh	r3, [r2, #0]
 8007816:	e0a3      	b.n	8007960 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8007826:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007828:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01b      	beq.n	8007868 <USB_DeactivateEndpoint+0x2d4>
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	b29b      	uxth	r3, r3
 800783e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007846:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	441a      	add	r2, r3
 8007852:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800785c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007864:	b29b      	uxth	r3, r3
 8007866:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	4413      	add	r3, r2
 8007872:	881b      	ldrh	r3, [r3, #0]
 8007874:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8007876:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01b      	beq.n	80078b8 <USB_DeactivateEndpoint+0x324>
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	4413      	add	r3, r2
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	b29b      	uxth	r3, r3
 800788e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007896:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	441a      	add	r2, r3
 80078a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80078a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	441a      	add	r2, r3
 80078da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007906:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	441a      	add	r2, r3
 8007912:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800791c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007924:	b29b      	uxth	r3, r3
 8007926:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	b29b      	uxth	r3, r3
 8007936:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800793a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800793e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	441a      	add	r2, r3
 800794a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800794c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007950:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800795c:	b29b      	uxth	r3, r3
 800795e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3734      	adds	r7, #52	@ 0x34
 8007966:	46bd      	mov	sp, r7
 8007968:	bc80      	pop	{r7}
 800796a:	4770      	bx	lr

0800796c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b0c2      	sub	sp, #264	@ 0x108
 8007970:	af00      	add	r7, sp, #0
 8007972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800797a:	6018      	str	r0, [r3, #0]
 800797c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007984:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	2b01      	cmp	r3, #1
 8007994:	f040 86b7 	bne.w	8008706 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	699a      	ldr	r2, [r3, #24]
 80079a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d908      	bls.n	80079c6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80079b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80079c4:	e007      	b.n	80079d6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80079c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80079d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	7b1b      	ldrb	r3, [r3, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d13a      	bne.n	8007a5c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80079e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6959      	ldr	r1, [r3, #20]
 80079f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	88da      	ldrh	r2, [r3, #6]
 80079fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a0c:	6800      	ldr	r0, [r0, #0]
 8007a0e:	f001 fc9c 	bl	800934a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	461a      	mov	r2, r3
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	4413      	add	r3, r2
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	011a      	lsls	r2, r3, #4
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	4413      	add	r3, r2
 8007a48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	801a      	strh	r2, [r3, #0]
 8007a58:	f000 be1f 	b.w	800869a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	78db      	ldrb	r3, [r3, #3]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	f040 8462 	bne.w	8008332 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6a1a      	ldr	r2, [r3, #32]
 8007a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	f240 83df 	bls.w	800824a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ab2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	441a      	add	r2, r3
 8007ad0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007adc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6a1a      	ldr	r2, [r3, #32]
 8007af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af8:	1ad2      	subs	r2, r2, r3
 8007afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 81c7 	beq.w	8007ebc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	785b      	ldrb	r3, [r3, #1]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d177      	bne.n	8007c3a <USB_EPStartXfer+0x2ce>
 8007b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	461a      	mov	r2, r3
 8007b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6a:	4413      	add	r3, r2
 8007b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	011a      	lsls	r2, r3, #4
 8007b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7e:	4413      	add	r3, r2
 8007b80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	801a      	strh	r2, [r3, #0]
 8007b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b9c:	d921      	bls.n	8007be2 <USB_EPStartXfer+0x276>
 8007b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bac:	f003 031f 	and.w	r3, r3, #31
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <USB_EPStartXfer+0x252>
 8007bb4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	029b      	lsls	r3, r3, #10
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bde:	801a      	strh	r2, [r3, #0]
 8007be0:	e050      	b.n	8007c84 <USB_EPStartXfer+0x318>
 8007be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <USB_EPStartXfer+0x294>
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	801a      	strh	r2, [r3, #0]
 8007bfe:	e041      	b.n	8007c84 <USB_EPStartXfer+0x318>
 8007c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c04:	085b      	lsrs	r3, r3, #1
 8007c06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d004      	beq.n	8007c20 <USB_EPStartXfer+0x2b4>
 8007c16:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	029b      	lsls	r3, r3, #10
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	4313      	orrs	r3, r2
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c36:	801a      	strh	r2, [r3, #0]
 8007c38:	e024      	b.n	8007c84 <USB_EPStartXfer+0x318>
 8007c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	785b      	ldrb	r3, [r3, #1]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d11c      	bne.n	8007c84 <USB_EPStartXfer+0x318>
 8007c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5e:	4413      	add	r3, r2
 8007c60:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	011a      	lsls	r2, r3, #4
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	4413      	add	r3, r2
 8007c74:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c82:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	895b      	ldrh	r3, [r3, #10]
 8007c90:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6959      	ldr	r1, [r3, #20]
 8007ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007caa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007cae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007cb2:	6800      	ldr	r0, [r0, #0]
 8007cb4:	f001 fb49 	bl	800934a <USB_WritePMA>
            ep->xfer_buff += len;
 8007cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	695a      	ldr	r2, [r3, #20]
 8007cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc8:	441a      	add	r2, r3
 8007cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6a1a      	ldr	r2, [r3, #32]
 8007ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d90f      	bls.n	8007d12 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6a1a      	ldr	r2, [r3, #32]
 8007cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d02:	1ad2      	subs	r2, r2, r3
 8007d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	621a      	str	r2, [r3, #32]
 8007d10:	e00e      	b.n	8007d30 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	785b      	ldrb	r3, [r3, #1]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d177      	bne.n	8007e30 <USB_EPStartXfer+0x4c4>
 8007d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	61bb      	str	r3, [r7, #24]
 8007d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	4413      	add	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
 8007d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	011a      	lsls	r2, r3, #4
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	4413      	add	r3, r2
 8007d76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d7a:	617b      	str	r3, [r7, #20]
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	801a      	strh	r2, [r3, #0]
 8007d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d90:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d92:	d921      	bls.n	8007dd8 <USB_EPStartXfer+0x46c>
 8007d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d98:	095b      	lsrs	r3, r3, #5
 8007d9a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da2:	f003 031f 	and.w	r3, r3, #31
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d104      	bne.n	8007db4 <USB_EPStartXfer+0x448>
 8007daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dae:	3b01      	subs	r3, #1
 8007db0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	029b      	lsls	r3, r3, #10
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	801a      	strh	r2, [r3, #0]
 8007dd6:	e056      	b.n	8007e86 <USB_EPStartXfer+0x51a>
 8007dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10a      	bne.n	8007df6 <USB_EPStartXfer+0x48a>
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	801a      	strh	r2, [r3, #0]
 8007df4:	e047      	b.n	8007e86 <USB_EPStartXfer+0x51a>
 8007df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dfa:	085b      	lsrs	r3, r3, #1
 8007dfc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d004      	beq.n	8007e16 <USB_EPStartXfer+0x4aa>
 8007e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e10:	3301      	adds	r3, #1
 8007e12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	029b      	lsls	r3, r3, #10
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	4313      	orrs	r3, r2
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	801a      	strh	r2, [r3, #0]
 8007e2e:	e02a      	b.n	8007e86 <USB_EPStartXfer+0x51a>
 8007e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	785b      	ldrb	r3, [r3, #1]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d122      	bne.n	8007e86 <USB_EPStartXfer+0x51a>
 8007e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	623b      	str	r3, [r7, #32]
 8007e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	4413      	add	r3, r2
 8007e62:	623b      	str	r3, [r7, #32]
 8007e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	011a      	lsls	r2, r3, #4
 8007e72:	6a3b      	ldr	r3, [r7, #32]
 8007e74:	4413      	add	r3, r2
 8007e76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e7a:	61fb      	str	r3, [r7, #28]
 8007e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	891b      	ldrh	r3, [r3, #8]
 8007e92:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6959      	ldr	r1, [r3, #20]
 8007ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007eac:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007eb0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007eb4:	6800      	ldr	r0, [r0, #0]
 8007eb6:	f001 fa48 	bl	800934a <USB_WritePMA>
 8007eba:	e3ee      	b.n	800869a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	785b      	ldrb	r3, [r3, #1]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d177      	bne.n	8007fbc <USB_EPStartXfer+0x650>
 8007ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007edc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	461a      	mov	r2, r3
 8007eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eec:	4413      	add	r3, r2
 8007eee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	011a      	lsls	r2, r3, #4
 8007efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f00:	4413      	add	r3, r2
 8007f02:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007f06:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f16:	801a      	strh	r2, [r3, #0]
 8007f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f1e:	d921      	bls.n	8007f64 <USB_EPStartXfer+0x5f8>
 8007f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f24:	095b      	lsrs	r3, r3, #5
 8007f26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d104      	bne.n	8007f40 <USB_EPStartXfer+0x5d4>
 8007f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	029b      	lsls	r3, r3, #10
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	4313      	orrs	r3, r2
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f60:	801a      	strh	r2, [r3, #0]
 8007f62:	e056      	b.n	8008012 <USB_EPStartXfer+0x6a6>
 8007f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <USB_EPStartXfer+0x616>
 8007f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f7e:	801a      	strh	r2, [r3, #0]
 8007f80:	e047      	b.n	8008012 <USB_EPStartXfer+0x6a6>
 8007f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f86:	085b      	lsrs	r3, r3, #1
 8007f88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d004      	beq.n	8007fa2 <USB_EPStartXfer+0x636>
 8007f98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	029b      	lsls	r3, r3, #10
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fb8:	801a      	strh	r2, [r3, #0]
 8007fba:	e02a      	b.n	8008012 <USB_EPStartXfer+0x6a6>
 8007fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	785b      	ldrb	r3, [r3, #1]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d122      	bne.n	8008012 <USB_EPStartXfer+0x6a6>
 8007fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fec:	4413      	add	r3, r2
 8007fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	011a      	lsls	r2, r3, #4
 8007ffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008000:	4413      	add	r3, r2
 8008002:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800c:	b29a      	uxth	r2, r3
 800800e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008010:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	891b      	ldrh	r3, [r3, #8]
 800801e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6959      	ldr	r1, [r3, #20]
 800802e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008032:	b29b      	uxth	r3, r3
 8008034:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008038:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800803c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008040:	6800      	ldr	r0, [r0, #0]
 8008042:	f001 f982 	bl	800934a <USB_WritePMA>
            ep->xfer_buff += len;
 8008046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	695a      	ldr	r2, [r3, #20]
 8008052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008056:	441a      	add	r2, r3
 8008058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008068:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6a1a      	ldr	r2, [r3, #32]
 8008070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	429a      	cmp	r2, r3
 800807e:	d90f      	bls.n	80080a0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6a1a      	ldr	r2, [r3, #32]
 800808c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008090:	1ad2      	subs	r2, r2, r3
 8008092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	621a      	str	r2, [r3, #32]
 800809e:	e00e      	b.n	80080be <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80080a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80080b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2200      	movs	r2, #0
 80080bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80080ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d177      	bne.n	80081ca <USB_EPStartXfer+0x85e>
 80080da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	461a      	mov	r2, r3
 80080f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fa:	4413      	add	r3, r2
 80080fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	011a      	lsls	r2, r3, #4
 800810c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800810e:	4413      	add	r3, r2
 8008110:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008114:	637b      	str	r3, [r7, #52]	@ 0x34
 8008116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	b29b      	uxth	r3, r3
 800811c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008120:	b29a      	uxth	r2, r3
 8008122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008124:	801a      	strh	r2, [r3, #0]
 8008126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800812a:	2b3e      	cmp	r3, #62	@ 0x3e
 800812c:	d921      	bls.n	8008172 <USB_EPStartXfer+0x806>
 800812e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800813c:	f003 031f 	and.w	r3, r3, #31
 8008140:	2b00      	cmp	r3, #0
 8008142:	d104      	bne.n	800814e <USB_EPStartXfer+0x7e2>
 8008144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008148:	3b01      	subs	r3, #1
 800814a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800814e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29a      	uxth	r2, r3
 8008154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008158:	b29b      	uxth	r3, r3
 800815a:	029b      	lsls	r3, r3, #10
 800815c:	b29b      	uxth	r3, r3
 800815e:	4313      	orrs	r3, r2
 8008160:	b29b      	uxth	r3, r3
 8008162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800816a:	b29a      	uxth	r2, r3
 800816c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816e:	801a      	strh	r2, [r3, #0]
 8008170:	e050      	b.n	8008214 <USB_EPStartXfer+0x8a8>
 8008172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10a      	bne.n	8008190 <USB_EPStartXfer+0x824>
 800817a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008188:	b29a      	uxth	r2, r3
 800818a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800818c:	801a      	strh	r2, [r3, #0]
 800818e:	e041      	b.n	8008214 <USB_EPStartXfer+0x8a8>
 8008190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008194:	085b      	lsrs	r3, r3, #1
 8008196:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800819a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d004      	beq.n	80081b0 <USB_EPStartXfer+0x844>
 80081a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081aa:	3301      	adds	r3, #1
 80081ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80081b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	029b      	lsls	r3, r3, #10
 80081be:	b29b      	uxth	r3, r3
 80081c0:	4313      	orrs	r3, r2
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c6:	801a      	strh	r2, [r3, #0]
 80081c8:	e024      	b.n	8008214 <USB_EPStartXfer+0x8a8>
 80081ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d11c      	bne.n	8008214 <USB_EPStartXfer+0x8a8>
 80081da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	461a      	mov	r2, r3
 80081ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081ee:	4413      	add	r3, r2
 80081f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80081f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	011a      	lsls	r2, r3, #4
 8008200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008202:	4413      	add	r3, r2
 8008204:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008208:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800820a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800820e:	b29a      	uxth	r2, r3
 8008210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008212:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	895b      	ldrh	r3, [r3, #10]
 8008220:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6959      	ldr	r1, [r3, #20]
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008234:	b29b      	uxth	r3, r3
 8008236:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800823a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800823e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008242:	6800      	ldr	r0, [r0, #0]
 8008244:	f001 f881 	bl	800934a <USB_WritePMA>
 8008248:	e227      	b.n	800869a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800824a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800825a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800825e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800827c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008280:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008288:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	441a      	add	r2, r3
 800829e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80082a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80082a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80082aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80082b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	461a      	mov	r2, r3
 80082d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082d6:	4413      	add	r3, r2
 80082d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	011a      	lsls	r2, r3, #4
 80082e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082ea:	4413      	add	r3, r2
 80082ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80082fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	891b      	ldrh	r3, [r3, #8]
 8008308:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800830c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6959      	ldr	r1, [r3, #20]
 8008318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800831c:	b29b      	uxth	r3, r3
 800831e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008322:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008326:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800832a:	6800      	ldr	r0, [r0, #0]
 800832c:	f001 f80d 	bl	800934a <USB_WritePMA>
 8008330:	e1b3      	b.n	800869a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6a1a      	ldr	r2, [r3, #32]
 800833e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800835e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	b29b      	uxth	r3, r3
 800836e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 80c6 	beq.w	8008504 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	673b      	str	r3, [r7, #112]	@ 0x70
 8008384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	785b      	ldrb	r3, [r3, #1]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d177      	bne.n	8008484 <USB_EPStartXfer+0xb18>
 8008394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	461a      	mov	r2, r3
 80083b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083b4:	4413      	add	r3, r2
 80083b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	011a      	lsls	r2, r3, #4
 80083c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083c8:	4413      	add	r3, r2
 80083ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80083ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80083d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083da:	b29a      	uxth	r2, r3
 80083dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083de:	801a      	strh	r2, [r3, #0]
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80083e6:	d921      	bls.n	800842c <USB_EPStartXfer+0xac0>
 80083e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ec:	095b      	lsrs	r3, r3, #5
 80083ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80083f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083f6:	f003 031f 	and.w	r3, r3, #31
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d104      	bne.n	8008408 <USB_EPStartXfer+0xa9c>
 80083fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008402:	3b01      	subs	r3, #1
 8008404:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	b29a      	uxth	r2, r3
 800840e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008412:	b29b      	uxth	r3, r3
 8008414:	029b      	lsls	r3, r3, #10
 8008416:	b29b      	uxth	r3, r3
 8008418:	4313      	orrs	r3, r2
 800841a:	b29b      	uxth	r3, r3
 800841c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008424:	b29a      	uxth	r2, r3
 8008426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008428:	801a      	strh	r2, [r3, #0]
 800842a:	e050      	b.n	80084ce <USB_EPStartXfer+0xb62>
 800842c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10a      	bne.n	800844a <USB_EPStartXfer+0xade>
 8008434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800843e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008442:	b29a      	uxth	r2, r3
 8008444:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008446:	801a      	strh	r2, [r3, #0]
 8008448:	e041      	b.n	80084ce <USB_EPStartXfer+0xb62>
 800844a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800844e:	085b      	lsrs	r3, r3, #1
 8008450:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d004      	beq.n	800846a <USB_EPStartXfer+0xafe>
 8008460:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008464:	3301      	adds	r3, #1
 8008466:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800846a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	b29a      	uxth	r2, r3
 8008470:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8008474:	b29b      	uxth	r3, r3
 8008476:	029b      	lsls	r3, r3, #10
 8008478:	b29b      	uxth	r3, r3
 800847a:	4313      	orrs	r3, r2
 800847c:	b29a      	uxth	r2, r3
 800847e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008480:	801a      	strh	r2, [r3, #0]
 8008482:	e024      	b.n	80084ce <USB_EPStartXfer+0xb62>
 8008484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	785b      	ldrb	r3, [r3, #1]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d11c      	bne.n	80084ce <USB_EPStartXfer+0xb62>
 8008494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008498:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	461a      	mov	r2, r3
 80084a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084a8:	4413      	add	r3, r2
 80084aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80084ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	011a      	lsls	r2, r3, #4
 80084ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084bc:	4413      	add	r3, r2
 80084be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80084c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80084ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	895b      	ldrh	r3, [r3, #10]
 80084da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6959      	ldr	r1, [r3, #20]
 80084ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80084f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80084f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80084fc:	6800      	ldr	r0, [r0, #0]
 80084fe:	f000 ff24 	bl	800934a <USB_WritePMA>
 8008502:	e0ca      	b.n	800869a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	785b      	ldrb	r3, [r3, #1]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d177      	bne.n	8008604 <USB_EPStartXfer+0xc98>
 8008514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008524:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800852e:	b29b      	uxth	r3, r3
 8008530:	461a      	mov	r2, r3
 8008532:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008534:	4413      	add	r3, r2
 8008536:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800853c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	011a      	lsls	r2, r3, #4
 8008546:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008548:	4413      	add	r3, r2
 800854a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800854e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008552:	881b      	ldrh	r3, [r3, #0]
 8008554:	b29b      	uxth	r3, r3
 8008556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800855a:	b29a      	uxth	r2, r3
 800855c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800855e:	801a      	strh	r2, [r3, #0]
 8008560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008564:	2b3e      	cmp	r3, #62	@ 0x3e
 8008566:	d921      	bls.n	80085ac <USB_EPStartXfer+0xc40>
 8008568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800856c:	095b      	lsrs	r3, r3, #5
 800856e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008576:	f003 031f 	and.w	r3, r3, #31
 800857a:	2b00      	cmp	r3, #0
 800857c:	d104      	bne.n	8008588 <USB_EPStartXfer+0xc1c>
 800857e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008582:	3b01      	subs	r3, #1
 8008584:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008588:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	b29a      	uxth	r2, r3
 800858e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8008592:	b29b      	uxth	r3, r3
 8008594:	029b      	lsls	r3, r3, #10
 8008596:	b29b      	uxth	r3, r3
 8008598:	4313      	orrs	r3, r2
 800859a:	b29b      	uxth	r3, r3
 800859c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	e05c      	b.n	8008666 <USB_EPStartXfer+0xcfa>
 80085ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10a      	bne.n	80085ca <USB_EPStartXfer+0xc5e>
 80085b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085c6:	801a      	strh	r2, [r3, #0]
 80085c8:	e04d      	b.n	8008666 <USB_EPStartXfer+0xcfa>
 80085ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085ce:	085b      	lsrs	r3, r3, #1
 80085d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80085d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <USB_EPStartXfer+0xc7e>
 80085e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80085e4:	3301      	adds	r3, #1
 80085e6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80085ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	029b      	lsls	r3, r3, #10
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	4313      	orrs	r3, r2
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008600:	801a      	strh	r2, [r3, #0]
 8008602:	e030      	b.n	8008666 <USB_EPStartXfer+0xcfa>
 8008604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	785b      	ldrb	r3, [r3, #1]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d128      	bne.n	8008666 <USB_EPStartXfer+0xcfa>
 8008614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008618:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008630:	b29b      	uxth	r3, r3
 8008632:	461a      	mov	r2, r3
 8008634:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008638:	4413      	add	r3, r2
 800863a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800863e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	011a      	lsls	r2, r3, #4
 800864c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008650:	4413      	add	r3, r2
 8008652:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008656:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800865a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865e:	b29a      	uxth	r2, r3
 8008660:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008664:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800866a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	891b      	ldrh	r3, [r3, #8]
 8008672:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800867a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6959      	ldr	r1, [r3, #20]
 8008682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008686:	b29b      	uxth	r3, r3
 8008688:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800868c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008690:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008694:	6800      	ldr	r0, [r0, #0]
 8008696:	f000 fe58 	bl	800934a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800869a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086c0:	817b      	strh	r3, [r7, #10]
 80086c2:	897b      	ldrh	r3, [r7, #10]
 80086c4:	f083 0310 	eor.w	r3, r3, #16
 80086c8:	817b      	strh	r3, [r7, #10]
 80086ca:	897b      	ldrh	r3, [r7, #10]
 80086cc:	f083 0320 	eor.w	r3, r3, #32
 80086d0:	817b      	strh	r3, [r7, #10]
 80086d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	441a      	add	r2, r3
 80086ec:	897b      	ldrh	r3, [r7, #10]
 80086ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086fe:	b29b      	uxth	r3, r3
 8008700:	8013      	strh	r3, [r2, #0]
 8008702:	f000 bcde 	b.w	80090c2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800870a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	7b1b      	ldrb	r3, [r3, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	f040 80bb 	bne.w	800888e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800871c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	699a      	ldr	r2, [r3, #24]
 8008724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	429a      	cmp	r2, r3
 8008732:	d917      	bls.n	8008764 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8008744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699a      	ldr	r2, [r3, #24]
 8008750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008754:	1ad2      	subs	r2, r2, r3
 8008756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	619a      	str	r2, [r3, #24]
 8008762:	e00e      	b.n	8008782 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8008774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2200      	movs	r2, #0
 8008780:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008786:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008794:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800879e:	b29b      	uxth	r3, r3
 80087a0:	461a      	mov	r2, r3
 80087a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80087a6:	4413      	add	r3, r2
 80087a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	011a      	lsls	r2, r3, #4
 80087ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80087be:	4413      	add	r3, r2
 80087c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80087c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80087c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087da:	801a      	strh	r2, [r3, #0]
 80087dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80087e2:	d924      	bls.n	800882e <USB_EPStartXfer+0xec2>
 80087e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087e8:	095b      	lsrs	r3, r3, #5
 80087ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087f2:	f003 031f 	and.w	r3, r3, #31
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d104      	bne.n	8008804 <USB_EPStartXfer+0xe98>
 80087fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80087fe:	3b01      	subs	r3, #1
 8008800:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008804:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29a      	uxth	r2, r3
 800880c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008810:	b29b      	uxth	r3, r3
 8008812:	029b      	lsls	r3, r3, #10
 8008814:	b29b      	uxth	r3, r3
 8008816:	4313      	orrs	r3, r2
 8008818:	b29b      	uxth	r3, r3
 800881a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800881e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008822:	b29a      	uxth	r2, r3
 8008824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008828:	801a      	strh	r2, [r3, #0]
 800882a:	f000 bc10 	b.w	800904e <USB_EPStartXfer+0x16e2>
 800882e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10c      	bne.n	8008850 <USB_EPStartXfer+0xee4>
 8008836:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29b      	uxth	r3, r3
 800883e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008846:	b29a      	uxth	r2, r3
 8008848:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800884c:	801a      	strh	r2, [r3, #0]
 800884e:	e3fe      	b.n	800904e <USB_EPStartXfer+0x16e2>
 8008850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008854:	085b      	lsrs	r3, r3, #1
 8008856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800885a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d004      	beq.n	8008870 <USB_EPStartXfer+0xf04>
 8008866:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800886a:	3301      	adds	r3, #1
 800886c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008870:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	b29a      	uxth	r2, r3
 8008878:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800887c:	b29b      	uxth	r3, r3
 800887e:	029b      	lsls	r3, r3, #10
 8008880:	b29b      	uxth	r3, r3
 8008882:	4313      	orrs	r3, r2
 8008884:	b29a      	uxth	r2, r3
 8008886:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800888a:	801a      	strh	r2, [r3, #0]
 800888c:	e3df      	b.n	800904e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800888e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	78db      	ldrb	r3, [r3, #3]
 800889a:	2b02      	cmp	r3, #2
 800889c:	f040 8218 	bne.w	8008cd0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80088a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f040 809d 	bne.w	80089ec <USB_EPStartXfer+0x1080>
 80088b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	461a      	mov	r2, r3
 80088d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088d6:	4413      	add	r3, r2
 80088d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	011a      	lsls	r2, r3, #4
 80088ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088ee:	4413      	add	r3, r2
 80088f0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80088f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80088f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008904:	b29a      	uxth	r2, r3
 8008906:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800890a:	801a      	strh	r2, [r3, #0]
 800890c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	2b3e      	cmp	r3, #62	@ 0x3e
 800891a:	d92b      	bls.n	8008974 <USB_EPStartXfer+0x1008>
 800891c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	095b      	lsrs	r3, r3, #5
 800892a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800892e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	f003 031f 	and.w	r3, r3, #31
 800893e:	2b00      	cmp	r3, #0
 8008940:	d104      	bne.n	800894c <USB_EPStartXfer+0xfe0>
 8008942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008946:	3b01      	subs	r3, #1
 8008948:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800894c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	b29a      	uxth	r2, r3
 8008954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008958:	b29b      	uxth	r3, r3
 800895a:	029b      	lsls	r3, r3, #10
 800895c:	b29b      	uxth	r3, r3
 800895e:	4313      	orrs	r3, r2
 8008960:	b29b      	uxth	r3, r3
 8008962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800896a:	b29a      	uxth	r2, r3
 800896c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008970:	801a      	strh	r2, [r3, #0]
 8008972:	e070      	b.n	8008a56 <USB_EPStartXfer+0x10ea>
 8008974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d10c      	bne.n	800899e <USB_EPStartXfer+0x1032>
 8008984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	b29b      	uxth	r3, r3
 800898c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008994:	b29a      	uxth	r2, r3
 8008996:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800899a:	801a      	strh	r2, [r3, #0]
 800899c:	e05b      	b.n	8008a56 <USB_EPStartXfer+0x10ea>
 800899e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	085b      	lsrs	r3, r3, #1
 80089ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d004      	beq.n	80089ce <USB_EPStartXfer+0x1062>
 80089c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c8:	3301      	adds	r3, #1
 80089ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089d2:	881b      	ldrh	r3, [r3, #0]
 80089d4:	b29a      	uxth	r2, r3
 80089d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089da:	b29b      	uxth	r3, r3
 80089dc:	029b      	lsls	r3, r3, #10
 80089de:	b29b      	uxth	r3, r3
 80089e0:	4313      	orrs	r3, r2
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089e8:	801a      	strh	r2, [r3, #0]
 80089ea:	e034      	b.n	8008a56 <USB_EPStartXfer+0x10ea>
 80089ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d12c      	bne.n	8008a56 <USB_EPStartXfer+0x10ea>
 80089fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a20:	4413      	add	r3, r2
 8008a22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	011a      	lsls	r2, r3, #4
 8008a34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a38:	4413      	add	r3, r2
 8008a3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008a54:	801a      	strh	r2, [r3, #0]
 8008a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	785b      	ldrb	r3, [r3, #1]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f040 809d 	bne.w	8008bb0 <USB_EPStartXfer+0x1244>
 8008a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	461a      	mov	r2, r3
 8008a96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	011a      	lsls	r2, r3, #4
 8008aae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ace:	801a      	strh	r2, [r3, #0]
 8008ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ade:	d92b      	bls.n	8008b38 <USB_EPStartXfer+0x11cc>
 8008ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	095b      	lsrs	r3, r3, #5
 8008aee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	f003 031f 	and.w	r3, r3, #31
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d104      	bne.n	8008b10 <USB_EPStartXfer+0x11a4>
 8008b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	029b      	lsls	r3, r3, #10
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	4313      	orrs	r3, r2
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b34:	801a      	strh	r2, [r3, #0]
 8008b36:	e069      	b.n	8008c0c <USB_EPStartXfer+0x12a0>
 8008b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10c      	bne.n	8008b62 <USB_EPStartXfer+0x11f6>
 8008b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b5e:	801a      	strh	r2, [r3, #0]
 8008b60:	e054      	b.n	8008c0c <USB_EPStartXfer+0x12a0>
 8008b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	085b      	lsrs	r3, r3, #1
 8008b70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d004      	beq.n	8008b92 <USB_EPStartXfer+0x1226>
 8008b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	029b      	lsls	r3, r3, #10
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008bac:	801a      	strh	r2, [r3, #0]
 8008bae:	e02d      	b.n	8008c0c <USB_EPStartXfer+0x12a0>
 8008bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	785b      	ldrb	r3, [r3, #1]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d125      	bne.n	8008c0c <USB_EPStartXfer+0x12a0>
 8008bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	011a      	lsls	r2, r3, #4
 8008bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008bee:	4413      	add	r3, r2
 8008bf0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c0a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	f000 8218 	beq.w	800904e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d005      	beq.n	8008c56 <USB_EPStartXfer+0x12ea>
 8008c4a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10d      	bne.n	8008c72 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f040 81f5 	bne.w	800904e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c64:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f040 81ee 	bne.w	800904e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c98:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ca0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	441a      	add	r2, r3
 8008cb6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cc6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	8013      	strh	r3, [r2, #0]
 8008cce:	e1be      	b.n	800904e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	78db      	ldrb	r3, [r3, #3]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	f040 81b4 	bne.w	800904a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	699a      	ldr	r2, [r3, #24]
 8008cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d917      	bls.n	8008d2e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	699a      	ldr	r2, [r3, #24]
 8008d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d1e:	1ad2      	subs	r2, r2, r3
 8008d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	619a      	str	r2, [r3, #24]
 8008d2c:	e00e      	b.n	8008d4c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	785b      	ldrb	r3, [r3, #1]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f040 8085 	bne.w	8008e68 <USB_EPStartXfer+0x14fc>
 8008d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d82:	4413      	add	r3, r2
 8008d84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	011a      	lsls	r2, r3, #4
 8008d96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008da0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008da4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008db6:	801a      	strh	r2, [r3, #0]
 8008db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8008dbe:	d923      	bls.n	8008e08 <USB_EPStartXfer+0x149c>
 8008dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dc4:	095b      	lsrs	r3, r3, #5
 8008dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dce:	f003 031f 	and.w	r3, r3, #31
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d104      	bne.n	8008de0 <USB_EPStartXfer+0x1474>
 8008dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008de0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	029b      	lsls	r3, r3, #10
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	4313      	orrs	r3, r2
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e04:	801a      	strh	r2, [r3, #0]
 8008e06:	e060      	b.n	8008eca <USB_EPStartXfer+0x155e>
 8008e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10c      	bne.n	8008e2a <USB_EPStartXfer+0x14be>
 8008e10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e26:	801a      	strh	r2, [r3, #0]
 8008e28:	e04f      	b.n	8008eca <USB_EPStartXfer+0x155e>
 8008e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e2e:	085b      	lsrs	r3, r3, #1
 8008e30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d004      	beq.n	8008e4a <USB_EPStartXfer+0x14de>
 8008e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e44:	3301      	adds	r3, #1
 8008e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	029b      	lsls	r3, r3, #10
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e64:	801a      	strh	r2, [r3, #0]
 8008e66:	e030      	b.n	8008eca <USB_EPStartXfer+0x155e>
 8008e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	785b      	ldrb	r3, [r3, #1]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d128      	bne.n	8008eca <USB_EPStartXfer+0x155e>
 8008e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	461a      	mov	r2, r3
 8008e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	011a      	lsls	r2, r3, #4
 8008eb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008eba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008ec8:	801a      	strh	r2, [r3, #0]
 8008eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	785b      	ldrb	r3, [r3, #1]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f040 8085 	bne.w	8008ff4 <USB_EPStartXfer+0x1688>
 8008eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008efc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008f0e:	4413      	add	r3, r2
 8008f10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	011a      	lsls	r2, r3, #4
 8008f22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008f26:	4413      	add	r3, r2
 8008f28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f42:	801a      	strh	r2, [r3, #0]
 8008f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f48:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f4a:	d923      	bls.n	8008f94 <USB_EPStartXfer+0x1628>
 8008f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f50:	095b      	lsrs	r3, r3, #5
 8008f52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5a:	f003 031f 	and.w	r3, r3, #31
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d104      	bne.n	8008f6c <USB_EPStartXfer+0x1600>
 8008f62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f66:	3b01      	subs	r3, #1
 8008f68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	029b      	lsls	r3, r3, #10
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f90:	801a      	strh	r2, [r3, #0]
 8008f92:	e05c      	b.n	800904e <USB_EPStartXfer+0x16e2>
 8008f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10c      	bne.n	8008fb6 <USB_EPStartXfer+0x164a>
 8008f9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fa0:	881b      	ldrh	r3, [r3, #0]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fb2:	801a      	strh	r2, [r3, #0]
 8008fb4:	e04b      	b.n	800904e <USB_EPStartXfer+0x16e2>
 8008fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fba:	085b      	lsrs	r3, r3, #1
 8008fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d004      	beq.n	8008fd6 <USB_EPStartXfer+0x166a>
 8008fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008fd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fda:	881b      	ldrh	r3, [r3, #0]
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	029b      	lsls	r3, r3, #10
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	e02c      	b.n	800904e <USB_EPStartXfer+0x16e2>
 8008ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d124      	bne.n	800904e <USB_EPStartXfer+0x16e2>
 8009004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009008:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009012:	b29b      	uxth	r3, r3
 8009014:	461a      	mov	r2, r3
 8009016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800901a:	4413      	add	r3, r2
 800901c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	011a      	lsls	r2, r3, #4
 800902e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009032:	4413      	add	r3, r2
 8009034:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009038:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800903c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009040:	b29a      	uxth	r2, r3
 8009042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009046:	801a      	strh	r2, [r3, #0]
 8009048:	e001      	b.n	800904e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e03a      	b.n	80090c4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800904e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800905c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	b29b      	uxth	r3, r3
 800906c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009074:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009078:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800907c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009080:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009084:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009088:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800908c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800909e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	441a      	add	r2, r3
 80090aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80090ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090be:	b29b      	uxth	r3, r3
 80090c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b085      	sub	sp, #20
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
 80090d6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	785b      	ldrb	r3, [r3, #1]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d020      	beq.n	8009122 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090f6:	81bb      	strh	r3, [r7, #12]
 80090f8:	89bb      	ldrh	r3, [r7, #12]
 80090fa:	f083 0310 	eor.w	r3, r3, #16
 80090fe:	81bb      	strh	r3, [r7, #12]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	441a      	add	r2, r3
 800910a:	89bb      	ldrh	r3, [r7, #12]
 800910c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009110:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009114:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800911c:	b29b      	uxth	r3, r3
 800911e:	8013      	strh	r3, [r2, #0]
 8009120:	e01f      	b.n	8009162 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	4413      	add	r3, r2
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	b29b      	uxth	r3, r3
 8009130:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009138:	81fb      	strh	r3, [r7, #14]
 800913a:	89fb      	ldrh	r3, [r7, #14]
 800913c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009140:	81fb      	strh	r3, [r7, #14]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	441a      	add	r2, r3
 800914c:	89fb      	ldrh	r3, [r7, #14]
 800914e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009152:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800915a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800915e:	b29b      	uxth	r3, r3
 8009160:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	bc80      	pop	{r7}
 800916c:	4770      	bx	lr

0800916e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800916e:	b480      	push	{r7}
 8009170:	b087      	sub	sp, #28
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	7b1b      	ldrb	r3, [r3, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	f040 809d 	bne.w	80092bc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	785b      	ldrb	r3, [r3, #1]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d04c      	beq.n	8009224 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	881b      	ldrh	r3, [r3, #0]
 8009196:	823b      	strh	r3, [r7, #16]
 8009198:	8a3b      	ldrh	r3, [r7, #16]
 800919a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d01b      	beq.n	80091da <USB_EPClearStall+0x6c>
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091b8:	81fb      	strh	r3, [r7, #14]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	441a      	add	r2, r3
 80091c4:	89fb      	ldrh	r3, [r7, #14]
 80091c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	78db      	ldrb	r3, [r3, #3]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d06c      	beq.n	80092bc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091f8:	81bb      	strh	r3, [r7, #12]
 80091fa:	89bb      	ldrh	r3, [r7, #12]
 80091fc:	f083 0320 	eor.w	r3, r3, #32
 8009200:	81bb      	strh	r3, [r7, #12]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	441a      	add	r2, r3
 800920c:	89bb      	ldrh	r3, [r7, #12]
 800920e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009212:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800921a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800921e:	b29b      	uxth	r3, r3
 8009220:	8013      	strh	r3, [r2, #0]
 8009222:	e04b      	b.n	80092bc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	82fb      	strh	r3, [r7, #22]
 8009232:	8afb      	ldrh	r3, [r7, #22]
 8009234:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01b      	beq.n	8009274 <USB_EPClearStall+0x106>
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	b29b      	uxth	r3, r3
 800924a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800924e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009252:	82bb      	strh	r3, [r7, #20]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	441a      	add	r2, r3
 800925e:	8abb      	ldrh	r3, [r7, #20]
 8009260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009268:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800926c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009270:	b29b      	uxth	r3, r3
 8009272:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	881b      	ldrh	r3, [r3, #0]
 8009280:	b29b      	uxth	r3, r3
 8009282:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800928a:	827b      	strh	r3, [r7, #18]
 800928c:	8a7b      	ldrh	r3, [r7, #18]
 800928e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009292:	827b      	strh	r3, [r7, #18]
 8009294:	8a7b      	ldrh	r3, [r7, #18]
 8009296:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800929a:	827b      	strh	r3, [r7, #18]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	441a      	add	r2, r3
 80092a6:	8a7b      	ldrh	r3, [r7, #18]
 80092a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc80      	pop	{r7}
 80092c6:	4770      	bx	lr

080092c8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80092d4:	78fb      	ldrb	r3, [r7, #3]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d103      	bne.n	80092e2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2280      	movs	r2, #128	@ 0x80
 80092de:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bc80      	pop	{r7}
 80092ec:	4770      	bx	lr

080092ee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bc80      	pop	{r7}
 8009300:	4770      	bx	lr

08009302 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	4770      	bx	lr

08009316 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009316:	b480      	push	{r7}
 8009318:	b085      	sub	sp, #20
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009324:	b29b      	uxth	r3, r3
 8009326:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009328:	68fb      	ldr	r3, [r7, #12]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr

08009334 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	bc80      	pop	{r7}
 8009348:	4770      	bx	lr

0800934a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800934a:	b480      	push	{r7}
 800934c:	b08b      	sub	sp, #44	@ 0x2c
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	4611      	mov	r1, r2
 8009356:	461a      	mov	r2, r3
 8009358:	460b      	mov	r3, r1
 800935a:	80fb      	strh	r3, [r7, #6]
 800935c:	4613      	mov	r3, r2
 800935e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009360:	88bb      	ldrh	r3, [r7, #4]
 8009362:	3301      	adds	r3, #1
 8009364:	085b      	lsrs	r3, r3, #1
 8009366:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009370:	88fb      	ldrh	r3, [r7, #6]
 8009372:	005a      	lsls	r2, r3, #1
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800937c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	627b      	str	r3, [r7, #36]	@ 0x24
 8009382:	e01e      	b.n	80093c2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	3301      	adds	r3, #1
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	021b      	lsls	r3, r3, #8
 8009392:	b21a      	sxth	r2, r3
 8009394:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009398:	4313      	orrs	r3, r2
 800939a:	b21b      	sxth	r3, r3
 800939c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800939e:	6a3b      	ldr	r3, [r7, #32]
 80093a0:	8a7a      	ldrh	r2, [r7, #18]
 80093a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80093a4:	6a3b      	ldr	r3, [r7, #32]
 80093a6:	3302      	adds	r3, #2
 80093a8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	3302      	adds	r3, #2
 80093ae:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	3301      	adds	r3, #1
 80093b4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	3301      	adds	r3, #1
 80093ba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80093bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093be:	3b01      	subs	r3, #1
 80093c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80093c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1dd      	bne.n	8009384 <USB_WritePMA+0x3a>
  }
}
 80093c8:	bf00      	nop
 80093ca:	bf00      	nop
 80093cc:	372c      	adds	r7, #44	@ 0x2c
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bc80      	pop	{r7}
 80093d2:	4770      	bx	lr

080093d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b08b      	sub	sp, #44	@ 0x2c
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	4611      	mov	r1, r2
 80093e0:	461a      	mov	r2, r3
 80093e2:	460b      	mov	r3, r1
 80093e4:	80fb      	strh	r3, [r7, #6]
 80093e6:	4613      	mov	r3, r2
 80093e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80093ea:	88bb      	ldrh	r3, [r7, #4]
 80093ec:	085b      	lsrs	r3, r3, #1
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80093fa:	88fb      	ldrh	r3, [r7, #6]
 80093fc:	005a      	lsls	r2, r3, #1
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009406:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	627b      	str	r3, [r7, #36]	@ 0x24
 800940c:	e01b      	b.n	8009446 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	881b      	ldrh	r3, [r3, #0]
 8009412:	b29b      	uxth	r3, r3
 8009414:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	3302      	adds	r3, #2
 800941a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	b2da      	uxtb	r2, r3
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	3301      	adds	r3, #1
 8009428:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	0a1b      	lsrs	r3, r3, #8
 800942e:	b2da      	uxtb	r2, r3
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	3301      	adds	r3, #1
 8009438:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	3302      	adds	r3, #2
 800943e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009442:	3b01      	subs	r3, #1
 8009444:	627b      	str	r3, [r7, #36]	@ 0x24
 8009446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e0      	bne.n	800940e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800944c:	88bb      	ldrh	r3, [r7, #4]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	b29b      	uxth	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	d007      	beq.n	8009468 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	b29b      	uxth	r3, r3
 800945e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	b2da      	uxtb	r2, r3
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	701a      	strb	r2, [r3, #0]
  }
}
 8009468:	bf00      	nop
 800946a:	372c      	adds	r7, #44	@ 0x2c
 800946c:	46bd      	mov	sp, r7
 800946e:	bc80      	pop	{r7}
 8009470:	4770      	bx	lr

08009472 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	460b      	mov	r3, r1
 800947c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800947e:	2300      	movs	r3, #0
 8009480:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	7c1b      	ldrb	r3, [r3, #16]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d115      	bne.n	80094b6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800948a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800948e:	2202      	movs	r2, #2
 8009490:	2181      	movs	r1, #129	@ 0x81
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f001 fe2b 	bl	800b0ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800949e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094a2:	2202      	movs	r2, #2
 80094a4:	2101      	movs	r1, #1
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 fe21 	bl	800b0ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80094b4:	e012      	b.n	80094dc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80094b6:	2340      	movs	r3, #64	@ 0x40
 80094b8:	2202      	movs	r2, #2
 80094ba:	2181      	movs	r1, #129	@ 0x81
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 fe16 	bl	800b0ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80094c8:	2340      	movs	r3, #64	@ 0x40
 80094ca:	2202      	movs	r2, #2
 80094cc:	2101      	movs	r1, #1
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f001 fe0d 	bl	800b0ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80094dc:	2308      	movs	r3, #8
 80094de:	2203      	movs	r2, #3
 80094e0:	2182      	movs	r1, #130	@ 0x82
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f001 fe03 	bl	800b0ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80094ee:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80094f2:	f001 ff23 	bl	800b33c <USBD_static_malloc>
 80094f6:	4602      	mov	r2, r0
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009504:	2b00      	cmp	r3, #0
 8009506:	d102      	bne.n	800950e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009508:	2301      	movs	r3, #1
 800950a:	73fb      	strb	r3, [r7, #15]
 800950c:	e026      	b.n	800955c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009514:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2200      	movs	r2, #0
 8009524:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2200      	movs	r2, #0
 800952c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7c1b      	ldrb	r3, [r3, #16]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d109      	bne.n	800954c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800953e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009542:	2101      	movs	r1, #1
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f001 fec2 	bl	800b2ce <USBD_LL_PrepareReceive>
 800954a:	e007      	b.n	800955c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009552:	2340      	movs	r3, #64	@ 0x40
 8009554:	2101      	movs	r1, #1
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f001 feb9 	bl	800b2ce <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800955c:	7bfb      	ldrb	r3, [r7, #15]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	460b      	mov	r3, r1
 8009570:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009576:	2181      	movs	r1, #129	@ 0x81
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f001 fdde 	bl	800b13a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009584:	2101      	movs	r1, #1
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 fdd7 	bl	800b13a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009594:	2182      	movs	r1, #130	@ 0x82
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 fdcf 	bl	800b13a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00e      	beq.n	80095ca <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095bc:	4618      	mov	r0, r3
 80095be:	f001 fec9 	bl	800b354 <USBD_static_free>
    pdev->pClassData = NULL;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80095e6:	2300      	movs	r3, #0
 80095e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80095ea:	2300      	movs	r3, #0
 80095ec:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d039      	beq.n	8009672 <USBD_CDC_Setup+0x9e>
 80095fe:	2b20      	cmp	r3, #32
 8009600:	d17f      	bne.n	8009702 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	88db      	ldrh	r3, [r3, #6]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d029      	beq.n	800965e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	b25b      	sxtb	r3, r3
 8009610:	2b00      	cmp	r3, #0
 8009612:	da11      	bge.n	8009638 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009620:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	88d2      	ldrh	r2, [r2, #6]
 8009626:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009628:	6939      	ldr	r1, [r7, #16]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	88db      	ldrh	r3, [r3, #6]
 800962e:	461a      	mov	r2, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f001 f9d5 	bl	800a9e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009636:	e06b      	b.n	8009710 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	785a      	ldrb	r2, [r3, #1]
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	88db      	ldrh	r3, [r3, #6]
 8009646:	b2da      	uxtb	r2, r3
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800964e:	6939      	ldr	r1, [r7, #16]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	88db      	ldrh	r3, [r3, #6]
 8009654:	461a      	mov	r2, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f001 f9f0 	bl	800aa3c <USBD_CtlPrepareRx>
      break;
 800965c:	e058      	b.n	8009710 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	7850      	ldrb	r0, [r2, #1]
 800966a:	2200      	movs	r2, #0
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	4798      	blx	r3
      break;
 8009670:	e04e      	b.n	8009710 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	785b      	ldrb	r3, [r3, #1]
 8009676:	2b0b      	cmp	r3, #11
 8009678:	d02e      	beq.n	80096d8 <USBD_CDC_Setup+0x104>
 800967a:	2b0b      	cmp	r3, #11
 800967c:	dc38      	bgt.n	80096f0 <USBD_CDC_Setup+0x11c>
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <USBD_CDC_Setup+0xb4>
 8009682:	2b0a      	cmp	r3, #10
 8009684:	d014      	beq.n	80096b0 <USBD_CDC_Setup+0xdc>
 8009686:	e033      	b.n	80096f0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800968e:	2b03      	cmp	r3, #3
 8009690:	d107      	bne.n	80096a2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009692:	f107 030c 	add.w	r3, r7, #12
 8009696:	2202      	movs	r2, #2
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 f9a0 	bl	800a9e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096a0:	e02e      	b.n	8009700 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f001 f931 	bl	800a90c <USBD_CtlError>
            ret = USBD_FAIL;
 80096aa:	2302      	movs	r3, #2
 80096ac:	75fb      	strb	r3, [r7, #23]
          break;
 80096ae:	e027      	b.n	8009700 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d107      	bne.n	80096ca <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80096ba:	f107 030f 	add.w	r3, r7, #15
 80096be:	2201      	movs	r2, #1
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f001 f98c 	bl	800a9e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096c8:	e01a      	b.n	8009700 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 f91d 	bl	800a90c <USBD_CtlError>
            ret = USBD_FAIL;
 80096d2:	2302      	movs	r3, #2
 80096d4:	75fb      	strb	r3, [r7, #23]
          break;
 80096d6:	e013      	b.n	8009700 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d00d      	beq.n	80096fe <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f001 f911 	bl	800a90c <USBD_CtlError>
            ret = USBD_FAIL;
 80096ea:	2302      	movs	r3, #2
 80096ec:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80096ee:	e006      	b.n	80096fe <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f001 f90a 	bl	800a90c <USBD_CtlError>
          ret = USBD_FAIL;
 80096f8:	2302      	movs	r3, #2
 80096fa:	75fb      	strb	r3, [r7, #23]
          break;
 80096fc:	e000      	b.n	8009700 <USBD_CDC_Setup+0x12c>
          break;
 80096fe:	bf00      	nop
      }
      break;
 8009700:	e006      	b.n	8009710 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f001 f901 	bl	800a90c <USBD_CtlError>
      ret = USBD_FAIL;
 800970a:	2302      	movs	r3, #2
 800970c:	75fb      	strb	r3, [r7, #23]
      break;
 800970e:	bf00      	nop
  }

  return ret;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800972c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009734:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800973c:	2b00      	cmp	r3, #0
 800973e:	d03a      	beq.n	80097b6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009740:	78fa      	ldrb	r2, [r7, #3]
 8009742:	6879      	ldr	r1, [r7, #4]
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	440b      	add	r3, r1
 800974e:	331c      	adds	r3, #28
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d029      	beq.n	80097aa <USBD_CDC_DataIn+0x90>
 8009756:	78fa      	ldrb	r2, [r7, #3]
 8009758:	6879      	ldr	r1, [r7, #4]
 800975a:	4613      	mov	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	440b      	add	r3, r1
 8009764:	331c      	adds	r3, #28
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	78f9      	ldrb	r1, [r7, #3]
 800976a:	68b8      	ldr	r0, [r7, #8]
 800976c:	460b      	mov	r3, r1
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	440b      	add	r3, r1
 8009772:	00db      	lsls	r3, r3, #3
 8009774:	4403      	add	r3, r0
 8009776:	3320      	adds	r3, #32
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	fbb2 f1f3 	udiv	r1, r2, r3
 800977e:	fb01 f303 	mul.w	r3, r1, r3
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	2b00      	cmp	r3, #0
 8009786:	d110      	bne.n	80097aa <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009788:	78fa      	ldrb	r2, [r7, #3]
 800978a:	6879      	ldr	r1, [r7, #4]
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	440b      	add	r3, r1
 8009796:	331c      	adds	r3, #28
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800979c:	78f9      	ldrb	r1, [r7, #3]
 800979e:	2300      	movs	r3, #0
 80097a0:	2200      	movs	r2, #0
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f001 fd70 	bl	800b288 <USBD_LL_Transmit>
 80097a8:	e003      	b.n	80097b2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	e000      	b.n	80097b8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80097b6:	2302      	movs	r3, #2
  }
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	460b      	mov	r3, r1
 80097ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80097d4:	78fb      	ldrb	r3, [r7, #3]
 80097d6:	4619      	mov	r1, r3
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f001 fd9b 	bl	800b314 <USBD_LL_GetRxDataSize>
 80097de:	4602      	mov	r2, r0
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00d      	beq.n	800980c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009804:	4611      	mov	r1, r2
 8009806:	4798      	blx	r3

    return USBD_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	e000      	b.n	800980e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800980c:	2302      	movs	r3, #2
  }
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}

08009816 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b084      	sub	sp, #16
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009824:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800982c:	2b00      	cmp	r3, #0
 800982e:	d014      	beq.n	800985a <USBD_CDC_EP0_RxReady+0x44>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009836:	2bff      	cmp	r3, #255	@ 0xff
 8009838:	d00f      	beq.n	800985a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009848:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009850:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	22ff      	movs	r2, #255	@ 0xff
 8009856:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2243      	movs	r2, #67	@ 0x43
 8009870:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009872:	4b03      	ldr	r3, [pc, #12]	@ (8009880 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	bc80      	pop	{r7}
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	20000094 	.word	0x20000094

08009884 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2243      	movs	r2, #67	@ 0x43
 8009890:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009892:	4b03      	ldr	r3, [pc, #12]	@ (80098a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009894:	4618      	mov	r0, r3
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	bc80      	pop	{r7}
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	20000050 	.word	0x20000050

080098a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2243      	movs	r2, #67	@ 0x43
 80098b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80098b2:	4b03      	ldr	r3, [pc, #12]	@ (80098c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bc80      	pop	{r7}
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	200000d8 	.word	0x200000d8

080098c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	220a      	movs	r2, #10
 80098d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80098d2:	4b03      	ldr	r3, [pc, #12]	@ (80098e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	bc80      	pop	{r7}
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	2000000c 	.word	0x2000000c

080098e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80098ee:	2302      	movs	r3, #2
 80098f0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d005      	beq.n	8009904 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8009900:	2300      	movs	r3, #0
 8009902:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009904:	7bfb      	ldrb	r3, [r7, #15]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	bc80      	pop	{r7}
 800990e:	4770      	bx	lr

08009910 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009910:	b480      	push	{r7}
 8009912:	b087      	sub	sp, #28
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	4613      	mov	r3, r2
 800991c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009924:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800992e:	88fa      	ldrh	r2, [r7, #6]
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	371c      	adds	r7, #28
 800993c:	46bd      	mov	sp, r7
 800993e:	bc80      	pop	{r7}
 8009940:	4770      	bx	lr

08009942 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009942:	b480      	push	{r7}
 8009944:	b085      	sub	sp, #20
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009952:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	bc80      	pop	{r7}
 8009966:	4770      	bx	lr

08009968 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009976:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800997e:	2b00      	cmp	r3, #0
 8009980:	d017      	beq.n	80099b2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	7c1b      	ldrb	r3, [r3, #16]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d109      	bne.n	800999e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009994:	2101      	movs	r1, #1
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f001 fc99 	bl	800b2ce <USBD_LL_PrepareReceive>
 800999c:	e007      	b.n	80099ae <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099a4:	2340      	movs	r3, #64	@ 0x40
 80099a6:	2101      	movs	r1, #1
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 fc90 	bl	800b2ce <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	e000      	b.n	80099b4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80099b2:	2302      	movs	r3, #2
  }
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	4613      	mov	r3, r2
 80099c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80099d0:	2302      	movs	r3, #2
 80099d2:	e01a      	b.n	8009a0a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d003      	beq.n	80099f4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	79fa      	ldrb	r2, [r7, #7]
 8009a00:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	f001 fafe 	bl	800b004 <USBD_LL_Init>

  return USBD_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b085      	sub	sp, #20
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d006      	beq.n	8009a34 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
 8009a32:	e001      	b.n	8009a38 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009a34:	2302      	movs	r3, #2
 8009a36:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bc80      	pop	{r7}
 8009a42:	4770      	bx	lr

08009a44 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 fb33 	bl	800b0b8 <USBD_LL_Start>

  return USBD_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bc80      	pop	{r7}
 8009a6e:	4770      	bx	lr

08009a70 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00c      	beq.n	8009aa4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	78fa      	ldrb	r2, [r7, #3]
 8009a94:	4611      	mov	r1, r2
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	4798      	blx	r3
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d101      	bne.n	8009aa4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	78fa      	ldrb	r2, [r7, #3]
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3

  return USBD_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 fed7 	bl	800a89a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009afa:	461a      	mov	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009b08:	f003 031f 	and.w	r3, r3, #31
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d016      	beq.n	8009b3e <USBD_LL_SetupStage+0x6a>
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d81c      	bhi.n	8009b4e <USBD_LL_SetupStage+0x7a>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <USBD_LL_SetupStage+0x4a>
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d008      	beq.n	8009b2e <USBD_LL_SetupStage+0x5a>
 8009b1c:	e017      	b.n	8009b4e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009b24:	4619      	mov	r1, r3
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f9ca 	bl	8009ec0 <USBD_StdDevReq>
      break;
 8009b2c:	e01a      	b.n	8009b64 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fa2c 	bl	8009f94 <USBD_StdItfReq>
      break;
 8009b3c:	e012      	b.n	8009b64 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fa6c 	bl	800a024 <USBD_StdEPReq>
      break;
 8009b4c:	e00a      	b.n	8009b64 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009b54:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 fb0b 	bl	800b178 <USBD_LL_StallEP>
      break;
 8009b62:	bf00      	nop
  }

  return USBD_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b086      	sub	sp, #24
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	460b      	mov	r3, r1
 8009b78:	607a      	str	r2, [r7, #4]
 8009b7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009b7c:	7afb      	ldrb	r3, [r7, #11]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d14b      	bne.n	8009c1a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009b88:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b90:	2b03      	cmp	r3, #3
 8009b92:	d134      	bne.n	8009bfe <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	68da      	ldr	r2, [r3, #12]
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d919      	bls.n	8009bd4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	68da      	ldr	r2, [r3, #12]
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	1ad2      	subs	r2, r2, r3
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d203      	bcs.n	8009bc2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	e002      	b.n	8009bc8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	461a      	mov	r2, r3
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 ff53 	bl	800aa78 <USBD_CtlContinueRx>
 8009bd2:	e038      	b.n	8009c46 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00a      	beq.n	8009bf6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009be6:	2b03      	cmp	r3, #3
 8009be8:	d105      	bne.n	8009bf6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 ff50 	bl	800aa9c <USBD_CtlSendStatus>
 8009bfc:	e023      	b.n	8009c46 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c04:	2b05      	cmp	r3, #5
 8009c06:	d11e      	bne.n	8009c46 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009c10:	2100      	movs	r1, #0
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f001 fab0 	bl	800b178 <USBD_LL_StallEP>
 8009c18:	e015      	b.n	8009c46 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00d      	beq.n	8009c42 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	d108      	bne.n	8009c42 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c36:	699b      	ldr	r3, [r3, #24]
 8009c38:	7afa      	ldrb	r2, [r7, #11]
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	4798      	blx	r3
 8009c40:	e001      	b.n	8009c46 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c42:	2302      	movs	r3, #2
 8009c44:	e000      	b.n	8009c48 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009c46:	2300      	movs	r3, #0
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009c5e:	7afb      	ldrb	r3, [r7, #11]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d17f      	bne.n	8009d64 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3314      	adds	r3, #20
 8009c68:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d15c      	bne.n	8009d2e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	68da      	ldr	r2, [r3, #12]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d915      	bls.n	8009cac <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	68da      	ldr	r2, [r3, #12]
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	1ad2      	subs	r2, r2, r3
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	461a      	mov	r2, r3
 8009c96:	6879      	ldr	r1, [r7, #4]
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 febd 	bl	800aa18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f001 fb12 	bl	800b2ce <USBD_LL_PrepareReceive>
 8009caa:	e04e      	b.n	8009d4a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	6912      	ldr	r2, [r2, #16]
 8009cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cb8:	fb01 f202 	mul.w	r2, r1, r2
 8009cbc:	1a9b      	subs	r3, r3, r2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d11c      	bne.n	8009cfc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d316      	bcc.n	8009cfc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	689a      	ldr	r2, [r3, #8]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d20f      	bcs.n	8009cfc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2100      	movs	r1, #0
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 fe99 	bl	800aa18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cee:	2300      	movs	r3, #0
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f001 faea 	bl	800b2ce <USBD_LL_PrepareReceive>
 8009cfa:	e026      	b.n	8009d4a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d00a      	beq.n	8009d1e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d105      	bne.n	8009d1e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009d1e:	2180      	movs	r1, #128	@ 0x80
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f001 fa29 	bl	800b178 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 fecb 	bl	800aac2 <USBD_CtlReceiveStatus>
 8009d2c:	e00d      	b.n	8009d4a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d34:	2b04      	cmp	r3, #4
 8009d36:	d004      	beq.n	8009d42 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d103      	bne.n	8009d4a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009d42:	2180      	movs	r1, #128	@ 0x80
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f001 fa17 	bl	800b178 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d11d      	bne.n	8009d90 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f7ff fe81 	bl	8009a5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009d62:	e015      	b.n	8009d90 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00d      	beq.n	8009d8c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d108      	bne.n	8009d8c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	7afa      	ldrb	r2, [r7, #11]
 8009d84:	4611      	mov	r1, r2
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	4798      	blx	r3
 8009d8a:	e001      	b.n	8009d90 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	e000      	b.n	8009d92 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009da2:	2340      	movs	r3, #64	@ 0x40
 8009da4:	2200      	movs	r2, #0
 8009da6:	2100      	movs	r1, #0
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f001 f9a0 	bl	800b0ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2240      	movs	r2, #64	@ 0x40
 8009dba:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009dbe:	2340      	movs	r3, #64	@ 0x40
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2180      	movs	r1, #128	@ 0x80
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f001 f992 	bl	800b0ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2240      	movs	r2, #64	@ 0x40
 8009dd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d009      	beq.n	8009e12 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	6852      	ldr	r2, [r2, #4]
 8009e0a:	b2d2      	uxtb	r2, r2
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	4798      	blx	r3
  }

  return USBD_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	78fa      	ldrb	r2, [r7, #3]
 8009e2c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bc80      	pop	{r7}
 8009e38:	4770      	bx	lr

08009e3a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b083      	sub	sp, #12
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2204      	movs	r2, #4
 8009e52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bc80      	pop	{r7}
 8009e60:	4770      	bx	lr

08009e62 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d105      	bne.n	8009e80 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bc80      	pop	{r7}
 8009e8a:	4770      	bx	lr

08009e8c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d10b      	bne.n	8009eb6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ea4:	69db      	ldr	r3, [r3, #28]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d005      	beq.n	8009eb6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ed6:	2b40      	cmp	r3, #64	@ 0x40
 8009ed8:	d005      	beq.n	8009ee6 <USBD_StdDevReq+0x26>
 8009eda:	2b40      	cmp	r3, #64	@ 0x40
 8009edc:	d84f      	bhi.n	8009f7e <USBD_StdDevReq+0xbe>
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d009      	beq.n	8009ef6 <USBD_StdDevReq+0x36>
 8009ee2:	2b20      	cmp	r3, #32
 8009ee4:	d14b      	bne.n	8009f7e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	4798      	blx	r3
      break;
 8009ef4:	e048      	b.n	8009f88 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	785b      	ldrb	r3, [r3, #1]
 8009efa:	2b09      	cmp	r3, #9
 8009efc:	d839      	bhi.n	8009f72 <USBD_StdDevReq+0xb2>
 8009efe:	a201      	add	r2, pc, #4	@ (adr r2, 8009f04 <USBD_StdDevReq+0x44>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f55 	.word	0x08009f55
 8009f08:	08009f69 	.word	0x08009f69
 8009f0c:	08009f73 	.word	0x08009f73
 8009f10:	08009f5f 	.word	0x08009f5f
 8009f14:	08009f73 	.word	0x08009f73
 8009f18:	08009f37 	.word	0x08009f37
 8009f1c:	08009f2d 	.word	0x08009f2d
 8009f20:	08009f73 	.word	0x08009f73
 8009f24:	08009f4b 	.word	0x08009f4b
 8009f28:	08009f41 	.word	0x08009f41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f9dc 	bl	800a2ec <USBD_GetDescriptor>
          break;
 8009f34:	e022      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fb3f 	bl	800a5bc <USBD_SetAddress>
          break;
 8009f3e:	e01d      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fb7e 	bl	800a644 <USBD_SetConfig>
          break;
 8009f48:	e018      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fc07 	bl	800a760 <USBD_GetConfig>
          break;
 8009f52:	e013      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fc37 	bl	800a7ca <USBD_GetStatus>
          break;
 8009f5c:	e00e      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f5e:	6839      	ldr	r1, [r7, #0]
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fc65 	bl	800a830 <USBD_SetFeature>
          break;
 8009f66:	e009      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fc74 	bl	800a858 <USBD_ClrFeature>
          break;
 8009f70:	e004      	b.n	8009f7c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fcc9 	bl	800a90c <USBD_CtlError>
          break;
 8009f7a:	bf00      	nop
      }
      break;
 8009f7c:	e004      	b.n	8009f88 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fcc3 	bl	800a90c <USBD_CtlError>
      break;
 8009f86:	bf00      	nop
  }

  return ret;
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop

08009f94 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009faa:	2b40      	cmp	r3, #64	@ 0x40
 8009fac:	d005      	beq.n	8009fba <USBD_StdItfReq+0x26>
 8009fae:	2b40      	cmp	r3, #64	@ 0x40
 8009fb0:	d82e      	bhi.n	800a010 <USBD_StdItfReq+0x7c>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <USBD_StdItfReq+0x26>
 8009fb6:	2b20      	cmp	r3, #32
 8009fb8:	d12a      	bne.n	800a010 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d81d      	bhi.n	800a002 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	889b      	ldrh	r3, [r3, #4]
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d813      	bhi.n	8009ff8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	4798      	blx	r3
 8009fde:	4603      	mov	r3, r0
 8009fe0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	88db      	ldrh	r3, [r3, #6]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d110      	bne.n	800a00c <USBD_StdItfReq+0x78>
 8009fea:	7bfb      	ldrb	r3, [r7, #15]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10d      	bne.n	800a00c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fd53 	bl	800aa9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ff6:	e009      	b.n	800a00c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fc86 	bl	800a90c <USBD_CtlError>
          break;
 800a000:	e004      	b.n	800a00c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 fc81 	bl	800a90c <USBD_CtlError>
          break;
 800a00a:	e000      	b.n	800a00e <USBD_StdItfReq+0x7a>
          break;
 800a00c:	bf00      	nop
      }
      break;
 800a00e:	e004      	b.n	800a01a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fc7a 	bl	800a90c <USBD_CtlError>
      break;
 800a018:	bf00      	nop
  }

  return USBD_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	889b      	ldrh	r3, [r3, #4]
 800a036:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a040:	2b40      	cmp	r3, #64	@ 0x40
 800a042:	d007      	beq.n	800a054 <USBD_StdEPReq+0x30>
 800a044:	2b40      	cmp	r3, #64	@ 0x40
 800a046:	f200 8146 	bhi.w	800a2d6 <USBD_StdEPReq+0x2b2>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00a      	beq.n	800a064 <USBD_StdEPReq+0x40>
 800a04e:	2b20      	cmp	r3, #32
 800a050:	f040 8141 	bne.w	800a2d6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	4798      	blx	r3
      break;
 800a062:	e13d      	b.n	800a2e0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a06c:	2b20      	cmp	r3, #32
 800a06e:	d10a      	bne.n	800a086 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	4798      	blx	r3
 800a07e:	4603      	mov	r3, r0
 800a080:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	e12d      	b.n	800a2e2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	785b      	ldrb	r3, [r3, #1]
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	d007      	beq.n	800a09e <USBD_StdEPReq+0x7a>
 800a08e:	2b03      	cmp	r3, #3
 800a090:	f300 811b 	bgt.w	800a2ca <USBD_StdEPReq+0x2a6>
 800a094:	2b00      	cmp	r3, #0
 800a096:	d072      	beq.n	800a17e <USBD_StdEPReq+0x15a>
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d03a      	beq.n	800a112 <USBD_StdEPReq+0xee>
 800a09c:	e115      	b.n	800a2ca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d002      	beq.n	800a0ae <USBD_StdEPReq+0x8a>
 800a0a8:	2b03      	cmp	r3, #3
 800a0aa:	d015      	beq.n	800a0d8 <USBD_StdEPReq+0xb4>
 800a0ac:	e02b      	b.n	800a106 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0ae:	7bbb      	ldrb	r3, [r7, #14]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00c      	beq.n	800a0ce <USBD_StdEPReq+0xaa>
 800a0b4:	7bbb      	ldrb	r3, [r7, #14]
 800a0b6:	2b80      	cmp	r3, #128	@ 0x80
 800a0b8:	d009      	beq.n	800a0ce <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a0ba:	7bbb      	ldrb	r3, [r7, #14]
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f001 f85a 	bl	800b178 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a0c4:	2180      	movs	r1, #128	@ 0x80
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f001 f856 	bl	800b178 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0cc:	e020      	b.n	800a110 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fc1b 	bl	800a90c <USBD_CtlError>
              break;
 800a0d6:	e01b      	b.n	800a110 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	885b      	ldrh	r3, [r3, #2]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10e      	bne.n	800a0fe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00b      	beq.n	800a0fe <USBD_StdEPReq+0xda>
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
 800a0e8:	2b80      	cmp	r3, #128	@ 0x80
 800a0ea:	d008      	beq.n	800a0fe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	88db      	ldrh	r3, [r3, #6]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d104      	bne.n	800a0fe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 f83d 	bl	800b178 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fccc 	bl	800aa9c <USBD_CtlSendStatus>

              break;
 800a104:	e004      	b.n	800a110 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 fbff 	bl	800a90c <USBD_CtlError>
              break;
 800a10e:	bf00      	nop
          }
          break;
 800a110:	e0e0      	b.n	800a2d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d002      	beq.n	800a122 <USBD_StdEPReq+0xfe>
 800a11c:	2b03      	cmp	r3, #3
 800a11e:	d015      	beq.n	800a14c <USBD_StdEPReq+0x128>
 800a120:	e026      	b.n	800a170 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a122:	7bbb      	ldrb	r3, [r7, #14]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00c      	beq.n	800a142 <USBD_StdEPReq+0x11e>
 800a128:	7bbb      	ldrb	r3, [r7, #14]
 800a12a:	2b80      	cmp	r3, #128	@ 0x80
 800a12c:	d009      	beq.n	800a142 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a12e:	7bbb      	ldrb	r3, [r7, #14]
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 f820 	bl	800b178 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a138:	2180      	movs	r1, #128	@ 0x80
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f001 f81c 	bl	800b178 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a140:	e01c      	b.n	800a17c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fbe1 	bl	800a90c <USBD_CtlError>
              break;
 800a14a:	e017      	b.n	800a17c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	885b      	ldrh	r3, [r3, #2]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d112      	bne.n	800a17a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a154:	7bbb      	ldrb	r3, [r7, #14]
 800a156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d004      	beq.n	800a168 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a15e:	7bbb      	ldrb	r3, [r7, #14]
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f001 f827 	bl	800b1b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fc97 	bl	800aa9c <USBD_CtlSendStatus>
              }
              break;
 800a16e:	e004      	b.n	800a17a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fbca 	bl	800a90c <USBD_CtlError>
              break;
 800a178:	e000      	b.n	800a17c <USBD_StdEPReq+0x158>
              break;
 800a17a:	bf00      	nop
          }
          break;
 800a17c:	e0aa      	b.n	800a2d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a184:	2b02      	cmp	r3, #2
 800a186:	d002      	beq.n	800a18e <USBD_StdEPReq+0x16a>
 800a188:	2b03      	cmp	r3, #3
 800a18a:	d032      	beq.n	800a1f2 <USBD_StdEPReq+0x1ce>
 800a18c:	e097      	b.n	800a2be <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a18e:	7bbb      	ldrb	r3, [r7, #14]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d007      	beq.n	800a1a4 <USBD_StdEPReq+0x180>
 800a194:	7bbb      	ldrb	r3, [r7, #14]
 800a196:	2b80      	cmp	r3, #128	@ 0x80
 800a198:	d004      	beq.n	800a1a4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a19a:	6839      	ldr	r1, [r7, #0]
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 fbb5 	bl	800a90c <USBD_CtlError>
                break;
 800a1a2:	e091      	b.n	800a2c8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	da0b      	bge.n	800a1c4 <USBD_StdEPReq+0x1a0>
 800a1ac:	7bbb      	ldrb	r3, [r7, #14]
 800a1ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4413      	add	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	3310      	adds	r3, #16
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	4413      	add	r3, r2
 800a1c0:	3304      	adds	r3, #4
 800a1c2:	e00b      	b.n	800a1dc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1c4:	7bbb      	ldrb	r3, [r7, #14]
 800a1c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	4413      	add	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	4413      	add	r3, r2
 800a1da:	3304      	adds	r3, #4
 800a1dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fbf8 	bl	800a9e0 <USBD_CtlSendData>
              break;
 800a1f0:	e06a      	b.n	800a2c8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	da11      	bge.n	800a21e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1fa:	7bbb      	ldrb	r3, [r7, #14]
 800a1fc:	f003 020f 	and.w	r2, r3, #15
 800a200:	6879      	ldr	r1, [r7, #4]
 800a202:	4613      	mov	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	4413      	add	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	440b      	add	r3, r1
 800a20c:	3318      	adds	r3, #24
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d117      	bne.n	800a244 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a214:	6839      	ldr	r1, [r7, #0]
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fb78 	bl	800a90c <USBD_CtlError>
                  break;
 800a21c:	e054      	b.n	800a2c8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a21e:	7bbb      	ldrb	r3, [r7, #14]
 800a220:	f003 020f 	and.w	r2, r3, #15
 800a224:	6879      	ldr	r1, [r7, #4]
 800a226:	4613      	mov	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	440b      	add	r3, r1
 800a230:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d104      	bne.n	800a244 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 fb65 	bl	800a90c <USBD_CtlError>
                  break;
 800a242:	e041      	b.n	800a2c8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	da0b      	bge.n	800a264 <USBD_StdEPReq+0x240>
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
 800a24e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a252:	4613      	mov	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4413      	add	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	3310      	adds	r3, #16
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	4413      	add	r3, r2
 800a260:	3304      	adds	r3, #4
 800a262:	e00b      	b.n	800a27c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a264:	7bbb      	ldrb	r3, [r7, #14]
 800a266:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a26a:	4613      	mov	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	4413      	add	r3, r2
 800a27a:	3304      	adds	r3, #4
 800a27c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a27e:	7bbb      	ldrb	r3, [r7, #14]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <USBD_StdEPReq+0x266>
 800a284:	7bbb      	ldrb	r3, [r7, #14]
 800a286:	2b80      	cmp	r3, #128	@ 0x80
 800a288:	d103      	bne.n	800a292 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2200      	movs	r2, #0
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	e00e      	b.n	800a2b0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a292:	7bbb      	ldrb	r3, [r7, #14]
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 ffac 	bl	800b1f4 <USBD_LL_IsStallEP>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d003      	beq.n	800a2aa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	601a      	str	r2, [r3, #0]
 800a2a8:	e002      	b.n	800a2b0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fb92 	bl	800a9e0 <USBD_CtlSendData>
              break;
 800a2bc:	e004      	b.n	800a2c8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fb23 	bl	800a90c <USBD_CtlError>
              break;
 800a2c6:	bf00      	nop
          }
          break;
 800a2c8:	e004      	b.n	800a2d4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fb1d 	bl	800a90c <USBD_CtlError>
          break;
 800a2d2:	bf00      	nop
      }
      break;
 800a2d4:	e004      	b.n	800a2e0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 fb17 	bl	800a90c <USBD_CtlError>
      break;
 800a2de:	bf00      	nop
  }

  return ret;
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
	...

0800a2ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	885b      	ldrh	r3, [r3, #2]
 800a306:	0a1b      	lsrs	r3, r3, #8
 800a308:	b29b      	uxth	r3, r3
 800a30a:	3b01      	subs	r3, #1
 800a30c:	2b06      	cmp	r3, #6
 800a30e:	f200 8128 	bhi.w	800a562 <USBD_GetDescriptor+0x276>
 800a312:	a201      	add	r2, pc, #4	@ (adr r2, 800a318 <USBD_GetDescriptor+0x2c>)
 800a314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a318:	0800a335 	.word	0x0800a335
 800a31c:	0800a34d 	.word	0x0800a34d
 800a320:	0800a38d 	.word	0x0800a38d
 800a324:	0800a563 	.word	0x0800a563
 800a328:	0800a563 	.word	0x0800a563
 800a32c:	0800a503 	.word	0x0800a503
 800a330:	0800a52f 	.word	0x0800a52f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	7c12      	ldrb	r2, [r2, #16]
 800a340:	f107 0108 	add.w	r1, r7, #8
 800a344:	4610      	mov	r0, r2
 800a346:	4798      	blx	r3
 800a348:	60f8      	str	r0, [r7, #12]
      break;
 800a34a:	e112      	b.n	800a572 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	7c1b      	ldrb	r3, [r3, #16]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10d      	bne.n	800a370 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35c:	f107 0208 	add.w	r2, r7, #8
 800a360:	4610      	mov	r0, r2
 800a362:	4798      	blx	r3
 800a364:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3301      	adds	r3, #1
 800a36a:	2202      	movs	r2, #2
 800a36c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a36e:	e100      	b.n	800a572 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a378:	f107 0208 	add.w	r2, r7, #8
 800a37c:	4610      	mov	r0, r2
 800a37e:	4798      	blx	r3
 800a380:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3301      	adds	r3, #1
 800a386:	2202      	movs	r2, #2
 800a388:	701a      	strb	r2, [r3, #0]
      break;
 800a38a:	e0f2      	b.n	800a572 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	885b      	ldrh	r3, [r3, #2]
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b05      	cmp	r3, #5
 800a394:	f200 80ac 	bhi.w	800a4f0 <USBD_GetDescriptor+0x204>
 800a398:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a0 <USBD_GetDescriptor+0xb4>)
 800a39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39e:	bf00      	nop
 800a3a0:	0800a3b9 	.word	0x0800a3b9
 800a3a4:	0800a3ed 	.word	0x0800a3ed
 800a3a8:	0800a421 	.word	0x0800a421
 800a3ac:	0800a455 	.word	0x0800a455
 800a3b0:	0800a489 	.word	0x0800a489
 800a3b4:	0800a4bd 	.word	0x0800a4bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00b      	beq.n	800a3dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	7c12      	ldrb	r2, [r2, #16]
 800a3d0:	f107 0108 	add.w	r1, r7, #8
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	4798      	blx	r3
 800a3d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3da:	e091      	b.n	800a500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3dc:	6839      	ldr	r1, [r7, #0]
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 fa94 	bl	800a90c <USBD_CtlError>
            err++;
 800a3e4:	7afb      	ldrb	r3, [r7, #11]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a3ea:	e089      	b.n	800a500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00b      	beq.n	800a410 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	7c12      	ldrb	r2, [r2, #16]
 800a404:	f107 0108 	add.w	r1, r7, #8
 800a408:	4610      	mov	r0, r2
 800a40a:	4798      	blx	r3
 800a40c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a40e:	e077      	b.n	800a500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a410:	6839      	ldr	r1, [r7, #0]
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fa7a 	bl	800a90c <USBD_CtlError>
            err++;
 800a418:	7afb      	ldrb	r3, [r7, #11]
 800a41a:	3301      	adds	r3, #1
 800a41c:	72fb      	strb	r3, [r7, #11]
          break;
 800a41e:	e06f      	b.n	800a500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00b      	beq.n	800a444 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	7c12      	ldrb	r2, [r2, #16]
 800a438:	f107 0108 	add.w	r1, r7, #8
 800a43c:	4610      	mov	r0, r2
 800a43e:	4798      	blx	r3
 800a440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a442:	e05d      	b.n	800a500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a444:	6839      	ldr	r1, [r7, #0]
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fa60 	bl	800a90c <USBD_CtlError>
            err++;
 800a44c:	7afb      	ldrb	r3, [r7, #11]
 800a44e:	3301      	adds	r3, #1
 800a450:	72fb      	strb	r3, [r7, #11]
          break;
 800a452:	e055      	b.n	800a500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00b      	beq.n	800a478 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	7c12      	ldrb	r2, [r2, #16]
 800a46c:	f107 0108 	add.w	r1, r7, #8
 800a470:	4610      	mov	r0, r2
 800a472:	4798      	blx	r3
 800a474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a476:	e043      	b.n	800a500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fa46 	bl	800a90c <USBD_CtlError>
            err++;
 800a480:	7afb      	ldrb	r3, [r7, #11]
 800a482:	3301      	adds	r3, #1
 800a484:	72fb      	strb	r3, [r7, #11]
          break;
 800a486:	e03b      	b.n	800a500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00b      	beq.n	800a4ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	7c12      	ldrb	r2, [r2, #16]
 800a4a0:	f107 0108 	add.w	r1, r7, #8
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	4798      	blx	r3
 800a4a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4aa:	e029      	b.n	800a500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fa2c 	bl	800a90c <USBD_CtlError>
            err++;
 800a4b4:	7afb      	ldrb	r3, [r7, #11]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ba:	e021      	b.n	800a500 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00b      	beq.n	800a4e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	7c12      	ldrb	r2, [r2, #16]
 800a4d4:	f107 0108 	add.w	r1, r7, #8
 800a4d8:	4610      	mov	r0, r2
 800a4da:	4798      	blx	r3
 800a4dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4de:	e00f      	b.n	800a500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fa12 	bl	800a90c <USBD_CtlError>
            err++;
 800a4e8:	7afb      	ldrb	r3, [r7, #11]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a4ee:	e007      	b.n	800a500 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa0a 	bl	800a90c <USBD_CtlError>
          err++;
 800a4f8:	7afb      	ldrb	r3, [r7, #11]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a4fe:	e038      	b.n	800a572 <USBD_GetDescriptor+0x286>
 800a500:	e037      	b.n	800a572 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	7c1b      	ldrb	r3, [r3, #16]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d109      	bne.n	800a51e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a512:	f107 0208 	add.w	r2, r7, #8
 800a516:	4610      	mov	r0, r2
 800a518:	4798      	blx	r3
 800a51a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a51c:	e029      	b.n	800a572 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a51e:	6839      	ldr	r1, [r7, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f9f3 	bl	800a90c <USBD_CtlError>
        err++;
 800a526:	7afb      	ldrb	r3, [r7, #11]
 800a528:	3301      	adds	r3, #1
 800a52a:	72fb      	strb	r3, [r7, #11]
      break;
 800a52c:	e021      	b.n	800a572 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	7c1b      	ldrb	r3, [r3, #16]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10d      	bne.n	800a552 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a53c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a53e:	f107 0208 	add.w	r2, r7, #8
 800a542:	4610      	mov	r0, r2
 800a544:	4798      	blx	r3
 800a546:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3301      	adds	r3, #1
 800a54c:	2207      	movs	r2, #7
 800a54e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a550:	e00f      	b.n	800a572 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a552:	6839      	ldr	r1, [r7, #0]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f9d9 	bl	800a90c <USBD_CtlError>
        err++;
 800a55a:	7afb      	ldrb	r3, [r7, #11]
 800a55c:	3301      	adds	r3, #1
 800a55e:	72fb      	strb	r3, [r7, #11]
      break;
 800a560:	e007      	b.n	800a572 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f9d1 	bl	800a90c <USBD_CtlError>
      err++;
 800a56a:	7afb      	ldrb	r3, [r7, #11]
 800a56c:	3301      	adds	r3, #1
 800a56e:	72fb      	strb	r3, [r7, #11]
      break;
 800a570:	bf00      	nop
  }

  if (err != 0U)
 800a572:	7afb      	ldrb	r3, [r7, #11]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d11c      	bne.n	800a5b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a578:	893b      	ldrh	r3, [r7, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d011      	beq.n	800a5a2 <USBD_GetDescriptor+0x2b6>
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	88db      	ldrh	r3, [r3, #6]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00d      	beq.n	800a5a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	88da      	ldrh	r2, [r3, #6]
 800a58a:	893b      	ldrh	r3, [r7, #8]
 800a58c:	4293      	cmp	r3, r2
 800a58e:	bf28      	it	cs
 800a590:	4613      	movcs	r3, r2
 800a592:	b29b      	uxth	r3, r3
 800a594:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a596:	893b      	ldrh	r3, [r7, #8]
 800a598:	461a      	mov	r2, r3
 800a59a:	68f9      	ldr	r1, [r7, #12]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fa1f 	bl	800a9e0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	88db      	ldrh	r3, [r3, #6]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d104      	bne.n	800a5b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fa76 	bl	800aa9c <USBD_CtlSendStatus>
 800a5b0:	e000      	b.n	800a5b4 <USBD_GetDescriptor+0x2c8>
    return;
 800a5b2:	bf00      	nop
    }
  }
}
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop

0800a5bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	889b      	ldrh	r3, [r3, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d130      	bne.n	800a630 <USBD_SetAddress+0x74>
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	88db      	ldrh	r3, [r3, #6]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d12c      	bne.n	800a630 <USBD_SetAddress+0x74>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	885b      	ldrh	r3, [r3, #2]
 800a5da:	2b7f      	cmp	r3, #127	@ 0x7f
 800a5dc:	d828      	bhi.n	800a630 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	885b      	ldrh	r3, [r3, #2]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d104      	bne.n	800a5fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a5f4:	6839      	ldr	r1, [r7, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 f988 	bl	800a90c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5fc:	e01d      	b.n	800a63a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	7bfa      	ldrb	r2, [r7, #15]
 800a602:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a606:	7bfb      	ldrb	r3, [r7, #15]
 800a608:	4619      	mov	r1, r3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fe1d 	bl	800b24a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fa43 	bl	800aa9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a616:	7bfb      	ldrb	r3, [r7, #15]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d004      	beq.n	800a626 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2202      	movs	r2, #2
 800a620:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a624:	e009      	b.n	800a63a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a62e:	e004      	b.n	800a63a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a630:	6839      	ldr	r1, [r7, #0]
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 f96a 	bl	800a90c <USBD_CtlError>
  }
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	885b      	ldrh	r3, [r3, #2]
 800a652:	b2da      	uxtb	r2, r3
 800a654:	4b41      	ldr	r3, [pc, #260]	@ (800a75c <USBD_SetConfig+0x118>)
 800a656:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a658:	4b40      	ldr	r3, [pc, #256]	@ (800a75c <USBD_SetConfig+0x118>)
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d904      	bls.n	800a66a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f952 	bl	800a90c <USBD_CtlError>
 800a668:	e075      	b.n	800a756 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a670:	2b02      	cmp	r3, #2
 800a672:	d002      	beq.n	800a67a <USBD_SetConfig+0x36>
 800a674:	2b03      	cmp	r3, #3
 800a676:	d023      	beq.n	800a6c0 <USBD_SetConfig+0x7c>
 800a678:	e062      	b.n	800a740 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a67a:	4b38      	ldr	r3, [pc, #224]	@ (800a75c <USBD_SetConfig+0x118>)
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d01a      	beq.n	800a6b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a682:	4b36      	ldr	r3, [pc, #216]	@ (800a75c <USBD_SetConfig+0x118>)
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	461a      	mov	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2203      	movs	r2, #3
 800a690:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a694:	4b31      	ldr	r3, [pc, #196]	@ (800a75c <USBD_SetConfig+0x118>)
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7ff f9e8 	bl	8009a70 <USBD_SetClassConfig>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d104      	bne.n	800a6b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f92f 	bl	800a90c <USBD_CtlError>
            return;
 800a6ae:	e052      	b.n	800a756 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f9f3 	bl	800aa9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a6b6:	e04e      	b.n	800a756 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 f9ef 	bl	800aa9c <USBD_CtlSendStatus>
        break;
 800a6be:	e04a      	b.n	800a756 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a6c0:	4b26      	ldr	r3, [pc, #152]	@ (800a75c <USBD_SetConfig+0x118>)
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d112      	bne.n	800a6ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a6d0:	4b22      	ldr	r3, [pc, #136]	@ (800a75c <USBD_SetConfig+0x118>)
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a6da:	4b20      	ldr	r3, [pc, #128]	@ (800a75c <USBD_SetConfig+0x118>)
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7ff f9e4 	bl	8009aae <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f9d8 	bl	800aa9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a6ec:	e033      	b.n	800a756 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a6ee:	4b1b      	ldr	r3, [pc, #108]	@ (800a75c <USBD_SetConfig+0x118>)
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d01d      	beq.n	800a738 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	b2db      	uxtb	r3, r3
 800a702:	4619      	mov	r1, r3
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7ff f9d2 	bl	8009aae <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a70a:	4b14      	ldr	r3, [pc, #80]	@ (800a75c <USBD_SetConfig+0x118>)
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a714:	4b11      	ldr	r3, [pc, #68]	@ (800a75c <USBD_SetConfig+0x118>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f7ff f9a8 	bl	8009a70 <USBD_SetClassConfig>
 800a720:	4603      	mov	r3, r0
 800a722:	2b02      	cmp	r3, #2
 800a724:	d104      	bne.n	800a730 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a726:	6839      	ldr	r1, [r7, #0]
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 f8ef 	bl	800a90c <USBD_CtlError>
            return;
 800a72e:	e012      	b.n	800a756 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f9b3 	bl	800aa9c <USBD_CtlSendStatus>
        break;
 800a736:	e00e      	b.n	800a756 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f9af 	bl	800aa9c <USBD_CtlSendStatus>
        break;
 800a73e:	e00a      	b.n	800a756 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f8e2 	bl	800a90c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a748:	4b04      	ldr	r3, [pc, #16]	@ (800a75c <USBD_SetConfig+0x118>)
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	4619      	mov	r1, r3
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7ff f9ad 	bl	8009aae <USBD_ClrClassConfig>
        break;
 800a754:	bf00      	nop
    }
  }
}
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	200003a0 	.word	0x200003a0

0800a760 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	88db      	ldrh	r3, [r3, #6]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d004      	beq.n	800a77c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f8c9 	bl	800a90c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a77a:	e022      	b.n	800a7c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a782:	2b02      	cmp	r3, #2
 800a784:	dc02      	bgt.n	800a78c <USBD_GetConfig+0x2c>
 800a786:	2b00      	cmp	r3, #0
 800a788:	dc03      	bgt.n	800a792 <USBD_GetConfig+0x32>
 800a78a:	e015      	b.n	800a7b8 <USBD_GetConfig+0x58>
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d00b      	beq.n	800a7a8 <USBD_GetConfig+0x48>
 800a790:	e012      	b.n	800a7b8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3308      	adds	r3, #8
 800a79c:	2201      	movs	r2, #1
 800a79e:	4619      	mov	r1, r3
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 f91d 	bl	800a9e0 <USBD_CtlSendData>
        break;
 800a7a6:	e00c      	b.n	800a7c2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 f915 	bl	800a9e0 <USBD_CtlSendData>
        break;
 800a7b6:	e004      	b.n	800a7c2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f8a6 	bl	800a90c <USBD_CtlError>
        break;
 800a7c0:	bf00      	nop
}
 800a7c2:	bf00      	nop
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7da:	3b01      	subs	r3, #1
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d81e      	bhi.n	800a81e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	88db      	ldrh	r3, [r3, #6]
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d004      	beq.n	800a7f2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a7e8:	6839      	ldr	r1, [r7, #0]
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 f88e 	bl	800a90c <USBD_CtlError>
        break;
 800a7f0:	e01a      	b.n	800a828 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d005      	beq.n	800a80e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	f043 0202 	orr.w	r2, r3, #2
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	330c      	adds	r3, #12
 800a812:	2202      	movs	r2, #2
 800a814:	4619      	mov	r1, r3
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f8e2 	bl	800a9e0 <USBD_CtlSendData>
      break;
 800a81c:	e004      	b.n	800a828 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a81e:	6839      	ldr	r1, [r7, #0]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f873 	bl	800a90c <USBD_CtlError>
      break;
 800a826:	bf00      	nop
  }
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	885b      	ldrh	r3, [r3, #2]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d106      	bne.n	800a850 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f926 	bl	800aa9c <USBD_CtlSendStatus>
  }
}
 800a850:	bf00      	nop
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a868:	3b01      	subs	r3, #1
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d80b      	bhi.n	800a886 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	885b      	ldrh	r3, [r3, #2]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d10c      	bne.n	800a890 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2200      	movs	r2, #0
 800a87a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f90c 	bl	800aa9c <USBD_CtlSendStatus>
      }
      break;
 800a884:	e004      	b.n	800a890 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f83f 	bl	800a90c <USBD_CtlError>
      break;
 800a88e:	e000      	b.n	800a892 <USBD_ClrFeature+0x3a>
      break;
 800a890:	bf00      	nop
  }
}
 800a892:	bf00      	nop
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b083      	sub	sp, #12
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	781a      	ldrb	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	785a      	ldrb	r2, [r3, #1]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	3302      	adds	r3, #2
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	3303      	adds	r3, #3
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	021b      	lsls	r3, r3, #8
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	4413      	add	r3, r2
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	3305      	adds	r3, #5
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	021b      	lsls	r3, r3, #8
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	4413      	add	r3, r2
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	3306      	adds	r3, #6
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	3307      	adds	r3, #7
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	021b      	lsls	r3, r3, #8
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	4413      	add	r3, r2
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	80da      	strh	r2, [r3, #6]

}
 800a902:	bf00      	nop
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	bc80      	pop	{r7}
 800a90a:	4770      	bx	lr

0800a90c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a916:	2180      	movs	r1, #128	@ 0x80
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fc2d 	bl	800b178 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a91e:	2100      	movs	r1, #0
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 fc29 	bl	800b178 <USBD_LL_StallEP>
}
 800a926:	bf00      	nop
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b086      	sub	sp, #24
 800a932:	af00      	add	r7, sp, #0
 800a934:	60f8      	str	r0, [r7, #12]
 800a936:	60b9      	str	r1, [r7, #8]
 800a938:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a93a:	2300      	movs	r3, #0
 800a93c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d032      	beq.n	800a9aa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 f834 	bl	800a9b2 <USBD_GetLen>
 800a94a:	4603      	mov	r3, r0
 800a94c:	3301      	adds	r3, #1
 800a94e:	b29b      	uxth	r3, r3
 800a950:	005b      	lsls	r3, r3, #1
 800a952:	b29a      	uxth	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a958:	7dfb      	ldrb	r3, [r7, #23]
 800a95a:	1c5a      	adds	r2, r3, #1
 800a95c:	75fa      	strb	r2, [r7, #23]
 800a95e:	461a      	mov	r2, r3
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	4413      	add	r3, r2
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	7812      	ldrb	r2, [r2, #0]
 800a968:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	75fa      	strb	r2, [r7, #23]
 800a970:	461a      	mov	r2, r3
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	4413      	add	r3, r2
 800a976:	2203      	movs	r2, #3
 800a978:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a97a:	e012      	b.n	800a9a2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	60fa      	str	r2, [r7, #12]
 800a982:	7dfa      	ldrb	r2, [r7, #23]
 800a984:	1c51      	adds	r1, r2, #1
 800a986:	75f9      	strb	r1, [r7, #23]
 800a988:	4611      	mov	r1, r2
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	440a      	add	r2, r1
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a992:	7dfb      	ldrb	r3, [r7, #23]
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	75fa      	strb	r2, [r7, #23]
 800a998:	461a      	mov	r2, r3
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	4413      	add	r3, r2
 800a99e:	2200      	movs	r2, #0
 800a9a0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1e8      	bne.n	800a97c <USBD_GetString+0x4e>
    }
  }
}
 800a9aa:	bf00      	nop
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b085      	sub	sp, #20
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a9be:	e005      	b.n	800a9cc <USBD_GetLen+0x1a>
  {
    len++;
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1f5      	bne.n	800a9c0 <USBD_GetLen+0xe>
  }

  return len;
 800a9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bc80      	pop	{r7}
 800a9de:	4770      	bx	lr

0800a9e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a9f6:	88fa      	ldrh	r2, [r7, #6]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a9fc:	88fa      	ldrh	r2, [r7, #6]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa02:	88fb      	ldrh	r3, [r7, #6]
 800aa04:	68ba      	ldr	r2, [r7, #8]
 800aa06:	2100      	movs	r1, #0
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f000 fc3d 	bl	800b288 <USBD_LL_Transmit>

  return USBD_OK;
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	4613      	mov	r3, r2
 800aa24:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa26:	88fb      	ldrh	r3, [r7, #6]
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f000 fc2b 	bl	800b288 <USBD_LL_Transmit>

  return USBD_OK;
 800aa32:	2300      	movs	r3, #0
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	4613      	mov	r3, r2
 800aa48:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2203      	movs	r2, #3
 800aa4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800aa52:	88fa      	ldrh	r2, [r7, #6]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800aa5a:	88fa      	ldrh	r2, [r7, #6]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa62:	88fb      	ldrh	r3, [r7, #6]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	2100      	movs	r1, #0
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 fc30 	bl	800b2ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	4613      	mov	r3, r2
 800aa84:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa86:	88fb      	ldrh	r3, [r7, #6]
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f000 fc1e 	bl	800b2ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3710      	adds	r7, #16
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2204      	movs	r2, #4
 800aaa8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aaac:	2300      	movs	r3, #0
 800aaae:	2200      	movs	r2, #0
 800aab0:	2100      	movs	r1, #0
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fbe8 	bl	800b288 <USBD_LL_Transmit>

  return USBD_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b082      	sub	sp, #8
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2205      	movs	r2, #5
 800aace:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aad2:	2300      	movs	r3, #0
 800aad4:	2200      	movs	r2, #0
 800aad6:	2100      	movs	r1, #0
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 fbf8 	bl	800b2ce <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800aaec:	2200      	movs	r2, #0
 800aaee:	4912      	ldr	r1, [pc, #72]	@ (800ab38 <MX_USB_DEVICE_Init+0x50>)
 800aaf0:	4812      	ldr	r0, [pc, #72]	@ (800ab3c <MX_USB_DEVICE_Init+0x54>)
 800aaf2:	f7fe ff63 	bl	80099bc <USBD_Init>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aafc:	f7f6 fd52 	bl	80015a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ab00:	490f      	ldr	r1, [pc, #60]	@ (800ab40 <MX_USB_DEVICE_Init+0x58>)
 800ab02:	480e      	ldr	r0, [pc, #56]	@ (800ab3c <MX_USB_DEVICE_Init+0x54>)
 800ab04:	f7fe ff85 	bl	8009a12 <USBD_RegisterClass>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d001      	beq.n	800ab12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab0e:	f7f6 fd49 	bl	80015a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ab12:	490c      	ldr	r1, [pc, #48]	@ (800ab44 <MX_USB_DEVICE_Init+0x5c>)
 800ab14:	4809      	ldr	r0, [pc, #36]	@ (800ab3c <MX_USB_DEVICE_Init+0x54>)
 800ab16:	f7fe fee5 	bl	80098e4 <USBD_CDC_RegisterInterface>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ab20:	f7f6 fd40 	bl	80015a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ab24:	4805      	ldr	r0, [pc, #20]	@ (800ab3c <MX_USB_DEVICE_Init+0x54>)
 800ab26:	f7fe ff8d 	bl	8009a44 <USBD_Start>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ab30:	f7f6 fd38 	bl	80015a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ab34:	bf00      	nop
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	2000012c 	.word	0x2000012c
 800ab3c:	200003a4 	.word	0x200003a4
 800ab40:	20000018 	.word	0x20000018
 800ab44:	2000011c 	.word	0x2000011c

0800ab48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	4905      	ldr	r1, [pc, #20]	@ (800ab64 <CDC_Init_FS+0x1c>)
 800ab50:	4805      	ldr	r0, [pc, #20]	@ (800ab68 <CDC_Init_FS+0x20>)
 800ab52:	f7fe fedd 	bl	8009910 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ab56:	4905      	ldr	r1, [pc, #20]	@ (800ab6c <CDC_Init_FS+0x24>)
 800ab58:	4803      	ldr	r0, [pc, #12]	@ (800ab68 <CDC_Init_FS+0x20>)
 800ab5a:	f7fe fef2 	bl	8009942 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ab5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	20000a68 	.word	0x20000a68
 800ab68:	200003a4 	.word	0x200003a4
 800ab6c:	20000668 	.word	0x20000668

0800ab70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ab70:	b480      	push	{r7}
 800ab72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ab74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bc80      	pop	{r7}
 800ab7c:	4770      	bx	lr
	...

0800ab80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	4603      	mov	r3, r0
 800ab88:	6039      	str	r1, [r7, #0]
 800ab8a:	71fb      	strb	r3, [r7, #7]
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ab90:	79fb      	ldrb	r3, [r7, #7]
 800ab92:	2b23      	cmp	r3, #35	@ 0x23
 800ab94:	d84a      	bhi.n	800ac2c <CDC_Control_FS+0xac>
 800ab96:	a201      	add	r2, pc, #4	@ (adr r2, 800ab9c <CDC_Control_FS+0x1c>)
 800ab98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab9c:	0800ac2d 	.word	0x0800ac2d
 800aba0:	0800ac2d 	.word	0x0800ac2d
 800aba4:	0800ac2d 	.word	0x0800ac2d
 800aba8:	0800ac2d 	.word	0x0800ac2d
 800abac:	0800ac2d 	.word	0x0800ac2d
 800abb0:	0800ac2d 	.word	0x0800ac2d
 800abb4:	0800ac2d 	.word	0x0800ac2d
 800abb8:	0800ac2d 	.word	0x0800ac2d
 800abbc:	0800ac2d 	.word	0x0800ac2d
 800abc0:	0800ac2d 	.word	0x0800ac2d
 800abc4:	0800ac2d 	.word	0x0800ac2d
 800abc8:	0800ac2d 	.word	0x0800ac2d
 800abcc:	0800ac2d 	.word	0x0800ac2d
 800abd0:	0800ac2d 	.word	0x0800ac2d
 800abd4:	0800ac2d 	.word	0x0800ac2d
 800abd8:	0800ac2d 	.word	0x0800ac2d
 800abdc:	0800ac2d 	.word	0x0800ac2d
 800abe0:	0800ac2d 	.word	0x0800ac2d
 800abe4:	0800ac2d 	.word	0x0800ac2d
 800abe8:	0800ac2d 	.word	0x0800ac2d
 800abec:	0800ac2d 	.word	0x0800ac2d
 800abf0:	0800ac2d 	.word	0x0800ac2d
 800abf4:	0800ac2d 	.word	0x0800ac2d
 800abf8:	0800ac2d 	.word	0x0800ac2d
 800abfc:	0800ac2d 	.word	0x0800ac2d
 800ac00:	0800ac2d 	.word	0x0800ac2d
 800ac04:	0800ac2d 	.word	0x0800ac2d
 800ac08:	0800ac2d 	.word	0x0800ac2d
 800ac0c:	0800ac2d 	.word	0x0800ac2d
 800ac10:	0800ac2d 	.word	0x0800ac2d
 800ac14:	0800ac2d 	.word	0x0800ac2d
 800ac18:	0800ac2d 	.word	0x0800ac2d
 800ac1c:	0800ac2d 	.word	0x0800ac2d
 800ac20:	0800ac2d 	.word	0x0800ac2d
 800ac24:	0800ac2d 	.word	0x0800ac2d
 800ac28:	0800ac2d 	.word	0x0800ac2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ac2c:	bf00      	nop
  }

  return (USBD_OK);
 800ac2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bc80      	pop	{r7}
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop

0800ac3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ac46:	6879      	ldr	r1, [r7, #4]
 800ac48:	4805      	ldr	r0, [pc, #20]	@ (800ac60 <CDC_Receive_FS+0x24>)
 800ac4a:	f7fe fe7a 	bl	8009942 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac4e:	4804      	ldr	r0, [pc, #16]	@ (800ac60 <CDC_Receive_FS+0x24>)
 800ac50:	f7fe fe8a 	bl	8009968 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ac54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	200003a4 	.word	0x200003a4

0800ac64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	6039      	str	r1, [r7, #0]
 800ac6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2212      	movs	r2, #18
 800ac74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ac76:	4b03      	ldr	r3, [pc, #12]	@ (800ac84 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bc80      	pop	{r7}
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	20000148 	.word	0x20000148

0800ac88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	6039      	str	r1, [r7, #0]
 800ac92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	2204      	movs	r2, #4
 800ac98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac9a:	4b03      	ldr	r3, [pc, #12]	@ (800aca8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bc80      	pop	{r7}
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop
 800aca8:	2000015c 	.word	0x2000015c

0800acac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	4603      	mov	r3, r0
 800acb4:	6039      	str	r1, [r7, #0]
 800acb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acb8:	79fb      	ldrb	r3, [r7, #7]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d105      	bne.n	800acca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	4907      	ldr	r1, [pc, #28]	@ (800ace0 <USBD_FS_ProductStrDescriptor+0x34>)
 800acc2:	4808      	ldr	r0, [pc, #32]	@ (800ace4 <USBD_FS_ProductStrDescriptor+0x38>)
 800acc4:	f7ff fe33 	bl	800a92e <USBD_GetString>
 800acc8:	e004      	b.n	800acd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	4904      	ldr	r1, [pc, #16]	@ (800ace0 <USBD_FS_ProductStrDescriptor+0x34>)
 800acce:	4805      	ldr	r0, [pc, #20]	@ (800ace4 <USBD_FS_ProductStrDescriptor+0x38>)
 800acd0:	f7ff fe2d 	bl	800a92e <USBD_GetString>
  }
  return USBD_StrDesc;
 800acd4:	4b02      	ldr	r3, [pc, #8]	@ (800ace0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	20000e68 	.word	0x20000e68
 800ace4:	0800be10 	.word	0x0800be10

0800ace8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	6039      	str	r1, [r7, #0]
 800acf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	4904      	ldr	r1, [pc, #16]	@ (800ad08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800acf8:	4804      	ldr	r0, [pc, #16]	@ (800ad0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800acfa:	f7ff fe18 	bl	800a92e <USBD_GetString>
  return USBD_StrDesc;
 800acfe:	4b02      	ldr	r3, [pc, #8]	@ (800ad08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20000e68 	.word	0x20000e68
 800ad0c:	0800be28 	.word	0x0800be28

0800ad10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	6039      	str	r1, [r7, #0]
 800ad1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	221a      	movs	r2, #26
 800ad20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ad22:	f000 f843 	bl	800adac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ad26:	4b02      	ldr	r3, [pc, #8]	@ (800ad30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	20000160 	.word	0x20000160

0800ad34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	6039      	str	r1, [r7, #0]
 800ad3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad40:	79fb      	ldrb	r3, [r7, #7]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d105      	bne.n	800ad52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	4907      	ldr	r1, [pc, #28]	@ (800ad68 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad4a:	4808      	ldr	r0, [pc, #32]	@ (800ad6c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad4c:	f7ff fdef 	bl	800a92e <USBD_GetString>
 800ad50:	e004      	b.n	800ad5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	4904      	ldr	r1, [pc, #16]	@ (800ad68 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ad56:	4805      	ldr	r0, [pc, #20]	@ (800ad6c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ad58:	f7ff fde9 	bl	800a92e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad5c:	4b02      	ldr	r3, [pc, #8]	@ (800ad68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20000e68 	.word	0x20000e68
 800ad6c:	0800be3c 	.word	0x0800be3c

0800ad70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	4603      	mov	r3, r0
 800ad78:	6039      	str	r1, [r7, #0]
 800ad7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d105      	bne.n	800ad8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	4907      	ldr	r1, [pc, #28]	@ (800ada4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad86:	4808      	ldr	r0, [pc, #32]	@ (800ada8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad88:	f7ff fdd1 	bl	800a92e <USBD_GetString>
 800ad8c:	e004      	b.n	800ad98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	4904      	ldr	r1, [pc, #16]	@ (800ada4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ad92:	4805      	ldr	r0, [pc, #20]	@ (800ada8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ad94:	f7ff fdcb 	bl	800a92e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad98:	4b02      	ldr	r3, [pc, #8]	@ (800ada4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3708      	adds	r7, #8
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	20000e68 	.word	0x20000e68
 800ada8:	0800be48 	.word	0x0800be48

0800adac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800adb2:	4b0f      	ldr	r3, [pc, #60]	@ (800adf0 <Get_SerialNum+0x44>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800adb8:	4b0e      	ldr	r3, [pc, #56]	@ (800adf4 <Get_SerialNum+0x48>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800adbe:	4b0e      	ldr	r3, [pc, #56]	@ (800adf8 <Get_SerialNum+0x4c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4413      	add	r3, r2
 800adca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d009      	beq.n	800ade6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800add2:	2208      	movs	r2, #8
 800add4:	4909      	ldr	r1, [pc, #36]	@ (800adfc <Get_SerialNum+0x50>)
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f000 f814 	bl	800ae04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800addc:	2204      	movs	r2, #4
 800adde:	4908      	ldr	r1, [pc, #32]	@ (800ae00 <Get_SerialNum+0x54>)
 800ade0:	68b8      	ldr	r0, [r7, #8]
 800ade2:	f000 f80f 	bl	800ae04 <IntToUnicode>
  }
}
 800ade6:	bf00      	nop
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	1ffff7e8 	.word	0x1ffff7e8
 800adf4:	1ffff7ec 	.word	0x1ffff7ec
 800adf8:	1ffff7f0 	.word	0x1ffff7f0
 800adfc:	20000162 	.word	0x20000162
 800ae00:	20000172 	.word	0x20000172

0800ae04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b087      	sub	sp, #28
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae12:	2300      	movs	r3, #0
 800ae14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae16:	2300      	movs	r3, #0
 800ae18:	75fb      	strb	r3, [r7, #23]
 800ae1a:	e027      	b.n	800ae6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	0f1b      	lsrs	r3, r3, #28
 800ae20:	2b09      	cmp	r3, #9
 800ae22:	d80b      	bhi.n	800ae3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	0f1b      	lsrs	r3, r3, #28
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	4619      	mov	r1, r3
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	440b      	add	r3, r1
 800ae34:	3230      	adds	r2, #48	@ 0x30
 800ae36:	b2d2      	uxtb	r2, r2
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	e00a      	b.n	800ae52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	0f1b      	lsrs	r3, r3, #28
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	7dfb      	ldrb	r3, [r7, #23]
 800ae44:	005b      	lsls	r3, r3, #1
 800ae46:	4619      	mov	r1, r3
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	440b      	add	r3, r1
 800ae4c:	3237      	adds	r2, #55	@ 0x37
 800ae4e:	b2d2      	uxtb	r2, r2
 800ae50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	011b      	lsls	r3, r3, #4
 800ae56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ae58:	7dfb      	ldrb	r3, [r7, #23]
 800ae5a:	005b      	lsls	r3, r3, #1
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	4413      	add	r3, r2
 800ae62:	2200      	movs	r2, #0
 800ae64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	75fb      	strb	r3, [r7, #23]
 800ae6c:	7dfa      	ldrb	r2, [r7, #23]
 800ae6e:	79fb      	ldrb	r3, [r7, #7]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d3d3      	bcc.n	800ae1c <IntToUnicode+0x18>
  }
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop
 800ae78:	371c      	adds	r7, #28
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bc80      	pop	{r7}
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a0d      	ldr	r2, [pc, #52]	@ (800aec4 <HAL_PCD_MspInit+0x44>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d113      	bne.n	800aeba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ae92:	4b0d      	ldr	r3, [pc, #52]	@ (800aec8 <HAL_PCD_MspInit+0x48>)
 800ae94:	69db      	ldr	r3, [r3, #28]
 800ae96:	4a0c      	ldr	r2, [pc, #48]	@ (800aec8 <HAL_PCD_MspInit+0x48>)
 800ae98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ae9c:	61d3      	str	r3, [r2, #28]
 800ae9e:	4b0a      	ldr	r3, [pc, #40]	@ (800aec8 <HAL_PCD_MspInit+0x48>)
 800aea0:	69db      	ldr	r3, [r3, #28]
 800aea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aea6:	60fb      	str	r3, [r7, #12]
 800aea8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800aeaa:	2200      	movs	r2, #0
 800aeac:	2100      	movs	r1, #0
 800aeae:	2014      	movs	r0, #20
 800aeb0:	f7f7 fb97 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800aeb4:	2014      	movs	r0, #20
 800aeb6:	f7f7 fbb0 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aeba:	bf00      	nop
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	40005c00 	.word	0x40005c00
 800aec8:	40021000 	.word	0x40021000

0800aecc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800aee0:	4619      	mov	r1, r3
 800aee2:	4610      	mov	r0, r2
 800aee4:	f7fe fdf6 	bl	8009ad4 <USBD_LL_SetupStage>
}
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	460b      	mov	r3, r1
 800aefa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800af02:	78fa      	ldrb	r2, [r7, #3]
 800af04:	6879      	ldr	r1, [r7, #4]
 800af06:	4613      	mov	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4413      	add	r3, r2
 800af0c:	00db      	lsls	r3, r3, #3
 800af0e:	440b      	add	r3, r1
 800af10:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	78fb      	ldrb	r3, [r7, #3]
 800af18:	4619      	mov	r1, r3
 800af1a:	f7fe fe28 	bl	8009b6e <USBD_LL_DataOutStage>
}
 800af1e:	bf00      	nop
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b082      	sub	sp, #8
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	460b      	mov	r3, r1
 800af30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800af38:	78fa      	ldrb	r2, [r7, #3]
 800af3a:	6879      	ldr	r1, [r7, #4]
 800af3c:	4613      	mov	r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4413      	add	r3, r2
 800af42:	00db      	lsls	r3, r3, #3
 800af44:	440b      	add	r3, r1
 800af46:	3324      	adds	r3, #36	@ 0x24
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	78fb      	ldrb	r3, [r7, #3]
 800af4c:	4619      	mov	r1, r3
 800af4e:	f7fe fe7f 	bl	8009c50 <USBD_LL_DataInStage>
}
 800af52:	bf00      	nop
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b082      	sub	sp, #8
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fe ff8f 	bl	8009e8c <USBD_LL_SOF>
}
 800af6e:	bf00      	nop
 800af70:	3708      	adds	r7, #8
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af7e:	2301      	movs	r3, #1
 800af80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	799b      	ldrb	r3, [r3, #6]
 800af86:	2b02      	cmp	r3, #2
 800af88:	d001      	beq.n	800af8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800af8a:	f7f6 fb0b 	bl	80015a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af94:	7bfa      	ldrb	r2, [r7, #15]
 800af96:	4611      	mov	r1, r2
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fe ff3f 	bl	8009e1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7fe fef8 	bl	8009d9a <USBD_LL_Reset>
}
 800afaa:	bf00      	nop
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
	...

0800afb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fe ff39 	bl	8009e3a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	7a9b      	ldrb	r3, [r3, #10]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d005      	beq.n	800afdc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afd0:	4b04      	ldr	r3, [pc, #16]	@ (800afe4 <HAL_PCD_SuspendCallback+0x30>)
 800afd2:	691b      	ldr	r3, [r3, #16]
 800afd4:	4a03      	ldr	r2, [pc, #12]	@ (800afe4 <HAL_PCD_SuspendCallback+0x30>)
 800afd6:	f043 0306 	orr.w	r3, r3, #6
 800afda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800afdc:	bf00      	nop
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	e000ed00 	.word	0xe000ed00

0800afe8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe ff33 	bl	8009e62 <USBD_LL_Resume>
}
 800affc:	bf00      	nop
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b00c:	4a28      	ldr	r2, [pc, #160]	@ (800b0b0 <USBD_LL_Init+0xac>)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a26      	ldr	r2, [pc, #152]	@ (800b0b0 <USBD_LL_Init+0xac>)
 800b018:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b01c:	4b24      	ldr	r3, [pc, #144]	@ (800b0b0 <USBD_LL_Init+0xac>)
 800b01e:	4a25      	ldr	r2, [pc, #148]	@ (800b0b4 <USBD_LL_Init+0xb0>)
 800b020:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b022:	4b23      	ldr	r3, [pc, #140]	@ (800b0b0 <USBD_LL_Init+0xac>)
 800b024:	2208      	movs	r2, #8
 800b026:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b028:	4b21      	ldr	r3, [pc, #132]	@ (800b0b0 <USBD_LL_Init+0xac>)
 800b02a:	2202      	movs	r2, #2
 800b02c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b02e:	4b20      	ldr	r3, [pc, #128]	@ (800b0b0 <USBD_LL_Init+0xac>)
 800b030:	2200      	movs	r2, #0
 800b032:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b034:	4b1e      	ldr	r3, [pc, #120]	@ (800b0b0 <USBD_LL_Init+0xac>)
 800b036:	2200      	movs	r2, #0
 800b038:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b03a:	4b1d      	ldr	r3, [pc, #116]	@ (800b0b0 <USBD_LL_Init+0xac>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b040:	481b      	ldr	r0, [pc, #108]	@ (800b0b0 <USBD_LL_Init+0xac>)
 800b042:	f7f8 fefe 	bl	8003e42 <HAL_PCD_Init>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b04c:	f7f6 faaa 	bl	80015a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b056:	2318      	movs	r3, #24
 800b058:	2200      	movs	r2, #0
 800b05a:	2100      	movs	r1, #0
 800b05c:	f7fa fc0f 	bl	800587e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b066:	2358      	movs	r3, #88	@ 0x58
 800b068:	2200      	movs	r2, #0
 800b06a:	2180      	movs	r1, #128	@ 0x80
 800b06c:	f7fa fc07 	bl	800587e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b076:	23c0      	movs	r3, #192	@ 0xc0
 800b078:	2200      	movs	r2, #0
 800b07a:	2181      	movs	r1, #129	@ 0x81
 800b07c:	f7fa fbff 	bl	800587e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b086:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b08a:	2200      	movs	r2, #0
 800b08c:	2101      	movs	r1, #1
 800b08e:	f7fa fbf6 	bl	800587e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b098:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b09c:	2200      	movs	r2, #0
 800b09e:	2182      	movs	r1, #130	@ 0x82
 800b0a0:	f7fa fbed 	bl	800587e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20001068 	.word	0x20001068
 800b0b4:	40005c00 	.word	0x40005c00

0800b0b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7f8 ffad 	bl	800402e <HAL_PCD_Start>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 f94e 	bl	800b37c <USBD_Get_USB_Status>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	4608      	mov	r0, r1
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	70fb      	strb	r3, [r7, #3]
 800b100:	460b      	mov	r3, r1
 800b102:	70bb      	strb	r3, [r7, #2]
 800b104:	4613      	mov	r3, r2
 800b106:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b116:	78bb      	ldrb	r3, [r7, #2]
 800b118:	883a      	ldrh	r2, [r7, #0]
 800b11a:	78f9      	ldrb	r1, [r7, #3]
 800b11c:	f7f9 f901 	bl	8004322 <HAL_PCD_EP_Open>
 800b120:	4603      	mov	r3, r0
 800b122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b124:	7bfb      	ldrb	r3, [r7, #15]
 800b126:	4618      	mov	r0, r3
 800b128:	f000 f928 	bl	800b37c <USBD_Get_USB_Status>
 800b12c:	4603      	mov	r3, r0
 800b12e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b130:	7bbb      	ldrb	r3, [r7, #14]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b084      	sub	sp, #16
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	460b      	mov	r3, r1
 800b144:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b14a:	2300      	movs	r3, #0
 800b14c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b154:	78fa      	ldrb	r2, [r7, #3]
 800b156:	4611      	mov	r1, r2
 800b158:	4618      	mov	r0, r3
 800b15a:	f7f9 f93f 	bl	80043dc <HAL_PCD_EP_Close>
 800b15e:	4603      	mov	r3, r0
 800b160:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	4618      	mov	r0, r3
 800b166:	f000 f909 	bl	800b37c <USBD_Get_USB_Status>
 800b16a:	4603      	mov	r3, r0
 800b16c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b16e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b192:	78fa      	ldrb	r2, [r7, #3]
 800b194:	4611      	mov	r1, r2
 800b196:	4618      	mov	r0, r3
 800b198:	f7f9 f9e7 	bl	800456a <HAL_PCD_EP_SetStall>
 800b19c:	4603      	mov	r3, r0
 800b19e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f8ea 	bl	800b37c <USBD_Get_USB_Status>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1d0:	78fa      	ldrb	r2, [r7, #3]
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7f9 fa28 	bl	800462a <HAL_PCD_EP_ClrStall>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 f8cb 	bl	800b37c <USBD_Get_USB_Status>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b206:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	da0b      	bge.n	800b228 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b210:	78fb      	ldrb	r3, [r7, #3]
 800b212:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b216:	68f9      	ldr	r1, [r7, #12]
 800b218:	4613      	mov	r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	4413      	add	r3, r2
 800b21e:	00db      	lsls	r3, r3, #3
 800b220:	440b      	add	r3, r1
 800b222:	3312      	adds	r3, #18
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	e00b      	b.n	800b240 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b228:	78fb      	ldrb	r3, [r7, #3]
 800b22a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b22e:	68f9      	ldr	r1, [r7, #12]
 800b230:	4613      	mov	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	4413      	add	r3, r2
 800b236:	00db      	lsls	r3, r3, #3
 800b238:	440b      	add	r3, r1
 800b23a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b23e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	bc80      	pop	{r7}
 800b248:	4770      	bx	lr

0800b24a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b084      	sub	sp, #16
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	460b      	mov	r3, r1
 800b254:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b256:	2300      	movs	r3, #0
 800b258:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b264:	78fa      	ldrb	r2, [r7, #3]
 800b266:	4611      	mov	r1, r2
 800b268:	4618      	mov	r0, r3
 800b26a:	f7f9 f836 	bl	80042da <HAL_PCD_SetAddress>
 800b26e:	4603      	mov	r3, r0
 800b270:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b272:	7bfb      	ldrb	r3, [r7, #15]
 800b274:	4618      	mov	r0, r3
 800b276:	f000 f881 	bl	800b37c <USBD_Get_USB_Status>
 800b27a:	4603      	mov	r3, r0
 800b27c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b27e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	607a      	str	r2, [r7, #4]
 800b292:	461a      	mov	r2, r3
 800b294:	460b      	mov	r3, r1
 800b296:	72fb      	strb	r3, [r7, #11]
 800b298:	4613      	mov	r3, r2
 800b29a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b2aa:	893b      	ldrh	r3, [r7, #8]
 800b2ac:	7af9      	ldrb	r1, [r7, #11]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	f7f9 f924 	bl	80044fc <HAL_PCD_EP_Transmit>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 f85e 	bl	800b37c <USBD_Get_USB_Status>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2c4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b086      	sub	sp, #24
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	60f8      	str	r0, [r7, #12]
 800b2d6:	607a      	str	r2, [r7, #4]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	460b      	mov	r3, r1
 800b2dc:	72fb      	strb	r3, [r7, #11]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b2f0:	893b      	ldrh	r3, [r7, #8]
 800b2f2:	7af9      	ldrb	r1, [r7, #11]
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	f7f9 f8b9 	bl	800446c <HAL_PCD_EP_Receive>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2fe:	7dfb      	ldrb	r3, [r7, #23]
 800b300:	4618      	mov	r0, r3
 800b302:	f000 f83b 	bl	800b37c <USBD_Get_USB_Status>
 800b306:	4603      	mov	r3, r0
 800b308:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b30a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3718      	adds	r7, #24
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	460b      	mov	r3, r1
 800b31e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b326:	78fa      	ldrb	r2, [r7, #3]
 800b328:	4611      	mov	r1, r2
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7f9 f8cf 	bl	80044ce <HAL_PCD_EP_GetRxCount>
 800b330:	4603      	mov	r3, r0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b344:	4b02      	ldr	r3, [pc, #8]	@ (800b350 <USBD_static_malloc+0x14>)
}
 800b346:	4618      	mov	r0, r3
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bc80      	pop	{r7}
 800b34e:	4770      	bx	lr
 800b350:	20001340 	.word	0x20001340

0800b354 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]

}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	bc80      	pop	{r7}
 800b364:	4770      	bx	lr

0800b366 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	460b      	mov	r3, r1
 800b370:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b372:	bf00      	nop
 800b374:	370c      	adds	r7, #12
 800b376:	46bd      	mov	sp, r7
 800b378:	bc80      	pop	{r7}
 800b37a:	4770      	bx	lr

0800b37c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b38a:	79fb      	ldrb	r3, [r7, #7]
 800b38c:	2b03      	cmp	r3, #3
 800b38e:	d817      	bhi.n	800b3c0 <USBD_Get_USB_Status+0x44>
 800b390:	a201      	add	r2, pc, #4	@ (adr r2, 800b398 <USBD_Get_USB_Status+0x1c>)
 800b392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b396:	bf00      	nop
 800b398:	0800b3a9 	.word	0x0800b3a9
 800b39c:	0800b3af 	.word	0x0800b3af
 800b3a0:	0800b3b5 	.word	0x0800b3b5
 800b3a4:	0800b3bb 	.word	0x0800b3bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ac:	e00b      	b.n	800b3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b2:	e008      	b.n	800b3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b8:	e005      	b.n	800b3c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b3be:	e002      	b.n	800b3c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c4:	bf00      	nop
  }
  return usb_status;
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3714      	adds	r7, #20
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bc80      	pop	{r7}
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop

0800b3d4 <sniprintf>:
 800b3d4:	b40c      	push	{r2, r3}
 800b3d6:	b530      	push	{r4, r5, lr}
 800b3d8:	4b17      	ldr	r3, [pc, #92]	@ (800b438 <sniprintf+0x64>)
 800b3da:	1e0c      	subs	r4, r1, #0
 800b3dc:	681d      	ldr	r5, [r3, #0]
 800b3de:	b09d      	sub	sp, #116	@ 0x74
 800b3e0:	da08      	bge.n	800b3f4 <sniprintf+0x20>
 800b3e2:	238b      	movs	r3, #139	@ 0x8b
 800b3e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3e8:	602b      	str	r3, [r5, #0]
 800b3ea:	b01d      	add	sp, #116	@ 0x74
 800b3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3f0:	b002      	add	sp, #8
 800b3f2:	4770      	bx	lr
 800b3f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b3f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b3fc:	bf0c      	ite	eq
 800b3fe:	4623      	moveq	r3, r4
 800b400:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b404:	9304      	str	r3, [sp, #16]
 800b406:	9307      	str	r3, [sp, #28]
 800b408:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b40c:	9002      	str	r0, [sp, #8]
 800b40e:	9006      	str	r0, [sp, #24]
 800b410:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b414:	4628      	mov	r0, r5
 800b416:	ab21      	add	r3, sp, #132	@ 0x84
 800b418:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b41a:	a902      	add	r1, sp, #8
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	f000 f89d 	bl	800b55c <_svfiprintf_r>
 800b422:	1c43      	adds	r3, r0, #1
 800b424:	bfbc      	itt	lt
 800b426:	238b      	movlt	r3, #139	@ 0x8b
 800b428:	602b      	strlt	r3, [r5, #0]
 800b42a:	2c00      	cmp	r4, #0
 800b42c:	d0dd      	beq.n	800b3ea <sniprintf+0x16>
 800b42e:	2200      	movs	r2, #0
 800b430:	9b02      	ldr	r3, [sp, #8]
 800b432:	701a      	strb	r2, [r3, #0]
 800b434:	e7d9      	b.n	800b3ea <sniprintf+0x16>
 800b436:	bf00      	nop
 800b438:	2000017c 	.word	0x2000017c

0800b43c <memset>:
 800b43c:	4603      	mov	r3, r0
 800b43e:	4402      	add	r2, r0
 800b440:	4293      	cmp	r3, r2
 800b442:	d100      	bne.n	800b446 <memset+0xa>
 800b444:	4770      	bx	lr
 800b446:	f803 1b01 	strb.w	r1, [r3], #1
 800b44a:	e7f9      	b.n	800b440 <memset+0x4>

0800b44c <__errno>:
 800b44c:	4b01      	ldr	r3, [pc, #4]	@ (800b454 <__errno+0x8>)
 800b44e:	6818      	ldr	r0, [r3, #0]
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	2000017c 	.word	0x2000017c

0800b458 <__libc_init_array>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	2600      	movs	r6, #0
 800b45c:	4d0c      	ldr	r5, [pc, #48]	@ (800b490 <__libc_init_array+0x38>)
 800b45e:	4c0d      	ldr	r4, [pc, #52]	@ (800b494 <__libc_init_array+0x3c>)
 800b460:	1b64      	subs	r4, r4, r5
 800b462:	10a4      	asrs	r4, r4, #2
 800b464:	42a6      	cmp	r6, r4
 800b466:	d109      	bne.n	800b47c <__libc_init_array+0x24>
 800b468:	f000 fc78 	bl	800bd5c <_init>
 800b46c:	2600      	movs	r6, #0
 800b46e:	4d0a      	ldr	r5, [pc, #40]	@ (800b498 <__libc_init_array+0x40>)
 800b470:	4c0a      	ldr	r4, [pc, #40]	@ (800b49c <__libc_init_array+0x44>)
 800b472:	1b64      	subs	r4, r4, r5
 800b474:	10a4      	asrs	r4, r4, #2
 800b476:	42a6      	cmp	r6, r4
 800b478:	d105      	bne.n	800b486 <__libc_init_array+0x2e>
 800b47a:	bd70      	pop	{r4, r5, r6, pc}
 800b47c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b480:	4798      	blx	r3
 800b482:	3601      	adds	r6, #1
 800b484:	e7ee      	b.n	800b464 <__libc_init_array+0xc>
 800b486:	f855 3b04 	ldr.w	r3, [r5], #4
 800b48a:	4798      	blx	r3
 800b48c:	3601      	adds	r6, #1
 800b48e:	e7f2      	b.n	800b476 <__libc_init_array+0x1e>
 800b490:	0800bec0 	.word	0x0800bec0
 800b494:	0800bec0 	.word	0x0800bec0
 800b498:	0800bec0 	.word	0x0800bec0
 800b49c:	0800bec4 	.word	0x0800bec4

0800b4a0 <__retarget_lock_acquire_recursive>:
 800b4a0:	4770      	bx	lr

0800b4a2 <__retarget_lock_release_recursive>:
 800b4a2:	4770      	bx	lr

0800b4a4 <__ssputs_r>:
 800b4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a8:	461f      	mov	r7, r3
 800b4aa:	688e      	ldr	r6, [r1, #8]
 800b4ac:	4682      	mov	sl, r0
 800b4ae:	42be      	cmp	r6, r7
 800b4b0:	460c      	mov	r4, r1
 800b4b2:	4690      	mov	r8, r2
 800b4b4:	680b      	ldr	r3, [r1, #0]
 800b4b6:	d82d      	bhi.n	800b514 <__ssputs_r+0x70>
 800b4b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4c0:	d026      	beq.n	800b510 <__ssputs_r+0x6c>
 800b4c2:	6965      	ldr	r5, [r4, #20]
 800b4c4:	6909      	ldr	r1, [r1, #16]
 800b4c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4ca:	eba3 0901 	sub.w	r9, r3, r1
 800b4ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4d2:	1c7b      	adds	r3, r7, #1
 800b4d4:	444b      	add	r3, r9
 800b4d6:	106d      	asrs	r5, r5, #1
 800b4d8:	429d      	cmp	r5, r3
 800b4da:	bf38      	it	cc
 800b4dc:	461d      	movcc	r5, r3
 800b4de:	0553      	lsls	r3, r2, #21
 800b4e0:	d527      	bpl.n	800b532 <__ssputs_r+0x8e>
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	f000 f958 	bl	800b798 <_malloc_r>
 800b4e8:	4606      	mov	r6, r0
 800b4ea:	b360      	cbz	r0, 800b546 <__ssputs_r+0xa2>
 800b4ec:	464a      	mov	r2, r9
 800b4ee:	6921      	ldr	r1, [r4, #16]
 800b4f0:	f000 fbd6 	bl	800bca0 <memcpy>
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4fe:	81a3      	strh	r3, [r4, #12]
 800b500:	6126      	str	r6, [r4, #16]
 800b502:	444e      	add	r6, r9
 800b504:	6026      	str	r6, [r4, #0]
 800b506:	463e      	mov	r6, r7
 800b508:	6165      	str	r5, [r4, #20]
 800b50a:	eba5 0509 	sub.w	r5, r5, r9
 800b50e:	60a5      	str	r5, [r4, #8]
 800b510:	42be      	cmp	r6, r7
 800b512:	d900      	bls.n	800b516 <__ssputs_r+0x72>
 800b514:	463e      	mov	r6, r7
 800b516:	4632      	mov	r2, r6
 800b518:	4641      	mov	r1, r8
 800b51a:	6820      	ldr	r0, [r4, #0]
 800b51c:	f000 fb88 	bl	800bc30 <memmove>
 800b520:	2000      	movs	r0, #0
 800b522:	68a3      	ldr	r3, [r4, #8]
 800b524:	1b9b      	subs	r3, r3, r6
 800b526:	60a3      	str	r3, [r4, #8]
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	4433      	add	r3, r6
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b532:	462a      	mov	r2, r5
 800b534:	f000 fb4e 	bl	800bbd4 <_realloc_r>
 800b538:	4606      	mov	r6, r0
 800b53a:	2800      	cmp	r0, #0
 800b53c:	d1e0      	bne.n	800b500 <__ssputs_r+0x5c>
 800b53e:	4650      	mov	r0, sl
 800b540:	6921      	ldr	r1, [r4, #16]
 800b542:	f000 fbbb 	bl	800bcbc <_free_r>
 800b546:	230c      	movs	r3, #12
 800b548:	f8ca 3000 	str.w	r3, [sl]
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b556:	81a3      	strh	r3, [r4, #12]
 800b558:	e7e9      	b.n	800b52e <__ssputs_r+0x8a>
	...

0800b55c <_svfiprintf_r>:
 800b55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b560:	4698      	mov	r8, r3
 800b562:	898b      	ldrh	r3, [r1, #12]
 800b564:	4607      	mov	r7, r0
 800b566:	061b      	lsls	r3, r3, #24
 800b568:	460d      	mov	r5, r1
 800b56a:	4614      	mov	r4, r2
 800b56c:	b09d      	sub	sp, #116	@ 0x74
 800b56e:	d510      	bpl.n	800b592 <_svfiprintf_r+0x36>
 800b570:	690b      	ldr	r3, [r1, #16]
 800b572:	b973      	cbnz	r3, 800b592 <_svfiprintf_r+0x36>
 800b574:	2140      	movs	r1, #64	@ 0x40
 800b576:	f000 f90f 	bl	800b798 <_malloc_r>
 800b57a:	6028      	str	r0, [r5, #0]
 800b57c:	6128      	str	r0, [r5, #16]
 800b57e:	b930      	cbnz	r0, 800b58e <_svfiprintf_r+0x32>
 800b580:	230c      	movs	r3, #12
 800b582:	603b      	str	r3, [r7, #0]
 800b584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b588:	b01d      	add	sp, #116	@ 0x74
 800b58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58e:	2340      	movs	r3, #64	@ 0x40
 800b590:	616b      	str	r3, [r5, #20]
 800b592:	2300      	movs	r3, #0
 800b594:	9309      	str	r3, [sp, #36]	@ 0x24
 800b596:	2320      	movs	r3, #32
 800b598:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b59c:	2330      	movs	r3, #48	@ 0x30
 800b59e:	f04f 0901 	mov.w	r9, #1
 800b5a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b740 <_svfiprintf_r+0x1e4>
 800b5aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5ae:	4623      	mov	r3, r4
 800b5b0:	469a      	mov	sl, r3
 800b5b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5b6:	b10a      	cbz	r2, 800b5bc <_svfiprintf_r+0x60>
 800b5b8:	2a25      	cmp	r2, #37	@ 0x25
 800b5ba:	d1f9      	bne.n	800b5b0 <_svfiprintf_r+0x54>
 800b5bc:	ebba 0b04 	subs.w	fp, sl, r4
 800b5c0:	d00b      	beq.n	800b5da <_svfiprintf_r+0x7e>
 800b5c2:	465b      	mov	r3, fp
 800b5c4:	4622      	mov	r2, r4
 800b5c6:	4629      	mov	r1, r5
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	f7ff ff6b 	bl	800b4a4 <__ssputs_r>
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	f000 80a7 	beq.w	800b722 <_svfiprintf_r+0x1c6>
 800b5d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5d6:	445a      	add	r2, fp
 800b5d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5da:	f89a 3000 	ldrb.w	r3, [sl]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f000 809f 	beq.w	800b722 <_svfiprintf_r+0x1c6>
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ee:	f10a 0a01 	add.w	sl, sl, #1
 800b5f2:	9304      	str	r3, [sp, #16]
 800b5f4:	9307      	str	r3, [sp, #28]
 800b5f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5fc:	4654      	mov	r4, sl
 800b5fe:	2205      	movs	r2, #5
 800b600:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b604:	484e      	ldr	r0, [pc, #312]	@ (800b740 <_svfiprintf_r+0x1e4>)
 800b606:	f000 fb3d 	bl	800bc84 <memchr>
 800b60a:	9a04      	ldr	r2, [sp, #16]
 800b60c:	b9d8      	cbnz	r0, 800b646 <_svfiprintf_r+0xea>
 800b60e:	06d0      	lsls	r0, r2, #27
 800b610:	bf44      	itt	mi
 800b612:	2320      	movmi	r3, #32
 800b614:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b618:	0711      	lsls	r1, r2, #28
 800b61a:	bf44      	itt	mi
 800b61c:	232b      	movmi	r3, #43	@ 0x2b
 800b61e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b622:	f89a 3000 	ldrb.w	r3, [sl]
 800b626:	2b2a      	cmp	r3, #42	@ 0x2a
 800b628:	d015      	beq.n	800b656 <_svfiprintf_r+0xfa>
 800b62a:	4654      	mov	r4, sl
 800b62c:	2000      	movs	r0, #0
 800b62e:	f04f 0c0a 	mov.w	ip, #10
 800b632:	9a07      	ldr	r2, [sp, #28]
 800b634:	4621      	mov	r1, r4
 800b636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b63a:	3b30      	subs	r3, #48	@ 0x30
 800b63c:	2b09      	cmp	r3, #9
 800b63e:	d94b      	bls.n	800b6d8 <_svfiprintf_r+0x17c>
 800b640:	b1b0      	cbz	r0, 800b670 <_svfiprintf_r+0x114>
 800b642:	9207      	str	r2, [sp, #28]
 800b644:	e014      	b.n	800b670 <_svfiprintf_r+0x114>
 800b646:	eba0 0308 	sub.w	r3, r0, r8
 800b64a:	fa09 f303 	lsl.w	r3, r9, r3
 800b64e:	4313      	orrs	r3, r2
 800b650:	46a2      	mov	sl, r4
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	e7d2      	b.n	800b5fc <_svfiprintf_r+0xa0>
 800b656:	9b03      	ldr	r3, [sp, #12]
 800b658:	1d19      	adds	r1, r3, #4
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	9103      	str	r1, [sp, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	bfbb      	ittet	lt
 800b662:	425b      	neglt	r3, r3
 800b664:	f042 0202 	orrlt.w	r2, r2, #2
 800b668:	9307      	strge	r3, [sp, #28]
 800b66a:	9307      	strlt	r3, [sp, #28]
 800b66c:	bfb8      	it	lt
 800b66e:	9204      	strlt	r2, [sp, #16]
 800b670:	7823      	ldrb	r3, [r4, #0]
 800b672:	2b2e      	cmp	r3, #46	@ 0x2e
 800b674:	d10a      	bne.n	800b68c <_svfiprintf_r+0x130>
 800b676:	7863      	ldrb	r3, [r4, #1]
 800b678:	2b2a      	cmp	r3, #42	@ 0x2a
 800b67a:	d132      	bne.n	800b6e2 <_svfiprintf_r+0x186>
 800b67c:	9b03      	ldr	r3, [sp, #12]
 800b67e:	3402      	adds	r4, #2
 800b680:	1d1a      	adds	r2, r3, #4
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	9203      	str	r2, [sp, #12]
 800b686:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b68a:	9305      	str	r3, [sp, #20]
 800b68c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b744 <_svfiprintf_r+0x1e8>
 800b690:	2203      	movs	r2, #3
 800b692:	4650      	mov	r0, sl
 800b694:	7821      	ldrb	r1, [r4, #0]
 800b696:	f000 faf5 	bl	800bc84 <memchr>
 800b69a:	b138      	cbz	r0, 800b6ac <_svfiprintf_r+0x150>
 800b69c:	2240      	movs	r2, #64	@ 0x40
 800b69e:	9b04      	ldr	r3, [sp, #16]
 800b6a0:	eba0 000a 	sub.w	r0, r0, sl
 800b6a4:	4082      	lsls	r2, r0
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	3401      	adds	r4, #1
 800b6aa:	9304      	str	r3, [sp, #16]
 800b6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6b0:	2206      	movs	r2, #6
 800b6b2:	4825      	ldr	r0, [pc, #148]	@ (800b748 <_svfiprintf_r+0x1ec>)
 800b6b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6b8:	f000 fae4 	bl	800bc84 <memchr>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d036      	beq.n	800b72e <_svfiprintf_r+0x1d2>
 800b6c0:	4b22      	ldr	r3, [pc, #136]	@ (800b74c <_svfiprintf_r+0x1f0>)
 800b6c2:	bb1b      	cbnz	r3, 800b70c <_svfiprintf_r+0x1b0>
 800b6c4:	9b03      	ldr	r3, [sp, #12]
 800b6c6:	3307      	adds	r3, #7
 800b6c8:	f023 0307 	bic.w	r3, r3, #7
 800b6cc:	3308      	adds	r3, #8
 800b6ce:	9303      	str	r3, [sp, #12]
 800b6d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d2:	4433      	add	r3, r6
 800b6d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6d6:	e76a      	b.n	800b5ae <_svfiprintf_r+0x52>
 800b6d8:	460c      	mov	r4, r1
 800b6da:	2001      	movs	r0, #1
 800b6dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6e0:	e7a8      	b.n	800b634 <_svfiprintf_r+0xd8>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	f04f 0c0a 	mov.w	ip, #10
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	3401      	adds	r4, #1
 800b6ec:	9305      	str	r3, [sp, #20]
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6f4:	3a30      	subs	r2, #48	@ 0x30
 800b6f6:	2a09      	cmp	r2, #9
 800b6f8:	d903      	bls.n	800b702 <_svfiprintf_r+0x1a6>
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0c6      	beq.n	800b68c <_svfiprintf_r+0x130>
 800b6fe:	9105      	str	r1, [sp, #20]
 800b700:	e7c4      	b.n	800b68c <_svfiprintf_r+0x130>
 800b702:	4604      	mov	r4, r0
 800b704:	2301      	movs	r3, #1
 800b706:	fb0c 2101 	mla	r1, ip, r1, r2
 800b70a:	e7f0      	b.n	800b6ee <_svfiprintf_r+0x192>
 800b70c:	ab03      	add	r3, sp, #12
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	462a      	mov	r2, r5
 800b712:	4638      	mov	r0, r7
 800b714:	4b0e      	ldr	r3, [pc, #56]	@ (800b750 <_svfiprintf_r+0x1f4>)
 800b716:	a904      	add	r1, sp, #16
 800b718:	f3af 8000 	nop.w
 800b71c:	1c42      	adds	r2, r0, #1
 800b71e:	4606      	mov	r6, r0
 800b720:	d1d6      	bne.n	800b6d0 <_svfiprintf_r+0x174>
 800b722:	89ab      	ldrh	r3, [r5, #12]
 800b724:	065b      	lsls	r3, r3, #25
 800b726:	f53f af2d 	bmi.w	800b584 <_svfiprintf_r+0x28>
 800b72a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b72c:	e72c      	b.n	800b588 <_svfiprintf_r+0x2c>
 800b72e:	ab03      	add	r3, sp, #12
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	462a      	mov	r2, r5
 800b734:	4638      	mov	r0, r7
 800b736:	4b06      	ldr	r3, [pc, #24]	@ (800b750 <_svfiprintf_r+0x1f4>)
 800b738:	a904      	add	r1, sp, #16
 800b73a:	f000 f91f 	bl	800b97c <_printf_i>
 800b73e:	e7ed      	b.n	800b71c <_svfiprintf_r+0x1c0>
 800b740:	0800be82 	.word	0x0800be82
 800b744:	0800be88 	.word	0x0800be88
 800b748:	0800be8c 	.word	0x0800be8c
 800b74c:	00000000 	.word	0x00000000
 800b750:	0800b4a5 	.word	0x0800b4a5

0800b754 <sbrk_aligned>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	4e0f      	ldr	r6, [pc, #60]	@ (800b794 <sbrk_aligned+0x40>)
 800b758:	460c      	mov	r4, r1
 800b75a:	6831      	ldr	r1, [r6, #0]
 800b75c:	4605      	mov	r5, r0
 800b75e:	b911      	cbnz	r1, 800b766 <sbrk_aligned+0x12>
 800b760:	f000 fa80 	bl	800bc64 <_sbrk_r>
 800b764:	6030      	str	r0, [r6, #0]
 800b766:	4621      	mov	r1, r4
 800b768:	4628      	mov	r0, r5
 800b76a:	f000 fa7b 	bl	800bc64 <_sbrk_r>
 800b76e:	1c43      	adds	r3, r0, #1
 800b770:	d103      	bne.n	800b77a <sbrk_aligned+0x26>
 800b772:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b776:	4620      	mov	r0, r4
 800b778:	bd70      	pop	{r4, r5, r6, pc}
 800b77a:	1cc4      	adds	r4, r0, #3
 800b77c:	f024 0403 	bic.w	r4, r4, #3
 800b780:	42a0      	cmp	r0, r4
 800b782:	d0f8      	beq.n	800b776 <sbrk_aligned+0x22>
 800b784:	1a21      	subs	r1, r4, r0
 800b786:	4628      	mov	r0, r5
 800b788:	f000 fa6c 	bl	800bc64 <_sbrk_r>
 800b78c:	3001      	adds	r0, #1
 800b78e:	d1f2      	bne.n	800b776 <sbrk_aligned+0x22>
 800b790:	e7ef      	b.n	800b772 <sbrk_aligned+0x1e>
 800b792:	bf00      	nop
 800b794:	2000169c 	.word	0x2000169c

0800b798 <_malloc_r>:
 800b798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b79c:	1ccd      	adds	r5, r1, #3
 800b79e:	f025 0503 	bic.w	r5, r5, #3
 800b7a2:	3508      	adds	r5, #8
 800b7a4:	2d0c      	cmp	r5, #12
 800b7a6:	bf38      	it	cc
 800b7a8:	250c      	movcc	r5, #12
 800b7aa:	2d00      	cmp	r5, #0
 800b7ac:	4606      	mov	r6, r0
 800b7ae:	db01      	blt.n	800b7b4 <_malloc_r+0x1c>
 800b7b0:	42a9      	cmp	r1, r5
 800b7b2:	d904      	bls.n	800b7be <_malloc_r+0x26>
 800b7b4:	230c      	movs	r3, #12
 800b7b6:	6033      	str	r3, [r6, #0]
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b894 <_malloc_r+0xfc>
 800b7c2:	f000 f9fb 	bl	800bbbc <__malloc_lock>
 800b7c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ca:	461c      	mov	r4, r3
 800b7cc:	bb44      	cbnz	r4, 800b820 <_malloc_r+0x88>
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7ff ffbf 	bl	800b754 <sbrk_aligned>
 800b7d6:	1c43      	adds	r3, r0, #1
 800b7d8:	4604      	mov	r4, r0
 800b7da:	d158      	bne.n	800b88e <_malloc_r+0xf6>
 800b7dc:	f8d8 4000 	ldr.w	r4, [r8]
 800b7e0:	4627      	mov	r7, r4
 800b7e2:	2f00      	cmp	r7, #0
 800b7e4:	d143      	bne.n	800b86e <_malloc_r+0xd6>
 800b7e6:	2c00      	cmp	r4, #0
 800b7e8:	d04b      	beq.n	800b882 <_malloc_r+0xea>
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	eb04 0903 	add.w	r9, r4, r3
 800b7f4:	f000 fa36 	bl	800bc64 <_sbrk_r>
 800b7f8:	4581      	cmp	r9, r0
 800b7fa:	d142      	bne.n	800b882 <_malloc_r+0xea>
 800b7fc:	6821      	ldr	r1, [r4, #0]
 800b7fe:	4630      	mov	r0, r6
 800b800:	1a6d      	subs	r5, r5, r1
 800b802:	4629      	mov	r1, r5
 800b804:	f7ff ffa6 	bl	800b754 <sbrk_aligned>
 800b808:	3001      	adds	r0, #1
 800b80a:	d03a      	beq.n	800b882 <_malloc_r+0xea>
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	442b      	add	r3, r5
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	f8d8 3000 	ldr.w	r3, [r8]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	bb62      	cbnz	r2, 800b874 <_malloc_r+0xdc>
 800b81a:	f8c8 7000 	str.w	r7, [r8]
 800b81e:	e00f      	b.n	800b840 <_malloc_r+0xa8>
 800b820:	6822      	ldr	r2, [r4, #0]
 800b822:	1b52      	subs	r2, r2, r5
 800b824:	d420      	bmi.n	800b868 <_malloc_r+0xd0>
 800b826:	2a0b      	cmp	r2, #11
 800b828:	d917      	bls.n	800b85a <_malloc_r+0xc2>
 800b82a:	1961      	adds	r1, r4, r5
 800b82c:	42a3      	cmp	r3, r4
 800b82e:	6025      	str	r5, [r4, #0]
 800b830:	bf18      	it	ne
 800b832:	6059      	strne	r1, [r3, #4]
 800b834:	6863      	ldr	r3, [r4, #4]
 800b836:	bf08      	it	eq
 800b838:	f8c8 1000 	streq.w	r1, [r8]
 800b83c:	5162      	str	r2, [r4, r5]
 800b83e:	604b      	str	r3, [r1, #4]
 800b840:	4630      	mov	r0, r6
 800b842:	f000 f9c1 	bl	800bbc8 <__malloc_unlock>
 800b846:	f104 000b 	add.w	r0, r4, #11
 800b84a:	1d23      	adds	r3, r4, #4
 800b84c:	f020 0007 	bic.w	r0, r0, #7
 800b850:	1ac2      	subs	r2, r0, r3
 800b852:	bf1c      	itt	ne
 800b854:	1a1b      	subne	r3, r3, r0
 800b856:	50a3      	strne	r3, [r4, r2]
 800b858:	e7af      	b.n	800b7ba <_malloc_r+0x22>
 800b85a:	6862      	ldr	r2, [r4, #4]
 800b85c:	42a3      	cmp	r3, r4
 800b85e:	bf0c      	ite	eq
 800b860:	f8c8 2000 	streq.w	r2, [r8]
 800b864:	605a      	strne	r2, [r3, #4]
 800b866:	e7eb      	b.n	800b840 <_malloc_r+0xa8>
 800b868:	4623      	mov	r3, r4
 800b86a:	6864      	ldr	r4, [r4, #4]
 800b86c:	e7ae      	b.n	800b7cc <_malloc_r+0x34>
 800b86e:	463c      	mov	r4, r7
 800b870:	687f      	ldr	r7, [r7, #4]
 800b872:	e7b6      	b.n	800b7e2 <_malloc_r+0x4a>
 800b874:	461a      	mov	r2, r3
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	42a3      	cmp	r3, r4
 800b87a:	d1fb      	bne.n	800b874 <_malloc_r+0xdc>
 800b87c:	2300      	movs	r3, #0
 800b87e:	6053      	str	r3, [r2, #4]
 800b880:	e7de      	b.n	800b840 <_malloc_r+0xa8>
 800b882:	230c      	movs	r3, #12
 800b884:	4630      	mov	r0, r6
 800b886:	6033      	str	r3, [r6, #0]
 800b888:	f000 f99e 	bl	800bbc8 <__malloc_unlock>
 800b88c:	e794      	b.n	800b7b8 <_malloc_r+0x20>
 800b88e:	6005      	str	r5, [r0, #0]
 800b890:	e7d6      	b.n	800b840 <_malloc_r+0xa8>
 800b892:	bf00      	nop
 800b894:	200016a0 	.word	0x200016a0

0800b898 <_printf_common>:
 800b898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b89c:	4616      	mov	r6, r2
 800b89e:	4698      	mov	r8, r3
 800b8a0:	688a      	ldr	r2, [r1, #8]
 800b8a2:	690b      	ldr	r3, [r1, #16]
 800b8a4:	4607      	mov	r7, r0
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	bfb8      	it	lt
 800b8aa:	4613      	movlt	r3, r2
 800b8ac:	6033      	str	r3, [r6, #0]
 800b8ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b8b8:	b10a      	cbz	r2, 800b8be <_printf_common+0x26>
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	6033      	str	r3, [r6, #0]
 800b8be:	6823      	ldr	r3, [r4, #0]
 800b8c0:	0699      	lsls	r1, r3, #26
 800b8c2:	bf42      	ittt	mi
 800b8c4:	6833      	ldrmi	r3, [r6, #0]
 800b8c6:	3302      	addmi	r3, #2
 800b8c8:	6033      	strmi	r3, [r6, #0]
 800b8ca:	6825      	ldr	r5, [r4, #0]
 800b8cc:	f015 0506 	ands.w	r5, r5, #6
 800b8d0:	d106      	bne.n	800b8e0 <_printf_common+0x48>
 800b8d2:	f104 0a19 	add.w	sl, r4, #25
 800b8d6:	68e3      	ldr	r3, [r4, #12]
 800b8d8:	6832      	ldr	r2, [r6, #0]
 800b8da:	1a9b      	subs	r3, r3, r2
 800b8dc:	42ab      	cmp	r3, r5
 800b8de:	dc2b      	bgt.n	800b938 <_printf_common+0xa0>
 800b8e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b8e4:	6822      	ldr	r2, [r4, #0]
 800b8e6:	3b00      	subs	r3, #0
 800b8e8:	bf18      	it	ne
 800b8ea:	2301      	movne	r3, #1
 800b8ec:	0692      	lsls	r2, r2, #26
 800b8ee:	d430      	bmi.n	800b952 <_printf_common+0xba>
 800b8f0:	4641      	mov	r1, r8
 800b8f2:	4638      	mov	r0, r7
 800b8f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b8f8:	47c8      	blx	r9
 800b8fa:	3001      	adds	r0, #1
 800b8fc:	d023      	beq.n	800b946 <_printf_common+0xae>
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	6922      	ldr	r2, [r4, #16]
 800b902:	f003 0306 	and.w	r3, r3, #6
 800b906:	2b04      	cmp	r3, #4
 800b908:	bf14      	ite	ne
 800b90a:	2500      	movne	r5, #0
 800b90c:	6833      	ldreq	r3, [r6, #0]
 800b90e:	f04f 0600 	mov.w	r6, #0
 800b912:	bf08      	it	eq
 800b914:	68e5      	ldreq	r5, [r4, #12]
 800b916:	f104 041a 	add.w	r4, r4, #26
 800b91a:	bf08      	it	eq
 800b91c:	1aed      	subeq	r5, r5, r3
 800b91e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b922:	bf08      	it	eq
 800b924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b928:	4293      	cmp	r3, r2
 800b92a:	bfc4      	itt	gt
 800b92c:	1a9b      	subgt	r3, r3, r2
 800b92e:	18ed      	addgt	r5, r5, r3
 800b930:	42b5      	cmp	r5, r6
 800b932:	d11a      	bne.n	800b96a <_printf_common+0xd2>
 800b934:	2000      	movs	r0, #0
 800b936:	e008      	b.n	800b94a <_printf_common+0xb2>
 800b938:	2301      	movs	r3, #1
 800b93a:	4652      	mov	r2, sl
 800b93c:	4641      	mov	r1, r8
 800b93e:	4638      	mov	r0, r7
 800b940:	47c8      	blx	r9
 800b942:	3001      	adds	r0, #1
 800b944:	d103      	bne.n	800b94e <_printf_common+0xb6>
 800b946:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b94e:	3501      	adds	r5, #1
 800b950:	e7c1      	b.n	800b8d6 <_printf_common+0x3e>
 800b952:	2030      	movs	r0, #48	@ 0x30
 800b954:	18e1      	adds	r1, r4, r3
 800b956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b960:	4422      	add	r2, r4
 800b962:	3302      	adds	r3, #2
 800b964:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b968:	e7c2      	b.n	800b8f0 <_printf_common+0x58>
 800b96a:	2301      	movs	r3, #1
 800b96c:	4622      	mov	r2, r4
 800b96e:	4641      	mov	r1, r8
 800b970:	4638      	mov	r0, r7
 800b972:	47c8      	blx	r9
 800b974:	3001      	adds	r0, #1
 800b976:	d0e6      	beq.n	800b946 <_printf_common+0xae>
 800b978:	3601      	adds	r6, #1
 800b97a:	e7d9      	b.n	800b930 <_printf_common+0x98>

0800b97c <_printf_i>:
 800b97c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b980:	7e0f      	ldrb	r7, [r1, #24]
 800b982:	4691      	mov	r9, r2
 800b984:	2f78      	cmp	r7, #120	@ 0x78
 800b986:	4680      	mov	r8, r0
 800b988:	460c      	mov	r4, r1
 800b98a:	469a      	mov	sl, r3
 800b98c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b98e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b992:	d807      	bhi.n	800b9a4 <_printf_i+0x28>
 800b994:	2f62      	cmp	r7, #98	@ 0x62
 800b996:	d80a      	bhi.n	800b9ae <_printf_i+0x32>
 800b998:	2f00      	cmp	r7, #0
 800b99a:	f000 80d3 	beq.w	800bb44 <_printf_i+0x1c8>
 800b99e:	2f58      	cmp	r7, #88	@ 0x58
 800b9a0:	f000 80ba 	beq.w	800bb18 <_printf_i+0x19c>
 800b9a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b9ac:	e03a      	b.n	800ba24 <_printf_i+0xa8>
 800b9ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b9b2:	2b15      	cmp	r3, #21
 800b9b4:	d8f6      	bhi.n	800b9a4 <_printf_i+0x28>
 800b9b6:	a101      	add	r1, pc, #4	@ (adr r1, 800b9bc <_printf_i+0x40>)
 800b9b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9bc:	0800ba15 	.word	0x0800ba15
 800b9c0:	0800ba29 	.word	0x0800ba29
 800b9c4:	0800b9a5 	.word	0x0800b9a5
 800b9c8:	0800b9a5 	.word	0x0800b9a5
 800b9cc:	0800b9a5 	.word	0x0800b9a5
 800b9d0:	0800b9a5 	.word	0x0800b9a5
 800b9d4:	0800ba29 	.word	0x0800ba29
 800b9d8:	0800b9a5 	.word	0x0800b9a5
 800b9dc:	0800b9a5 	.word	0x0800b9a5
 800b9e0:	0800b9a5 	.word	0x0800b9a5
 800b9e4:	0800b9a5 	.word	0x0800b9a5
 800b9e8:	0800bb2b 	.word	0x0800bb2b
 800b9ec:	0800ba53 	.word	0x0800ba53
 800b9f0:	0800bae5 	.word	0x0800bae5
 800b9f4:	0800b9a5 	.word	0x0800b9a5
 800b9f8:	0800b9a5 	.word	0x0800b9a5
 800b9fc:	0800bb4d 	.word	0x0800bb4d
 800ba00:	0800b9a5 	.word	0x0800b9a5
 800ba04:	0800ba53 	.word	0x0800ba53
 800ba08:	0800b9a5 	.word	0x0800b9a5
 800ba0c:	0800b9a5 	.word	0x0800b9a5
 800ba10:	0800baed 	.word	0x0800baed
 800ba14:	6833      	ldr	r3, [r6, #0]
 800ba16:	1d1a      	adds	r2, r3, #4
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	6032      	str	r2, [r6, #0]
 800ba1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba24:	2301      	movs	r3, #1
 800ba26:	e09e      	b.n	800bb66 <_printf_i+0x1ea>
 800ba28:	6833      	ldr	r3, [r6, #0]
 800ba2a:	6820      	ldr	r0, [r4, #0]
 800ba2c:	1d19      	adds	r1, r3, #4
 800ba2e:	6031      	str	r1, [r6, #0]
 800ba30:	0606      	lsls	r6, r0, #24
 800ba32:	d501      	bpl.n	800ba38 <_printf_i+0xbc>
 800ba34:	681d      	ldr	r5, [r3, #0]
 800ba36:	e003      	b.n	800ba40 <_printf_i+0xc4>
 800ba38:	0645      	lsls	r5, r0, #25
 800ba3a:	d5fb      	bpl.n	800ba34 <_printf_i+0xb8>
 800ba3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ba40:	2d00      	cmp	r5, #0
 800ba42:	da03      	bge.n	800ba4c <_printf_i+0xd0>
 800ba44:	232d      	movs	r3, #45	@ 0x2d
 800ba46:	426d      	negs	r5, r5
 800ba48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba4c:	230a      	movs	r3, #10
 800ba4e:	4859      	ldr	r0, [pc, #356]	@ (800bbb4 <_printf_i+0x238>)
 800ba50:	e011      	b.n	800ba76 <_printf_i+0xfa>
 800ba52:	6821      	ldr	r1, [r4, #0]
 800ba54:	6833      	ldr	r3, [r6, #0]
 800ba56:	0608      	lsls	r0, r1, #24
 800ba58:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba5c:	d402      	bmi.n	800ba64 <_printf_i+0xe8>
 800ba5e:	0649      	lsls	r1, r1, #25
 800ba60:	bf48      	it	mi
 800ba62:	b2ad      	uxthmi	r5, r5
 800ba64:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba66:	6033      	str	r3, [r6, #0]
 800ba68:	bf14      	ite	ne
 800ba6a:	230a      	movne	r3, #10
 800ba6c:	2308      	moveq	r3, #8
 800ba6e:	4851      	ldr	r0, [pc, #324]	@ (800bbb4 <_printf_i+0x238>)
 800ba70:	2100      	movs	r1, #0
 800ba72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba76:	6866      	ldr	r6, [r4, #4]
 800ba78:	2e00      	cmp	r6, #0
 800ba7a:	bfa8      	it	ge
 800ba7c:	6821      	ldrge	r1, [r4, #0]
 800ba7e:	60a6      	str	r6, [r4, #8]
 800ba80:	bfa4      	itt	ge
 800ba82:	f021 0104 	bicge.w	r1, r1, #4
 800ba86:	6021      	strge	r1, [r4, #0]
 800ba88:	b90d      	cbnz	r5, 800ba8e <_printf_i+0x112>
 800ba8a:	2e00      	cmp	r6, #0
 800ba8c:	d04b      	beq.n	800bb26 <_printf_i+0x1aa>
 800ba8e:	4616      	mov	r6, r2
 800ba90:	fbb5 f1f3 	udiv	r1, r5, r3
 800ba94:	fb03 5711 	mls	r7, r3, r1, r5
 800ba98:	5dc7      	ldrb	r7, [r0, r7]
 800ba9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ba9e:	462f      	mov	r7, r5
 800baa0:	42bb      	cmp	r3, r7
 800baa2:	460d      	mov	r5, r1
 800baa4:	d9f4      	bls.n	800ba90 <_printf_i+0x114>
 800baa6:	2b08      	cmp	r3, #8
 800baa8:	d10b      	bne.n	800bac2 <_printf_i+0x146>
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	07df      	lsls	r7, r3, #31
 800baae:	d508      	bpl.n	800bac2 <_printf_i+0x146>
 800bab0:	6923      	ldr	r3, [r4, #16]
 800bab2:	6861      	ldr	r1, [r4, #4]
 800bab4:	4299      	cmp	r1, r3
 800bab6:	bfde      	ittt	le
 800bab8:	2330      	movle	r3, #48	@ 0x30
 800baba:	f806 3c01 	strble.w	r3, [r6, #-1]
 800babe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bac2:	1b92      	subs	r2, r2, r6
 800bac4:	6122      	str	r2, [r4, #16]
 800bac6:	464b      	mov	r3, r9
 800bac8:	4621      	mov	r1, r4
 800baca:	4640      	mov	r0, r8
 800bacc:	f8cd a000 	str.w	sl, [sp]
 800bad0:	aa03      	add	r2, sp, #12
 800bad2:	f7ff fee1 	bl	800b898 <_printf_common>
 800bad6:	3001      	adds	r0, #1
 800bad8:	d14a      	bne.n	800bb70 <_printf_i+0x1f4>
 800bada:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bade:	b004      	add	sp, #16
 800bae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	f043 0320 	orr.w	r3, r3, #32
 800baea:	6023      	str	r3, [r4, #0]
 800baec:	2778      	movs	r7, #120	@ 0x78
 800baee:	4832      	ldr	r0, [pc, #200]	@ (800bbb8 <_printf_i+0x23c>)
 800baf0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	6831      	ldr	r1, [r6, #0]
 800baf8:	061f      	lsls	r7, r3, #24
 800bafa:	f851 5b04 	ldr.w	r5, [r1], #4
 800bafe:	d402      	bmi.n	800bb06 <_printf_i+0x18a>
 800bb00:	065f      	lsls	r7, r3, #25
 800bb02:	bf48      	it	mi
 800bb04:	b2ad      	uxthmi	r5, r5
 800bb06:	6031      	str	r1, [r6, #0]
 800bb08:	07d9      	lsls	r1, r3, #31
 800bb0a:	bf44      	itt	mi
 800bb0c:	f043 0320 	orrmi.w	r3, r3, #32
 800bb10:	6023      	strmi	r3, [r4, #0]
 800bb12:	b11d      	cbz	r5, 800bb1c <_printf_i+0x1a0>
 800bb14:	2310      	movs	r3, #16
 800bb16:	e7ab      	b.n	800ba70 <_printf_i+0xf4>
 800bb18:	4826      	ldr	r0, [pc, #152]	@ (800bbb4 <_printf_i+0x238>)
 800bb1a:	e7e9      	b.n	800baf0 <_printf_i+0x174>
 800bb1c:	6823      	ldr	r3, [r4, #0]
 800bb1e:	f023 0320 	bic.w	r3, r3, #32
 800bb22:	6023      	str	r3, [r4, #0]
 800bb24:	e7f6      	b.n	800bb14 <_printf_i+0x198>
 800bb26:	4616      	mov	r6, r2
 800bb28:	e7bd      	b.n	800baa6 <_printf_i+0x12a>
 800bb2a:	6833      	ldr	r3, [r6, #0]
 800bb2c:	6825      	ldr	r5, [r4, #0]
 800bb2e:	1d18      	adds	r0, r3, #4
 800bb30:	6961      	ldr	r1, [r4, #20]
 800bb32:	6030      	str	r0, [r6, #0]
 800bb34:	062e      	lsls	r6, r5, #24
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	d501      	bpl.n	800bb3e <_printf_i+0x1c2>
 800bb3a:	6019      	str	r1, [r3, #0]
 800bb3c:	e002      	b.n	800bb44 <_printf_i+0x1c8>
 800bb3e:	0668      	lsls	r0, r5, #25
 800bb40:	d5fb      	bpl.n	800bb3a <_printf_i+0x1be>
 800bb42:	8019      	strh	r1, [r3, #0]
 800bb44:	2300      	movs	r3, #0
 800bb46:	4616      	mov	r6, r2
 800bb48:	6123      	str	r3, [r4, #16]
 800bb4a:	e7bc      	b.n	800bac6 <_printf_i+0x14a>
 800bb4c:	6833      	ldr	r3, [r6, #0]
 800bb4e:	2100      	movs	r1, #0
 800bb50:	1d1a      	adds	r2, r3, #4
 800bb52:	6032      	str	r2, [r6, #0]
 800bb54:	681e      	ldr	r6, [r3, #0]
 800bb56:	6862      	ldr	r2, [r4, #4]
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f000 f893 	bl	800bc84 <memchr>
 800bb5e:	b108      	cbz	r0, 800bb64 <_printf_i+0x1e8>
 800bb60:	1b80      	subs	r0, r0, r6
 800bb62:	6060      	str	r0, [r4, #4]
 800bb64:	6863      	ldr	r3, [r4, #4]
 800bb66:	6123      	str	r3, [r4, #16]
 800bb68:	2300      	movs	r3, #0
 800bb6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb6e:	e7aa      	b.n	800bac6 <_printf_i+0x14a>
 800bb70:	4632      	mov	r2, r6
 800bb72:	4649      	mov	r1, r9
 800bb74:	4640      	mov	r0, r8
 800bb76:	6923      	ldr	r3, [r4, #16]
 800bb78:	47d0      	blx	sl
 800bb7a:	3001      	adds	r0, #1
 800bb7c:	d0ad      	beq.n	800bada <_printf_i+0x15e>
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	079b      	lsls	r3, r3, #30
 800bb82:	d413      	bmi.n	800bbac <_printf_i+0x230>
 800bb84:	68e0      	ldr	r0, [r4, #12]
 800bb86:	9b03      	ldr	r3, [sp, #12]
 800bb88:	4298      	cmp	r0, r3
 800bb8a:	bfb8      	it	lt
 800bb8c:	4618      	movlt	r0, r3
 800bb8e:	e7a6      	b.n	800bade <_printf_i+0x162>
 800bb90:	2301      	movs	r3, #1
 800bb92:	4632      	mov	r2, r6
 800bb94:	4649      	mov	r1, r9
 800bb96:	4640      	mov	r0, r8
 800bb98:	47d0      	blx	sl
 800bb9a:	3001      	adds	r0, #1
 800bb9c:	d09d      	beq.n	800bada <_printf_i+0x15e>
 800bb9e:	3501      	adds	r5, #1
 800bba0:	68e3      	ldr	r3, [r4, #12]
 800bba2:	9903      	ldr	r1, [sp, #12]
 800bba4:	1a5b      	subs	r3, r3, r1
 800bba6:	42ab      	cmp	r3, r5
 800bba8:	dcf2      	bgt.n	800bb90 <_printf_i+0x214>
 800bbaa:	e7eb      	b.n	800bb84 <_printf_i+0x208>
 800bbac:	2500      	movs	r5, #0
 800bbae:	f104 0619 	add.w	r6, r4, #25
 800bbb2:	e7f5      	b.n	800bba0 <_printf_i+0x224>
 800bbb4:	0800be93 	.word	0x0800be93
 800bbb8:	0800bea4 	.word	0x0800bea4

0800bbbc <__malloc_lock>:
 800bbbc:	4801      	ldr	r0, [pc, #4]	@ (800bbc4 <__malloc_lock+0x8>)
 800bbbe:	f7ff bc6f 	b.w	800b4a0 <__retarget_lock_acquire_recursive>
 800bbc2:	bf00      	nop
 800bbc4:	20001698 	.word	0x20001698

0800bbc8 <__malloc_unlock>:
 800bbc8:	4801      	ldr	r0, [pc, #4]	@ (800bbd0 <__malloc_unlock+0x8>)
 800bbca:	f7ff bc6a 	b.w	800b4a2 <__retarget_lock_release_recursive>
 800bbce:	bf00      	nop
 800bbd0:	20001698 	.word	0x20001698

0800bbd4 <_realloc_r>:
 800bbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd8:	4680      	mov	r8, r0
 800bbda:	4615      	mov	r5, r2
 800bbdc:	460c      	mov	r4, r1
 800bbde:	b921      	cbnz	r1, 800bbea <_realloc_r+0x16>
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe6:	f7ff bdd7 	b.w	800b798 <_malloc_r>
 800bbea:	b92a      	cbnz	r2, 800bbf8 <_realloc_r+0x24>
 800bbec:	f000 f866 	bl	800bcbc <_free_r>
 800bbf0:	2400      	movs	r4, #0
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbf8:	f000 f8a8 	bl	800bd4c <_malloc_usable_size_r>
 800bbfc:	4285      	cmp	r5, r0
 800bbfe:	4606      	mov	r6, r0
 800bc00:	d802      	bhi.n	800bc08 <_realloc_r+0x34>
 800bc02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc06:	d8f4      	bhi.n	800bbf2 <_realloc_r+0x1e>
 800bc08:	4629      	mov	r1, r5
 800bc0a:	4640      	mov	r0, r8
 800bc0c:	f7ff fdc4 	bl	800b798 <_malloc_r>
 800bc10:	4607      	mov	r7, r0
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d0ec      	beq.n	800bbf0 <_realloc_r+0x1c>
 800bc16:	42b5      	cmp	r5, r6
 800bc18:	462a      	mov	r2, r5
 800bc1a:	4621      	mov	r1, r4
 800bc1c:	bf28      	it	cs
 800bc1e:	4632      	movcs	r2, r6
 800bc20:	f000 f83e 	bl	800bca0 <memcpy>
 800bc24:	4621      	mov	r1, r4
 800bc26:	4640      	mov	r0, r8
 800bc28:	f000 f848 	bl	800bcbc <_free_r>
 800bc2c:	463c      	mov	r4, r7
 800bc2e:	e7e0      	b.n	800bbf2 <_realloc_r+0x1e>

0800bc30 <memmove>:
 800bc30:	4288      	cmp	r0, r1
 800bc32:	b510      	push	{r4, lr}
 800bc34:	eb01 0402 	add.w	r4, r1, r2
 800bc38:	d902      	bls.n	800bc40 <memmove+0x10>
 800bc3a:	4284      	cmp	r4, r0
 800bc3c:	4623      	mov	r3, r4
 800bc3e:	d807      	bhi.n	800bc50 <memmove+0x20>
 800bc40:	1e43      	subs	r3, r0, #1
 800bc42:	42a1      	cmp	r1, r4
 800bc44:	d008      	beq.n	800bc58 <memmove+0x28>
 800bc46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc4e:	e7f8      	b.n	800bc42 <memmove+0x12>
 800bc50:	4601      	mov	r1, r0
 800bc52:	4402      	add	r2, r0
 800bc54:	428a      	cmp	r2, r1
 800bc56:	d100      	bne.n	800bc5a <memmove+0x2a>
 800bc58:	bd10      	pop	{r4, pc}
 800bc5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc62:	e7f7      	b.n	800bc54 <memmove+0x24>

0800bc64 <_sbrk_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	2300      	movs	r3, #0
 800bc68:	4d05      	ldr	r5, [pc, #20]	@ (800bc80 <_sbrk_r+0x1c>)
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	4608      	mov	r0, r1
 800bc6e:	602b      	str	r3, [r5, #0]
 800bc70:	f7f5 fd1a 	bl	80016a8 <_sbrk>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d102      	bne.n	800bc7e <_sbrk_r+0x1a>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	b103      	cbz	r3, 800bc7e <_sbrk_r+0x1a>
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	200016a4 	.word	0x200016a4

0800bc84 <memchr>:
 800bc84:	4603      	mov	r3, r0
 800bc86:	b510      	push	{r4, lr}
 800bc88:	b2c9      	uxtb	r1, r1
 800bc8a:	4402      	add	r2, r0
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	4618      	mov	r0, r3
 800bc90:	d101      	bne.n	800bc96 <memchr+0x12>
 800bc92:	2000      	movs	r0, #0
 800bc94:	e003      	b.n	800bc9e <memchr+0x1a>
 800bc96:	7804      	ldrb	r4, [r0, #0]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	428c      	cmp	r4, r1
 800bc9c:	d1f6      	bne.n	800bc8c <memchr+0x8>
 800bc9e:	bd10      	pop	{r4, pc}

0800bca0 <memcpy>:
 800bca0:	440a      	add	r2, r1
 800bca2:	4291      	cmp	r1, r2
 800bca4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800bca8:	d100      	bne.n	800bcac <memcpy+0xc>
 800bcaa:	4770      	bx	lr
 800bcac:	b510      	push	{r4, lr}
 800bcae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcb2:	4291      	cmp	r1, r2
 800bcb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcb8:	d1f9      	bne.n	800bcae <memcpy+0xe>
 800bcba:	bd10      	pop	{r4, pc}

0800bcbc <_free_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4605      	mov	r5, r0
 800bcc0:	2900      	cmp	r1, #0
 800bcc2:	d040      	beq.n	800bd46 <_free_r+0x8a>
 800bcc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcc8:	1f0c      	subs	r4, r1, #4
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	bfb8      	it	lt
 800bcce:	18e4      	addlt	r4, r4, r3
 800bcd0:	f7ff ff74 	bl	800bbbc <__malloc_lock>
 800bcd4:	4a1c      	ldr	r2, [pc, #112]	@ (800bd48 <_free_r+0x8c>)
 800bcd6:	6813      	ldr	r3, [r2, #0]
 800bcd8:	b933      	cbnz	r3, 800bce8 <_free_r+0x2c>
 800bcda:	6063      	str	r3, [r4, #4]
 800bcdc:	6014      	str	r4, [r2, #0]
 800bcde:	4628      	mov	r0, r5
 800bce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bce4:	f7ff bf70 	b.w	800bbc8 <__malloc_unlock>
 800bce8:	42a3      	cmp	r3, r4
 800bcea:	d908      	bls.n	800bcfe <_free_r+0x42>
 800bcec:	6820      	ldr	r0, [r4, #0]
 800bcee:	1821      	adds	r1, r4, r0
 800bcf0:	428b      	cmp	r3, r1
 800bcf2:	bf01      	itttt	eq
 800bcf4:	6819      	ldreq	r1, [r3, #0]
 800bcf6:	685b      	ldreq	r3, [r3, #4]
 800bcf8:	1809      	addeq	r1, r1, r0
 800bcfa:	6021      	streq	r1, [r4, #0]
 800bcfc:	e7ed      	b.n	800bcda <_free_r+0x1e>
 800bcfe:	461a      	mov	r2, r3
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	b10b      	cbz	r3, 800bd08 <_free_r+0x4c>
 800bd04:	42a3      	cmp	r3, r4
 800bd06:	d9fa      	bls.n	800bcfe <_free_r+0x42>
 800bd08:	6811      	ldr	r1, [r2, #0]
 800bd0a:	1850      	adds	r0, r2, r1
 800bd0c:	42a0      	cmp	r0, r4
 800bd0e:	d10b      	bne.n	800bd28 <_free_r+0x6c>
 800bd10:	6820      	ldr	r0, [r4, #0]
 800bd12:	4401      	add	r1, r0
 800bd14:	1850      	adds	r0, r2, r1
 800bd16:	4283      	cmp	r3, r0
 800bd18:	6011      	str	r1, [r2, #0]
 800bd1a:	d1e0      	bne.n	800bcde <_free_r+0x22>
 800bd1c:	6818      	ldr	r0, [r3, #0]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	4408      	add	r0, r1
 800bd22:	6010      	str	r0, [r2, #0]
 800bd24:	6053      	str	r3, [r2, #4]
 800bd26:	e7da      	b.n	800bcde <_free_r+0x22>
 800bd28:	d902      	bls.n	800bd30 <_free_r+0x74>
 800bd2a:	230c      	movs	r3, #12
 800bd2c:	602b      	str	r3, [r5, #0]
 800bd2e:	e7d6      	b.n	800bcde <_free_r+0x22>
 800bd30:	6820      	ldr	r0, [r4, #0]
 800bd32:	1821      	adds	r1, r4, r0
 800bd34:	428b      	cmp	r3, r1
 800bd36:	bf01      	itttt	eq
 800bd38:	6819      	ldreq	r1, [r3, #0]
 800bd3a:	685b      	ldreq	r3, [r3, #4]
 800bd3c:	1809      	addeq	r1, r1, r0
 800bd3e:	6021      	streq	r1, [r4, #0]
 800bd40:	6063      	str	r3, [r4, #4]
 800bd42:	6054      	str	r4, [r2, #4]
 800bd44:	e7cb      	b.n	800bcde <_free_r+0x22>
 800bd46:	bd38      	pop	{r3, r4, r5, pc}
 800bd48:	200016a0 	.word	0x200016a0

0800bd4c <_malloc_usable_size_r>:
 800bd4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd50:	1f18      	subs	r0, r3, #4
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	bfbc      	itt	lt
 800bd56:	580b      	ldrlt	r3, [r1, r0]
 800bd58:	18c0      	addlt	r0, r0, r3
 800bd5a:	4770      	bx	lr

0800bd5c <_init>:
 800bd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5e:	bf00      	nop
 800bd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd62:	bc08      	pop	{r3}
 800bd64:	469e      	mov	lr, r3
 800bd66:	4770      	bx	lr

0800bd68 <_fini>:
 800bd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6a:	bf00      	nop
 800bd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6e:	bc08      	pop	{r3}
 800bd70:	469e      	mov	lr, r3
 800bd72:	4770      	bx	lr
