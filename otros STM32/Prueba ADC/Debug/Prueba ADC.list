
Prueba ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080033ac  080033ac  000043ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003418  08003418  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003418  08003418  00004418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003420  08003420  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003420  08003420  00004420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003424  08003424  00004424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003428  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  08003484  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08003484  000052a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009390  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002131  00000000  00000000  0000e415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00010548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000721  00000000  00000000  00010eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180ca  00000000  00000000  000115d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da15  00000000  00000000  0002969b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087774  00000000  00000000  000370b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be824  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002988  00000000  00000000  000be868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c11f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003394 	.word	0x08003394

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003394 	.word	0x08003394

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	605a      	str	r2, [r3, #4]
 800016a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016c:	4b27      	ldr	r3, [pc, #156]	@ (800020c <MX_ADC1_Init+0xb0>)
 800016e:	4a28      	ldr	r2, [pc, #160]	@ (8000210 <MX_ADC1_Init+0xb4>)
 8000170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000172:	4b26      	ldr	r3, [pc, #152]	@ (800020c <MX_ADC1_Init+0xb0>)
 8000174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800017a:	4b24      	ldr	r3, [pc, #144]	@ (800020c <MX_ADC1_Init+0xb0>)
 800017c:	2201      	movs	r2, #1
 800017e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000180:	4b22      	ldr	r3, [pc, #136]	@ (800020c <MX_ADC1_Init+0xb0>)
 8000182:	2200      	movs	r2, #0
 8000184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000186:	4b21      	ldr	r3, [pc, #132]	@ (800020c <MX_ADC1_Init+0xb0>)
 8000188:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800018c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018e:	4b1f      	ldr	r3, [pc, #124]	@ (800020c <MX_ADC1_Init+0xb0>)
 8000190:	2200      	movs	r2, #0
 8000192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000194:	4b1d      	ldr	r3, [pc, #116]	@ (800020c <MX_ADC1_Init+0xb0>)
 8000196:	2203      	movs	r2, #3
 8000198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800019a:	481c      	ldr	r0, [pc, #112]	@ (800020c <MX_ADC1_Init+0xb0>)
 800019c:	f000 fbe2 	bl	8000964 <HAL_ADC_Init>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80001a6:	f000 fa7d 	bl	80006a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80001aa:	2306      	movs	r3, #6
 80001ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001ae:	2301      	movs	r3, #1
 80001b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001b2:	2300      	movs	r3, #0
 80001b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b6:	1d3b      	adds	r3, r7, #4
 80001b8:	4619      	mov	r1, r3
 80001ba:	4814      	ldr	r0, [pc, #80]	@ (800020c <MX_ADC1_Init+0xb0>)
 80001bc:	f000 fd72 	bl	8000ca4 <HAL_ADC_ConfigChannel>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001c6:	f000 fa6d 	bl	80006a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80001ca:	2307      	movs	r3, #7
 80001cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001ce:	2302      	movs	r3, #2
 80001d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001d2:	1d3b      	adds	r3, r7, #4
 80001d4:	4619      	mov	r1, r3
 80001d6:	480d      	ldr	r0, [pc, #52]	@ (800020c <MX_ADC1_Init+0xb0>)
 80001d8:	f000 fd64 	bl	8000ca4 <HAL_ADC_ConfigChannel>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80001e2:	f000 fa5f 	bl	80006a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80001e6:	2308      	movs	r3, #8
 80001e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001ea:	2303      	movs	r3, #3
 80001ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	4619      	mov	r1, r3
 80001f2:	4806      	ldr	r0, [pc, #24]	@ (800020c <MX_ADC1_Init+0xb0>)
 80001f4:	f000 fd56 	bl	8000ca4 <HAL_ADC_ConfigChannel>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80001fe:	f000 fa51 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000202:	bf00      	nop
 8000204:	3710      	adds	r7, #16
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000078 	.word	0x20000078
 8000210:	40012400 	.word	0x40012400

08000214 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b08a      	sub	sp, #40	@ 0x28
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021c:	f107 0318 	add.w	r3, r7, #24
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a37      	ldr	r2, [pc, #220]	@ (800030c <HAL_ADC_MspInit+0xf8>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d167      	bne.n	8000304 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000234:	4b36      	ldr	r3, [pc, #216]	@ (8000310 <HAL_ADC_MspInit+0xfc>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a35      	ldr	r2, [pc, #212]	@ (8000310 <HAL_ADC_MspInit+0xfc>)
 800023a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800023e:	6193      	str	r3, [r2, #24]
 8000240:	4b33      	ldr	r3, [pc, #204]	@ (8000310 <HAL_ADC_MspInit+0xfc>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000248:	617b      	str	r3, [r7, #20]
 800024a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800024c:	4b30      	ldr	r3, [pc, #192]	@ (8000310 <HAL_ADC_MspInit+0xfc>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a2f      	ldr	r2, [pc, #188]	@ (8000310 <HAL_ADC_MspInit+0xfc>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b2d      	ldr	r3, [pc, #180]	@ (8000310 <HAL_ADC_MspInit+0xfc>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0304 	and.w	r3, r3, #4
 8000260:	613b      	str	r3, [r7, #16]
 8000262:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000264:	4b2a      	ldr	r3, [pc, #168]	@ (8000310 <HAL_ADC_MspInit+0xfc>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a29      	ldr	r2, [pc, #164]	@ (8000310 <HAL_ADC_MspInit+0xfc>)
 800026a:	f043 0308 	orr.w	r3, r3, #8
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b27      	ldr	r3, [pc, #156]	@ (8000310 <HAL_ADC_MspInit+0xfc>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0308 	and.w	r3, r3, #8
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800027c:	23c0      	movs	r3, #192	@ 0xc0
 800027e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000280:	2303      	movs	r3, #3
 8000282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4619      	mov	r1, r3
 800028a:	4822      	ldr	r0, [pc, #136]	@ (8000314 <HAL_ADC_MspInit+0x100>)
 800028c:	f001 f8ba 	bl	8001404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000290:	2301      	movs	r3, #1
 8000292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000294:	2303      	movs	r3, #3
 8000296:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000298:	f107 0318 	add.w	r3, r7, #24
 800029c:	4619      	mov	r1, r3
 800029e:	481e      	ldr	r0, [pc, #120]	@ (8000318 <HAL_ADC_MspInit+0x104>)
 80002a0:	f001 f8b0 	bl	8001404 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80002a4:	4b1d      	ldr	r3, [pc, #116]	@ (800031c <HAL_ADC_MspInit+0x108>)
 80002a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000320 <HAL_ADC_MspInit+0x10c>)
 80002a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002aa:	4b1c      	ldr	r3, [pc, #112]	@ (800031c <HAL_ADC_MspInit+0x108>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002b0:	4b1a      	ldr	r3, [pc, #104]	@ (800031c <HAL_ADC_MspInit+0x108>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80002b6:	4b19      	ldr	r3, [pc, #100]	@ (800031c <HAL_ADC_MspInit+0x108>)
 80002b8:	2280      	movs	r2, #128	@ 0x80
 80002ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002bc:	4b17      	ldr	r3, [pc, #92]	@ (800031c <HAL_ADC_MspInit+0x108>)
 80002be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80002c4:	4b15      	ldr	r3, [pc, #84]	@ (800031c <HAL_ADC_MspInit+0x108>)
 80002c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80002ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80002cc:	4b13      	ldr	r3, [pc, #76]	@ (800031c <HAL_ADC_MspInit+0x108>)
 80002ce:	2220      	movs	r2, #32
 80002d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002d2:	4b12      	ldr	r3, [pc, #72]	@ (800031c <HAL_ADC_MspInit+0x108>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002d8:	4810      	ldr	r0, [pc, #64]	@ (800031c <HAL_ADC_MspInit+0x108>)
 80002da:	f000 ff33 	bl	8001144 <HAL_DMA_Init>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80002e4:	f000 f9de 	bl	80006a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a0c      	ldr	r2, [pc, #48]	@ (800031c <HAL_ADC_MspInit+0x108>)
 80002ec:	621a      	str	r2, [r3, #32]
 80002ee:	4a0b      	ldr	r2, [pc, #44]	@ (800031c <HAL_ADC_MspInit+0x108>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	2012      	movs	r0, #18
 80002fa:	f000 feec 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80002fe:	2012      	movs	r0, #18
 8000300:	f000 ff05 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000304:	bf00      	nop
 8000306:	3728      	adds	r7, #40	@ 0x28
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40012400 	.word	0x40012400
 8000310:	40021000 	.word	0x40021000
 8000314:	40010800 	.word	0x40010800
 8000318:	40010c00 	.word	0x40010c00
 800031c:	200000a8 	.word	0x200000a8
 8000320:	40020008 	.word	0x40020008

08000324 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800032a:	4b0c      	ldr	r3, [pc, #48]	@ (800035c <MX_DMA_Init+0x38>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a0b      	ldr	r2, [pc, #44]	@ (800035c <MX_DMA_Init+0x38>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6153      	str	r3, [r2, #20]
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <MX_DMA_Init+0x38>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	607b      	str	r3, [r7, #4]
 8000340:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	2100      	movs	r1, #0
 8000346:	200b      	movs	r0, #11
 8000348:	f000 fec5 	bl	80010d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800034c:	200b      	movs	r0, #11
 800034e:	f000 fede 	bl	800110e <HAL_NVIC_EnableIRQ>

}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000374:	4b24      	ldr	r3, [pc, #144]	@ (8000408 <MX_GPIO_Init+0xa8>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a23      	ldr	r2, [pc, #140]	@ (8000408 <MX_GPIO_Init+0xa8>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b21      	ldr	r3, [pc, #132]	@ (8000408 <MX_GPIO_Init+0xa8>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0310 	and.w	r3, r3, #16
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038c:	4b1e      	ldr	r3, [pc, #120]	@ (8000408 <MX_GPIO_Init+0xa8>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a1d      	ldr	r2, [pc, #116]	@ (8000408 <MX_GPIO_Init+0xa8>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b1b      	ldr	r3, [pc, #108]	@ (8000408 <MX_GPIO_Init+0xa8>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b18      	ldr	r3, [pc, #96]	@ (8000408 <MX_GPIO_Init+0xa8>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a17      	ldr	r2, [pc, #92]	@ (8000408 <MX_GPIO_Init+0xa8>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <MX_GPIO_Init+0xa8>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003bc:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <MX_GPIO_Init+0xa8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a11      	ldr	r2, [pc, #68]	@ (8000408 <MX_GPIO_Init+0xa8>)
 80003c2:	f043 0308 	orr.w	r3, r3, #8
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <MX_GPIO_Init+0xa8>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0308 	and.w	r3, r3, #8
 80003d0:	603b      	str	r3, [r7, #0]
 80003d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003da:	480c      	ldr	r0, [pc, #48]	@ (800040c <MX_GPIO_Init+0xac>)
 80003dc:	f001 f996 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e6:	2301      	movs	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ee:	2302      	movs	r3, #2
 80003f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	4619      	mov	r1, r3
 80003f8:	4804      	ldr	r0, [pc, #16]	@ (800040c <MX_GPIO_Init+0xac>)
 80003fa:	f001 f803 	bl	8001404 <HAL_GPIO_Init>

}
 80003fe:	bf00      	nop
 8000400:	3720      	adds	r7, #32
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	40011000 	.word	0x40011000

08000410 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000414:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <MX_I2C1_Init+0x50>)
 8000416:	4a13      	ldr	r2, [pc, #76]	@ (8000464 <MX_I2C1_Init+0x54>)
 8000418:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800041a:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <MX_I2C1_Init+0x50>)
 800041c:	4a12      	ldr	r2, [pc, #72]	@ (8000468 <MX_I2C1_Init+0x58>)
 800041e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000420:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <MX_I2C1_Init+0x50>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 16;
 8000426:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <MX_I2C1_Init+0x50>)
 8000428:	2210      	movs	r2, #16
 800042a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800042c:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <MX_I2C1_Init+0x50>)
 800042e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000432:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000434:	4b0a      	ldr	r3, [pc, #40]	@ (8000460 <MX_I2C1_Init+0x50>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <MX_I2C1_Init+0x50>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000440:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <MX_I2C1_Init+0x50>)
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <MX_I2C1_Init+0x50>)
 8000448:	2200      	movs	r2, #0
 800044a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800044c:	4804      	ldr	r0, [pc, #16]	@ (8000460 <MX_I2C1_Init+0x50>)
 800044e:	f001 f98f 	bl	8001770 <HAL_I2C_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000458:	f000 f924 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	200000ec 	.word	0x200000ec
 8000464:	40005400 	.word	0x40005400
 8000468:	000186a0 	.word	0x000186a0

0800046c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a15      	ldr	r2, [pc, #84]	@ (80004dc <HAL_I2C_MspInit+0x70>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d123      	bne.n	80004d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800048c:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <HAL_I2C_MspInit+0x74>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a13      	ldr	r2, [pc, #76]	@ (80004e0 <HAL_I2C_MspInit+0x74>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <HAL_I2C_MspInit+0x74>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004a4:	23c0      	movs	r3, #192	@ 0xc0
 80004a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004a8:	2312      	movs	r3, #18
 80004aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ac:	2303      	movs	r3, #3
 80004ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	480b      	ldr	r0, [pc, #44]	@ (80004e4 <HAL_I2C_MspInit+0x78>)
 80004b8:	f000 ffa4 	bl	8001404 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004bc:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <HAL_I2C_MspInit+0x74>)
 80004be:	69db      	ldr	r3, [r3, #28]
 80004c0:	4a07      	ldr	r2, [pc, #28]	@ (80004e0 <HAL_I2C_MspInit+0x74>)
 80004c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004c6:	61d3      	str	r3, [r2, #28]
 80004c8:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <HAL_I2C_MspInit+0x74>)
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004d0:	60bb      	str	r3, [r7, #8]
 80004d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004d4:	bf00      	nop
 80004d6:	3720      	adds	r7, #32
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40005400 	.word	0x40005400
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010c00 	.word	0x40010c00

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09c      	sub	sp, #112	@ 0x70
 80004ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 f9b3 	bl	8000858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f85b 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f7ff ff33 	bl	8000360 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fa:	f7ff ff13 	bl	8000324 <MX_DMA_Init>
  MX_ADC1_Init();
 80004fe:	f7ff fe2d 	bl	800015c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000502:	f7ff ff85 	bl	8000410 <MX_I2C1_Init>
	}
	HAL_ADC_Stop(&hadc1);
*/

	char buffer[100];
    snprintf(buffer, 100, "Valor: %d \n", dato1);
 8000506:	4b23      	ldr	r3, [pc, #140]	@ (8000594 <main+0xac>)
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	1d38      	adds	r0, r7, #4
 800050c:	4a22      	ldr	r2, [pc, #136]	@ (8000598 <main+0xb0>)
 800050e:	2164      	movs	r1, #100	@ 0x64
 8000510:	f002 fa7c 	bl	8002a0c <sniprintf>
  	HAL_I2C_Master_Transmit(&hi2c1, 0x08 << 1, (uint8_t *) buffer, strlen(buffer), 100);
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff fe18 	bl	800014c <strlen>
 800051c:	4603      	mov	r3, r0
 800051e:	b29b      	uxth	r3, r3
 8000520:	1d3a      	adds	r2, r7, #4
 8000522:	2164      	movs	r1, #100	@ 0x64
 8000524:	9100      	str	r1, [sp, #0]
 8000526:	2110      	movs	r1, #16
 8000528:	481c      	ldr	r0, [pc, #112]	@ (800059c <main+0xb4>)
 800052a:	f001 fa65 	bl	80019f8 <HAL_I2C_Master_Transmit>
    snprintf(buffer, 100, "Valor: %d \n", dato2);
 800052e:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <main+0xb8>)
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	1d38      	adds	r0, r7, #4
 8000534:	4a18      	ldr	r2, [pc, #96]	@ (8000598 <main+0xb0>)
 8000536:	2164      	movs	r1, #100	@ 0x64
 8000538:	f002 fa68 	bl	8002a0c <sniprintf>
  	HAL_I2C_Master_Transmit(&hi2c1, 0x08 << 1, (uint8_t *) buffer, strlen(buffer), 100);
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4618      	mov	r0, r3
 8000540:	f7ff fe04 	bl	800014c <strlen>
 8000544:	4603      	mov	r3, r0
 8000546:	b29b      	uxth	r3, r3
 8000548:	1d3a      	adds	r2, r7, #4
 800054a:	2164      	movs	r1, #100	@ 0x64
 800054c:	9100      	str	r1, [sp, #0]
 800054e:	2110      	movs	r1, #16
 8000550:	4812      	ldr	r0, [pc, #72]	@ (800059c <main+0xb4>)
 8000552:	f001 fa51 	bl	80019f8 <HAL_I2C_Master_Transmit>
  	snprintf(buffer, 100, "Valor: %d \n", dato3);
 8000556:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <main+0xbc>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	1d38      	adds	r0, r7, #4
 800055c:	4a0e      	ldr	r2, [pc, #56]	@ (8000598 <main+0xb0>)
 800055e:	2164      	movs	r1, #100	@ 0x64
 8000560:	f002 fa54 	bl	8002a0c <sniprintf>
  	HAL_I2C_Master_Transmit(&hi2c1, 0x08 << 1, (uint8_t *) buffer, strlen(buffer), 100);
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff fdf0 	bl	800014c <strlen>
 800056c:	4603      	mov	r3, r0
 800056e:	b29b      	uxth	r3, r3
 8000570:	1d3a      	adds	r2, r7, #4
 8000572:	2164      	movs	r1, #100	@ 0x64
 8000574:	9100      	str	r1, [sp, #0]
 8000576:	2110      	movs	r1, #16
 8000578:	4808      	ldr	r0, [pc, #32]	@ (800059c <main+0xb4>)
 800057a:	f001 fa3d 	bl	80019f8 <HAL_I2C_Master_Transmit>

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800057e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000582:	4809      	ldr	r0, [pc, #36]	@ (80005a8 <main+0xc0>)
 8000584:	f001 f8da 	bl	800173c <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000588:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800058c:	f000 f9c6 	bl	800091c <HAL_Delay>
  {
 8000590:	bf00      	nop
 8000592:	e7b8      	b.n	8000506 <main+0x1e>
 8000594:	20000140 	.word	0x20000140
 8000598:	080033ac 	.word	0x080033ac
 800059c:	200000ec 	.word	0x200000ec
 80005a0:	20000142 	.word	0x20000142
 80005a4:	20000144 	.word	0x20000144
 80005a8:	40011000 	.word	0x40011000

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005b6:	2228      	movs	r2, #40	@ 0x28
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fa5a 	bl	8002a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ea:	2301      	movs	r3, #1
 80005ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005f8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fd50 	bl	80020a8 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800060e:	f000 f849 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000622:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f001 ffbc 	bl	80025ac <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800063a:	f000 f833 	bl	80006a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800063e:	2302      	movs	r3, #2
 8000640:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000646:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f928 	bl	80028a0 <HAL_RCCEx_PeriphCLKConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000656:	f000 f825 	bl	80006a4 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	@ 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	dato1 = adcData[0];
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <HAL_ADC_ConvCpltCallback+0x30>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	b29a      	uxth	r2, r3
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <HAL_ADC_ConvCpltCallback+0x34>)
 8000674:	801a      	strh	r2, [r3, #0]
	dato2 = adcData[1];
 8000676:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <HAL_ADC_ConvCpltCallback+0x30>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	b29a      	uxth	r2, r3
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <HAL_ADC_ConvCpltCallback+0x38>)
 800067e:	801a      	strh	r2, [r3, #0]
	dato3 = adcData[2];
 8000680:	4b04      	ldr	r3, [pc, #16]	@ (8000694 <HAL_ADC_ConvCpltCallback+0x30>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	b29a      	uxth	r2, r3
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000688:	801a      	strh	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	20000148 	.word	0x20000148
 8000698:	20000140 	.word	0x20000140
 800069c:	20000142 	.word	0x20000142
 80006a0:	20000144 	.word	0x20000144

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006b6:	4b15      	ldr	r3, [pc, #84]	@ (800070c <HAL_MspInit+0x5c>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a14      	ldr	r2, [pc, #80]	@ (800070c <HAL_MspInit+0x5c>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <HAL_MspInit+0x5c>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <HAL_MspInit+0x5c>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a0e      	ldr	r2, [pc, #56]	@ (800070c <HAL_MspInit+0x5c>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <HAL_MspInit+0x5c>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <HAL_MspInit+0x60>)
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <HAL_MspInit+0x60>)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	40021000 	.word	0x40021000
 8000710:	40010000 	.word	0x40010000

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <NMI_Handler+0x4>

0800071c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <MemManage_Handler+0x4>

0800072c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <BusFault_Handler+0x4>

08000734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <UsageFault_Handler+0x4>

0800073c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000764:	f000 f8be 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000770:	4802      	ldr	r0, [pc, #8]	@ (800077c <DMA1_Channel1_IRQHandler+0x10>)
 8000772:	f000 fd41 	bl	80011f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000a8 	.word	0x200000a8

08000780 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000784:	4802      	ldr	r0, [pc, #8]	@ (8000790 <ADC1_2_IRQHandler+0x10>)
 8000786:	f000 f9c5 	bl	8000b14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000078 	.word	0x20000078

08000794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800079c:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <_sbrk+0x5c>)
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <_sbrk+0x60>)
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a8:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d102      	bne.n	80007b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <_sbrk+0x64>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <_sbrk+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d207      	bcs.n	80007d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c4:	f002 f95e 	bl	8002a84 <__errno>
 80007c8:	4603      	mov	r3, r0
 80007ca:	220c      	movs	r2, #12
 80007cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007d2:	e009      	b.n	80007e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007da:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <_sbrk+0x64>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a05      	ldr	r2, [pc, #20]	@ (80007f8 <_sbrk+0x64>)
 80007e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20005000 	.word	0x20005000
 80007f4:	00000400 	.word	0x00000400
 80007f8:	20000154 	.word	0x20000154
 80007fc:	200002a8 	.word	0x200002a8

08000800 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800080c:	f7ff fff8 	bl	8000800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000812:	490c      	ldr	r1, [pc, #48]	@ (8000844 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000814:	4a0c      	ldr	r2, [pc, #48]	@ (8000848 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a09      	ldr	r2, [pc, #36]	@ (800084c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000828:	4c09      	ldr	r4, [pc, #36]	@ (8000850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000836:	f002 f92b 	bl	8002a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083a:	f7ff fe55 	bl	80004e8 <main>
  bx lr
 800083e:	4770      	bx	lr
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000848:	08003428 	.word	0x08003428
  ldr r2, =_sbss
 800084c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000850:	200002a4 	.word	0x200002a4

08000854 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <CAN1_RX1_IRQHandler>
	...

08000858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <HAL_Init+0x28>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a07      	ldr	r2, [pc, #28]	@ (8000880 <HAL_Init+0x28>)
 8000862:	f043 0310 	orr.w	r3, r3, #16
 8000866:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 fc29 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086e:	200f      	movs	r0, #15
 8000870:	f000 f808 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000874:	f7ff ff1c 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40022000 	.word	0x40022000

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fc41 	bl	800112a <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008c0:	f000 fc09 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	@ (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <HAL_IncTick+0x1c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_IncTick+0x20>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a03      	ldr	r2, [pc, #12]	@ (8000904 <HAL_IncTick+0x20>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	20000008 	.word	0x20000008
 8000904:	20000158 	.word	0x20000158

08000908 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b02      	ldr	r3, [pc, #8]	@ (8000918 <HAL_GetTick+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	20000158 	.word	0x20000158

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff fff0 	bl	8000908 <HAL_GetTick>
 8000928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_Delay+0x44>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000942:	bf00      	nop
 8000944:	f7ff ffe0 	bl	8000908 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008

08000964 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d101      	bne.n	8000986 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e0be      	b.n	8000b04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000990:	2b00      	cmp	r3, #0
 8000992:	d109      	bne.n	80009a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fc36 	bl	8000214 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 fa73 	bl	8000e94 <ADC_ConversionStop_Disable>
 80009ae:	4603      	mov	r3, r0
 80009b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f040 8099 	bne.w	8000af2 <HAL_ADC_Init+0x18e>
 80009c0:	7dfb      	ldrb	r3, [r7, #23]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f040 8095 	bne.w	8000af2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80009d0:	f023 0302 	bic.w	r3, r3, #2
 80009d4:	f043 0202 	orr.w	r2, r3, #2
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	7b1b      	ldrb	r3, [r3, #12]
 80009ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009fc:	d003      	beq.n	8000a06 <HAL_ADC_Init+0xa2>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d102      	bne.n	8000a0c <HAL_ADC_Init+0xa8>
 8000a06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a0a:	e000      	b.n	8000a0e <HAL_ADC_Init+0xaa>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7d1b      	ldrb	r3, [r3, #20]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d119      	bne.n	8000a50 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7b1b      	ldrb	r3, [r3, #12]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d109      	bne.n	8000a38 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	035a      	lsls	r2, r3, #13
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	e00b      	b.n	8000a50 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a3c:	f043 0220 	orr.w	r2, r3, #32
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a48:	f043 0201 	orr.w	r2, r3, #1
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	430a      	orrs	r2, r1
 8000a62:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	689a      	ldr	r2, [r3, #8]
 8000a6a:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <HAL_ADC_Init+0x1a8>)
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	6812      	ldr	r2, [r2, #0]
 8000a72:	68b9      	ldr	r1, [r7, #8]
 8000a74:	430b      	orrs	r3, r1
 8000a76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a80:	d003      	beq.n	8000a8a <HAL_ADC_Init+0x126>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d104      	bne.n	8000a94 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	691b      	ldr	r3, [r3, #16]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	051b      	lsls	r3, r3, #20
 8000a92:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a9a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	430a      	orrs	r2, r1
 8000aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	689a      	ldr	r2, [r3, #8]
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_ADC_Init+0x1ac>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d10b      	bne.n	8000ad0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac2:	f023 0303 	bic.w	r3, r3, #3
 8000ac6:	f043 0201 	orr.w	r2, r3, #1
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ace:	e018      	b.n	8000b02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ad4:	f023 0312 	bic.w	r3, r3, #18
 8000ad8:	f043 0210 	orr.w	r2, r3, #16
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae4:	f043 0201 	orr.w	r2, r3, #1
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000af0:	e007      	b.n	8000b02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af6:	f043 0210 	orr.w	r2, r3, #16
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b10:	ff1f0efe 	.word	0xff1f0efe

08000b14 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	f003 0320 	and.w	r3, r3, #32
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d03e      	beq.n	8000bb4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d039      	beq.n	8000bb4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b44:	f003 0310 	and.w	r3, r3, #16
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d105      	bne.n	8000b58 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000b62:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000b66:	d11d      	bne.n	8000ba4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d119      	bne.n	8000ba4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 0220 	bic.w	r2, r2, #32
 8000b7e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d105      	bne.n	8000ba4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b9c:	f043 0201 	orr.w	r2, r3, #1
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff fd5d 	bl	8000664 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f06f 0212 	mvn.w	r2, #18
 8000bb2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d04d      	beq.n	8000c5a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d048      	beq.n	8000c5a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d105      	bne.n	8000be0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bd8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000bea:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000bee:	d012      	beq.n	8000c16 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d125      	bne.n	8000c4a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000c08:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c0c:	d11d      	bne.n	8000c4a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d119      	bne.n	8000c4a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c24:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d105      	bne.n	8000c4a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c42:	f043 0201 	orr.w	r2, r3, #1
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f963 	bl	8000f16 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f06f 020c 	mvn.w	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d012      	beq.n	8000c8a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00d      	beq.n	8000c8a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c72:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 f809 	bl	8000c92 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f06f 0201 	mvn.w	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d101      	bne.n	8000cc4 <HAL_ADC_ConfigChannel+0x20>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e0dc      	b.n	8000e7e <HAL_ADC_ConfigChannel+0x1da>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b06      	cmp	r3, #6
 8000cd2:	d81c      	bhi.n	8000d0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3b05      	subs	r3, #5
 8000ce6:	221f      	movs	r2, #31
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	4019      	ands	r1, r3
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	6818      	ldr	r0, [r3, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3b05      	subs	r3, #5
 8000d00:	fa00 f203 	lsl.w	r2, r0, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d0c:	e03c      	b.n	8000d88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b0c      	cmp	r3, #12
 8000d14:	d81c      	bhi.n	8000d50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	3b23      	subs	r3, #35	@ 0x23
 8000d28:	221f      	movs	r2, #31
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	4019      	ands	r1, r3
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	3b23      	subs	r3, #35	@ 0x23
 8000d42:	fa00 f203 	lsl.w	r2, r0, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d4e:	e01b      	b.n	8000d88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	3b41      	subs	r3, #65	@ 0x41
 8000d62:	221f      	movs	r2, #31
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	4019      	ands	r1, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	3b41      	subs	r3, #65	@ 0x41
 8000d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b09      	cmp	r3, #9
 8000d8e:	d91c      	bls.n	8000dca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68d9      	ldr	r1, [r3, #12]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4413      	add	r3, r2
 8000da0:	3b1e      	subs	r3, #30
 8000da2:	2207      	movs	r2, #7
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	4019      	ands	r1, r3
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	6898      	ldr	r0, [r3, #8]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4613      	mov	r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4413      	add	r3, r2
 8000dba:	3b1e      	subs	r3, #30
 8000dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	e019      	b.n	8000dfe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6919      	ldr	r1, [r3, #16]
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	2207      	movs	r2, #7
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4019      	ands	r1, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	6898      	ldr	r0, [r3, #8]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	fa00 f203 	lsl.w	r2, r0, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b10      	cmp	r3, #16
 8000e04:	d003      	beq.n	8000e0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e0a:	2b11      	cmp	r3, #17
 8000e0c:	d132      	bne.n	8000e74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1d      	ldr	r2, [pc, #116]	@ (8000e88 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d125      	bne.n	8000e64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d126      	bne.n	8000e74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000e34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b10      	cmp	r3, #16
 8000e3c:	d11a      	bne.n	8000e74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e3e:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <HAL_ADC_ConfigChannel+0x1e8>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a13      	ldr	r2, [pc, #76]	@ (8000e90 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e44:	fba2 2303 	umull	r2, r3, r2, r3
 8000e48:	0c9a      	lsrs	r2, r3, #18
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e54:	e002      	b.n	8000e5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f9      	bne.n	8000e56 <HAL_ADC_ConfigChannel+0x1b2>
 8000e62:	e007      	b.n	8000e74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e68:	f043 0220 	orr.w	r2, r3, #32
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40012400 	.word	0x40012400
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	431bde83 	.word	0x431bde83

08000e94 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d12e      	bne.n	8000f0c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0201 	bic.w	r2, r2, #1
 8000ebc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ebe:	f7ff fd23 	bl	8000908 <HAL_GetTick>
 8000ec2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ec4:	e01b      	b.n	8000efe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ec6:	f7ff fd1f 	bl	8000908 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d914      	bls.n	8000efe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d10d      	bne.n	8000efe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee6:	f043 0210 	orr.w	r2, r3, #16
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef2:	f043 0201 	orr.w	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e007      	b.n	8000f0e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d0dc      	beq.n	8000ec6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4906      	ldr	r1, [pc, #24]	@ (8000fc0 <__NVIC_EnableIRQ+0x34>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	@ (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	@ 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010a0:	f7ff ff90 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff2d 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff42 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff90 	bl	8001018 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5f 	bl	8000fc4 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff35 	bl	8000f8c <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffa2 	bl	800107c <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e043      	b.n	80011e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <HAL_DMA_Init+0xa8>)
 8001162:	4413      	add	r3, r2
 8001164:	4a22      	ldr	r2, [pc, #136]	@ (80011f0 <HAL_DMA_Init+0xac>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	009a      	lsls	r2, r3, #2
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a1f      	ldr	r2, [pc, #124]	@ (80011f4 <HAL_DMA_Init+0xb0>)
 8001176:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2202      	movs	r2, #2
 800117c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800118e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001192:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800119c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	bffdfff8 	.word	0xbffdfff8
 80011f0:	cccccccd 	.word	0xcccccccd
 80011f4:	40020000 	.word	0x40020000

080011f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001214:	2204      	movs	r2, #4
 8001216:	409a      	lsls	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4013      	ands	r3, r2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d04f      	beq.n	80012c0 <HAL_DMA_IRQHandler+0xc8>
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	2b00      	cmp	r3, #0
 8001228:	d04a      	beq.n	80012c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0320 	and.w	r3, r3, #32
 8001234:	2b00      	cmp	r3, #0
 8001236:	d107      	bne.n	8001248 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0204 	bic.w	r2, r2, #4
 8001246:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a66      	ldr	r2, [pc, #408]	@ (80013e8 <HAL_DMA_IRQHandler+0x1f0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d029      	beq.n	80012a6 <HAL_DMA_IRQHandler+0xae>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a65      	ldr	r2, [pc, #404]	@ (80013ec <HAL_DMA_IRQHandler+0x1f4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d022      	beq.n	80012a2 <HAL_DMA_IRQHandler+0xaa>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a63      	ldr	r2, [pc, #396]	@ (80013f0 <HAL_DMA_IRQHandler+0x1f8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d01a      	beq.n	800129c <HAL_DMA_IRQHandler+0xa4>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a62      	ldr	r2, [pc, #392]	@ (80013f4 <HAL_DMA_IRQHandler+0x1fc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d012      	beq.n	8001296 <HAL_DMA_IRQHandler+0x9e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a60      	ldr	r2, [pc, #384]	@ (80013f8 <HAL_DMA_IRQHandler+0x200>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d00a      	beq.n	8001290 <HAL_DMA_IRQHandler+0x98>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a5f      	ldr	r2, [pc, #380]	@ (80013fc <HAL_DMA_IRQHandler+0x204>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d102      	bne.n	800128a <HAL_DMA_IRQHandler+0x92>
 8001284:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001288:	e00e      	b.n	80012a8 <HAL_DMA_IRQHandler+0xb0>
 800128a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800128e:	e00b      	b.n	80012a8 <HAL_DMA_IRQHandler+0xb0>
 8001290:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001294:	e008      	b.n	80012a8 <HAL_DMA_IRQHandler+0xb0>
 8001296:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800129a:	e005      	b.n	80012a8 <HAL_DMA_IRQHandler+0xb0>
 800129c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012a0:	e002      	b.n	80012a8 <HAL_DMA_IRQHandler+0xb0>
 80012a2:	2340      	movs	r3, #64	@ 0x40
 80012a4:	e000      	b.n	80012a8 <HAL_DMA_IRQHandler+0xb0>
 80012a6:	2304      	movs	r3, #4
 80012a8:	4a55      	ldr	r2, [pc, #340]	@ (8001400 <HAL_DMA_IRQHandler+0x208>)
 80012aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 8094 	beq.w	80013de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012be:	e08e      	b.n	80013de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	2202      	movs	r2, #2
 80012c6:	409a      	lsls	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d056      	beq.n	800137e <HAL_DMA_IRQHandler+0x186>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d051      	beq.n	800137e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0320 	and.w	r3, r3, #32
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10b      	bne.n	8001300 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 020a 	bic.w	r2, r2, #10
 80012f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a38      	ldr	r2, [pc, #224]	@ (80013e8 <HAL_DMA_IRQHandler+0x1f0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d029      	beq.n	800135e <HAL_DMA_IRQHandler+0x166>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a37      	ldr	r2, [pc, #220]	@ (80013ec <HAL_DMA_IRQHandler+0x1f4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d022      	beq.n	800135a <HAL_DMA_IRQHandler+0x162>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a35      	ldr	r2, [pc, #212]	@ (80013f0 <HAL_DMA_IRQHandler+0x1f8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d01a      	beq.n	8001354 <HAL_DMA_IRQHandler+0x15c>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a34      	ldr	r2, [pc, #208]	@ (80013f4 <HAL_DMA_IRQHandler+0x1fc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d012      	beq.n	800134e <HAL_DMA_IRQHandler+0x156>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a32      	ldr	r2, [pc, #200]	@ (80013f8 <HAL_DMA_IRQHandler+0x200>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00a      	beq.n	8001348 <HAL_DMA_IRQHandler+0x150>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a31      	ldr	r2, [pc, #196]	@ (80013fc <HAL_DMA_IRQHandler+0x204>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d102      	bne.n	8001342 <HAL_DMA_IRQHandler+0x14a>
 800133c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001340:	e00e      	b.n	8001360 <HAL_DMA_IRQHandler+0x168>
 8001342:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001346:	e00b      	b.n	8001360 <HAL_DMA_IRQHandler+0x168>
 8001348:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800134c:	e008      	b.n	8001360 <HAL_DMA_IRQHandler+0x168>
 800134e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001352:	e005      	b.n	8001360 <HAL_DMA_IRQHandler+0x168>
 8001354:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001358:	e002      	b.n	8001360 <HAL_DMA_IRQHandler+0x168>
 800135a:	2320      	movs	r3, #32
 800135c:	e000      	b.n	8001360 <HAL_DMA_IRQHandler+0x168>
 800135e:	2302      	movs	r3, #2
 8001360:	4a27      	ldr	r2, [pc, #156]	@ (8001400 <HAL_DMA_IRQHandler+0x208>)
 8001362:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001370:	2b00      	cmp	r3, #0
 8001372:	d034      	beq.n	80013de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800137c:	e02f      	b.n	80013de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	2208      	movs	r2, #8
 8001384:	409a      	lsls	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4013      	ands	r3, r2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d028      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x1e8>
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d023      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f202 	lsl.w	r2, r1, r2
 80013b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	4798      	blx	r3
    }
  }
  return;
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
}
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40020008 	.word	0x40020008
 80013ec:	4002001c 	.word	0x4002001c
 80013f0:	40020030 	.word	0x40020030
 80013f4:	40020044 	.word	0x40020044
 80013f8:	40020058 	.word	0x40020058
 80013fc:	4002006c 	.word	0x4002006c
 8001400:	40020000 	.word	0x40020000

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b08b      	sub	sp, #44	@ 0x2c
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001416:	e169      	b.n	80016ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001418:	2201      	movs	r2, #1
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	429a      	cmp	r2, r3
 8001432:	f040 8158 	bne.w	80016e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a9a      	ldr	r2, [pc, #616]	@ (80016a4 <HAL_GPIO_Init+0x2a0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d05e      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001440:	4a98      	ldr	r2, [pc, #608]	@ (80016a4 <HAL_GPIO_Init+0x2a0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d875      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 8001446:	4a98      	ldr	r2, [pc, #608]	@ (80016a8 <HAL_GPIO_Init+0x2a4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d058      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 800144c:	4a96      	ldr	r2, [pc, #600]	@ (80016a8 <HAL_GPIO_Init+0x2a4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d86f      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 8001452:	4a96      	ldr	r2, [pc, #600]	@ (80016ac <HAL_GPIO_Init+0x2a8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d052      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001458:	4a94      	ldr	r2, [pc, #592]	@ (80016ac <HAL_GPIO_Init+0x2a8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d869      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 800145e:	4a94      	ldr	r2, [pc, #592]	@ (80016b0 <HAL_GPIO_Init+0x2ac>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d04c      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001464:	4a92      	ldr	r2, [pc, #584]	@ (80016b0 <HAL_GPIO_Init+0x2ac>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d863      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 800146a:	4a92      	ldr	r2, [pc, #584]	@ (80016b4 <HAL_GPIO_Init+0x2b0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d046      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
 8001470:	4a90      	ldr	r2, [pc, #576]	@ (80016b4 <HAL_GPIO_Init+0x2b0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d85d      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 8001476:	2b12      	cmp	r3, #18
 8001478:	d82a      	bhi.n	80014d0 <HAL_GPIO_Init+0xcc>
 800147a:	2b12      	cmp	r3, #18
 800147c:	d859      	bhi.n	8001532 <HAL_GPIO_Init+0x12e>
 800147e:	a201      	add	r2, pc, #4	@ (adr r2, 8001484 <HAL_GPIO_Init+0x80>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	080014ff 	.word	0x080014ff
 8001488:	080014d9 	.word	0x080014d9
 800148c:	080014eb 	.word	0x080014eb
 8001490:	0800152d 	.word	0x0800152d
 8001494:	08001533 	.word	0x08001533
 8001498:	08001533 	.word	0x08001533
 800149c:	08001533 	.word	0x08001533
 80014a0:	08001533 	.word	0x08001533
 80014a4:	08001533 	.word	0x08001533
 80014a8:	08001533 	.word	0x08001533
 80014ac:	08001533 	.word	0x08001533
 80014b0:	08001533 	.word	0x08001533
 80014b4:	08001533 	.word	0x08001533
 80014b8:	08001533 	.word	0x08001533
 80014bc:	08001533 	.word	0x08001533
 80014c0:	08001533 	.word	0x08001533
 80014c4:	08001533 	.word	0x08001533
 80014c8:	080014e1 	.word	0x080014e1
 80014cc:	080014f5 	.word	0x080014f5
 80014d0:	4a79      	ldr	r2, [pc, #484]	@ (80016b8 <HAL_GPIO_Init+0x2b4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014d6:	e02c      	b.n	8001532 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	623b      	str	r3, [r7, #32]
          break;
 80014de:	e029      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	3304      	adds	r3, #4
 80014e6:	623b      	str	r3, [r7, #32]
          break;
 80014e8:	e024      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	3308      	adds	r3, #8
 80014f0:	623b      	str	r3, [r7, #32]
          break;
 80014f2:	e01f      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	330c      	adds	r3, #12
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e01a      	b.n	8001534 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001506:	2304      	movs	r3, #4
 8001508:	623b      	str	r3, [r7, #32]
          break;
 800150a:	e013      	b.n	8001534 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001514:	2308      	movs	r3, #8
 8001516:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	611a      	str	r2, [r3, #16]
          break;
 800151e:	e009      	b.n	8001534 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001520:	2308      	movs	r3, #8
 8001522:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	615a      	str	r2, [r3, #20]
          break;
 800152a:	e003      	b.n	8001534 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
          break;
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x130>
          break;
 8001532:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2bff      	cmp	r3, #255	@ 0xff
 8001538:	d801      	bhi.n	800153e <HAL_GPIO_Init+0x13a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	e001      	b.n	8001542 <HAL_GPIO_Init+0x13e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3304      	adds	r3, #4
 8001542:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2bff      	cmp	r3, #255	@ 0xff
 8001548:	d802      	bhi.n	8001550 <HAL_GPIO_Init+0x14c>
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	e002      	b.n	8001556 <HAL_GPIO_Init+0x152>
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	3b08      	subs	r3, #8
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	210f      	movs	r1, #15
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	401a      	ands	r2, r3
 8001568:	6a39      	ldr	r1, [r7, #32]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	431a      	orrs	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80b1 	beq.w	80016e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001584:	4b4d      	ldr	r3, [pc, #308]	@ (80016bc <HAL_GPIO_Init+0x2b8>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a4c      	ldr	r2, [pc, #304]	@ (80016bc <HAL_GPIO_Init+0x2b8>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b4a      	ldr	r3, [pc, #296]	@ (80016bc <HAL_GPIO_Init+0x2b8>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800159c:	4a48      	ldr	r2, [pc, #288]	@ (80016c0 <HAL_GPIO_Init+0x2bc>)
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4013      	ands	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a40      	ldr	r2, [pc, #256]	@ (80016c4 <HAL_GPIO_Init+0x2c0>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d013      	beq.n	80015f0 <HAL_GPIO_Init+0x1ec>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a3f      	ldr	r2, [pc, #252]	@ (80016c8 <HAL_GPIO_Init+0x2c4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d00d      	beq.n	80015ec <HAL_GPIO_Init+0x1e8>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a3e      	ldr	r2, [pc, #248]	@ (80016cc <HAL_GPIO_Init+0x2c8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d007      	beq.n	80015e8 <HAL_GPIO_Init+0x1e4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a3d      	ldr	r2, [pc, #244]	@ (80016d0 <HAL_GPIO_Init+0x2cc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_GPIO_Init+0x1e0>
 80015e0:	2303      	movs	r3, #3
 80015e2:	e006      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015e4:	2304      	movs	r3, #4
 80015e6:	e004      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015e8:	2302      	movs	r3, #2
 80015ea:	e002      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <HAL_GPIO_Init+0x1ee>
 80015f0:	2300      	movs	r3, #0
 80015f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015f4:	f002 0203 	and.w	r2, r2, #3
 80015f8:	0092      	lsls	r2, r2, #2
 80015fa:	4093      	lsls	r3, r2
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001602:	492f      	ldr	r1, [pc, #188]	@ (80016c0 <HAL_GPIO_Init+0x2bc>)
 8001604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d006      	beq.n	800162a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800161c:	4b2d      	ldr	r3, [pc, #180]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	492c      	ldr	r1, [pc, #176]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]
 8001628:	e006      	b.n	8001638 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800162a:	4b2a      	ldr	r3, [pc, #168]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	43db      	mvns	r3, r3
 8001632:	4928      	ldr	r1, [pc, #160]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001634:	4013      	ands	r3, r2
 8001636:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d006      	beq.n	8001652 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001644:	4b23      	ldr	r3, [pc, #140]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	4922      	ldr	r1, [pc, #136]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	4313      	orrs	r3, r2
 800164e:	60cb      	str	r3, [r1, #12]
 8001650:	e006      	b.n	8001660 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001652:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	43db      	mvns	r3, r3
 800165a:	491e      	ldr	r1, [pc, #120]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 800165c:	4013      	ands	r3, r2
 800165e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800166c:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4918      	ldr	r1, [pc, #96]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800167a:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	4914      	ldr	r1, [pc, #80]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001684:	4013      	ands	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d021      	beq.n	80016d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001694:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	490e      	ldr	r1, [pc, #56]	@ (80016d4 <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
 80016a0:	e021      	b.n	80016e6 <HAL_GPIO_Init+0x2e2>
 80016a2:	bf00      	nop
 80016a4:	10320000 	.word	0x10320000
 80016a8:	10310000 	.word	0x10310000
 80016ac:	10220000 	.word	0x10220000
 80016b0:	10210000 	.word	0x10210000
 80016b4:	10120000 	.word	0x10120000
 80016b8:	10110000 	.word	0x10110000
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000
 80016c4:	40010800 	.word	0x40010800
 80016c8:	40010c00 	.word	0x40010c00
 80016cc:	40011000 	.word	0x40011000
 80016d0:	40011400 	.word	0x40011400
 80016d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <HAL_GPIO_Init+0x304>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	43db      	mvns	r3, r3
 80016e0:	4909      	ldr	r1, [pc, #36]	@ (8001708 <HAL_GPIO_Init+0x304>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	3301      	adds	r3, #1
 80016ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f47f ae8e 	bne.w	8001418 <HAL_GPIO_Init+0x14>
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	372c      	adds	r7, #44	@ 0x2c
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	40010400 	.word	0x40010400

0800170c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
 8001718:	4613      	mov	r3, r2
 800171a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800171c:	787b      	ldrb	r3, [r7, #1]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001728:	e003      	b.n	8001732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	041a      	lsls	r2, r3, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	611a      	str	r2, [r3, #16]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4013      	ands	r3, r2
 8001754:	041a      	lsls	r2, r3, #16
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	43d9      	mvns	r1, r3
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	400b      	ands	r3, r1
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	611a      	str	r2, [r3, #16]
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
	...

08001770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e12b      	b.n	80019da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d106      	bne.n	800179c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7fe fe68 	bl	800046c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2224      	movs	r2, #36	@ 0x24
 80017a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0201 	bic.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017d4:	f001 f832 	bl	800283c <HAL_RCC_GetPCLK1Freq>
 80017d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4a81      	ldr	r2, [pc, #516]	@ (80019e4 <HAL_I2C_Init+0x274>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d807      	bhi.n	80017f4 <HAL_I2C_Init+0x84>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4a80      	ldr	r2, [pc, #512]	@ (80019e8 <HAL_I2C_Init+0x278>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	bf94      	ite	ls
 80017ec:	2301      	movls	r3, #1
 80017ee:	2300      	movhi	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	e006      	b.n	8001802 <HAL_I2C_Init+0x92>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4a7d      	ldr	r2, [pc, #500]	@ (80019ec <HAL_I2C_Init+0x27c>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	bf94      	ite	ls
 80017fc:	2301      	movls	r3, #1
 80017fe:	2300      	movhi	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0e7      	b.n	80019da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4a78      	ldr	r2, [pc, #480]	@ (80019f0 <HAL_I2C_Init+0x280>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	0c9b      	lsrs	r3, r3, #18
 8001814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68ba      	ldr	r2, [r7, #8]
 8001826:	430a      	orrs	r2, r1
 8001828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4a6a      	ldr	r2, [pc, #424]	@ (80019e4 <HAL_I2C_Init+0x274>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d802      	bhi.n	8001844 <HAL_I2C_Init+0xd4>
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3301      	adds	r3, #1
 8001842:	e009      	b.n	8001858 <HAL_I2C_Init+0xe8>
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	4a69      	ldr	r2, [pc, #420]	@ (80019f4 <HAL_I2C_Init+0x284>)
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	099b      	lsrs	r3, r3, #6
 8001856:	3301      	adds	r3, #1
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	430b      	orrs	r3, r1
 800185e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800186a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	495c      	ldr	r1, [pc, #368]	@ (80019e4 <HAL_I2C_Init+0x274>)
 8001874:	428b      	cmp	r3, r1
 8001876:	d819      	bhi.n	80018ac <HAL_I2C_Init+0x13c>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1e59      	subs	r1, r3, #1
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fbb1 f3f3 	udiv	r3, r1, r3
 8001886:	1c59      	adds	r1, r3, #1
 8001888:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800188c:	400b      	ands	r3, r1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00a      	beq.n	80018a8 <HAL_I2C_Init+0x138>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	1e59      	subs	r1, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	fbb1 f3f3 	udiv	r3, r1, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a6:	e051      	b.n	800194c <HAL_I2C_Init+0x1dc>
 80018a8:	2304      	movs	r3, #4
 80018aa:	e04f      	b.n	800194c <HAL_I2C_Init+0x1dc>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d111      	bne.n	80018d8 <HAL_I2C_Init+0x168>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1e58      	subs	r0, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	440b      	add	r3, r1
 80018c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf0c      	ite	eq
 80018d0:	2301      	moveq	r3, #1
 80018d2:	2300      	movne	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	e012      	b.n	80018fe <HAL_I2C_Init+0x18e>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1e58      	subs	r0, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6859      	ldr	r1, [r3, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	0099      	lsls	r1, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ee:	3301      	adds	r3, #1
 80018f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf0c      	ite	eq
 80018f8:	2301      	moveq	r3, #1
 80018fa:	2300      	movne	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2C_Init+0x196>
 8001902:	2301      	movs	r3, #1
 8001904:	e022      	b.n	800194c <HAL_I2C_Init+0x1dc>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10e      	bne.n	800192c <HAL_I2C_Init+0x1bc>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1e58      	subs	r0, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6859      	ldr	r1, [r3, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	440b      	add	r3, r1
 800191c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001920:	3301      	adds	r3, #1
 8001922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800192a:	e00f      	b.n	800194c <HAL_I2C_Init+0x1dc>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	1e58      	subs	r0, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6859      	ldr	r1, [r3, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	0099      	lsls	r1, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001942:	3301      	adds	r3, #1
 8001944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001948:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	6809      	ldr	r1, [r1, #0]
 8001950:	4313      	orrs	r3, r2
 8001952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69da      	ldr	r2, [r3, #28]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800197a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6911      	ldr	r1, [r2, #16]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68d2      	ldr	r2, [r2, #12]
 8001986:	4311      	orrs	r1, r2
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	430b      	orrs	r3, r1
 800198e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2220      	movs	r2, #32
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	000186a0 	.word	0x000186a0
 80019e8:	001e847f 	.word	0x001e847f
 80019ec:	003d08ff 	.word	0x003d08ff
 80019f0:	431bde83 	.word	0x431bde83
 80019f4:	10624dd3 	.word	0x10624dd3

080019f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	461a      	mov	r2, r3
 8001a04:	460b      	mov	r3, r1
 8001a06:	817b      	strh	r3, [r7, #10]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7fe ff7c 	bl	8000908 <HAL_GetTick>
 8001a10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	f040 80e0 	bne.w	8001be0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2319      	movs	r3, #25
 8001a26:	2201      	movs	r2, #1
 8001a28:	4970      	ldr	r1, [pc, #448]	@ (8001bec <HAL_I2C_Master_Transmit+0x1f4>)
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f964 	bl	8001cf8 <I2C_WaitOnFlagUntilTimeout>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
 8001a38:	e0d3      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_I2C_Master_Transmit+0x50>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e0cc      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x1ea>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d007      	beq.n	8001a6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f042 0201 	orr.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2221      	movs	r2, #33	@ 0x21
 8001a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2210      	movs	r2, #16
 8001a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	893a      	ldrh	r2, [r7, #8]
 8001a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4a50      	ldr	r2, [pc, #320]	@ (8001bf0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001aae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ab0:	8979      	ldrh	r1, [r7, #10]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	6a3a      	ldr	r2, [r7, #32]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 f89c 	bl	8001bf4 <I2C_MasterRequestWrite>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e08d      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001adc:	e066      	b.n	8001bac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	6a39      	ldr	r1, [r7, #32]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 fa22 	bl	8001f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00d      	beq.n	8001b0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d107      	bne.n	8001b06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e06b      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d11b      	bne.n	8001b80 <HAL_I2C_Master_Transmit+0x188>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d017      	beq.n	8001b80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	6a39      	ldr	r1, [r7, #32]
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 fa19 	bl	8001fbc <I2C_WaitOnBTFFlagUntilTimeout>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00d      	beq.n	8001bac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d107      	bne.n	8001ba8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ba6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e01a      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d194      	bne.n	8001ade <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e000      	b.n	8001be2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
  }
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	00100002 	.word	0x00100002
 8001bf0:	ffff0000 	.word	0xffff0000

08001bf4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af02      	add	r7, sp, #8
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	460b      	mov	r3, r1
 8001c02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d006      	beq.n	8001c1e <I2C_MasterRequestWrite+0x2a>
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d003      	beq.n	8001c1e <I2C_MasterRequestWrite+0x2a>
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c1c:	d108      	bne.n	8001c30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e00b      	b.n	8001c48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c34:	2b12      	cmp	r3, #18
 8001c36:	d107      	bne.n	8001c48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f84f 	bl	8001cf8 <I2C_WaitOnFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00d      	beq.n	8001c7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c6e:	d103      	bne.n	8001c78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e035      	b.n	8001ce8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c84:	d108      	bne.n	8001c98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c86:	897b      	ldrh	r3, [r7, #10]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c94:	611a      	str	r2, [r3, #16]
 8001c96:	e01b      	b.n	8001cd0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c98:	897b      	ldrh	r3, [r7, #10]
 8001c9a:	11db      	asrs	r3, r3, #7
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	f003 0306 	and.w	r3, r3, #6
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f063 030f 	orn	r3, r3, #15
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	490e      	ldr	r1, [pc, #56]	@ (8001cf0 <I2C_MasterRequestWrite+0xfc>)
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f898 	bl	8001dec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e010      	b.n	8001ce8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cc6:	897b      	ldrh	r3, [r7, #10]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4907      	ldr	r1, [pc, #28]	@ (8001cf4 <I2C_MasterRequestWrite+0x100>)
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f888 	bl	8001dec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	00010008 	.word	0x00010008
 8001cf4:	00010002 	.word	0x00010002

08001cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d08:	e048      	b.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d10:	d044      	beq.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d12:	f7fe fdf9 	bl	8000908 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d302      	bcc.n	8001d28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d139      	bne.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d10d      	bne.n	8001d4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	bf0c      	ite	eq
 8001d44:	2301      	moveq	r3, #1
 8001d46:	2300      	movne	r3, #0
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	e00c      	b.n	8001d68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	43da      	mvns	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d116      	bne.n	8001d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	f043 0220 	orr.w	r2, r3, #32
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e023      	b.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	0c1b      	lsrs	r3, r3, #16
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d10d      	bne.n	8001dc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	43da      	mvns	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4013      	ands	r3, r2
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf0c      	ite	eq
 8001db8:	2301      	moveq	r3, #1
 8001dba:	2300      	movne	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	e00c      	b.n	8001ddc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	79fb      	ldrb	r3, [r7, #7]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d093      	beq.n	8001d0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dfa:	e071      	b.n	8001ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0a:	d123      	bne.n	8001e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	f043 0204 	orr.w	r2, r3, #4
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e067      	b.n	8001f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e5a:	d041      	beq.n	8001ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5c:	f7fe fd54 	bl	8000908 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d302      	bcc.n	8001e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d136      	bne.n	8001ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	0c1b      	lsrs	r3, r3, #16
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d10c      	bne.n	8001e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4013      	ands	r3, r2
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf14      	ite	ne
 8001e8e:	2301      	movne	r3, #1
 8001e90:	2300      	moveq	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	e00b      	b.n	8001eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d016      	beq.n	8001ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ecc:	f043 0220 	orr.w	r2, r3, #32
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e021      	b.n	8001f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	0c1b      	lsrs	r3, r3, #16
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d10c      	bne.n	8001f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	43da      	mvns	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf14      	ite	ne
 8001efc:	2301      	movne	r3, #1
 8001efe:	2300      	moveq	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e00b      	b.n	8001f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	bf14      	ite	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	2300      	moveq	r3, #0
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f47f af6d 	bne.w	8001dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f38:	e034      	b.n	8001fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f886 	bl	800204c <I2C_IsAcknowledgeFailed>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e034      	b.n	8001fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f50:	d028      	beq.n	8001fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7fe fcd9 	bl	8000908 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d302      	bcc.n	8001f68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d11d      	bne.n	8001fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f72:	2b80      	cmp	r3, #128	@ 0x80
 8001f74:	d016      	beq.n	8001fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	f043 0220 	orr.w	r2, r3, #32
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e007      	b.n	8001fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fae:	2b80      	cmp	r3, #128	@ 0x80
 8001fb0:	d1c3      	bne.n	8001f3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fc8:	e034      	b.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f83e 	bl	800204c <I2C_IsAcknowledgeFailed>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e034      	b.n	8002044 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fe0:	d028      	beq.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe2:	f7fe fc91 	bl	8000908 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d302      	bcc.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d11d      	bne.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d016      	beq.n	8002034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e007      	b.n	8002044 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f003 0304 	and.w	r3, r3, #4
 800203e:	2b04      	cmp	r3, #4
 8002040:	d1c3      	bne.n	8001fca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002062:	d11b      	bne.n	800209c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800206c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	f043 0204 	orr.w	r2, r3, #4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e272      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8087 	beq.w	80021d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c8:	4b92      	ldr	r3, [pc, #584]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d00c      	beq.n	80020ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d112      	bne.n	8002106 <HAL_RCC_OscConfig+0x5e>
 80020e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ec:	d10b      	bne.n	8002106 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ee:	4b89      	ldr	r3, [pc, #548]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d06c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x12c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d168      	bne.n	80021d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e24c      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800210e:	d106      	bne.n	800211e <HAL_RCC_OscConfig+0x76>
 8002110:	4b80      	ldr	r3, [pc, #512]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a7f      	ldr	r2, [pc, #508]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	e02e      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x98>
 8002126:	4b7b      	ldr	r3, [pc, #492]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a7a      	ldr	r2, [pc, #488]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 800212c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b78      	ldr	r3, [pc, #480]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a77      	ldr	r2, [pc, #476]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002138:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e01d      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0xbc>
 800214a:	4b72      	ldr	r3, [pc, #456]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a71      	ldr	r2, [pc, #452]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b6f      	ldr	r3, [pc, #444]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a6e      	ldr	r2, [pc, #440]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 8002164:	4b6b      	ldr	r3, [pc, #428]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a6a      	ldr	r2, [pc, #424]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 800216a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b68      	ldr	r3, [pc, #416]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a67      	ldr	r2, [pc, #412]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800217a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe fbc0 	bl	8000908 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7fe fbbc 	bl	8000908 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	@ 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e200      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b5d      	ldr	r3, [pc, #372]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0xe4>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7fe fbac 	bl	8000908 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7fe fba8 	bl	8000908 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	@ 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e1ec      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	4b53      	ldr	r3, [pc, #332]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x10c>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d063      	beq.n	80022aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ee:	4b49      	ldr	r3, [pc, #292]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d11c      	bne.n	8002234 <HAL_RCC_OscConfig+0x18c>
 80021fa:	4b46      	ldr	r3, [pc, #280]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	4b43      	ldr	r3, [pc, #268]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_RCC_OscConfig+0x176>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e1c0      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b3d      	ldr	r3, [pc, #244]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4939      	ldr	r1, [pc, #228]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	e03a      	b.n	80022aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800223c:	4b36      	ldr	r3, [pc, #216]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7fe fb61 	bl	8000908 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224a:	f7fe fb5d 	bl	8000908 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1a1      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	4b2d      	ldr	r3, [pc, #180]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002268:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4927      	ldr	r1, [pc, #156]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
 800227c:	e015      	b.n	80022aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227e:	4b26      	ldr	r3, [pc, #152]	@ (8002318 <HAL_RCC_OscConfig+0x270>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7fe fb40 	bl	8000908 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228c:	f7fe fb3c 	bl	8000908 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e180      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d03a      	beq.n	800232c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d019      	beq.n	80022f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022be:	4b17      	ldr	r3, [pc, #92]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c4:	f7fe fb20 	bl	8000908 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022cc:	f7fe fb1c 	bl	8000908 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e160      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ea:	2001      	movs	r0, #1
 80022ec:	f000 faba 	bl	8002864 <RCC_Delay>
 80022f0:	e01c      	b.n	800232c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <HAL_RCC_OscConfig+0x274>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7fe fb06 	bl	8000908 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fe:	e00f      	b.n	8002320 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002300:	f7fe fb02 	bl	8000908 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d908      	bls.n	8002320 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e146      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	42420000 	.word	0x42420000
 800231c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002320:	4b92      	ldr	r3, [pc, #584]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e9      	bne.n	8002300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a6 	beq.w	8002486 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233e:	4b8b      	ldr	r3, [pc, #556]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10d      	bne.n	8002366 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b88      	ldr	r3, [pc, #544]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4a87      	ldr	r2, [pc, #540]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002354:	61d3      	str	r3, [r2, #28]
 8002356:	4b85      	ldr	r3, [pc, #532]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002362:	2301      	movs	r3, #1
 8002364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002366:	4b82      	ldr	r3, [pc, #520]	@ (8002570 <HAL_RCC_OscConfig+0x4c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d118      	bne.n	80023a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002372:	4b7f      	ldr	r3, [pc, #508]	@ (8002570 <HAL_RCC_OscConfig+0x4c8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7e      	ldr	r2, [pc, #504]	@ (8002570 <HAL_RCC_OscConfig+0x4c8>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800237c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237e:	f7fe fac3 	bl	8000908 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002386:	f7fe fabf 	bl	8000908 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b64      	cmp	r3, #100	@ 0x64
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e103      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	4b75      	ldr	r3, [pc, #468]	@ (8002570 <HAL_RCC_OscConfig+0x4c8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x312>
 80023ac:	4b6f      	ldr	r3, [pc, #444]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a6e      	ldr	r2, [pc, #440]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	e02d      	b.n	8002416 <HAL_RCC_OscConfig+0x36e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x334>
 80023c2:	4b6a      	ldr	r3, [pc, #424]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a69      	ldr	r2, [pc, #420]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	4b67      	ldr	r3, [pc, #412]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a66      	ldr	r2, [pc, #408]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	6213      	str	r3, [r2, #32]
 80023da:	e01c      	b.n	8002416 <HAL_RCC_OscConfig+0x36e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0x356>
 80023e4:	4b61      	ldr	r3, [pc, #388]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a60      	ldr	r2, [pc, #384]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	4b5e      	ldr	r3, [pc, #376]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a5d      	ldr	r2, [pc, #372]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e00b      	b.n	8002416 <HAL_RCC_OscConfig+0x36e>
 80023fe:	4b5b      	ldr	r3, [pc, #364]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a5a      	ldr	r2, [pc, #360]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6213      	str	r3, [r2, #32]
 800240a:	4b58      	ldr	r3, [pc, #352]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a57      	ldr	r2, [pc, #348]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d015      	beq.n	800244a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7fe fa73 	bl	8000908 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe fa6f 	bl	8000908 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0b1      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	4b4b      	ldr	r3, [pc, #300]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ee      	beq.n	8002426 <HAL_RCC_OscConfig+0x37e>
 8002448:	e014      	b.n	8002474 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7fe fa5d 	bl	8000908 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fa59 	bl	8000908 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e09b      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	4b40      	ldr	r3, [pc, #256]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ee      	bne.n	8002452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247a:	4b3c      	ldr	r3, [pc, #240]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a3b      	ldr	r2, [pc, #236]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002480:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002484:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8087 	beq.w	800259e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002490:	4b36      	ldr	r3, [pc, #216]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d061      	beq.n	8002560 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d146      	bne.n	8002532 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a4:	4b33      	ldr	r3, [pc, #204]	@ (8002574 <HAL_RCC_OscConfig+0x4cc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe fa2d 	bl	8000908 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b2:	f7fe fa29 	bl	8000908 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e06d      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c4:	4b29      	ldr	r3, [pc, #164]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024d8:	d108      	bne.n	80024ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024da:	4b24      	ldr	r3, [pc, #144]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	4921      	ldr	r1, [pc, #132]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ec:	4b1f      	ldr	r3, [pc, #124]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a19      	ldr	r1, [r3, #32]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	430b      	orrs	r3, r1
 80024fe:	491b      	ldr	r1, [pc, #108]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002504:	4b1b      	ldr	r3, [pc, #108]	@ (8002574 <HAL_RCC_OscConfig+0x4cc>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7fe f9fd 	bl	8000908 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002512:	f7fe f9f9 	bl	8000908 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e03d      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002524:	4b11      	ldr	r3, [pc, #68]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x46a>
 8002530:	e035      	b.n	800259e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <HAL_RCC_OscConfig+0x4cc>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7fe f9e6 	bl	8000908 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe f9e2 	bl	8000908 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e026      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002552:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x498>
 800255e:	e01e      	b.n	800259e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d107      	bne.n	8002578 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e019      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
 800256c:	40021000 	.word	0x40021000
 8002570:	40007000 	.word	0x40007000
 8002574:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_RCC_OscConfig+0x500>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	429a      	cmp	r2, r3
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0d0      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c0:	4b6a      	ldr	r3, [pc, #424]	@ (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d910      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b67      	ldr	r3, [pc, #412]	@ (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 0207 	bic.w	r2, r3, #7
 80025d6:	4965      	ldr	r1, [pc, #404]	@ (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b63      	ldr	r3, [pc, #396]	@ (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0b8      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002608:	4b59      	ldr	r3, [pc, #356]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a58      	ldr	r2, [pc, #352]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002620:	4b53      	ldr	r3, [pc, #332]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a52      	ldr	r2, [pc, #328]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800262a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b50      	ldr	r3, [pc, #320]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	494d      	ldr	r1, [pc, #308]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d040      	beq.n	80026cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b47      	ldr	r3, [pc, #284]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d115      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266a:	4b41      	ldr	r3, [pc, #260]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e073      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267a:	4b3d      	ldr	r3, [pc, #244]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e06b      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268a:	4b39      	ldr	r3, [pc, #228]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f023 0203 	bic.w	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4936      	ldr	r1, [pc, #216]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800269c:	f7fe f934 	bl	8000908 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a4:	f7fe f930 	bl	8000908 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e053      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 020c 	and.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d1eb      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026cc:	4b27      	ldr	r3, [pc, #156]	@ (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d210      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b24      	ldr	r3, [pc, #144]	@ (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	4922      	ldr	r1, [pc, #136]	@ (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b20      	ldr	r3, [pc, #128]	@ (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e032      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002708:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4916      	ldr	r1, [pc, #88]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002726:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	490e      	ldr	r1, [pc, #56]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273a:	f000 f821 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800273e:	4602      	mov	r2, r0
 8002740:	4b0b      	ldr	r3, [pc, #44]	@ (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	490a      	ldr	r1, [pc, #40]	@ (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	5ccb      	ldrb	r3, [r1, r3]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a09      	ldr	r2, [pc, #36]	@ (8002778 <HAL_RCC_ClockConfig+0x1cc>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <HAL_RCC_ClockConfig+0x1d0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe f892 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40022000 	.word	0x40022000
 8002770:	40021000 	.word	0x40021000
 8002774:	080033b8 	.word	0x080033b8
 8002778:	20000000 	.word	0x20000000
 800277c:	20000004 	.word	0x20000004

08002780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	b480      	push	{r7}
 8002782:	b087      	sub	sp, #28
 8002784:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800279a:	4b1e      	ldr	r3, [pc, #120]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x94>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 030c 	and.w	r3, r3, #12
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d002      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x30>
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d003      	beq.n	80027b6 <HAL_RCC_GetSysClockFreq+0x36>
 80027ae:	e027      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b0:	4b19      	ldr	r3, [pc, #100]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x98>)
 80027b2:	613b      	str	r3, [r7, #16]
      break;
 80027b4:	e027      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	0c9b      	lsrs	r3, r3, #18
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	4a17      	ldr	r2, [pc, #92]	@ (800281c <HAL_RCC_GetSysClockFreq+0x9c>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d010      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ce:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x94>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	0c5b      	lsrs	r3, r3, #17
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	4a11      	ldr	r2, [pc, #68]	@ (8002820 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x98>)
 80027e2:	fb03 f202 	mul.w	r2, r3, r2
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e004      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002824 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	613b      	str	r3, [r7, #16]
      break;
 80027fe:	e002      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002800:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x98>)
 8002802:	613b      	str	r3, [r7, #16]
      break;
 8002804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002806:	693b      	ldr	r3, [r7, #16]
}
 8002808:	4618      	mov	r0, r3
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	007a1200 	.word	0x007a1200
 800281c:	080033d0 	.word	0x080033d0
 8002820:	080033e0 	.word	0x080033e0
 8002824:	003d0900 	.word	0x003d0900

08002828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800282c:	4b02      	ldr	r3, [pc, #8]	@ (8002838 <HAL_RCC_GetHCLKFreq+0x10>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	20000000 	.word	0x20000000

0800283c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002840:	f7ff fff2 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	4b05      	ldr	r3, [pc, #20]	@ (800285c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	4903      	ldr	r1, [pc, #12]	@ (8002860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002852:	5ccb      	ldrb	r3, [r1, r3]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	080033c8 	.word	0x080033c8

08002864 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800286c:	4b0a      	ldr	r3, [pc, #40]	@ (8002898 <RCC_Delay+0x34>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0a      	ldr	r2, [pc, #40]	@ (800289c <RCC_Delay+0x38>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0a5b      	lsrs	r3, r3, #9
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002880:	bf00      	nop
  }
  while (Delay --);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	60fa      	str	r2, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f9      	bne.n	8002880 <RCC_Delay+0x1c>
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	20000000 	.word	0x20000000
 800289c:	10624dd3 	.word	0x10624dd3

080028a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d07d      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028bc:	2300      	movs	r3, #0
 80028be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10d      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	4b4c      	ldr	r3, [pc, #304]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	4a4b      	ldr	r2, [pc, #300]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d6:	61d3      	str	r3, [r2, #28]
 80028d8:	4b49      	ldr	r3, [pc, #292]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e4:	2301      	movs	r3, #1
 80028e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	4b46      	ldr	r3, [pc, #280]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d118      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f4:	4b43      	ldr	r3, [pc, #268]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a42      	ldr	r2, [pc, #264]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002900:	f7fe f802 	bl	8000908 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	e008      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002908:	f7fd fffe 	bl	8000908 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e06d      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002926:	4b36      	ldr	r3, [pc, #216]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800292e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02e      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	429a      	cmp	r2, r3
 8002942:	d027      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002944:	4b2e      	ldr	r3, [pc, #184]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800294c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800294e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002954:	4b2c      	ldr	r3, [pc, #176]	@ (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800295a:	4a29      	ldr	r2, [pc, #164]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d014      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fd ffcd 	bl	8000908 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fd ffc9 	bl	8000908 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e036      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	4b1d      	ldr	r3, [pc, #116]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ee      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002994:	4b1a      	ldr	r3, [pc, #104]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4917      	ldr	r1, [pc, #92]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ac:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	4a13      	ldr	r2, [pc, #76]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	490b      	ldr	r1, [pc, #44]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4904      	ldr	r1, [pc, #16]	@ (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40007000 	.word	0x40007000
 8002a08:	42420440 	.word	0x42420440

08002a0c <sniprintf>:
 8002a0c:	b40c      	push	{r2, r3}
 8002a0e:	b530      	push	{r4, r5, lr}
 8002a10:	4b17      	ldr	r3, [pc, #92]	@ (8002a70 <sniprintf+0x64>)
 8002a12:	1e0c      	subs	r4, r1, #0
 8002a14:	681d      	ldr	r5, [r3, #0]
 8002a16:	b09d      	sub	sp, #116	@ 0x74
 8002a18:	da08      	bge.n	8002a2c <sniprintf+0x20>
 8002a1a:	238b      	movs	r3, #139	@ 0x8b
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a20:	602b      	str	r3, [r5, #0]
 8002a22:	b01d      	add	sp, #116	@ 0x74
 8002a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a28:	b002      	add	sp, #8
 8002a2a:	4770      	bx	lr
 8002a2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002a30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002a34:	bf0c      	ite	eq
 8002a36:	4623      	moveq	r3, r4
 8002a38:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8002a3c:	9304      	str	r3, [sp, #16]
 8002a3e:	9307      	str	r3, [sp, #28]
 8002a40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a44:	9002      	str	r0, [sp, #8]
 8002a46:	9006      	str	r0, [sp, #24]
 8002a48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002a4c:	4628      	mov	r0, r5
 8002a4e:	ab21      	add	r3, sp, #132	@ 0x84
 8002a50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002a52:	a902      	add	r1, sp, #8
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	f000 f89d 	bl	8002b94 <_svfiprintf_r>
 8002a5a:	1c43      	adds	r3, r0, #1
 8002a5c:	bfbc      	itt	lt
 8002a5e:	238b      	movlt	r3, #139	@ 0x8b
 8002a60:	602b      	strlt	r3, [r5, #0]
 8002a62:	2c00      	cmp	r4, #0
 8002a64:	d0dd      	beq.n	8002a22 <sniprintf+0x16>
 8002a66:	2200      	movs	r2, #0
 8002a68:	9b02      	ldr	r3, [sp, #8]
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e7d9      	b.n	8002a22 <sniprintf+0x16>
 8002a6e:	bf00      	nop
 8002a70:	2000000c 	.word	0x2000000c

08002a74 <memset>:
 8002a74:	4603      	mov	r3, r0
 8002a76:	4402      	add	r2, r0
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d100      	bne.n	8002a7e <memset+0xa>
 8002a7c:	4770      	bx	lr
 8002a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a82:	e7f9      	b.n	8002a78 <memset+0x4>

08002a84 <__errno>:
 8002a84:	4b01      	ldr	r3, [pc, #4]	@ (8002a8c <__errno+0x8>)
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	2000000c 	.word	0x2000000c

08002a90 <__libc_init_array>:
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	2600      	movs	r6, #0
 8002a94:	4d0c      	ldr	r5, [pc, #48]	@ (8002ac8 <__libc_init_array+0x38>)
 8002a96:	4c0d      	ldr	r4, [pc, #52]	@ (8002acc <__libc_init_array+0x3c>)
 8002a98:	1b64      	subs	r4, r4, r5
 8002a9a:	10a4      	asrs	r4, r4, #2
 8002a9c:	42a6      	cmp	r6, r4
 8002a9e:	d109      	bne.n	8002ab4 <__libc_init_array+0x24>
 8002aa0:	f000 fc78 	bl	8003394 <_init>
 8002aa4:	2600      	movs	r6, #0
 8002aa6:	4d0a      	ldr	r5, [pc, #40]	@ (8002ad0 <__libc_init_array+0x40>)
 8002aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ad4 <__libc_init_array+0x44>)
 8002aaa:	1b64      	subs	r4, r4, r5
 8002aac:	10a4      	asrs	r4, r4, #2
 8002aae:	42a6      	cmp	r6, r4
 8002ab0:	d105      	bne.n	8002abe <__libc_init_array+0x2e>
 8002ab2:	bd70      	pop	{r4, r5, r6, pc}
 8002ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab8:	4798      	blx	r3
 8002aba:	3601      	adds	r6, #1
 8002abc:	e7ee      	b.n	8002a9c <__libc_init_array+0xc>
 8002abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac2:	4798      	blx	r3
 8002ac4:	3601      	adds	r6, #1
 8002ac6:	e7f2      	b.n	8002aae <__libc_init_array+0x1e>
 8002ac8:	08003420 	.word	0x08003420
 8002acc:	08003420 	.word	0x08003420
 8002ad0:	08003420 	.word	0x08003420
 8002ad4:	08003424 	.word	0x08003424

08002ad8 <__retarget_lock_acquire_recursive>:
 8002ad8:	4770      	bx	lr

08002ada <__retarget_lock_release_recursive>:
 8002ada:	4770      	bx	lr

08002adc <__ssputs_r>:
 8002adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae0:	461f      	mov	r7, r3
 8002ae2:	688e      	ldr	r6, [r1, #8]
 8002ae4:	4682      	mov	sl, r0
 8002ae6:	42be      	cmp	r6, r7
 8002ae8:	460c      	mov	r4, r1
 8002aea:	4690      	mov	r8, r2
 8002aec:	680b      	ldr	r3, [r1, #0]
 8002aee:	d82d      	bhi.n	8002b4c <__ssputs_r+0x70>
 8002af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002af4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002af8:	d026      	beq.n	8002b48 <__ssputs_r+0x6c>
 8002afa:	6965      	ldr	r5, [r4, #20]
 8002afc:	6909      	ldr	r1, [r1, #16]
 8002afe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b02:	eba3 0901 	sub.w	r9, r3, r1
 8002b06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b0a:	1c7b      	adds	r3, r7, #1
 8002b0c:	444b      	add	r3, r9
 8002b0e:	106d      	asrs	r5, r5, #1
 8002b10:	429d      	cmp	r5, r3
 8002b12:	bf38      	it	cc
 8002b14:	461d      	movcc	r5, r3
 8002b16:	0553      	lsls	r3, r2, #21
 8002b18:	d527      	bpl.n	8002b6a <__ssputs_r+0x8e>
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f000 f958 	bl	8002dd0 <_malloc_r>
 8002b20:	4606      	mov	r6, r0
 8002b22:	b360      	cbz	r0, 8002b7e <__ssputs_r+0xa2>
 8002b24:	464a      	mov	r2, r9
 8002b26:	6921      	ldr	r1, [r4, #16]
 8002b28:	f000 fbd6 	bl	80032d8 <memcpy>
 8002b2c:	89a3      	ldrh	r3, [r4, #12]
 8002b2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b36:	81a3      	strh	r3, [r4, #12]
 8002b38:	6126      	str	r6, [r4, #16]
 8002b3a:	444e      	add	r6, r9
 8002b3c:	6026      	str	r6, [r4, #0]
 8002b3e:	463e      	mov	r6, r7
 8002b40:	6165      	str	r5, [r4, #20]
 8002b42:	eba5 0509 	sub.w	r5, r5, r9
 8002b46:	60a5      	str	r5, [r4, #8]
 8002b48:	42be      	cmp	r6, r7
 8002b4a:	d900      	bls.n	8002b4e <__ssputs_r+0x72>
 8002b4c:	463e      	mov	r6, r7
 8002b4e:	4632      	mov	r2, r6
 8002b50:	4641      	mov	r1, r8
 8002b52:	6820      	ldr	r0, [r4, #0]
 8002b54:	f000 fb88 	bl	8003268 <memmove>
 8002b58:	2000      	movs	r0, #0
 8002b5a:	68a3      	ldr	r3, [r4, #8]
 8002b5c:	1b9b      	subs	r3, r3, r6
 8002b5e:	60a3      	str	r3, [r4, #8]
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	4433      	add	r3, r6
 8002b64:	6023      	str	r3, [r4, #0]
 8002b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b6a:	462a      	mov	r2, r5
 8002b6c:	f000 fb4e 	bl	800320c <_realloc_r>
 8002b70:	4606      	mov	r6, r0
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d1e0      	bne.n	8002b38 <__ssputs_r+0x5c>
 8002b76:	4650      	mov	r0, sl
 8002b78:	6921      	ldr	r1, [r4, #16]
 8002b7a:	f000 fbbb 	bl	80032f4 <_free_r>
 8002b7e:	230c      	movs	r3, #12
 8002b80:	f8ca 3000 	str.w	r3, [sl]
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b8e:	81a3      	strh	r3, [r4, #12]
 8002b90:	e7e9      	b.n	8002b66 <__ssputs_r+0x8a>
	...

08002b94 <_svfiprintf_r>:
 8002b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b98:	4698      	mov	r8, r3
 8002b9a:	898b      	ldrh	r3, [r1, #12]
 8002b9c:	4607      	mov	r7, r0
 8002b9e:	061b      	lsls	r3, r3, #24
 8002ba0:	460d      	mov	r5, r1
 8002ba2:	4614      	mov	r4, r2
 8002ba4:	b09d      	sub	sp, #116	@ 0x74
 8002ba6:	d510      	bpl.n	8002bca <_svfiprintf_r+0x36>
 8002ba8:	690b      	ldr	r3, [r1, #16]
 8002baa:	b973      	cbnz	r3, 8002bca <_svfiprintf_r+0x36>
 8002bac:	2140      	movs	r1, #64	@ 0x40
 8002bae:	f000 f90f 	bl	8002dd0 <_malloc_r>
 8002bb2:	6028      	str	r0, [r5, #0]
 8002bb4:	6128      	str	r0, [r5, #16]
 8002bb6:	b930      	cbnz	r0, 8002bc6 <_svfiprintf_r+0x32>
 8002bb8:	230c      	movs	r3, #12
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bc0:	b01d      	add	sp, #116	@ 0x74
 8002bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bc6:	2340      	movs	r3, #64	@ 0x40
 8002bc8:	616b      	str	r3, [r5, #20]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002bce:	2320      	movs	r3, #32
 8002bd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002bd4:	2330      	movs	r3, #48	@ 0x30
 8002bd6:	f04f 0901 	mov.w	r9, #1
 8002bda:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002d78 <_svfiprintf_r+0x1e4>
 8002be2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002be6:	4623      	mov	r3, r4
 8002be8:	469a      	mov	sl, r3
 8002bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bee:	b10a      	cbz	r2, 8002bf4 <_svfiprintf_r+0x60>
 8002bf0:	2a25      	cmp	r2, #37	@ 0x25
 8002bf2:	d1f9      	bne.n	8002be8 <_svfiprintf_r+0x54>
 8002bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8002bf8:	d00b      	beq.n	8002c12 <_svfiprintf_r+0x7e>
 8002bfa:	465b      	mov	r3, fp
 8002bfc:	4622      	mov	r2, r4
 8002bfe:	4629      	mov	r1, r5
 8002c00:	4638      	mov	r0, r7
 8002c02:	f7ff ff6b 	bl	8002adc <__ssputs_r>
 8002c06:	3001      	adds	r0, #1
 8002c08:	f000 80a7 	beq.w	8002d5a <_svfiprintf_r+0x1c6>
 8002c0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002c0e:	445a      	add	r2, fp
 8002c10:	9209      	str	r2, [sp, #36]	@ 0x24
 8002c12:	f89a 3000 	ldrb.w	r3, [sl]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 809f 	beq.w	8002d5a <_svfiprintf_r+0x1c6>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c26:	f10a 0a01 	add.w	sl, sl, #1
 8002c2a:	9304      	str	r3, [sp, #16]
 8002c2c:	9307      	str	r3, [sp, #28]
 8002c2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002c32:	931a      	str	r3, [sp, #104]	@ 0x68
 8002c34:	4654      	mov	r4, sl
 8002c36:	2205      	movs	r2, #5
 8002c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c3c:	484e      	ldr	r0, [pc, #312]	@ (8002d78 <_svfiprintf_r+0x1e4>)
 8002c3e:	f000 fb3d 	bl	80032bc <memchr>
 8002c42:	9a04      	ldr	r2, [sp, #16]
 8002c44:	b9d8      	cbnz	r0, 8002c7e <_svfiprintf_r+0xea>
 8002c46:	06d0      	lsls	r0, r2, #27
 8002c48:	bf44      	itt	mi
 8002c4a:	2320      	movmi	r3, #32
 8002c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c50:	0711      	lsls	r1, r2, #28
 8002c52:	bf44      	itt	mi
 8002c54:	232b      	movmi	r3, #43	@ 0x2b
 8002c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8002c5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c60:	d015      	beq.n	8002c8e <_svfiprintf_r+0xfa>
 8002c62:	4654      	mov	r4, sl
 8002c64:	2000      	movs	r0, #0
 8002c66:	f04f 0c0a 	mov.w	ip, #10
 8002c6a:	9a07      	ldr	r2, [sp, #28]
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c72:	3b30      	subs	r3, #48	@ 0x30
 8002c74:	2b09      	cmp	r3, #9
 8002c76:	d94b      	bls.n	8002d10 <_svfiprintf_r+0x17c>
 8002c78:	b1b0      	cbz	r0, 8002ca8 <_svfiprintf_r+0x114>
 8002c7a:	9207      	str	r2, [sp, #28]
 8002c7c:	e014      	b.n	8002ca8 <_svfiprintf_r+0x114>
 8002c7e:	eba0 0308 	sub.w	r3, r0, r8
 8002c82:	fa09 f303 	lsl.w	r3, r9, r3
 8002c86:	4313      	orrs	r3, r2
 8002c88:	46a2      	mov	sl, r4
 8002c8a:	9304      	str	r3, [sp, #16]
 8002c8c:	e7d2      	b.n	8002c34 <_svfiprintf_r+0xa0>
 8002c8e:	9b03      	ldr	r3, [sp, #12]
 8002c90:	1d19      	adds	r1, r3, #4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	9103      	str	r1, [sp, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bfbb      	ittet	lt
 8002c9a:	425b      	neglt	r3, r3
 8002c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8002ca0:	9307      	strge	r3, [sp, #28]
 8002ca2:	9307      	strlt	r3, [sp, #28]
 8002ca4:	bfb8      	it	lt
 8002ca6:	9204      	strlt	r2, [sp, #16]
 8002ca8:	7823      	ldrb	r3, [r4, #0]
 8002caa:	2b2e      	cmp	r3, #46	@ 0x2e
 8002cac:	d10a      	bne.n	8002cc4 <_svfiprintf_r+0x130>
 8002cae:	7863      	ldrb	r3, [r4, #1]
 8002cb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cb2:	d132      	bne.n	8002d1a <_svfiprintf_r+0x186>
 8002cb4:	9b03      	ldr	r3, [sp, #12]
 8002cb6:	3402      	adds	r4, #2
 8002cb8:	1d1a      	adds	r2, r3, #4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	9203      	str	r2, [sp, #12]
 8002cbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002cc2:	9305      	str	r3, [sp, #20]
 8002cc4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002d7c <_svfiprintf_r+0x1e8>
 8002cc8:	2203      	movs	r2, #3
 8002cca:	4650      	mov	r0, sl
 8002ccc:	7821      	ldrb	r1, [r4, #0]
 8002cce:	f000 faf5 	bl	80032bc <memchr>
 8002cd2:	b138      	cbz	r0, 8002ce4 <_svfiprintf_r+0x150>
 8002cd4:	2240      	movs	r2, #64	@ 0x40
 8002cd6:	9b04      	ldr	r3, [sp, #16]
 8002cd8:	eba0 000a 	sub.w	r0, r0, sl
 8002cdc:	4082      	lsls	r2, r0
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	3401      	adds	r4, #1
 8002ce2:	9304      	str	r3, [sp, #16]
 8002ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ce8:	2206      	movs	r2, #6
 8002cea:	4825      	ldr	r0, [pc, #148]	@ (8002d80 <_svfiprintf_r+0x1ec>)
 8002cec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002cf0:	f000 fae4 	bl	80032bc <memchr>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d036      	beq.n	8002d66 <_svfiprintf_r+0x1d2>
 8002cf8:	4b22      	ldr	r3, [pc, #136]	@ (8002d84 <_svfiprintf_r+0x1f0>)
 8002cfa:	bb1b      	cbnz	r3, 8002d44 <_svfiprintf_r+0x1b0>
 8002cfc:	9b03      	ldr	r3, [sp, #12]
 8002cfe:	3307      	adds	r3, #7
 8002d00:	f023 0307 	bic.w	r3, r3, #7
 8002d04:	3308      	adds	r3, #8
 8002d06:	9303      	str	r3, [sp, #12]
 8002d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d0a:	4433      	add	r3, r6
 8002d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d0e:	e76a      	b.n	8002be6 <_svfiprintf_r+0x52>
 8002d10:	460c      	mov	r4, r1
 8002d12:	2001      	movs	r0, #1
 8002d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d18:	e7a8      	b.n	8002c6c <_svfiprintf_r+0xd8>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f04f 0c0a 	mov.w	ip, #10
 8002d20:	4619      	mov	r1, r3
 8002d22:	3401      	adds	r4, #1
 8002d24:	9305      	str	r3, [sp, #20]
 8002d26:	4620      	mov	r0, r4
 8002d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d2c:	3a30      	subs	r2, #48	@ 0x30
 8002d2e:	2a09      	cmp	r2, #9
 8002d30:	d903      	bls.n	8002d3a <_svfiprintf_r+0x1a6>
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0c6      	beq.n	8002cc4 <_svfiprintf_r+0x130>
 8002d36:	9105      	str	r1, [sp, #20]
 8002d38:	e7c4      	b.n	8002cc4 <_svfiprintf_r+0x130>
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d42:	e7f0      	b.n	8002d26 <_svfiprintf_r+0x192>
 8002d44:	ab03      	add	r3, sp, #12
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	462a      	mov	r2, r5
 8002d4a:	4638      	mov	r0, r7
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <_svfiprintf_r+0x1f4>)
 8002d4e:	a904      	add	r1, sp, #16
 8002d50:	f3af 8000 	nop.w
 8002d54:	1c42      	adds	r2, r0, #1
 8002d56:	4606      	mov	r6, r0
 8002d58:	d1d6      	bne.n	8002d08 <_svfiprintf_r+0x174>
 8002d5a:	89ab      	ldrh	r3, [r5, #12]
 8002d5c:	065b      	lsls	r3, r3, #25
 8002d5e:	f53f af2d 	bmi.w	8002bbc <_svfiprintf_r+0x28>
 8002d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002d64:	e72c      	b.n	8002bc0 <_svfiprintf_r+0x2c>
 8002d66:	ab03      	add	r3, sp, #12
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	462a      	mov	r2, r5
 8002d6c:	4638      	mov	r0, r7
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <_svfiprintf_r+0x1f4>)
 8002d70:	a904      	add	r1, sp, #16
 8002d72:	f000 f91f 	bl	8002fb4 <_printf_i>
 8002d76:	e7ed      	b.n	8002d54 <_svfiprintf_r+0x1c0>
 8002d78:	080033e2 	.word	0x080033e2
 8002d7c:	080033e8 	.word	0x080033e8
 8002d80:	080033ec 	.word	0x080033ec
 8002d84:	00000000 	.word	0x00000000
 8002d88:	08002add 	.word	0x08002add

08002d8c <sbrk_aligned>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	4e0f      	ldr	r6, [pc, #60]	@ (8002dcc <sbrk_aligned+0x40>)
 8002d90:	460c      	mov	r4, r1
 8002d92:	6831      	ldr	r1, [r6, #0]
 8002d94:	4605      	mov	r5, r0
 8002d96:	b911      	cbnz	r1, 8002d9e <sbrk_aligned+0x12>
 8002d98:	f000 fa80 	bl	800329c <_sbrk_r>
 8002d9c:	6030      	str	r0, [r6, #0]
 8002d9e:	4621      	mov	r1, r4
 8002da0:	4628      	mov	r0, r5
 8002da2:	f000 fa7b 	bl	800329c <_sbrk_r>
 8002da6:	1c43      	adds	r3, r0, #1
 8002da8:	d103      	bne.n	8002db2 <sbrk_aligned+0x26>
 8002daa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002dae:	4620      	mov	r0, r4
 8002db0:	bd70      	pop	{r4, r5, r6, pc}
 8002db2:	1cc4      	adds	r4, r0, #3
 8002db4:	f024 0403 	bic.w	r4, r4, #3
 8002db8:	42a0      	cmp	r0, r4
 8002dba:	d0f8      	beq.n	8002dae <sbrk_aligned+0x22>
 8002dbc:	1a21      	subs	r1, r4, r0
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f000 fa6c 	bl	800329c <_sbrk_r>
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	d1f2      	bne.n	8002dae <sbrk_aligned+0x22>
 8002dc8:	e7ef      	b.n	8002daa <sbrk_aligned+0x1e>
 8002dca:	bf00      	nop
 8002dcc:	20000298 	.word	0x20000298

08002dd0 <_malloc_r>:
 8002dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dd4:	1ccd      	adds	r5, r1, #3
 8002dd6:	f025 0503 	bic.w	r5, r5, #3
 8002dda:	3508      	adds	r5, #8
 8002ddc:	2d0c      	cmp	r5, #12
 8002dde:	bf38      	it	cc
 8002de0:	250c      	movcc	r5, #12
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	4606      	mov	r6, r0
 8002de6:	db01      	blt.n	8002dec <_malloc_r+0x1c>
 8002de8:	42a9      	cmp	r1, r5
 8002dea:	d904      	bls.n	8002df6 <_malloc_r+0x26>
 8002dec:	230c      	movs	r3, #12
 8002dee:	6033      	str	r3, [r6, #0]
 8002df0:	2000      	movs	r0, #0
 8002df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002df6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ecc <_malloc_r+0xfc>
 8002dfa:	f000 f9fb 	bl	80031f4 <__malloc_lock>
 8002dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8002e02:	461c      	mov	r4, r3
 8002e04:	bb44      	cbnz	r4, 8002e58 <_malloc_r+0x88>
 8002e06:	4629      	mov	r1, r5
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f7ff ffbf 	bl	8002d8c <sbrk_aligned>
 8002e0e:	1c43      	adds	r3, r0, #1
 8002e10:	4604      	mov	r4, r0
 8002e12:	d158      	bne.n	8002ec6 <_malloc_r+0xf6>
 8002e14:	f8d8 4000 	ldr.w	r4, [r8]
 8002e18:	4627      	mov	r7, r4
 8002e1a:	2f00      	cmp	r7, #0
 8002e1c:	d143      	bne.n	8002ea6 <_malloc_r+0xd6>
 8002e1e:	2c00      	cmp	r4, #0
 8002e20:	d04b      	beq.n	8002eba <_malloc_r+0xea>
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	4639      	mov	r1, r7
 8002e26:	4630      	mov	r0, r6
 8002e28:	eb04 0903 	add.w	r9, r4, r3
 8002e2c:	f000 fa36 	bl	800329c <_sbrk_r>
 8002e30:	4581      	cmp	r9, r0
 8002e32:	d142      	bne.n	8002eba <_malloc_r+0xea>
 8002e34:	6821      	ldr	r1, [r4, #0]
 8002e36:	4630      	mov	r0, r6
 8002e38:	1a6d      	subs	r5, r5, r1
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	f7ff ffa6 	bl	8002d8c <sbrk_aligned>
 8002e40:	3001      	adds	r0, #1
 8002e42:	d03a      	beq.n	8002eba <_malloc_r+0xea>
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	442b      	add	r3, r5
 8002e48:	6023      	str	r3, [r4, #0]
 8002e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	bb62      	cbnz	r2, 8002eac <_malloc_r+0xdc>
 8002e52:	f8c8 7000 	str.w	r7, [r8]
 8002e56:	e00f      	b.n	8002e78 <_malloc_r+0xa8>
 8002e58:	6822      	ldr	r2, [r4, #0]
 8002e5a:	1b52      	subs	r2, r2, r5
 8002e5c:	d420      	bmi.n	8002ea0 <_malloc_r+0xd0>
 8002e5e:	2a0b      	cmp	r2, #11
 8002e60:	d917      	bls.n	8002e92 <_malloc_r+0xc2>
 8002e62:	1961      	adds	r1, r4, r5
 8002e64:	42a3      	cmp	r3, r4
 8002e66:	6025      	str	r5, [r4, #0]
 8002e68:	bf18      	it	ne
 8002e6a:	6059      	strne	r1, [r3, #4]
 8002e6c:	6863      	ldr	r3, [r4, #4]
 8002e6e:	bf08      	it	eq
 8002e70:	f8c8 1000 	streq.w	r1, [r8]
 8002e74:	5162      	str	r2, [r4, r5]
 8002e76:	604b      	str	r3, [r1, #4]
 8002e78:	4630      	mov	r0, r6
 8002e7a:	f000 f9c1 	bl	8003200 <__malloc_unlock>
 8002e7e:	f104 000b 	add.w	r0, r4, #11
 8002e82:	1d23      	adds	r3, r4, #4
 8002e84:	f020 0007 	bic.w	r0, r0, #7
 8002e88:	1ac2      	subs	r2, r0, r3
 8002e8a:	bf1c      	itt	ne
 8002e8c:	1a1b      	subne	r3, r3, r0
 8002e8e:	50a3      	strne	r3, [r4, r2]
 8002e90:	e7af      	b.n	8002df2 <_malloc_r+0x22>
 8002e92:	6862      	ldr	r2, [r4, #4]
 8002e94:	42a3      	cmp	r3, r4
 8002e96:	bf0c      	ite	eq
 8002e98:	f8c8 2000 	streq.w	r2, [r8]
 8002e9c:	605a      	strne	r2, [r3, #4]
 8002e9e:	e7eb      	b.n	8002e78 <_malloc_r+0xa8>
 8002ea0:	4623      	mov	r3, r4
 8002ea2:	6864      	ldr	r4, [r4, #4]
 8002ea4:	e7ae      	b.n	8002e04 <_malloc_r+0x34>
 8002ea6:	463c      	mov	r4, r7
 8002ea8:	687f      	ldr	r7, [r7, #4]
 8002eaa:	e7b6      	b.n	8002e1a <_malloc_r+0x4a>
 8002eac:	461a      	mov	r2, r3
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	42a3      	cmp	r3, r4
 8002eb2:	d1fb      	bne.n	8002eac <_malloc_r+0xdc>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6053      	str	r3, [r2, #4]
 8002eb8:	e7de      	b.n	8002e78 <_malloc_r+0xa8>
 8002eba:	230c      	movs	r3, #12
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	6033      	str	r3, [r6, #0]
 8002ec0:	f000 f99e 	bl	8003200 <__malloc_unlock>
 8002ec4:	e794      	b.n	8002df0 <_malloc_r+0x20>
 8002ec6:	6005      	str	r5, [r0, #0]
 8002ec8:	e7d6      	b.n	8002e78 <_malloc_r+0xa8>
 8002eca:	bf00      	nop
 8002ecc:	2000029c 	.word	0x2000029c

08002ed0 <_printf_common>:
 8002ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed4:	4616      	mov	r6, r2
 8002ed6:	4698      	mov	r8, r3
 8002ed8:	688a      	ldr	r2, [r1, #8]
 8002eda:	690b      	ldr	r3, [r1, #16]
 8002edc:	4607      	mov	r7, r0
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	bfb8      	it	lt
 8002ee2:	4613      	movlt	r3, r2
 8002ee4:	6033      	str	r3, [r6, #0]
 8002ee6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002eea:	460c      	mov	r4, r1
 8002eec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ef0:	b10a      	cbz	r2, 8002ef6 <_printf_common+0x26>
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	6033      	str	r3, [r6, #0]
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	0699      	lsls	r1, r3, #26
 8002efa:	bf42      	ittt	mi
 8002efc:	6833      	ldrmi	r3, [r6, #0]
 8002efe:	3302      	addmi	r3, #2
 8002f00:	6033      	strmi	r3, [r6, #0]
 8002f02:	6825      	ldr	r5, [r4, #0]
 8002f04:	f015 0506 	ands.w	r5, r5, #6
 8002f08:	d106      	bne.n	8002f18 <_printf_common+0x48>
 8002f0a:	f104 0a19 	add.w	sl, r4, #25
 8002f0e:	68e3      	ldr	r3, [r4, #12]
 8002f10:	6832      	ldr	r2, [r6, #0]
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	42ab      	cmp	r3, r5
 8002f16:	dc2b      	bgt.n	8002f70 <_printf_common+0xa0>
 8002f18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	3b00      	subs	r3, #0
 8002f20:	bf18      	it	ne
 8002f22:	2301      	movne	r3, #1
 8002f24:	0692      	lsls	r2, r2, #26
 8002f26:	d430      	bmi.n	8002f8a <_printf_common+0xba>
 8002f28:	4641      	mov	r1, r8
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f30:	47c8      	blx	r9
 8002f32:	3001      	adds	r0, #1
 8002f34:	d023      	beq.n	8002f7e <_printf_common+0xae>
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	6922      	ldr	r2, [r4, #16]
 8002f3a:	f003 0306 	and.w	r3, r3, #6
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	bf14      	ite	ne
 8002f42:	2500      	movne	r5, #0
 8002f44:	6833      	ldreq	r3, [r6, #0]
 8002f46:	f04f 0600 	mov.w	r6, #0
 8002f4a:	bf08      	it	eq
 8002f4c:	68e5      	ldreq	r5, [r4, #12]
 8002f4e:	f104 041a 	add.w	r4, r4, #26
 8002f52:	bf08      	it	eq
 8002f54:	1aed      	subeq	r5, r5, r3
 8002f56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002f5a:	bf08      	it	eq
 8002f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f60:	4293      	cmp	r3, r2
 8002f62:	bfc4      	itt	gt
 8002f64:	1a9b      	subgt	r3, r3, r2
 8002f66:	18ed      	addgt	r5, r5, r3
 8002f68:	42b5      	cmp	r5, r6
 8002f6a:	d11a      	bne.n	8002fa2 <_printf_common+0xd2>
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	e008      	b.n	8002f82 <_printf_common+0xb2>
 8002f70:	2301      	movs	r3, #1
 8002f72:	4652      	mov	r2, sl
 8002f74:	4641      	mov	r1, r8
 8002f76:	4638      	mov	r0, r7
 8002f78:	47c8      	blx	r9
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	d103      	bne.n	8002f86 <_printf_common+0xb6>
 8002f7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f86:	3501      	adds	r5, #1
 8002f88:	e7c1      	b.n	8002f0e <_printf_common+0x3e>
 8002f8a:	2030      	movs	r0, #48	@ 0x30
 8002f8c:	18e1      	adds	r1, r4, r3
 8002f8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f98:	4422      	add	r2, r4
 8002f9a:	3302      	adds	r3, #2
 8002f9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002fa0:	e7c2      	b.n	8002f28 <_printf_common+0x58>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	4622      	mov	r2, r4
 8002fa6:	4641      	mov	r1, r8
 8002fa8:	4638      	mov	r0, r7
 8002faa:	47c8      	blx	r9
 8002fac:	3001      	adds	r0, #1
 8002fae:	d0e6      	beq.n	8002f7e <_printf_common+0xae>
 8002fb0:	3601      	adds	r6, #1
 8002fb2:	e7d9      	b.n	8002f68 <_printf_common+0x98>

08002fb4 <_printf_i>:
 8002fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb8:	7e0f      	ldrb	r7, [r1, #24]
 8002fba:	4691      	mov	r9, r2
 8002fbc:	2f78      	cmp	r7, #120	@ 0x78
 8002fbe:	4680      	mov	r8, r0
 8002fc0:	460c      	mov	r4, r1
 8002fc2:	469a      	mov	sl, r3
 8002fc4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002fc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002fca:	d807      	bhi.n	8002fdc <_printf_i+0x28>
 8002fcc:	2f62      	cmp	r7, #98	@ 0x62
 8002fce:	d80a      	bhi.n	8002fe6 <_printf_i+0x32>
 8002fd0:	2f00      	cmp	r7, #0
 8002fd2:	f000 80d3 	beq.w	800317c <_printf_i+0x1c8>
 8002fd6:	2f58      	cmp	r7, #88	@ 0x58
 8002fd8:	f000 80ba 	beq.w	8003150 <_printf_i+0x19c>
 8002fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fe0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002fe4:	e03a      	b.n	800305c <_printf_i+0xa8>
 8002fe6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002fea:	2b15      	cmp	r3, #21
 8002fec:	d8f6      	bhi.n	8002fdc <_printf_i+0x28>
 8002fee:	a101      	add	r1, pc, #4	@ (adr r1, 8002ff4 <_printf_i+0x40>)
 8002ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ff4:	0800304d 	.word	0x0800304d
 8002ff8:	08003061 	.word	0x08003061
 8002ffc:	08002fdd 	.word	0x08002fdd
 8003000:	08002fdd 	.word	0x08002fdd
 8003004:	08002fdd 	.word	0x08002fdd
 8003008:	08002fdd 	.word	0x08002fdd
 800300c:	08003061 	.word	0x08003061
 8003010:	08002fdd 	.word	0x08002fdd
 8003014:	08002fdd 	.word	0x08002fdd
 8003018:	08002fdd 	.word	0x08002fdd
 800301c:	08002fdd 	.word	0x08002fdd
 8003020:	08003163 	.word	0x08003163
 8003024:	0800308b 	.word	0x0800308b
 8003028:	0800311d 	.word	0x0800311d
 800302c:	08002fdd 	.word	0x08002fdd
 8003030:	08002fdd 	.word	0x08002fdd
 8003034:	08003185 	.word	0x08003185
 8003038:	08002fdd 	.word	0x08002fdd
 800303c:	0800308b 	.word	0x0800308b
 8003040:	08002fdd 	.word	0x08002fdd
 8003044:	08002fdd 	.word	0x08002fdd
 8003048:	08003125 	.word	0x08003125
 800304c:	6833      	ldr	r3, [r6, #0]
 800304e:	1d1a      	adds	r2, r3, #4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6032      	str	r2, [r6, #0]
 8003054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003058:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800305c:	2301      	movs	r3, #1
 800305e:	e09e      	b.n	800319e <_printf_i+0x1ea>
 8003060:	6833      	ldr	r3, [r6, #0]
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	1d19      	adds	r1, r3, #4
 8003066:	6031      	str	r1, [r6, #0]
 8003068:	0606      	lsls	r6, r0, #24
 800306a:	d501      	bpl.n	8003070 <_printf_i+0xbc>
 800306c:	681d      	ldr	r5, [r3, #0]
 800306e:	e003      	b.n	8003078 <_printf_i+0xc4>
 8003070:	0645      	lsls	r5, r0, #25
 8003072:	d5fb      	bpl.n	800306c <_printf_i+0xb8>
 8003074:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003078:	2d00      	cmp	r5, #0
 800307a:	da03      	bge.n	8003084 <_printf_i+0xd0>
 800307c:	232d      	movs	r3, #45	@ 0x2d
 800307e:	426d      	negs	r5, r5
 8003080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003084:	230a      	movs	r3, #10
 8003086:	4859      	ldr	r0, [pc, #356]	@ (80031ec <_printf_i+0x238>)
 8003088:	e011      	b.n	80030ae <_printf_i+0xfa>
 800308a:	6821      	ldr	r1, [r4, #0]
 800308c:	6833      	ldr	r3, [r6, #0]
 800308e:	0608      	lsls	r0, r1, #24
 8003090:	f853 5b04 	ldr.w	r5, [r3], #4
 8003094:	d402      	bmi.n	800309c <_printf_i+0xe8>
 8003096:	0649      	lsls	r1, r1, #25
 8003098:	bf48      	it	mi
 800309a:	b2ad      	uxthmi	r5, r5
 800309c:	2f6f      	cmp	r7, #111	@ 0x6f
 800309e:	6033      	str	r3, [r6, #0]
 80030a0:	bf14      	ite	ne
 80030a2:	230a      	movne	r3, #10
 80030a4:	2308      	moveq	r3, #8
 80030a6:	4851      	ldr	r0, [pc, #324]	@ (80031ec <_printf_i+0x238>)
 80030a8:	2100      	movs	r1, #0
 80030aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80030ae:	6866      	ldr	r6, [r4, #4]
 80030b0:	2e00      	cmp	r6, #0
 80030b2:	bfa8      	it	ge
 80030b4:	6821      	ldrge	r1, [r4, #0]
 80030b6:	60a6      	str	r6, [r4, #8]
 80030b8:	bfa4      	itt	ge
 80030ba:	f021 0104 	bicge.w	r1, r1, #4
 80030be:	6021      	strge	r1, [r4, #0]
 80030c0:	b90d      	cbnz	r5, 80030c6 <_printf_i+0x112>
 80030c2:	2e00      	cmp	r6, #0
 80030c4:	d04b      	beq.n	800315e <_printf_i+0x1aa>
 80030c6:	4616      	mov	r6, r2
 80030c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80030cc:	fb03 5711 	mls	r7, r3, r1, r5
 80030d0:	5dc7      	ldrb	r7, [r0, r7]
 80030d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030d6:	462f      	mov	r7, r5
 80030d8:	42bb      	cmp	r3, r7
 80030da:	460d      	mov	r5, r1
 80030dc:	d9f4      	bls.n	80030c8 <_printf_i+0x114>
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d10b      	bne.n	80030fa <_printf_i+0x146>
 80030e2:	6823      	ldr	r3, [r4, #0]
 80030e4:	07df      	lsls	r7, r3, #31
 80030e6:	d508      	bpl.n	80030fa <_printf_i+0x146>
 80030e8:	6923      	ldr	r3, [r4, #16]
 80030ea:	6861      	ldr	r1, [r4, #4]
 80030ec:	4299      	cmp	r1, r3
 80030ee:	bfde      	ittt	le
 80030f0:	2330      	movle	r3, #48	@ 0x30
 80030f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030f6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80030fa:	1b92      	subs	r2, r2, r6
 80030fc:	6122      	str	r2, [r4, #16]
 80030fe:	464b      	mov	r3, r9
 8003100:	4621      	mov	r1, r4
 8003102:	4640      	mov	r0, r8
 8003104:	f8cd a000 	str.w	sl, [sp]
 8003108:	aa03      	add	r2, sp, #12
 800310a:	f7ff fee1 	bl	8002ed0 <_printf_common>
 800310e:	3001      	adds	r0, #1
 8003110:	d14a      	bne.n	80031a8 <_printf_i+0x1f4>
 8003112:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003116:	b004      	add	sp, #16
 8003118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	f043 0320 	orr.w	r3, r3, #32
 8003122:	6023      	str	r3, [r4, #0]
 8003124:	2778      	movs	r7, #120	@ 0x78
 8003126:	4832      	ldr	r0, [pc, #200]	@ (80031f0 <_printf_i+0x23c>)
 8003128:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	6831      	ldr	r1, [r6, #0]
 8003130:	061f      	lsls	r7, r3, #24
 8003132:	f851 5b04 	ldr.w	r5, [r1], #4
 8003136:	d402      	bmi.n	800313e <_printf_i+0x18a>
 8003138:	065f      	lsls	r7, r3, #25
 800313a:	bf48      	it	mi
 800313c:	b2ad      	uxthmi	r5, r5
 800313e:	6031      	str	r1, [r6, #0]
 8003140:	07d9      	lsls	r1, r3, #31
 8003142:	bf44      	itt	mi
 8003144:	f043 0320 	orrmi.w	r3, r3, #32
 8003148:	6023      	strmi	r3, [r4, #0]
 800314a:	b11d      	cbz	r5, 8003154 <_printf_i+0x1a0>
 800314c:	2310      	movs	r3, #16
 800314e:	e7ab      	b.n	80030a8 <_printf_i+0xf4>
 8003150:	4826      	ldr	r0, [pc, #152]	@ (80031ec <_printf_i+0x238>)
 8003152:	e7e9      	b.n	8003128 <_printf_i+0x174>
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	f023 0320 	bic.w	r3, r3, #32
 800315a:	6023      	str	r3, [r4, #0]
 800315c:	e7f6      	b.n	800314c <_printf_i+0x198>
 800315e:	4616      	mov	r6, r2
 8003160:	e7bd      	b.n	80030de <_printf_i+0x12a>
 8003162:	6833      	ldr	r3, [r6, #0]
 8003164:	6825      	ldr	r5, [r4, #0]
 8003166:	1d18      	adds	r0, r3, #4
 8003168:	6961      	ldr	r1, [r4, #20]
 800316a:	6030      	str	r0, [r6, #0]
 800316c:	062e      	lsls	r6, r5, #24
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	d501      	bpl.n	8003176 <_printf_i+0x1c2>
 8003172:	6019      	str	r1, [r3, #0]
 8003174:	e002      	b.n	800317c <_printf_i+0x1c8>
 8003176:	0668      	lsls	r0, r5, #25
 8003178:	d5fb      	bpl.n	8003172 <_printf_i+0x1be>
 800317a:	8019      	strh	r1, [r3, #0]
 800317c:	2300      	movs	r3, #0
 800317e:	4616      	mov	r6, r2
 8003180:	6123      	str	r3, [r4, #16]
 8003182:	e7bc      	b.n	80030fe <_printf_i+0x14a>
 8003184:	6833      	ldr	r3, [r6, #0]
 8003186:	2100      	movs	r1, #0
 8003188:	1d1a      	adds	r2, r3, #4
 800318a:	6032      	str	r2, [r6, #0]
 800318c:	681e      	ldr	r6, [r3, #0]
 800318e:	6862      	ldr	r2, [r4, #4]
 8003190:	4630      	mov	r0, r6
 8003192:	f000 f893 	bl	80032bc <memchr>
 8003196:	b108      	cbz	r0, 800319c <_printf_i+0x1e8>
 8003198:	1b80      	subs	r0, r0, r6
 800319a:	6060      	str	r0, [r4, #4]
 800319c:	6863      	ldr	r3, [r4, #4]
 800319e:	6123      	str	r3, [r4, #16]
 80031a0:	2300      	movs	r3, #0
 80031a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031a6:	e7aa      	b.n	80030fe <_printf_i+0x14a>
 80031a8:	4632      	mov	r2, r6
 80031aa:	4649      	mov	r1, r9
 80031ac:	4640      	mov	r0, r8
 80031ae:	6923      	ldr	r3, [r4, #16]
 80031b0:	47d0      	blx	sl
 80031b2:	3001      	adds	r0, #1
 80031b4:	d0ad      	beq.n	8003112 <_printf_i+0x15e>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	079b      	lsls	r3, r3, #30
 80031ba:	d413      	bmi.n	80031e4 <_printf_i+0x230>
 80031bc:	68e0      	ldr	r0, [r4, #12]
 80031be:	9b03      	ldr	r3, [sp, #12]
 80031c0:	4298      	cmp	r0, r3
 80031c2:	bfb8      	it	lt
 80031c4:	4618      	movlt	r0, r3
 80031c6:	e7a6      	b.n	8003116 <_printf_i+0x162>
 80031c8:	2301      	movs	r3, #1
 80031ca:	4632      	mov	r2, r6
 80031cc:	4649      	mov	r1, r9
 80031ce:	4640      	mov	r0, r8
 80031d0:	47d0      	blx	sl
 80031d2:	3001      	adds	r0, #1
 80031d4:	d09d      	beq.n	8003112 <_printf_i+0x15e>
 80031d6:	3501      	adds	r5, #1
 80031d8:	68e3      	ldr	r3, [r4, #12]
 80031da:	9903      	ldr	r1, [sp, #12]
 80031dc:	1a5b      	subs	r3, r3, r1
 80031de:	42ab      	cmp	r3, r5
 80031e0:	dcf2      	bgt.n	80031c8 <_printf_i+0x214>
 80031e2:	e7eb      	b.n	80031bc <_printf_i+0x208>
 80031e4:	2500      	movs	r5, #0
 80031e6:	f104 0619 	add.w	r6, r4, #25
 80031ea:	e7f5      	b.n	80031d8 <_printf_i+0x224>
 80031ec:	080033f3 	.word	0x080033f3
 80031f0:	08003404 	.word	0x08003404

080031f4 <__malloc_lock>:
 80031f4:	4801      	ldr	r0, [pc, #4]	@ (80031fc <__malloc_lock+0x8>)
 80031f6:	f7ff bc6f 	b.w	8002ad8 <__retarget_lock_acquire_recursive>
 80031fa:	bf00      	nop
 80031fc:	20000294 	.word	0x20000294

08003200 <__malloc_unlock>:
 8003200:	4801      	ldr	r0, [pc, #4]	@ (8003208 <__malloc_unlock+0x8>)
 8003202:	f7ff bc6a 	b.w	8002ada <__retarget_lock_release_recursive>
 8003206:	bf00      	nop
 8003208:	20000294 	.word	0x20000294

0800320c <_realloc_r>:
 800320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003210:	4680      	mov	r8, r0
 8003212:	4615      	mov	r5, r2
 8003214:	460c      	mov	r4, r1
 8003216:	b921      	cbnz	r1, 8003222 <_realloc_r+0x16>
 8003218:	4611      	mov	r1, r2
 800321a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800321e:	f7ff bdd7 	b.w	8002dd0 <_malloc_r>
 8003222:	b92a      	cbnz	r2, 8003230 <_realloc_r+0x24>
 8003224:	f000 f866 	bl	80032f4 <_free_r>
 8003228:	2400      	movs	r4, #0
 800322a:	4620      	mov	r0, r4
 800322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003230:	f000 f8a8 	bl	8003384 <_malloc_usable_size_r>
 8003234:	4285      	cmp	r5, r0
 8003236:	4606      	mov	r6, r0
 8003238:	d802      	bhi.n	8003240 <_realloc_r+0x34>
 800323a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800323e:	d8f4      	bhi.n	800322a <_realloc_r+0x1e>
 8003240:	4629      	mov	r1, r5
 8003242:	4640      	mov	r0, r8
 8003244:	f7ff fdc4 	bl	8002dd0 <_malloc_r>
 8003248:	4607      	mov	r7, r0
 800324a:	2800      	cmp	r0, #0
 800324c:	d0ec      	beq.n	8003228 <_realloc_r+0x1c>
 800324e:	42b5      	cmp	r5, r6
 8003250:	462a      	mov	r2, r5
 8003252:	4621      	mov	r1, r4
 8003254:	bf28      	it	cs
 8003256:	4632      	movcs	r2, r6
 8003258:	f000 f83e 	bl	80032d8 <memcpy>
 800325c:	4621      	mov	r1, r4
 800325e:	4640      	mov	r0, r8
 8003260:	f000 f848 	bl	80032f4 <_free_r>
 8003264:	463c      	mov	r4, r7
 8003266:	e7e0      	b.n	800322a <_realloc_r+0x1e>

08003268 <memmove>:
 8003268:	4288      	cmp	r0, r1
 800326a:	b510      	push	{r4, lr}
 800326c:	eb01 0402 	add.w	r4, r1, r2
 8003270:	d902      	bls.n	8003278 <memmove+0x10>
 8003272:	4284      	cmp	r4, r0
 8003274:	4623      	mov	r3, r4
 8003276:	d807      	bhi.n	8003288 <memmove+0x20>
 8003278:	1e43      	subs	r3, r0, #1
 800327a:	42a1      	cmp	r1, r4
 800327c:	d008      	beq.n	8003290 <memmove+0x28>
 800327e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003282:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003286:	e7f8      	b.n	800327a <memmove+0x12>
 8003288:	4601      	mov	r1, r0
 800328a:	4402      	add	r2, r0
 800328c:	428a      	cmp	r2, r1
 800328e:	d100      	bne.n	8003292 <memmove+0x2a>
 8003290:	bd10      	pop	{r4, pc}
 8003292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800329a:	e7f7      	b.n	800328c <memmove+0x24>

0800329c <_sbrk_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	2300      	movs	r3, #0
 80032a0:	4d05      	ldr	r5, [pc, #20]	@ (80032b8 <_sbrk_r+0x1c>)
 80032a2:	4604      	mov	r4, r0
 80032a4:	4608      	mov	r0, r1
 80032a6:	602b      	str	r3, [r5, #0]
 80032a8:	f7fd fa74 	bl	8000794 <_sbrk>
 80032ac:	1c43      	adds	r3, r0, #1
 80032ae:	d102      	bne.n	80032b6 <_sbrk_r+0x1a>
 80032b0:	682b      	ldr	r3, [r5, #0]
 80032b2:	b103      	cbz	r3, 80032b6 <_sbrk_r+0x1a>
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	bd38      	pop	{r3, r4, r5, pc}
 80032b8:	200002a0 	.word	0x200002a0

080032bc <memchr>:
 80032bc:	4603      	mov	r3, r0
 80032be:	b510      	push	{r4, lr}
 80032c0:	b2c9      	uxtb	r1, r1
 80032c2:	4402      	add	r2, r0
 80032c4:	4293      	cmp	r3, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	d101      	bne.n	80032ce <memchr+0x12>
 80032ca:	2000      	movs	r0, #0
 80032cc:	e003      	b.n	80032d6 <memchr+0x1a>
 80032ce:	7804      	ldrb	r4, [r0, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	428c      	cmp	r4, r1
 80032d4:	d1f6      	bne.n	80032c4 <memchr+0x8>
 80032d6:	bd10      	pop	{r4, pc}

080032d8 <memcpy>:
 80032d8:	440a      	add	r2, r1
 80032da:	4291      	cmp	r1, r2
 80032dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80032e0:	d100      	bne.n	80032e4 <memcpy+0xc>
 80032e2:	4770      	bx	lr
 80032e4:	b510      	push	{r4, lr}
 80032e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032ea:	4291      	cmp	r1, r2
 80032ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032f0:	d1f9      	bne.n	80032e6 <memcpy+0xe>
 80032f2:	bd10      	pop	{r4, pc}

080032f4 <_free_r>:
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	4605      	mov	r5, r0
 80032f8:	2900      	cmp	r1, #0
 80032fa:	d040      	beq.n	800337e <_free_r+0x8a>
 80032fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003300:	1f0c      	subs	r4, r1, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	bfb8      	it	lt
 8003306:	18e4      	addlt	r4, r4, r3
 8003308:	f7ff ff74 	bl	80031f4 <__malloc_lock>
 800330c:	4a1c      	ldr	r2, [pc, #112]	@ (8003380 <_free_r+0x8c>)
 800330e:	6813      	ldr	r3, [r2, #0]
 8003310:	b933      	cbnz	r3, 8003320 <_free_r+0x2c>
 8003312:	6063      	str	r3, [r4, #4]
 8003314:	6014      	str	r4, [r2, #0]
 8003316:	4628      	mov	r0, r5
 8003318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800331c:	f7ff bf70 	b.w	8003200 <__malloc_unlock>
 8003320:	42a3      	cmp	r3, r4
 8003322:	d908      	bls.n	8003336 <_free_r+0x42>
 8003324:	6820      	ldr	r0, [r4, #0]
 8003326:	1821      	adds	r1, r4, r0
 8003328:	428b      	cmp	r3, r1
 800332a:	bf01      	itttt	eq
 800332c:	6819      	ldreq	r1, [r3, #0]
 800332e:	685b      	ldreq	r3, [r3, #4]
 8003330:	1809      	addeq	r1, r1, r0
 8003332:	6021      	streq	r1, [r4, #0]
 8003334:	e7ed      	b.n	8003312 <_free_r+0x1e>
 8003336:	461a      	mov	r2, r3
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	b10b      	cbz	r3, 8003340 <_free_r+0x4c>
 800333c:	42a3      	cmp	r3, r4
 800333e:	d9fa      	bls.n	8003336 <_free_r+0x42>
 8003340:	6811      	ldr	r1, [r2, #0]
 8003342:	1850      	adds	r0, r2, r1
 8003344:	42a0      	cmp	r0, r4
 8003346:	d10b      	bne.n	8003360 <_free_r+0x6c>
 8003348:	6820      	ldr	r0, [r4, #0]
 800334a:	4401      	add	r1, r0
 800334c:	1850      	adds	r0, r2, r1
 800334e:	4283      	cmp	r3, r0
 8003350:	6011      	str	r1, [r2, #0]
 8003352:	d1e0      	bne.n	8003316 <_free_r+0x22>
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4408      	add	r0, r1
 800335a:	6010      	str	r0, [r2, #0]
 800335c:	6053      	str	r3, [r2, #4]
 800335e:	e7da      	b.n	8003316 <_free_r+0x22>
 8003360:	d902      	bls.n	8003368 <_free_r+0x74>
 8003362:	230c      	movs	r3, #12
 8003364:	602b      	str	r3, [r5, #0]
 8003366:	e7d6      	b.n	8003316 <_free_r+0x22>
 8003368:	6820      	ldr	r0, [r4, #0]
 800336a:	1821      	adds	r1, r4, r0
 800336c:	428b      	cmp	r3, r1
 800336e:	bf01      	itttt	eq
 8003370:	6819      	ldreq	r1, [r3, #0]
 8003372:	685b      	ldreq	r3, [r3, #4]
 8003374:	1809      	addeq	r1, r1, r0
 8003376:	6021      	streq	r1, [r4, #0]
 8003378:	6063      	str	r3, [r4, #4]
 800337a:	6054      	str	r4, [r2, #4]
 800337c:	e7cb      	b.n	8003316 <_free_r+0x22>
 800337e:	bd38      	pop	{r3, r4, r5, pc}
 8003380:	2000029c 	.word	0x2000029c

08003384 <_malloc_usable_size_r>:
 8003384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003388:	1f18      	subs	r0, r3, #4
 800338a:	2b00      	cmp	r3, #0
 800338c:	bfbc      	itt	lt
 800338e:	580b      	ldrlt	r3, [r1, r0]
 8003390:	18c0      	addlt	r0, r0, r3
 8003392:	4770      	bx	lr

08003394 <_init>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	bf00      	nop
 8003398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339a:	bc08      	pop	{r3}
 800339c:	469e      	mov	lr, r3
 800339e:	4770      	bx	lr

080033a0 <_fini>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	bf00      	nop
 80033a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a6:	bc08      	pop	{r3}
 80033a8:	469e      	mov	lr, r3
 80033aa:	4770      	bx	lr
