
BLUEPILL_CHINA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000843c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08008550  08008550  00009550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089e4  080089e4  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  080089e4  080089e4  000099e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089ec  080089ec  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089ec  080089ec  000099ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089f0  080089f0  000099f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080089f4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200001d8  08008bcc  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08008bcc  0000a418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca74  00000000  00000000  0000a201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e27  00000000  00000000  00016c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00018aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a68  00000000  00000000  000197f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fef  00000000  00000000  0001a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea2d  00000000  00000000  0003324f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ffa  00000000  00000000  00041c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2c76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d94  00000000  00000000  000d2cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d7a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008534 	.word	0x08008534

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08008534 	.word	0x08008534

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__gesf2>:
 8000cd0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000cd4:	e006      	b.n	8000ce4 <__cmpsf2+0x4>
 8000cd6:	bf00      	nop

08000cd8 <__lesf2>:
 8000cd8:	f04f 0c01 	mov.w	ip, #1
 8000cdc:	e002      	b.n	8000ce4 <__cmpsf2+0x4>
 8000cde:	bf00      	nop

08000ce0 <__cmpsf2>:
 8000ce0:	f04f 0c01 	mov.w	ip, #1
 8000ce4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ce8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d011      	beq.n	8000d20 <__cmpsf2+0x40>
 8000cfc:	b001      	add	sp, #4
 8000cfe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d02:	bf18      	it	ne
 8000d04:	ea90 0f01 	teqne	r0, r1
 8000d08:	bf58      	it	pl
 8000d0a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d0e:	bf88      	it	hi
 8000d10:	17c8      	asrhi	r0, r1, #31
 8000d12:	bf38      	it	cc
 8000d14:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d18:	bf18      	it	ne
 8000d1a:	f040 0001 	orrne.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d24:	d102      	bne.n	8000d2c <__cmpsf2+0x4c>
 8000d26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d2a:	d105      	bne.n	8000d38 <__cmpsf2+0x58>
 8000d2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d30:	d1e4      	bne.n	8000cfc <__cmpsf2+0x1c>
 8000d32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d36:	d0e1      	beq.n	8000cfc <__cmpsf2+0x1c>
 8000d38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <__aeabi_cfrcmple>:
 8000d40:	4684      	mov	ip, r0
 8000d42:	4608      	mov	r0, r1
 8000d44:	4661      	mov	r1, ip
 8000d46:	e7ff      	b.n	8000d48 <__aeabi_cfcmpeq>

08000d48 <__aeabi_cfcmpeq>:
 8000d48:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d4a:	f7ff ffc9 	bl	8000ce0 <__cmpsf2>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	bf48      	it	mi
 8000d52:	f110 0f00 	cmnmi.w	r0, #0
 8000d56:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d58 <__aeabi_fcmpeq>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff fff4 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d60:	bf0c      	ite	eq
 8000d62:	2001      	moveq	r0, #1
 8000d64:	2000      	movne	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_fcmplt>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff ffea 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d74:	bf34      	ite	cc
 8000d76:	2001      	movcc	r0, #1
 8000d78:	2000      	movcs	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_fcmple>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffe0 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d88:	bf94      	ite	ls
 8000d8a:	2001      	movls	r0, #1
 8000d8c:	2000      	movhi	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_fcmpge>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffd2 	bl	8000d40 <__aeabi_cfrcmple>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmpgt>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffc8 	bl	8000d40 <__aeabi_cfrcmple>
 8000db0:	bf34      	ite	cc
 8000db2:	2001      	movcc	r0, #1
 8000db4:	2000      	movcs	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_d2lz>:
 8000dbc:	b538      	push	{r3, r4, r5, lr}
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	460d      	mov	r5, r1
 8000dc6:	f7ff fead 	bl	8000b24 <__aeabi_dcmplt>
 8000dca:	b928      	cbnz	r0, 8000dd8 <__aeabi_d2lz+0x1c>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	4629      	mov	r1, r5
 8000dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd4:	f000 b80a 	b.w	8000dec <__aeabi_d2ulz>
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dde:	f000 f805 	bl	8000dec <__aeabi_d2ulz>
 8000de2:	4240      	negs	r0, r0
 8000de4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de8:	bd38      	pop	{r3, r4, r5, pc}
 8000dea:	bf00      	nop

08000dec <__aeabi_d2ulz>:
 8000dec:	b5d0      	push	{r4, r6, r7, lr}
 8000dee:	2200      	movs	r2, #0
 8000df0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <__aeabi_d2ulz+0x34>)
 8000df2:	4606      	mov	r6, r0
 8000df4:	460f      	mov	r7, r1
 8000df6:	f7ff fc23 	bl	8000640 <__aeabi_dmul>
 8000dfa:	f7ff fef9 	bl	8000bf0 <__aeabi_d2uiz>
 8000dfe:	4604      	mov	r4, r0
 8000e00:	f7ff fba4 	bl	800054c <__aeabi_ui2d>
 8000e04:	2200      	movs	r2, #0
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <__aeabi_d2ulz+0x38>)
 8000e08:	f7ff fc1a 	bl	8000640 <__aeabi_dmul>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4630      	mov	r0, r6
 8000e12:	4639      	mov	r1, r7
 8000e14:	f7ff fa5c 	bl	80002d0 <__aeabi_dsub>
 8000e18:	f7ff feea 	bl	8000bf0 <__aeabi_d2uiz>
 8000e1c:	4621      	mov	r1, r4
 8000e1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000e20:	3df00000 	.word	0x3df00000
 8000e24:	41f00000 	.word	0x41f00000

08000e28 <readADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t readADC(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]

	// Configurar el canal que se desea leer
	sConfig.Channel = channel;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	4619      	mov	r1, r3
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 ffe3 	bl	8001e1c <HAL_ADC_ConfigChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <readADC+0x38>
		Error_Handler(); // Maneja errores de configuración
 8000e5c:	f000 fa94 	bl	8001388 <Error_Handler>
	}

	// Inicia la conversión del ADC
	HAL_ADC_Start(hadc);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 fe1b 	bl	8001a9c <HAL_ADC_Start>

	// Espera hasta que la conversión termine
	if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 8000e66:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fec4 	bl	8001bf8 <HAL_ADC_PollForConversion>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d104      	bne.n	8000e80 <readADC+0x58>
		// Retorna el valor convertido
		return HAL_ADC_GetValue(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 ffc4 	bl	8001e04 <HAL_ADC_GetValue>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	e000      	b.n	8000e82 <readADC+0x5a>
	}

	return 0; // Retorna 0 en caso de error
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <mppt>:

void mppt(int *dutyCycle, float *power, float *previousPower) {
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
	const int deltaDuty = 10;    // Incremento o decremento del Duty Cycle
 8000e96:	230a      	movs	r3, #10
 8000e98:	617b      	str	r3, [r7, #20]
	if (*power > *previousPower) {
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	f7ff ff7f 	bl	8000da8 <__aeabi_fcmpgt>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00a      	beq.n	8000ec6 <mppt+0x3c>
		if (*dutyCycle < 255)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2bfe      	cmp	r3, #254	@ 0xfe
 8000eb6:	dc10      	bgt.n	8000eda <mppt+0x50>
			*dutyCycle += deltaDuty; // Si la potencia ha aumentado, continuar ajustando en la misma dirección
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	441a      	add	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e009      	b.n	8000eda <mppt+0x50>
	} else {
		if (*dutyCycle > 0)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	dd05      	ble.n	8000eda <mppt+0x50>
			*dutyCycle -= deltaDuty; // Si la potencia ha disminuido, invertir la dirección del ajuste
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	1ad2      	subs	r2, r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	601a      	str	r2, [r3, #0]
	}

	if (*dutyCycle < 0)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	da02      	bge.n	8000ee8 <mppt+0x5e>
		*dutyCycle = 0; // Asegurar que el Duty Cycle esté dentro de los límites permitidos (0-255)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
	if (*dutyCycle > 255)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2bff      	cmp	r3, #255	@ 0xff
 8000eee:	dd02      	ble.n	8000ef6 <mppt+0x6c>
		*dutyCycle = 255;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	22ff      	movs	r2, #255	@ 0xff
 8000ef4:	601a      	str	r2, [r3, #0]

	*previousPower = *power; // Actualizar `previousPower` con el valor actual de `power`
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	601a      	str	r2, [r3, #0]
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f0c:	b09e      	sub	sp, #120	@ 0x78
 8000f0e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f000 fc66 	bl	80017e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f8b2 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f000 f9ea 	bl	80012f0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f1c:	f000 f8fe 	bl	800111c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f20:	f000 f93a 	bl	8001198 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f24:	f000 f9ba 	bl	800129c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	// Iniciar PWM
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	484b      	ldr	r0, [pc, #300]	@ (8001058 <main+0x150>)
 8000f2c:	f002 f956 	bl	80031dc <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// Leer voltaje y corriente usando ADC
		V_in = readADC(&hadc1, VPANEL_CHANNEL) * (3.3 / 4095.0);
 8000f30:	2101      	movs	r1, #1
 8000f32:	484a      	ldr	r0, [pc, #296]	@ (800105c <main+0x154>)
 8000f34:	f7ff ff78 	bl	8000e28 <readADC>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fb06 	bl	800054c <__aeabi_ui2d>
 8000f40:	a343      	add	r3, pc, #268	@ (adr r3, 8001050 <main+0x148>)
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	f7ff fb7b 	bl	8000640 <__aeabi_dmul>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fe6d 	bl	8000c30 <__aeabi_d2f>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a41      	ldr	r2, [pc, #260]	@ (8001060 <main+0x158>)
 8000f5a:	6013      	str	r3, [r2, #0]
		I_in = readADC(&hadc1, IPANEL_CHANNEL) * (3.3 / 4095.0);
 8000f5c:	2106      	movs	r1, #6
 8000f5e:	483f      	ldr	r0, [pc, #252]	@ (800105c <main+0x154>)
 8000f60:	f7ff ff62 	bl	8000e28 <readADC>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff faf0 	bl	800054c <__aeabi_ui2d>
 8000f6c:	a338      	add	r3, pc, #224	@ (adr r3, 8001050 <main+0x148>)
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f7ff fb65 	bl	8000640 <__aeabi_dmul>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f7ff fe57 	bl	8000c30 <__aeabi_d2f>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a37      	ldr	r2, [pc, #220]	@ (8001064 <main+0x15c>)
 8000f86:	6013      	str	r3, [r2, #0]

		// Calcular potencia
		power = V_in * I_in;
 8000f88:	4b35      	ldr	r3, [pc, #212]	@ (8001060 <main+0x158>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a35      	ldr	r2, [pc, #212]	@ (8001064 <main+0x15c>)
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff f8e4 	bl	8000160 <__aeabi_fmul>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b32      	ldr	r3, [pc, #200]	@ (8001068 <main+0x160>)
 8000f9e:	601a      	str	r2, [r3, #0]

		// Algoritmo MPPT
		int i =0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	667b      	str	r3, [r7, #100]	@ 0x64
		if(i==0) power = 0.5;
 8000fa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d103      	bne.n	8000fb2 <main+0xaa>
 8000faa:	4b2f      	ldr	r3, [pc, #188]	@ (8001068 <main+0x160>)
 8000fac:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8000fb0:	601a      	str	r2, [r3, #0]
		if(i==10) power = 1.5;
 8000fb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fb4:	2b0a      	cmp	r3, #10
 8000fb6:	d103      	bne.n	8000fc0 <main+0xb8>
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001068 <main+0x160>)
 8000fba:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000fbe:	601a      	str	r2, [r3, #0]
		if(i>10) i = 0;
 8000fc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fc2:	2b0a      	cmp	r3, #10
 8000fc4:	dd01      	ble.n	8000fca <main+0xc2>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	667b      	str	r3, [r7, #100]	@ 0x64
		i++;
 8000fca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000fcc:	3301      	adds	r3, #1
 8000fce:	667b      	str	r3, [r7, #100]	@ 0x64

		mppt(&dutyCycle, &power, &previousPower);
 8000fd0:	4a26      	ldr	r2, [pc, #152]	@ (800106c <main+0x164>)
 8000fd2:	4925      	ldr	r1, [pc, #148]	@ (8001068 <main+0x160>)
 8000fd4:	4826      	ldr	r0, [pc, #152]	@ (8001070 <main+0x168>)
 8000fd6:	f7ff ff58 	bl	8000e8a <mppt>


		// Ajustar ciclo de trabajo del PWM
		//dutyCycle = 150;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8000fda:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <main+0x168>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <main+0x150>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	635a      	str	r2, [r3, #52]	@ 0x34
		// Imprimir datos al puerto serie
		char buffer[100];
		sprintf(buffer, "V_in: %.2f V, I_in: %.2f A, Power: %.2f W\n", V_in,
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8001060 <main+0x158>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fad1 	bl	8000590 <__aeabi_f2d>
 8000fee:	4680      	mov	r8, r0
 8000ff0:	4689      	mov	r9, r1
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8001064 <main+0x15c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faca 	bl	8000590 <__aeabi_f2d>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
 8001000:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <main+0x160>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fac3 	bl	8000590 <__aeabi_f2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4638      	mov	r0, r7
 8001010:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001014:	e9cd 4500 	strd	r4, r5, [sp]
 8001018:	4642      	mov	r2, r8
 800101a:	464b      	mov	r3, r9
 800101c:	4915      	ldr	r1, [pc, #84]	@ (8001074 <main+0x16c>)
 800101e:	f003 fd9b 	bl	8004b58 <siprintf>
				I_in, power); // @suppress("Float formatting support")
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 8001022:	463b      	mov	r3, r7
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff f893 	bl	8000150 <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	b29a      	uxth	r2, r3
 800102e:	4639      	mov	r1, r7
 8001030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001034:	4810      	ldr	r0, [pc, #64]	@ (8001078 <main+0x170>)
 8001036:	f002 fd4e 	bl	8003ad6 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		// Guardar la potencia anterior
		previousPower = power;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <main+0x160>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a0b      	ldr	r2, [pc, #44]	@ (800106c <main+0x164>)
 8001040:	6013      	str	r3, [r2, #0]
//
////		Para prender y apagar el led que viene en la bluepil
//      HAL_GPIO_WritePin(GPIOC, ACTIVADOR_PIN, GPIO_PIN_SET);
//      HAL_Delay(1000); // 1 segundo de delay
//      HAL_GPIO_WritePin(GPIOC, ACTIVADOR_PIN, GPIO_PIN_RESET);
      HAL_Delay(500); // 1 segundo de delay
 8001042:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001046:	f000 fc2d 	bl	80018a4 <HAL_Delay>
	while (1) {
 800104a:	e771      	b.n	8000f30 <main+0x28>
 800104c:	f3af 8000 	nop.w
 8001050:	e734d9b4 	.word	0xe734d9b4
 8001054:	3f4a680c 	.word	0x3f4a680c
 8001058:	20000224 	.word	0x20000224
 800105c:	200001f4 	.word	0x200001f4
 8001060:	200002b4 	.word	0x200002b4
 8001064:	200002b8 	.word	0x200002b8
 8001068:	200002bc 	.word	0x200002bc
 800106c:	200002c0 	.word	0x200002c0
 8001070:	20000000 	.word	0x20000000
 8001074:	08008550 	.word	0x08008550
 8001078:	2000026c 	.word	0x2000026c

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	@ 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001086:	2228      	movs	r2, #40	@ 0x28
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f004 fcd6 	bl	8005a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b0:	2301      	movs	r3, #1
 80010b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b4:	2310      	movs	r3, #16
 80010b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 fabf 	bl	8002644 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80010cc:	f000 f95c 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fd2c 	bl	8002b48 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80010f6:	f000 f947 	bl	8001388 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010fa:	2302      	movs	r3, #2
 80010fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4618      	mov	r0, r3
 8001106:	f001 fead 	bl	8002e64 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001110:	f000 f93a 	bl	8001388 <Error_Handler>
  }
}
 8001114:	bf00      	nop
 8001116:	3750      	adds	r7, #80	@ 0x50
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_ADC1_Init+0x74>)
 800112e:	4a19      	ldr	r2, [pc, #100]	@ (8001194 <MX_ADC1_Init+0x78>)
 8001130:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001132:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <MX_ADC1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001138:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <MX_ADC1_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800113e:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <MX_ADC1_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <MX_ADC1_Init+0x74>)
 8001146:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800114a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114c:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <MX_ADC1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <MX_ADC1_Init+0x74>)
 8001154:	2201      	movs	r2, #1
 8001156:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001158:	480d      	ldr	r0, [pc, #52]	@ (8001190 <MX_ADC1_Init+0x74>)
 800115a:	f000 fbc7 	bl	80018ec <HAL_ADC_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001164:	f000 f910 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001168:	2301      	movs	r3, #1
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116c:	2301      	movs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_ADC1_Init+0x74>)
 800117a:	f000 fe4f 	bl	8001e1c <HAL_ADC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001184:	f000 f900 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200001f4 	.word	0x200001f4
 8001194:	40012400 	.word	0x40012400

08001198 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b092      	sub	sp, #72	@ 0x48
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2220      	movs	r2, #32
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 fc3a 	bl	8005a3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c8:	4b32      	ldr	r3, [pc, #200]	@ (8001294 <MX_TIM1_Init+0xfc>)
 80011ca:	4a33      	ldr	r2, [pc, #204]	@ (8001298 <MX_TIM1_Init+0x100>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 80011ce:	4b31      	ldr	r3, [pc, #196]	@ (8001294 <MX_TIM1_Init+0xfc>)
 80011d0:	2203      	movs	r2, #3
 80011d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <MX_TIM1_Init+0xfc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80011da:	4b2e      	ldr	r3, [pc, #184]	@ (8001294 <MX_TIM1_Init+0xfc>)
 80011dc:	22ff      	movs	r2, #255	@ 0xff
 80011de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001294 <MX_TIM1_Init+0xfc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <MX_TIM1_Init+0xfc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ec:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <MX_TIM1_Init+0xfc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011f2:	4828      	ldr	r0, [pc, #160]	@ (8001294 <MX_TIM1_Init+0xfc>)
 80011f4:	f001 ffa2 	bl	800313c <HAL_TIM_PWM_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80011fe:	f000 f8c3 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001206:	2300      	movs	r3, #0
 8001208:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800120a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800120e:	4619      	mov	r1, r3
 8001210:	4820      	ldr	r0, [pc, #128]	@ (8001294 <MX_TIM1_Init+0xfc>)
 8001212:	f002 fb61 	bl	80038d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800121c:	f000 f8b4 	bl	8001388 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001220:	2360      	movs	r3, #96	@ 0x60
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800122c:	2300      	movs	r3, #0
 800122e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001240:	2200      	movs	r2, #0
 8001242:	4619      	mov	r1, r3
 8001244:	4813      	ldr	r0, [pc, #76]	@ (8001294 <MX_TIM1_Init+0xfc>)
 8001246:	f002 f86b 	bl	8003320 <HAL_TIM_PWM_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001250:	f000 f89a 	bl	8001388 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001268:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800126c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4807      	ldr	r0, [pc, #28]	@ (8001294 <MX_TIM1_Init+0xfc>)
 8001278:	f002 fb8c 	bl	8003994 <HAL_TIMEx_ConfigBreakDeadTime>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001282:	f000 f881 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001286:	4803      	ldr	r0, [pc, #12]	@ (8001294 <MX_TIM1_Init+0xfc>)
 8001288:	f000 f910 	bl	80014ac <HAL_TIM_MspPostInit>

}
 800128c:	bf00      	nop
 800128e:	3748      	adds	r7, #72	@ 0x48
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000224 	.word	0x20000224
 8001298:	40012c00 	.word	0x40012c00

0800129c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <MX_USART1_UART_Init+0x50>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012d4:	f002 fbaf 	bl	8003a36 <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012de:	f000 f853 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000026c 	.word	0x2000026c
 80012ec:	40013800 	.word	0x40013800

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001304:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <MX_GPIO_Init+0x90>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <MX_GPIO_Init+0x90>)
 800130a:	f043 0310 	orr.w	r3, r3, #16
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <MX_GPIO_Init+0x90>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0310 	and.w	r3, r3, #16
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <MX_GPIO_Init+0x90>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a17      	ldr	r2, [pc, #92]	@ (8001380 <MX_GPIO_Init+0x90>)
 8001322:	f043 0320 	orr.w	r3, r3, #32
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <MX_GPIO_Init+0x90>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0320 	and.w	r3, r3, #32
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <MX_GPIO_Init+0x90>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a11      	ldr	r2, [pc, #68]	@ (8001380 <MX_GPIO_Init+0x90>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_GPIO_Init+0x90>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001352:	480c      	ldr	r0, [pc, #48]	@ (8001384 <MX_GPIO_Init+0x94>)
 8001354:	f001 f95e 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001358:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800135c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2302      	movs	r3, #2
 8001368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	4619      	mov	r1, r3
 8001370:	4804      	ldr	r0, [pc, #16]	@ (8001384 <MX_GPIO_Init+0x94>)
 8001372:	f000 ffcb 	bl	800230c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001376:	bf00      	nop
 8001378:	3720      	adds	r7, #32
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	40011000 	.word	0x40011000

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <Error_Handler+0x8>

08001394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <HAL_MspInit+0x5c>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	4a14      	ldr	r2, [pc, #80]	@ (80013f0 <HAL_MspInit+0x5c>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6193      	str	r3, [r2, #24]
 80013a6:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <HAL_MspInit+0x5c>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <HAL_MspInit+0x5c>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	4a0e      	ldr	r2, [pc, #56]	@ (80013f0 <HAL_MspInit+0x5c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013bc:	61d3      	str	r3, [r2, #28]
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <HAL_MspInit+0x5c>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013ca:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <HAL_MspInit+0x60>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <HAL_MspInit+0x60>)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000

080013f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <HAL_ADC_MspInit+0x6c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d121      	bne.n	800145c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <HAL_ADC_MspInit+0x70>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <HAL_ADC_MspInit+0x70>)
 800141e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <HAL_ADC_MspInit+0x70>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <HAL_ADC_MspInit+0x70>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a0c      	ldr	r2, [pc, #48]	@ (8001468 <HAL_ADC_MspInit+0x70>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <HAL_ADC_MspInit+0x70>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = V_panel_Pin|I_panel_Pin;
 8001448:	2342      	movs	r3, #66	@ 0x42
 800144a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144c:	2303      	movs	r3, #3
 800144e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4619      	mov	r1, r3
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <HAL_ADC_MspInit+0x74>)
 8001458:	f000 ff58 	bl	800230c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40012400 	.word	0x40012400
 8001468:	40021000 	.word	0x40021000
 800146c:	40010800 	.word	0x40010800

08001470 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a09      	ldr	r2, [pc, #36]	@ (80014a4 <HAL_TIM_PWM_MspInit+0x34>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d10b      	bne.n	800149a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_TIM_PWM_MspInit+0x38>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	4a08      	ldr	r2, [pc, #32]	@ (80014a8 <HAL_TIM_PWM_MspInit+0x38>)
 8001488:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800148c:	6193      	str	r3, [r2, #24]
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_TIM_PWM_MspInit+0x38>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	40012c00 	.word	0x40012c00
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a10      	ldr	r2, [pc, #64]	@ (8001508 <HAL_TIM_MspPostInit+0x5c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d118      	bne.n	80014fe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <HAL_TIM_MspPostInit+0x60>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a0e      	ldr	r2, [pc, #56]	@ (800150c <HAL_TIM_MspPostInit+0x60>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <HAL_TIM_MspPostInit+0x60>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 80014e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <HAL_TIM_MspPostInit+0x64>)
 80014fa:	f000 ff07 	bl	800230c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3720      	adds	r7, #32
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40012c00 	.word	0x40012c00
 800150c:	40021000 	.word	0x40021000
 8001510:	40010800 	.word	0x40010800

08001514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <HAL_UART_MspInit+0x8c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d131      	bne.n	8001598 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001534:	4b1b      	ldr	r3, [pc, #108]	@ (80015a4 <HAL_UART_MspInit+0x90>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a1a      	ldr	r2, [pc, #104]	@ (80015a4 <HAL_UART_MspInit+0x90>)
 800153a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <HAL_UART_MspInit+0x90>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <HAL_UART_MspInit+0x90>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a14      	ldr	r2, [pc, #80]	@ (80015a4 <HAL_UART_MspInit+0x90>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_UART_MspInit+0x90>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001568:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4619      	mov	r1, r3
 8001578:	480b      	ldr	r0, [pc, #44]	@ (80015a8 <HAL_UART_MspInit+0x94>)
 800157a:	f000 fec7 	bl	800230c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800157e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4619      	mov	r1, r3
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <HAL_UART_MspInit+0x94>)
 8001594:	f000 feba 	bl	800230c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40013800 	.word	0x40013800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010800 	.word	0x40010800

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <NMI_Handler+0x4>

080015b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <MemManage_Handler+0x4>

080015c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 f936 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return 1;
 8001608:	2301      	movs	r3, #1
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <_kill>:

int _kill(int pid, int sig)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800161c:	f004 fa1a 	bl	8005a54 <__errno>
 8001620:	4603      	mov	r3, r0
 8001622:	2216      	movs	r2, #22
 8001624:	601a      	str	r2, [r3, #0]
  return -1;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <_exit>:

void _exit (int status)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800163a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffe7 	bl	8001612 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <_exit+0x12>

08001648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e00a      	b.n	8001670 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800165a:	f3af 8000 	nop.w
 800165e:	4601      	mov	r1, r0
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	60ba      	str	r2, [r7, #8]
 8001666:	b2ca      	uxtb	r2, r1
 8001668:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf0      	blt.n	800165a <_read+0x12>
  }

  return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e009      	b.n	80016a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbf1      	blt.n	8001694 <_write+0x12>
  }
  return len;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_close>:

int _close(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016e0:	605a      	str	r2, [r3, #4]
  return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <_isatty>:

int _isatty(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
	...

0800171c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001724:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <_sbrk+0x5c>)
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <_sbrk+0x60>)
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001730:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <_sbrk+0x64>)
 800173a:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <_sbrk+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d207      	bcs.n	800175c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800174c:	f004 f982 	bl	8005a54 <__errno>
 8001750:	4603      	mov	r3, r0
 8001752:	220c      	movs	r2, #12
 8001754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800175a:	e009      	b.n	8001770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <_sbrk+0x64>)
 800176c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20005000 	.word	0x20005000
 800177c:	00000400 	.word	0x00000400
 8001780:	200002c4 	.word	0x200002c4
 8001784:	20000418 	.word	0x20000418

08001788 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001794:	f7ff fff8 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480b      	ldr	r0, [pc, #44]	@ (80017c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800179a:	490c      	ldr	r1, [pc, #48]	@ (80017cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800179c:	4a0c      	ldr	r2, [pc, #48]	@ (80017d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a09      	ldr	r2, [pc, #36]	@ (80017d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017b0:	4c09      	ldr	r4, [pc, #36]	@ (80017d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017be:	f004 f94f 	bl	8005a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017c2:	f7ff fba1 	bl	8000f08 <main>
  bx lr
 80017c6:	4770      	bx	lr
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80017d0:	080089f4 	.word	0x080089f4
  ldr r2, =_sbss
 80017d4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80017d8:	20000418 	.word	0x20000418

080017dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC1_2_IRQHandler>
	...

080017e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_Init+0x28>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <HAL_Init+0x28>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 fd57 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	200f      	movs	r0, #15
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fdca 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40022000 	.word	0x40022000

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fd61 	bl	80022f2 <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001848:	f000 fd37 	bl	80022ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	@ (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000004 	.word	0x20000004
 8001864:	2000000c 	.word	0x2000000c
 8001868:	20000008 	.word	0x20000008

0800186c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <HAL_IncTick+0x1c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b05      	ldr	r3, [pc, #20]	@ (800188c <HAL_IncTick+0x20>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a03      	ldr	r2, [pc, #12]	@ (800188c <HAL_IncTick+0x20>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	2000000c 	.word	0x2000000c
 800188c:	200002c8 	.word	0x200002c8

08001890 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b02      	ldr	r3, [pc, #8]	@ (80018a0 <HAL_GetTick+0x10>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	200002c8 	.word	0x200002c8

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff fff0 	bl	8001890 <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_Delay+0x44>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ca:	bf00      	nop
 80018cc:	f7ff ffe0 	bl	8001890 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000000c 	.word	0x2000000c

080018ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e0be      	b.n	8001a8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fd64 	bl	80013f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fbc5 	bl	80020c0 <ADC_ConversionStop_Disable>
 8001936:	4603      	mov	r3, r0
 8001938:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 8099 	bne.w	8001a7a <HAL_ADC_Init+0x18e>
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 8095 	bne.w	8001a7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001954:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001958:	f023 0302 	bic.w	r3, r3, #2
 800195c:	f043 0202 	orr.w	r2, r3, #2
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800196c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7b1b      	ldrb	r3, [r3, #12]
 8001972:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001974:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	4313      	orrs	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001984:	d003      	beq.n	800198e <HAL_ADC_Init+0xa2>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d102      	bne.n	8001994 <HAL_ADC_Init+0xa8>
 800198e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001992:	e000      	b.n	8001996 <HAL_ADC_Init+0xaa>
 8001994:	2300      	movs	r3, #0
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7d1b      	ldrb	r3, [r3, #20]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d119      	bne.n	80019d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7b1b      	ldrb	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d109      	bne.n	80019c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	035a      	lsls	r2, r3, #13
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	e00b      	b.n	80019d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	f043 0220 	orr.w	r2, r3, #32
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <HAL_ADC_Init+0x1a8>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	68b9      	ldr	r1, [r7, #8]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a08:	d003      	beq.n	8001a12 <HAL_ADC_Init+0x126>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d104      	bne.n	8001a1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	051b      	lsls	r3, r3, #20
 8001a1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a22:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	4b18      	ldr	r3, [pc, #96]	@ (8001a98 <HAL_ADC_Init+0x1ac>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d10b      	bne.n	8001a58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4a:	f023 0303 	bic.w	r3, r3, #3
 8001a4e:	f043 0201 	orr.w	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a56:	e018      	b.n	8001a8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	f023 0312 	bic.w	r3, r3, #18
 8001a60:	f043 0210 	orr.w	r2, r3, #16
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a78:	e007      	b.n	8001a8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7e:	f043 0210 	orr.w	r2, r3, #16
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	ffe1f7fd 	.word	0xffe1f7fd
 8001a98:	ff1f0efe 	.word	0xff1f0efe

08001a9c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_ADC_Start+0x1a>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e098      	b.n	8001be8 <HAL_ADC_Start+0x14c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 faa4 	bl	800200c <ADC_Enable>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 8087 	bne.w	8001bde <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a41      	ldr	r2, [pc, #260]	@ (8001bf0 <HAL_ADC_Start+0x154>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d105      	bne.n	8001afa <HAL_ADC_Start+0x5e>
 8001aee:	4b41      	ldr	r3, [pc, #260]	@ (8001bf4 <HAL_ADC_Start+0x158>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d115      	bne.n	8001b26 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d026      	beq.n	8001b62 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b18:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b1c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b24:	e01d      	b.n	8001b62 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf4 <HAL_ADC_Start+0x158>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d004      	beq.n	8001b46 <HAL_ADC_Start+0xaa>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a2b      	ldr	r2, [pc, #172]	@ (8001bf0 <HAL_ADC_Start+0x154>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d10d      	bne.n	8001b62 <HAL_ADC_Start+0xc6>
 8001b46:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <HAL_ADC_Start+0x158>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b5a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	f023 0206 	bic.w	r2, r3, #6
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b7a:	e002      	b.n	8001b82 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f06f 0202 	mvn.w	r2, #2
 8001b92:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b9e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ba2:	d113      	bne.n	8001bcc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ba8:	4a11      	ldr	r2, [pc, #68]	@ (8001bf0 <HAL_ADC_Start+0x154>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d105      	bne.n	8001bba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bae:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <HAL_ADC_Start+0x158>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d108      	bne.n	8001bcc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	e00c      	b.n	8001be6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	e003      	b.n	8001be6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40012800 	.word	0x40012800
 8001bf4:	40012400 	.word	0x40012400

08001bf8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c0e:	f7ff fe3f 	bl	8001890 <HAL_GetTick>
 8001c12:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00b      	beq.n	8001c3a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c26:	f043 0220 	orr.w	r2, r3, #32
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0d3      	b.n	8001de2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d131      	bne.n	8001cac <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d12a      	bne.n	8001cac <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c56:	e021      	b.n	8001c9c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c5e:	d01d      	beq.n	8001c9c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_ADC_PollForConversion+0x7e>
 8001c66:	f7ff fe13 	bl	8001890 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d212      	bcs.n	8001c9c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10b      	bne.n	8001c9c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c88:	f043 0204 	orr.w	r2, r3, #4
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0a2      	b.n	8001de2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0d6      	beq.n	8001c58 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001caa:	e070      	b.n	8001d8e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001cac:	4b4f      	ldr	r3, [pc, #316]	@ (8001dec <HAL_ADC_PollForConversion+0x1f4>)
 8001cae:	681c      	ldr	r4, [r3, #0]
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f001 f98d 	bl	8002fd0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6919      	ldr	r1, [r3, #16]
 8001cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8001df0 <HAL_ADC_PollForConversion+0x1f8>)
 8001cc4:	400b      	ands	r3, r1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_ADC_PollForConversion+0x104>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68d9      	ldr	r1, [r3, #12]
 8001cd0:	4b48      	ldr	r3, [pc, #288]	@ (8001df4 <HAL_ADC_PollForConversion+0x1fc>)
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d111      	bne.n	8001cfc <HAL_ADC_PollForConversion+0x104>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6919      	ldr	r1, [r3, #16]
 8001cde:	4b46      	ldr	r3, [pc, #280]	@ (8001df8 <HAL_ADC_PollForConversion+0x200>)
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d108      	bne.n	8001cf8 <HAL_ADC_PollForConversion+0x100>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68d9      	ldr	r1, [r3, #12]
 8001cec:	4b43      	ldr	r3, [pc, #268]	@ (8001dfc <HAL_ADC_PollForConversion+0x204>)
 8001cee:	400b      	ands	r3, r1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_PollForConversion+0x100>
 8001cf4:	2314      	movs	r3, #20
 8001cf6:	e020      	b.n	8001d3a <HAL_ADC_PollForConversion+0x142>
 8001cf8:	2329      	movs	r3, #41	@ 0x29
 8001cfa:	e01e      	b.n	8001d3a <HAL_ADC_PollForConversion+0x142>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6919      	ldr	r1, [r3, #16]
 8001d02:	4b3d      	ldr	r3, [pc, #244]	@ (8001df8 <HAL_ADC_PollForConversion+0x200>)
 8001d04:	400b      	ands	r3, r1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_ADC_PollForConversion+0x120>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68d9      	ldr	r1, [r3, #12]
 8001d10:	4b3a      	ldr	r3, [pc, #232]	@ (8001dfc <HAL_ADC_PollForConversion+0x204>)
 8001d12:	400b      	ands	r3, r1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00d      	beq.n	8001d34 <HAL_ADC_PollForConversion+0x13c>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6919      	ldr	r1, [r3, #16]
 8001d1e:	4b38      	ldr	r3, [pc, #224]	@ (8001e00 <HAL_ADC_PollForConversion+0x208>)
 8001d20:	400b      	ands	r3, r1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d108      	bne.n	8001d38 <HAL_ADC_PollForConversion+0x140>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68d9      	ldr	r1, [r3, #12]
 8001d2c:	4b34      	ldr	r3, [pc, #208]	@ (8001e00 <HAL_ADC_PollForConversion+0x208>)
 8001d2e:	400b      	ands	r3, r1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_PollForConversion+0x140>
 8001d34:	2354      	movs	r3, #84	@ 0x54
 8001d36:	e000      	b.n	8001d3a <HAL_ADC_PollForConversion+0x142>
 8001d38:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d40:	e021      	b.n	8001d86 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d48:	d01a      	beq.n	8001d80 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d007      	beq.n	8001d60 <HAL_ADC_PollForConversion+0x168>
 8001d50:	f7ff fd9e 	bl	8001890 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d20f      	bcs.n	8001d80 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d90b      	bls.n	8001d80 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6c:	f043 0204 	orr.w	r2, r3, #4
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e030      	b.n	8001de2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3301      	adds	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d8d9      	bhi.n	8001d42 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f06f 0212 	mvn.w	r2, #18
 8001d96:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001dae:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001db2:	d115      	bne.n	8001de0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d111      	bne.n	8001de0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000004 	.word	0x20000004
 8001df0:	24924924 	.word	0x24924924
 8001df4:	00924924 	.word	0x00924924
 8001df8:	12492492 	.word	0x12492492
 8001dfc:	00492492 	.word	0x00492492
 8001e00:	00249249 	.word	0x00249249

08001e04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x20>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e0dc      	b.n	8001ff6 <HAL_ADC_ConfigChannel+0x1da>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b06      	cmp	r3, #6
 8001e4a:	d81c      	bhi.n	8001e86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b05      	subs	r3, #5
 8001e5e:	221f      	movs	r2, #31
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4019      	ands	r1, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	3b05      	subs	r3, #5
 8001e78:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e84:	e03c      	b.n	8001f00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d81c      	bhi.n	8001ec8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b23      	subs	r3, #35	@ 0x23
 8001ea0:	221f      	movs	r2, #31
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	4019      	ands	r1, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b23      	subs	r3, #35	@ 0x23
 8001eba:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ec6:	e01b      	b.n	8001f00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3b41      	subs	r3, #65	@ 0x41
 8001eda:	221f      	movs	r2, #31
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4019      	ands	r1, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3b41      	subs	r3, #65	@ 0x41
 8001ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	d91c      	bls.n	8001f42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68d9      	ldr	r1, [r3, #12]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	3b1e      	subs	r3, #30
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4019      	ands	r1, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6898      	ldr	r0, [r3, #8]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	3b1e      	subs	r3, #30
 8001f34:	fa00 f203 	lsl.w	r2, r0, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	e019      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6919      	ldr	r1, [r3, #16]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	2207      	movs	r2, #7
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4019      	ands	r1, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6898      	ldr	r0, [r3, #8]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d003      	beq.n	8001f86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f82:	2b11      	cmp	r3, #17
 8001f84:	d132      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002000 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d125      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d126      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001fac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b10      	cmp	r3, #16
 8001fb4:	d11a      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fb6:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a13      	ldr	r2, [pc, #76]	@ (8002008 <HAL_ADC_ConfigChannel+0x1ec>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	0c9a      	lsrs	r2, r3, #18
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fcc:	e002      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f9      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x1b2>
 8001fda:	e007      	b.n	8001fec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe0:	f043 0220 	orr.w	r2, r3, #32
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40012400 	.word	0x40012400
 8002004:	20000004 	.word	0x20000004
 8002008:	431bde83 	.word	0x431bde83

0800200c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d040      	beq.n	80020ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0201 	orr.w	r2, r2, #1
 8002038:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800203a:	4b1f      	ldr	r3, [pc, #124]	@ (80020b8 <ADC_Enable+0xac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1f      	ldr	r2, [pc, #124]	@ (80020bc <ADC_Enable+0xb0>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	0c9b      	lsrs	r3, r3, #18
 8002046:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002048:	e002      	b.n	8002050 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3b01      	subs	r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f9      	bne.n	800204a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002056:	f7ff fc1b 	bl	8001890 <HAL_GetTick>
 800205a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800205c:	e01f      	b.n	800209e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800205e:	f7ff fc17 	bl	8001890 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d918      	bls.n	800209e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d011      	beq.n	800209e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207e:	f043 0210 	orr.w	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208a:	f043 0201 	orr.w	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e007      	b.n	80020ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d1d8      	bne.n	800205e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000004 	.word	0x20000004
 80020bc:	431bde83 	.word	0x431bde83

080020c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d12e      	bne.n	8002138 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020ea:	f7ff fbd1 	bl	8001890 <HAL_GetTick>
 80020ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020f0:	e01b      	b.n	800212a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020f2:	f7ff fbcd 	bl	8001890 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d914      	bls.n	800212a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10d      	bne.n	800212a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002112:	f043 0210 	orr.w	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e007      	b.n	800213a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d0dc      	beq.n	80020f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	@ (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	@ (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	@ (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	@ 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	@ 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002270:	d301      	bcc.n	8002276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002272:	2301      	movs	r3, #1
 8002274:	e00f      	b.n	8002296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002276:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <SysTick_Config+0x40>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227e:	210f      	movs	r1, #15
 8002280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002284:	f7ff ff90 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <SysTick_Config+0x40>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228e:	4b04      	ldr	r3, [pc, #16]	@ (80022a0 <SysTick_Config+0x40>)
 8002290:	2207      	movs	r2, #7
 8002292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000e010 	.word	0xe000e010

080022a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff49 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff5e 	bl	800218c <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff90 	bl	80021fc <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5f 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ffb0 	bl	8002260 <SysTick_Config>
 8002300:	4603      	mov	r3, r0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800230c:	b480      	push	{r7}
 800230e:	b08b      	sub	sp, #44	@ 0x2c
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231e:	e169      	b.n	80025f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002320:	2201      	movs	r2, #1
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	429a      	cmp	r2, r3
 800233a:	f040 8158 	bne.w	80025ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4a9a      	ldr	r2, [pc, #616]	@ (80025ac <HAL_GPIO_Init+0x2a0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d05e      	beq.n	8002406 <HAL_GPIO_Init+0xfa>
 8002348:	4a98      	ldr	r2, [pc, #608]	@ (80025ac <HAL_GPIO_Init+0x2a0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d875      	bhi.n	800243a <HAL_GPIO_Init+0x12e>
 800234e:	4a98      	ldr	r2, [pc, #608]	@ (80025b0 <HAL_GPIO_Init+0x2a4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d058      	beq.n	8002406 <HAL_GPIO_Init+0xfa>
 8002354:	4a96      	ldr	r2, [pc, #600]	@ (80025b0 <HAL_GPIO_Init+0x2a4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d86f      	bhi.n	800243a <HAL_GPIO_Init+0x12e>
 800235a:	4a96      	ldr	r2, [pc, #600]	@ (80025b4 <HAL_GPIO_Init+0x2a8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d052      	beq.n	8002406 <HAL_GPIO_Init+0xfa>
 8002360:	4a94      	ldr	r2, [pc, #592]	@ (80025b4 <HAL_GPIO_Init+0x2a8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d869      	bhi.n	800243a <HAL_GPIO_Init+0x12e>
 8002366:	4a94      	ldr	r2, [pc, #592]	@ (80025b8 <HAL_GPIO_Init+0x2ac>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d04c      	beq.n	8002406 <HAL_GPIO_Init+0xfa>
 800236c:	4a92      	ldr	r2, [pc, #584]	@ (80025b8 <HAL_GPIO_Init+0x2ac>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d863      	bhi.n	800243a <HAL_GPIO_Init+0x12e>
 8002372:	4a92      	ldr	r2, [pc, #584]	@ (80025bc <HAL_GPIO_Init+0x2b0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d046      	beq.n	8002406 <HAL_GPIO_Init+0xfa>
 8002378:	4a90      	ldr	r2, [pc, #576]	@ (80025bc <HAL_GPIO_Init+0x2b0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d85d      	bhi.n	800243a <HAL_GPIO_Init+0x12e>
 800237e:	2b12      	cmp	r3, #18
 8002380:	d82a      	bhi.n	80023d8 <HAL_GPIO_Init+0xcc>
 8002382:	2b12      	cmp	r3, #18
 8002384:	d859      	bhi.n	800243a <HAL_GPIO_Init+0x12e>
 8002386:	a201      	add	r2, pc, #4	@ (adr r2, 800238c <HAL_GPIO_Init+0x80>)
 8002388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800238c:	08002407 	.word	0x08002407
 8002390:	080023e1 	.word	0x080023e1
 8002394:	080023f3 	.word	0x080023f3
 8002398:	08002435 	.word	0x08002435
 800239c:	0800243b 	.word	0x0800243b
 80023a0:	0800243b 	.word	0x0800243b
 80023a4:	0800243b 	.word	0x0800243b
 80023a8:	0800243b 	.word	0x0800243b
 80023ac:	0800243b 	.word	0x0800243b
 80023b0:	0800243b 	.word	0x0800243b
 80023b4:	0800243b 	.word	0x0800243b
 80023b8:	0800243b 	.word	0x0800243b
 80023bc:	0800243b 	.word	0x0800243b
 80023c0:	0800243b 	.word	0x0800243b
 80023c4:	0800243b 	.word	0x0800243b
 80023c8:	0800243b 	.word	0x0800243b
 80023cc:	0800243b 	.word	0x0800243b
 80023d0:	080023e9 	.word	0x080023e9
 80023d4:	080023fd 	.word	0x080023fd
 80023d8:	4a79      	ldr	r2, [pc, #484]	@ (80025c0 <HAL_GPIO_Init+0x2b4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023de:	e02c      	b.n	800243a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	623b      	str	r3, [r7, #32]
          break;
 80023e6:	e029      	b.n	800243c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	3304      	adds	r3, #4
 80023ee:	623b      	str	r3, [r7, #32]
          break;
 80023f0:	e024      	b.n	800243c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	3308      	adds	r3, #8
 80023f8:	623b      	str	r3, [r7, #32]
          break;
 80023fa:	e01f      	b.n	800243c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	330c      	adds	r3, #12
 8002402:	623b      	str	r3, [r7, #32]
          break;
 8002404:	e01a      	b.n	800243c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d102      	bne.n	8002414 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800240e:	2304      	movs	r3, #4
 8002410:	623b      	str	r3, [r7, #32]
          break;
 8002412:	e013      	b.n	800243c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d105      	bne.n	8002428 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800241c:	2308      	movs	r3, #8
 800241e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	611a      	str	r2, [r3, #16]
          break;
 8002426:	e009      	b.n	800243c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002428:	2308      	movs	r3, #8
 800242a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	615a      	str	r2, [r3, #20]
          break;
 8002432:	e003      	b.n	800243c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002434:	2300      	movs	r3, #0
 8002436:	623b      	str	r3, [r7, #32]
          break;
 8002438:	e000      	b.n	800243c <HAL_GPIO_Init+0x130>
          break;
 800243a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2bff      	cmp	r3, #255	@ 0xff
 8002440:	d801      	bhi.n	8002446 <HAL_GPIO_Init+0x13a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	e001      	b.n	800244a <HAL_GPIO_Init+0x13e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3304      	adds	r3, #4
 800244a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2bff      	cmp	r3, #255	@ 0xff
 8002450:	d802      	bhi.n	8002458 <HAL_GPIO_Init+0x14c>
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	e002      	b.n	800245e <HAL_GPIO_Init+0x152>
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	3b08      	subs	r3, #8
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	210f      	movs	r1, #15
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	401a      	ands	r2, r3
 8002470:	6a39      	ldr	r1, [r7, #32]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	431a      	orrs	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80b1 	beq.w	80025ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800248c:	4b4d      	ldr	r3, [pc, #308]	@ (80025c4 <HAL_GPIO_Init+0x2b8>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	4a4c      	ldr	r2, [pc, #304]	@ (80025c4 <HAL_GPIO_Init+0x2b8>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6193      	str	r3, [r2, #24]
 8002498:	4b4a      	ldr	r3, [pc, #296]	@ (80025c4 <HAL_GPIO_Init+0x2b8>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024a4:	4a48      	ldr	r2, [pc, #288]	@ (80025c8 <HAL_GPIO_Init+0x2bc>)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	220f      	movs	r2, #15
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4013      	ands	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a40      	ldr	r2, [pc, #256]	@ (80025cc <HAL_GPIO_Init+0x2c0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d013      	beq.n	80024f8 <HAL_GPIO_Init+0x1ec>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a3f      	ldr	r2, [pc, #252]	@ (80025d0 <HAL_GPIO_Init+0x2c4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00d      	beq.n	80024f4 <HAL_GPIO_Init+0x1e8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a3e      	ldr	r2, [pc, #248]	@ (80025d4 <HAL_GPIO_Init+0x2c8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d007      	beq.n	80024f0 <HAL_GPIO_Init+0x1e4>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a3d      	ldr	r2, [pc, #244]	@ (80025d8 <HAL_GPIO_Init+0x2cc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d101      	bne.n	80024ec <HAL_GPIO_Init+0x1e0>
 80024e8:	2303      	movs	r3, #3
 80024ea:	e006      	b.n	80024fa <HAL_GPIO_Init+0x1ee>
 80024ec:	2304      	movs	r3, #4
 80024ee:	e004      	b.n	80024fa <HAL_GPIO_Init+0x1ee>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e002      	b.n	80024fa <HAL_GPIO_Init+0x1ee>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_GPIO_Init+0x1ee>
 80024f8:	2300      	movs	r3, #0
 80024fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fc:	f002 0203 	and.w	r2, r2, #3
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4093      	lsls	r3, r2
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800250a:	492f      	ldr	r1, [pc, #188]	@ (80025c8 <HAL_GPIO_Init+0x2bc>)
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002524:	4b2d      	ldr	r3, [pc, #180]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	492c      	ldr	r1, [pc, #176]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	608b      	str	r3, [r1, #8]
 8002530:	e006      	b.n	8002540 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002532:	4b2a      	ldr	r3, [pc, #168]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	43db      	mvns	r3, r3
 800253a:	4928      	ldr	r1, [pc, #160]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 800253c:	4013      	ands	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d006      	beq.n	800255a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800254c:	4b23      	ldr	r3, [pc, #140]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	4922      	ldr	r1, [pc, #136]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	60cb      	str	r3, [r1, #12]
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800255a:	4b20      	ldr	r3, [pc, #128]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	43db      	mvns	r3, r3
 8002562:	491e      	ldr	r1, [pc, #120]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 8002564:	4013      	ands	r3, r2
 8002566:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d006      	beq.n	8002582 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002574:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4918      	ldr	r1, [pc, #96]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	604b      	str	r3, [r1, #4]
 8002580:	e006      	b.n	8002590 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002582:	4b16      	ldr	r3, [pc, #88]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	43db      	mvns	r3, r3
 800258a:	4914      	ldr	r1, [pc, #80]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 800258c:	4013      	ands	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d021      	beq.n	80025e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800259c:	4b0f      	ldr	r3, [pc, #60]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	490e      	ldr	r1, [pc, #56]	@ (80025dc <HAL_GPIO_Init+0x2d0>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e021      	b.n	80025ee <HAL_GPIO_Init+0x2e2>
 80025aa:	bf00      	nop
 80025ac:	10320000 	.word	0x10320000
 80025b0:	10310000 	.word	0x10310000
 80025b4:	10220000 	.word	0x10220000
 80025b8:	10210000 	.word	0x10210000
 80025bc:	10120000 	.word	0x10120000
 80025c0:	10110000 	.word	0x10110000
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40010800 	.word	0x40010800
 80025d0:	40010c00 	.word	0x40010c00
 80025d4:	40011000 	.word	0x40011000
 80025d8:	40011400 	.word	0x40011400
 80025dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <HAL_GPIO_Init+0x304>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	4909      	ldr	r1, [pc, #36]	@ (8002610 <HAL_GPIO_Init+0x304>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	3301      	adds	r3, #1
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f47f ae8e 	bne.w	8002320 <HAL_GPIO_Init+0x14>
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	372c      	adds	r7, #44	@ 0x2c
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	40010400 	.word	0x40010400

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002630:	e003      	b.n	800263a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	611a      	str	r2, [r3, #16]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e272      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8087 	beq.w	8002772 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002664:	4b92      	ldr	r3, [pc, #584]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b04      	cmp	r3, #4
 800266e:	d00c      	beq.n	800268a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002670:	4b8f      	ldr	r3, [pc, #572]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d112      	bne.n	80026a2 <HAL_RCC_OscConfig+0x5e>
 800267c:	4b8c      	ldr	r3, [pc, #560]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002688:	d10b      	bne.n	80026a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268a:	4b89      	ldr	r3, [pc, #548]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d06c      	beq.n	8002770 <HAL_RCC_OscConfig+0x12c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d168      	bne.n	8002770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e24c      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x76>
 80026ac:	4b80      	ldr	r3, [pc, #512]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a7f      	ldr	r2, [pc, #508]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	e02e      	b.n	8002718 <HAL_RCC_OscConfig+0xd4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x98>
 80026c2:	4b7b      	ldr	r3, [pc, #492]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a7a      	ldr	r2, [pc, #488]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	4b78      	ldr	r3, [pc, #480]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a77      	ldr	r2, [pc, #476]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e01d      	b.n	8002718 <HAL_RCC_OscConfig+0xd4>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0xbc>
 80026e6:	4b72      	ldr	r3, [pc, #456]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a71      	ldr	r2, [pc, #452]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b6f      	ldr	r3, [pc, #444]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a6e      	ldr	r2, [pc, #440]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0xd4>
 8002700:	4b6b      	ldr	r3, [pc, #428]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a6a      	ldr	r2, [pc, #424]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b68      	ldr	r3, [pc, #416]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a67      	ldr	r2, [pc, #412]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002716:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d013      	beq.n	8002748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7ff f8b6 	bl	8001890 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002728:	f7ff f8b2 	bl	8001890 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	@ 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e200      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	4b5d      	ldr	r3, [pc, #372]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0xe4>
 8002746:	e014      	b.n	8002772 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002748:	f7ff f8a2 	bl	8001890 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002750:	f7ff f89e 	bl	8001890 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	@ 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1ec      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	4b53      	ldr	r3, [pc, #332]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x10c>
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d063      	beq.n	8002846 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800277e:	4b4c      	ldr	r3, [pc, #304]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800278a:	4b49      	ldr	r3, [pc, #292]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b08      	cmp	r3, #8
 8002794:	d11c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x18c>
 8002796:	4b46      	ldr	r3, [pc, #280]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d116      	bne.n	80027d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	4b43      	ldr	r3, [pc, #268]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_RCC_OscConfig+0x176>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e1c0      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ba:	4b3d      	ldr	r3, [pc, #244]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4939      	ldr	r1, [pc, #228]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ce:	e03a      	b.n	8002846 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d8:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <HAL_RCC_OscConfig+0x270>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7ff f857 	bl	8001890 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7ff f853 	bl	8001890 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1a1      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	4b2d      	ldr	r3, [pc, #180]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b2a      	ldr	r3, [pc, #168]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4927      	ldr	r1, [pc, #156]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
 8002818:	e015      	b.n	8002846 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	4b26      	ldr	r3, [pc, #152]	@ (80028b4 <HAL_RCC_OscConfig+0x270>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7ff f836 	bl	8001890 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002828:	f7ff f832 	bl	8001890 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e180      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	4b1d      	ldr	r3, [pc, #116]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d03a      	beq.n	80028c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d019      	beq.n	800288e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285a:	4b17      	ldr	r3, [pc, #92]	@ (80028b8 <HAL_RCC_OscConfig+0x274>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002860:	f7ff f816 	bl	8001890 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002868:	f7ff f812 	bl	8001890 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e160      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002886:	2001      	movs	r0, #1
 8002888:	f000 face 	bl	8002e28 <RCC_Delay>
 800288c:	e01c      	b.n	80028c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288e:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <HAL_RCC_OscConfig+0x274>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002894:	f7fe fffc 	bl	8001890 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289a:	e00f      	b.n	80028bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289c:	f7fe fff8 	bl	8001890 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d908      	bls.n	80028bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e146      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	42420000 	.word	0x42420000
 80028b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028bc:	4b92      	ldr	r3, [pc, #584]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e9      	bne.n	800289c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80a6 	beq.w	8002a22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028da:	4b8b      	ldr	r3, [pc, #556]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10d      	bne.n	8002902 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	4b88      	ldr	r3, [pc, #544]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4a87      	ldr	r2, [pc, #540]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	61d3      	str	r3, [r2, #28]
 80028f2:	4b85      	ldr	r3, [pc, #532]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	4b82      	ldr	r3, [pc, #520]	@ (8002b0c <HAL_RCC_OscConfig+0x4c8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b0c <HAL_RCC_OscConfig+0x4c8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7e      	ldr	r2, [pc, #504]	@ (8002b0c <HAL_RCC_OscConfig+0x4c8>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7fe ffb9 	bl	8001890 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7fe ffb5 	bl	8001890 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	@ 0x64
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e103      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b75      	ldr	r3, [pc, #468]	@ (8002b0c <HAL_RCC_OscConfig+0x4c8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x312>
 8002948:	4b6f      	ldr	r3, [pc, #444]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4a6e      	ldr	r2, [pc, #440]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6213      	str	r3, [r2, #32]
 8002954:	e02d      	b.n	80029b2 <HAL_RCC_OscConfig+0x36e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x334>
 800295e:	4b6a      	ldr	r3, [pc, #424]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a69      	ldr	r2, [pc, #420]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6213      	str	r3, [r2, #32]
 800296a:	4b67      	ldr	r3, [pc, #412]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a66      	ldr	r2, [pc, #408]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	6213      	str	r3, [r2, #32]
 8002976:	e01c      	b.n	80029b2 <HAL_RCC_OscConfig+0x36e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b05      	cmp	r3, #5
 800297e:	d10c      	bne.n	800299a <HAL_RCC_OscConfig+0x356>
 8002980:	4b61      	ldr	r3, [pc, #388]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4a60      	ldr	r2, [pc, #384]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6213      	str	r3, [r2, #32]
 800298c:	4b5e      	ldr	r3, [pc, #376]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	4a5d      	ldr	r2, [pc, #372]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6213      	str	r3, [r2, #32]
 8002998:	e00b      	b.n	80029b2 <HAL_RCC_OscConfig+0x36e>
 800299a:	4b5b      	ldr	r3, [pc, #364]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	4a5a      	ldr	r2, [pc, #360]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6213      	str	r3, [r2, #32]
 80029a6:	4b58      	ldr	r3, [pc, #352]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	4a57      	ldr	r2, [pc, #348]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	f023 0304 	bic.w	r3, r3, #4
 80029b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d015      	beq.n	80029e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fe ff69 	bl	8001890 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe ff65 	bl	8001890 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0b1      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ee      	beq.n	80029c2 <HAL_RCC_OscConfig+0x37e>
 80029e4:	e014      	b.n	8002a10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e6:	f7fe ff53 	bl	8001890 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe ff4f 	bl	8001890 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e09b      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a04:	4b40      	ldr	r3, [pc, #256]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ee      	bne.n	80029ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d105      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a16:	4b3c      	ldr	r3, [pc, #240]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8087 	beq.w	8002b3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2c:	4b36      	ldr	r3, [pc, #216]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d061      	beq.n	8002afc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d146      	bne.n	8002ace <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a40:	4b33      	ldr	r3, [pc, #204]	@ (8002b10 <HAL_RCC_OscConfig+0x4cc>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a46:	f7fe ff23 	bl	8001890 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4e:	f7fe ff1f 	bl	8001890 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e06d      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a60:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f0      	bne.n	8002a4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a74:	d108      	bne.n	8002a88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a76:	4b24      	ldr	r3, [pc, #144]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4921      	ldr	r1, [pc, #132]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a88:	4b1f      	ldr	r3, [pc, #124]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a19      	ldr	r1, [r3, #32]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	491b      	ldr	r1, [pc, #108]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <HAL_RCC_OscConfig+0x4cc>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fef3 	bl	8001890 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aae:	f7fe feef 	bl	8001890 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e03d      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac0:	4b11      	ldr	r3, [pc, #68]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x46a>
 8002acc:	e035      	b.n	8002b3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	4b10      	ldr	r3, [pc, #64]	@ (8002b10 <HAL_RCC_OscConfig+0x4cc>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fedc 	bl	8001890 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002adc:	f7fe fed8 	bl	8001890 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e026      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x498>
 8002afa:	e01e      	b.n	8002b3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e019      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40007000 	.word	0x40007000
 8002b10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <HAL_RCC_OscConfig+0x500>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d106      	bne.n	8002b36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0d0      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d910      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b67      	ldr	r3, [pc, #412]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	4965      	ldr	r1, [pc, #404]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0b8      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba4:	4b59      	ldr	r3, [pc, #356]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a58      	ldr	r2, [pc, #352]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bbc:	4b53      	ldr	r3, [pc, #332]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002bc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc8:	4b50      	ldr	r3, [pc, #320]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	494d      	ldr	r1, [pc, #308]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d040      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b47      	ldr	r3, [pc, #284]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d115      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07f      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	4b41      	ldr	r3, [pc, #260]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e073      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	4b3d      	ldr	r3, [pc, #244]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e06b      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c26:	4b39      	ldr	r3, [pc, #228]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4936      	ldr	r1, [pc, #216]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c38:	f7fe fe2a 	bl	8001890 <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7fe fe26 	bl	8001890 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e053      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	4b2d      	ldr	r3, [pc, #180]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 020c 	and.w	r2, r3, #12
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d1eb      	bne.n	8002c40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c68:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d210      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b24      	ldr	r3, [pc, #144]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 0207 	bic.w	r2, r3, #7
 8002c7e:	4922      	ldr	r1, [pc, #136]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e032      	b.n	8002cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4916      	ldr	r1, [pc, #88]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cc2:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490e      	ldr	r1, [pc, #56]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cd6:	f000 f821 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	490a      	ldr	r1, [pc, #40]	@ (8002d10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	5ccb      	ldrb	r3, [r1, r3]
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a09      	ldr	r2, [pc, #36]	@ (8002d14 <HAL_RCC_ClockConfig+0x1cc>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cf2:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <HAL_RCC_ClockConfig+0x1d0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fd88 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40022000 	.word	0x40022000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	0800857c 	.word	0x0800857c
 8002d14:	20000004 	.word	0x20000004
 8002d18:	20000008 	.word	0x20000008

08002d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d36:	4b1e      	ldr	r3, [pc, #120]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x30>
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x36>
 8002d4a:	e027      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d4c:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d4e:	613b      	str	r3, [r7, #16]
      break;
 8002d50:	e027      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	0c9b      	lsrs	r3, r3, #18
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	4a17      	ldr	r2, [pc, #92]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d5c:	5cd3      	ldrb	r3, [r2, r3]
 8002d5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d010      	beq.n	8002d8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d6a:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	0c5b      	lsrs	r3, r3, #17
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d7e:	fb03 f202 	mul.w	r2, r3, r2
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e004      	b.n	8002d96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	613b      	str	r3, [r7, #16]
      break;
 8002d9a:	e002      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d9c:	4b05      	ldr	r3, [pc, #20]	@ (8002db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d9e:	613b      	str	r3, [r7, #16]
      break;
 8002da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da2:	693b      	ldr	r3, [r7, #16]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	007a1200 	.word	0x007a1200
 8002db8:	08008594 	.word	0x08008594
 8002dbc:	080085a4 	.word	0x080085a4
 8002dc0:	003d0900 	.word	0x003d0900

08002dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dc8:	4b02      	ldr	r3, [pc, #8]	@ (8002dd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	20000004 	.word	0x20000004

08002dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ddc:	f7ff fff2 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	0a1b      	lsrs	r3, r3, #8
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	4903      	ldr	r1, [pc, #12]	@ (8002dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dee:	5ccb      	ldrb	r3, [r1, r3]
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	0800858c 	.word	0x0800858c

08002e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e04:	f7ff ffde 	bl	8002dc4 <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	0adb      	lsrs	r3, r3, #11
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4903      	ldr	r1, [pc, #12]	@ (8002e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40021000 	.word	0x40021000
 8002e24:	0800858c 	.word	0x0800858c

08002e28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e30:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <RCC_Delay+0x34>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <RCC_Delay+0x38>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	0a5b      	lsrs	r3, r3, #9
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e44:	bf00      	nop
  }
  while (Delay --);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1e5a      	subs	r2, r3, #1
 8002e4a:	60fa      	str	r2, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1f9      	bne.n	8002e44 <RCC_Delay+0x1c>
}
 8002e50:	bf00      	nop
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	20000004 	.word	0x20000004
 8002e60:	10624dd3 	.word	0x10624dd3

08002e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d07d      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e80:	2300      	movs	r3, #0
 8002e82:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e84:	4b4f      	ldr	r3, [pc, #316]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10d      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e90:	4b4c      	ldr	r3, [pc, #304]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	4a4b      	ldr	r2, [pc, #300]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	61d3      	str	r3, [r2, #28]
 8002e9c:	4b49      	ldr	r3, [pc, #292]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eac:	4b46      	ldr	r3, [pc, #280]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d118      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb8:	4b43      	ldr	r3, [pc, #268]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a42      	ldr	r2, [pc, #264]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec4:	f7fe fce4 	bl	8001890 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eca:	e008      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ecc:	f7fe fce0 	bl	8001890 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	@ 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e06d      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ede:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eea:	4b36      	ldr	r3, [pc, #216]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d02e      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d027      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f08:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f12:	4b2e      	ldr	r3, [pc, #184]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f18:	4b2c      	ldr	r3, [pc, #176]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f1e:	4a29      	ldr	r2, [pc, #164]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d014      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fcaf 	bl	8001890 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fe fcab 	bl	8001890 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e036      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ee      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f58:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4917      	ldr	r1, [pc, #92]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f70:	4b14      	ldr	r3, [pc, #80]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	4a13      	ldr	r2, [pc, #76]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f88:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	490b      	ldr	r1, [pc, #44]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d008      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fa6:	4b07      	ldr	r3, [pc, #28]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	4904      	ldr	r1, [pc, #16]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	42420440 	.word	0x42420440

08002fd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d00a      	beq.n	8003008 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	f200 808a 	bhi.w	800310e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d045      	beq.n	800308c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d075      	beq.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003006:	e082      	b.n	800310e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003008:	4b46      	ldr	r3, [pc, #280]	@ (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800300e:	4b45      	ldr	r3, [pc, #276]	@ (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d07b      	beq.n	8003112 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	0c9b      	lsrs	r3, r3, #18
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	4a41      	ldr	r2, [pc, #260]	@ (8003128 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003024:	5cd3      	ldrb	r3, [r2, r3]
 8003026:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d015      	beq.n	800305e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003032:	4b3c      	ldr	r3, [pc, #240]	@ (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	0c5b      	lsrs	r3, r3, #17
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	4a3b      	ldr	r2, [pc, #236]	@ (800312c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800303e:	5cd3      	ldrb	r3, [r2, r3]
 8003040:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00d      	beq.n	8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800304c:	4a38      	ldr	r2, [pc, #224]	@ (8003130 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	fbb2 f2f3 	udiv	r2, r2, r3
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	e004      	b.n	8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4a34      	ldr	r2, [pc, #208]	@ (8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003068:	4b2e      	ldr	r3, [pc, #184]	@ (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003070:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003074:	d102      	bne.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	61bb      	str	r3, [r7, #24]
      break;
 800307a:	e04a      	b.n	8003112 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4a2d      	ldr	r2, [pc, #180]	@ (8003138 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	61bb      	str	r3, [r7, #24]
      break;
 800308a:	e042      	b.n	8003112 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800308c:	4b25      	ldr	r3, [pc, #148]	@ (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800309c:	d108      	bne.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	e01f      	b.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ba:	d109      	bne.n	80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80030bc:	4b19      	ldr	r3, [pc, #100]	@ (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80030c8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	e00f      	b.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030da:	d11c      	bne.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d016      	beq.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80030e8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80030ec:	61bb      	str	r3, [r7, #24]
      break;
 80030ee:	e012      	b.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030f0:	e011      	b.n	8003116 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030f2:	f7ff fe85 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	0b9b      	lsrs	r3, r3, #14
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	3301      	adds	r3, #1
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	61bb      	str	r3, [r7, #24]
      break;
 800310c:	e004      	b.n	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800310e:	bf00      	nop
 8003110:	e002      	b.n	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003112:	bf00      	nop
 8003114:	e000      	b.n	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003116:	bf00      	nop
    }
  }
  return (frequency);
 8003118:	69bb      	ldr	r3, [r7, #24]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40021000 	.word	0x40021000
 8003128:	080085a8 	.word	0x080085a8
 800312c:	080085b8 	.word	0x080085b8
 8003130:	007a1200 	.word	0x007a1200
 8003134:	003d0900 	.word	0x003d0900
 8003138:	aaaaaaab 	.word	0xaaaaaaab

0800313c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e041      	b.n	80031d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe f984 	bl	8001470 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 f992 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_TIM_PWM_Start+0x24>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e022      	b.n	8003246 <HAL_TIM_PWM_Start+0x6a>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b04      	cmp	r3, #4
 8003204:	d109      	bne.n	800321a <HAL_TIM_PWM_Start+0x3e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	e015      	b.n	8003246 <HAL_TIM_PWM_Start+0x6a>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b08      	cmp	r3, #8
 800321e:	d109      	bne.n	8003234 <HAL_TIM_PWM_Start+0x58>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e008      	b.n	8003246 <HAL_TIM_PWM_Start+0x6a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e05e      	b.n	800330c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <HAL_TIM_PWM_Start+0x82>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800325c:	e013      	b.n	8003286 <HAL_TIM_PWM_Start+0xaa>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b04      	cmp	r3, #4
 8003262:	d104      	bne.n	800326e <HAL_TIM_PWM_Start+0x92>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800326c:	e00b      	b.n	8003286 <HAL_TIM_PWM_Start+0xaa>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b08      	cmp	r3, #8
 8003272:	d104      	bne.n	800327e <HAL_TIM_PWM_Start+0xa2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800327c:	e003      	b.n	8003286 <HAL_TIM_PWM_Start+0xaa>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2201      	movs	r2, #1
 800328c:	6839      	ldr	r1, [r7, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fafe 	bl	8003890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a1e      	ldr	r2, [pc, #120]	@ (8003314 <HAL_TIM_PWM_Start+0x138>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d107      	bne.n	80032ae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a18      	ldr	r2, [pc, #96]	@ (8003314 <HAL_TIM_PWM_Start+0x138>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00e      	beq.n	80032d6 <HAL_TIM_PWM_Start+0xfa>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c0:	d009      	beq.n	80032d6 <HAL_TIM_PWM_Start+0xfa>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a14      	ldr	r2, [pc, #80]	@ (8003318 <HAL_TIM_PWM_Start+0x13c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d004      	beq.n	80032d6 <HAL_TIM_PWM_Start+0xfa>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a12      	ldr	r2, [pc, #72]	@ (800331c <HAL_TIM_PWM_Start+0x140>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d111      	bne.n	80032fa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b06      	cmp	r3, #6
 80032e6:	d010      	beq.n	800330a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f8:	e007      	b.n	800330a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800

08003320 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800333a:	2302      	movs	r3, #2
 800333c:	e0ae      	b.n	800349c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b0c      	cmp	r3, #12
 800334a:	f200 809f 	bhi.w	800348c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800334e:	a201      	add	r2, pc, #4	@ (adr r2, 8003354 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	08003389 	.word	0x08003389
 8003358:	0800348d 	.word	0x0800348d
 800335c:	0800348d 	.word	0x0800348d
 8003360:	0800348d 	.word	0x0800348d
 8003364:	080033c9 	.word	0x080033c9
 8003368:	0800348d 	.word	0x0800348d
 800336c:	0800348d 	.word	0x0800348d
 8003370:	0800348d 	.word	0x0800348d
 8003374:	0800340b 	.word	0x0800340b
 8003378:	0800348d 	.word	0x0800348d
 800337c:	0800348d 	.word	0x0800348d
 8003380:	0800348d 	.word	0x0800348d
 8003384:	0800344b 	.word	0x0800344b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f8f6 	bl	8003580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0208 	orr.w	r2, r2, #8
 80033a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0204 	bic.w	r2, r2, #4
 80033b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6999      	ldr	r1, [r3, #24]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	619a      	str	r2, [r3, #24]
      break;
 80033c6:	e064      	b.n	8003492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f93c 	bl	800364c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6999      	ldr	r1, [r3, #24]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	021a      	lsls	r2, r3, #8
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	619a      	str	r2, [r3, #24]
      break;
 8003408:	e043      	b.n	8003492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 f985 	bl	8003720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69da      	ldr	r2, [r3, #28]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0208 	orr.w	r2, r2, #8
 8003424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0204 	bic.w	r2, r2, #4
 8003434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69d9      	ldr	r1, [r3, #28]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	61da      	str	r2, [r3, #28]
      break;
 8003448:	e023      	b.n	8003492 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f9cf 	bl	80037f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69d9      	ldr	r1, [r3, #28]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	021a      	lsls	r2, r3, #8
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	61da      	str	r2, [r3, #28]
      break;
 800348a:	e002      	b.n	8003492 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	75fb      	strb	r3, [r7, #23]
      break;
 8003490:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800349a:	7dfb      	ldrb	r3, [r7, #23]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003574 <TIM_Base_SetConfig+0xd0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00b      	beq.n	80034d4 <TIM_Base_SetConfig+0x30>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c2:	d007      	beq.n	80034d4 <TIM_Base_SetConfig+0x30>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003578 <TIM_Base_SetConfig+0xd4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0x30>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a2b      	ldr	r2, [pc, #172]	@ (800357c <TIM_Base_SetConfig+0xd8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a22      	ldr	r2, [pc, #136]	@ (8003574 <TIM_Base_SetConfig+0xd0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00b      	beq.n	8003506 <TIM_Base_SetConfig+0x62>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f4:	d007      	beq.n	8003506 <TIM_Base_SetConfig+0x62>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003578 <TIM_Base_SetConfig+0xd4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d003      	beq.n	8003506 <TIM_Base_SetConfig+0x62>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1e      	ldr	r2, [pc, #120]	@ (800357c <TIM_Base_SetConfig+0xd8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d108      	bne.n	8003518 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800350c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a0d      	ldr	r2, [pc, #52]	@ (8003574 <TIM_Base_SetConfig+0xd0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d103      	bne.n	800354c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f023 0201 	bic.w	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	611a      	str	r2, [r3, #16]
  }
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800

08003580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f023 0201 	bic.w	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f023 0302 	bic.w	r3, r3, #2
 80035c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003648 <TIM_OC1_SetConfig+0xc8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d10c      	bne.n	80035f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f023 0308 	bic.w	r3, r3, #8
 80035e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f023 0304 	bic.w	r3, r3, #4
 80035f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a13      	ldr	r2, [pc, #76]	@ (8003648 <TIM_OC1_SetConfig+0xc8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d111      	bne.n	8003622 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800360c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	621a      	str	r2, [r3, #32]
}
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40012c00 	.word	0x40012c00

0800364c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f023 0210 	bic.w	r2, r3, #16
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800367a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f023 0320 	bic.w	r3, r3, #32
 8003696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a1d      	ldr	r2, [pc, #116]	@ (800371c <TIM_OC2_SetConfig+0xd0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d10d      	bne.n	80036c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a14      	ldr	r2, [pc, #80]	@ (800371c <TIM_OC2_SetConfig+0xd0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d113      	bne.n	80036f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	621a      	str	r2, [r3, #32]
}
 8003712:	bf00      	nop
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	40012c00 	.word	0x40012c00

08003720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800374e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1d      	ldr	r2, [pc, #116]	@ (80037f0 <TIM_OC3_SetConfig+0xd0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d10d      	bne.n	800379a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a14      	ldr	r2, [pc, #80]	@ (80037f0 <TIM_OC3_SetConfig+0xd0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d113      	bne.n	80037ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	621a      	str	r2, [r3, #32]
}
 80037e4:	bf00      	nop
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40012c00 	.word	0x40012c00

080037f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800382a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800383e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	031b      	lsls	r3, r3, #12
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a0f      	ldr	r2, [pc, #60]	@ (800388c <TIM_OC4_SetConfig+0x98>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d109      	bne.n	8003868 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800385a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	019b      	lsls	r3, r3, #6
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	40012c00 	.word	0x40012c00

08003890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	2201      	movs	r2, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1a      	ldr	r2, [r3, #32]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	401a      	ands	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a1a      	ldr	r2, [r3, #32]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f003 031f 	and.w	r3, r3, #31
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	431a      	orrs	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e046      	b.n	800397e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a16      	ldr	r2, [pc, #88]	@ (8003988 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d00e      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393c:	d009      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a12      	ldr	r2, [pc, #72]	@ (800398c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a10      	ldr	r2, [pc, #64]	@ (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d10c      	bne.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4313      	orrs	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800

08003994 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e03d      	b.n	8003a2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e042      	b.n	8003ace <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7fd fd59 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2224      	movs	r2, #36	@ 0x24
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a78:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f972 	bl	8003d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003aae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b08a      	sub	sp, #40	@ 0x28
 8003ada:	af02      	add	r7, sp, #8
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	603b      	str	r3, [r7, #0]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d175      	bne.n	8003be2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_UART_Transmit+0x2c>
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e06e      	b.n	8003be4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2221      	movs	r2, #33	@ 0x21
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b14:	f7fd febc 	bl	8001890 <HAL_GetTick>
 8003b18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	88fa      	ldrh	r2, [r7, #6]
 8003b1e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b2e:	d108      	bne.n	8003b42 <HAL_UART_Transmit+0x6c>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e003      	b.n	8003b4a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b4a:	e02e      	b.n	8003baa <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2200      	movs	r2, #0
 8003b54:	2180      	movs	r1, #128	@ 0x80
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f848 	bl	8003bec <UART_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e03a      	b.n	8003be4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	881b      	ldrh	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b82:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	3302      	adds	r3, #2
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	e007      	b.n	8003b9c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	781a      	ldrb	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1cb      	bne.n	8003b4c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2140      	movs	r1, #64	@ 0x40
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f814 	bl	8003bec <UART_WaitOnFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e006      	b.n	8003be4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfc:	e03b      	b.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c04:	d037      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c06:	f7fd fe43 	bl	8001890 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	6a3a      	ldr	r2, [r7, #32]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d302      	bcc.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e03a      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d023      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b80      	cmp	r3, #128	@ 0x80
 8003c32:	d020      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b40      	cmp	r3, #64	@ 0x40
 8003c38:	d01d      	beq.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d116      	bne.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f81d 	bl	8003c9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2208      	movs	r2, #8
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e00f      	b.n	8003c96 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d0b4      	beq.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b095      	sub	sp, #84	@ 0x54
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	330c      	adds	r3, #12
 8003cac:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	330c      	adds	r3, #12
 8003cc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cc6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ccc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e5      	bne.n	8003ca6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3314      	adds	r3, #20
 8003ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3314      	adds	r3, #20
 8003cf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e5      	bne.n	8003cda <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d119      	bne.n	8003d4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f023 0310 	bic.w	r3, r3, #16
 8003d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d36:	61ba      	str	r2, [r7, #24]
 8003d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6979      	ldr	r1, [r7, #20]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	613b      	str	r3, [r7, #16]
   return(result);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e5      	bne.n	8003d16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d58:	bf00      	nop
 8003d5a:	3754      	adds	r7, #84	@ 0x54
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
	...

08003d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003d9e:	f023 030c 	bic.w	r3, r3, #12
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	430b      	orrs	r3, r1
 8003daa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e78 <UART_SetConfig+0x114>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d103      	bne.n	8003dd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dcc:	f7ff f818 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	e002      	b.n	8003dda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003dd4:	f7ff f800 	bl	8002dd8 <HAL_RCC_GetPCLK1Freq>
 8003dd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	009a      	lsls	r2, r3, #2
 8003de4:	441a      	add	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	4a22      	ldr	r2, [pc, #136]	@ (8003e7c <UART_SetConfig+0x118>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	0119      	lsls	r1, r3, #4
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009a      	lsls	r2, r3, #2
 8003e04:	441a      	add	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e10:	4b1a      	ldr	r3, [pc, #104]	@ (8003e7c <UART_SetConfig+0x118>)
 8003e12:	fba3 0302 	umull	r0, r3, r3, r2
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2064      	movs	r0, #100	@ 0x64
 8003e1a:	fb00 f303 	mul.w	r3, r0, r3
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	3332      	adds	r3, #50	@ 0x32
 8003e24:	4a15      	ldr	r2, [pc, #84]	@ (8003e7c <UART_SetConfig+0x118>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e30:	4419      	add	r1, r3
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009a      	lsls	r2, r3, #2
 8003e3c:	441a      	add	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e48:	4b0c      	ldr	r3, [pc, #48]	@ (8003e7c <UART_SetConfig+0x118>)
 8003e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2064      	movs	r0, #100	@ 0x64
 8003e52:	fb00 f303 	mul.w	r3, r0, r3
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	3332      	adds	r3, #50	@ 0x32
 8003e5c:	4a07      	ldr	r2, [pc, #28]	@ (8003e7c <UART_SetConfig+0x118>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	f003 020f 	and.w	r2, r3, #15
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40013800 	.word	0x40013800
 8003e7c:	51eb851f 	.word	0x51eb851f

08003e80 <__cvt>:
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e86:	461d      	mov	r5, r3
 8003e88:	bfbb      	ittet	lt
 8003e8a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003e8e:	461d      	movlt	r5, r3
 8003e90:	2300      	movge	r3, #0
 8003e92:	232d      	movlt	r3, #45	@ 0x2d
 8003e94:	b088      	sub	sp, #32
 8003e96:	4614      	mov	r4, r2
 8003e98:	bfb8      	it	lt
 8003e9a:	4614      	movlt	r4, r2
 8003e9c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003e9e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003ea0:	7013      	strb	r3, [r2, #0]
 8003ea2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003ea4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003ea8:	f023 0820 	bic.w	r8, r3, #32
 8003eac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003eb0:	d005      	beq.n	8003ebe <__cvt+0x3e>
 8003eb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003eb6:	d100      	bne.n	8003eba <__cvt+0x3a>
 8003eb8:	3601      	adds	r6, #1
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e000      	b.n	8003ec0 <__cvt+0x40>
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	aa07      	add	r2, sp, #28
 8003ec2:	9204      	str	r2, [sp, #16]
 8003ec4:	aa06      	add	r2, sp, #24
 8003ec6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003eca:	e9cd 3600 	strd	r3, r6, [sp]
 8003ece:	4622      	mov	r2, r4
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	f001 fe9d 	bl	8005c10 <_dtoa_r>
 8003ed6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003eda:	4607      	mov	r7, r0
 8003edc:	d119      	bne.n	8003f12 <__cvt+0x92>
 8003ede:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003ee0:	07db      	lsls	r3, r3, #31
 8003ee2:	d50e      	bpl.n	8003f02 <__cvt+0x82>
 8003ee4:	eb00 0906 	add.w	r9, r0, r6
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2300      	movs	r3, #0
 8003eec:	4620      	mov	r0, r4
 8003eee:	4629      	mov	r1, r5
 8003ef0:	f7fc fe0e 	bl	8000b10 <__aeabi_dcmpeq>
 8003ef4:	b108      	cbz	r0, 8003efa <__cvt+0x7a>
 8003ef6:	f8cd 901c 	str.w	r9, [sp, #28]
 8003efa:	2230      	movs	r2, #48	@ 0x30
 8003efc:	9b07      	ldr	r3, [sp, #28]
 8003efe:	454b      	cmp	r3, r9
 8003f00:	d31e      	bcc.n	8003f40 <__cvt+0xc0>
 8003f02:	4638      	mov	r0, r7
 8003f04:	9b07      	ldr	r3, [sp, #28]
 8003f06:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003f08:	1bdb      	subs	r3, r3, r7
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	b008      	add	sp, #32
 8003f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f12:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f16:	eb00 0906 	add.w	r9, r0, r6
 8003f1a:	d1e5      	bne.n	8003ee8 <__cvt+0x68>
 8003f1c:	7803      	ldrb	r3, [r0, #0]
 8003f1e:	2b30      	cmp	r3, #48	@ 0x30
 8003f20:	d10a      	bne.n	8003f38 <__cvt+0xb8>
 8003f22:	2200      	movs	r2, #0
 8003f24:	2300      	movs	r3, #0
 8003f26:	4620      	mov	r0, r4
 8003f28:	4629      	mov	r1, r5
 8003f2a:	f7fc fdf1 	bl	8000b10 <__aeabi_dcmpeq>
 8003f2e:	b918      	cbnz	r0, 8003f38 <__cvt+0xb8>
 8003f30:	f1c6 0601 	rsb	r6, r6, #1
 8003f34:	f8ca 6000 	str.w	r6, [sl]
 8003f38:	f8da 3000 	ldr.w	r3, [sl]
 8003f3c:	4499      	add	r9, r3
 8003f3e:	e7d3      	b.n	8003ee8 <__cvt+0x68>
 8003f40:	1c59      	adds	r1, r3, #1
 8003f42:	9107      	str	r1, [sp, #28]
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e7d9      	b.n	8003efc <__cvt+0x7c>

08003f48 <__exponent>:
 8003f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f4a:	2900      	cmp	r1, #0
 8003f4c:	bfb6      	itet	lt
 8003f4e:	232d      	movlt	r3, #45	@ 0x2d
 8003f50:	232b      	movge	r3, #43	@ 0x2b
 8003f52:	4249      	neglt	r1, r1
 8003f54:	2909      	cmp	r1, #9
 8003f56:	7002      	strb	r2, [r0, #0]
 8003f58:	7043      	strb	r3, [r0, #1]
 8003f5a:	dd29      	ble.n	8003fb0 <__exponent+0x68>
 8003f5c:	f10d 0307 	add.w	r3, sp, #7
 8003f60:	461d      	mov	r5, r3
 8003f62:	270a      	movs	r7, #10
 8003f64:	fbb1 f6f7 	udiv	r6, r1, r7
 8003f68:	461a      	mov	r2, r3
 8003f6a:	fb07 1416 	mls	r4, r7, r6, r1
 8003f6e:	3430      	adds	r4, #48	@ 0x30
 8003f70:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003f74:	460c      	mov	r4, r1
 8003f76:	2c63      	cmp	r4, #99	@ 0x63
 8003f78:	4631      	mov	r1, r6
 8003f7a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003f7e:	dcf1      	bgt.n	8003f64 <__exponent+0x1c>
 8003f80:	3130      	adds	r1, #48	@ 0x30
 8003f82:	1e94      	subs	r4, r2, #2
 8003f84:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f88:	4623      	mov	r3, r4
 8003f8a:	1c41      	adds	r1, r0, #1
 8003f8c:	42ab      	cmp	r3, r5
 8003f8e:	d30a      	bcc.n	8003fa6 <__exponent+0x5e>
 8003f90:	f10d 0309 	add.w	r3, sp, #9
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	42ac      	cmp	r4, r5
 8003f98:	bf88      	it	hi
 8003f9a:	2300      	movhi	r3, #0
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	4403      	add	r3, r0
 8003fa0:	1a18      	subs	r0, r3, r0
 8003fa2:	b003      	add	sp, #12
 8003fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003faa:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003fae:	e7ed      	b.n	8003f8c <__exponent+0x44>
 8003fb0:	2330      	movs	r3, #48	@ 0x30
 8003fb2:	3130      	adds	r1, #48	@ 0x30
 8003fb4:	7083      	strb	r3, [r0, #2]
 8003fb6:	70c1      	strb	r1, [r0, #3]
 8003fb8:	1d03      	adds	r3, r0, #4
 8003fba:	e7f1      	b.n	8003fa0 <__exponent+0x58>

08003fbc <_printf_float>:
 8003fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc0:	b091      	sub	sp, #68	@ 0x44
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003fc8:	4616      	mov	r6, r2
 8003fca:	461f      	mov	r7, r3
 8003fcc:	4605      	mov	r5, r0
 8003fce:	f001 fd3d 	bl	8005a4c <_localeconv_r>
 8003fd2:	6803      	ldr	r3, [r0, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	9308      	str	r3, [sp, #32]
 8003fd8:	f7fc f8ba 	bl	8000150 <strlen>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	930e      	str	r3, [sp, #56]	@ 0x38
 8003fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8003fe4:	9009      	str	r0, [sp, #36]	@ 0x24
 8003fe6:	3307      	adds	r3, #7
 8003fe8:	f023 0307 	bic.w	r3, r3, #7
 8003fec:	f103 0208 	add.w	r2, r3, #8
 8003ff0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003ff4:	f8d4 b000 	ldr.w	fp, [r4]
 8003ff8:	f8c8 2000 	str.w	r2, [r8]
 8003ffc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004000:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004004:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004006:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800400a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800400e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004012:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004016:	4b9c      	ldr	r3, [pc, #624]	@ (8004288 <_printf_float+0x2cc>)
 8004018:	f7fc fdac 	bl	8000b74 <__aeabi_dcmpun>
 800401c:	bb70      	cbnz	r0, 800407c <_printf_float+0xc0>
 800401e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004022:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004026:	4b98      	ldr	r3, [pc, #608]	@ (8004288 <_printf_float+0x2cc>)
 8004028:	f7fc fd86 	bl	8000b38 <__aeabi_dcmple>
 800402c:	bb30      	cbnz	r0, 800407c <_printf_float+0xc0>
 800402e:	2200      	movs	r2, #0
 8004030:	2300      	movs	r3, #0
 8004032:	4640      	mov	r0, r8
 8004034:	4649      	mov	r1, r9
 8004036:	f7fc fd75 	bl	8000b24 <__aeabi_dcmplt>
 800403a:	b110      	cbz	r0, 8004042 <_printf_float+0x86>
 800403c:	232d      	movs	r3, #45	@ 0x2d
 800403e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004042:	4a92      	ldr	r2, [pc, #584]	@ (800428c <_printf_float+0x2d0>)
 8004044:	4b92      	ldr	r3, [pc, #584]	@ (8004290 <_printf_float+0x2d4>)
 8004046:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800404a:	bf94      	ite	ls
 800404c:	4690      	movls	r8, r2
 800404e:	4698      	movhi	r8, r3
 8004050:	2303      	movs	r3, #3
 8004052:	f04f 0900 	mov.w	r9, #0
 8004056:	6123      	str	r3, [r4, #16]
 8004058:	f02b 0304 	bic.w	r3, fp, #4
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	4633      	mov	r3, r6
 8004060:	4621      	mov	r1, r4
 8004062:	4628      	mov	r0, r5
 8004064:	9700      	str	r7, [sp, #0]
 8004066:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004068:	f000 f9d4 	bl	8004414 <_printf_common>
 800406c:	3001      	adds	r0, #1
 800406e:	f040 8090 	bne.w	8004192 <_printf_float+0x1d6>
 8004072:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004076:	b011      	add	sp, #68	@ 0x44
 8004078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407c:	4642      	mov	r2, r8
 800407e:	464b      	mov	r3, r9
 8004080:	4640      	mov	r0, r8
 8004082:	4649      	mov	r1, r9
 8004084:	f7fc fd76 	bl	8000b74 <__aeabi_dcmpun>
 8004088:	b148      	cbz	r0, 800409e <_printf_float+0xe2>
 800408a:	464b      	mov	r3, r9
 800408c:	2b00      	cmp	r3, #0
 800408e:	bfb8      	it	lt
 8004090:	232d      	movlt	r3, #45	@ 0x2d
 8004092:	4a80      	ldr	r2, [pc, #512]	@ (8004294 <_printf_float+0x2d8>)
 8004094:	bfb8      	it	lt
 8004096:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800409a:	4b7f      	ldr	r3, [pc, #508]	@ (8004298 <_printf_float+0x2dc>)
 800409c:	e7d3      	b.n	8004046 <_printf_float+0x8a>
 800409e:	6863      	ldr	r3, [r4, #4]
 80040a0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	d13f      	bne.n	8004128 <_printf_float+0x16c>
 80040a8:	2306      	movs	r3, #6
 80040aa:	6063      	str	r3, [r4, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80040b2:	6023      	str	r3, [r4, #0]
 80040b4:	9206      	str	r2, [sp, #24]
 80040b6:	aa0e      	add	r2, sp, #56	@ 0x38
 80040b8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80040bc:	aa0d      	add	r2, sp, #52	@ 0x34
 80040be:	9203      	str	r2, [sp, #12]
 80040c0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80040c4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	4642      	mov	r2, r8
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	4628      	mov	r0, r5
 80040d0:	464b      	mov	r3, r9
 80040d2:	910a      	str	r1, [sp, #40]	@ 0x28
 80040d4:	f7ff fed4 	bl	8003e80 <__cvt>
 80040d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80040da:	4680      	mov	r8, r0
 80040dc:	2947      	cmp	r1, #71	@ 0x47
 80040de:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80040e0:	d128      	bne.n	8004134 <_printf_float+0x178>
 80040e2:	1cc8      	adds	r0, r1, #3
 80040e4:	db02      	blt.n	80040ec <_printf_float+0x130>
 80040e6:	6863      	ldr	r3, [r4, #4]
 80040e8:	4299      	cmp	r1, r3
 80040ea:	dd40      	ble.n	800416e <_printf_float+0x1b2>
 80040ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80040f0:	fa5f fa8a 	uxtb.w	sl, sl
 80040f4:	4652      	mov	r2, sl
 80040f6:	3901      	subs	r1, #1
 80040f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80040fc:	910d      	str	r1, [sp, #52]	@ 0x34
 80040fe:	f7ff ff23 	bl	8003f48 <__exponent>
 8004102:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004104:	4681      	mov	r9, r0
 8004106:	1813      	adds	r3, r2, r0
 8004108:	2a01      	cmp	r2, #1
 800410a:	6123      	str	r3, [r4, #16]
 800410c:	dc02      	bgt.n	8004114 <_printf_float+0x158>
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	07d2      	lsls	r2, r2, #31
 8004112:	d501      	bpl.n	8004118 <_printf_float+0x15c>
 8004114:	3301      	adds	r3, #1
 8004116:	6123      	str	r3, [r4, #16]
 8004118:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800411c:	2b00      	cmp	r3, #0
 800411e:	d09e      	beq.n	800405e <_printf_float+0xa2>
 8004120:	232d      	movs	r3, #45	@ 0x2d
 8004122:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004126:	e79a      	b.n	800405e <_printf_float+0xa2>
 8004128:	2947      	cmp	r1, #71	@ 0x47
 800412a:	d1bf      	bne.n	80040ac <_printf_float+0xf0>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1bd      	bne.n	80040ac <_printf_float+0xf0>
 8004130:	2301      	movs	r3, #1
 8004132:	e7ba      	b.n	80040aa <_printf_float+0xee>
 8004134:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004138:	d9dc      	bls.n	80040f4 <_printf_float+0x138>
 800413a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800413e:	d118      	bne.n	8004172 <_printf_float+0x1b6>
 8004140:	2900      	cmp	r1, #0
 8004142:	6863      	ldr	r3, [r4, #4]
 8004144:	dd0b      	ble.n	800415e <_printf_float+0x1a2>
 8004146:	6121      	str	r1, [r4, #16]
 8004148:	b913      	cbnz	r3, 8004150 <_printf_float+0x194>
 800414a:	6822      	ldr	r2, [r4, #0]
 800414c:	07d0      	lsls	r0, r2, #31
 800414e:	d502      	bpl.n	8004156 <_printf_float+0x19a>
 8004150:	3301      	adds	r3, #1
 8004152:	440b      	add	r3, r1
 8004154:	6123      	str	r3, [r4, #16]
 8004156:	f04f 0900 	mov.w	r9, #0
 800415a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800415c:	e7dc      	b.n	8004118 <_printf_float+0x15c>
 800415e:	b913      	cbnz	r3, 8004166 <_printf_float+0x1aa>
 8004160:	6822      	ldr	r2, [r4, #0]
 8004162:	07d2      	lsls	r2, r2, #31
 8004164:	d501      	bpl.n	800416a <_printf_float+0x1ae>
 8004166:	3302      	adds	r3, #2
 8004168:	e7f4      	b.n	8004154 <_printf_float+0x198>
 800416a:	2301      	movs	r3, #1
 800416c:	e7f2      	b.n	8004154 <_printf_float+0x198>
 800416e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004174:	4299      	cmp	r1, r3
 8004176:	db05      	blt.n	8004184 <_printf_float+0x1c8>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	6121      	str	r1, [r4, #16]
 800417c:	07d8      	lsls	r0, r3, #31
 800417e:	d5ea      	bpl.n	8004156 <_printf_float+0x19a>
 8004180:	1c4b      	adds	r3, r1, #1
 8004182:	e7e7      	b.n	8004154 <_printf_float+0x198>
 8004184:	2900      	cmp	r1, #0
 8004186:	bfcc      	ite	gt
 8004188:	2201      	movgt	r2, #1
 800418a:	f1c1 0202 	rsble	r2, r1, #2
 800418e:	4413      	add	r3, r2
 8004190:	e7e0      	b.n	8004154 <_printf_float+0x198>
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	055a      	lsls	r2, r3, #21
 8004196:	d407      	bmi.n	80041a8 <_printf_float+0x1ec>
 8004198:	6923      	ldr	r3, [r4, #16]
 800419a:	4642      	mov	r2, r8
 800419c:	4631      	mov	r1, r6
 800419e:	4628      	mov	r0, r5
 80041a0:	47b8      	blx	r7
 80041a2:	3001      	adds	r0, #1
 80041a4:	d12b      	bne.n	80041fe <_printf_float+0x242>
 80041a6:	e764      	b.n	8004072 <_printf_float+0xb6>
 80041a8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80041ac:	f240 80dc 	bls.w	8004368 <_printf_float+0x3ac>
 80041b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80041b4:	2200      	movs	r2, #0
 80041b6:	2300      	movs	r3, #0
 80041b8:	f7fc fcaa 	bl	8000b10 <__aeabi_dcmpeq>
 80041bc:	2800      	cmp	r0, #0
 80041be:	d033      	beq.n	8004228 <_printf_float+0x26c>
 80041c0:	2301      	movs	r3, #1
 80041c2:	4631      	mov	r1, r6
 80041c4:	4628      	mov	r0, r5
 80041c6:	4a35      	ldr	r2, [pc, #212]	@ (800429c <_printf_float+0x2e0>)
 80041c8:	47b8      	blx	r7
 80041ca:	3001      	adds	r0, #1
 80041cc:	f43f af51 	beq.w	8004072 <_printf_float+0xb6>
 80041d0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80041d4:	4543      	cmp	r3, r8
 80041d6:	db02      	blt.n	80041de <_printf_float+0x222>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	07d8      	lsls	r0, r3, #31
 80041dc:	d50f      	bpl.n	80041fe <_printf_float+0x242>
 80041de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041e2:	4631      	mov	r1, r6
 80041e4:	4628      	mov	r0, r5
 80041e6:	47b8      	blx	r7
 80041e8:	3001      	adds	r0, #1
 80041ea:	f43f af42 	beq.w	8004072 <_printf_float+0xb6>
 80041ee:	f04f 0900 	mov.w	r9, #0
 80041f2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80041f6:	f104 0a1a 	add.w	sl, r4, #26
 80041fa:	45c8      	cmp	r8, r9
 80041fc:	dc09      	bgt.n	8004212 <_printf_float+0x256>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	079b      	lsls	r3, r3, #30
 8004202:	f100 8102 	bmi.w	800440a <_printf_float+0x44e>
 8004206:	68e0      	ldr	r0, [r4, #12]
 8004208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800420a:	4298      	cmp	r0, r3
 800420c:	bfb8      	it	lt
 800420e:	4618      	movlt	r0, r3
 8004210:	e731      	b.n	8004076 <_printf_float+0xba>
 8004212:	2301      	movs	r3, #1
 8004214:	4652      	mov	r2, sl
 8004216:	4631      	mov	r1, r6
 8004218:	4628      	mov	r0, r5
 800421a:	47b8      	blx	r7
 800421c:	3001      	adds	r0, #1
 800421e:	f43f af28 	beq.w	8004072 <_printf_float+0xb6>
 8004222:	f109 0901 	add.w	r9, r9, #1
 8004226:	e7e8      	b.n	80041fa <_printf_float+0x23e>
 8004228:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800422a:	2b00      	cmp	r3, #0
 800422c:	dc38      	bgt.n	80042a0 <_printf_float+0x2e4>
 800422e:	2301      	movs	r3, #1
 8004230:	4631      	mov	r1, r6
 8004232:	4628      	mov	r0, r5
 8004234:	4a19      	ldr	r2, [pc, #100]	@ (800429c <_printf_float+0x2e0>)
 8004236:	47b8      	blx	r7
 8004238:	3001      	adds	r0, #1
 800423a:	f43f af1a 	beq.w	8004072 <_printf_float+0xb6>
 800423e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004242:	ea59 0303 	orrs.w	r3, r9, r3
 8004246:	d102      	bne.n	800424e <_printf_float+0x292>
 8004248:	6823      	ldr	r3, [r4, #0]
 800424a:	07d9      	lsls	r1, r3, #31
 800424c:	d5d7      	bpl.n	80041fe <_printf_float+0x242>
 800424e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004252:	4631      	mov	r1, r6
 8004254:	4628      	mov	r0, r5
 8004256:	47b8      	blx	r7
 8004258:	3001      	adds	r0, #1
 800425a:	f43f af0a 	beq.w	8004072 <_printf_float+0xb6>
 800425e:	f04f 0a00 	mov.w	sl, #0
 8004262:	f104 0b1a 	add.w	fp, r4, #26
 8004266:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004268:	425b      	negs	r3, r3
 800426a:	4553      	cmp	r3, sl
 800426c:	dc01      	bgt.n	8004272 <_printf_float+0x2b6>
 800426e:	464b      	mov	r3, r9
 8004270:	e793      	b.n	800419a <_printf_float+0x1de>
 8004272:	2301      	movs	r3, #1
 8004274:	465a      	mov	r2, fp
 8004276:	4631      	mov	r1, r6
 8004278:	4628      	mov	r0, r5
 800427a:	47b8      	blx	r7
 800427c:	3001      	adds	r0, #1
 800427e:	f43f aef8 	beq.w	8004072 <_printf_float+0xb6>
 8004282:	f10a 0a01 	add.w	sl, sl, #1
 8004286:	e7ee      	b.n	8004266 <_printf_float+0x2aa>
 8004288:	7fefffff 	.word	0x7fefffff
 800428c:	080085ba 	.word	0x080085ba
 8004290:	080085be 	.word	0x080085be
 8004294:	080085c2 	.word	0x080085c2
 8004298:	080085c6 	.word	0x080085c6
 800429c:	080085ca 	.word	0x080085ca
 80042a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042a2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80042a6:	4553      	cmp	r3, sl
 80042a8:	bfa8      	it	ge
 80042aa:	4653      	movge	r3, sl
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	4699      	mov	r9, r3
 80042b0:	dc36      	bgt.n	8004320 <_printf_float+0x364>
 80042b2:	f04f 0b00 	mov.w	fp, #0
 80042b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042ba:	f104 021a 	add.w	r2, r4, #26
 80042be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80042c2:	eba3 0309 	sub.w	r3, r3, r9
 80042c6:	455b      	cmp	r3, fp
 80042c8:	dc31      	bgt.n	800432e <_printf_float+0x372>
 80042ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042cc:	459a      	cmp	sl, r3
 80042ce:	dc3a      	bgt.n	8004346 <_printf_float+0x38a>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	07da      	lsls	r2, r3, #31
 80042d4:	d437      	bmi.n	8004346 <_printf_float+0x38a>
 80042d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042d8:	ebaa 0903 	sub.w	r9, sl, r3
 80042dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042de:	ebaa 0303 	sub.w	r3, sl, r3
 80042e2:	4599      	cmp	r9, r3
 80042e4:	bfa8      	it	ge
 80042e6:	4699      	movge	r9, r3
 80042e8:	f1b9 0f00 	cmp.w	r9, #0
 80042ec:	dc33      	bgt.n	8004356 <_printf_float+0x39a>
 80042ee:	f04f 0800 	mov.w	r8, #0
 80042f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042f6:	f104 0b1a 	add.w	fp, r4, #26
 80042fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042fc:	ebaa 0303 	sub.w	r3, sl, r3
 8004300:	eba3 0309 	sub.w	r3, r3, r9
 8004304:	4543      	cmp	r3, r8
 8004306:	f77f af7a 	ble.w	80041fe <_printf_float+0x242>
 800430a:	2301      	movs	r3, #1
 800430c:	465a      	mov	r2, fp
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	f43f aeac 	beq.w	8004072 <_printf_float+0xb6>
 800431a:	f108 0801 	add.w	r8, r8, #1
 800431e:	e7ec      	b.n	80042fa <_printf_float+0x33e>
 8004320:	4642      	mov	r2, r8
 8004322:	4631      	mov	r1, r6
 8004324:	4628      	mov	r0, r5
 8004326:	47b8      	blx	r7
 8004328:	3001      	adds	r0, #1
 800432a:	d1c2      	bne.n	80042b2 <_printf_float+0x2f6>
 800432c:	e6a1      	b.n	8004072 <_printf_float+0xb6>
 800432e:	2301      	movs	r3, #1
 8004330:	4631      	mov	r1, r6
 8004332:	4628      	mov	r0, r5
 8004334:	920a      	str	r2, [sp, #40]	@ 0x28
 8004336:	47b8      	blx	r7
 8004338:	3001      	adds	r0, #1
 800433a:	f43f ae9a 	beq.w	8004072 <_printf_float+0xb6>
 800433e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004340:	f10b 0b01 	add.w	fp, fp, #1
 8004344:	e7bb      	b.n	80042be <_printf_float+0x302>
 8004346:	4631      	mov	r1, r6
 8004348:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800434c:	4628      	mov	r0, r5
 800434e:	47b8      	blx	r7
 8004350:	3001      	adds	r0, #1
 8004352:	d1c0      	bne.n	80042d6 <_printf_float+0x31a>
 8004354:	e68d      	b.n	8004072 <_printf_float+0xb6>
 8004356:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004358:	464b      	mov	r3, r9
 800435a:	4631      	mov	r1, r6
 800435c:	4628      	mov	r0, r5
 800435e:	4442      	add	r2, r8
 8004360:	47b8      	blx	r7
 8004362:	3001      	adds	r0, #1
 8004364:	d1c3      	bne.n	80042ee <_printf_float+0x332>
 8004366:	e684      	b.n	8004072 <_printf_float+0xb6>
 8004368:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800436c:	f1ba 0f01 	cmp.w	sl, #1
 8004370:	dc01      	bgt.n	8004376 <_printf_float+0x3ba>
 8004372:	07db      	lsls	r3, r3, #31
 8004374:	d536      	bpl.n	80043e4 <_printf_float+0x428>
 8004376:	2301      	movs	r3, #1
 8004378:	4642      	mov	r2, r8
 800437a:	4631      	mov	r1, r6
 800437c:	4628      	mov	r0, r5
 800437e:	47b8      	blx	r7
 8004380:	3001      	adds	r0, #1
 8004382:	f43f ae76 	beq.w	8004072 <_printf_float+0xb6>
 8004386:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800438a:	4631      	mov	r1, r6
 800438c:	4628      	mov	r0, r5
 800438e:	47b8      	blx	r7
 8004390:	3001      	adds	r0, #1
 8004392:	f43f ae6e 	beq.w	8004072 <_printf_float+0xb6>
 8004396:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800439a:	2200      	movs	r2, #0
 800439c:	2300      	movs	r3, #0
 800439e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80043a2:	f7fc fbb5 	bl	8000b10 <__aeabi_dcmpeq>
 80043a6:	b9c0      	cbnz	r0, 80043da <_printf_float+0x41e>
 80043a8:	4653      	mov	r3, sl
 80043aa:	f108 0201 	add.w	r2, r8, #1
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	d10c      	bne.n	80043d2 <_printf_float+0x416>
 80043b8:	e65b      	b.n	8004072 <_printf_float+0xb6>
 80043ba:	2301      	movs	r3, #1
 80043bc:	465a      	mov	r2, fp
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b8      	blx	r7
 80043c4:	3001      	adds	r0, #1
 80043c6:	f43f ae54 	beq.w	8004072 <_printf_float+0xb6>
 80043ca:	f108 0801 	add.w	r8, r8, #1
 80043ce:	45d0      	cmp	r8, sl
 80043d0:	dbf3      	blt.n	80043ba <_printf_float+0x3fe>
 80043d2:	464b      	mov	r3, r9
 80043d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80043d8:	e6e0      	b.n	800419c <_printf_float+0x1e0>
 80043da:	f04f 0800 	mov.w	r8, #0
 80043de:	f104 0b1a 	add.w	fp, r4, #26
 80043e2:	e7f4      	b.n	80043ce <_printf_float+0x412>
 80043e4:	2301      	movs	r3, #1
 80043e6:	4642      	mov	r2, r8
 80043e8:	e7e1      	b.n	80043ae <_printf_float+0x3f2>
 80043ea:	2301      	movs	r3, #1
 80043ec:	464a      	mov	r2, r9
 80043ee:	4631      	mov	r1, r6
 80043f0:	4628      	mov	r0, r5
 80043f2:	47b8      	blx	r7
 80043f4:	3001      	adds	r0, #1
 80043f6:	f43f ae3c 	beq.w	8004072 <_printf_float+0xb6>
 80043fa:	f108 0801 	add.w	r8, r8, #1
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004402:	1a5b      	subs	r3, r3, r1
 8004404:	4543      	cmp	r3, r8
 8004406:	dcf0      	bgt.n	80043ea <_printf_float+0x42e>
 8004408:	e6fd      	b.n	8004206 <_printf_float+0x24a>
 800440a:	f04f 0800 	mov.w	r8, #0
 800440e:	f104 0919 	add.w	r9, r4, #25
 8004412:	e7f4      	b.n	80043fe <_printf_float+0x442>

08004414 <_printf_common>:
 8004414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004418:	4616      	mov	r6, r2
 800441a:	4698      	mov	r8, r3
 800441c:	688a      	ldr	r2, [r1, #8]
 800441e:	690b      	ldr	r3, [r1, #16]
 8004420:	4607      	mov	r7, r0
 8004422:	4293      	cmp	r3, r2
 8004424:	bfb8      	it	lt
 8004426:	4613      	movlt	r3, r2
 8004428:	6033      	str	r3, [r6, #0]
 800442a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800442e:	460c      	mov	r4, r1
 8004430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004434:	b10a      	cbz	r2, 800443a <_printf_common+0x26>
 8004436:	3301      	adds	r3, #1
 8004438:	6033      	str	r3, [r6, #0]
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	0699      	lsls	r1, r3, #26
 800443e:	bf42      	ittt	mi
 8004440:	6833      	ldrmi	r3, [r6, #0]
 8004442:	3302      	addmi	r3, #2
 8004444:	6033      	strmi	r3, [r6, #0]
 8004446:	6825      	ldr	r5, [r4, #0]
 8004448:	f015 0506 	ands.w	r5, r5, #6
 800444c:	d106      	bne.n	800445c <_printf_common+0x48>
 800444e:	f104 0a19 	add.w	sl, r4, #25
 8004452:	68e3      	ldr	r3, [r4, #12]
 8004454:	6832      	ldr	r2, [r6, #0]
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	42ab      	cmp	r3, r5
 800445a:	dc2b      	bgt.n	80044b4 <_printf_common+0xa0>
 800445c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004460:	6822      	ldr	r2, [r4, #0]
 8004462:	3b00      	subs	r3, #0
 8004464:	bf18      	it	ne
 8004466:	2301      	movne	r3, #1
 8004468:	0692      	lsls	r2, r2, #26
 800446a:	d430      	bmi.n	80044ce <_printf_common+0xba>
 800446c:	4641      	mov	r1, r8
 800446e:	4638      	mov	r0, r7
 8004470:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004474:	47c8      	blx	r9
 8004476:	3001      	adds	r0, #1
 8004478:	d023      	beq.n	80044c2 <_printf_common+0xae>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	6922      	ldr	r2, [r4, #16]
 800447e:	f003 0306 	and.w	r3, r3, #6
 8004482:	2b04      	cmp	r3, #4
 8004484:	bf14      	ite	ne
 8004486:	2500      	movne	r5, #0
 8004488:	6833      	ldreq	r3, [r6, #0]
 800448a:	f04f 0600 	mov.w	r6, #0
 800448e:	bf08      	it	eq
 8004490:	68e5      	ldreq	r5, [r4, #12]
 8004492:	f104 041a 	add.w	r4, r4, #26
 8004496:	bf08      	it	eq
 8004498:	1aed      	subeq	r5, r5, r3
 800449a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800449e:	bf08      	it	eq
 80044a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044a4:	4293      	cmp	r3, r2
 80044a6:	bfc4      	itt	gt
 80044a8:	1a9b      	subgt	r3, r3, r2
 80044aa:	18ed      	addgt	r5, r5, r3
 80044ac:	42b5      	cmp	r5, r6
 80044ae:	d11a      	bne.n	80044e6 <_printf_common+0xd2>
 80044b0:	2000      	movs	r0, #0
 80044b2:	e008      	b.n	80044c6 <_printf_common+0xb2>
 80044b4:	2301      	movs	r3, #1
 80044b6:	4652      	mov	r2, sl
 80044b8:	4641      	mov	r1, r8
 80044ba:	4638      	mov	r0, r7
 80044bc:	47c8      	blx	r9
 80044be:	3001      	adds	r0, #1
 80044c0:	d103      	bne.n	80044ca <_printf_common+0xb6>
 80044c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ca:	3501      	adds	r5, #1
 80044cc:	e7c1      	b.n	8004452 <_printf_common+0x3e>
 80044ce:	2030      	movs	r0, #48	@ 0x30
 80044d0:	18e1      	adds	r1, r4, r3
 80044d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044dc:	4422      	add	r2, r4
 80044de:	3302      	adds	r3, #2
 80044e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044e4:	e7c2      	b.n	800446c <_printf_common+0x58>
 80044e6:	2301      	movs	r3, #1
 80044e8:	4622      	mov	r2, r4
 80044ea:	4641      	mov	r1, r8
 80044ec:	4638      	mov	r0, r7
 80044ee:	47c8      	blx	r9
 80044f0:	3001      	adds	r0, #1
 80044f2:	d0e6      	beq.n	80044c2 <_printf_common+0xae>
 80044f4:	3601      	adds	r6, #1
 80044f6:	e7d9      	b.n	80044ac <_printf_common+0x98>

080044f8 <_printf_i>:
 80044f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044fc:	7e0f      	ldrb	r7, [r1, #24]
 80044fe:	4691      	mov	r9, r2
 8004500:	2f78      	cmp	r7, #120	@ 0x78
 8004502:	4680      	mov	r8, r0
 8004504:	460c      	mov	r4, r1
 8004506:	469a      	mov	sl, r3
 8004508:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800450a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800450e:	d807      	bhi.n	8004520 <_printf_i+0x28>
 8004510:	2f62      	cmp	r7, #98	@ 0x62
 8004512:	d80a      	bhi.n	800452a <_printf_i+0x32>
 8004514:	2f00      	cmp	r7, #0
 8004516:	f000 80d3 	beq.w	80046c0 <_printf_i+0x1c8>
 800451a:	2f58      	cmp	r7, #88	@ 0x58
 800451c:	f000 80ba 	beq.w	8004694 <_printf_i+0x19c>
 8004520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004524:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004528:	e03a      	b.n	80045a0 <_printf_i+0xa8>
 800452a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800452e:	2b15      	cmp	r3, #21
 8004530:	d8f6      	bhi.n	8004520 <_printf_i+0x28>
 8004532:	a101      	add	r1, pc, #4	@ (adr r1, 8004538 <_printf_i+0x40>)
 8004534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004538:	08004591 	.word	0x08004591
 800453c:	080045a5 	.word	0x080045a5
 8004540:	08004521 	.word	0x08004521
 8004544:	08004521 	.word	0x08004521
 8004548:	08004521 	.word	0x08004521
 800454c:	08004521 	.word	0x08004521
 8004550:	080045a5 	.word	0x080045a5
 8004554:	08004521 	.word	0x08004521
 8004558:	08004521 	.word	0x08004521
 800455c:	08004521 	.word	0x08004521
 8004560:	08004521 	.word	0x08004521
 8004564:	080046a7 	.word	0x080046a7
 8004568:	080045cf 	.word	0x080045cf
 800456c:	08004661 	.word	0x08004661
 8004570:	08004521 	.word	0x08004521
 8004574:	08004521 	.word	0x08004521
 8004578:	080046c9 	.word	0x080046c9
 800457c:	08004521 	.word	0x08004521
 8004580:	080045cf 	.word	0x080045cf
 8004584:	08004521 	.word	0x08004521
 8004588:	08004521 	.word	0x08004521
 800458c:	08004669 	.word	0x08004669
 8004590:	6833      	ldr	r3, [r6, #0]
 8004592:	1d1a      	adds	r2, r3, #4
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6032      	str	r2, [r6, #0]
 8004598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800459c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045a0:	2301      	movs	r3, #1
 80045a2:	e09e      	b.n	80046e2 <_printf_i+0x1ea>
 80045a4:	6833      	ldr	r3, [r6, #0]
 80045a6:	6820      	ldr	r0, [r4, #0]
 80045a8:	1d19      	adds	r1, r3, #4
 80045aa:	6031      	str	r1, [r6, #0]
 80045ac:	0606      	lsls	r6, r0, #24
 80045ae:	d501      	bpl.n	80045b4 <_printf_i+0xbc>
 80045b0:	681d      	ldr	r5, [r3, #0]
 80045b2:	e003      	b.n	80045bc <_printf_i+0xc4>
 80045b4:	0645      	lsls	r5, r0, #25
 80045b6:	d5fb      	bpl.n	80045b0 <_printf_i+0xb8>
 80045b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045bc:	2d00      	cmp	r5, #0
 80045be:	da03      	bge.n	80045c8 <_printf_i+0xd0>
 80045c0:	232d      	movs	r3, #45	@ 0x2d
 80045c2:	426d      	negs	r5, r5
 80045c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045c8:	230a      	movs	r3, #10
 80045ca:	4859      	ldr	r0, [pc, #356]	@ (8004730 <_printf_i+0x238>)
 80045cc:	e011      	b.n	80045f2 <_printf_i+0xfa>
 80045ce:	6821      	ldr	r1, [r4, #0]
 80045d0:	6833      	ldr	r3, [r6, #0]
 80045d2:	0608      	lsls	r0, r1, #24
 80045d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80045d8:	d402      	bmi.n	80045e0 <_printf_i+0xe8>
 80045da:	0649      	lsls	r1, r1, #25
 80045dc:	bf48      	it	mi
 80045de:	b2ad      	uxthmi	r5, r5
 80045e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80045e2:	6033      	str	r3, [r6, #0]
 80045e4:	bf14      	ite	ne
 80045e6:	230a      	movne	r3, #10
 80045e8:	2308      	moveq	r3, #8
 80045ea:	4851      	ldr	r0, [pc, #324]	@ (8004730 <_printf_i+0x238>)
 80045ec:	2100      	movs	r1, #0
 80045ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045f2:	6866      	ldr	r6, [r4, #4]
 80045f4:	2e00      	cmp	r6, #0
 80045f6:	bfa8      	it	ge
 80045f8:	6821      	ldrge	r1, [r4, #0]
 80045fa:	60a6      	str	r6, [r4, #8]
 80045fc:	bfa4      	itt	ge
 80045fe:	f021 0104 	bicge.w	r1, r1, #4
 8004602:	6021      	strge	r1, [r4, #0]
 8004604:	b90d      	cbnz	r5, 800460a <_printf_i+0x112>
 8004606:	2e00      	cmp	r6, #0
 8004608:	d04b      	beq.n	80046a2 <_printf_i+0x1aa>
 800460a:	4616      	mov	r6, r2
 800460c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004610:	fb03 5711 	mls	r7, r3, r1, r5
 8004614:	5dc7      	ldrb	r7, [r0, r7]
 8004616:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800461a:	462f      	mov	r7, r5
 800461c:	42bb      	cmp	r3, r7
 800461e:	460d      	mov	r5, r1
 8004620:	d9f4      	bls.n	800460c <_printf_i+0x114>
 8004622:	2b08      	cmp	r3, #8
 8004624:	d10b      	bne.n	800463e <_printf_i+0x146>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	07df      	lsls	r7, r3, #31
 800462a:	d508      	bpl.n	800463e <_printf_i+0x146>
 800462c:	6923      	ldr	r3, [r4, #16]
 800462e:	6861      	ldr	r1, [r4, #4]
 8004630:	4299      	cmp	r1, r3
 8004632:	bfde      	ittt	le
 8004634:	2330      	movle	r3, #48	@ 0x30
 8004636:	f806 3c01 	strble.w	r3, [r6, #-1]
 800463a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800463e:	1b92      	subs	r2, r2, r6
 8004640:	6122      	str	r2, [r4, #16]
 8004642:	464b      	mov	r3, r9
 8004644:	4621      	mov	r1, r4
 8004646:	4640      	mov	r0, r8
 8004648:	f8cd a000 	str.w	sl, [sp]
 800464c:	aa03      	add	r2, sp, #12
 800464e:	f7ff fee1 	bl	8004414 <_printf_common>
 8004652:	3001      	adds	r0, #1
 8004654:	d14a      	bne.n	80046ec <_printf_i+0x1f4>
 8004656:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800465a:	b004      	add	sp, #16
 800465c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	f043 0320 	orr.w	r3, r3, #32
 8004666:	6023      	str	r3, [r4, #0]
 8004668:	2778      	movs	r7, #120	@ 0x78
 800466a:	4832      	ldr	r0, [pc, #200]	@ (8004734 <_printf_i+0x23c>)
 800466c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	6831      	ldr	r1, [r6, #0]
 8004674:	061f      	lsls	r7, r3, #24
 8004676:	f851 5b04 	ldr.w	r5, [r1], #4
 800467a:	d402      	bmi.n	8004682 <_printf_i+0x18a>
 800467c:	065f      	lsls	r7, r3, #25
 800467e:	bf48      	it	mi
 8004680:	b2ad      	uxthmi	r5, r5
 8004682:	6031      	str	r1, [r6, #0]
 8004684:	07d9      	lsls	r1, r3, #31
 8004686:	bf44      	itt	mi
 8004688:	f043 0320 	orrmi.w	r3, r3, #32
 800468c:	6023      	strmi	r3, [r4, #0]
 800468e:	b11d      	cbz	r5, 8004698 <_printf_i+0x1a0>
 8004690:	2310      	movs	r3, #16
 8004692:	e7ab      	b.n	80045ec <_printf_i+0xf4>
 8004694:	4826      	ldr	r0, [pc, #152]	@ (8004730 <_printf_i+0x238>)
 8004696:	e7e9      	b.n	800466c <_printf_i+0x174>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	f023 0320 	bic.w	r3, r3, #32
 800469e:	6023      	str	r3, [r4, #0]
 80046a0:	e7f6      	b.n	8004690 <_printf_i+0x198>
 80046a2:	4616      	mov	r6, r2
 80046a4:	e7bd      	b.n	8004622 <_printf_i+0x12a>
 80046a6:	6833      	ldr	r3, [r6, #0]
 80046a8:	6825      	ldr	r5, [r4, #0]
 80046aa:	1d18      	adds	r0, r3, #4
 80046ac:	6961      	ldr	r1, [r4, #20]
 80046ae:	6030      	str	r0, [r6, #0]
 80046b0:	062e      	lsls	r6, r5, #24
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	d501      	bpl.n	80046ba <_printf_i+0x1c2>
 80046b6:	6019      	str	r1, [r3, #0]
 80046b8:	e002      	b.n	80046c0 <_printf_i+0x1c8>
 80046ba:	0668      	lsls	r0, r5, #25
 80046bc:	d5fb      	bpl.n	80046b6 <_printf_i+0x1be>
 80046be:	8019      	strh	r1, [r3, #0]
 80046c0:	2300      	movs	r3, #0
 80046c2:	4616      	mov	r6, r2
 80046c4:	6123      	str	r3, [r4, #16]
 80046c6:	e7bc      	b.n	8004642 <_printf_i+0x14a>
 80046c8:	6833      	ldr	r3, [r6, #0]
 80046ca:	2100      	movs	r1, #0
 80046cc:	1d1a      	adds	r2, r3, #4
 80046ce:	6032      	str	r2, [r6, #0]
 80046d0:	681e      	ldr	r6, [r3, #0]
 80046d2:	6862      	ldr	r2, [r4, #4]
 80046d4:	4630      	mov	r0, r6
 80046d6:	f001 f9ea 	bl	8005aae <memchr>
 80046da:	b108      	cbz	r0, 80046e0 <_printf_i+0x1e8>
 80046dc:	1b80      	subs	r0, r0, r6
 80046de:	6060      	str	r0, [r4, #4]
 80046e0:	6863      	ldr	r3, [r4, #4]
 80046e2:	6123      	str	r3, [r4, #16]
 80046e4:	2300      	movs	r3, #0
 80046e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046ea:	e7aa      	b.n	8004642 <_printf_i+0x14a>
 80046ec:	4632      	mov	r2, r6
 80046ee:	4649      	mov	r1, r9
 80046f0:	4640      	mov	r0, r8
 80046f2:	6923      	ldr	r3, [r4, #16]
 80046f4:	47d0      	blx	sl
 80046f6:	3001      	adds	r0, #1
 80046f8:	d0ad      	beq.n	8004656 <_printf_i+0x15e>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	079b      	lsls	r3, r3, #30
 80046fe:	d413      	bmi.n	8004728 <_printf_i+0x230>
 8004700:	68e0      	ldr	r0, [r4, #12]
 8004702:	9b03      	ldr	r3, [sp, #12]
 8004704:	4298      	cmp	r0, r3
 8004706:	bfb8      	it	lt
 8004708:	4618      	movlt	r0, r3
 800470a:	e7a6      	b.n	800465a <_printf_i+0x162>
 800470c:	2301      	movs	r3, #1
 800470e:	4632      	mov	r2, r6
 8004710:	4649      	mov	r1, r9
 8004712:	4640      	mov	r0, r8
 8004714:	47d0      	blx	sl
 8004716:	3001      	adds	r0, #1
 8004718:	d09d      	beq.n	8004656 <_printf_i+0x15e>
 800471a:	3501      	adds	r5, #1
 800471c:	68e3      	ldr	r3, [r4, #12]
 800471e:	9903      	ldr	r1, [sp, #12]
 8004720:	1a5b      	subs	r3, r3, r1
 8004722:	42ab      	cmp	r3, r5
 8004724:	dcf2      	bgt.n	800470c <_printf_i+0x214>
 8004726:	e7eb      	b.n	8004700 <_printf_i+0x208>
 8004728:	2500      	movs	r5, #0
 800472a:	f104 0619 	add.w	r6, r4, #25
 800472e:	e7f5      	b.n	800471c <_printf_i+0x224>
 8004730:	080085cc 	.word	0x080085cc
 8004734:	080085dd 	.word	0x080085dd

08004738 <_scanf_float>:
 8004738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473c:	b087      	sub	sp, #28
 800473e:	9303      	str	r3, [sp, #12]
 8004740:	688b      	ldr	r3, [r1, #8]
 8004742:	4617      	mov	r7, r2
 8004744:	1e5a      	subs	r2, r3, #1
 8004746:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800474a:	bf82      	ittt	hi
 800474c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004750:	eb03 0b05 	addhi.w	fp, r3, r5
 8004754:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004758:	460a      	mov	r2, r1
 800475a:	f04f 0500 	mov.w	r5, #0
 800475e:	bf88      	it	hi
 8004760:	608b      	strhi	r3, [r1, #8]
 8004762:	680b      	ldr	r3, [r1, #0]
 8004764:	4680      	mov	r8, r0
 8004766:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800476a:	f842 3b1c 	str.w	r3, [r2], #28
 800476e:	460c      	mov	r4, r1
 8004770:	bf98      	it	ls
 8004772:	f04f 0b00 	movls.w	fp, #0
 8004776:	4616      	mov	r6, r2
 8004778:	46aa      	mov	sl, r5
 800477a:	46a9      	mov	r9, r5
 800477c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004780:	9201      	str	r2, [sp, #4]
 8004782:	9502      	str	r5, [sp, #8]
 8004784:	68a2      	ldr	r2, [r4, #8]
 8004786:	b152      	cbz	r2, 800479e <_scanf_float+0x66>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b4e      	cmp	r3, #78	@ 0x4e
 800478e:	d865      	bhi.n	800485c <_scanf_float+0x124>
 8004790:	2b40      	cmp	r3, #64	@ 0x40
 8004792:	d83d      	bhi.n	8004810 <_scanf_float+0xd8>
 8004794:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004798:	b2c8      	uxtb	r0, r1
 800479a:	280e      	cmp	r0, #14
 800479c:	d93b      	bls.n	8004816 <_scanf_float+0xde>
 800479e:	f1b9 0f00 	cmp.w	r9, #0
 80047a2:	d003      	beq.n	80047ac <_scanf_float+0x74>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047aa:	6023      	str	r3, [r4, #0]
 80047ac:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80047b0:	f1ba 0f01 	cmp.w	sl, #1
 80047b4:	f200 8118 	bhi.w	80049e8 <_scanf_float+0x2b0>
 80047b8:	9b01      	ldr	r3, [sp, #4]
 80047ba:	429e      	cmp	r6, r3
 80047bc:	f200 8109 	bhi.w	80049d2 <_scanf_float+0x29a>
 80047c0:	2001      	movs	r0, #1
 80047c2:	b007      	add	sp, #28
 80047c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80047cc:	2a0d      	cmp	r2, #13
 80047ce:	d8e6      	bhi.n	800479e <_scanf_float+0x66>
 80047d0:	a101      	add	r1, pc, #4	@ (adr r1, 80047d8 <_scanf_float+0xa0>)
 80047d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	0800491f 	.word	0x0800491f
 80047dc:	0800479f 	.word	0x0800479f
 80047e0:	0800479f 	.word	0x0800479f
 80047e4:	0800479f 	.word	0x0800479f
 80047e8:	0800497f 	.word	0x0800497f
 80047ec:	08004957 	.word	0x08004957
 80047f0:	0800479f 	.word	0x0800479f
 80047f4:	0800479f 	.word	0x0800479f
 80047f8:	0800492d 	.word	0x0800492d
 80047fc:	0800479f 	.word	0x0800479f
 8004800:	0800479f 	.word	0x0800479f
 8004804:	0800479f 	.word	0x0800479f
 8004808:	0800479f 	.word	0x0800479f
 800480c:	080048e5 	.word	0x080048e5
 8004810:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004814:	e7da      	b.n	80047cc <_scanf_float+0x94>
 8004816:	290e      	cmp	r1, #14
 8004818:	d8c1      	bhi.n	800479e <_scanf_float+0x66>
 800481a:	a001      	add	r0, pc, #4	@ (adr r0, 8004820 <_scanf_float+0xe8>)
 800481c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004820:	080048d5 	.word	0x080048d5
 8004824:	0800479f 	.word	0x0800479f
 8004828:	080048d5 	.word	0x080048d5
 800482c:	0800496b 	.word	0x0800496b
 8004830:	0800479f 	.word	0x0800479f
 8004834:	0800487d 	.word	0x0800487d
 8004838:	080048bb 	.word	0x080048bb
 800483c:	080048bb 	.word	0x080048bb
 8004840:	080048bb 	.word	0x080048bb
 8004844:	080048bb 	.word	0x080048bb
 8004848:	080048bb 	.word	0x080048bb
 800484c:	080048bb 	.word	0x080048bb
 8004850:	080048bb 	.word	0x080048bb
 8004854:	080048bb 	.word	0x080048bb
 8004858:	080048bb 	.word	0x080048bb
 800485c:	2b6e      	cmp	r3, #110	@ 0x6e
 800485e:	d809      	bhi.n	8004874 <_scanf_float+0x13c>
 8004860:	2b60      	cmp	r3, #96	@ 0x60
 8004862:	d8b1      	bhi.n	80047c8 <_scanf_float+0x90>
 8004864:	2b54      	cmp	r3, #84	@ 0x54
 8004866:	d07b      	beq.n	8004960 <_scanf_float+0x228>
 8004868:	2b59      	cmp	r3, #89	@ 0x59
 800486a:	d198      	bne.n	800479e <_scanf_float+0x66>
 800486c:	2d07      	cmp	r5, #7
 800486e:	d196      	bne.n	800479e <_scanf_float+0x66>
 8004870:	2508      	movs	r5, #8
 8004872:	e02c      	b.n	80048ce <_scanf_float+0x196>
 8004874:	2b74      	cmp	r3, #116	@ 0x74
 8004876:	d073      	beq.n	8004960 <_scanf_float+0x228>
 8004878:	2b79      	cmp	r3, #121	@ 0x79
 800487a:	e7f6      	b.n	800486a <_scanf_float+0x132>
 800487c:	6821      	ldr	r1, [r4, #0]
 800487e:	05c8      	lsls	r0, r1, #23
 8004880:	d51b      	bpl.n	80048ba <_scanf_float+0x182>
 8004882:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004886:	6021      	str	r1, [r4, #0]
 8004888:	f109 0901 	add.w	r9, r9, #1
 800488c:	f1bb 0f00 	cmp.w	fp, #0
 8004890:	d003      	beq.n	800489a <_scanf_float+0x162>
 8004892:	3201      	adds	r2, #1
 8004894:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004898:	60a2      	str	r2, [r4, #8]
 800489a:	68a3      	ldr	r3, [r4, #8]
 800489c:	3b01      	subs	r3, #1
 800489e:	60a3      	str	r3, [r4, #8]
 80048a0:	6923      	ldr	r3, [r4, #16]
 80048a2:	3301      	adds	r3, #1
 80048a4:	6123      	str	r3, [r4, #16]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	f340 8087 	ble.w	80049c0 <_scanf_float+0x288>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	3301      	adds	r3, #1
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	e764      	b.n	8004784 <_scanf_float+0x4c>
 80048ba:	eb1a 0105 	adds.w	r1, sl, r5
 80048be:	f47f af6e 	bne.w	800479e <_scanf_float+0x66>
 80048c2:	460d      	mov	r5, r1
 80048c4:	468a      	mov	sl, r1
 80048c6:	6822      	ldr	r2, [r4, #0]
 80048c8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80048cc:	6022      	str	r2, [r4, #0]
 80048ce:	f806 3b01 	strb.w	r3, [r6], #1
 80048d2:	e7e2      	b.n	800489a <_scanf_float+0x162>
 80048d4:	6822      	ldr	r2, [r4, #0]
 80048d6:	0610      	lsls	r0, r2, #24
 80048d8:	f57f af61 	bpl.w	800479e <_scanf_float+0x66>
 80048dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048e0:	6022      	str	r2, [r4, #0]
 80048e2:	e7f4      	b.n	80048ce <_scanf_float+0x196>
 80048e4:	f1ba 0f00 	cmp.w	sl, #0
 80048e8:	d10e      	bne.n	8004908 <_scanf_float+0x1d0>
 80048ea:	f1b9 0f00 	cmp.w	r9, #0
 80048ee:	d10e      	bne.n	800490e <_scanf_float+0x1d6>
 80048f0:	6822      	ldr	r2, [r4, #0]
 80048f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80048f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80048fa:	d108      	bne.n	800490e <_scanf_float+0x1d6>
 80048fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004900:	f04f 0a01 	mov.w	sl, #1
 8004904:	6022      	str	r2, [r4, #0]
 8004906:	e7e2      	b.n	80048ce <_scanf_float+0x196>
 8004908:	f1ba 0f02 	cmp.w	sl, #2
 800490c:	d055      	beq.n	80049ba <_scanf_float+0x282>
 800490e:	2d01      	cmp	r5, #1
 8004910:	d002      	beq.n	8004918 <_scanf_float+0x1e0>
 8004912:	2d04      	cmp	r5, #4
 8004914:	f47f af43 	bne.w	800479e <_scanf_float+0x66>
 8004918:	3501      	adds	r5, #1
 800491a:	b2ed      	uxtb	r5, r5
 800491c:	e7d7      	b.n	80048ce <_scanf_float+0x196>
 800491e:	f1ba 0f01 	cmp.w	sl, #1
 8004922:	f47f af3c 	bne.w	800479e <_scanf_float+0x66>
 8004926:	f04f 0a02 	mov.w	sl, #2
 800492a:	e7d0      	b.n	80048ce <_scanf_float+0x196>
 800492c:	b97d      	cbnz	r5, 800494e <_scanf_float+0x216>
 800492e:	f1b9 0f00 	cmp.w	r9, #0
 8004932:	f47f af37 	bne.w	80047a4 <_scanf_float+0x6c>
 8004936:	6822      	ldr	r2, [r4, #0]
 8004938:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800493c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004940:	f040 8103 	bne.w	8004b4a <_scanf_float+0x412>
 8004944:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004948:	2501      	movs	r5, #1
 800494a:	6022      	str	r2, [r4, #0]
 800494c:	e7bf      	b.n	80048ce <_scanf_float+0x196>
 800494e:	2d03      	cmp	r5, #3
 8004950:	d0e2      	beq.n	8004918 <_scanf_float+0x1e0>
 8004952:	2d05      	cmp	r5, #5
 8004954:	e7de      	b.n	8004914 <_scanf_float+0x1dc>
 8004956:	2d02      	cmp	r5, #2
 8004958:	f47f af21 	bne.w	800479e <_scanf_float+0x66>
 800495c:	2503      	movs	r5, #3
 800495e:	e7b6      	b.n	80048ce <_scanf_float+0x196>
 8004960:	2d06      	cmp	r5, #6
 8004962:	f47f af1c 	bne.w	800479e <_scanf_float+0x66>
 8004966:	2507      	movs	r5, #7
 8004968:	e7b1      	b.n	80048ce <_scanf_float+0x196>
 800496a:	6822      	ldr	r2, [r4, #0]
 800496c:	0591      	lsls	r1, r2, #22
 800496e:	f57f af16 	bpl.w	800479e <_scanf_float+0x66>
 8004972:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004976:	6022      	str	r2, [r4, #0]
 8004978:	f8cd 9008 	str.w	r9, [sp, #8]
 800497c:	e7a7      	b.n	80048ce <_scanf_float+0x196>
 800497e:	6822      	ldr	r2, [r4, #0]
 8004980:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004984:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004988:	d006      	beq.n	8004998 <_scanf_float+0x260>
 800498a:	0550      	lsls	r0, r2, #21
 800498c:	f57f af07 	bpl.w	800479e <_scanf_float+0x66>
 8004990:	f1b9 0f00 	cmp.w	r9, #0
 8004994:	f000 80d9 	beq.w	8004b4a <_scanf_float+0x412>
 8004998:	0591      	lsls	r1, r2, #22
 800499a:	bf58      	it	pl
 800499c:	9902      	ldrpl	r1, [sp, #8]
 800499e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80049a2:	bf58      	it	pl
 80049a4:	eba9 0101 	subpl.w	r1, r9, r1
 80049a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80049ac:	f04f 0900 	mov.w	r9, #0
 80049b0:	bf58      	it	pl
 80049b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80049b6:	6022      	str	r2, [r4, #0]
 80049b8:	e789      	b.n	80048ce <_scanf_float+0x196>
 80049ba:	f04f 0a03 	mov.w	sl, #3
 80049be:	e786      	b.n	80048ce <_scanf_float+0x196>
 80049c0:	4639      	mov	r1, r7
 80049c2:	4640      	mov	r0, r8
 80049c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80049c8:	4798      	blx	r3
 80049ca:	2800      	cmp	r0, #0
 80049cc:	f43f aeda 	beq.w	8004784 <_scanf_float+0x4c>
 80049d0:	e6e5      	b.n	800479e <_scanf_float+0x66>
 80049d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049d6:	463a      	mov	r2, r7
 80049d8:	4640      	mov	r0, r8
 80049da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049de:	4798      	blx	r3
 80049e0:	6923      	ldr	r3, [r4, #16]
 80049e2:	3b01      	subs	r3, #1
 80049e4:	6123      	str	r3, [r4, #16]
 80049e6:	e6e7      	b.n	80047b8 <_scanf_float+0x80>
 80049e8:	1e6b      	subs	r3, r5, #1
 80049ea:	2b06      	cmp	r3, #6
 80049ec:	d824      	bhi.n	8004a38 <_scanf_float+0x300>
 80049ee:	2d02      	cmp	r5, #2
 80049f0:	d836      	bhi.n	8004a60 <_scanf_float+0x328>
 80049f2:	9b01      	ldr	r3, [sp, #4]
 80049f4:	429e      	cmp	r6, r3
 80049f6:	f67f aee3 	bls.w	80047c0 <_scanf_float+0x88>
 80049fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049fe:	463a      	mov	r2, r7
 8004a00:	4640      	mov	r0, r8
 8004a02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a06:	4798      	blx	r3
 8004a08:	6923      	ldr	r3, [r4, #16]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	6123      	str	r3, [r4, #16]
 8004a0e:	e7f0      	b.n	80049f2 <_scanf_float+0x2ba>
 8004a10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a14:	463a      	mov	r2, r7
 8004a16:	4640      	mov	r0, r8
 8004a18:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004a1c:	4798      	blx	r3
 8004a1e:	6923      	ldr	r3, [r4, #16]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004a28:	fa5f fa8a 	uxtb.w	sl, sl
 8004a2c:	f1ba 0f02 	cmp.w	sl, #2
 8004a30:	d1ee      	bne.n	8004a10 <_scanf_float+0x2d8>
 8004a32:	3d03      	subs	r5, #3
 8004a34:	b2ed      	uxtb	r5, r5
 8004a36:	1b76      	subs	r6, r6, r5
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	05da      	lsls	r2, r3, #23
 8004a3c:	d530      	bpl.n	8004aa0 <_scanf_float+0x368>
 8004a3e:	055b      	lsls	r3, r3, #21
 8004a40:	d511      	bpl.n	8004a66 <_scanf_float+0x32e>
 8004a42:	9b01      	ldr	r3, [sp, #4]
 8004a44:	429e      	cmp	r6, r3
 8004a46:	f67f aebb 	bls.w	80047c0 <_scanf_float+0x88>
 8004a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a4e:	463a      	mov	r2, r7
 8004a50:	4640      	mov	r0, r8
 8004a52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a56:	4798      	blx	r3
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	6123      	str	r3, [r4, #16]
 8004a5e:	e7f0      	b.n	8004a42 <_scanf_float+0x30a>
 8004a60:	46aa      	mov	sl, r5
 8004a62:	46b3      	mov	fp, r6
 8004a64:	e7de      	b.n	8004a24 <_scanf_float+0x2ec>
 8004a66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004a6a:	6923      	ldr	r3, [r4, #16]
 8004a6c:	2965      	cmp	r1, #101	@ 0x65
 8004a6e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004a72:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8004a76:	6123      	str	r3, [r4, #16]
 8004a78:	d00c      	beq.n	8004a94 <_scanf_float+0x35c>
 8004a7a:	2945      	cmp	r1, #69	@ 0x45
 8004a7c:	d00a      	beq.n	8004a94 <_scanf_float+0x35c>
 8004a7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a82:	463a      	mov	r2, r7
 8004a84:	4640      	mov	r0, r8
 8004a86:	4798      	blx	r3
 8004a88:	6923      	ldr	r3, [r4, #16]
 8004a8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	1eb5      	subs	r5, r6, #2
 8004a92:	6123      	str	r3, [r4, #16]
 8004a94:	463a      	mov	r2, r7
 8004a96:	4640      	mov	r0, r8
 8004a98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a9c:	4798      	blx	r3
 8004a9e:	462e      	mov	r6, r5
 8004aa0:	6822      	ldr	r2, [r4, #0]
 8004aa2:	f012 0210 	ands.w	r2, r2, #16
 8004aa6:	d001      	beq.n	8004aac <_scanf_float+0x374>
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	e68a      	b.n	80047c2 <_scanf_float+0x8a>
 8004aac:	7032      	strb	r2, [r6, #0]
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab8:	d11c      	bne.n	8004af4 <_scanf_float+0x3bc>
 8004aba:	9b02      	ldr	r3, [sp, #8]
 8004abc:	454b      	cmp	r3, r9
 8004abe:	eba3 0209 	sub.w	r2, r3, r9
 8004ac2:	d123      	bne.n	8004b0c <_scanf_float+0x3d4>
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	9901      	ldr	r1, [sp, #4]
 8004aca:	f000 ff05 	bl	80058d8 <_strtod_r>
 8004ace:	9b03      	ldr	r3, [sp, #12]
 8004ad0:	6825      	ldr	r5, [r4, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f015 0f02 	tst.w	r5, #2
 8004ad8:	4606      	mov	r6, r0
 8004ada:	460f      	mov	r7, r1
 8004adc:	f103 0204 	add.w	r2, r3, #4
 8004ae0:	d01f      	beq.n	8004b22 <_scanf_float+0x3ea>
 8004ae2:	9903      	ldr	r1, [sp, #12]
 8004ae4:	600a      	str	r2, [r1, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	e9c3 6700 	strd	r6, r7, [r3]
 8004aec:	68e3      	ldr	r3, [r4, #12]
 8004aee:	3301      	adds	r3, #1
 8004af0:	60e3      	str	r3, [r4, #12]
 8004af2:	e7d9      	b.n	8004aa8 <_scanf_float+0x370>
 8004af4:	9b04      	ldr	r3, [sp, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0e4      	beq.n	8004ac4 <_scanf_float+0x38c>
 8004afa:	9905      	ldr	r1, [sp, #20]
 8004afc:	230a      	movs	r3, #10
 8004afe:	4640      	mov	r0, r8
 8004b00:	3101      	adds	r1, #1
 8004b02:	f000 ff69 	bl	80059d8 <_strtol_r>
 8004b06:	9b04      	ldr	r3, [sp, #16]
 8004b08:	9e05      	ldr	r6, [sp, #20]
 8004b0a:	1ac2      	subs	r2, r0, r3
 8004b0c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004b10:	429e      	cmp	r6, r3
 8004b12:	bf28      	it	cs
 8004b14:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004b18:	4630      	mov	r0, r6
 8004b1a:	490d      	ldr	r1, [pc, #52]	@ (8004b50 <_scanf_float+0x418>)
 8004b1c:	f000 f81c 	bl	8004b58 <siprintf>
 8004b20:	e7d0      	b.n	8004ac4 <_scanf_float+0x38c>
 8004b22:	076d      	lsls	r5, r5, #29
 8004b24:	d4dd      	bmi.n	8004ae2 <_scanf_float+0x3aa>
 8004b26:	9d03      	ldr	r5, [sp, #12]
 8004b28:	602a      	str	r2, [r5, #0]
 8004b2a:	681d      	ldr	r5, [r3, #0]
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	f7fc f820 	bl	8000b74 <__aeabi_dcmpun>
 8004b34:	b120      	cbz	r0, 8004b40 <_scanf_float+0x408>
 8004b36:	4807      	ldr	r0, [pc, #28]	@ (8004b54 <_scanf_float+0x41c>)
 8004b38:	f000 ffdc 	bl	8005af4 <nanf>
 8004b3c:	6028      	str	r0, [r5, #0]
 8004b3e:	e7d5      	b.n	8004aec <_scanf_float+0x3b4>
 8004b40:	4630      	mov	r0, r6
 8004b42:	4639      	mov	r1, r7
 8004b44:	f7fc f874 	bl	8000c30 <__aeabi_d2f>
 8004b48:	e7f8      	b.n	8004b3c <_scanf_float+0x404>
 8004b4a:	f04f 0900 	mov.w	r9, #0
 8004b4e:	e62d      	b.n	80047ac <_scanf_float+0x74>
 8004b50:	080085ee 	.word	0x080085ee
 8004b54:	080089e3 	.word	0x080089e3

08004b58 <siprintf>:
 8004b58:	b40e      	push	{r1, r2, r3}
 8004b5a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b5e:	b500      	push	{lr}
 8004b60:	b09c      	sub	sp, #112	@ 0x70
 8004b62:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b64:	9002      	str	r0, [sp, #8]
 8004b66:	9006      	str	r0, [sp, #24]
 8004b68:	9107      	str	r1, [sp, #28]
 8004b6a:	9104      	str	r1, [sp, #16]
 8004b6c:	4808      	ldr	r0, [pc, #32]	@ (8004b90 <siprintf+0x38>)
 8004b6e:	4909      	ldr	r1, [pc, #36]	@ (8004b94 <siprintf+0x3c>)
 8004b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b74:	9105      	str	r1, [sp, #20]
 8004b76:	6800      	ldr	r0, [r0, #0]
 8004b78:	a902      	add	r1, sp, #8
 8004b7a:	9301      	str	r3, [sp, #4]
 8004b7c:	f002 f9a4 	bl	8006ec8 <_svfiprintf_r>
 8004b80:	2200      	movs	r2, #0
 8004b82:	9b02      	ldr	r3, [sp, #8]
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	b01c      	add	sp, #112	@ 0x70
 8004b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b8c:	b003      	add	sp, #12
 8004b8e:	4770      	bx	lr
 8004b90:	20000188 	.word	0x20000188
 8004b94:	ffff0208 	.word	0xffff0208

08004b98 <std>:
 8004b98:	2300      	movs	r3, #0
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ba6:	6083      	str	r3, [r0, #8]
 8004ba8:	8181      	strh	r1, [r0, #12]
 8004baa:	6643      	str	r3, [r0, #100]	@ 0x64
 8004bac:	81c2      	strh	r2, [r0, #14]
 8004bae:	6183      	str	r3, [r0, #24]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	305c      	adds	r0, #92	@ 0x5c
 8004bb6:	f000 ff41 	bl	8005a3c <memset>
 8004bba:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <std+0x58>)
 8004bbc:	6224      	str	r4, [r4, #32]
 8004bbe:	6263      	str	r3, [r4, #36]	@ 0x24
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf4 <std+0x5c>)
 8004bc2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf8 <std+0x60>)
 8004bc6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bfc <std+0x64>)
 8004bca:	6323      	str	r3, [r4, #48]	@ 0x30
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c00 <std+0x68>)
 8004bce:	429c      	cmp	r4, r3
 8004bd0:	d006      	beq.n	8004be0 <std+0x48>
 8004bd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004bd6:	4294      	cmp	r4, r2
 8004bd8:	d002      	beq.n	8004be0 <std+0x48>
 8004bda:	33d0      	adds	r3, #208	@ 0xd0
 8004bdc:	429c      	cmp	r4, r3
 8004bde:	d105      	bne.n	8004bec <std+0x54>
 8004be0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be8:	f000 bf5e 	b.w	8005aa8 <__retarget_lock_init_recursive>
 8004bec:	bd10      	pop	{r4, pc}
 8004bee:	bf00      	nop
 8004bf0:	08007ced 	.word	0x08007ced
 8004bf4:	08007d0f 	.word	0x08007d0f
 8004bf8:	08007d47 	.word	0x08007d47
 8004bfc:	08007d6b 	.word	0x08007d6b
 8004c00:	200002cc 	.word	0x200002cc

08004c04 <stdio_exit_handler>:
 8004c04:	4a02      	ldr	r2, [pc, #8]	@ (8004c10 <stdio_exit_handler+0xc>)
 8004c06:	4903      	ldr	r1, [pc, #12]	@ (8004c14 <stdio_exit_handler+0x10>)
 8004c08:	4803      	ldr	r0, [pc, #12]	@ (8004c18 <stdio_exit_handler+0x14>)
 8004c0a:	f000 bee7 	b.w	80059dc <_fwalk_sglue>
 8004c0e:	bf00      	nop
 8004c10:	20000010 	.word	0x20000010
 8004c14:	08007339 	.word	0x08007339
 8004c18:	2000018c 	.word	0x2000018c

08004c1c <cleanup_stdio>:
 8004c1c:	6841      	ldr	r1, [r0, #4]
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <cleanup_stdio+0x34>)
 8004c20:	b510      	push	{r4, lr}
 8004c22:	4299      	cmp	r1, r3
 8004c24:	4604      	mov	r4, r0
 8004c26:	d001      	beq.n	8004c2c <cleanup_stdio+0x10>
 8004c28:	f002 fb86 	bl	8007338 <_fflush_r>
 8004c2c:	68a1      	ldr	r1, [r4, #8]
 8004c2e:	4b09      	ldr	r3, [pc, #36]	@ (8004c54 <cleanup_stdio+0x38>)
 8004c30:	4299      	cmp	r1, r3
 8004c32:	d002      	beq.n	8004c3a <cleanup_stdio+0x1e>
 8004c34:	4620      	mov	r0, r4
 8004c36:	f002 fb7f 	bl	8007338 <_fflush_r>
 8004c3a:	68e1      	ldr	r1, [r4, #12]
 8004c3c:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <cleanup_stdio+0x3c>)
 8004c3e:	4299      	cmp	r1, r3
 8004c40:	d004      	beq.n	8004c4c <cleanup_stdio+0x30>
 8004c42:	4620      	mov	r0, r4
 8004c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c48:	f002 bb76 	b.w	8007338 <_fflush_r>
 8004c4c:	bd10      	pop	{r4, pc}
 8004c4e:	bf00      	nop
 8004c50:	200002cc 	.word	0x200002cc
 8004c54:	20000334 	.word	0x20000334
 8004c58:	2000039c 	.word	0x2000039c

08004c5c <global_stdio_init.part.0>:
 8004c5c:	b510      	push	{r4, lr}
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <global_stdio_init.part.0+0x30>)
 8004c60:	4c0b      	ldr	r4, [pc, #44]	@ (8004c90 <global_stdio_init.part.0+0x34>)
 8004c62:	4a0c      	ldr	r2, [pc, #48]	@ (8004c94 <global_stdio_init.part.0+0x38>)
 8004c64:	4620      	mov	r0, r4
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	2104      	movs	r1, #4
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f7ff ff94 	bl	8004b98 <std>
 8004c70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c74:	2201      	movs	r2, #1
 8004c76:	2109      	movs	r1, #9
 8004c78:	f7ff ff8e 	bl	8004b98 <std>
 8004c7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c80:	2202      	movs	r2, #2
 8004c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c86:	2112      	movs	r1, #18
 8004c88:	f7ff bf86 	b.w	8004b98 <std>
 8004c8c:	20000404 	.word	0x20000404
 8004c90:	200002cc 	.word	0x200002cc
 8004c94:	08004c05 	.word	0x08004c05

08004c98 <__sfp_lock_acquire>:
 8004c98:	4801      	ldr	r0, [pc, #4]	@ (8004ca0 <__sfp_lock_acquire+0x8>)
 8004c9a:	f000 bf06 	b.w	8005aaa <__retarget_lock_acquire_recursive>
 8004c9e:	bf00      	nop
 8004ca0:	20000409 	.word	0x20000409

08004ca4 <__sfp_lock_release>:
 8004ca4:	4801      	ldr	r0, [pc, #4]	@ (8004cac <__sfp_lock_release+0x8>)
 8004ca6:	f000 bf01 	b.w	8005aac <__retarget_lock_release_recursive>
 8004caa:	bf00      	nop
 8004cac:	20000409 	.word	0x20000409

08004cb0 <__sinit>:
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	f7ff fff0 	bl	8004c98 <__sfp_lock_acquire>
 8004cb8:	6a23      	ldr	r3, [r4, #32]
 8004cba:	b11b      	cbz	r3, 8004cc4 <__sinit+0x14>
 8004cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc0:	f7ff bff0 	b.w	8004ca4 <__sfp_lock_release>
 8004cc4:	4b04      	ldr	r3, [pc, #16]	@ (8004cd8 <__sinit+0x28>)
 8004cc6:	6223      	str	r3, [r4, #32]
 8004cc8:	4b04      	ldr	r3, [pc, #16]	@ (8004cdc <__sinit+0x2c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f5      	bne.n	8004cbc <__sinit+0xc>
 8004cd0:	f7ff ffc4 	bl	8004c5c <global_stdio_init.part.0>
 8004cd4:	e7f2      	b.n	8004cbc <__sinit+0xc>
 8004cd6:	bf00      	nop
 8004cd8:	08004c1d 	.word	0x08004c1d
 8004cdc:	20000404 	.word	0x20000404

08004ce0 <sulp>:
 8004ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce4:	460f      	mov	r7, r1
 8004ce6:	4690      	mov	r8, r2
 8004ce8:	f002 fecc 	bl	8007a84 <__ulp>
 8004cec:	4604      	mov	r4, r0
 8004cee:	460d      	mov	r5, r1
 8004cf0:	f1b8 0f00 	cmp.w	r8, #0
 8004cf4:	d011      	beq.n	8004d1a <sulp+0x3a>
 8004cf6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004cfa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	dd0b      	ble.n	8004d1a <sulp+0x3a>
 8004d02:	2400      	movs	r4, #0
 8004d04:	051b      	lsls	r3, r3, #20
 8004d06:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004d0a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004d0e:	4622      	mov	r2, r4
 8004d10:	462b      	mov	r3, r5
 8004d12:	f7fb fc95 	bl	8000640 <__aeabi_dmul>
 8004d16:	4604      	mov	r4, r0
 8004d18:	460d      	mov	r5, r1
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d22:	0000      	movs	r0, r0
 8004d24:	0000      	movs	r0, r0
	...

08004d28 <_strtod_l>:
 8004d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2c:	b09f      	sub	sp, #124	@ 0x7c
 8004d2e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004d30:	2200      	movs	r2, #0
 8004d32:	460c      	mov	r4, r1
 8004d34:	921a      	str	r2, [sp, #104]	@ 0x68
 8004d36:	f04f 0a00 	mov.w	sl, #0
 8004d3a:	f04f 0b00 	mov.w	fp, #0
 8004d3e:	460a      	mov	r2, r1
 8004d40:	9005      	str	r0, [sp, #20]
 8004d42:	9219      	str	r2, [sp, #100]	@ 0x64
 8004d44:	7811      	ldrb	r1, [r2, #0]
 8004d46:	292b      	cmp	r1, #43	@ 0x2b
 8004d48:	d048      	beq.n	8004ddc <_strtod_l+0xb4>
 8004d4a:	d836      	bhi.n	8004dba <_strtod_l+0x92>
 8004d4c:	290d      	cmp	r1, #13
 8004d4e:	d830      	bhi.n	8004db2 <_strtod_l+0x8a>
 8004d50:	2908      	cmp	r1, #8
 8004d52:	d830      	bhi.n	8004db6 <_strtod_l+0x8e>
 8004d54:	2900      	cmp	r1, #0
 8004d56:	d039      	beq.n	8004dcc <_strtod_l+0xa4>
 8004d58:	2200      	movs	r2, #0
 8004d5a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004d5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004d5e:	782a      	ldrb	r2, [r5, #0]
 8004d60:	2a30      	cmp	r2, #48	@ 0x30
 8004d62:	f040 80b1 	bne.w	8004ec8 <_strtod_l+0x1a0>
 8004d66:	786a      	ldrb	r2, [r5, #1]
 8004d68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004d6c:	2a58      	cmp	r2, #88	@ 0x58
 8004d6e:	d16c      	bne.n	8004e4a <_strtod_l+0x122>
 8004d70:	9302      	str	r3, [sp, #8]
 8004d72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d74:	4a8e      	ldr	r2, [pc, #568]	@ (8004fb0 <_strtod_l+0x288>)
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	ab1a      	add	r3, sp, #104	@ 0x68
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	9805      	ldr	r0, [sp, #20]
 8004d7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004d80:	a919      	add	r1, sp, #100	@ 0x64
 8004d82:	f001 fd75 	bl	8006870 <__gethex>
 8004d86:	f010 060f 	ands.w	r6, r0, #15
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	d005      	beq.n	8004d9a <_strtod_l+0x72>
 8004d8e:	2e06      	cmp	r6, #6
 8004d90:	d126      	bne.n	8004de0 <_strtod_l+0xb8>
 8004d92:	2300      	movs	r3, #0
 8004d94:	3501      	adds	r5, #1
 8004d96:	9519      	str	r5, [sp, #100]	@ 0x64
 8004d98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f040 8584 	bne.w	80058aa <_strtod_l+0xb82>
 8004da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004da4:	b1bb      	cbz	r3, 8004dd6 <_strtod_l+0xae>
 8004da6:	4650      	mov	r0, sl
 8004da8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8004dac:	b01f      	add	sp, #124	@ 0x7c
 8004dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db2:	2920      	cmp	r1, #32
 8004db4:	d1d0      	bne.n	8004d58 <_strtod_l+0x30>
 8004db6:	3201      	adds	r2, #1
 8004db8:	e7c3      	b.n	8004d42 <_strtod_l+0x1a>
 8004dba:	292d      	cmp	r1, #45	@ 0x2d
 8004dbc:	d1cc      	bne.n	8004d58 <_strtod_l+0x30>
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004dc2:	1c51      	adds	r1, r2, #1
 8004dc4:	9119      	str	r1, [sp, #100]	@ 0x64
 8004dc6:	7852      	ldrb	r2, [r2, #1]
 8004dc8:	2a00      	cmp	r2, #0
 8004dca:	d1c7      	bne.n	8004d5c <_strtod_l+0x34>
 8004dcc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004dce:	9419      	str	r4, [sp, #100]	@ 0x64
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f040 8568 	bne.w	80058a6 <_strtod_l+0xb7e>
 8004dd6:	4650      	mov	r0, sl
 8004dd8:	4659      	mov	r1, fp
 8004dda:	e7e7      	b.n	8004dac <_strtod_l+0x84>
 8004ddc:	2100      	movs	r1, #0
 8004dde:	e7ef      	b.n	8004dc0 <_strtod_l+0x98>
 8004de0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004de2:	b13a      	cbz	r2, 8004df4 <_strtod_l+0xcc>
 8004de4:	2135      	movs	r1, #53	@ 0x35
 8004de6:	a81c      	add	r0, sp, #112	@ 0x70
 8004de8:	f002 ff3c 	bl	8007c64 <__copybits>
 8004dec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004dee:	9805      	ldr	r0, [sp, #20]
 8004df0:	f002 fb16 	bl	8007420 <_Bfree>
 8004df4:	3e01      	subs	r6, #1
 8004df6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004df8:	2e04      	cmp	r6, #4
 8004dfa:	d806      	bhi.n	8004e0a <_strtod_l+0xe2>
 8004dfc:	e8df f006 	tbb	[pc, r6]
 8004e00:	201d0314 	.word	0x201d0314
 8004e04:	14          	.byte	0x14
 8004e05:	00          	.byte	0x00
 8004e06:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004e0a:	05e1      	lsls	r1, r4, #23
 8004e0c:	bf48      	it	mi
 8004e0e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004e12:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004e16:	0d1b      	lsrs	r3, r3, #20
 8004e18:	051b      	lsls	r3, r3, #20
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1bd      	bne.n	8004d9a <_strtod_l+0x72>
 8004e1e:	f000 fe19 	bl	8005a54 <__errno>
 8004e22:	2322      	movs	r3, #34	@ 0x22
 8004e24:	6003      	str	r3, [r0, #0]
 8004e26:	e7b8      	b.n	8004d9a <_strtod_l+0x72>
 8004e28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004e2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004e30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004e34:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004e38:	e7e7      	b.n	8004e0a <_strtod_l+0xe2>
 8004e3a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8004fb4 <_strtod_l+0x28c>
 8004e3e:	e7e4      	b.n	8004e0a <_strtod_l+0xe2>
 8004e40:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004e44:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004e48:	e7df      	b.n	8004e0a <_strtod_l+0xe2>
 8004e4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	2b30      	cmp	r3, #48	@ 0x30
 8004e54:	d0f9      	beq.n	8004e4a <_strtod_l+0x122>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d09f      	beq.n	8004d9a <_strtod_l+0x72>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004e60:	220a      	movs	r2, #10
 8004e62:	930c      	str	r3, [sp, #48]	@ 0x30
 8004e64:	2300      	movs	r3, #0
 8004e66:	461f      	mov	r7, r3
 8004e68:	9308      	str	r3, [sp, #32]
 8004e6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e6c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004e6e:	7805      	ldrb	r5, [r0, #0]
 8004e70:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004e74:	b2d9      	uxtb	r1, r3
 8004e76:	2909      	cmp	r1, #9
 8004e78:	d928      	bls.n	8004ecc <_strtod_l+0x1a4>
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	494e      	ldr	r1, [pc, #312]	@ (8004fb8 <_strtod_l+0x290>)
 8004e7e:	f000 fdcb 	bl	8005a18 <strncmp>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d032      	beq.n	8004eec <_strtod_l+0x1c4>
 8004e86:	2000      	movs	r0, #0
 8004e88:	462a      	mov	r2, r5
 8004e8a:	4681      	mov	r9, r0
 8004e8c:	463d      	mov	r5, r7
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2a65      	cmp	r2, #101	@ 0x65
 8004e92:	d001      	beq.n	8004e98 <_strtod_l+0x170>
 8004e94:	2a45      	cmp	r2, #69	@ 0x45
 8004e96:	d114      	bne.n	8004ec2 <_strtod_l+0x19a>
 8004e98:	b91d      	cbnz	r5, 8004ea2 <_strtod_l+0x17a>
 8004e9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e9c:	4302      	orrs	r2, r0
 8004e9e:	d095      	beq.n	8004dcc <_strtod_l+0xa4>
 8004ea0:	2500      	movs	r5, #0
 8004ea2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004ea4:	1c62      	adds	r2, r4, #1
 8004ea6:	9219      	str	r2, [sp, #100]	@ 0x64
 8004ea8:	7862      	ldrb	r2, [r4, #1]
 8004eaa:	2a2b      	cmp	r2, #43	@ 0x2b
 8004eac:	d077      	beq.n	8004f9e <_strtod_l+0x276>
 8004eae:	2a2d      	cmp	r2, #45	@ 0x2d
 8004eb0:	d07b      	beq.n	8004faa <_strtod_l+0x282>
 8004eb2:	f04f 0c00 	mov.w	ip, #0
 8004eb6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004eba:	2909      	cmp	r1, #9
 8004ebc:	f240 8082 	bls.w	8004fc4 <_strtod_l+0x29c>
 8004ec0:	9419      	str	r4, [sp, #100]	@ 0x64
 8004ec2:	f04f 0800 	mov.w	r8, #0
 8004ec6:	e0a2      	b.n	800500e <_strtod_l+0x2e6>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e7c7      	b.n	8004e5c <_strtod_l+0x134>
 8004ecc:	2f08      	cmp	r7, #8
 8004ece:	bfd5      	itete	le
 8004ed0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004ed2:	9908      	ldrgt	r1, [sp, #32]
 8004ed4:	fb02 3301 	mlale	r3, r2, r1, r3
 8004ed8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004edc:	f100 0001 	add.w	r0, r0, #1
 8004ee0:	bfd4      	ite	le
 8004ee2:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004ee4:	9308      	strgt	r3, [sp, #32]
 8004ee6:	3701      	adds	r7, #1
 8004ee8:	9019      	str	r0, [sp, #100]	@ 0x64
 8004eea:	e7bf      	b.n	8004e6c <_strtod_l+0x144>
 8004eec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	9219      	str	r2, [sp, #100]	@ 0x64
 8004ef2:	785a      	ldrb	r2, [r3, #1]
 8004ef4:	b37f      	cbz	r7, 8004f56 <_strtod_l+0x22e>
 8004ef6:	4681      	mov	r9, r0
 8004ef8:	463d      	mov	r5, r7
 8004efa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004efe:	2b09      	cmp	r3, #9
 8004f00:	d912      	bls.n	8004f28 <_strtod_l+0x200>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e7c4      	b.n	8004e90 <_strtod_l+0x168>
 8004f06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f08:	3001      	adds	r0, #1
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8004f0e:	785a      	ldrb	r2, [r3, #1]
 8004f10:	2a30      	cmp	r2, #48	@ 0x30
 8004f12:	d0f8      	beq.n	8004f06 <_strtod_l+0x1de>
 8004f14:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	f200 84cb 	bhi.w	80058b4 <_strtod_l+0xb8c>
 8004f1e:	4681      	mov	r9, r0
 8004f20:	2000      	movs	r0, #0
 8004f22:	4605      	mov	r5, r0
 8004f24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f26:	930c      	str	r3, [sp, #48]	@ 0x30
 8004f28:	3a30      	subs	r2, #48	@ 0x30
 8004f2a:	f100 0301 	add.w	r3, r0, #1
 8004f2e:	d02a      	beq.n	8004f86 <_strtod_l+0x25e>
 8004f30:	4499      	add	r9, r3
 8004f32:	210a      	movs	r1, #10
 8004f34:	462b      	mov	r3, r5
 8004f36:	eb00 0c05 	add.w	ip, r0, r5
 8004f3a:	4563      	cmp	r3, ip
 8004f3c:	d10d      	bne.n	8004f5a <_strtod_l+0x232>
 8004f3e:	1c69      	adds	r1, r5, #1
 8004f40:	4401      	add	r1, r0
 8004f42:	4428      	add	r0, r5
 8004f44:	2808      	cmp	r0, #8
 8004f46:	dc16      	bgt.n	8004f76 <_strtod_l+0x24e>
 8004f48:	230a      	movs	r3, #10
 8004f4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004f4c:	fb03 2300 	mla	r3, r3, r0, r2
 8004f50:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f52:	2300      	movs	r3, #0
 8004f54:	e018      	b.n	8004f88 <_strtod_l+0x260>
 8004f56:	4638      	mov	r0, r7
 8004f58:	e7da      	b.n	8004f10 <_strtod_l+0x1e8>
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	f103 0301 	add.w	r3, r3, #1
 8004f60:	dc03      	bgt.n	8004f6a <_strtod_l+0x242>
 8004f62:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004f64:	434e      	muls	r6, r1
 8004f66:	960a      	str	r6, [sp, #40]	@ 0x28
 8004f68:	e7e7      	b.n	8004f3a <_strtod_l+0x212>
 8004f6a:	2b10      	cmp	r3, #16
 8004f6c:	bfde      	ittt	le
 8004f6e:	9e08      	ldrle	r6, [sp, #32]
 8004f70:	434e      	mulle	r6, r1
 8004f72:	9608      	strle	r6, [sp, #32]
 8004f74:	e7e1      	b.n	8004f3a <_strtod_l+0x212>
 8004f76:	280f      	cmp	r0, #15
 8004f78:	dceb      	bgt.n	8004f52 <_strtod_l+0x22a>
 8004f7a:	230a      	movs	r3, #10
 8004f7c:	9808      	ldr	r0, [sp, #32]
 8004f7e:	fb03 2300 	mla	r3, r3, r0, r2
 8004f82:	9308      	str	r3, [sp, #32]
 8004f84:	e7e5      	b.n	8004f52 <_strtod_l+0x22a>
 8004f86:	4629      	mov	r1, r5
 8004f88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004f8a:	460d      	mov	r5, r1
 8004f8c:	1c50      	adds	r0, r2, #1
 8004f8e:	9019      	str	r0, [sp, #100]	@ 0x64
 8004f90:	7852      	ldrb	r2, [r2, #1]
 8004f92:	4618      	mov	r0, r3
 8004f94:	e7b1      	b.n	8004efa <_strtod_l+0x1d2>
 8004f96:	f04f 0900 	mov.w	r9, #0
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e77d      	b.n	8004e9a <_strtod_l+0x172>
 8004f9e:	f04f 0c00 	mov.w	ip, #0
 8004fa2:	1ca2      	adds	r2, r4, #2
 8004fa4:	9219      	str	r2, [sp, #100]	@ 0x64
 8004fa6:	78a2      	ldrb	r2, [r4, #2]
 8004fa8:	e785      	b.n	8004eb6 <_strtod_l+0x18e>
 8004faa:	f04f 0c01 	mov.w	ip, #1
 8004fae:	e7f8      	b.n	8004fa2 <_strtod_l+0x27a>
 8004fb0:	0800860c 	.word	0x0800860c
 8004fb4:	7ff00000 	.word	0x7ff00000
 8004fb8:	080085f3 	.word	0x080085f3
 8004fbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004fbe:	1c51      	adds	r1, r2, #1
 8004fc0:	9119      	str	r1, [sp, #100]	@ 0x64
 8004fc2:	7852      	ldrb	r2, [r2, #1]
 8004fc4:	2a30      	cmp	r2, #48	@ 0x30
 8004fc6:	d0f9      	beq.n	8004fbc <_strtod_l+0x294>
 8004fc8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004fcc:	2908      	cmp	r1, #8
 8004fce:	f63f af78 	bhi.w	8004ec2 <_strtod_l+0x19a>
 8004fd2:	f04f 080a 	mov.w	r8, #10
 8004fd6:	3a30      	subs	r2, #48	@ 0x30
 8004fd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8004fda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004fdc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004fde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004fe0:	1c56      	adds	r6, r2, #1
 8004fe2:	9619      	str	r6, [sp, #100]	@ 0x64
 8004fe4:	7852      	ldrb	r2, [r2, #1]
 8004fe6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004fea:	f1be 0f09 	cmp.w	lr, #9
 8004fee:	d939      	bls.n	8005064 <_strtod_l+0x33c>
 8004ff0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004ff2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004ff6:	1a76      	subs	r6, r6, r1
 8004ff8:	2e08      	cmp	r6, #8
 8004ffa:	dc03      	bgt.n	8005004 <_strtod_l+0x2dc>
 8004ffc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004ffe:	4588      	cmp	r8, r1
 8005000:	bfa8      	it	ge
 8005002:	4688      	movge	r8, r1
 8005004:	f1bc 0f00 	cmp.w	ip, #0
 8005008:	d001      	beq.n	800500e <_strtod_l+0x2e6>
 800500a:	f1c8 0800 	rsb	r8, r8, #0
 800500e:	2d00      	cmp	r5, #0
 8005010:	d14e      	bne.n	80050b0 <_strtod_l+0x388>
 8005012:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005014:	4308      	orrs	r0, r1
 8005016:	f47f aec0 	bne.w	8004d9a <_strtod_l+0x72>
 800501a:	2b00      	cmp	r3, #0
 800501c:	f47f aed6 	bne.w	8004dcc <_strtod_l+0xa4>
 8005020:	2a69      	cmp	r2, #105	@ 0x69
 8005022:	d028      	beq.n	8005076 <_strtod_l+0x34e>
 8005024:	dc25      	bgt.n	8005072 <_strtod_l+0x34a>
 8005026:	2a49      	cmp	r2, #73	@ 0x49
 8005028:	d025      	beq.n	8005076 <_strtod_l+0x34e>
 800502a:	2a4e      	cmp	r2, #78	@ 0x4e
 800502c:	f47f aece 	bne.w	8004dcc <_strtod_l+0xa4>
 8005030:	499a      	ldr	r1, [pc, #616]	@ (800529c <_strtod_l+0x574>)
 8005032:	a819      	add	r0, sp, #100	@ 0x64
 8005034:	f001 fe3e 	bl	8006cb4 <__match>
 8005038:	2800      	cmp	r0, #0
 800503a:	f43f aec7 	beq.w	8004dcc <_strtod_l+0xa4>
 800503e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b28      	cmp	r3, #40	@ 0x28
 8005044:	d12e      	bne.n	80050a4 <_strtod_l+0x37c>
 8005046:	4996      	ldr	r1, [pc, #600]	@ (80052a0 <_strtod_l+0x578>)
 8005048:	aa1c      	add	r2, sp, #112	@ 0x70
 800504a:	a819      	add	r0, sp, #100	@ 0x64
 800504c:	f001 fe46 	bl	8006cdc <__hexnan>
 8005050:	2805      	cmp	r0, #5
 8005052:	d127      	bne.n	80050a4 <_strtod_l+0x37c>
 8005054:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005056:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800505a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800505e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005062:	e69a      	b.n	8004d9a <_strtod_l+0x72>
 8005064:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005066:	fb08 2101 	mla	r1, r8, r1, r2
 800506a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800506e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005070:	e7b5      	b.n	8004fde <_strtod_l+0x2b6>
 8005072:	2a6e      	cmp	r2, #110	@ 0x6e
 8005074:	e7da      	b.n	800502c <_strtod_l+0x304>
 8005076:	498b      	ldr	r1, [pc, #556]	@ (80052a4 <_strtod_l+0x57c>)
 8005078:	a819      	add	r0, sp, #100	@ 0x64
 800507a:	f001 fe1b 	bl	8006cb4 <__match>
 800507e:	2800      	cmp	r0, #0
 8005080:	f43f aea4 	beq.w	8004dcc <_strtod_l+0xa4>
 8005084:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005086:	4988      	ldr	r1, [pc, #544]	@ (80052a8 <_strtod_l+0x580>)
 8005088:	3b01      	subs	r3, #1
 800508a:	a819      	add	r0, sp, #100	@ 0x64
 800508c:	9319      	str	r3, [sp, #100]	@ 0x64
 800508e:	f001 fe11 	bl	8006cb4 <__match>
 8005092:	b910      	cbnz	r0, 800509a <_strtod_l+0x372>
 8005094:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005096:	3301      	adds	r3, #1
 8005098:	9319      	str	r3, [sp, #100]	@ 0x64
 800509a:	f04f 0a00 	mov.w	sl, #0
 800509e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80052ac <_strtod_l+0x584>
 80050a2:	e67a      	b.n	8004d9a <_strtod_l+0x72>
 80050a4:	4882      	ldr	r0, [pc, #520]	@ (80052b0 <_strtod_l+0x588>)
 80050a6:	f000 fd1f 	bl	8005ae8 <nan>
 80050aa:	4682      	mov	sl, r0
 80050ac:	468b      	mov	fp, r1
 80050ae:	e674      	b.n	8004d9a <_strtod_l+0x72>
 80050b0:	eba8 0309 	sub.w	r3, r8, r9
 80050b4:	2f00      	cmp	r7, #0
 80050b6:	bf08      	it	eq
 80050b8:	462f      	moveq	r7, r5
 80050ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80050bc:	2d10      	cmp	r5, #16
 80050be:	462c      	mov	r4, r5
 80050c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80050c2:	bfa8      	it	ge
 80050c4:	2410      	movge	r4, #16
 80050c6:	f7fb fa41 	bl	800054c <__aeabi_ui2d>
 80050ca:	2d09      	cmp	r5, #9
 80050cc:	4682      	mov	sl, r0
 80050ce:	468b      	mov	fp, r1
 80050d0:	dc11      	bgt.n	80050f6 <_strtod_l+0x3ce>
 80050d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f43f ae60 	beq.w	8004d9a <_strtod_l+0x72>
 80050da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050dc:	dd76      	ble.n	80051cc <_strtod_l+0x4a4>
 80050de:	2b16      	cmp	r3, #22
 80050e0:	dc5d      	bgt.n	800519e <_strtod_l+0x476>
 80050e2:	4974      	ldr	r1, [pc, #464]	@ (80052b4 <_strtod_l+0x58c>)
 80050e4:	4652      	mov	r2, sl
 80050e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050ea:	465b      	mov	r3, fp
 80050ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050f0:	f7fb faa6 	bl	8000640 <__aeabi_dmul>
 80050f4:	e7d9      	b.n	80050aa <_strtod_l+0x382>
 80050f6:	4b6f      	ldr	r3, [pc, #444]	@ (80052b4 <_strtod_l+0x58c>)
 80050f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80050fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005100:	f7fb fa9e 	bl	8000640 <__aeabi_dmul>
 8005104:	4682      	mov	sl, r0
 8005106:	9808      	ldr	r0, [sp, #32]
 8005108:	468b      	mov	fp, r1
 800510a:	f7fb fa1f 	bl	800054c <__aeabi_ui2d>
 800510e:	4602      	mov	r2, r0
 8005110:	460b      	mov	r3, r1
 8005112:	4650      	mov	r0, sl
 8005114:	4659      	mov	r1, fp
 8005116:	f7fb f8dd 	bl	80002d4 <__adddf3>
 800511a:	2d0f      	cmp	r5, #15
 800511c:	4682      	mov	sl, r0
 800511e:	468b      	mov	fp, r1
 8005120:	ddd7      	ble.n	80050d2 <_strtod_l+0x3aa>
 8005122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005124:	1b2c      	subs	r4, r5, r4
 8005126:	441c      	add	r4, r3
 8005128:	2c00      	cmp	r4, #0
 800512a:	f340 8096 	ble.w	800525a <_strtod_l+0x532>
 800512e:	f014 030f 	ands.w	r3, r4, #15
 8005132:	d00a      	beq.n	800514a <_strtod_l+0x422>
 8005134:	495f      	ldr	r1, [pc, #380]	@ (80052b4 <_strtod_l+0x58c>)
 8005136:	4652      	mov	r2, sl
 8005138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800513c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005140:	465b      	mov	r3, fp
 8005142:	f7fb fa7d 	bl	8000640 <__aeabi_dmul>
 8005146:	4682      	mov	sl, r0
 8005148:	468b      	mov	fp, r1
 800514a:	f034 040f 	bics.w	r4, r4, #15
 800514e:	d073      	beq.n	8005238 <_strtod_l+0x510>
 8005150:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005154:	dd48      	ble.n	80051e8 <_strtod_l+0x4c0>
 8005156:	2400      	movs	r4, #0
 8005158:	46a0      	mov	r8, r4
 800515a:	46a1      	mov	r9, r4
 800515c:	940a      	str	r4, [sp, #40]	@ 0x28
 800515e:	2322      	movs	r3, #34	@ 0x22
 8005160:	f04f 0a00 	mov.w	sl, #0
 8005164:	9a05      	ldr	r2, [sp, #20]
 8005166:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80052ac <_strtod_l+0x584>
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800516e:	2b00      	cmp	r3, #0
 8005170:	f43f ae13 	beq.w	8004d9a <_strtod_l+0x72>
 8005174:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005176:	9805      	ldr	r0, [sp, #20]
 8005178:	f002 f952 	bl	8007420 <_Bfree>
 800517c:	4649      	mov	r1, r9
 800517e:	9805      	ldr	r0, [sp, #20]
 8005180:	f002 f94e 	bl	8007420 <_Bfree>
 8005184:	4641      	mov	r1, r8
 8005186:	9805      	ldr	r0, [sp, #20]
 8005188:	f002 f94a 	bl	8007420 <_Bfree>
 800518c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800518e:	9805      	ldr	r0, [sp, #20]
 8005190:	f002 f946 	bl	8007420 <_Bfree>
 8005194:	4621      	mov	r1, r4
 8005196:	9805      	ldr	r0, [sp, #20]
 8005198:	f002 f942 	bl	8007420 <_Bfree>
 800519c:	e5fd      	b.n	8004d9a <_strtod_l+0x72>
 800519e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80051a4:	4293      	cmp	r3, r2
 80051a6:	dbbc      	blt.n	8005122 <_strtod_l+0x3fa>
 80051a8:	4c42      	ldr	r4, [pc, #264]	@ (80052b4 <_strtod_l+0x58c>)
 80051aa:	f1c5 050f 	rsb	r5, r5, #15
 80051ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80051b2:	4652      	mov	r2, sl
 80051b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051b8:	465b      	mov	r3, fp
 80051ba:	f7fb fa41 	bl	8000640 <__aeabi_dmul>
 80051be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051c0:	1b5d      	subs	r5, r3, r5
 80051c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80051c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80051ca:	e791      	b.n	80050f0 <_strtod_l+0x3c8>
 80051cc:	3316      	adds	r3, #22
 80051ce:	dba8      	blt.n	8005122 <_strtod_l+0x3fa>
 80051d0:	4b38      	ldr	r3, [pc, #224]	@ (80052b4 <_strtod_l+0x58c>)
 80051d2:	eba9 0808 	sub.w	r8, r9, r8
 80051d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80051da:	4650      	mov	r0, sl
 80051dc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80051e0:	4659      	mov	r1, fp
 80051e2:	f7fb fb57 	bl	8000894 <__aeabi_ddiv>
 80051e6:	e760      	b.n	80050aa <_strtod_l+0x382>
 80051e8:	4b33      	ldr	r3, [pc, #204]	@ (80052b8 <_strtod_l+0x590>)
 80051ea:	4650      	mov	r0, sl
 80051ec:	9308      	str	r3, [sp, #32]
 80051ee:	2300      	movs	r3, #0
 80051f0:	4659      	mov	r1, fp
 80051f2:	461e      	mov	r6, r3
 80051f4:	1124      	asrs	r4, r4, #4
 80051f6:	2c01      	cmp	r4, #1
 80051f8:	dc21      	bgt.n	800523e <_strtod_l+0x516>
 80051fa:	b10b      	cbz	r3, 8005200 <_strtod_l+0x4d8>
 80051fc:	4682      	mov	sl, r0
 80051fe:	468b      	mov	fp, r1
 8005200:	492d      	ldr	r1, [pc, #180]	@ (80052b8 <_strtod_l+0x590>)
 8005202:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005206:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800520a:	4652      	mov	r2, sl
 800520c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005210:	465b      	mov	r3, fp
 8005212:	f7fb fa15 	bl	8000640 <__aeabi_dmul>
 8005216:	4b25      	ldr	r3, [pc, #148]	@ (80052ac <_strtod_l+0x584>)
 8005218:	460a      	mov	r2, r1
 800521a:	400b      	ands	r3, r1
 800521c:	4927      	ldr	r1, [pc, #156]	@ (80052bc <_strtod_l+0x594>)
 800521e:	4682      	mov	sl, r0
 8005220:	428b      	cmp	r3, r1
 8005222:	d898      	bhi.n	8005156 <_strtod_l+0x42e>
 8005224:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005228:	428b      	cmp	r3, r1
 800522a:	bf86      	itte	hi
 800522c:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8005230:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80052c0 <_strtod_l+0x598>
 8005234:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005238:	2300      	movs	r3, #0
 800523a:	9308      	str	r3, [sp, #32]
 800523c:	e07a      	b.n	8005334 <_strtod_l+0x60c>
 800523e:	07e2      	lsls	r2, r4, #31
 8005240:	d505      	bpl.n	800524e <_strtod_l+0x526>
 8005242:	9b08      	ldr	r3, [sp, #32]
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f7fb f9fa 	bl	8000640 <__aeabi_dmul>
 800524c:	2301      	movs	r3, #1
 800524e:	9a08      	ldr	r2, [sp, #32]
 8005250:	3601      	adds	r6, #1
 8005252:	3208      	adds	r2, #8
 8005254:	1064      	asrs	r4, r4, #1
 8005256:	9208      	str	r2, [sp, #32]
 8005258:	e7cd      	b.n	80051f6 <_strtod_l+0x4ce>
 800525a:	d0ed      	beq.n	8005238 <_strtod_l+0x510>
 800525c:	4264      	negs	r4, r4
 800525e:	f014 020f 	ands.w	r2, r4, #15
 8005262:	d00a      	beq.n	800527a <_strtod_l+0x552>
 8005264:	4b13      	ldr	r3, [pc, #76]	@ (80052b4 <_strtod_l+0x58c>)
 8005266:	4650      	mov	r0, sl
 8005268:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800526c:	4659      	mov	r1, fp
 800526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005272:	f7fb fb0f 	bl	8000894 <__aeabi_ddiv>
 8005276:	4682      	mov	sl, r0
 8005278:	468b      	mov	fp, r1
 800527a:	1124      	asrs	r4, r4, #4
 800527c:	d0dc      	beq.n	8005238 <_strtod_l+0x510>
 800527e:	2c1f      	cmp	r4, #31
 8005280:	dd20      	ble.n	80052c4 <_strtod_l+0x59c>
 8005282:	2400      	movs	r4, #0
 8005284:	46a0      	mov	r8, r4
 8005286:	46a1      	mov	r9, r4
 8005288:	940a      	str	r4, [sp, #40]	@ 0x28
 800528a:	2322      	movs	r3, #34	@ 0x22
 800528c:	9a05      	ldr	r2, [sp, #20]
 800528e:	f04f 0a00 	mov.w	sl, #0
 8005292:	f04f 0b00 	mov.w	fp, #0
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	e768      	b.n	800516c <_strtod_l+0x444>
 800529a:	bf00      	nop
 800529c:	080085c7 	.word	0x080085c7
 80052a0:	080085f8 	.word	0x080085f8
 80052a4:	080085bf 	.word	0x080085bf
 80052a8:	08008754 	.word	0x08008754
 80052ac:	7ff00000 	.word	0x7ff00000
 80052b0:	080089e3 	.word	0x080089e3
 80052b4:	080088e0 	.word	0x080088e0
 80052b8:	080088b8 	.word	0x080088b8
 80052bc:	7ca00000 	.word	0x7ca00000
 80052c0:	7fefffff 	.word	0x7fefffff
 80052c4:	f014 0310 	ands.w	r3, r4, #16
 80052c8:	bf18      	it	ne
 80052ca:	236a      	movne	r3, #106	@ 0x6a
 80052cc:	4650      	mov	r0, sl
 80052ce:	9308      	str	r3, [sp, #32]
 80052d0:	4659      	mov	r1, fp
 80052d2:	2300      	movs	r3, #0
 80052d4:	4ea9      	ldr	r6, [pc, #676]	@ (800557c <_strtod_l+0x854>)
 80052d6:	07e2      	lsls	r2, r4, #31
 80052d8:	d504      	bpl.n	80052e4 <_strtod_l+0x5bc>
 80052da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80052de:	f7fb f9af 	bl	8000640 <__aeabi_dmul>
 80052e2:	2301      	movs	r3, #1
 80052e4:	1064      	asrs	r4, r4, #1
 80052e6:	f106 0608 	add.w	r6, r6, #8
 80052ea:	d1f4      	bne.n	80052d6 <_strtod_l+0x5ae>
 80052ec:	b10b      	cbz	r3, 80052f2 <_strtod_l+0x5ca>
 80052ee:	4682      	mov	sl, r0
 80052f0:	468b      	mov	fp, r1
 80052f2:	9b08      	ldr	r3, [sp, #32]
 80052f4:	b1b3      	cbz	r3, 8005324 <_strtod_l+0x5fc>
 80052f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80052fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80052fe:	2b00      	cmp	r3, #0
 8005300:	4659      	mov	r1, fp
 8005302:	dd0f      	ble.n	8005324 <_strtod_l+0x5fc>
 8005304:	2b1f      	cmp	r3, #31
 8005306:	dd57      	ble.n	80053b8 <_strtod_l+0x690>
 8005308:	2b34      	cmp	r3, #52	@ 0x34
 800530a:	bfd8      	it	le
 800530c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8005310:	f04f 0a00 	mov.w	sl, #0
 8005314:	bfcf      	iteee	gt
 8005316:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800531a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800531e:	4093      	lslle	r3, r2
 8005320:	ea03 0b01 	andle.w	fp, r3, r1
 8005324:	2200      	movs	r2, #0
 8005326:	2300      	movs	r3, #0
 8005328:	4650      	mov	r0, sl
 800532a:	4659      	mov	r1, fp
 800532c:	f7fb fbf0 	bl	8000b10 <__aeabi_dcmpeq>
 8005330:	2800      	cmp	r0, #0
 8005332:	d1a6      	bne.n	8005282 <_strtod_l+0x55a>
 8005334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005336:	463a      	mov	r2, r7
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800533c:	462b      	mov	r3, r5
 800533e:	9805      	ldr	r0, [sp, #20]
 8005340:	f002 f8d6 	bl	80074f0 <__s2b>
 8005344:	900a      	str	r0, [sp, #40]	@ 0x28
 8005346:	2800      	cmp	r0, #0
 8005348:	f43f af05 	beq.w	8005156 <_strtod_l+0x42e>
 800534c:	2400      	movs	r4, #0
 800534e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005350:	eba9 0308 	sub.w	r3, r9, r8
 8005354:	2a00      	cmp	r2, #0
 8005356:	bfa8      	it	ge
 8005358:	2300      	movge	r3, #0
 800535a:	46a0      	mov	r8, r4
 800535c:	9312      	str	r3, [sp, #72]	@ 0x48
 800535e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005362:	9316      	str	r3, [sp, #88]	@ 0x58
 8005364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005366:	9805      	ldr	r0, [sp, #20]
 8005368:	6859      	ldr	r1, [r3, #4]
 800536a:	f002 f819 	bl	80073a0 <_Balloc>
 800536e:	4681      	mov	r9, r0
 8005370:	2800      	cmp	r0, #0
 8005372:	f43f aef4 	beq.w	800515e <_strtod_l+0x436>
 8005376:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005378:	300c      	adds	r0, #12
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	f103 010c 	add.w	r1, r3, #12
 8005380:	3202      	adds	r2, #2
 8005382:	0092      	lsls	r2, r2, #2
 8005384:	f000 fba1 	bl	8005aca <memcpy>
 8005388:	ab1c      	add	r3, sp, #112	@ 0x70
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	4652      	mov	r2, sl
 8005392:	465b      	mov	r3, fp
 8005394:	9805      	ldr	r0, [sp, #20]
 8005396:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800539a:	f002 fbdb 	bl	8007b54 <__d2b>
 800539e:	901a      	str	r0, [sp, #104]	@ 0x68
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f43f aedc 	beq.w	800515e <_strtod_l+0x436>
 80053a6:	2101      	movs	r1, #1
 80053a8:	9805      	ldr	r0, [sp, #20]
 80053aa:	f002 f937 	bl	800761c <__i2b>
 80053ae:	4680      	mov	r8, r0
 80053b0:	b948      	cbnz	r0, 80053c6 <_strtod_l+0x69e>
 80053b2:	f04f 0800 	mov.w	r8, #0
 80053b6:	e6d2      	b.n	800515e <_strtod_l+0x436>
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	ea03 0a0a 	and.w	sl, r3, sl
 80053c4:	e7ae      	b.n	8005324 <_strtod_l+0x5fc>
 80053c6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80053c8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80053ca:	2d00      	cmp	r5, #0
 80053cc:	bfab      	itete	ge
 80053ce:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80053d0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80053d2:	18ef      	addge	r7, r5, r3
 80053d4:	1b5e      	sublt	r6, r3, r5
 80053d6:	9b08      	ldr	r3, [sp, #32]
 80053d8:	bfa8      	it	ge
 80053da:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80053dc:	eba5 0503 	sub.w	r5, r5, r3
 80053e0:	4415      	add	r5, r2
 80053e2:	4b67      	ldr	r3, [pc, #412]	@ (8005580 <_strtod_l+0x858>)
 80053e4:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 80053e8:	bfb8      	it	lt
 80053ea:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80053ec:	429d      	cmp	r5, r3
 80053ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80053f2:	da50      	bge.n	8005496 <_strtod_l+0x76e>
 80053f4:	1b5b      	subs	r3, r3, r5
 80053f6:	2b1f      	cmp	r3, #31
 80053f8:	f04f 0101 	mov.w	r1, #1
 80053fc:	eba2 0203 	sub.w	r2, r2, r3
 8005400:	dc3d      	bgt.n	800547e <_strtod_l+0x756>
 8005402:	fa01 f303 	lsl.w	r3, r1, r3
 8005406:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005408:	2300      	movs	r3, #0
 800540a:	9310      	str	r3, [sp, #64]	@ 0x40
 800540c:	18bd      	adds	r5, r7, r2
 800540e:	9b08      	ldr	r3, [sp, #32]
 8005410:	42af      	cmp	r7, r5
 8005412:	4416      	add	r6, r2
 8005414:	441e      	add	r6, r3
 8005416:	463b      	mov	r3, r7
 8005418:	bfa8      	it	ge
 800541a:	462b      	movge	r3, r5
 800541c:	42b3      	cmp	r3, r6
 800541e:	bfa8      	it	ge
 8005420:	4633      	movge	r3, r6
 8005422:	2b00      	cmp	r3, #0
 8005424:	bfc2      	ittt	gt
 8005426:	1aed      	subgt	r5, r5, r3
 8005428:	1af6      	subgt	r6, r6, r3
 800542a:	1aff      	subgt	r7, r7, r3
 800542c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800542e:	2b00      	cmp	r3, #0
 8005430:	dd16      	ble.n	8005460 <_strtod_l+0x738>
 8005432:	4641      	mov	r1, r8
 8005434:	461a      	mov	r2, r3
 8005436:	9805      	ldr	r0, [sp, #20]
 8005438:	f002 f9ae 	bl	8007798 <__pow5mult>
 800543c:	4680      	mov	r8, r0
 800543e:	2800      	cmp	r0, #0
 8005440:	d0b7      	beq.n	80053b2 <_strtod_l+0x68a>
 8005442:	4601      	mov	r1, r0
 8005444:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005446:	9805      	ldr	r0, [sp, #20]
 8005448:	f002 f8fe 	bl	8007648 <__multiply>
 800544c:	900e      	str	r0, [sp, #56]	@ 0x38
 800544e:	2800      	cmp	r0, #0
 8005450:	f43f ae85 	beq.w	800515e <_strtod_l+0x436>
 8005454:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005456:	9805      	ldr	r0, [sp, #20]
 8005458:	f001 ffe2 	bl	8007420 <_Bfree>
 800545c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800545e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005460:	2d00      	cmp	r5, #0
 8005462:	dc1d      	bgt.n	80054a0 <_strtod_l+0x778>
 8005464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	dd23      	ble.n	80054b2 <_strtod_l+0x78a>
 800546a:	4649      	mov	r1, r9
 800546c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800546e:	9805      	ldr	r0, [sp, #20]
 8005470:	f002 f992 	bl	8007798 <__pow5mult>
 8005474:	4681      	mov	r9, r0
 8005476:	b9e0      	cbnz	r0, 80054b2 <_strtod_l+0x78a>
 8005478:	f04f 0900 	mov.w	r9, #0
 800547c:	e66f      	b.n	800515e <_strtod_l+0x436>
 800547e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005482:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005486:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800548a:	35e2      	adds	r5, #226	@ 0xe2
 800548c:	fa01 f305 	lsl.w	r3, r1, r5
 8005490:	9310      	str	r3, [sp, #64]	@ 0x40
 8005492:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005494:	e7ba      	b.n	800540c <_strtod_l+0x6e4>
 8005496:	2300      	movs	r3, #0
 8005498:	9310      	str	r3, [sp, #64]	@ 0x40
 800549a:	2301      	movs	r3, #1
 800549c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800549e:	e7b5      	b.n	800540c <_strtod_l+0x6e4>
 80054a0:	462a      	mov	r2, r5
 80054a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80054a4:	9805      	ldr	r0, [sp, #20]
 80054a6:	f002 f9d1 	bl	800784c <__lshift>
 80054aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80054ac:	2800      	cmp	r0, #0
 80054ae:	d1d9      	bne.n	8005464 <_strtod_l+0x73c>
 80054b0:	e655      	b.n	800515e <_strtod_l+0x436>
 80054b2:	2e00      	cmp	r6, #0
 80054b4:	dd07      	ble.n	80054c6 <_strtod_l+0x79e>
 80054b6:	4649      	mov	r1, r9
 80054b8:	4632      	mov	r2, r6
 80054ba:	9805      	ldr	r0, [sp, #20]
 80054bc:	f002 f9c6 	bl	800784c <__lshift>
 80054c0:	4681      	mov	r9, r0
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d0d8      	beq.n	8005478 <_strtod_l+0x750>
 80054c6:	2f00      	cmp	r7, #0
 80054c8:	dd08      	ble.n	80054dc <_strtod_l+0x7b4>
 80054ca:	4641      	mov	r1, r8
 80054cc:	463a      	mov	r2, r7
 80054ce:	9805      	ldr	r0, [sp, #20]
 80054d0:	f002 f9bc 	bl	800784c <__lshift>
 80054d4:	4680      	mov	r8, r0
 80054d6:	2800      	cmp	r0, #0
 80054d8:	f43f ae41 	beq.w	800515e <_strtod_l+0x436>
 80054dc:	464a      	mov	r2, r9
 80054de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80054e0:	9805      	ldr	r0, [sp, #20]
 80054e2:	f002 fa3b 	bl	800795c <__mdiff>
 80054e6:	4604      	mov	r4, r0
 80054e8:	2800      	cmp	r0, #0
 80054ea:	f43f ae38 	beq.w	800515e <_strtod_l+0x436>
 80054ee:	68c3      	ldr	r3, [r0, #12]
 80054f0:	4641      	mov	r1, r8
 80054f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80054f4:	2300      	movs	r3, #0
 80054f6:	60c3      	str	r3, [r0, #12]
 80054f8:	f002 fa14 	bl	8007924 <__mcmp>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	da45      	bge.n	800558c <_strtod_l+0x864>
 8005500:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005502:	ea53 030a 	orrs.w	r3, r3, sl
 8005506:	d16b      	bne.n	80055e0 <_strtod_l+0x8b8>
 8005508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800550c:	2b00      	cmp	r3, #0
 800550e:	d167      	bne.n	80055e0 <_strtod_l+0x8b8>
 8005510:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005514:	0d1b      	lsrs	r3, r3, #20
 8005516:	051b      	lsls	r3, r3, #20
 8005518:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800551c:	d960      	bls.n	80055e0 <_strtod_l+0x8b8>
 800551e:	6963      	ldr	r3, [r4, #20]
 8005520:	b913      	cbnz	r3, 8005528 <_strtod_l+0x800>
 8005522:	6923      	ldr	r3, [r4, #16]
 8005524:	2b01      	cmp	r3, #1
 8005526:	dd5b      	ble.n	80055e0 <_strtod_l+0x8b8>
 8005528:	4621      	mov	r1, r4
 800552a:	2201      	movs	r2, #1
 800552c:	9805      	ldr	r0, [sp, #20]
 800552e:	f002 f98d 	bl	800784c <__lshift>
 8005532:	4641      	mov	r1, r8
 8005534:	4604      	mov	r4, r0
 8005536:	f002 f9f5 	bl	8007924 <__mcmp>
 800553a:	2800      	cmp	r0, #0
 800553c:	dd50      	ble.n	80055e0 <_strtod_l+0x8b8>
 800553e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005542:	9a08      	ldr	r2, [sp, #32]
 8005544:	0d1b      	lsrs	r3, r3, #20
 8005546:	051b      	lsls	r3, r3, #20
 8005548:	2a00      	cmp	r2, #0
 800554a:	d06a      	beq.n	8005622 <_strtod_l+0x8fa>
 800554c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005550:	d867      	bhi.n	8005622 <_strtod_l+0x8fa>
 8005552:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005556:	f67f ae98 	bls.w	800528a <_strtod_l+0x562>
 800555a:	4650      	mov	r0, sl
 800555c:	4659      	mov	r1, fp
 800555e:	4b09      	ldr	r3, [pc, #36]	@ (8005584 <_strtod_l+0x85c>)
 8005560:	2200      	movs	r2, #0
 8005562:	f7fb f86d 	bl	8000640 <__aeabi_dmul>
 8005566:	4b08      	ldr	r3, [pc, #32]	@ (8005588 <_strtod_l+0x860>)
 8005568:	4682      	mov	sl, r0
 800556a:	400b      	ands	r3, r1
 800556c:	468b      	mov	fp, r1
 800556e:	2b00      	cmp	r3, #0
 8005570:	f47f ae00 	bne.w	8005174 <_strtod_l+0x44c>
 8005574:	2322      	movs	r3, #34	@ 0x22
 8005576:	9a05      	ldr	r2, [sp, #20]
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e5fb      	b.n	8005174 <_strtod_l+0x44c>
 800557c:	08008620 	.word	0x08008620
 8005580:	fffffc02 	.word	0xfffffc02
 8005584:	39500000 	.word	0x39500000
 8005588:	7ff00000 	.word	0x7ff00000
 800558c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005590:	d165      	bne.n	800565e <_strtod_l+0x936>
 8005592:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005594:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005598:	b35a      	cbz	r2, 80055f2 <_strtod_l+0x8ca>
 800559a:	4a99      	ldr	r2, [pc, #612]	@ (8005800 <_strtod_l+0xad8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d12b      	bne.n	80055f8 <_strtod_l+0x8d0>
 80055a0:	9b08      	ldr	r3, [sp, #32]
 80055a2:	4651      	mov	r1, sl
 80055a4:	b303      	cbz	r3, 80055e8 <_strtod_l+0x8c0>
 80055a6:	465a      	mov	r2, fp
 80055a8:	4b96      	ldr	r3, [pc, #600]	@ (8005804 <_strtod_l+0xadc>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80055b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80055b4:	d81b      	bhi.n	80055ee <_strtod_l+0x8c6>
 80055b6:	0d1b      	lsrs	r3, r3, #20
 80055b8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	4299      	cmp	r1, r3
 80055c2:	d119      	bne.n	80055f8 <_strtod_l+0x8d0>
 80055c4:	4b90      	ldr	r3, [pc, #576]	@ (8005808 <_strtod_l+0xae0>)
 80055c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d102      	bne.n	80055d2 <_strtod_l+0x8aa>
 80055cc:	3101      	adds	r1, #1
 80055ce:	f43f adc6 	beq.w	800515e <_strtod_l+0x436>
 80055d2:	f04f 0a00 	mov.w	sl, #0
 80055d6:	4b8b      	ldr	r3, [pc, #556]	@ (8005804 <_strtod_l+0xadc>)
 80055d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80055da:	401a      	ands	r2, r3
 80055dc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80055e0:	9b08      	ldr	r3, [sp, #32]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1b9      	bne.n	800555a <_strtod_l+0x832>
 80055e6:	e5c5      	b.n	8005174 <_strtod_l+0x44c>
 80055e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055ec:	e7e8      	b.n	80055c0 <_strtod_l+0x898>
 80055ee:	4613      	mov	r3, r2
 80055f0:	e7e6      	b.n	80055c0 <_strtod_l+0x898>
 80055f2:	ea53 030a 	orrs.w	r3, r3, sl
 80055f6:	d0a2      	beq.n	800553e <_strtod_l+0x816>
 80055f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80055fa:	b1db      	cbz	r3, 8005634 <_strtod_l+0x90c>
 80055fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80055fe:	4213      	tst	r3, r2
 8005600:	d0ee      	beq.n	80055e0 <_strtod_l+0x8b8>
 8005602:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005604:	4650      	mov	r0, sl
 8005606:	4659      	mov	r1, fp
 8005608:	9a08      	ldr	r2, [sp, #32]
 800560a:	b1bb      	cbz	r3, 800563c <_strtod_l+0x914>
 800560c:	f7ff fb68 	bl	8004ce0 <sulp>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005618:	f7fa fe5c 	bl	80002d4 <__adddf3>
 800561c:	4682      	mov	sl, r0
 800561e:	468b      	mov	fp, r1
 8005620:	e7de      	b.n	80055e0 <_strtod_l+0x8b8>
 8005622:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005626:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800562a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800562e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005632:	e7d5      	b.n	80055e0 <_strtod_l+0x8b8>
 8005634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005636:	ea13 0f0a 	tst.w	r3, sl
 800563a:	e7e1      	b.n	8005600 <_strtod_l+0x8d8>
 800563c:	f7ff fb50 	bl	8004ce0 <sulp>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005648:	f7fa fe42 	bl	80002d0 <__aeabi_dsub>
 800564c:	2200      	movs	r2, #0
 800564e:	2300      	movs	r3, #0
 8005650:	4682      	mov	sl, r0
 8005652:	468b      	mov	fp, r1
 8005654:	f7fb fa5c 	bl	8000b10 <__aeabi_dcmpeq>
 8005658:	2800      	cmp	r0, #0
 800565a:	d0c1      	beq.n	80055e0 <_strtod_l+0x8b8>
 800565c:	e615      	b.n	800528a <_strtod_l+0x562>
 800565e:	4641      	mov	r1, r8
 8005660:	4620      	mov	r0, r4
 8005662:	f002 facf 	bl	8007c04 <__ratio>
 8005666:	2200      	movs	r2, #0
 8005668:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800566c:	4606      	mov	r6, r0
 800566e:	460f      	mov	r7, r1
 8005670:	f7fb fa62 	bl	8000b38 <__aeabi_dcmple>
 8005674:	2800      	cmp	r0, #0
 8005676:	d06d      	beq.n	8005754 <_strtod_l+0xa2c>
 8005678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800567a:	2b00      	cmp	r3, #0
 800567c:	d178      	bne.n	8005770 <_strtod_l+0xa48>
 800567e:	f1ba 0f00 	cmp.w	sl, #0
 8005682:	d156      	bne.n	8005732 <_strtod_l+0xa0a>
 8005684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005686:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800568a:	2b00      	cmp	r3, #0
 800568c:	d158      	bne.n	8005740 <_strtod_l+0xa18>
 800568e:	2200      	movs	r2, #0
 8005690:	4630      	mov	r0, r6
 8005692:	4639      	mov	r1, r7
 8005694:	4b5d      	ldr	r3, [pc, #372]	@ (800580c <_strtod_l+0xae4>)
 8005696:	f7fb fa45 	bl	8000b24 <__aeabi_dcmplt>
 800569a:	2800      	cmp	r0, #0
 800569c:	d157      	bne.n	800574e <_strtod_l+0xa26>
 800569e:	4630      	mov	r0, r6
 80056a0:	4639      	mov	r1, r7
 80056a2:	2200      	movs	r2, #0
 80056a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005810 <_strtod_l+0xae8>)
 80056a6:	f7fa ffcb 	bl	8000640 <__aeabi_dmul>
 80056aa:	4606      	mov	r6, r0
 80056ac:	460f      	mov	r7, r1
 80056ae:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80056b2:	9606      	str	r6, [sp, #24]
 80056b4:	9307      	str	r3, [sp, #28]
 80056b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056ba:	4d52      	ldr	r5, [pc, #328]	@ (8005804 <_strtod_l+0xadc>)
 80056bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80056c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056c2:	401d      	ands	r5, r3
 80056c4:	4b53      	ldr	r3, [pc, #332]	@ (8005814 <_strtod_l+0xaec>)
 80056c6:	429d      	cmp	r5, r3
 80056c8:	f040 80aa 	bne.w	8005820 <_strtod_l+0xaf8>
 80056cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056ce:	4650      	mov	r0, sl
 80056d0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80056d4:	4659      	mov	r1, fp
 80056d6:	f002 f9d5 	bl	8007a84 <__ulp>
 80056da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056de:	f7fa ffaf 	bl	8000640 <__aeabi_dmul>
 80056e2:	4652      	mov	r2, sl
 80056e4:	465b      	mov	r3, fp
 80056e6:	f7fa fdf5 	bl	80002d4 <__adddf3>
 80056ea:	460b      	mov	r3, r1
 80056ec:	4945      	ldr	r1, [pc, #276]	@ (8005804 <_strtod_l+0xadc>)
 80056ee:	4a4a      	ldr	r2, [pc, #296]	@ (8005818 <_strtod_l+0xaf0>)
 80056f0:	4019      	ands	r1, r3
 80056f2:	4291      	cmp	r1, r2
 80056f4:	4682      	mov	sl, r0
 80056f6:	d942      	bls.n	800577e <_strtod_l+0xa56>
 80056f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80056fa:	4b43      	ldr	r3, [pc, #268]	@ (8005808 <_strtod_l+0xae0>)
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d103      	bne.n	8005708 <_strtod_l+0x9e0>
 8005700:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005702:	3301      	adds	r3, #1
 8005704:	f43f ad2b 	beq.w	800515e <_strtod_l+0x436>
 8005708:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800570c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005808 <_strtod_l+0xae0>
 8005710:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005712:	9805      	ldr	r0, [sp, #20]
 8005714:	f001 fe84 	bl	8007420 <_Bfree>
 8005718:	4649      	mov	r1, r9
 800571a:	9805      	ldr	r0, [sp, #20]
 800571c:	f001 fe80 	bl	8007420 <_Bfree>
 8005720:	4641      	mov	r1, r8
 8005722:	9805      	ldr	r0, [sp, #20]
 8005724:	f001 fe7c 	bl	8007420 <_Bfree>
 8005728:	4621      	mov	r1, r4
 800572a:	9805      	ldr	r0, [sp, #20]
 800572c:	f001 fe78 	bl	8007420 <_Bfree>
 8005730:	e618      	b.n	8005364 <_strtod_l+0x63c>
 8005732:	f1ba 0f01 	cmp.w	sl, #1
 8005736:	d103      	bne.n	8005740 <_strtod_l+0xa18>
 8005738:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800573a:	2b00      	cmp	r3, #0
 800573c:	f43f ada5 	beq.w	800528a <_strtod_l+0x562>
 8005740:	2200      	movs	r2, #0
 8005742:	4b36      	ldr	r3, [pc, #216]	@ (800581c <_strtod_l+0xaf4>)
 8005744:	2600      	movs	r6, #0
 8005746:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800574a:	4f30      	ldr	r7, [pc, #192]	@ (800580c <_strtod_l+0xae4>)
 800574c:	e7b3      	b.n	80056b6 <_strtod_l+0x98e>
 800574e:	2600      	movs	r6, #0
 8005750:	4f2f      	ldr	r7, [pc, #188]	@ (8005810 <_strtod_l+0xae8>)
 8005752:	e7ac      	b.n	80056ae <_strtod_l+0x986>
 8005754:	4630      	mov	r0, r6
 8005756:	4639      	mov	r1, r7
 8005758:	4b2d      	ldr	r3, [pc, #180]	@ (8005810 <_strtod_l+0xae8>)
 800575a:	2200      	movs	r2, #0
 800575c:	f7fa ff70 	bl	8000640 <__aeabi_dmul>
 8005760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005762:	4606      	mov	r6, r0
 8005764:	460f      	mov	r7, r1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0a1      	beq.n	80056ae <_strtod_l+0x986>
 800576a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800576e:	e7a2      	b.n	80056b6 <_strtod_l+0x98e>
 8005770:	2200      	movs	r2, #0
 8005772:	4b26      	ldr	r3, [pc, #152]	@ (800580c <_strtod_l+0xae4>)
 8005774:	4616      	mov	r6, r2
 8005776:	461f      	mov	r7, r3
 8005778:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800577c:	e79b      	b.n	80056b6 <_strtod_l+0x98e>
 800577e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005782:	9b08      	ldr	r3, [sp, #32]
 8005784:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1c1      	bne.n	8005710 <_strtod_l+0x9e8>
 800578c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005790:	0d1b      	lsrs	r3, r3, #20
 8005792:	051b      	lsls	r3, r3, #20
 8005794:	429d      	cmp	r5, r3
 8005796:	d1bb      	bne.n	8005710 <_strtod_l+0x9e8>
 8005798:	4630      	mov	r0, r6
 800579a:	4639      	mov	r1, r7
 800579c:	f7fb fb0e 	bl	8000dbc <__aeabi_d2lz>
 80057a0:	f7fa ff20 	bl	80005e4 <__aeabi_l2d>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4630      	mov	r0, r6
 80057aa:	4639      	mov	r1, r7
 80057ac:	f7fa fd90 	bl	80002d0 <__aeabi_dsub>
 80057b0:	460b      	mov	r3, r1
 80057b2:	4602      	mov	r2, r0
 80057b4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80057b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80057bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057be:	ea46 060a 	orr.w	r6, r6, sl
 80057c2:	431e      	orrs	r6, r3
 80057c4:	d069      	beq.n	800589a <_strtod_l+0xb72>
 80057c6:	a30a      	add	r3, pc, #40	@ (adr r3, 80057f0 <_strtod_l+0xac8>)
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f7fb f9aa 	bl	8000b24 <__aeabi_dcmplt>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	f47f accf 	bne.w	8005174 <_strtod_l+0x44c>
 80057d6:	a308      	add	r3, pc, #32	@ (adr r3, 80057f8 <_strtod_l+0xad0>)
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057e0:	f7fb f9be 	bl	8000b60 <__aeabi_dcmpgt>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d093      	beq.n	8005710 <_strtod_l+0x9e8>
 80057e8:	e4c4      	b.n	8005174 <_strtod_l+0x44c>
 80057ea:	bf00      	nop
 80057ec:	f3af 8000 	nop.w
 80057f0:	94a03595 	.word	0x94a03595
 80057f4:	3fdfffff 	.word	0x3fdfffff
 80057f8:	35afe535 	.word	0x35afe535
 80057fc:	3fe00000 	.word	0x3fe00000
 8005800:	000fffff 	.word	0x000fffff
 8005804:	7ff00000 	.word	0x7ff00000
 8005808:	7fefffff 	.word	0x7fefffff
 800580c:	3ff00000 	.word	0x3ff00000
 8005810:	3fe00000 	.word	0x3fe00000
 8005814:	7fe00000 	.word	0x7fe00000
 8005818:	7c9fffff 	.word	0x7c9fffff
 800581c:	bff00000 	.word	0xbff00000
 8005820:	9b08      	ldr	r3, [sp, #32]
 8005822:	b323      	cbz	r3, 800586e <_strtod_l+0xb46>
 8005824:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005828:	d821      	bhi.n	800586e <_strtod_l+0xb46>
 800582a:	a327      	add	r3, pc, #156	@ (adr r3, 80058c8 <_strtod_l+0xba0>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	4630      	mov	r0, r6
 8005832:	4639      	mov	r1, r7
 8005834:	f7fb f980 	bl	8000b38 <__aeabi_dcmple>
 8005838:	b1a0      	cbz	r0, 8005864 <_strtod_l+0xb3c>
 800583a:	4639      	mov	r1, r7
 800583c:	4630      	mov	r0, r6
 800583e:	f7fb f9d7 	bl	8000bf0 <__aeabi_d2uiz>
 8005842:	2801      	cmp	r0, #1
 8005844:	bf38      	it	cc
 8005846:	2001      	movcc	r0, #1
 8005848:	f7fa fe80 	bl	800054c <__aeabi_ui2d>
 800584c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800584e:	4606      	mov	r6, r0
 8005850:	460f      	mov	r7, r1
 8005852:	b9fb      	cbnz	r3, 8005894 <_strtod_l+0xb6c>
 8005854:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005858:	9014      	str	r0, [sp, #80]	@ 0x50
 800585a:	9315      	str	r3, [sp, #84]	@ 0x54
 800585c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005860:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005864:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005866:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800586a:	1b5b      	subs	r3, r3, r5
 800586c:	9311      	str	r3, [sp, #68]	@ 0x44
 800586e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005872:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005876:	f002 f905 	bl	8007a84 <__ulp>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4650      	mov	r0, sl
 8005880:	4659      	mov	r1, fp
 8005882:	f7fa fedd 	bl	8000640 <__aeabi_dmul>
 8005886:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800588a:	f7fa fd23 	bl	80002d4 <__adddf3>
 800588e:	4682      	mov	sl, r0
 8005890:	468b      	mov	fp, r1
 8005892:	e776      	b.n	8005782 <_strtod_l+0xa5a>
 8005894:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005898:	e7e0      	b.n	800585c <_strtod_l+0xb34>
 800589a:	a30d      	add	r3, pc, #52	@ (adr r3, 80058d0 <_strtod_l+0xba8>)
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	f7fb f940 	bl	8000b24 <__aeabi_dcmplt>
 80058a4:	e79e      	b.n	80057e4 <_strtod_l+0xabc>
 80058a6:	2300      	movs	r3, #0
 80058a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80058ac:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	f7ff ba77 	b.w	8004da2 <_strtod_l+0x7a>
 80058b4:	2a65      	cmp	r2, #101	@ 0x65
 80058b6:	f43f ab6e 	beq.w	8004f96 <_strtod_l+0x26e>
 80058ba:	2a45      	cmp	r2, #69	@ 0x45
 80058bc:	f43f ab6b 	beq.w	8004f96 <_strtod_l+0x26e>
 80058c0:	2301      	movs	r3, #1
 80058c2:	f7ff bba6 	b.w	8005012 <_strtod_l+0x2ea>
 80058c6:	bf00      	nop
 80058c8:	ffc00000 	.word	0xffc00000
 80058cc:	41dfffff 	.word	0x41dfffff
 80058d0:	94a03595 	.word	0x94a03595
 80058d4:	3fcfffff 	.word	0x3fcfffff

080058d8 <_strtod_r>:
 80058d8:	4b01      	ldr	r3, [pc, #4]	@ (80058e0 <_strtod_r+0x8>)
 80058da:	f7ff ba25 	b.w	8004d28 <_strtod_l>
 80058de:	bf00      	nop
 80058e0:	2000001c 	.word	0x2000001c

080058e4 <_strtol_l.constprop.0>:
 80058e4:	2b24      	cmp	r3, #36	@ 0x24
 80058e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ea:	4686      	mov	lr, r0
 80058ec:	4690      	mov	r8, r2
 80058ee:	d801      	bhi.n	80058f4 <_strtol_l.constprop.0+0x10>
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d106      	bne.n	8005902 <_strtol_l.constprop.0+0x1e>
 80058f4:	f000 f8ae 	bl	8005a54 <__errno>
 80058f8:	2316      	movs	r3, #22
 80058fa:	6003      	str	r3, [r0, #0]
 80058fc:	2000      	movs	r0, #0
 80058fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005902:	460d      	mov	r5, r1
 8005904:	4833      	ldr	r0, [pc, #204]	@ (80059d4 <_strtol_l.constprop.0+0xf0>)
 8005906:	462a      	mov	r2, r5
 8005908:	f815 4b01 	ldrb.w	r4, [r5], #1
 800590c:	5d06      	ldrb	r6, [r0, r4]
 800590e:	f016 0608 	ands.w	r6, r6, #8
 8005912:	d1f8      	bne.n	8005906 <_strtol_l.constprop.0+0x22>
 8005914:	2c2d      	cmp	r4, #45	@ 0x2d
 8005916:	d12d      	bne.n	8005974 <_strtol_l.constprop.0+0x90>
 8005918:	2601      	movs	r6, #1
 800591a:	782c      	ldrb	r4, [r5, #0]
 800591c:	1c95      	adds	r5, r2, #2
 800591e:	f033 0210 	bics.w	r2, r3, #16
 8005922:	d109      	bne.n	8005938 <_strtol_l.constprop.0+0x54>
 8005924:	2c30      	cmp	r4, #48	@ 0x30
 8005926:	d12a      	bne.n	800597e <_strtol_l.constprop.0+0x9a>
 8005928:	782a      	ldrb	r2, [r5, #0]
 800592a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800592e:	2a58      	cmp	r2, #88	@ 0x58
 8005930:	d125      	bne.n	800597e <_strtol_l.constprop.0+0x9a>
 8005932:	2310      	movs	r3, #16
 8005934:	786c      	ldrb	r4, [r5, #1]
 8005936:	3502      	adds	r5, #2
 8005938:	2200      	movs	r2, #0
 800593a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800593e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005942:	fbbc f9f3 	udiv	r9, ip, r3
 8005946:	4610      	mov	r0, r2
 8005948:	fb03 ca19 	mls	sl, r3, r9, ip
 800594c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005950:	2f09      	cmp	r7, #9
 8005952:	d81b      	bhi.n	800598c <_strtol_l.constprop.0+0xa8>
 8005954:	463c      	mov	r4, r7
 8005956:	42a3      	cmp	r3, r4
 8005958:	dd27      	ble.n	80059aa <_strtol_l.constprop.0+0xc6>
 800595a:	1c57      	adds	r7, r2, #1
 800595c:	d007      	beq.n	800596e <_strtol_l.constprop.0+0x8a>
 800595e:	4581      	cmp	r9, r0
 8005960:	d320      	bcc.n	80059a4 <_strtol_l.constprop.0+0xc0>
 8005962:	d101      	bne.n	8005968 <_strtol_l.constprop.0+0x84>
 8005964:	45a2      	cmp	sl, r4
 8005966:	db1d      	blt.n	80059a4 <_strtol_l.constprop.0+0xc0>
 8005968:	2201      	movs	r2, #1
 800596a:	fb00 4003 	mla	r0, r0, r3, r4
 800596e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005972:	e7eb      	b.n	800594c <_strtol_l.constprop.0+0x68>
 8005974:	2c2b      	cmp	r4, #43	@ 0x2b
 8005976:	bf04      	itt	eq
 8005978:	782c      	ldrbeq	r4, [r5, #0]
 800597a:	1c95      	addeq	r5, r2, #2
 800597c:	e7cf      	b.n	800591e <_strtol_l.constprop.0+0x3a>
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1da      	bne.n	8005938 <_strtol_l.constprop.0+0x54>
 8005982:	2c30      	cmp	r4, #48	@ 0x30
 8005984:	bf0c      	ite	eq
 8005986:	2308      	moveq	r3, #8
 8005988:	230a      	movne	r3, #10
 800598a:	e7d5      	b.n	8005938 <_strtol_l.constprop.0+0x54>
 800598c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005990:	2f19      	cmp	r7, #25
 8005992:	d801      	bhi.n	8005998 <_strtol_l.constprop.0+0xb4>
 8005994:	3c37      	subs	r4, #55	@ 0x37
 8005996:	e7de      	b.n	8005956 <_strtol_l.constprop.0+0x72>
 8005998:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800599c:	2f19      	cmp	r7, #25
 800599e:	d804      	bhi.n	80059aa <_strtol_l.constprop.0+0xc6>
 80059a0:	3c57      	subs	r4, #87	@ 0x57
 80059a2:	e7d8      	b.n	8005956 <_strtol_l.constprop.0+0x72>
 80059a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059a8:	e7e1      	b.n	800596e <_strtol_l.constprop.0+0x8a>
 80059aa:	1c53      	adds	r3, r2, #1
 80059ac:	d108      	bne.n	80059c0 <_strtol_l.constprop.0+0xdc>
 80059ae:	2322      	movs	r3, #34	@ 0x22
 80059b0:	4660      	mov	r0, ip
 80059b2:	f8ce 3000 	str.w	r3, [lr]
 80059b6:	f1b8 0f00 	cmp.w	r8, #0
 80059ba:	d0a0      	beq.n	80058fe <_strtol_l.constprop.0+0x1a>
 80059bc:	1e69      	subs	r1, r5, #1
 80059be:	e006      	b.n	80059ce <_strtol_l.constprop.0+0xea>
 80059c0:	b106      	cbz	r6, 80059c4 <_strtol_l.constprop.0+0xe0>
 80059c2:	4240      	negs	r0, r0
 80059c4:	f1b8 0f00 	cmp.w	r8, #0
 80059c8:	d099      	beq.n	80058fe <_strtol_l.constprop.0+0x1a>
 80059ca:	2a00      	cmp	r2, #0
 80059cc:	d1f6      	bne.n	80059bc <_strtol_l.constprop.0+0xd8>
 80059ce:	f8c8 1000 	str.w	r1, [r8]
 80059d2:	e794      	b.n	80058fe <_strtol_l.constprop.0+0x1a>
 80059d4:	08008651 	.word	0x08008651

080059d8 <_strtol_r>:
 80059d8:	f7ff bf84 	b.w	80058e4 <_strtol_l.constprop.0>

080059dc <_fwalk_sglue>:
 80059dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e0:	4607      	mov	r7, r0
 80059e2:	4688      	mov	r8, r1
 80059e4:	4614      	mov	r4, r2
 80059e6:	2600      	movs	r6, #0
 80059e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059ec:	f1b9 0901 	subs.w	r9, r9, #1
 80059f0:	d505      	bpl.n	80059fe <_fwalk_sglue+0x22>
 80059f2:	6824      	ldr	r4, [r4, #0]
 80059f4:	2c00      	cmp	r4, #0
 80059f6:	d1f7      	bne.n	80059e8 <_fwalk_sglue+0xc>
 80059f8:	4630      	mov	r0, r6
 80059fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059fe:	89ab      	ldrh	r3, [r5, #12]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d907      	bls.n	8005a14 <_fwalk_sglue+0x38>
 8005a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	d003      	beq.n	8005a14 <_fwalk_sglue+0x38>
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	4638      	mov	r0, r7
 8005a10:	47c0      	blx	r8
 8005a12:	4306      	orrs	r6, r0
 8005a14:	3568      	adds	r5, #104	@ 0x68
 8005a16:	e7e9      	b.n	80059ec <_fwalk_sglue+0x10>

08005a18 <strncmp>:
 8005a18:	b510      	push	{r4, lr}
 8005a1a:	b16a      	cbz	r2, 8005a38 <strncmp+0x20>
 8005a1c:	3901      	subs	r1, #1
 8005a1e:	1884      	adds	r4, r0, r2
 8005a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d103      	bne.n	8005a34 <strncmp+0x1c>
 8005a2c:	42a0      	cmp	r0, r4
 8005a2e:	d001      	beq.n	8005a34 <strncmp+0x1c>
 8005a30:	2a00      	cmp	r2, #0
 8005a32:	d1f5      	bne.n	8005a20 <strncmp+0x8>
 8005a34:	1ad0      	subs	r0, r2, r3
 8005a36:	bd10      	pop	{r4, pc}
 8005a38:	4610      	mov	r0, r2
 8005a3a:	e7fc      	b.n	8005a36 <strncmp+0x1e>

08005a3c <memset>:
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4402      	add	r2, r0
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d100      	bne.n	8005a46 <memset+0xa>
 8005a44:	4770      	bx	lr
 8005a46:	f803 1b01 	strb.w	r1, [r3], #1
 8005a4a:	e7f9      	b.n	8005a40 <memset+0x4>

08005a4c <_localeconv_r>:
 8005a4c:	4800      	ldr	r0, [pc, #0]	@ (8005a50 <_localeconv_r+0x4>)
 8005a4e:	4770      	bx	lr
 8005a50:	2000010c 	.word	0x2000010c

08005a54 <__errno>:
 8005a54:	4b01      	ldr	r3, [pc, #4]	@ (8005a5c <__errno+0x8>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20000188 	.word	0x20000188

08005a60 <__libc_init_array>:
 8005a60:	b570      	push	{r4, r5, r6, lr}
 8005a62:	2600      	movs	r6, #0
 8005a64:	4d0c      	ldr	r5, [pc, #48]	@ (8005a98 <__libc_init_array+0x38>)
 8005a66:	4c0d      	ldr	r4, [pc, #52]	@ (8005a9c <__libc_init_array+0x3c>)
 8005a68:	1b64      	subs	r4, r4, r5
 8005a6a:	10a4      	asrs	r4, r4, #2
 8005a6c:	42a6      	cmp	r6, r4
 8005a6e:	d109      	bne.n	8005a84 <__libc_init_array+0x24>
 8005a70:	f002 fd60 	bl	8008534 <_init>
 8005a74:	2600      	movs	r6, #0
 8005a76:	4d0a      	ldr	r5, [pc, #40]	@ (8005aa0 <__libc_init_array+0x40>)
 8005a78:	4c0a      	ldr	r4, [pc, #40]	@ (8005aa4 <__libc_init_array+0x44>)
 8005a7a:	1b64      	subs	r4, r4, r5
 8005a7c:	10a4      	asrs	r4, r4, #2
 8005a7e:	42a6      	cmp	r6, r4
 8005a80:	d105      	bne.n	8005a8e <__libc_init_array+0x2e>
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a88:	4798      	blx	r3
 8005a8a:	3601      	adds	r6, #1
 8005a8c:	e7ee      	b.n	8005a6c <__libc_init_array+0xc>
 8005a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a92:	4798      	blx	r3
 8005a94:	3601      	adds	r6, #1
 8005a96:	e7f2      	b.n	8005a7e <__libc_init_array+0x1e>
 8005a98:	080089ec 	.word	0x080089ec
 8005a9c:	080089ec 	.word	0x080089ec
 8005aa0:	080089ec 	.word	0x080089ec
 8005aa4:	080089f0 	.word	0x080089f0

08005aa8 <__retarget_lock_init_recursive>:
 8005aa8:	4770      	bx	lr

08005aaa <__retarget_lock_acquire_recursive>:
 8005aaa:	4770      	bx	lr

08005aac <__retarget_lock_release_recursive>:
 8005aac:	4770      	bx	lr

08005aae <memchr>:
 8005aae:	4603      	mov	r3, r0
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	b2c9      	uxtb	r1, r1
 8005ab4:	4402      	add	r2, r0
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	4618      	mov	r0, r3
 8005aba:	d101      	bne.n	8005ac0 <memchr+0x12>
 8005abc:	2000      	movs	r0, #0
 8005abe:	e003      	b.n	8005ac8 <memchr+0x1a>
 8005ac0:	7804      	ldrb	r4, [r0, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	428c      	cmp	r4, r1
 8005ac6:	d1f6      	bne.n	8005ab6 <memchr+0x8>
 8005ac8:	bd10      	pop	{r4, pc}

08005aca <memcpy>:
 8005aca:	440a      	add	r2, r1
 8005acc:	4291      	cmp	r1, r2
 8005ace:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005ad2:	d100      	bne.n	8005ad6 <memcpy+0xc>
 8005ad4:	4770      	bx	lr
 8005ad6:	b510      	push	{r4, lr}
 8005ad8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005adc:	4291      	cmp	r1, r2
 8005ade:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ae2:	d1f9      	bne.n	8005ad8 <memcpy+0xe>
 8005ae4:	bd10      	pop	{r4, pc}
	...

08005ae8 <nan>:
 8005ae8:	2000      	movs	r0, #0
 8005aea:	4901      	ldr	r1, [pc, #4]	@ (8005af0 <nan+0x8>)
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	7ff80000 	.word	0x7ff80000

08005af4 <nanf>:
 8005af4:	4800      	ldr	r0, [pc, #0]	@ (8005af8 <nanf+0x4>)
 8005af6:	4770      	bx	lr
 8005af8:	7fc00000 	.word	0x7fc00000

08005afc <quorem>:
 8005afc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b00:	6903      	ldr	r3, [r0, #16]
 8005b02:	690c      	ldr	r4, [r1, #16]
 8005b04:	4607      	mov	r7, r0
 8005b06:	42a3      	cmp	r3, r4
 8005b08:	db7e      	blt.n	8005c08 <quorem+0x10c>
 8005b0a:	3c01      	subs	r4, #1
 8005b0c:	00a3      	lsls	r3, r4, #2
 8005b0e:	f100 0514 	add.w	r5, r0, #20
 8005b12:	f101 0814 	add.w	r8, r1, #20
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b26:	3301      	adds	r3, #1
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b32:	d32e      	bcc.n	8005b92 <quorem+0x96>
 8005b34:	f04f 0a00 	mov.w	sl, #0
 8005b38:	46c4      	mov	ip, r8
 8005b3a:	46ae      	mov	lr, r5
 8005b3c:	46d3      	mov	fp, sl
 8005b3e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b42:	b298      	uxth	r0, r3
 8005b44:	fb06 a000 	mla	r0, r6, r0, sl
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	0c02      	lsrs	r2, r0, #16
 8005b4c:	fb06 2303 	mla	r3, r6, r3, r2
 8005b50:	f8de 2000 	ldr.w	r2, [lr]
 8005b54:	b280      	uxth	r0, r0
 8005b56:	b292      	uxth	r2, r2
 8005b58:	1a12      	subs	r2, r2, r0
 8005b5a:	445a      	add	r2, fp
 8005b5c:	f8de 0000 	ldr.w	r0, [lr]
 8005b60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b6a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b6e:	b292      	uxth	r2, r2
 8005b70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b74:	45e1      	cmp	r9, ip
 8005b76:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b7a:	f84e 2b04 	str.w	r2, [lr], #4
 8005b7e:	d2de      	bcs.n	8005b3e <quorem+0x42>
 8005b80:	9b00      	ldr	r3, [sp, #0]
 8005b82:	58eb      	ldr	r3, [r5, r3]
 8005b84:	b92b      	cbnz	r3, 8005b92 <quorem+0x96>
 8005b86:	9b01      	ldr	r3, [sp, #4]
 8005b88:	3b04      	subs	r3, #4
 8005b8a:	429d      	cmp	r5, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	d32f      	bcc.n	8005bf0 <quorem+0xf4>
 8005b90:	613c      	str	r4, [r7, #16]
 8005b92:	4638      	mov	r0, r7
 8005b94:	f001 fec6 	bl	8007924 <__mcmp>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	db25      	blt.n	8005be8 <quorem+0xec>
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ba4:	f8d1 c000 	ldr.w	ip, [r1]
 8005ba8:	fa1f fe82 	uxth.w	lr, r2
 8005bac:	fa1f f38c 	uxth.w	r3, ip
 8005bb0:	eba3 030e 	sub.w	r3, r3, lr
 8005bb4:	4403      	add	r3, r0
 8005bb6:	0c12      	lsrs	r2, r2, #16
 8005bb8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bbc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bc6:	45c1      	cmp	r9, r8
 8005bc8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bcc:	f841 3b04 	str.w	r3, [r1], #4
 8005bd0:	d2e6      	bcs.n	8005ba0 <quorem+0xa4>
 8005bd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bda:	b922      	cbnz	r2, 8005be6 <quorem+0xea>
 8005bdc:	3b04      	subs	r3, #4
 8005bde:	429d      	cmp	r5, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	d30b      	bcc.n	8005bfc <quorem+0x100>
 8005be4:	613c      	str	r4, [r7, #16]
 8005be6:	3601      	adds	r6, #1
 8005be8:	4630      	mov	r0, r6
 8005bea:	b003      	add	sp, #12
 8005bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	3b04      	subs	r3, #4
 8005bf4:	2a00      	cmp	r2, #0
 8005bf6:	d1cb      	bne.n	8005b90 <quorem+0x94>
 8005bf8:	3c01      	subs	r4, #1
 8005bfa:	e7c6      	b.n	8005b8a <quorem+0x8e>
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	3b04      	subs	r3, #4
 8005c00:	2a00      	cmp	r2, #0
 8005c02:	d1ef      	bne.n	8005be4 <quorem+0xe8>
 8005c04:	3c01      	subs	r4, #1
 8005c06:	e7ea      	b.n	8005bde <quorem+0xe2>
 8005c08:	2000      	movs	r0, #0
 8005c0a:	e7ee      	b.n	8005bea <quorem+0xee>
 8005c0c:	0000      	movs	r0, r0
	...

08005c10 <_dtoa_r>:
 8005c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c14:	4614      	mov	r4, r2
 8005c16:	461d      	mov	r5, r3
 8005c18:	69c7      	ldr	r7, [r0, #28]
 8005c1a:	b097      	sub	sp, #92	@ 0x5c
 8005c1c:	4683      	mov	fp, r0
 8005c1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005c22:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005c24:	b97f      	cbnz	r7, 8005c46 <_dtoa_r+0x36>
 8005c26:	2010      	movs	r0, #16
 8005c28:	f001 fa4a 	bl	80070c0 <malloc>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c32:	b920      	cbnz	r0, 8005c3e <_dtoa_r+0x2e>
 8005c34:	21ef      	movs	r1, #239	@ 0xef
 8005c36:	4ba8      	ldr	r3, [pc, #672]	@ (8005ed8 <_dtoa_r+0x2c8>)
 8005c38:	48a8      	ldr	r0, [pc, #672]	@ (8005edc <_dtoa_r+0x2cc>)
 8005c3a:	f002 f945 	bl	8007ec8 <__assert_func>
 8005c3e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c42:	6007      	str	r7, [r0, #0]
 8005c44:	60c7      	str	r7, [r0, #12]
 8005c46:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c4a:	6819      	ldr	r1, [r3, #0]
 8005c4c:	b159      	cbz	r1, 8005c66 <_dtoa_r+0x56>
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	2301      	movs	r3, #1
 8005c52:	4093      	lsls	r3, r2
 8005c54:	604a      	str	r2, [r1, #4]
 8005c56:	608b      	str	r3, [r1, #8]
 8005c58:	4658      	mov	r0, fp
 8005c5a:	f001 fbe1 	bl	8007420 <_Bfree>
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	1e2b      	subs	r3, r5, #0
 8005c68:	bfaf      	iteee	ge
 8005c6a:	2300      	movge	r3, #0
 8005c6c:	2201      	movlt	r2, #1
 8005c6e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c72:	9303      	strlt	r3, [sp, #12]
 8005c74:	bfa8      	it	ge
 8005c76:	6033      	strge	r3, [r6, #0]
 8005c78:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c7c:	4b98      	ldr	r3, [pc, #608]	@ (8005ee0 <_dtoa_r+0x2d0>)
 8005c7e:	bfb8      	it	lt
 8005c80:	6032      	strlt	r2, [r6, #0]
 8005c82:	ea33 0308 	bics.w	r3, r3, r8
 8005c86:	d112      	bne.n	8005cae <_dtoa_r+0x9e>
 8005c88:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c8c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005c94:	4323      	orrs	r3, r4
 8005c96:	f000 8550 	beq.w	800673a <_dtoa_r+0xb2a>
 8005c9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c9c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005ee4 <_dtoa_r+0x2d4>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8552 	beq.w	800674a <_dtoa_r+0xb3a>
 8005ca6:	f10a 0303 	add.w	r3, sl, #3
 8005caa:	f000 bd4c 	b.w	8006746 <_dtoa_r+0xb36>
 8005cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cb2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005cb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f7fa ff27 	bl	8000b10 <__aeabi_dcmpeq>
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	b158      	cbz	r0, 8005cde <_dtoa_r+0xce>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005cce:	b113      	cbz	r3, 8005cd6 <_dtoa_r+0xc6>
 8005cd0:	4b85      	ldr	r3, [pc, #532]	@ (8005ee8 <_dtoa_r+0x2d8>)
 8005cd2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005eec <_dtoa_r+0x2dc>
 8005cda:	f000 bd36 	b.w	800674a <_dtoa_r+0xb3a>
 8005cde:	ab14      	add	r3, sp, #80	@ 0x50
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	ab15      	add	r3, sp, #84	@ 0x54
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	4658      	mov	r0, fp
 8005ce8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005cec:	f001 ff32 	bl	8007b54 <__d2b>
 8005cf0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005cf4:	4681      	mov	r9, r0
 8005cf6:	2e00      	cmp	r6, #0
 8005cf8:	d077      	beq.n	8005dea <_dtoa_r+0x1da>
 8005cfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d00:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d08:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d0c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d10:	9712      	str	r7, [sp, #72]	@ 0x48
 8005d12:	4619      	mov	r1, r3
 8005d14:	2200      	movs	r2, #0
 8005d16:	4b76      	ldr	r3, [pc, #472]	@ (8005ef0 <_dtoa_r+0x2e0>)
 8005d18:	f7fa fada 	bl	80002d0 <__aeabi_dsub>
 8005d1c:	a368      	add	r3, pc, #416	@ (adr r3, 8005ec0 <_dtoa_r+0x2b0>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f7fa fc8d 	bl	8000640 <__aeabi_dmul>
 8005d26:	a368      	add	r3, pc, #416	@ (adr r3, 8005ec8 <_dtoa_r+0x2b8>)
 8005d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2c:	f7fa fad2 	bl	80002d4 <__adddf3>
 8005d30:	4604      	mov	r4, r0
 8005d32:	4630      	mov	r0, r6
 8005d34:	460d      	mov	r5, r1
 8005d36:	f7fa fc19 	bl	800056c <__aeabi_i2d>
 8005d3a:	a365      	add	r3, pc, #404	@ (adr r3, 8005ed0 <_dtoa_r+0x2c0>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fc7e 	bl	8000640 <__aeabi_dmul>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4620      	mov	r0, r4
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	f7fa fac2 	bl	80002d4 <__adddf3>
 8005d50:	4604      	mov	r4, r0
 8005d52:	460d      	mov	r5, r1
 8005d54:	f7fa ff24 	bl	8000ba0 <__aeabi_d2iz>
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4620      	mov	r0, r4
 8005d60:	4629      	mov	r1, r5
 8005d62:	f7fa fedf 	bl	8000b24 <__aeabi_dcmplt>
 8005d66:	b140      	cbz	r0, 8005d7a <_dtoa_r+0x16a>
 8005d68:	4638      	mov	r0, r7
 8005d6a:	f7fa fbff 	bl	800056c <__aeabi_i2d>
 8005d6e:	4622      	mov	r2, r4
 8005d70:	462b      	mov	r3, r5
 8005d72:	f7fa fecd 	bl	8000b10 <__aeabi_dcmpeq>
 8005d76:	b900      	cbnz	r0, 8005d7a <_dtoa_r+0x16a>
 8005d78:	3f01      	subs	r7, #1
 8005d7a:	2f16      	cmp	r7, #22
 8005d7c:	d853      	bhi.n	8005e26 <_dtoa_r+0x216>
 8005d7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d82:	4b5c      	ldr	r3, [pc, #368]	@ (8005ef4 <_dtoa_r+0x2e4>)
 8005d84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f7fa feca 	bl	8000b24 <__aeabi_dcmplt>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d04a      	beq.n	8005e2a <_dtoa_r+0x21a>
 8005d94:	2300      	movs	r3, #0
 8005d96:	3f01      	subs	r7, #1
 8005d98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005d9a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d9c:	1b9b      	subs	r3, r3, r6
 8005d9e:	1e5a      	subs	r2, r3, #1
 8005da0:	bf46      	itte	mi
 8005da2:	f1c3 0801 	rsbmi	r8, r3, #1
 8005da6:	2300      	movmi	r3, #0
 8005da8:	f04f 0800 	movpl.w	r8, #0
 8005dac:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dae:	bf48      	it	mi
 8005db0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005db2:	2f00      	cmp	r7, #0
 8005db4:	db3b      	blt.n	8005e2e <_dtoa_r+0x21e>
 8005db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db8:	970e      	str	r7, [sp, #56]	@ 0x38
 8005dba:	443b      	add	r3, r7
 8005dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005dc4:	2b09      	cmp	r3, #9
 8005dc6:	d866      	bhi.n	8005e96 <_dtoa_r+0x286>
 8005dc8:	2b05      	cmp	r3, #5
 8005dca:	bfc4      	itt	gt
 8005dcc:	3b04      	subgt	r3, #4
 8005dce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005dd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005dd2:	bfc8      	it	gt
 8005dd4:	2400      	movgt	r4, #0
 8005dd6:	f1a3 0302 	sub.w	r3, r3, #2
 8005dda:	bfd8      	it	le
 8005ddc:	2401      	movle	r4, #1
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d864      	bhi.n	8005eac <_dtoa_r+0x29c>
 8005de2:	e8df f003 	tbb	[pc, r3]
 8005de6:	382b      	.short	0x382b
 8005de8:	5636      	.short	0x5636
 8005dea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005dee:	441e      	add	r6, r3
 8005df0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	bfc1      	itttt	gt
 8005df8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005dfc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005e00:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e04:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e08:	bfd6      	itet	le
 8005e0a:	f1c3 0320 	rsble	r3, r3, #32
 8005e0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005e12:	fa04 f003 	lslle.w	r0, r4, r3
 8005e16:	f7fa fb99 	bl	800054c <__aeabi_ui2d>
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e20:	3e01      	subs	r6, #1
 8005e22:	9212      	str	r2, [sp, #72]	@ 0x48
 8005e24:	e775      	b.n	8005d12 <_dtoa_r+0x102>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e7b6      	b.n	8005d98 <_dtoa_r+0x188>
 8005e2a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005e2c:	e7b5      	b.n	8005d9a <_dtoa_r+0x18a>
 8005e2e:	427b      	negs	r3, r7
 8005e30:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e32:	2300      	movs	r3, #0
 8005e34:	eba8 0807 	sub.w	r8, r8, r7
 8005e38:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e3a:	e7c2      	b.n	8005dc2 <_dtoa_r+0x1b2>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e40:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dc35      	bgt.n	8005eb2 <_dtoa_r+0x2a2>
 8005e46:	2301      	movs	r3, #1
 8005e48:	461a      	mov	r2, r3
 8005e4a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005e4e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005e50:	e00b      	b.n	8005e6a <_dtoa_r+0x25a>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e7f3      	b.n	8005e3e <_dtoa_r+0x22e>
 8005e56:	2300      	movs	r3, #0
 8005e58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005e5c:	18fb      	adds	r3, r7, r3
 8005e5e:	9308      	str	r3, [sp, #32]
 8005e60:	3301      	adds	r3, #1
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	9307      	str	r3, [sp, #28]
 8005e66:	bfb8      	it	lt
 8005e68:	2301      	movlt	r3, #1
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e72:	f102 0514 	add.w	r5, r2, #20
 8005e76:	429d      	cmp	r5, r3
 8005e78:	d91f      	bls.n	8005eba <_dtoa_r+0x2aa>
 8005e7a:	6041      	str	r1, [r0, #4]
 8005e7c:	4658      	mov	r0, fp
 8005e7e:	f001 fa8f 	bl	80073a0 <_Balloc>
 8005e82:	4682      	mov	sl, r0
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d139      	bne.n	8005efc <_dtoa_r+0x2ec>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ef8 <_dtoa_r+0x2e8>)
 8005e90:	e6d2      	b.n	8005c38 <_dtoa_r+0x28>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e7e0      	b.n	8005e58 <_dtoa_r+0x248>
 8005e96:	2401      	movs	r4, #1
 8005e98:	2300      	movs	r3, #0
 8005e9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e9c:	9320      	str	r3, [sp, #128]	@ 0x80
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005ea8:	2312      	movs	r3, #18
 8005eaa:	e7d0      	b.n	8005e4e <_dtoa_r+0x23e>
 8005eac:	2301      	movs	r3, #1
 8005eae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eb0:	e7f5      	b.n	8005e9e <_dtoa_r+0x28e>
 8005eb2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005eb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005eb8:	e7d7      	b.n	8005e6a <_dtoa_r+0x25a>
 8005eba:	3101      	adds	r1, #1
 8005ebc:	0052      	lsls	r2, r2, #1
 8005ebe:	e7d8      	b.n	8005e72 <_dtoa_r+0x262>
 8005ec0:	636f4361 	.word	0x636f4361
 8005ec4:	3fd287a7 	.word	0x3fd287a7
 8005ec8:	8b60c8b3 	.word	0x8b60c8b3
 8005ecc:	3fc68a28 	.word	0x3fc68a28
 8005ed0:	509f79fb 	.word	0x509f79fb
 8005ed4:	3fd34413 	.word	0x3fd34413
 8005ed8:	0800875e 	.word	0x0800875e
 8005edc:	08008775 	.word	0x08008775
 8005ee0:	7ff00000 	.word	0x7ff00000
 8005ee4:	0800875a 	.word	0x0800875a
 8005ee8:	080085cb 	.word	0x080085cb
 8005eec:	080085ca 	.word	0x080085ca
 8005ef0:	3ff80000 	.word	0x3ff80000
 8005ef4:	080088e0 	.word	0x080088e0
 8005ef8:	080087cd 	.word	0x080087cd
 8005efc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f00:	6018      	str	r0, [r3, #0]
 8005f02:	9b07      	ldr	r3, [sp, #28]
 8005f04:	2b0e      	cmp	r3, #14
 8005f06:	f200 80a4 	bhi.w	8006052 <_dtoa_r+0x442>
 8005f0a:	2c00      	cmp	r4, #0
 8005f0c:	f000 80a1 	beq.w	8006052 <_dtoa_r+0x442>
 8005f10:	2f00      	cmp	r7, #0
 8005f12:	dd33      	ble.n	8005f7c <_dtoa_r+0x36c>
 8005f14:	4b86      	ldr	r3, [pc, #536]	@ (8006130 <_dtoa_r+0x520>)
 8005f16:	f007 020f 	and.w	r2, r7, #15
 8005f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f1e:	05f8      	lsls	r0, r7, #23
 8005f20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f24:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f2c:	d516      	bpl.n	8005f5c <_dtoa_r+0x34c>
 8005f2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f32:	4b80      	ldr	r3, [pc, #512]	@ (8006134 <_dtoa_r+0x524>)
 8005f34:	2603      	movs	r6, #3
 8005f36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f3a:	f7fa fcab 	bl	8000894 <__aeabi_ddiv>
 8005f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f42:	f004 040f 	and.w	r4, r4, #15
 8005f46:	4d7b      	ldr	r5, [pc, #492]	@ (8006134 <_dtoa_r+0x524>)
 8005f48:	b954      	cbnz	r4, 8005f60 <_dtoa_r+0x350>
 8005f4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f52:	f7fa fc9f 	bl	8000894 <__aeabi_ddiv>
 8005f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f5a:	e028      	b.n	8005fae <_dtoa_r+0x39e>
 8005f5c:	2602      	movs	r6, #2
 8005f5e:	e7f2      	b.n	8005f46 <_dtoa_r+0x336>
 8005f60:	07e1      	lsls	r1, r4, #31
 8005f62:	d508      	bpl.n	8005f76 <_dtoa_r+0x366>
 8005f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f6c:	f7fa fb68 	bl	8000640 <__aeabi_dmul>
 8005f70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f74:	3601      	adds	r6, #1
 8005f76:	1064      	asrs	r4, r4, #1
 8005f78:	3508      	adds	r5, #8
 8005f7a:	e7e5      	b.n	8005f48 <_dtoa_r+0x338>
 8005f7c:	f000 80d2 	beq.w	8006124 <_dtoa_r+0x514>
 8005f80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f84:	427c      	negs	r4, r7
 8005f86:	4b6a      	ldr	r3, [pc, #424]	@ (8006130 <_dtoa_r+0x520>)
 8005f88:	f004 020f 	and.w	r2, r4, #15
 8005f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f7fa fb54 	bl	8000640 <__aeabi_dmul>
 8005f98:	2602      	movs	r6, #2
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fa0:	4d64      	ldr	r5, [pc, #400]	@ (8006134 <_dtoa_r+0x524>)
 8005fa2:	1124      	asrs	r4, r4, #4
 8005fa4:	2c00      	cmp	r4, #0
 8005fa6:	f040 80b2 	bne.w	800610e <_dtoa_r+0x4fe>
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1d3      	bne.n	8005f56 <_dtoa_r+0x346>
 8005fae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 80b7 	beq.w	8006128 <_dtoa_r+0x518>
 8005fba:	2200      	movs	r2, #0
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	4b5d      	ldr	r3, [pc, #372]	@ (8006138 <_dtoa_r+0x528>)
 8005fc2:	f7fa fdaf 	bl	8000b24 <__aeabi_dcmplt>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f000 80ae 	beq.w	8006128 <_dtoa_r+0x518>
 8005fcc:	9b07      	ldr	r3, [sp, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 80aa 	beq.w	8006128 <_dtoa_r+0x518>
 8005fd4:	9b08      	ldr	r3, [sp, #32]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	dd37      	ble.n	800604a <_dtoa_r+0x43a>
 8005fda:	1e7b      	subs	r3, r7, #1
 8005fdc:	4620      	mov	r0, r4
 8005fde:	9304      	str	r3, [sp, #16]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	4b55      	ldr	r3, [pc, #340]	@ (800613c <_dtoa_r+0x52c>)
 8005fe6:	f7fa fb2b 	bl	8000640 <__aeabi_dmul>
 8005fea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fee:	9c08      	ldr	r4, [sp, #32]
 8005ff0:	3601      	adds	r6, #1
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	f7fa faba 	bl	800056c <__aeabi_i2d>
 8005ff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ffc:	f7fa fb20 	bl	8000640 <__aeabi_dmul>
 8006000:	2200      	movs	r2, #0
 8006002:	4b4f      	ldr	r3, [pc, #316]	@ (8006140 <_dtoa_r+0x530>)
 8006004:	f7fa f966 	bl	80002d4 <__adddf3>
 8006008:	4605      	mov	r5, r0
 800600a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800600e:	2c00      	cmp	r4, #0
 8006010:	f040 809a 	bne.w	8006148 <_dtoa_r+0x538>
 8006014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006018:	2200      	movs	r2, #0
 800601a:	4b4a      	ldr	r3, [pc, #296]	@ (8006144 <_dtoa_r+0x534>)
 800601c:	f7fa f958 	bl	80002d0 <__aeabi_dsub>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006028:	462a      	mov	r2, r5
 800602a:	4633      	mov	r3, r6
 800602c:	f7fa fd98 	bl	8000b60 <__aeabi_dcmpgt>
 8006030:	2800      	cmp	r0, #0
 8006032:	f040 828e 	bne.w	8006552 <_dtoa_r+0x942>
 8006036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800603a:	462a      	mov	r2, r5
 800603c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006040:	f7fa fd70 	bl	8000b24 <__aeabi_dcmplt>
 8006044:	2800      	cmp	r0, #0
 8006046:	f040 8127 	bne.w	8006298 <_dtoa_r+0x688>
 800604a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800604e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006052:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006054:	2b00      	cmp	r3, #0
 8006056:	f2c0 8163 	blt.w	8006320 <_dtoa_r+0x710>
 800605a:	2f0e      	cmp	r7, #14
 800605c:	f300 8160 	bgt.w	8006320 <_dtoa_r+0x710>
 8006060:	4b33      	ldr	r3, [pc, #204]	@ (8006130 <_dtoa_r+0x520>)
 8006062:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006066:	e9d3 3400 	ldrd	r3, r4, [r3]
 800606a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800606e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006070:	2b00      	cmp	r3, #0
 8006072:	da03      	bge.n	800607c <_dtoa_r+0x46c>
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f340 8100 	ble.w	800627c <_dtoa_r+0x66c>
 800607c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006080:	4656      	mov	r6, sl
 8006082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006086:	4620      	mov	r0, r4
 8006088:	4629      	mov	r1, r5
 800608a:	f7fa fc03 	bl	8000894 <__aeabi_ddiv>
 800608e:	f7fa fd87 	bl	8000ba0 <__aeabi_d2iz>
 8006092:	4680      	mov	r8, r0
 8006094:	f7fa fa6a 	bl	800056c <__aeabi_i2d>
 8006098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800609c:	f7fa fad0 	bl	8000640 <__aeabi_dmul>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4620      	mov	r0, r4
 80060a6:	4629      	mov	r1, r5
 80060a8:	f7fa f912 	bl	80002d0 <__aeabi_dsub>
 80060ac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060b0:	9d07      	ldr	r5, [sp, #28]
 80060b2:	f806 4b01 	strb.w	r4, [r6], #1
 80060b6:	eba6 040a 	sub.w	r4, r6, sl
 80060ba:	42a5      	cmp	r5, r4
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	f040 8116 	bne.w	80062f0 <_dtoa_r+0x6e0>
 80060c4:	f7fa f906 	bl	80002d4 <__adddf3>
 80060c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060cc:	4604      	mov	r4, r0
 80060ce:	460d      	mov	r5, r1
 80060d0:	f7fa fd46 	bl	8000b60 <__aeabi_dcmpgt>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	f040 80f8 	bne.w	80062ca <_dtoa_r+0x6ba>
 80060da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060de:	4620      	mov	r0, r4
 80060e0:	4629      	mov	r1, r5
 80060e2:	f7fa fd15 	bl	8000b10 <__aeabi_dcmpeq>
 80060e6:	b118      	cbz	r0, 80060f0 <_dtoa_r+0x4e0>
 80060e8:	f018 0f01 	tst.w	r8, #1
 80060ec:	f040 80ed 	bne.w	80062ca <_dtoa_r+0x6ba>
 80060f0:	4649      	mov	r1, r9
 80060f2:	4658      	mov	r0, fp
 80060f4:	f001 f994 	bl	8007420 <_Bfree>
 80060f8:	2300      	movs	r3, #0
 80060fa:	7033      	strb	r3, [r6, #0]
 80060fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80060fe:	3701      	adds	r7, #1
 8006100:	601f      	str	r7, [r3, #0]
 8006102:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 8320 	beq.w	800674a <_dtoa_r+0xb3a>
 800610a:	601e      	str	r6, [r3, #0]
 800610c:	e31d      	b.n	800674a <_dtoa_r+0xb3a>
 800610e:	07e2      	lsls	r2, r4, #31
 8006110:	d505      	bpl.n	800611e <_dtoa_r+0x50e>
 8006112:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006116:	f7fa fa93 	bl	8000640 <__aeabi_dmul>
 800611a:	2301      	movs	r3, #1
 800611c:	3601      	adds	r6, #1
 800611e:	1064      	asrs	r4, r4, #1
 8006120:	3508      	adds	r5, #8
 8006122:	e73f      	b.n	8005fa4 <_dtoa_r+0x394>
 8006124:	2602      	movs	r6, #2
 8006126:	e742      	b.n	8005fae <_dtoa_r+0x39e>
 8006128:	9c07      	ldr	r4, [sp, #28]
 800612a:	9704      	str	r7, [sp, #16]
 800612c:	e761      	b.n	8005ff2 <_dtoa_r+0x3e2>
 800612e:	bf00      	nop
 8006130:	080088e0 	.word	0x080088e0
 8006134:	080088b8 	.word	0x080088b8
 8006138:	3ff00000 	.word	0x3ff00000
 800613c:	40240000 	.word	0x40240000
 8006140:	401c0000 	.word	0x401c0000
 8006144:	40140000 	.word	0x40140000
 8006148:	4b70      	ldr	r3, [pc, #448]	@ (800630c <_dtoa_r+0x6fc>)
 800614a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800614c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006150:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006154:	4454      	add	r4, sl
 8006156:	2900      	cmp	r1, #0
 8006158:	d045      	beq.n	80061e6 <_dtoa_r+0x5d6>
 800615a:	2000      	movs	r0, #0
 800615c:	496c      	ldr	r1, [pc, #432]	@ (8006310 <_dtoa_r+0x700>)
 800615e:	f7fa fb99 	bl	8000894 <__aeabi_ddiv>
 8006162:	4633      	mov	r3, r6
 8006164:	462a      	mov	r2, r5
 8006166:	f7fa f8b3 	bl	80002d0 <__aeabi_dsub>
 800616a:	4656      	mov	r6, sl
 800616c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006174:	f7fa fd14 	bl	8000ba0 <__aeabi_d2iz>
 8006178:	4605      	mov	r5, r0
 800617a:	f7fa f9f7 	bl	800056c <__aeabi_i2d>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006186:	f7fa f8a3 	bl	80002d0 <__aeabi_dsub>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	3530      	adds	r5, #48	@ 0x30
 8006190:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006194:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006198:	f806 5b01 	strb.w	r5, [r6], #1
 800619c:	f7fa fcc2 	bl	8000b24 <__aeabi_dcmplt>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d163      	bne.n	800626c <_dtoa_r+0x65c>
 80061a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061a8:	2000      	movs	r0, #0
 80061aa:	495a      	ldr	r1, [pc, #360]	@ (8006314 <_dtoa_r+0x704>)
 80061ac:	f7fa f890 	bl	80002d0 <__aeabi_dsub>
 80061b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061b4:	f7fa fcb6 	bl	8000b24 <__aeabi_dcmplt>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	f040 8087 	bne.w	80062cc <_dtoa_r+0x6bc>
 80061be:	42a6      	cmp	r6, r4
 80061c0:	f43f af43 	beq.w	800604a <_dtoa_r+0x43a>
 80061c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061c8:	2200      	movs	r2, #0
 80061ca:	4b53      	ldr	r3, [pc, #332]	@ (8006318 <_dtoa_r+0x708>)
 80061cc:	f7fa fa38 	bl	8000640 <__aeabi_dmul>
 80061d0:	2200      	movs	r2, #0
 80061d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061da:	4b4f      	ldr	r3, [pc, #316]	@ (8006318 <_dtoa_r+0x708>)
 80061dc:	f7fa fa30 	bl	8000640 <__aeabi_dmul>
 80061e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061e4:	e7c4      	b.n	8006170 <_dtoa_r+0x560>
 80061e6:	4631      	mov	r1, r6
 80061e8:	4628      	mov	r0, r5
 80061ea:	f7fa fa29 	bl	8000640 <__aeabi_dmul>
 80061ee:	4656      	mov	r6, sl
 80061f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061f4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80061f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061fa:	f7fa fcd1 	bl	8000ba0 <__aeabi_d2iz>
 80061fe:	4605      	mov	r5, r0
 8006200:	f7fa f9b4 	bl	800056c <__aeabi_i2d>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800620c:	f7fa f860 	bl	80002d0 <__aeabi_dsub>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	3530      	adds	r5, #48	@ 0x30
 8006216:	f806 5b01 	strb.w	r5, [r6], #1
 800621a:	42a6      	cmp	r6, r4
 800621c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	d124      	bne.n	8006270 <_dtoa_r+0x660>
 8006226:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800622a:	4b39      	ldr	r3, [pc, #228]	@ (8006310 <_dtoa_r+0x700>)
 800622c:	f7fa f852 	bl	80002d4 <__adddf3>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006238:	f7fa fc92 	bl	8000b60 <__aeabi_dcmpgt>
 800623c:	2800      	cmp	r0, #0
 800623e:	d145      	bne.n	80062cc <_dtoa_r+0x6bc>
 8006240:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006244:	2000      	movs	r0, #0
 8006246:	4932      	ldr	r1, [pc, #200]	@ (8006310 <_dtoa_r+0x700>)
 8006248:	f7fa f842 	bl	80002d0 <__aeabi_dsub>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006254:	f7fa fc66 	bl	8000b24 <__aeabi_dcmplt>
 8006258:	2800      	cmp	r0, #0
 800625a:	f43f aef6 	beq.w	800604a <_dtoa_r+0x43a>
 800625e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006260:	1e73      	subs	r3, r6, #1
 8006262:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006264:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006268:	2b30      	cmp	r3, #48	@ 0x30
 800626a:	d0f8      	beq.n	800625e <_dtoa_r+0x64e>
 800626c:	9f04      	ldr	r7, [sp, #16]
 800626e:	e73f      	b.n	80060f0 <_dtoa_r+0x4e0>
 8006270:	4b29      	ldr	r3, [pc, #164]	@ (8006318 <_dtoa_r+0x708>)
 8006272:	f7fa f9e5 	bl	8000640 <__aeabi_dmul>
 8006276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800627a:	e7bc      	b.n	80061f6 <_dtoa_r+0x5e6>
 800627c:	d10c      	bne.n	8006298 <_dtoa_r+0x688>
 800627e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006282:	2200      	movs	r2, #0
 8006284:	4b25      	ldr	r3, [pc, #148]	@ (800631c <_dtoa_r+0x70c>)
 8006286:	f7fa f9db 	bl	8000640 <__aeabi_dmul>
 800628a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800628e:	f7fa fc5d 	bl	8000b4c <__aeabi_dcmpge>
 8006292:	2800      	cmp	r0, #0
 8006294:	f000 815b 	beq.w	800654e <_dtoa_r+0x93e>
 8006298:	2400      	movs	r4, #0
 800629a:	4625      	mov	r5, r4
 800629c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800629e:	4656      	mov	r6, sl
 80062a0:	43db      	mvns	r3, r3
 80062a2:	9304      	str	r3, [sp, #16]
 80062a4:	2700      	movs	r7, #0
 80062a6:	4621      	mov	r1, r4
 80062a8:	4658      	mov	r0, fp
 80062aa:	f001 f8b9 	bl	8007420 <_Bfree>
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	d0dc      	beq.n	800626c <_dtoa_r+0x65c>
 80062b2:	b12f      	cbz	r7, 80062c0 <_dtoa_r+0x6b0>
 80062b4:	42af      	cmp	r7, r5
 80062b6:	d003      	beq.n	80062c0 <_dtoa_r+0x6b0>
 80062b8:	4639      	mov	r1, r7
 80062ba:	4658      	mov	r0, fp
 80062bc:	f001 f8b0 	bl	8007420 <_Bfree>
 80062c0:	4629      	mov	r1, r5
 80062c2:	4658      	mov	r0, fp
 80062c4:	f001 f8ac 	bl	8007420 <_Bfree>
 80062c8:	e7d0      	b.n	800626c <_dtoa_r+0x65c>
 80062ca:	9704      	str	r7, [sp, #16]
 80062cc:	4633      	mov	r3, r6
 80062ce:	461e      	mov	r6, r3
 80062d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062d4:	2a39      	cmp	r2, #57	@ 0x39
 80062d6:	d107      	bne.n	80062e8 <_dtoa_r+0x6d8>
 80062d8:	459a      	cmp	sl, r3
 80062da:	d1f8      	bne.n	80062ce <_dtoa_r+0x6be>
 80062dc:	9a04      	ldr	r2, [sp, #16]
 80062de:	3201      	adds	r2, #1
 80062e0:	9204      	str	r2, [sp, #16]
 80062e2:	2230      	movs	r2, #48	@ 0x30
 80062e4:	f88a 2000 	strb.w	r2, [sl]
 80062e8:	781a      	ldrb	r2, [r3, #0]
 80062ea:	3201      	adds	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	e7bd      	b.n	800626c <_dtoa_r+0x65c>
 80062f0:	2200      	movs	r2, #0
 80062f2:	4b09      	ldr	r3, [pc, #36]	@ (8006318 <_dtoa_r+0x708>)
 80062f4:	f7fa f9a4 	bl	8000640 <__aeabi_dmul>
 80062f8:	2200      	movs	r2, #0
 80062fa:	2300      	movs	r3, #0
 80062fc:	4604      	mov	r4, r0
 80062fe:	460d      	mov	r5, r1
 8006300:	f7fa fc06 	bl	8000b10 <__aeabi_dcmpeq>
 8006304:	2800      	cmp	r0, #0
 8006306:	f43f aebc 	beq.w	8006082 <_dtoa_r+0x472>
 800630a:	e6f1      	b.n	80060f0 <_dtoa_r+0x4e0>
 800630c:	080088e0 	.word	0x080088e0
 8006310:	3fe00000 	.word	0x3fe00000
 8006314:	3ff00000 	.word	0x3ff00000
 8006318:	40240000 	.word	0x40240000
 800631c:	40140000 	.word	0x40140000
 8006320:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006322:	2a00      	cmp	r2, #0
 8006324:	f000 80db 	beq.w	80064de <_dtoa_r+0x8ce>
 8006328:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800632a:	2a01      	cmp	r2, #1
 800632c:	f300 80bf 	bgt.w	80064ae <_dtoa_r+0x89e>
 8006330:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006332:	2a00      	cmp	r2, #0
 8006334:	f000 80b7 	beq.w	80064a6 <_dtoa_r+0x896>
 8006338:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800633c:	4646      	mov	r6, r8
 800633e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006340:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006342:	2101      	movs	r1, #1
 8006344:	441a      	add	r2, r3
 8006346:	4658      	mov	r0, fp
 8006348:	4498      	add	r8, r3
 800634a:	9209      	str	r2, [sp, #36]	@ 0x24
 800634c:	f001 f966 	bl	800761c <__i2b>
 8006350:	4605      	mov	r5, r0
 8006352:	b15e      	cbz	r6, 800636c <_dtoa_r+0x75c>
 8006354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006356:	2b00      	cmp	r3, #0
 8006358:	dd08      	ble.n	800636c <_dtoa_r+0x75c>
 800635a:	42b3      	cmp	r3, r6
 800635c:	bfa8      	it	ge
 800635e:	4633      	movge	r3, r6
 8006360:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006362:	eba8 0803 	sub.w	r8, r8, r3
 8006366:	1af6      	subs	r6, r6, r3
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	9309      	str	r3, [sp, #36]	@ 0x24
 800636c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800636e:	b1f3      	cbz	r3, 80063ae <_dtoa_r+0x79e>
 8006370:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 80b7 	beq.w	80064e6 <_dtoa_r+0x8d6>
 8006378:	b18c      	cbz	r4, 800639e <_dtoa_r+0x78e>
 800637a:	4629      	mov	r1, r5
 800637c:	4622      	mov	r2, r4
 800637e:	4658      	mov	r0, fp
 8006380:	f001 fa0a 	bl	8007798 <__pow5mult>
 8006384:	464a      	mov	r2, r9
 8006386:	4601      	mov	r1, r0
 8006388:	4605      	mov	r5, r0
 800638a:	4658      	mov	r0, fp
 800638c:	f001 f95c 	bl	8007648 <__multiply>
 8006390:	4649      	mov	r1, r9
 8006392:	9004      	str	r0, [sp, #16]
 8006394:	4658      	mov	r0, fp
 8006396:	f001 f843 	bl	8007420 <_Bfree>
 800639a:	9b04      	ldr	r3, [sp, #16]
 800639c:	4699      	mov	r9, r3
 800639e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063a0:	1b1a      	subs	r2, r3, r4
 80063a2:	d004      	beq.n	80063ae <_dtoa_r+0x79e>
 80063a4:	4649      	mov	r1, r9
 80063a6:	4658      	mov	r0, fp
 80063a8:	f001 f9f6 	bl	8007798 <__pow5mult>
 80063ac:	4681      	mov	r9, r0
 80063ae:	2101      	movs	r1, #1
 80063b0:	4658      	mov	r0, fp
 80063b2:	f001 f933 	bl	800761c <__i2b>
 80063b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063b8:	4604      	mov	r4, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 81c9 	beq.w	8006752 <_dtoa_r+0xb42>
 80063c0:	461a      	mov	r2, r3
 80063c2:	4601      	mov	r1, r0
 80063c4:	4658      	mov	r0, fp
 80063c6:	f001 f9e7 	bl	8007798 <__pow5mult>
 80063ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063cc:	4604      	mov	r4, r0
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	f300 808f 	bgt.w	80064f2 <_dtoa_r+0x8e2>
 80063d4:	9b02      	ldr	r3, [sp, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f040 8087 	bne.w	80064ea <_dtoa_r+0x8da>
 80063dc:	9b03      	ldr	r3, [sp, #12]
 80063de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f040 8083 	bne.w	80064ee <_dtoa_r+0x8de>
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063ee:	0d1b      	lsrs	r3, r3, #20
 80063f0:	051b      	lsls	r3, r3, #20
 80063f2:	b12b      	cbz	r3, 8006400 <_dtoa_r+0x7f0>
 80063f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f6:	f108 0801 	add.w	r8, r8, #1
 80063fa:	3301      	adds	r3, #1
 80063fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80063fe:	2301      	movs	r3, #1
 8006400:	930a      	str	r3, [sp, #40]	@ 0x28
 8006402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 81aa 	beq.w	800675e <_dtoa_r+0xb4e>
 800640a:	6923      	ldr	r3, [r4, #16]
 800640c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006410:	6918      	ldr	r0, [r3, #16]
 8006412:	f001 f8b7 	bl	8007584 <__hi0bits>
 8006416:	f1c0 0020 	rsb	r0, r0, #32
 800641a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800641c:	4418      	add	r0, r3
 800641e:	f010 001f 	ands.w	r0, r0, #31
 8006422:	d071      	beq.n	8006508 <_dtoa_r+0x8f8>
 8006424:	f1c0 0320 	rsb	r3, r0, #32
 8006428:	2b04      	cmp	r3, #4
 800642a:	dd65      	ble.n	80064f8 <_dtoa_r+0x8e8>
 800642c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800642e:	f1c0 001c 	rsb	r0, r0, #28
 8006432:	4403      	add	r3, r0
 8006434:	4480      	add	r8, r0
 8006436:	4406      	add	r6, r0
 8006438:	9309      	str	r3, [sp, #36]	@ 0x24
 800643a:	f1b8 0f00 	cmp.w	r8, #0
 800643e:	dd05      	ble.n	800644c <_dtoa_r+0x83c>
 8006440:	4649      	mov	r1, r9
 8006442:	4642      	mov	r2, r8
 8006444:	4658      	mov	r0, fp
 8006446:	f001 fa01 	bl	800784c <__lshift>
 800644a:	4681      	mov	r9, r0
 800644c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	dd05      	ble.n	800645e <_dtoa_r+0x84e>
 8006452:	4621      	mov	r1, r4
 8006454:	461a      	mov	r2, r3
 8006456:	4658      	mov	r0, fp
 8006458:	f001 f9f8 	bl	800784c <__lshift>
 800645c:	4604      	mov	r4, r0
 800645e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006460:	2b00      	cmp	r3, #0
 8006462:	d053      	beq.n	800650c <_dtoa_r+0x8fc>
 8006464:	4621      	mov	r1, r4
 8006466:	4648      	mov	r0, r9
 8006468:	f001 fa5c 	bl	8007924 <__mcmp>
 800646c:	2800      	cmp	r0, #0
 800646e:	da4d      	bge.n	800650c <_dtoa_r+0x8fc>
 8006470:	1e7b      	subs	r3, r7, #1
 8006472:	4649      	mov	r1, r9
 8006474:	9304      	str	r3, [sp, #16]
 8006476:	220a      	movs	r2, #10
 8006478:	2300      	movs	r3, #0
 800647a:	4658      	mov	r0, fp
 800647c:	f000 fff2 	bl	8007464 <__multadd>
 8006480:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006482:	4681      	mov	r9, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 816c 	beq.w	8006762 <_dtoa_r+0xb52>
 800648a:	2300      	movs	r3, #0
 800648c:	4629      	mov	r1, r5
 800648e:	220a      	movs	r2, #10
 8006490:	4658      	mov	r0, fp
 8006492:	f000 ffe7 	bl	8007464 <__multadd>
 8006496:	9b08      	ldr	r3, [sp, #32]
 8006498:	4605      	mov	r5, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	dc61      	bgt.n	8006562 <_dtoa_r+0x952>
 800649e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	dc3b      	bgt.n	800651c <_dtoa_r+0x90c>
 80064a4:	e05d      	b.n	8006562 <_dtoa_r+0x952>
 80064a6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064a8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064ac:	e746      	b.n	800633c <_dtoa_r+0x72c>
 80064ae:	9b07      	ldr	r3, [sp, #28]
 80064b0:	1e5c      	subs	r4, r3, #1
 80064b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064b4:	42a3      	cmp	r3, r4
 80064b6:	bfbf      	itttt	lt
 80064b8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064ba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80064bc:	1ae3      	sublt	r3, r4, r3
 80064be:	18d2      	addlt	r2, r2, r3
 80064c0:	bfa8      	it	ge
 80064c2:	1b1c      	subge	r4, r3, r4
 80064c4:	9b07      	ldr	r3, [sp, #28]
 80064c6:	bfbe      	ittt	lt
 80064c8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064ca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80064cc:	2400      	movlt	r4, #0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	bfb5      	itete	lt
 80064d2:	eba8 0603 	sublt.w	r6, r8, r3
 80064d6:	4646      	movge	r6, r8
 80064d8:	2300      	movlt	r3, #0
 80064da:	9b07      	ldrge	r3, [sp, #28]
 80064dc:	e730      	b.n	8006340 <_dtoa_r+0x730>
 80064de:	4646      	mov	r6, r8
 80064e0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064e2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064e4:	e735      	b.n	8006352 <_dtoa_r+0x742>
 80064e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064e8:	e75c      	b.n	80063a4 <_dtoa_r+0x794>
 80064ea:	2300      	movs	r3, #0
 80064ec:	e788      	b.n	8006400 <_dtoa_r+0x7f0>
 80064ee:	9b02      	ldr	r3, [sp, #8]
 80064f0:	e786      	b.n	8006400 <_dtoa_r+0x7f0>
 80064f2:	2300      	movs	r3, #0
 80064f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80064f6:	e788      	b.n	800640a <_dtoa_r+0x7fa>
 80064f8:	d09f      	beq.n	800643a <_dtoa_r+0x82a>
 80064fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064fc:	331c      	adds	r3, #28
 80064fe:	441a      	add	r2, r3
 8006500:	4498      	add	r8, r3
 8006502:	441e      	add	r6, r3
 8006504:	9209      	str	r2, [sp, #36]	@ 0x24
 8006506:	e798      	b.n	800643a <_dtoa_r+0x82a>
 8006508:	4603      	mov	r3, r0
 800650a:	e7f6      	b.n	80064fa <_dtoa_r+0x8ea>
 800650c:	9b07      	ldr	r3, [sp, #28]
 800650e:	9704      	str	r7, [sp, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	dc20      	bgt.n	8006556 <_dtoa_r+0x946>
 8006514:	9308      	str	r3, [sp, #32]
 8006516:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006518:	2b02      	cmp	r3, #2
 800651a:	dd1e      	ble.n	800655a <_dtoa_r+0x94a>
 800651c:	9b08      	ldr	r3, [sp, #32]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f47f aebc 	bne.w	800629c <_dtoa_r+0x68c>
 8006524:	4621      	mov	r1, r4
 8006526:	2205      	movs	r2, #5
 8006528:	4658      	mov	r0, fp
 800652a:	f000 ff9b 	bl	8007464 <__multadd>
 800652e:	4601      	mov	r1, r0
 8006530:	4604      	mov	r4, r0
 8006532:	4648      	mov	r0, r9
 8006534:	f001 f9f6 	bl	8007924 <__mcmp>
 8006538:	2800      	cmp	r0, #0
 800653a:	f77f aeaf 	ble.w	800629c <_dtoa_r+0x68c>
 800653e:	2331      	movs	r3, #49	@ 0x31
 8006540:	4656      	mov	r6, sl
 8006542:	f806 3b01 	strb.w	r3, [r6], #1
 8006546:	9b04      	ldr	r3, [sp, #16]
 8006548:	3301      	adds	r3, #1
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	e6aa      	b.n	80062a4 <_dtoa_r+0x694>
 800654e:	9c07      	ldr	r4, [sp, #28]
 8006550:	9704      	str	r7, [sp, #16]
 8006552:	4625      	mov	r5, r4
 8006554:	e7f3      	b.n	800653e <_dtoa_r+0x92e>
 8006556:	9b07      	ldr	r3, [sp, #28]
 8006558:	9308      	str	r3, [sp, #32]
 800655a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8104 	beq.w	800676a <_dtoa_r+0xb5a>
 8006562:	2e00      	cmp	r6, #0
 8006564:	dd05      	ble.n	8006572 <_dtoa_r+0x962>
 8006566:	4629      	mov	r1, r5
 8006568:	4632      	mov	r2, r6
 800656a:	4658      	mov	r0, fp
 800656c:	f001 f96e 	bl	800784c <__lshift>
 8006570:	4605      	mov	r5, r0
 8006572:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006574:	2b00      	cmp	r3, #0
 8006576:	d05a      	beq.n	800662e <_dtoa_r+0xa1e>
 8006578:	4658      	mov	r0, fp
 800657a:	6869      	ldr	r1, [r5, #4]
 800657c:	f000 ff10 	bl	80073a0 <_Balloc>
 8006580:	4606      	mov	r6, r0
 8006582:	b928      	cbnz	r0, 8006590 <_dtoa_r+0x980>
 8006584:	4602      	mov	r2, r0
 8006586:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800658a:	4b83      	ldr	r3, [pc, #524]	@ (8006798 <_dtoa_r+0xb88>)
 800658c:	f7ff bb54 	b.w	8005c38 <_dtoa_r+0x28>
 8006590:	692a      	ldr	r2, [r5, #16]
 8006592:	f105 010c 	add.w	r1, r5, #12
 8006596:	3202      	adds	r2, #2
 8006598:	0092      	lsls	r2, r2, #2
 800659a:	300c      	adds	r0, #12
 800659c:	f7ff fa95 	bl	8005aca <memcpy>
 80065a0:	2201      	movs	r2, #1
 80065a2:	4631      	mov	r1, r6
 80065a4:	4658      	mov	r0, fp
 80065a6:	f001 f951 	bl	800784c <__lshift>
 80065aa:	462f      	mov	r7, r5
 80065ac:	4605      	mov	r5, r0
 80065ae:	f10a 0301 	add.w	r3, sl, #1
 80065b2:	9307      	str	r3, [sp, #28]
 80065b4:	9b08      	ldr	r3, [sp, #32]
 80065b6:	4453      	add	r3, sl
 80065b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ba:	9b02      	ldr	r3, [sp, #8]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c2:	9b07      	ldr	r3, [sp, #28]
 80065c4:	4621      	mov	r1, r4
 80065c6:	3b01      	subs	r3, #1
 80065c8:	4648      	mov	r0, r9
 80065ca:	9302      	str	r3, [sp, #8]
 80065cc:	f7ff fa96 	bl	8005afc <quorem>
 80065d0:	4639      	mov	r1, r7
 80065d2:	9008      	str	r0, [sp, #32]
 80065d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065d8:	4648      	mov	r0, r9
 80065da:	f001 f9a3 	bl	8007924 <__mcmp>
 80065de:	462a      	mov	r2, r5
 80065e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80065e2:	4621      	mov	r1, r4
 80065e4:	4658      	mov	r0, fp
 80065e6:	f001 f9b9 	bl	800795c <__mdiff>
 80065ea:	68c2      	ldr	r2, [r0, #12]
 80065ec:	4606      	mov	r6, r0
 80065ee:	bb02      	cbnz	r2, 8006632 <_dtoa_r+0xa22>
 80065f0:	4601      	mov	r1, r0
 80065f2:	4648      	mov	r0, r9
 80065f4:	f001 f996 	bl	8007924 <__mcmp>
 80065f8:	4602      	mov	r2, r0
 80065fa:	4631      	mov	r1, r6
 80065fc:	4658      	mov	r0, fp
 80065fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8006600:	f000 ff0e 	bl	8007420 <_Bfree>
 8006604:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006606:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006608:	9e07      	ldr	r6, [sp, #28]
 800660a:	ea43 0102 	orr.w	r1, r3, r2
 800660e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006610:	4319      	orrs	r1, r3
 8006612:	d110      	bne.n	8006636 <_dtoa_r+0xa26>
 8006614:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006618:	d029      	beq.n	800666e <_dtoa_r+0xa5e>
 800661a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	dd02      	ble.n	8006626 <_dtoa_r+0xa16>
 8006620:	9b08      	ldr	r3, [sp, #32]
 8006622:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006626:	9b02      	ldr	r3, [sp, #8]
 8006628:	f883 8000 	strb.w	r8, [r3]
 800662c:	e63b      	b.n	80062a6 <_dtoa_r+0x696>
 800662e:	4628      	mov	r0, r5
 8006630:	e7bb      	b.n	80065aa <_dtoa_r+0x99a>
 8006632:	2201      	movs	r2, #1
 8006634:	e7e1      	b.n	80065fa <_dtoa_r+0x9ea>
 8006636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006638:	2b00      	cmp	r3, #0
 800663a:	db04      	blt.n	8006646 <_dtoa_r+0xa36>
 800663c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800663e:	430b      	orrs	r3, r1
 8006640:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006642:	430b      	orrs	r3, r1
 8006644:	d120      	bne.n	8006688 <_dtoa_r+0xa78>
 8006646:	2a00      	cmp	r2, #0
 8006648:	dded      	ble.n	8006626 <_dtoa_r+0xa16>
 800664a:	4649      	mov	r1, r9
 800664c:	2201      	movs	r2, #1
 800664e:	4658      	mov	r0, fp
 8006650:	f001 f8fc 	bl	800784c <__lshift>
 8006654:	4621      	mov	r1, r4
 8006656:	4681      	mov	r9, r0
 8006658:	f001 f964 	bl	8007924 <__mcmp>
 800665c:	2800      	cmp	r0, #0
 800665e:	dc03      	bgt.n	8006668 <_dtoa_r+0xa58>
 8006660:	d1e1      	bne.n	8006626 <_dtoa_r+0xa16>
 8006662:	f018 0f01 	tst.w	r8, #1
 8006666:	d0de      	beq.n	8006626 <_dtoa_r+0xa16>
 8006668:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800666c:	d1d8      	bne.n	8006620 <_dtoa_r+0xa10>
 800666e:	2339      	movs	r3, #57	@ 0x39
 8006670:	9a02      	ldr	r2, [sp, #8]
 8006672:	7013      	strb	r3, [r2, #0]
 8006674:	4633      	mov	r3, r6
 8006676:	461e      	mov	r6, r3
 8006678:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800667c:	3b01      	subs	r3, #1
 800667e:	2a39      	cmp	r2, #57	@ 0x39
 8006680:	d052      	beq.n	8006728 <_dtoa_r+0xb18>
 8006682:	3201      	adds	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e60e      	b.n	80062a6 <_dtoa_r+0x696>
 8006688:	2a00      	cmp	r2, #0
 800668a:	dd07      	ble.n	800669c <_dtoa_r+0xa8c>
 800668c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006690:	d0ed      	beq.n	800666e <_dtoa_r+0xa5e>
 8006692:	9a02      	ldr	r2, [sp, #8]
 8006694:	f108 0301 	add.w	r3, r8, #1
 8006698:	7013      	strb	r3, [r2, #0]
 800669a:	e604      	b.n	80062a6 <_dtoa_r+0x696>
 800669c:	9b07      	ldr	r3, [sp, #28]
 800669e:	9a07      	ldr	r2, [sp, #28]
 80066a0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d028      	beq.n	80066fc <_dtoa_r+0xaec>
 80066aa:	4649      	mov	r1, r9
 80066ac:	2300      	movs	r3, #0
 80066ae:	220a      	movs	r2, #10
 80066b0:	4658      	mov	r0, fp
 80066b2:	f000 fed7 	bl	8007464 <__multadd>
 80066b6:	42af      	cmp	r7, r5
 80066b8:	4681      	mov	r9, r0
 80066ba:	f04f 0300 	mov.w	r3, #0
 80066be:	f04f 020a 	mov.w	r2, #10
 80066c2:	4639      	mov	r1, r7
 80066c4:	4658      	mov	r0, fp
 80066c6:	d107      	bne.n	80066d8 <_dtoa_r+0xac8>
 80066c8:	f000 fecc 	bl	8007464 <__multadd>
 80066cc:	4607      	mov	r7, r0
 80066ce:	4605      	mov	r5, r0
 80066d0:	9b07      	ldr	r3, [sp, #28]
 80066d2:	3301      	adds	r3, #1
 80066d4:	9307      	str	r3, [sp, #28]
 80066d6:	e774      	b.n	80065c2 <_dtoa_r+0x9b2>
 80066d8:	f000 fec4 	bl	8007464 <__multadd>
 80066dc:	4629      	mov	r1, r5
 80066de:	4607      	mov	r7, r0
 80066e0:	2300      	movs	r3, #0
 80066e2:	220a      	movs	r2, #10
 80066e4:	4658      	mov	r0, fp
 80066e6:	f000 febd 	bl	8007464 <__multadd>
 80066ea:	4605      	mov	r5, r0
 80066ec:	e7f0      	b.n	80066d0 <_dtoa_r+0xac0>
 80066ee:	9b08      	ldr	r3, [sp, #32]
 80066f0:	2700      	movs	r7, #0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bfcc      	ite	gt
 80066f6:	461e      	movgt	r6, r3
 80066f8:	2601      	movle	r6, #1
 80066fa:	4456      	add	r6, sl
 80066fc:	4649      	mov	r1, r9
 80066fe:	2201      	movs	r2, #1
 8006700:	4658      	mov	r0, fp
 8006702:	f001 f8a3 	bl	800784c <__lshift>
 8006706:	4621      	mov	r1, r4
 8006708:	4681      	mov	r9, r0
 800670a:	f001 f90b 	bl	8007924 <__mcmp>
 800670e:	2800      	cmp	r0, #0
 8006710:	dcb0      	bgt.n	8006674 <_dtoa_r+0xa64>
 8006712:	d102      	bne.n	800671a <_dtoa_r+0xb0a>
 8006714:	f018 0f01 	tst.w	r8, #1
 8006718:	d1ac      	bne.n	8006674 <_dtoa_r+0xa64>
 800671a:	4633      	mov	r3, r6
 800671c:	461e      	mov	r6, r3
 800671e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006722:	2a30      	cmp	r2, #48	@ 0x30
 8006724:	d0fa      	beq.n	800671c <_dtoa_r+0xb0c>
 8006726:	e5be      	b.n	80062a6 <_dtoa_r+0x696>
 8006728:	459a      	cmp	sl, r3
 800672a:	d1a4      	bne.n	8006676 <_dtoa_r+0xa66>
 800672c:	9b04      	ldr	r3, [sp, #16]
 800672e:	3301      	adds	r3, #1
 8006730:	9304      	str	r3, [sp, #16]
 8006732:	2331      	movs	r3, #49	@ 0x31
 8006734:	f88a 3000 	strb.w	r3, [sl]
 8006738:	e5b5      	b.n	80062a6 <_dtoa_r+0x696>
 800673a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800673c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800679c <_dtoa_r+0xb8c>
 8006740:	b11b      	cbz	r3, 800674a <_dtoa_r+0xb3a>
 8006742:	f10a 0308 	add.w	r3, sl, #8
 8006746:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	4650      	mov	r0, sl
 800674c:	b017      	add	sp, #92	@ 0x5c
 800674e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006752:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006754:	2b01      	cmp	r3, #1
 8006756:	f77f ae3d 	ble.w	80063d4 <_dtoa_r+0x7c4>
 800675a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800675c:	930a      	str	r3, [sp, #40]	@ 0x28
 800675e:	2001      	movs	r0, #1
 8006760:	e65b      	b.n	800641a <_dtoa_r+0x80a>
 8006762:	9b08      	ldr	r3, [sp, #32]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f77f aed6 	ble.w	8006516 <_dtoa_r+0x906>
 800676a:	4656      	mov	r6, sl
 800676c:	4621      	mov	r1, r4
 800676e:	4648      	mov	r0, r9
 8006770:	f7ff f9c4 	bl	8005afc <quorem>
 8006774:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006778:	9b08      	ldr	r3, [sp, #32]
 800677a:	f806 8b01 	strb.w	r8, [r6], #1
 800677e:	eba6 020a 	sub.w	r2, r6, sl
 8006782:	4293      	cmp	r3, r2
 8006784:	ddb3      	ble.n	80066ee <_dtoa_r+0xade>
 8006786:	4649      	mov	r1, r9
 8006788:	2300      	movs	r3, #0
 800678a:	220a      	movs	r2, #10
 800678c:	4658      	mov	r0, fp
 800678e:	f000 fe69 	bl	8007464 <__multadd>
 8006792:	4681      	mov	r9, r0
 8006794:	e7ea      	b.n	800676c <_dtoa_r+0xb5c>
 8006796:	bf00      	nop
 8006798:	080087cd 	.word	0x080087cd
 800679c:	08008751 	.word	0x08008751

080067a0 <rshift>:
 80067a0:	6903      	ldr	r3, [r0, #16]
 80067a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80067aa:	f100 0414 	add.w	r4, r0, #20
 80067ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80067b2:	dd46      	ble.n	8006842 <rshift+0xa2>
 80067b4:	f011 011f 	ands.w	r1, r1, #31
 80067b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80067bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80067c0:	d10c      	bne.n	80067dc <rshift+0x3c>
 80067c2:	4629      	mov	r1, r5
 80067c4:	f100 0710 	add.w	r7, r0, #16
 80067c8:	42b1      	cmp	r1, r6
 80067ca:	d335      	bcc.n	8006838 <rshift+0x98>
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	1eea      	subs	r2, r5, #3
 80067d2:	4296      	cmp	r6, r2
 80067d4:	bf38      	it	cc
 80067d6:	2300      	movcc	r3, #0
 80067d8:	4423      	add	r3, r4
 80067da:	e015      	b.n	8006808 <rshift+0x68>
 80067dc:	46a1      	mov	r9, r4
 80067de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80067e2:	f1c1 0820 	rsb	r8, r1, #32
 80067e6:	40cf      	lsrs	r7, r1
 80067e8:	f105 0e04 	add.w	lr, r5, #4
 80067ec:	4576      	cmp	r6, lr
 80067ee:	46f4      	mov	ip, lr
 80067f0:	d816      	bhi.n	8006820 <rshift+0x80>
 80067f2:	1a9a      	subs	r2, r3, r2
 80067f4:	0092      	lsls	r2, r2, #2
 80067f6:	3a04      	subs	r2, #4
 80067f8:	3501      	adds	r5, #1
 80067fa:	42ae      	cmp	r6, r5
 80067fc:	bf38      	it	cc
 80067fe:	2200      	movcc	r2, #0
 8006800:	18a3      	adds	r3, r4, r2
 8006802:	50a7      	str	r7, [r4, r2]
 8006804:	b107      	cbz	r7, 8006808 <rshift+0x68>
 8006806:	3304      	adds	r3, #4
 8006808:	42a3      	cmp	r3, r4
 800680a:	eba3 0204 	sub.w	r2, r3, r4
 800680e:	bf08      	it	eq
 8006810:	2300      	moveq	r3, #0
 8006812:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006816:	6102      	str	r2, [r0, #16]
 8006818:	bf08      	it	eq
 800681a:	6143      	streq	r3, [r0, #20]
 800681c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006820:	f8dc c000 	ldr.w	ip, [ip]
 8006824:	fa0c fc08 	lsl.w	ip, ip, r8
 8006828:	ea4c 0707 	orr.w	r7, ip, r7
 800682c:	f849 7b04 	str.w	r7, [r9], #4
 8006830:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006834:	40cf      	lsrs	r7, r1
 8006836:	e7d9      	b.n	80067ec <rshift+0x4c>
 8006838:	f851 cb04 	ldr.w	ip, [r1], #4
 800683c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006840:	e7c2      	b.n	80067c8 <rshift+0x28>
 8006842:	4623      	mov	r3, r4
 8006844:	e7e0      	b.n	8006808 <rshift+0x68>

08006846 <__hexdig_fun>:
 8006846:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800684a:	2b09      	cmp	r3, #9
 800684c:	d802      	bhi.n	8006854 <__hexdig_fun+0xe>
 800684e:	3820      	subs	r0, #32
 8006850:	b2c0      	uxtb	r0, r0
 8006852:	4770      	bx	lr
 8006854:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006858:	2b05      	cmp	r3, #5
 800685a:	d801      	bhi.n	8006860 <__hexdig_fun+0x1a>
 800685c:	3847      	subs	r0, #71	@ 0x47
 800685e:	e7f7      	b.n	8006850 <__hexdig_fun+0xa>
 8006860:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006864:	2b05      	cmp	r3, #5
 8006866:	d801      	bhi.n	800686c <__hexdig_fun+0x26>
 8006868:	3827      	subs	r0, #39	@ 0x27
 800686a:	e7f1      	b.n	8006850 <__hexdig_fun+0xa>
 800686c:	2000      	movs	r0, #0
 800686e:	4770      	bx	lr

08006870 <__gethex>:
 8006870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	468a      	mov	sl, r1
 8006876:	4690      	mov	r8, r2
 8006878:	b085      	sub	sp, #20
 800687a:	9302      	str	r3, [sp, #8]
 800687c:	680b      	ldr	r3, [r1, #0]
 800687e:	9001      	str	r0, [sp, #4]
 8006880:	1c9c      	adds	r4, r3, #2
 8006882:	46a1      	mov	r9, r4
 8006884:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006888:	2830      	cmp	r0, #48	@ 0x30
 800688a:	d0fa      	beq.n	8006882 <__gethex+0x12>
 800688c:	eba9 0303 	sub.w	r3, r9, r3
 8006890:	f1a3 0b02 	sub.w	fp, r3, #2
 8006894:	f7ff ffd7 	bl	8006846 <__hexdig_fun>
 8006898:	4605      	mov	r5, r0
 800689a:	2800      	cmp	r0, #0
 800689c:	d168      	bne.n	8006970 <__gethex+0x100>
 800689e:	2201      	movs	r2, #1
 80068a0:	4648      	mov	r0, r9
 80068a2:	499f      	ldr	r1, [pc, #636]	@ (8006b20 <__gethex+0x2b0>)
 80068a4:	f7ff f8b8 	bl	8005a18 <strncmp>
 80068a8:	4607      	mov	r7, r0
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d167      	bne.n	800697e <__gethex+0x10e>
 80068ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 80068b2:	4626      	mov	r6, r4
 80068b4:	f7ff ffc7 	bl	8006846 <__hexdig_fun>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d062      	beq.n	8006982 <__gethex+0x112>
 80068bc:	4623      	mov	r3, r4
 80068be:	7818      	ldrb	r0, [r3, #0]
 80068c0:	4699      	mov	r9, r3
 80068c2:	2830      	cmp	r0, #48	@ 0x30
 80068c4:	f103 0301 	add.w	r3, r3, #1
 80068c8:	d0f9      	beq.n	80068be <__gethex+0x4e>
 80068ca:	f7ff ffbc 	bl	8006846 <__hexdig_fun>
 80068ce:	fab0 f580 	clz	r5, r0
 80068d2:	f04f 0b01 	mov.w	fp, #1
 80068d6:	096d      	lsrs	r5, r5, #5
 80068d8:	464a      	mov	r2, r9
 80068da:	4616      	mov	r6, r2
 80068dc:	7830      	ldrb	r0, [r6, #0]
 80068de:	3201      	adds	r2, #1
 80068e0:	f7ff ffb1 	bl	8006846 <__hexdig_fun>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d1f8      	bne.n	80068da <__gethex+0x6a>
 80068e8:	2201      	movs	r2, #1
 80068ea:	4630      	mov	r0, r6
 80068ec:	498c      	ldr	r1, [pc, #560]	@ (8006b20 <__gethex+0x2b0>)
 80068ee:	f7ff f893 	bl	8005a18 <strncmp>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	d13f      	bne.n	8006976 <__gethex+0x106>
 80068f6:	b944      	cbnz	r4, 800690a <__gethex+0x9a>
 80068f8:	1c74      	adds	r4, r6, #1
 80068fa:	4622      	mov	r2, r4
 80068fc:	4616      	mov	r6, r2
 80068fe:	7830      	ldrb	r0, [r6, #0]
 8006900:	3201      	adds	r2, #1
 8006902:	f7ff ffa0 	bl	8006846 <__hexdig_fun>
 8006906:	2800      	cmp	r0, #0
 8006908:	d1f8      	bne.n	80068fc <__gethex+0x8c>
 800690a:	1ba4      	subs	r4, r4, r6
 800690c:	00a7      	lsls	r7, r4, #2
 800690e:	7833      	ldrb	r3, [r6, #0]
 8006910:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006914:	2b50      	cmp	r3, #80	@ 0x50
 8006916:	d13e      	bne.n	8006996 <__gethex+0x126>
 8006918:	7873      	ldrb	r3, [r6, #1]
 800691a:	2b2b      	cmp	r3, #43	@ 0x2b
 800691c:	d033      	beq.n	8006986 <__gethex+0x116>
 800691e:	2b2d      	cmp	r3, #45	@ 0x2d
 8006920:	d034      	beq.n	800698c <__gethex+0x11c>
 8006922:	2400      	movs	r4, #0
 8006924:	1c71      	adds	r1, r6, #1
 8006926:	7808      	ldrb	r0, [r1, #0]
 8006928:	f7ff ff8d 	bl	8006846 <__hexdig_fun>
 800692c:	1e43      	subs	r3, r0, #1
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b18      	cmp	r3, #24
 8006932:	d830      	bhi.n	8006996 <__gethex+0x126>
 8006934:	f1a0 0210 	sub.w	r2, r0, #16
 8006938:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800693c:	f7ff ff83 	bl	8006846 <__hexdig_fun>
 8006940:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8006944:	fa5f fc8c 	uxtb.w	ip, ip
 8006948:	f1bc 0f18 	cmp.w	ip, #24
 800694c:	f04f 030a 	mov.w	r3, #10
 8006950:	d91e      	bls.n	8006990 <__gethex+0x120>
 8006952:	b104      	cbz	r4, 8006956 <__gethex+0xe6>
 8006954:	4252      	negs	r2, r2
 8006956:	4417      	add	r7, r2
 8006958:	f8ca 1000 	str.w	r1, [sl]
 800695c:	b1ed      	cbz	r5, 800699a <__gethex+0x12a>
 800695e:	f1bb 0f00 	cmp.w	fp, #0
 8006962:	bf0c      	ite	eq
 8006964:	2506      	moveq	r5, #6
 8006966:	2500      	movne	r5, #0
 8006968:	4628      	mov	r0, r5
 800696a:	b005      	add	sp, #20
 800696c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006970:	2500      	movs	r5, #0
 8006972:	462c      	mov	r4, r5
 8006974:	e7b0      	b.n	80068d8 <__gethex+0x68>
 8006976:	2c00      	cmp	r4, #0
 8006978:	d1c7      	bne.n	800690a <__gethex+0x9a>
 800697a:	4627      	mov	r7, r4
 800697c:	e7c7      	b.n	800690e <__gethex+0x9e>
 800697e:	464e      	mov	r6, r9
 8006980:	462f      	mov	r7, r5
 8006982:	2501      	movs	r5, #1
 8006984:	e7c3      	b.n	800690e <__gethex+0x9e>
 8006986:	2400      	movs	r4, #0
 8006988:	1cb1      	adds	r1, r6, #2
 800698a:	e7cc      	b.n	8006926 <__gethex+0xb6>
 800698c:	2401      	movs	r4, #1
 800698e:	e7fb      	b.n	8006988 <__gethex+0x118>
 8006990:	fb03 0002 	mla	r0, r3, r2, r0
 8006994:	e7ce      	b.n	8006934 <__gethex+0xc4>
 8006996:	4631      	mov	r1, r6
 8006998:	e7de      	b.n	8006958 <__gethex+0xe8>
 800699a:	4629      	mov	r1, r5
 800699c:	eba6 0309 	sub.w	r3, r6, r9
 80069a0:	3b01      	subs	r3, #1
 80069a2:	2b07      	cmp	r3, #7
 80069a4:	dc0a      	bgt.n	80069bc <__gethex+0x14c>
 80069a6:	9801      	ldr	r0, [sp, #4]
 80069a8:	f000 fcfa 	bl	80073a0 <_Balloc>
 80069ac:	4604      	mov	r4, r0
 80069ae:	b940      	cbnz	r0, 80069c2 <__gethex+0x152>
 80069b0:	4602      	mov	r2, r0
 80069b2:	21e4      	movs	r1, #228	@ 0xe4
 80069b4:	4b5b      	ldr	r3, [pc, #364]	@ (8006b24 <__gethex+0x2b4>)
 80069b6:	485c      	ldr	r0, [pc, #368]	@ (8006b28 <__gethex+0x2b8>)
 80069b8:	f001 fa86 	bl	8007ec8 <__assert_func>
 80069bc:	3101      	adds	r1, #1
 80069be:	105b      	asrs	r3, r3, #1
 80069c0:	e7ef      	b.n	80069a2 <__gethex+0x132>
 80069c2:	2300      	movs	r3, #0
 80069c4:	f100 0a14 	add.w	sl, r0, #20
 80069c8:	4655      	mov	r5, sl
 80069ca:	469b      	mov	fp, r3
 80069cc:	45b1      	cmp	r9, r6
 80069ce:	d337      	bcc.n	8006a40 <__gethex+0x1d0>
 80069d0:	f845 bb04 	str.w	fp, [r5], #4
 80069d4:	eba5 050a 	sub.w	r5, r5, sl
 80069d8:	10ad      	asrs	r5, r5, #2
 80069da:	6125      	str	r5, [r4, #16]
 80069dc:	4658      	mov	r0, fp
 80069de:	f000 fdd1 	bl	8007584 <__hi0bits>
 80069e2:	016d      	lsls	r5, r5, #5
 80069e4:	f8d8 6000 	ldr.w	r6, [r8]
 80069e8:	1a2d      	subs	r5, r5, r0
 80069ea:	42b5      	cmp	r5, r6
 80069ec:	dd54      	ble.n	8006a98 <__gethex+0x228>
 80069ee:	1bad      	subs	r5, r5, r6
 80069f0:	4629      	mov	r1, r5
 80069f2:	4620      	mov	r0, r4
 80069f4:	f001 f959 	bl	8007caa <__any_on>
 80069f8:	4681      	mov	r9, r0
 80069fa:	b178      	cbz	r0, 8006a1c <__gethex+0x1ac>
 80069fc:	f04f 0901 	mov.w	r9, #1
 8006a00:	1e6b      	subs	r3, r5, #1
 8006a02:	1159      	asrs	r1, r3, #5
 8006a04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006a08:	f003 021f 	and.w	r2, r3, #31
 8006a0c:	fa09 f202 	lsl.w	r2, r9, r2
 8006a10:	420a      	tst	r2, r1
 8006a12:	d003      	beq.n	8006a1c <__gethex+0x1ac>
 8006a14:	454b      	cmp	r3, r9
 8006a16:	dc36      	bgt.n	8006a86 <__gethex+0x216>
 8006a18:	f04f 0902 	mov.w	r9, #2
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff febe 	bl	80067a0 <rshift>
 8006a24:	442f      	add	r7, r5
 8006a26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a2a:	42bb      	cmp	r3, r7
 8006a2c:	da42      	bge.n	8006ab4 <__gethex+0x244>
 8006a2e:	4621      	mov	r1, r4
 8006a30:	9801      	ldr	r0, [sp, #4]
 8006a32:	f000 fcf5 	bl	8007420 <_Bfree>
 8006a36:	2300      	movs	r3, #0
 8006a38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a3a:	25a3      	movs	r5, #163	@ 0xa3
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e793      	b.n	8006968 <__gethex+0xf8>
 8006a40:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006a44:	2a2e      	cmp	r2, #46	@ 0x2e
 8006a46:	d012      	beq.n	8006a6e <__gethex+0x1fe>
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d104      	bne.n	8006a56 <__gethex+0x1e6>
 8006a4c:	f845 bb04 	str.w	fp, [r5], #4
 8006a50:	f04f 0b00 	mov.w	fp, #0
 8006a54:	465b      	mov	r3, fp
 8006a56:	7830      	ldrb	r0, [r6, #0]
 8006a58:	9303      	str	r3, [sp, #12]
 8006a5a:	f7ff fef4 	bl	8006846 <__hexdig_fun>
 8006a5e:	9b03      	ldr	r3, [sp, #12]
 8006a60:	f000 000f 	and.w	r0, r0, #15
 8006a64:	4098      	lsls	r0, r3
 8006a66:	ea4b 0b00 	orr.w	fp, fp, r0
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	e7ae      	b.n	80069cc <__gethex+0x15c>
 8006a6e:	45b1      	cmp	r9, r6
 8006a70:	d8ea      	bhi.n	8006a48 <__gethex+0x1d8>
 8006a72:	2201      	movs	r2, #1
 8006a74:	4630      	mov	r0, r6
 8006a76:	492a      	ldr	r1, [pc, #168]	@ (8006b20 <__gethex+0x2b0>)
 8006a78:	9303      	str	r3, [sp, #12]
 8006a7a:	f7fe ffcd 	bl	8005a18 <strncmp>
 8006a7e:	9b03      	ldr	r3, [sp, #12]
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d1e1      	bne.n	8006a48 <__gethex+0x1d8>
 8006a84:	e7a2      	b.n	80069cc <__gethex+0x15c>
 8006a86:	4620      	mov	r0, r4
 8006a88:	1ea9      	subs	r1, r5, #2
 8006a8a:	f001 f90e 	bl	8007caa <__any_on>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d0c2      	beq.n	8006a18 <__gethex+0x1a8>
 8006a92:	f04f 0903 	mov.w	r9, #3
 8006a96:	e7c1      	b.n	8006a1c <__gethex+0x1ac>
 8006a98:	da09      	bge.n	8006aae <__gethex+0x23e>
 8006a9a:	1b75      	subs	r5, r6, r5
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	462a      	mov	r2, r5
 8006aa0:	9801      	ldr	r0, [sp, #4]
 8006aa2:	f000 fed3 	bl	800784c <__lshift>
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	1b7f      	subs	r7, r7, r5
 8006aaa:	f100 0a14 	add.w	sl, r0, #20
 8006aae:	f04f 0900 	mov.w	r9, #0
 8006ab2:	e7b8      	b.n	8006a26 <__gethex+0x1b6>
 8006ab4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006ab8:	42bd      	cmp	r5, r7
 8006aba:	dd6f      	ble.n	8006b9c <__gethex+0x32c>
 8006abc:	1bed      	subs	r5, r5, r7
 8006abe:	42ae      	cmp	r6, r5
 8006ac0:	dc34      	bgt.n	8006b2c <__gethex+0x2bc>
 8006ac2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d022      	beq.n	8006b10 <__gethex+0x2a0>
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d024      	beq.n	8006b18 <__gethex+0x2a8>
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d115      	bne.n	8006afe <__gethex+0x28e>
 8006ad2:	42ae      	cmp	r6, r5
 8006ad4:	d113      	bne.n	8006afe <__gethex+0x28e>
 8006ad6:	2e01      	cmp	r6, #1
 8006ad8:	d10b      	bne.n	8006af2 <__gethex+0x282>
 8006ada:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ade:	9a02      	ldr	r2, [sp, #8]
 8006ae0:	2562      	movs	r5, #98	@ 0x62
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	f8ca 3000 	str.w	r3, [sl]
 8006aec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006aee:	601c      	str	r4, [r3, #0]
 8006af0:	e73a      	b.n	8006968 <__gethex+0xf8>
 8006af2:	4620      	mov	r0, r4
 8006af4:	1e71      	subs	r1, r6, #1
 8006af6:	f001 f8d8 	bl	8007caa <__any_on>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d1ed      	bne.n	8006ada <__gethex+0x26a>
 8006afe:	4621      	mov	r1, r4
 8006b00:	9801      	ldr	r0, [sp, #4]
 8006b02:	f000 fc8d 	bl	8007420 <_Bfree>
 8006b06:	2300      	movs	r3, #0
 8006b08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b0a:	2550      	movs	r5, #80	@ 0x50
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	e72b      	b.n	8006968 <__gethex+0xf8>
 8006b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f3      	bne.n	8006afe <__gethex+0x28e>
 8006b16:	e7e0      	b.n	8006ada <__gethex+0x26a>
 8006b18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1dd      	bne.n	8006ada <__gethex+0x26a>
 8006b1e:	e7ee      	b.n	8006afe <__gethex+0x28e>
 8006b20:	080085f3 	.word	0x080085f3
 8006b24:	080087cd 	.word	0x080087cd
 8006b28:	080087de 	.word	0x080087de
 8006b2c:	1e6f      	subs	r7, r5, #1
 8006b2e:	f1b9 0f00 	cmp.w	r9, #0
 8006b32:	d130      	bne.n	8006b96 <__gethex+0x326>
 8006b34:	b127      	cbz	r7, 8006b40 <__gethex+0x2d0>
 8006b36:	4639      	mov	r1, r7
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f001 f8b6 	bl	8007caa <__any_on>
 8006b3e:	4681      	mov	r9, r0
 8006b40:	2301      	movs	r3, #1
 8006b42:	4629      	mov	r1, r5
 8006b44:	1b76      	subs	r6, r6, r5
 8006b46:	2502      	movs	r5, #2
 8006b48:	117a      	asrs	r2, r7, #5
 8006b4a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006b4e:	f007 071f 	and.w	r7, r7, #31
 8006b52:	40bb      	lsls	r3, r7
 8006b54:	4213      	tst	r3, r2
 8006b56:	4620      	mov	r0, r4
 8006b58:	bf18      	it	ne
 8006b5a:	f049 0902 	orrne.w	r9, r9, #2
 8006b5e:	f7ff fe1f 	bl	80067a0 <rshift>
 8006b62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006b66:	f1b9 0f00 	cmp.w	r9, #0
 8006b6a:	d047      	beq.n	8006bfc <__gethex+0x38c>
 8006b6c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d015      	beq.n	8006ba0 <__gethex+0x330>
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d017      	beq.n	8006ba8 <__gethex+0x338>
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d109      	bne.n	8006b90 <__gethex+0x320>
 8006b7c:	f019 0f02 	tst.w	r9, #2
 8006b80:	d006      	beq.n	8006b90 <__gethex+0x320>
 8006b82:	f8da 3000 	ldr.w	r3, [sl]
 8006b86:	ea49 0903 	orr.w	r9, r9, r3
 8006b8a:	f019 0f01 	tst.w	r9, #1
 8006b8e:	d10e      	bne.n	8006bae <__gethex+0x33e>
 8006b90:	f045 0510 	orr.w	r5, r5, #16
 8006b94:	e032      	b.n	8006bfc <__gethex+0x38c>
 8006b96:	f04f 0901 	mov.w	r9, #1
 8006b9a:	e7d1      	b.n	8006b40 <__gethex+0x2d0>
 8006b9c:	2501      	movs	r5, #1
 8006b9e:	e7e2      	b.n	8006b66 <__gethex+0x2f6>
 8006ba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ba2:	f1c3 0301 	rsb	r3, r3, #1
 8006ba6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0f0      	beq.n	8006b90 <__gethex+0x320>
 8006bae:	f04f 0c00 	mov.w	ip, #0
 8006bb2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006bb6:	f104 0314 	add.w	r3, r4, #20
 8006bba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006bbe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8006bcc:	d01b      	beq.n	8006c06 <__gethex+0x396>
 8006bce:	3201      	adds	r2, #1
 8006bd0:	6002      	str	r2, [r0, #0]
 8006bd2:	2d02      	cmp	r5, #2
 8006bd4:	f104 0314 	add.w	r3, r4, #20
 8006bd8:	d13c      	bne.n	8006c54 <__gethex+0x3e4>
 8006bda:	f8d8 2000 	ldr.w	r2, [r8]
 8006bde:	3a01      	subs	r2, #1
 8006be0:	42b2      	cmp	r2, r6
 8006be2:	d109      	bne.n	8006bf8 <__gethex+0x388>
 8006be4:	2201      	movs	r2, #1
 8006be6:	1171      	asrs	r1, r6, #5
 8006be8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006bec:	f006 061f 	and.w	r6, r6, #31
 8006bf0:	fa02 f606 	lsl.w	r6, r2, r6
 8006bf4:	421e      	tst	r6, r3
 8006bf6:	d13a      	bne.n	8006c6e <__gethex+0x3fe>
 8006bf8:	f045 0520 	orr.w	r5, r5, #32
 8006bfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bfe:	601c      	str	r4, [r3, #0]
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	601f      	str	r7, [r3, #0]
 8006c04:	e6b0      	b.n	8006968 <__gethex+0xf8>
 8006c06:	4299      	cmp	r1, r3
 8006c08:	f843 cc04 	str.w	ip, [r3, #-4]
 8006c0c:	d8d9      	bhi.n	8006bc2 <__gethex+0x352>
 8006c0e:	68a3      	ldr	r3, [r4, #8]
 8006c10:	459b      	cmp	fp, r3
 8006c12:	db17      	blt.n	8006c44 <__gethex+0x3d4>
 8006c14:	6861      	ldr	r1, [r4, #4]
 8006c16:	9801      	ldr	r0, [sp, #4]
 8006c18:	3101      	adds	r1, #1
 8006c1a:	f000 fbc1 	bl	80073a0 <_Balloc>
 8006c1e:	4681      	mov	r9, r0
 8006c20:	b918      	cbnz	r0, 8006c2a <__gethex+0x3ba>
 8006c22:	4602      	mov	r2, r0
 8006c24:	2184      	movs	r1, #132	@ 0x84
 8006c26:	4b19      	ldr	r3, [pc, #100]	@ (8006c8c <__gethex+0x41c>)
 8006c28:	e6c5      	b.n	80069b6 <__gethex+0x146>
 8006c2a:	6922      	ldr	r2, [r4, #16]
 8006c2c:	f104 010c 	add.w	r1, r4, #12
 8006c30:	3202      	adds	r2, #2
 8006c32:	0092      	lsls	r2, r2, #2
 8006c34:	300c      	adds	r0, #12
 8006c36:	f7fe ff48 	bl	8005aca <memcpy>
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	9801      	ldr	r0, [sp, #4]
 8006c3e:	f000 fbef 	bl	8007420 <_Bfree>
 8006c42:	464c      	mov	r4, r9
 8006c44:	6923      	ldr	r3, [r4, #16]
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	6122      	str	r2, [r4, #16]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c50:	615a      	str	r2, [r3, #20]
 8006c52:	e7be      	b.n	8006bd2 <__gethex+0x362>
 8006c54:	6922      	ldr	r2, [r4, #16]
 8006c56:	455a      	cmp	r2, fp
 8006c58:	dd0b      	ble.n	8006c72 <__gethex+0x402>
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f7ff fd9f 	bl	80067a0 <rshift>
 8006c62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c66:	3701      	adds	r7, #1
 8006c68:	42bb      	cmp	r3, r7
 8006c6a:	f6ff aee0 	blt.w	8006a2e <__gethex+0x1be>
 8006c6e:	2501      	movs	r5, #1
 8006c70:	e7c2      	b.n	8006bf8 <__gethex+0x388>
 8006c72:	f016 061f 	ands.w	r6, r6, #31
 8006c76:	d0fa      	beq.n	8006c6e <__gethex+0x3fe>
 8006c78:	4453      	add	r3, sl
 8006c7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006c7e:	f000 fc81 	bl	8007584 <__hi0bits>
 8006c82:	f1c6 0620 	rsb	r6, r6, #32
 8006c86:	42b0      	cmp	r0, r6
 8006c88:	dbe7      	blt.n	8006c5a <__gethex+0x3ea>
 8006c8a:	e7f0      	b.n	8006c6e <__gethex+0x3fe>
 8006c8c:	080087cd 	.word	0x080087cd

08006c90 <L_shift>:
 8006c90:	f1c2 0208 	rsb	r2, r2, #8
 8006c94:	0092      	lsls	r2, r2, #2
 8006c96:	b570      	push	{r4, r5, r6, lr}
 8006c98:	f1c2 0620 	rsb	r6, r2, #32
 8006c9c:	6843      	ldr	r3, [r0, #4]
 8006c9e:	6804      	ldr	r4, [r0, #0]
 8006ca0:	fa03 f506 	lsl.w	r5, r3, r6
 8006ca4:	432c      	orrs	r4, r5
 8006ca6:	40d3      	lsrs	r3, r2
 8006ca8:	6004      	str	r4, [r0, #0]
 8006caa:	f840 3f04 	str.w	r3, [r0, #4]!
 8006cae:	4288      	cmp	r0, r1
 8006cb0:	d3f4      	bcc.n	8006c9c <L_shift+0xc>
 8006cb2:	bd70      	pop	{r4, r5, r6, pc}

08006cb4 <__match>:
 8006cb4:	b530      	push	{r4, r5, lr}
 8006cb6:	6803      	ldr	r3, [r0, #0]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cbe:	b914      	cbnz	r4, 8006cc6 <__match+0x12>
 8006cc0:	6003      	str	r3, [r0, #0]
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	bd30      	pop	{r4, r5, pc}
 8006cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006cce:	2d19      	cmp	r5, #25
 8006cd0:	bf98      	it	ls
 8006cd2:	3220      	addls	r2, #32
 8006cd4:	42a2      	cmp	r2, r4
 8006cd6:	d0f0      	beq.n	8006cba <__match+0x6>
 8006cd8:	2000      	movs	r0, #0
 8006cda:	e7f3      	b.n	8006cc4 <__match+0x10>

08006cdc <__hexnan>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	2500      	movs	r5, #0
 8006ce2:	680b      	ldr	r3, [r1, #0]
 8006ce4:	4682      	mov	sl, r0
 8006ce6:	115e      	asrs	r6, r3, #5
 8006ce8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006cec:	f013 031f 	ands.w	r3, r3, #31
 8006cf0:	bf18      	it	ne
 8006cf2:	3604      	addne	r6, #4
 8006cf4:	1f37      	subs	r7, r6, #4
 8006cf6:	4690      	mov	r8, r2
 8006cf8:	46b9      	mov	r9, r7
 8006cfa:	463c      	mov	r4, r7
 8006cfc:	46ab      	mov	fp, r5
 8006cfe:	b087      	sub	sp, #28
 8006d00:	6801      	ldr	r1, [r0, #0]
 8006d02:	9301      	str	r3, [sp, #4]
 8006d04:	f846 5c04 	str.w	r5, [r6, #-4]
 8006d08:	9502      	str	r5, [sp, #8]
 8006d0a:	784a      	ldrb	r2, [r1, #1]
 8006d0c:	1c4b      	adds	r3, r1, #1
 8006d0e:	9303      	str	r3, [sp, #12]
 8006d10:	b342      	cbz	r2, 8006d64 <__hexnan+0x88>
 8006d12:	4610      	mov	r0, r2
 8006d14:	9105      	str	r1, [sp, #20]
 8006d16:	9204      	str	r2, [sp, #16]
 8006d18:	f7ff fd95 	bl	8006846 <__hexdig_fun>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d151      	bne.n	8006dc4 <__hexnan+0xe8>
 8006d20:	9a04      	ldr	r2, [sp, #16]
 8006d22:	9905      	ldr	r1, [sp, #20]
 8006d24:	2a20      	cmp	r2, #32
 8006d26:	d818      	bhi.n	8006d5a <__hexnan+0x7e>
 8006d28:	9b02      	ldr	r3, [sp, #8]
 8006d2a:	459b      	cmp	fp, r3
 8006d2c:	dd13      	ble.n	8006d56 <__hexnan+0x7a>
 8006d2e:	454c      	cmp	r4, r9
 8006d30:	d206      	bcs.n	8006d40 <__hexnan+0x64>
 8006d32:	2d07      	cmp	r5, #7
 8006d34:	dc04      	bgt.n	8006d40 <__hexnan+0x64>
 8006d36:	462a      	mov	r2, r5
 8006d38:	4649      	mov	r1, r9
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f7ff ffa8 	bl	8006c90 <L_shift>
 8006d40:	4544      	cmp	r4, r8
 8006d42:	d952      	bls.n	8006dea <__hexnan+0x10e>
 8006d44:	2300      	movs	r3, #0
 8006d46:	f1a4 0904 	sub.w	r9, r4, #4
 8006d4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d4e:	461d      	mov	r5, r3
 8006d50:	464c      	mov	r4, r9
 8006d52:	f8cd b008 	str.w	fp, [sp, #8]
 8006d56:	9903      	ldr	r1, [sp, #12]
 8006d58:	e7d7      	b.n	8006d0a <__hexnan+0x2e>
 8006d5a:	2a29      	cmp	r2, #41	@ 0x29
 8006d5c:	d157      	bne.n	8006e0e <__hexnan+0x132>
 8006d5e:	3102      	adds	r1, #2
 8006d60:	f8ca 1000 	str.w	r1, [sl]
 8006d64:	f1bb 0f00 	cmp.w	fp, #0
 8006d68:	d051      	beq.n	8006e0e <__hexnan+0x132>
 8006d6a:	454c      	cmp	r4, r9
 8006d6c:	d206      	bcs.n	8006d7c <__hexnan+0xa0>
 8006d6e:	2d07      	cmp	r5, #7
 8006d70:	dc04      	bgt.n	8006d7c <__hexnan+0xa0>
 8006d72:	462a      	mov	r2, r5
 8006d74:	4649      	mov	r1, r9
 8006d76:	4620      	mov	r0, r4
 8006d78:	f7ff ff8a 	bl	8006c90 <L_shift>
 8006d7c:	4544      	cmp	r4, r8
 8006d7e:	d936      	bls.n	8006dee <__hexnan+0x112>
 8006d80:	4623      	mov	r3, r4
 8006d82:	f1a8 0204 	sub.w	r2, r8, #4
 8006d86:	f853 1b04 	ldr.w	r1, [r3], #4
 8006d8a:	429f      	cmp	r7, r3
 8006d8c:	f842 1f04 	str.w	r1, [r2, #4]!
 8006d90:	d2f9      	bcs.n	8006d86 <__hexnan+0xaa>
 8006d92:	1b3b      	subs	r3, r7, r4
 8006d94:	f023 0303 	bic.w	r3, r3, #3
 8006d98:	3304      	adds	r3, #4
 8006d9a:	3401      	adds	r4, #1
 8006d9c:	3e03      	subs	r6, #3
 8006d9e:	42b4      	cmp	r4, r6
 8006da0:	bf88      	it	hi
 8006da2:	2304      	movhi	r3, #4
 8006da4:	2200      	movs	r2, #0
 8006da6:	4443      	add	r3, r8
 8006da8:	f843 2b04 	str.w	r2, [r3], #4
 8006dac:	429f      	cmp	r7, r3
 8006dae:	d2fb      	bcs.n	8006da8 <__hexnan+0xcc>
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	b91b      	cbnz	r3, 8006dbc <__hexnan+0xe0>
 8006db4:	4547      	cmp	r7, r8
 8006db6:	d128      	bne.n	8006e0a <__hexnan+0x12e>
 8006db8:	2301      	movs	r3, #1
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	2005      	movs	r0, #5
 8006dbe:	b007      	add	sp, #28
 8006dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc4:	3501      	adds	r5, #1
 8006dc6:	2d08      	cmp	r5, #8
 8006dc8:	f10b 0b01 	add.w	fp, fp, #1
 8006dcc:	dd06      	ble.n	8006ddc <__hexnan+0x100>
 8006dce:	4544      	cmp	r4, r8
 8006dd0:	d9c1      	bls.n	8006d56 <__hexnan+0x7a>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	2501      	movs	r5, #1
 8006dd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8006dda:	3c04      	subs	r4, #4
 8006ddc:	6822      	ldr	r2, [r4, #0]
 8006dde:	f000 000f 	and.w	r0, r0, #15
 8006de2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006de6:	6020      	str	r0, [r4, #0]
 8006de8:	e7b5      	b.n	8006d56 <__hexnan+0x7a>
 8006dea:	2508      	movs	r5, #8
 8006dec:	e7b3      	b.n	8006d56 <__hexnan+0x7a>
 8006dee:	9b01      	ldr	r3, [sp, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d0dd      	beq.n	8006db0 <__hexnan+0xd4>
 8006df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006df8:	f1c3 0320 	rsb	r3, r3, #32
 8006dfc:	40da      	lsrs	r2, r3
 8006dfe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006e02:	4013      	ands	r3, r2
 8006e04:	f846 3c04 	str.w	r3, [r6, #-4]
 8006e08:	e7d2      	b.n	8006db0 <__hexnan+0xd4>
 8006e0a:	3f04      	subs	r7, #4
 8006e0c:	e7d0      	b.n	8006db0 <__hexnan+0xd4>
 8006e0e:	2004      	movs	r0, #4
 8006e10:	e7d5      	b.n	8006dbe <__hexnan+0xe2>

08006e12 <__ssputs_r>:
 8006e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e16:	461f      	mov	r7, r3
 8006e18:	688e      	ldr	r6, [r1, #8]
 8006e1a:	4682      	mov	sl, r0
 8006e1c:	42be      	cmp	r6, r7
 8006e1e:	460c      	mov	r4, r1
 8006e20:	4690      	mov	r8, r2
 8006e22:	680b      	ldr	r3, [r1, #0]
 8006e24:	d82d      	bhi.n	8006e82 <__ssputs_r+0x70>
 8006e26:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e2a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e2e:	d026      	beq.n	8006e7e <__ssputs_r+0x6c>
 8006e30:	6965      	ldr	r5, [r4, #20]
 8006e32:	6909      	ldr	r1, [r1, #16]
 8006e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e38:	eba3 0901 	sub.w	r9, r3, r1
 8006e3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e40:	1c7b      	adds	r3, r7, #1
 8006e42:	444b      	add	r3, r9
 8006e44:	106d      	asrs	r5, r5, #1
 8006e46:	429d      	cmp	r5, r3
 8006e48:	bf38      	it	cc
 8006e4a:	461d      	movcc	r5, r3
 8006e4c:	0553      	lsls	r3, r2, #21
 8006e4e:	d527      	bpl.n	8006ea0 <__ssputs_r+0x8e>
 8006e50:	4629      	mov	r1, r5
 8006e52:	f000 f95f 	bl	8007114 <_malloc_r>
 8006e56:	4606      	mov	r6, r0
 8006e58:	b360      	cbz	r0, 8006eb4 <__ssputs_r+0xa2>
 8006e5a:	464a      	mov	r2, r9
 8006e5c:	6921      	ldr	r1, [r4, #16]
 8006e5e:	f7fe fe34 	bl	8005aca <memcpy>
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e6c:	81a3      	strh	r3, [r4, #12]
 8006e6e:	6126      	str	r6, [r4, #16]
 8006e70:	444e      	add	r6, r9
 8006e72:	6026      	str	r6, [r4, #0]
 8006e74:	463e      	mov	r6, r7
 8006e76:	6165      	str	r5, [r4, #20]
 8006e78:	eba5 0509 	sub.w	r5, r5, r9
 8006e7c:	60a5      	str	r5, [r4, #8]
 8006e7e:	42be      	cmp	r6, r7
 8006e80:	d900      	bls.n	8006e84 <__ssputs_r+0x72>
 8006e82:	463e      	mov	r6, r7
 8006e84:	4632      	mov	r2, r6
 8006e86:	4641      	mov	r1, r8
 8006e88:	6820      	ldr	r0, [r4, #0]
 8006e8a:	f000 ffad 	bl	8007de8 <memmove>
 8006e8e:	2000      	movs	r0, #0
 8006e90:	68a3      	ldr	r3, [r4, #8]
 8006e92:	1b9b      	subs	r3, r3, r6
 8006e94:	60a3      	str	r3, [r4, #8]
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	4433      	add	r3, r6
 8006e9a:	6023      	str	r3, [r4, #0]
 8006e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea0:	462a      	mov	r2, r5
 8006ea2:	f000 ff66 	bl	8007d72 <_realloc_r>
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d1e0      	bne.n	8006e6e <__ssputs_r+0x5c>
 8006eac:	4650      	mov	r0, sl
 8006eae:	6921      	ldr	r1, [r4, #16]
 8006eb0:	f001 f83c 	bl	8007f2c <_free_r>
 8006eb4:	230c      	movs	r3, #12
 8006eb6:	f8ca 3000 	str.w	r3, [sl]
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ec4:	81a3      	strh	r3, [r4, #12]
 8006ec6:	e7e9      	b.n	8006e9c <__ssputs_r+0x8a>

08006ec8 <_svfiprintf_r>:
 8006ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	4698      	mov	r8, r3
 8006ece:	898b      	ldrh	r3, [r1, #12]
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	061b      	lsls	r3, r3, #24
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	4614      	mov	r4, r2
 8006ed8:	b09d      	sub	sp, #116	@ 0x74
 8006eda:	d510      	bpl.n	8006efe <_svfiprintf_r+0x36>
 8006edc:	690b      	ldr	r3, [r1, #16]
 8006ede:	b973      	cbnz	r3, 8006efe <_svfiprintf_r+0x36>
 8006ee0:	2140      	movs	r1, #64	@ 0x40
 8006ee2:	f000 f917 	bl	8007114 <_malloc_r>
 8006ee6:	6028      	str	r0, [r5, #0]
 8006ee8:	6128      	str	r0, [r5, #16]
 8006eea:	b930      	cbnz	r0, 8006efa <_svfiprintf_r+0x32>
 8006eec:	230c      	movs	r3, #12
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ef4:	b01d      	add	sp, #116	@ 0x74
 8006ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efa:	2340      	movs	r3, #64	@ 0x40
 8006efc:	616b      	str	r3, [r5, #20]
 8006efe:	2300      	movs	r3, #0
 8006f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f02:	2320      	movs	r3, #32
 8006f04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f08:	2330      	movs	r3, #48	@ 0x30
 8006f0a:	f04f 0901 	mov.w	r9, #1
 8006f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f12:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80070ac <_svfiprintf_r+0x1e4>
 8006f16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f1a:	4623      	mov	r3, r4
 8006f1c:	469a      	mov	sl, r3
 8006f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f22:	b10a      	cbz	r2, 8006f28 <_svfiprintf_r+0x60>
 8006f24:	2a25      	cmp	r2, #37	@ 0x25
 8006f26:	d1f9      	bne.n	8006f1c <_svfiprintf_r+0x54>
 8006f28:	ebba 0b04 	subs.w	fp, sl, r4
 8006f2c:	d00b      	beq.n	8006f46 <_svfiprintf_r+0x7e>
 8006f2e:	465b      	mov	r3, fp
 8006f30:	4622      	mov	r2, r4
 8006f32:	4629      	mov	r1, r5
 8006f34:	4638      	mov	r0, r7
 8006f36:	f7ff ff6c 	bl	8006e12 <__ssputs_r>
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	f000 80a7 	beq.w	800708e <_svfiprintf_r+0x1c6>
 8006f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f42:	445a      	add	r2, fp
 8006f44:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f46:	f89a 3000 	ldrb.w	r3, [sl]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 809f 	beq.w	800708e <_svfiprintf_r+0x1c6>
 8006f50:	2300      	movs	r3, #0
 8006f52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f5a:	f10a 0a01 	add.w	sl, sl, #1
 8006f5e:	9304      	str	r3, [sp, #16]
 8006f60:	9307      	str	r3, [sp, #28]
 8006f62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f66:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f68:	4654      	mov	r4, sl
 8006f6a:	2205      	movs	r2, #5
 8006f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f70:	484e      	ldr	r0, [pc, #312]	@ (80070ac <_svfiprintf_r+0x1e4>)
 8006f72:	f7fe fd9c 	bl	8005aae <memchr>
 8006f76:	9a04      	ldr	r2, [sp, #16]
 8006f78:	b9d8      	cbnz	r0, 8006fb2 <_svfiprintf_r+0xea>
 8006f7a:	06d0      	lsls	r0, r2, #27
 8006f7c:	bf44      	itt	mi
 8006f7e:	2320      	movmi	r3, #32
 8006f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f84:	0711      	lsls	r1, r2, #28
 8006f86:	bf44      	itt	mi
 8006f88:	232b      	movmi	r3, #43	@ 0x2b
 8006f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f94:	d015      	beq.n	8006fc2 <_svfiprintf_r+0xfa>
 8006f96:	4654      	mov	r4, sl
 8006f98:	2000      	movs	r0, #0
 8006f9a:	f04f 0c0a 	mov.w	ip, #10
 8006f9e:	9a07      	ldr	r2, [sp, #28]
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fa6:	3b30      	subs	r3, #48	@ 0x30
 8006fa8:	2b09      	cmp	r3, #9
 8006faa:	d94b      	bls.n	8007044 <_svfiprintf_r+0x17c>
 8006fac:	b1b0      	cbz	r0, 8006fdc <_svfiprintf_r+0x114>
 8006fae:	9207      	str	r2, [sp, #28]
 8006fb0:	e014      	b.n	8006fdc <_svfiprintf_r+0x114>
 8006fb2:	eba0 0308 	sub.w	r3, r0, r8
 8006fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	46a2      	mov	sl, r4
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	e7d2      	b.n	8006f68 <_svfiprintf_r+0xa0>
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	1d19      	adds	r1, r3, #4
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	9103      	str	r1, [sp, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bfbb      	ittet	lt
 8006fce:	425b      	neglt	r3, r3
 8006fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8006fd4:	9307      	strge	r3, [sp, #28]
 8006fd6:	9307      	strlt	r3, [sp, #28]
 8006fd8:	bfb8      	it	lt
 8006fda:	9204      	strlt	r2, [sp, #16]
 8006fdc:	7823      	ldrb	r3, [r4, #0]
 8006fde:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fe0:	d10a      	bne.n	8006ff8 <_svfiprintf_r+0x130>
 8006fe2:	7863      	ldrb	r3, [r4, #1]
 8006fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fe6:	d132      	bne.n	800704e <_svfiprintf_r+0x186>
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	3402      	adds	r4, #2
 8006fec:	1d1a      	adds	r2, r3, #4
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	9203      	str	r2, [sp, #12]
 8006ff2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ff6:	9305      	str	r3, [sp, #20]
 8006ff8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80070b0 <_svfiprintf_r+0x1e8>
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	4650      	mov	r0, sl
 8007000:	7821      	ldrb	r1, [r4, #0]
 8007002:	f7fe fd54 	bl	8005aae <memchr>
 8007006:	b138      	cbz	r0, 8007018 <_svfiprintf_r+0x150>
 8007008:	2240      	movs	r2, #64	@ 0x40
 800700a:	9b04      	ldr	r3, [sp, #16]
 800700c:	eba0 000a 	sub.w	r0, r0, sl
 8007010:	4082      	lsls	r2, r0
 8007012:	4313      	orrs	r3, r2
 8007014:	3401      	adds	r4, #1
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800701c:	2206      	movs	r2, #6
 800701e:	4825      	ldr	r0, [pc, #148]	@ (80070b4 <_svfiprintf_r+0x1ec>)
 8007020:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007024:	f7fe fd43 	bl	8005aae <memchr>
 8007028:	2800      	cmp	r0, #0
 800702a:	d036      	beq.n	800709a <_svfiprintf_r+0x1d2>
 800702c:	4b22      	ldr	r3, [pc, #136]	@ (80070b8 <_svfiprintf_r+0x1f0>)
 800702e:	bb1b      	cbnz	r3, 8007078 <_svfiprintf_r+0x1b0>
 8007030:	9b03      	ldr	r3, [sp, #12]
 8007032:	3307      	adds	r3, #7
 8007034:	f023 0307 	bic.w	r3, r3, #7
 8007038:	3308      	adds	r3, #8
 800703a:	9303      	str	r3, [sp, #12]
 800703c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800703e:	4433      	add	r3, r6
 8007040:	9309      	str	r3, [sp, #36]	@ 0x24
 8007042:	e76a      	b.n	8006f1a <_svfiprintf_r+0x52>
 8007044:	460c      	mov	r4, r1
 8007046:	2001      	movs	r0, #1
 8007048:	fb0c 3202 	mla	r2, ip, r2, r3
 800704c:	e7a8      	b.n	8006fa0 <_svfiprintf_r+0xd8>
 800704e:	2300      	movs	r3, #0
 8007050:	f04f 0c0a 	mov.w	ip, #10
 8007054:	4619      	mov	r1, r3
 8007056:	3401      	adds	r4, #1
 8007058:	9305      	str	r3, [sp, #20]
 800705a:	4620      	mov	r0, r4
 800705c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007060:	3a30      	subs	r2, #48	@ 0x30
 8007062:	2a09      	cmp	r2, #9
 8007064:	d903      	bls.n	800706e <_svfiprintf_r+0x1a6>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0c6      	beq.n	8006ff8 <_svfiprintf_r+0x130>
 800706a:	9105      	str	r1, [sp, #20]
 800706c:	e7c4      	b.n	8006ff8 <_svfiprintf_r+0x130>
 800706e:	4604      	mov	r4, r0
 8007070:	2301      	movs	r3, #1
 8007072:	fb0c 2101 	mla	r1, ip, r1, r2
 8007076:	e7f0      	b.n	800705a <_svfiprintf_r+0x192>
 8007078:	ab03      	add	r3, sp, #12
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	462a      	mov	r2, r5
 800707e:	4638      	mov	r0, r7
 8007080:	4b0e      	ldr	r3, [pc, #56]	@ (80070bc <_svfiprintf_r+0x1f4>)
 8007082:	a904      	add	r1, sp, #16
 8007084:	f7fc ff9a 	bl	8003fbc <_printf_float>
 8007088:	1c42      	adds	r2, r0, #1
 800708a:	4606      	mov	r6, r0
 800708c:	d1d6      	bne.n	800703c <_svfiprintf_r+0x174>
 800708e:	89ab      	ldrh	r3, [r5, #12]
 8007090:	065b      	lsls	r3, r3, #25
 8007092:	f53f af2d 	bmi.w	8006ef0 <_svfiprintf_r+0x28>
 8007096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007098:	e72c      	b.n	8006ef4 <_svfiprintf_r+0x2c>
 800709a:	ab03      	add	r3, sp, #12
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	462a      	mov	r2, r5
 80070a0:	4638      	mov	r0, r7
 80070a2:	4b06      	ldr	r3, [pc, #24]	@ (80070bc <_svfiprintf_r+0x1f4>)
 80070a4:	a904      	add	r1, sp, #16
 80070a6:	f7fd fa27 	bl	80044f8 <_printf_i>
 80070aa:	e7ed      	b.n	8007088 <_svfiprintf_r+0x1c0>
 80070ac:	0800883e 	.word	0x0800883e
 80070b0:	08008844 	.word	0x08008844
 80070b4:	08008848 	.word	0x08008848
 80070b8:	08003fbd 	.word	0x08003fbd
 80070bc:	08006e13 	.word	0x08006e13

080070c0 <malloc>:
 80070c0:	4b02      	ldr	r3, [pc, #8]	@ (80070cc <malloc+0xc>)
 80070c2:	4601      	mov	r1, r0
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	f000 b825 	b.w	8007114 <_malloc_r>
 80070ca:	bf00      	nop
 80070cc:	20000188 	.word	0x20000188

080070d0 <sbrk_aligned>:
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	4e0f      	ldr	r6, [pc, #60]	@ (8007110 <sbrk_aligned+0x40>)
 80070d4:	460c      	mov	r4, r1
 80070d6:	6831      	ldr	r1, [r6, #0]
 80070d8:	4605      	mov	r5, r0
 80070da:	b911      	cbnz	r1, 80070e2 <sbrk_aligned+0x12>
 80070dc:	f000 fed2 	bl	8007e84 <_sbrk_r>
 80070e0:	6030      	str	r0, [r6, #0]
 80070e2:	4621      	mov	r1, r4
 80070e4:	4628      	mov	r0, r5
 80070e6:	f000 fecd 	bl	8007e84 <_sbrk_r>
 80070ea:	1c43      	adds	r3, r0, #1
 80070ec:	d103      	bne.n	80070f6 <sbrk_aligned+0x26>
 80070ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80070f2:	4620      	mov	r0, r4
 80070f4:	bd70      	pop	{r4, r5, r6, pc}
 80070f6:	1cc4      	adds	r4, r0, #3
 80070f8:	f024 0403 	bic.w	r4, r4, #3
 80070fc:	42a0      	cmp	r0, r4
 80070fe:	d0f8      	beq.n	80070f2 <sbrk_aligned+0x22>
 8007100:	1a21      	subs	r1, r4, r0
 8007102:	4628      	mov	r0, r5
 8007104:	f000 febe 	bl	8007e84 <_sbrk_r>
 8007108:	3001      	adds	r0, #1
 800710a:	d1f2      	bne.n	80070f2 <sbrk_aligned+0x22>
 800710c:	e7ef      	b.n	80070ee <sbrk_aligned+0x1e>
 800710e:	bf00      	nop
 8007110:	2000040c 	.word	0x2000040c

08007114 <_malloc_r>:
 8007114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007118:	1ccd      	adds	r5, r1, #3
 800711a:	f025 0503 	bic.w	r5, r5, #3
 800711e:	3508      	adds	r5, #8
 8007120:	2d0c      	cmp	r5, #12
 8007122:	bf38      	it	cc
 8007124:	250c      	movcc	r5, #12
 8007126:	2d00      	cmp	r5, #0
 8007128:	4606      	mov	r6, r0
 800712a:	db01      	blt.n	8007130 <_malloc_r+0x1c>
 800712c:	42a9      	cmp	r1, r5
 800712e:	d904      	bls.n	800713a <_malloc_r+0x26>
 8007130:	230c      	movs	r3, #12
 8007132:	6033      	str	r3, [r6, #0]
 8007134:	2000      	movs	r0, #0
 8007136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800713a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007210 <_malloc_r+0xfc>
 800713e:	f000 f923 	bl	8007388 <__malloc_lock>
 8007142:	f8d8 3000 	ldr.w	r3, [r8]
 8007146:	461c      	mov	r4, r3
 8007148:	bb44      	cbnz	r4, 800719c <_malloc_r+0x88>
 800714a:	4629      	mov	r1, r5
 800714c:	4630      	mov	r0, r6
 800714e:	f7ff ffbf 	bl	80070d0 <sbrk_aligned>
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	4604      	mov	r4, r0
 8007156:	d158      	bne.n	800720a <_malloc_r+0xf6>
 8007158:	f8d8 4000 	ldr.w	r4, [r8]
 800715c:	4627      	mov	r7, r4
 800715e:	2f00      	cmp	r7, #0
 8007160:	d143      	bne.n	80071ea <_malloc_r+0xd6>
 8007162:	2c00      	cmp	r4, #0
 8007164:	d04b      	beq.n	80071fe <_malloc_r+0xea>
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	4639      	mov	r1, r7
 800716a:	4630      	mov	r0, r6
 800716c:	eb04 0903 	add.w	r9, r4, r3
 8007170:	f000 fe88 	bl	8007e84 <_sbrk_r>
 8007174:	4581      	cmp	r9, r0
 8007176:	d142      	bne.n	80071fe <_malloc_r+0xea>
 8007178:	6821      	ldr	r1, [r4, #0]
 800717a:	4630      	mov	r0, r6
 800717c:	1a6d      	subs	r5, r5, r1
 800717e:	4629      	mov	r1, r5
 8007180:	f7ff ffa6 	bl	80070d0 <sbrk_aligned>
 8007184:	3001      	adds	r0, #1
 8007186:	d03a      	beq.n	80071fe <_malloc_r+0xea>
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	442b      	add	r3, r5
 800718c:	6023      	str	r3, [r4, #0]
 800718e:	f8d8 3000 	ldr.w	r3, [r8]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	bb62      	cbnz	r2, 80071f0 <_malloc_r+0xdc>
 8007196:	f8c8 7000 	str.w	r7, [r8]
 800719a:	e00f      	b.n	80071bc <_malloc_r+0xa8>
 800719c:	6822      	ldr	r2, [r4, #0]
 800719e:	1b52      	subs	r2, r2, r5
 80071a0:	d420      	bmi.n	80071e4 <_malloc_r+0xd0>
 80071a2:	2a0b      	cmp	r2, #11
 80071a4:	d917      	bls.n	80071d6 <_malloc_r+0xc2>
 80071a6:	1961      	adds	r1, r4, r5
 80071a8:	42a3      	cmp	r3, r4
 80071aa:	6025      	str	r5, [r4, #0]
 80071ac:	bf18      	it	ne
 80071ae:	6059      	strne	r1, [r3, #4]
 80071b0:	6863      	ldr	r3, [r4, #4]
 80071b2:	bf08      	it	eq
 80071b4:	f8c8 1000 	streq.w	r1, [r8]
 80071b8:	5162      	str	r2, [r4, r5]
 80071ba:	604b      	str	r3, [r1, #4]
 80071bc:	4630      	mov	r0, r6
 80071be:	f000 f8e9 	bl	8007394 <__malloc_unlock>
 80071c2:	f104 000b 	add.w	r0, r4, #11
 80071c6:	1d23      	adds	r3, r4, #4
 80071c8:	f020 0007 	bic.w	r0, r0, #7
 80071cc:	1ac2      	subs	r2, r0, r3
 80071ce:	bf1c      	itt	ne
 80071d0:	1a1b      	subne	r3, r3, r0
 80071d2:	50a3      	strne	r3, [r4, r2]
 80071d4:	e7af      	b.n	8007136 <_malloc_r+0x22>
 80071d6:	6862      	ldr	r2, [r4, #4]
 80071d8:	42a3      	cmp	r3, r4
 80071da:	bf0c      	ite	eq
 80071dc:	f8c8 2000 	streq.w	r2, [r8]
 80071e0:	605a      	strne	r2, [r3, #4]
 80071e2:	e7eb      	b.n	80071bc <_malloc_r+0xa8>
 80071e4:	4623      	mov	r3, r4
 80071e6:	6864      	ldr	r4, [r4, #4]
 80071e8:	e7ae      	b.n	8007148 <_malloc_r+0x34>
 80071ea:	463c      	mov	r4, r7
 80071ec:	687f      	ldr	r7, [r7, #4]
 80071ee:	e7b6      	b.n	800715e <_malloc_r+0x4a>
 80071f0:	461a      	mov	r2, r3
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	d1fb      	bne.n	80071f0 <_malloc_r+0xdc>
 80071f8:	2300      	movs	r3, #0
 80071fa:	6053      	str	r3, [r2, #4]
 80071fc:	e7de      	b.n	80071bc <_malloc_r+0xa8>
 80071fe:	230c      	movs	r3, #12
 8007200:	4630      	mov	r0, r6
 8007202:	6033      	str	r3, [r6, #0]
 8007204:	f000 f8c6 	bl	8007394 <__malloc_unlock>
 8007208:	e794      	b.n	8007134 <_malloc_r+0x20>
 800720a:	6005      	str	r5, [r0, #0]
 800720c:	e7d6      	b.n	80071bc <_malloc_r+0xa8>
 800720e:	bf00      	nop
 8007210:	20000410 	.word	0x20000410

08007214 <__ascii_mbtowc>:
 8007214:	b082      	sub	sp, #8
 8007216:	b901      	cbnz	r1, 800721a <__ascii_mbtowc+0x6>
 8007218:	a901      	add	r1, sp, #4
 800721a:	b142      	cbz	r2, 800722e <__ascii_mbtowc+0x1a>
 800721c:	b14b      	cbz	r3, 8007232 <__ascii_mbtowc+0x1e>
 800721e:	7813      	ldrb	r3, [r2, #0]
 8007220:	600b      	str	r3, [r1, #0]
 8007222:	7812      	ldrb	r2, [r2, #0]
 8007224:	1e10      	subs	r0, r2, #0
 8007226:	bf18      	it	ne
 8007228:	2001      	movne	r0, #1
 800722a:	b002      	add	sp, #8
 800722c:	4770      	bx	lr
 800722e:	4610      	mov	r0, r2
 8007230:	e7fb      	b.n	800722a <__ascii_mbtowc+0x16>
 8007232:	f06f 0001 	mvn.w	r0, #1
 8007236:	e7f8      	b.n	800722a <__ascii_mbtowc+0x16>

08007238 <__sflush_r>:
 8007238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800723c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723e:	0716      	lsls	r6, r2, #28
 8007240:	4605      	mov	r5, r0
 8007242:	460c      	mov	r4, r1
 8007244:	d454      	bmi.n	80072f0 <__sflush_r+0xb8>
 8007246:	684b      	ldr	r3, [r1, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	dc02      	bgt.n	8007252 <__sflush_r+0x1a>
 800724c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800724e:	2b00      	cmp	r3, #0
 8007250:	dd48      	ble.n	80072e4 <__sflush_r+0xac>
 8007252:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007254:	2e00      	cmp	r6, #0
 8007256:	d045      	beq.n	80072e4 <__sflush_r+0xac>
 8007258:	2300      	movs	r3, #0
 800725a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800725e:	682f      	ldr	r7, [r5, #0]
 8007260:	6a21      	ldr	r1, [r4, #32]
 8007262:	602b      	str	r3, [r5, #0]
 8007264:	d030      	beq.n	80072c8 <__sflush_r+0x90>
 8007266:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	0759      	lsls	r1, r3, #29
 800726c:	d505      	bpl.n	800727a <__sflush_r+0x42>
 800726e:	6863      	ldr	r3, [r4, #4]
 8007270:	1ad2      	subs	r2, r2, r3
 8007272:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007274:	b10b      	cbz	r3, 800727a <__sflush_r+0x42>
 8007276:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007278:	1ad2      	subs	r2, r2, r3
 800727a:	2300      	movs	r3, #0
 800727c:	4628      	mov	r0, r5
 800727e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007280:	6a21      	ldr	r1, [r4, #32]
 8007282:	47b0      	blx	r6
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	89a3      	ldrh	r3, [r4, #12]
 8007288:	d106      	bne.n	8007298 <__sflush_r+0x60>
 800728a:	6829      	ldr	r1, [r5, #0]
 800728c:	291d      	cmp	r1, #29
 800728e:	d82b      	bhi.n	80072e8 <__sflush_r+0xb0>
 8007290:	4a28      	ldr	r2, [pc, #160]	@ (8007334 <__sflush_r+0xfc>)
 8007292:	410a      	asrs	r2, r1
 8007294:	07d6      	lsls	r6, r2, #31
 8007296:	d427      	bmi.n	80072e8 <__sflush_r+0xb0>
 8007298:	2200      	movs	r2, #0
 800729a:	6062      	str	r2, [r4, #4]
 800729c:	6922      	ldr	r2, [r4, #16]
 800729e:	04d9      	lsls	r1, r3, #19
 80072a0:	6022      	str	r2, [r4, #0]
 80072a2:	d504      	bpl.n	80072ae <__sflush_r+0x76>
 80072a4:	1c42      	adds	r2, r0, #1
 80072a6:	d101      	bne.n	80072ac <__sflush_r+0x74>
 80072a8:	682b      	ldr	r3, [r5, #0]
 80072aa:	b903      	cbnz	r3, 80072ae <__sflush_r+0x76>
 80072ac:	6560      	str	r0, [r4, #84]	@ 0x54
 80072ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072b0:	602f      	str	r7, [r5, #0]
 80072b2:	b1b9      	cbz	r1, 80072e4 <__sflush_r+0xac>
 80072b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072b8:	4299      	cmp	r1, r3
 80072ba:	d002      	beq.n	80072c2 <__sflush_r+0x8a>
 80072bc:	4628      	mov	r0, r5
 80072be:	f000 fe35 	bl	8007f2c <_free_r>
 80072c2:	2300      	movs	r3, #0
 80072c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80072c6:	e00d      	b.n	80072e4 <__sflush_r+0xac>
 80072c8:	2301      	movs	r3, #1
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b0      	blx	r6
 80072ce:	4602      	mov	r2, r0
 80072d0:	1c50      	adds	r0, r2, #1
 80072d2:	d1c9      	bne.n	8007268 <__sflush_r+0x30>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d0c6      	beq.n	8007268 <__sflush_r+0x30>
 80072da:	2b1d      	cmp	r3, #29
 80072dc:	d001      	beq.n	80072e2 <__sflush_r+0xaa>
 80072de:	2b16      	cmp	r3, #22
 80072e0:	d11d      	bne.n	800731e <__sflush_r+0xe6>
 80072e2:	602f      	str	r7, [r5, #0]
 80072e4:	2000      	movs	r0, #0
 80072e6:	e021      	b.n	800732c <__sflush_r+0xf4>
 80072e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ec:	b21b      	sxth	r3, r3
 80072ee:	e01a      	b.n	8007326 <__sflush_r+0xee>
 80072f0:	690f      	ldr	r7, [r1, #16]
 80072f2:	2f00      	cmp	r7, #0
 80072f4:	d0f6      	beq.n	80072e4 <__sflush_r+0xac>
 80072f6:	0793      	lsls	r3, r2, #30
 80072f8:	bf18      	it	ne
 80072fa:	2300      	movne	r3, #0
 80072fc:	680e      	ldr	r6, [r1, #0]
 80072fe:	bf08      	it	eq
 8007300:	694b      	ldreq	r3, [r1, #20]
 8007302:	1bf6      	subs	r6, r6, r7
 8007304:	600f      	str	r7, [r1, #0]
 8007306:	608b      	str	r3, [r1, #8]
 8007308:	2e00      	cmp	r6, #0
 800730a:	ddeb      	ble.n	80072e4 <__sflush_r+0xac>
 800730c:	4633      	mov	r3, r6
 800730e:	463a      	mov	r2, r7
 8007310:	4628      	mov	r0, r5
 8007312:	6a21      	ldr	r1, [r4, #32]
 8007314:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007318:	47e0      	blx	ip
 800731a:	2800      	cmp	r0, #0
 800731c:	dc07      	bgt.n	800732e <__sflush_r+0xf6>
 800731e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007326:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800732a:	81a3      	strh	r3, [r4, #12]
 800732c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800732e:	4407      	add	r7, r0
 8007330:	1a36      	subs	r6, r6, r0
 8007332:	e7e9      	b.n	8007308 <__sflush_r+0xd0>
 8007334:	dfbffffe 	.word	0xdfbffffe

08007338 <_fflush_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	690b      	ldr	r3, [r1, #16]
 800733c:	4605      	mov	r5, r0
 800733e:	460c      	mov	r4, r1
 8007340:	b913      	cbnz	r3, 8007348 <_fflush_r+0x10>
 8007342:	2500      	movs	r5, #0
 8007344:	4628      	mov	r0, r5
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	b118      	cbz	r0, 8007352 <_fflush_r+0x1a>
 800734a:	6a03      	ldr	r3, [r0, #32]
 800734c:	b90b      	cbnz	r3, 8007352 <_fflush_r+0x1a>
 800734e:	f7fd fcaf 	bl	8004cb0 <__sinit>
 8007352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0f3      	beq.n	8007342 <_fflush_r+0xa>
 800735a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800735c:	07d0      	lsls	r0, r2, #31
 800735e:	d404      	bmi.n	800736a <_fflush_r+0x32>
 8007360:	0599      	lsls	r1, r3, #22
 8007362:	d402      	bmi.n	800736a <_fflush_r+0x32>
 8007364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007366:	f7fe fba0 	bl	8005aaa <__retarget_lock_acquire_recursive>
 800736a:	4628      	mov	r0, r5
 800736c:	4621      	mov	r1, r4
 800736e:	f7ff ff63 	bl	8007238 <__sflush_r>
 8007372:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007374:	4605      	mov	r5, r0
 8007376:	07da      	lsls	r2, r3, #31
 8007378:	d4e4      	bmi.n	8007344 <_fflush_r+0xc>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	059b      	lsls	r3, r3, #22
 800737e:	d4e1      	bmi.n	8007344 <_fflush_r+0xc>
 8007380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007382:	f7fe fb93 	bl	8005aac <__retarget_lock_release_recursive>
 8007386:	e7dd      	b.n	8007344 <_fflush_r+0xc>

08007388 <__malloc_lock>:
 8007388:	4801      	ldr	r0, [pc, #4]	@ (8007390 <__malloc_lock+0x8>)
 800738a:	f7fe bb8e 	b.w	8005aaa <__retarget_lock_acquire_recursive>
 800738e:	bf00      	nop
 8007390:	20000408 	.word	0x20000408

08007394 <__malloc_unlock>:
 8007394:	4801      	ldr	r0, [pc, #4]	@ (800739c <__malloc_unlock+0x8>)
 8007396:	f7fe bb89 	b.w	8005aac <__retarget_lock_release_recursive>
 800739a:	bf00      	nop
 800739c:	20000408 	.word	0x20000408

080073a0 <_Balloc>:
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	69c6      	ldr	r6, [r0, #28]
 80073a4:	4604      	mov	r4, r0
 80073a6:	460d      	mov	r5, r1
 80073a8:	b976      	cbnz	r6, 80073c8 <_Balloc+0x28>
 80073aa:	2010      	movs	r0, #16
 80073ac:	f7ff fe88 	bl	80070c0 <malloc>
 80073b0:	4602      	mov	r2, r0
 80073b2:	61e0      	str	r0, [r4, #28]
 80073b4:	b920      	cbnz	r0, 80073c0 <_Balloc+0x20>
 80073b6:	216b      	movs	r1, #107	@ 0x6b
 80073b8:	4b17      	ldr	r3, [pc, #92]	@ (8007418 <_Balloc+0x78>)
 80073ba:	4818      	ldr	r0, [pc, #96]	@ (800741c <_Balloc+0x7c>)
 80073bc:	f000 fd84 	bl	8007ec8 <__assert_func>
 80073c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073c4:	6006      	str	r6, [r0, #0]
 80073c6:	60c6      	str	r6, [r0, #12]
 80073c8:	69e6      	ldr	r6, [r4, #28]
 80073ca:	68f3      	ldr	r3, [r6, #12]
 80073cc:	b183      	cbz	r3, 80073f0 <_Balloc+0x50>
 80073ce:	69e3      	ldr	r3, [r4, #28]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073d6:	b9b8      	cbnz	r0, 8007408 <_Balloc+0x68>
 80073d8:	2101      	movs	r1, #1
 80073da:	fa01 f605 	lsl.w	r6, r1, r5
 80073de:	1d72      	adds	r2, r6, #5
 80073e0:	4620      	mov	r0, r4
 80073e2:	0092      	lsls	r2, r2, #2
 80073e4:	f000 fd8e 	bl	8007f04 <_calloc_r>
 80073e8:	b160      	cbz	r0, 8007404 <_Balloc+0x64>
 80073ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80073ee:	e00e      	b.n	800740e <_Balloc+0x6e>
 80073f0:	2221      	movs	r2, #33	@ 0x21
 80073f2:	2104      	movs	r1, #4
 80073f4:	4620      	mov	r0, r4
 80073f6:	f000 fd85 	bl	8007f04 <_calloc_r>
 80073fa:	69e3      	ldr	r3, [r4, #28]
 80073fc:	60f0      	str	r0, [r6, #12]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e4      	bne.n	80073ce <_Balloc+0x2e>
 8007404:	2000      	movs	r0, #0
 8007406:	bd70      	pop	{r4, r5, r6, pc}
 8007408:	6802      	ldr	r2, [r0, #0]
 800740a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800740e:	2300      	movs	r3, #0
 8007410:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007414:	e7f7      	b.n	8007406 <_Balloc+0x66>
 8007416:	bf00      	nop
 8007418:	0800875e 	.word	0x0800875e
 800741c:	0800884f 	.word	0x0800884f

08007420 <_Bfree>:
 8007420:	b570      	push	{r4, r5, r6, lr}
 8007422:	69c6      	ldr	r6, [r0, #28]
 8007424:	4605      	mov	r5, r0
 8007426:	460c      	mov	r4, r1
 8007428:	b976      	cbnz	r6, 8007448 <_Bfree+0x28>
 800742a:	2010      	movs	r0, #16
 800742c:	f7ff fe48 	bl	80070c0 <malloc>
 8007430:	4602      	mov	r2, r0
 8007432:	61e8      	str	r0, [r5, #28]
 8007434:	b920      	cbnz	r0, 8007440 <_Bfree+0x20>
 8007436:	218f      	movs	r1, #143	@ 0x8f
 8007438:	4b08      	ldr	r3, [pc, #32]	@ (800745c <_Bfree+0x3c>)
 800743a:	4809      	ldr	r0, [pc, #36]	@ (8007460 <_Bfree+0x40>)
 800743c:	f000 fd44 	bl	8007ec8 <__assert_func>
 8007440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007444:	6006      	str	r6, [r0, #0]
 8007446:	60c6      	str	r6, [r0, #12]
 8007448:	b13c      	cbz	r4, 800745a <_Bfree+0x3a>
 800744a:	69eb      	ldr	r3, [r5, #28]
 800744c:	6862      	ldr	r2, [r4, #4]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007454:	6021      	str	r1, [r4, #0]
 8007456:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800745a:	bd70      	pop	{r4, r5, r6, pc}
 800745c:	0800875e 	.word	0x0800875e
 8007460:	0800884f 	.word	0x0800884f

08007464 <__multadd>:
 8007464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007468:	4607      	mov	r7, r0
 800746a:	460c      	mov	r4, r1
 800746c:	461e      	mov	r6, r3
 800746e:	2000      	movs	r0, #0
 8007470:	690d      	ldr	r5, [r1, #16]
 8007472:	f101 0c14 	add.w	ip, r1, #20
 8007476:	f8dc 3000 	ldr.w	r3, [ip]
 800747a:	3001      	adds	r0, #1
 800747c:	b299      	uxth	r1, r3
 800747e:	fb02 6101 	mla	r1, r2, r1, r6
 8007482:	0c1e      	lsrs	r6, r3, #16
 8007484:	0c0b      	lsrs	r3, r1, #16
 8007486:	fb02 3306 	mla	r3, r2, r6, r3
 800748a:	b289      	uxth	r1, r1
 800748c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007490:	4285      	cmp	r5, r0
 8007492:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007496:	f84c 1b04 	str.w	r1, [ip], #4
 800749a:	dcec      	bgt.n	8007476 <__multadd+0x12>
 800749c:	b30e      	cbz	r6, 80074e2 <__multadd+0x7e>
 800749e:	68a3      	ldr	r3, [r4, #8]
 80074a0:	42ab      	cmp	r3, r5
 80074a2:	dc19      	bgt.n	80074d8 <__multadd+0x74>
 80074a4:	6861      	ldr	r1, [r4, #4]
 80074a6:	4638      	mov	r0, r7
 80074a8:	3101      	adds	r1, #1
 80074aa:	f7ff ff79 	bl	80073a0 <_Balloc>
 80074ae:	4680      	mov	r8, r0
 80074b0:	b928      	cbnz	r0, 80074be <__multadd+0x5a>
 80074b2:	4602      	mov	r2, r0
 80074b4:	21ba      	movs	r1, #186	@ 0xba
 80074b6:	4b0c      	ldr	r3, [pc, #48]	@ (80074e8 <__multadd+0x84>)
 80074b8:	480c      	ldr	r0, [pc, #48]	@ (80074ec <__multadd+0x88>)
 80074ba:	f000 fd05 	bl	8007ec8 <__assert_func>
 80074be:	6922      	ldr	r2, [r4, #16]
 80074c0:	f104 010c 	add.w	r1, r4, #12
 80074c4:	3202      	adds	r2, #2
 80074c6:	0092      	lsls	r2, r2, #2
 80074c8:	300c      	adds	r0, #12
 80074ca:	f7fe fafe 	bl	8005aca <memcpy>
 80074ce:	4621      	mov	r1, r4
 80074d0:	4638      	mov	r0, r7
 80074d2:	f7ff ffa5 	bl	8007420 <_Bfree>
 80074d6:	4644      	mov	r4, r8
 80074d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80074dc:	3501      	adds	r5, #1
 80074de:	615e      	str	r6, [r3, #20]
 80074e0:	6125      	str	r5, [r4, #16]
 80074e2:	4620      	mov	r0, r4
 80074e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074e8:	080087cd 	.word	0x080087cd
 80074ec:	0800884f 	.word	0x0800884f

080074f0 <__s2b>:
 80074f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f4:	4615      	mov	r5, r2
 80074f6:	2209      	movs	r2, #9
 80074f8:	461f      	mov	r7, r3
 80074fa:	3308      	adds	r3, #8
 80074fc:	460c      	mov	r4, r1
 80074fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007502:	4606      	mov	r6, r0
 8007504:	2201      	movs	r2, #1
 8007506:	2100      	movs	r1, #0
 8007508:	429a      	cmp	r2, r3
 800750a:	db09      	blt.n	8007520 <__s2b+0x30>
 800750c:	4630      	mov	r0, r6
 800750e:	f7ff ff47 	bl	80073a0 <_Balloc>
 8007512:	b940      	cbnz	r0, 8007526 <__s2b+0x36>
 8007514:	4602      	mov	r2, r0
 8007516:	21d3      	movs	r1, #211	@ 0xd3
 8007518:	4b18      	ldr	r3, [pc, #96]	@ (800757c <__s2b+0x8c>)
 800751a:	4819      	ldr	r0, [pc, #100]	@ (8007580 <__s2b+0x90>)
 800751c:	f000 fcd4 	bl	8007ec8 <__assert_func>
 8007520:	0052      	lsls	r2, r2, #1
 8007522:	3101      	adds	r1, #1
 8007524:	e7f0      	b.n	8007508 <__s2b+0x18>
 8007526:	9b08      	ldr	r3, [sp, #32]
 8007528:	2d09      	cmp	r5, #9
 800752a:	6143      	str	r3, [r0, #20]
 800752c:	f04f 0301 	mov.w	r3, #1
 8007530:	6103      	str	r3, [r0, #16]
 8007532:	dd16      	ble.n	8007562 <__s2b+0x72>
 8007534:	f104 0909 	add.w	r9, r4, #9
 8007538:	46c8      	mov	r8, r9
 800753a:	442c      	add	r4, r5
 800753c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007540:	4601      	mov	r1, r0
 8007542:	220a      	movs	r2, #10
 8007544:	4630      	mov	r0, r6
 8007546:	3b30      	subs	r3, #48	@ 0x30
 8007548:	f7ff ff8c 	bl	8007464 <__multadd>
 800754c:	45a0      	cmp	r8, r4
 800754e:	d1f5      	bne.n	800753c <__s2b+0x4c>
 8007550:	f1a5 0408 	sub.w	r4, r5, #8
 8007554:	444c      	add	r4, r9
 8007556:	1b2d      	subs	r5, r5, r4
 8007558:	1963      	adds	r3, r4, r5
 800755a:	42bb      	cmp	r3, r7
 800755c:	db04      	blt.n	8007568 <__s2b+0x78>
 800755e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007562:	2509      	movs	r5, #9
 8007564:	340a      	adds	r4, #10
 8007566:	e7f6      	b.n	8007556 <__s2b+0x66>
 8007568:	f814 3b01 	ldrb.w	r3, [r4], #1
 800756c:	4601      	mov	r1, r0
 800756e:	220a      	movs	r2, #10
 8007570:	4630      	mov	r0, r6
 8007572:	3b30      	subs	r3, #48	@ 0x30
 8007574:	f7ff ff76 	bl	8007464 <__multadd>
 8007578:	e7ee      	b.n	8007558 <__s2b+0x68>
 800757a:	bf00      	nop
 800757c:	080087cd 	.word	0x080087cd
 8007580:	0800884f 	.word	0x0800884f

08007584 <__hi0bits>:
 8007584:	4603      	mov	r3, r0
 8007586:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800758a:	bf3a      	itte	cc
 800758c:	0403      	lslcc	r3, r0, #16
 800758e:	2010      	movcc	r0, #16
 8007590:	2000      	movcs	r0, #0
 8007592:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007596:	bf3c      	itt	cc
 8007598:	021b      	lslcc	r3, r3, #8
 800759a:	3008      	addcc	r0, #8
 800759c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075a0:	bf3c      	itt	cc
 80075a2:	011b      	lslcc	r3, r3, #4
 80075a4:	3004      	addcc	r0, #4
 80075a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075aa:	bf3c      	itt	cc
 80075ac:	009b      	lslcc	r3, r3, #2
 80075ae:	3002      	addcc	r0, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	db05      	blt.n	80075c0 <__hi0bits+0x3c>
 80075b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80075b8:	f100 0001 	add.w	r0, r0, #1
 80075bc:	bf08      	it	eq
 80075be:	2020      	moveq	r0, #32
 80075c0:	4770      	bx	lr

080075c2 <__lo0bits>:
 80075c2:	6803      	ldr	r3, [r0, #0]
 80075c4:	4602      	mov	r2, r0
 80075c6:	f013 0007 	ands.w	r0, r3, #7
 80075ca:	d00b      	beq.n	80075e4 <__lo0bits+0x22>
 80075cc:	07d9      	lsls	r1, r3, #31
 80075ce:	d421      	bmi.n	8007614 <__lo0bits+0x52>
 80075d0:	0798      	lsls	r0, r3, #30
 80075d2:	bf49      	itett	mi
 80075d4:	085b      	lsrmi	r3, r3, #1
 80075d6:	089b      	lsrpl	r3, r3, #2
 80075d8:	2001      	movmi	r0, #1
 80075da:	6013      	strmi	r3, [r2, #0]
 80075dc:	bf5c      	itt	pl
 80075de:	2002      	movpl	r0, #2
 80075e0:	6013      	strpl	r3, [r2, #0]
 80075e2:	4770      	bx	lr
 80075e4:	b299      	uxth	r1, r3
 80075e6:	b909      	cbnz	r1, 80075ec <__lo0bits+0x2a>
 80075e8:	2010      	movs	r0, #16
 80075ea:	0c1b      	lsrs	r3, r3, #16
 80075ec:	b2d9      	uxtb	r1, r3
 80075ee:	b909      	cbnz	r1, 80075f4 <__lo0bits+0x32>
 80075f0:	3008      	adds	r0, #8
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	0719      	lsls	r1, r3, #28
 80075f6:	bf04      	itt	eq
 80075f8:	091b      	lsreq	r3, r3, #4
 80075fa:	3004      	addeq	r0, #4
 80075fc:	0799      	lsls	r1, r3, #30
 80075fe:	bf04      	itt	eq
 8007600:	089b      	lsreq	r3, r3, #2
 8007602:	3002      	addeq	r0, #2
 8007604:	07d9      	lsls	r1, r3, #31
 8007606:	d403      	bmi.n	8007610 <__lo0bits+0x4e>
 8007608:	085b      	lsrs	r3, r3, #1
 800760a:	f100 0001 	add.w	r0, r0, #1
 800760e:	d003      	beq.n	8007618 <__lo0bits+0x56>
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	4770      	bx	lr
 8007614:	2000      	movs	r0, #0
 8007616:	4770      	bx	lr
 8007618:	2020      	movs	r0, #32
 800761a:	4770      	bx	lr

0800761c <__i2b>:
 800761c:	b510      	push	{r4, lr}
 800761e:	460c      	mov	r4, r1
 8007620:	2101      	movs	r1, #1
 8007622:	f7ff febd 	bl	80073a0 <_Balloc>
 8007626:	4602      	mov	r2, r0
 8007628:	b928      	cbnz	r0, 8007636 <__i2b+0x1a>
 800762a:	f240 1145 	movw	r1, #325	@ 0x145
 800762e:	4b04      	ldr	r3, [pc, #16]	@ (8007640 <__i2b+0x24>)
 8007630:	4804      	ldr	r0, [pc, #16]	@ (8007644 <__i2b+0x28>)
 8007632:	f000 fc49 	bl	8007ec8 <__assert_func>
 8007636:	2301      	movs	r3, #1
 8007638:	6144      	str	r4, [r0, #20]
 800763a:	6103      	str	r3, [r0, #16]
 800763c:	bd10      	pop	{r4, pc}
 800763e:	bf00      	nop
 8007640:	080087cd 	.word	0x080087cd
 8007644:	0800884f 	.word	0x0800884f

08007648 <__multiply>:
 8007648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	4614      	mov	r4, r2
 800764e:	690a      	ldr	r2, [r1, #16]
 8007650:	6923      	ldr	r3, [r4, #16]
 8007652:	460f      	mov	r7, r1
 8007654:	429a      	cmp	r2, r3
 8007656:	bfa2      	ittt	ge
 8007658:	4623      	movge	r3, r4
 800765a:	460c      	movge	r4, r1
 800765c:	461f      	movge	r7, r3
 800765e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007662:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007666:	68a3      	ldr	r3, [r4, #8]
 8007668:	6861      	ldr	r1, [r4, #4]
 800766a:	eb0a 0609 	add.w	r6, sl, r9
 800766e:	42b3      	cmp	r3, r6
 8007670:	b085      	sub	sp, #20
 8007672:	bfb8      	it	lt
 8007674:	3101      	addlt	r1, #1
 8007676:	f7ff fe93 	bl	80073a0 <_Balloc>
 800767a:	b930      	cbnz	r0, 800768a <__multiply+0x42>
 800767c:	4602      	mov	r2, r0
 800767e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007682:	4b43      	ldr	r3, [pc, #268]	@ (8007790 <__multiply+0x148>)
 8007684:	4843      	ldr	r0, [pc, #268]	@ (8007794 <__multiply+0x14c>)
 8007686:	f000 fc1f 	bl	8007ec8 <__assert_func>
 800768a:	f100 0514 	add.w	r5, r0, #20
 800768e:	462b      	mov	r3, r5
 8007690:	2200      	movs	r2, #0
 8007692:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007696:	4543      	cmp	r3, r8
 8007698:	d321      	bcc.n	80076de <__multiply+0x96>
 800769a:	f107 0114 	add.w	r1, r7, #20
 800769e:	f104 0214 	add.w	r2, r4, #20
 80076a2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80076a6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80076aa:	9302      	str	r3, [sp, #8]
 80076ac:	1b13      	subs	r3, r2, r4
 80076ae:	3b15      	subs	r3, #21
 80076b0:	f023 0303 	bic.w	r3, r3, #3
 80076b4:	3304      	adds	r3, #4
 80076b6:	f104 0715 	add.w	r7, r4, #21
 80076ba:	42ba      	cmp	r2, r7
 80076bc:	bf38      	it	cc
 80076be:	2304      	movcc	r3, #4
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	9b02      	ldr	r3, [sp, #8]
 80076c4:	9103      	str	r1, [sp, #12]
 80076c6:	428b      	cmp	r3, r1
 80076c8:	d80c      	bhi.n	80076e4 <__multiply+0x9c>
 80076ca:	2e00      	cmp	r6, #0
 80076cc:	dd03      	ble.n	80076d6 <__multiply+0x8e>
 80076ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d05a      	beq.n	800778c <__multiply+0x144>
 80076d6:	6106      	str	r6, [r0, #16]
 80076d8:	b005      	add	sp, #20
 80076da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076de:	f843 2b04 	str.w	r2, [r3], #4
 80076e2:	e7d8      	b.n	8007696 <__multiply+0x4e>
 80076e4:	f8b1 a000 	ldrh.w	sl, [r1]
 80076e8:	f1ba 0f00 	cmp.w	sl, #0
 80076ec:	d023      	beq.n	8007736 <__multiply+0xee>
 80076ee:	46a9      	mov	r9, r5
 80076f0:	f04f 0c00 	mov.w	ip, #0
 80076f4:	f104 0e14 	add.w	lr, r4, #20
 80076f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80076fc:	f8d9 3000 	ldr.w	r3, [r9]
 8007700:	fa1f fb87 	uxth.w	fp, r7
 8007704:	b29b      	uxth	r3, r3
 8007706:	fb0a 330b 	mla	r3, sl, fp, r3
 800770a:	4463      	add	r3, ip
 800770c:	f8d9 c000 	ldr.w	ip, [r9]
 8007710:	0c3f      	lsrs	r7, r7, #16
 8007712:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007716:	fb0a c707 	mla	r7, sl, r7, ip
 800771a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800771e:	b29b      	uxth	r3, r3
 8007720:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007724:	4572      	cmp	r2, lr
 8007726:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800772a:	f849 3b04 	str.w	r3, [r9], #4
 800772e:	d8e3      	bhi.n	80076f8 <__multiply+0xb0>
 8007730:	9b01      	ldr	r3, [sp, #4]
 8007732:	f845 c003 	str.w	ip, [r5, r3]
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	3104      	adds	r1, #4
 800773a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800773e:	f1b9 0f00 	cmp.w	r9, #0
 8007742:	d021      	beq.n	8007788 <__multiply+0x140>
 8007744:	46ae      	mov	lr, r5
 8007746:	f04f 0a00 	mov.w	sl, #0
 800774a:	682b      	ldr	r3, [r5, #0]
 800774c:	f104 0c14 	add.w	ip, r4, #20
 8007750:	f8bc b000 	ldrh.w	fp, [ip]
 8007754:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007758:	b29b      	uxth	r3, r3
 800775a:	fb09 770b 	mla	r7, r9, fp, r7
 800775e:	4457      	add	r7, sl
 8007760:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007764:	f84e 3b04 	str.w	r3, [lr], #4
 8007768:	f85c 3b04 	ldr.w	r3, [ip], #4
 800776c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007770:	f8be 3000 	ldrh.w	r3, [lr]
 8007774:	4562      	cmp	r2, ip
 8007776:	fb09 330a 	mla	r3, r9, sl, r3
 800777a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800777e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007782:	d8e5      	bhi.n	8007750 <__multiply+0x108>
 8007784:	9f01      	ldr	r7, [sp, #4]
 8007786:	51eb      	str	r3, [r5, r7]
 8007788:	3504      	adds	r5, #4
 800778a:	e79a      	b.n	80076c2 <__multiply+0x7a>
 800778c:	3e01      	subs	r6, #1
 800778e:	e79c      	b.n	80076ca <__multiply+0x82>
 8007790:	080087cd 	.word	0x080087cd
 8007794:	0800884f 	.word	0x0800884f

08007798 <__pow5mult>:
 8007798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800779c:	4615      	mov	r5, r2
 800779e:	f012 0203 	ands.w	r2, r2, #3
 80077a2:	4607      	mov	r7, r0
 80077a4:	460e      	mov	r6, r1
 80077a6:	d007      	beq.n	80077b8 <__pow5mult+0x20>
 80077a8:	4c25      	ldr	r4, [pc, #148]	@ (8007840 <__pow5mult+0xa8>)
 80077aa:	3a01      	subs	r2, #1
 80077ac:	2300      	movs	r3, #0
 80077ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80077b2:	f7ff fe57 	bl	8007464 <__multadd>
 80077b6:	4606      	mov	r6, r0
 80077b8:	10ad      	asrs	r5, r5, #2
 80077ba:	d03d      	beq.n	8007838 <__pow5mult+0xa0>
 80077bc:	69fc      	ldr	r4, [r7, #28]
 80077be:	b97c      	cbnz	r4, 80077e0 <__pow5mult+0x48>
 80077c0:	2010      	movs	r0, #16
 80077c2:	f7ff fc7d 	bl	80070c0 <malloc>
 80077c6:	4602      	mov	r2, r0
 80077c8:	61f8      	str	r0, [r7, #28]
 80077ca:	b928      	cbnz	r0, 80077d8 <__pow5mult+0x40>
 80077cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80077d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007844 <__pow5mult+0xac>)
 80077d2:	481d      	ldr	r0, [pc, #116]	@ (8007848 <__pow5mult+0xb0>)
 80077d4:	f000 fb78 	bl	8007ec8 <__assert_func>
 80077d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80077dc:	6004      	str	r4, [r0, #0]
 80077de:	60c4      	str	r4, [r0, #12]
 80077e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80077e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80077e8:	b94c      	cbnz	r4, 80077fe <__pow5mult+0x66>
 80077ea:	f240 2171 	movw	r1, #625	@ 0x271
 80077ee:	4638      	mov	r0, r7
 80077f0:	f7ff ff14 	bl	800761c <__i2b>
 80077f4:	2300      	movs	r3, #0
 80077f6:	4604      	mov	r4, r0
 80077f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80077fc:	6003      	str	r3, [r0, #0]
 80077fe:	f04f 0900 	mov.w	r9, #0
 8007802:	07eb      	lsls	r3, r5, #31
 8007804:	d50a      	bpl.n	800781c <__pow5mult+0x84>
 8007806:	4631      	mov	r1, r6
 8007808:	4622      	mov	r2, r4
 800780a:	4638      	mov	r0, r7
 800780c:	f7ff ff1c 	bl	8007648 <__multiply>
 8007810:	4680      	mov	r8, r0
 8007812:	4631      	mov	r1, r6
 8007814:	4638      	mov	r0, r7
 8007816:	f7ff fe03 	bl	8007420 <_Bfree>
 800781a:	4646      	mov	r6, r8
 800781c:	106d      	asrs	r5, r5, #1
 800781e:	d00b      	beq.n	8007838 <__pow5mult+0xa0>
 8007820:	6820      	ldr	r0, [r4, #0]
 8007822:	b938      	cbnz	r0, 8007834 <__pow5mult+0x9c>
 8007824:	4622      	mov	r2, r4
 8007826:	4621      	mov	r1, r4
 8007828:	4638      	mov	r0, r7
 800782a:	f7ff ff0d 	bl	8007648 <__multiply>
 800782e:	6020      	str	r0, [r4, #0]
 8007830:	f8c0 9000 	str.w	r9, [r0]
 8007834:	4604      	mov	r4, r0
 8007836:	e7e4      	b.n	8007802 <__pow5mult+0x6a>
 8007838:	4630      	mov	r0, r6
 800783a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800783e:	bf00      	nop
 8007840:	080088a8 	.word	0x080088a8
 8007844:	0800875e 	.word	0x0800875e
 8007848:	0800884f 	.word	0x0800884f

0800784c <__lshift>:
 800784c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007850:	460c      	mov	r4, r1
 8007852:	4607      	mov	r7, r0
 8007854:	4691      	mov	r9, r2
 8007856:	6923      	ldr	r3, [r4, #16]
 8007858:	6849      	ldr	r1, [r1, #4]
 800785a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800785e:	68a3      	ldr	r3, [r4, #8]
 8007860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007864:	f108 0601 	add.w	r6, r8, #1
 8007868:	42b3      	cmp	r3, r6
 800786a:	db0b      	blt.n	8007884 <__lshift+0x38>
 800786c:	4638      	mov	r0, r7
 800786e:	f7ff fd97 	bl	80073a0 <_Balloc>
 8007872:	4605      	mov	r5, r0
 8007874:	b948      	cbnz	r0, 800788a <__lshift+0x3e>
 8007876:	4602      	mov	r2, r0
 8007878:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800787c:	4b27      	ldr	r3, [pc, #156]	@ (800791c <__lshift+0xd0>)
 800787e:	4828      	ldr	r0, [pc, #160]	@ (8007920 <__lshift+0xd4>)
 8007880:	f000 fb22 	bl	8007ec8 <__assert_func>
 8007884:	3101      	adds	r1, #1
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	e7ee      	b.n	8007868 <__lshift+0x1c>
 800788a:	2300      	movs	r3, #0
 800788c:	f100 0114 	add.w	r1, r0, #20
 8007890:	f100 0210 	add.w	r2, r0, #16
 8007894:	4618      	mov	r0, r3
 8007896:	4553      	cmp	r3, sl
 8007898:	db33      	blt.n	8007902 <__lshift+0xb6>
 800789a:	6920      	ldr	r0, [r4, #16]
 800789c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078a0:	f104 0314 	add.w	r3, r4, #20
 80078a4:	f019 091f 	ands.w	r9, r9, #31
 80078a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80078ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80078b0:	d02b      	beq.n	800790a <__lshift+0xbe>
 80078b2:	468a      	mov	sl, r1
 80078b4:	2200      	movs	r2, #0
 80078b6:	f1c9 0e20 	rsb	lr, r9, #32
 80078ba:	6818      	ldr	r0, [r3, #0]
 80078bc:	fa00 f009 	lsl.w	r0, r0, r9
 80078c0:	4310      	orrs	r0, r2
 80078c2:	f84a 0b04 	str.w	r0, [sl], #4
 80078c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ca:	459c      	cmp	ip, r3
 80078cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80078d0:	d8f3      	bhi.n	80078ba <__lshift+0x6e>
 80078d2:	ebac 0304 	sub.w	r3, ip, r4
 80078d6:	3b15      	subs	r3, #21
 80078d8:	f023 0303 	bic.w	r3, r3, #3
 80078dc:	3304      	adds	r3, #4
 80078de:	f104 0015 	add.w	r0, r4, #21
 80078e2:	4584      	cmp	ip, r0
 80078e4:	bf38      	it	cc
 80078e6:	2304      	movcc	r3, #4
 80078e8:	50ca      	str	r2, [r1, r3]
 80078ea:	b10a      	cbz	r2, 80078f0 <__lshift+0xa4>
 80078ec:	f108 0602 	add.w	r6, r8, #2
 80078f0:	3e01      	subs	r6, #1
 80078f2:	4638      	mov	r0, r7
 80078f4:	4621      	mov	r1, r4
 80078f6:	612e      	str	r6, [r5, #16]
 80078f8:	f7ff fd92 	bl	8007420 <_Bfree>
 80078fc:	4628      	mov	r0, r5
 80078fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007902:	f842 0f04 	str.w	r0, [r2, #4]!
 8007906:	3301      	adds	r3, #1
 8007908:	e7c5      	b.n	8007896 <__lshift+0x4a>
 800790a:	3904      	subs	r1, #4
 800790c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007910:	459c      	cmp	ip, r3
 8007912:	f841 2f04 	str.w	r2, [r1, #4]!
 8007916:	d8f9      	bhi.n	800790c <__lshift+0xc0>
 8007918:	e7ea      	b.n	80078f0 <__lshift+0xa4>
 800791a:	bf00      	nop
 800791c:	080087cd 	.word	0x080087cd
 8007920:	0800884f 	.word	0x0800884f

08007924 <__mcmp>:
 8007924:	4603      	mov	r3, r0
 8007926:	690a      	ldr	r2, [r1, #16]
 8007928:	6900      	ldr	r0, [r0, #16]
 800792a:	b530      	push	{r4, r5, lr}
 800792c:	1a80      	subs	r0, r0, r2
 800792e:	d10e      	bne.n	800794e <__mcmp+0x2a>
 8007930:	3314      	adds	r3, #20
 8007932:	3114      	adds	r1, #20
 8007934:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007938:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800793c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007940:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007944:	4295      	cmp	r5, r2
 8007946:	d003      	beq.n	8007950 <__mcmp+0x2c>
 8007948:	d205      	bcs.n	8007956 <__mcmp+0x32>
 800794a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800794e:	bd30      	pop	{r4, r5, pc}
 8007950:	42a3      	cmp	r3, r4
 8007952:	d3f3      	bcc.n	800793c <__mcmp+0x18>
 8007954:	e7fb      	b.n	800794e <__mcmp+0x2a>
 8007956:	2001      	movs	r0, #1
 8007958:	e7f9      	b.n	800794e <__mcmp+0x2a>
	...

0800795c <__mdiff>:
 800795c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	4689      	mov	r9, r1
 8007962:	4606      	mov	r6, r0
 8007964:	4611      	mov	r1, r2
 8007966:	4648      	mov	r0, r9
 8007968:	4614      	mov	r4, r2
 800796a:	f7ff ffdb 	bl	8007924 <__mcmp>
 800796e:	1e05      	subs	r5, r0, #0
 8007970:	d112      	bne.n	8007998 <__mdiff+0x3c>
 8007972:	4629      	mov	r1, r5
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff fd13 	bl	80073a0 <_Balloc>
 800797a:	4602      	mov	r2, r0
 800797c:	b928      	cbnz	r0, 800798a <__mdiff+0x2e>
 800797e:	f240 2137 	movw	r1, #567	@ 0x237
 8007982:	4b3e      	ldr	r3, [pc, #248]	@ (8007a7c <__mdiff+0x120>)
 8007984:	483e      	ldr	r0, [pc, #248]	@ (8007a80 <__mdiff+0x124>)
 8007986:	f000 fa9f 	bl	8007ec8 <__assert_func>
 800798a:	2301      	movs	r3, #1
 800798c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007990:	4610      	mov	r0, r2
 8007992:	b003      	add	sp, #12
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007998:	bfbc      	itt	lt
 800799a:	464b      	movlt	r3, r9
 800799c:	46a1      	movlt	r9, r4
 800799e:	4630      	mov	r0, r6
 80079a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80079a4:	bfba      	itte	lt
 80079a6:	461c      	movlt	r4, r3
 80079a8:	2501      	movlt	r5, #1
 80079aa:	2500      	movge	r5, #0
 80079ac:	f7ff fcf8 	bl	80073a0 <_Balloc>
 80079b0:	4602      	mov	r2, r0
 80079b2:	b918      	cbnz	r0, 80079bc <__mdiff+0x60>
 80079b4:	f240 2145 	movw	r1, #581	@ 0x245
 80079b8:	4b30      	ldr	r3, [pc, #192]	@ (8007a7c <__mdiff+0x120>)
 80079ba:	e7e3      	b.n	8007984 <__mdiff+0x28>
 80079bc:	f100 0b14 	add.w	fp, r0, #20
 80079c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80079c4:	f109 0310 	add.w	r3, r9, #16
 80079c8:	60c5      	str	r5, [r0, #12]
 80079ca:	f04f 0c00 	mov.w	ip, #0
 80079ce:	f109 0514 	add.w	r5, r9, #20
 80079d2:	46d9      	mov	r9, fp
 80079d4:	6926      	ldr	r6, [r4, #16]
 80079d6:	f104 0e14 	add.w	lr, r4, #20
 80079da:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80079de:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80079e2:	9301      	str	r3, [sp, #4]
 80079e4:	9b01      	ldr	r3, [sp, #4]
 80079e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80079ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80079ee:	b281      	uxth	r1, r0
 80079f0:	9301      	str	r3, [sp, #4]
 80079f2:	fa1f f38a 	uxth.w	r3, sl
 80079f6:	1a5b      	subs	r3, r3, r1
 80079f8:	0c00      	lsrs	r0, r0, #16
 80079fa:	4463      	add	r3, ip
 80079fc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007a00:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007a0a:	4576      	cmp	r6, lr
 8007a0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a10:	f849 3b04 	str.w	r3, [r9], #4
 8007a14:	d8e6      	bhi.n	80079e4 <__mdiff+0x88>
 8007a16:	1b33      	subs	r3, r6, r4
 8007a18:	3b15      	subs	r3, #21
 8007a1a:	f023 0303 	bic.w	r3, r3, #3
 8007a1e:	3415      	adds	r4, #21
 8007a20:	3304      	adds	r3, #4
 8007a22:	42a6      	cmp	r6, r4
 8007a24:	bf38      	it	cc
 8007a26:	2304      	movcc	r3, #4
 8007a28:	441d      	add	r5, r3
 8007a2a:	445b      	add	r3, fp
 8007a2c:	461e      	mov	r6, r3
 8007a2e:	462c      	mov	r4, r5
 8007a30:	4544      	cmp	r4, r8
 8007a32:	d30e      	bcc.n	8007a52 <__mdiff+0xf6>
 8007a34:	f108 0103 	add.w	r1, r8, #3
 8007a38:	1b49      	subs	r1, r1, r5
 8007a3a:	f021 0103 	bic.w	r1, r1, #3
 8007a3e:	3d03      	subs	r5, #3
 8007a40:	45a8      	cmp	r8, r5
 8007a42:	bf38      	it	cc
 8007a44:	2100      	movcc	r1, #0
 8007a46:	440b      	add	r3, r1
 8007a48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a4c:	b199      	cbz	r1, 8007a76 <__mdiff+0x11a>
 8007a4e:	6117      	str	r7, [r2, #16]
 8007a50:	e79e      	b.n	8007990 <__mdiff+0x34>
 8007a52:	46e6      	mov	lr, ip
 8007a54:	f854 1b04 	ldr.w	r1, [r4], #4
 8007a58:	fa1f fc81 	uxth.w	ip, r1
 8007a5c:	44f4      	add	ip, lr
 8007a5e:	0c08      	lsrs	r0, r1, #16
 8007a60:	4471      	add	r1, lr
 8007a62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007a66:	b289      	uxth	r1, r1
 8007a68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a70:	f846 1b04 	str.w	r1, [r6], #4
 8007a74:	e7dc      	b.n	8007a30 <__mdiff+0xd4>
 8007a76:	3f01      	subs	r7, #1
 8007a78:	e7e6      	b.n	8007a48 <__mdiff+0xec>
 8007a7a:	bf00      	nop
 8007a7c:	080087cd 	.word	0x080087cd
 8007a80:	0800884f 	.word	0x0800884f

08007a84 <__ulp>:
 8007a84:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac0 <__ulp+0x3c>)
 8007a86:	400b      	ands	r3, r1
 8007a88:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dc08      	bgt.n	8007aa2 <__ulp+0x1e>
 8007a90:	425b      	negs	r3, r3
 8007a92:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007a96:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a9a:	da04      	bge.n	8007aa6 <__ulp+0x22>
 8007a9c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007aa0:	4113      	asrs	r3, r2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	e008      	b.n	8007ab8 <__ulp+0x34>
 8007aa6:	f1a2 0314 	sub.w	r3, r2, #20
 8007aaa:	2b1e      	cmp	r3, #30
 8007aac:	bfd6      	itet	le
 8007aae:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007ab2:	2201      	movgt	r2, #1
 8007ab4:	40da      	lsrle	r2, r3
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4610      	mov	r0, r2
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	7ff00000 	.word	0x7ff00000

08007ac4 <__b2d>:
 8007ac4:	6902      	ldr	r2, [r0, #16]
 8007ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac8:	f100 0614 	add.w	r6, r0, #20
 8007acc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007ad0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007ad4:	4f1e      	ldr	r7, [pc, #120]	@ (8007b50 <__b2d+0x8c>)
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f7ff fd54 	bl	8007584 <__hi0bits>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f1c0 0020 	rsb	r0, r0, #32
 8007ae2:	2b0a      	cmp	r3, #10
 8007ae4:	f1a2 0504 	sub.w	r5, r2, #4
 8007ae8:	6008      	str	r0, [r1, #0]
 8007aea:	dc12      	bgt.n	8007b12 <__b2d+0x4e>
 8007aec:	42ae      	cmp	r6, r5
 8007aee:	bf2c      	ite	cs
 8007af0:	2200      	movcs	r2, #0
 8007af2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007af6:	f1c3 0c0b 	rsb	ip, r3, #11
 8007afa:	3315      	adds	r3, #21
 8007afc:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007b00:	fa04 f303 	lsl.w	r3, r4, r3
 8007b04:	fa22 f20c 	lsr.w	r2, r2, ip
 8007b08:	ea4e 0107 	orr.w	r1, lr, r7
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	4610      	mov	r0, r2
 8007b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b12:	42ae      	cmp	r6, r5
 8007b14:	bf36      	itet	cc
 8007b16:	f1a2 0508 	subcc.w	r5, r2, #8
 8007b1a:	2200      	movcs	r2, #0
 8007b1c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007b20:	3b0b      	subs	r3, #11
 8007b22:	d012      	beq.n	8007b4a <__b2d+0x86>
 8007b24:	f1c3 0720 	rsb	r7, r3, #32
 8007b28:	fa22 f107 	lsr.w	r1, r2, r7
 8007b2c:	409c      	lsls	r4, r3
 8007b2e:	430c      	orrs	r4, r1
 8007b30:	42b5      	cmp	r5, r6
 8007b32:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007b36:	bf94      	ite	ls
 8007b38:	2400      	movls	r4, #0
 8007b3a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007b3e:	409a      	lsls	r2, r3
 8007b40:	40fc      	lsrs	r4, r7
 8007b42:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007b46:	4322      	orrs	r2, r4
 8007b48:	e7e1      	b.n	8007b0e <__b2d+0x4a>
 8007b4a:	ea44 0107 	orr.w	r1, r4, r7
 8007b4e:	e7de      	b.n	8007b0e <__b2d+0x4a>
 8007b50:	3ff00000 	.word	0x3ff00000

08007b54 <__d2b>:
 8007b54:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007b58:	2101      	movs	r1, #1
 8007b5a:	4690      	mov	r8, r2
 8007b5c:	4699      	mov	r9, r3
 8007b5e:	9e08      	ldr	r6, [sp, #32]
 8007b60:	f7ff fc1e 	bl	80073a0 <_Balloc>
 8007b64:	4604      	mov	r4, r0
 8007b66:	b930      	cbnz	r0, 8007b76 <__d2b+0x22>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b6e:	4b23      	ldr	r3, [pc, #140]	@ (8007bfc <__d2b+0xa8>)
 8007b70:	4823      	ldr	r0, [pc, #140]	@ (8007c00 <__d2b+0xac>)
 8007b72:	f000 f9a9 	bl	8007ec8 <__assert_func>
 8007b76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b7e:	b10d      	cbz	r5, 8007b84 <__d2b+0x30>
 8007b80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	f1b8 0300 	subs.w	r3, r8, #0
 8007b8a:	d024      	beq.n	8007bd6 <__d2b+0x82>
 8007b8c:	4668      	mov	r0, sp
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	f7ff fd17 	bl	80075c2 <__lo0bits>
 8007b94:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b98:	b1d8      	cbz	r0, 8007bd2 <__d2b+0x7e>
 8007b9a:	f1c0 0320 	rsb	r3, r0, #32
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	40c2      	lsrs	r2, r0
 8007ba6:	6163      	str	r3, [r4, #20]
 8007ba8:	9201      	str	r2, [sp, #4]
 8007baa:	9b01      	ldr	r3, [sp, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	bf0c      	ite	eq
 8007bb0:	2201      	moveq	r2, #1
 8007bb2:	2202      	movne	r2, #2
 8007bb4:	61a3      	str	r3, [r4, #24]
 8007bb6:	6122      	str	r2, [r4, #16]
 8007bb8:	b1ad      	cbz	r5, 8007be6 <__d2b+0x92>
 8007bba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007bbe:	4405      	add	r5, r0
 8007bc0:	6035      	str	r5, [r6, #0]
 8007bc2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc8:	6018      	str	r0, [r3, #0]
 8007bca:	4620      	mov	r0, r4
 8007bcc:	b002      	add	sp, #8
 8007bce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007bd2:	6161      	str	r1, [r4, #20]
 8007bd4:	e7e9      	b.n	8007baa <__d2b+0x56>
 8007bd6:	a801      	add	r0, sp, #4
 8007bd8:	f7ff fcf3 	bl	80075c2 <__lo0bits>
 8007bdc:	9b01      	ldr	r3, [sp, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	6163      	str	r3, [r4, #20]
 8007be2:	3020      	adds	r0, #32
 8007be4:	e7e7      	b.n	8007bb6 <__d2b+0x62>
 8007be6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007bea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bee:	6030      	str	r0, [r6, #0]
 8007bf0:	6918      	ldr	r0, [r3, #16]
 8007bf2:	f7ff fcc7 	bl	8007584 <__hi0bits>
 8007bf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bfa:	e7e4      	b.n	8007bc6 <__d2b+0x72>
 8007bfc:	080087cd 	.word	0x080087cd
 8007c00:	0800884f 	.word	0x0800884f

08007c04 <__ratio>:
 8007c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	e9cd 1000 	strd	r1, r0, [sp]
 8007c0e:	a902      	add	r1, sp, #8
 8007c10:	f7ff ff58 	bl	8007ac4 <__b2d>
 8007c14:	468b      	mov	fp, r1
 8007c16:	4606      	mov	r6, r0
 8007c18:	460f      	mov	r7, r1
 8007c1a:	9800      	ldr	r0, [sp, #0]
 8007c1c:	a903      	add	r1, sp, #12
 8007c1e:	f7ff ff51 	bl	8007ac4 <__b2d>
 8007c22:	460d      	mov	r5, r1
 8007c24:	9b01      	ldr	r3, [sp, #4]
 8007c26:	4689      	mov	r9, r1
 8007c28:	6919      	ldr	r1, [r3, #16]
 8007c2a:	9b00      	ldr	r3, [sp, #0]
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	4630      	mov	r0, r6
 8007c32:	1ac9      	subs	r1, r1, r3
 8007c34:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007c38:	1a9b      	subs	r3, r3, r2
 8007c3a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	bfcd      	iteet	gt
 8007c42:	463a      	movgt	r2, r7
 8007c44:	462a      	movle	r2, r5
 8007c46:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007c4a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007c4e:	bfd8      	it	le
 8007c50:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007c54:	464b      	mov	r3, r9
 8007c56:	4622      	mov	r2, r4
 8007c58:	4659      	mov	r1, fp
 8007c5a:	f7f8 fe1b 	bl	8000894 <__aeabi_ddiv>
 8007c5e:	b005      	add	sp, #20
 8007c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c64 <__copybits>:
 8007c64:	3901      	subs	r1, #1
 8007c66:	b570      	push	{r4, r5, r6, lr}
 8007c68:	1149      	asrs	r1, r1, #5
 8007c6a:	6914      	ldr	r4, [r2, #16]
 8007c6c:	3101      	adds	r1, #1
 8007c6e:	f102 0314 	add.w	r3, r2, #20
 8007c72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007c76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c7a:	1f05      	subs	r5, r0, #4
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	d30c      	bcc.n	8007c9a <__copybits+0x36>
 8007c80:	1aa3      	subs	r3, r4, r2
 8007c82:	3b11      	subs	r3, #17
 8007c84:	f023 0303 	bic.w	r3, r3, #3
 8007c88:	3211      	adds	r2, #17
 8007c8a:	42a2      	cmp	r2, r4
 8007c8c:	bf88      	it	hi
 8007c8e:	2300      	movhi	r3, #0
 8007c90:	4418      	add	r0, r3
 8007c92:	2300      	movs	r3, #0
 8007c94:	4288      	cmp	r0, r1
 8007c96:	d305      	bcc.n	8007ca4 <__copybits+0x40>
 8007c98:	bd70      	pop	{r4, r5, r6, pc}
 8007c9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007c9e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007ca2:	e7eb      	b.n	8007c7c <__copybits+0x18>
 8007ca4:	f840 3b04 	str.w	r3, [r0], #4
 8007ca8:	e7f4      	b.n	8007c94 <__copybits+0x30>

08007caa <__any_on>:
 8007caa:	f100 0214 	add.w	r2, r0, #20
 8007cae:	6900      	ldr	r0, [r0, #16]
 8007cb0:	114b      	asrs	r3, r1, #5
 8007cb2:	4298      	cmp	r0, r3
 8007cb4:	b510      	push	{r4, lr}
 8007cb6:	db11      	blt.n	8007cdc <__any_on+0x32>
 8007cb8:	dd0a      	ble.n	8007cd0 <__any_on+0x26>
 8007cba:	f011 011f 	ands.w	r1, r1, #31
 8007cbe:	d007      	beq.n	8007cd0 <__any_on+0x26>
 8007cc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007cc4:	fa24 f001 	lsr.w	r0, r4, r1
 8007cc8:	fa00 f101 	lsl.w	r1, r0, r1
 8007ccc:	428c      	cmp	r4, r1
 8007cce:	d10b      	bne.n	8007ce8 <__any_on+0x3e>
 8007cd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d803      	bhi.n	8007ce0 <__any_on+0x36>
 8007cd8:	2000      	movs	r0, #0
 8007cda:	bd10      	pop	{r4, pc}
 8007cdc:	4603      	mov	r3, r0
 8007cde:	e7f7      	b.n	8007cd0 <__any_on+0x26>
 8007ce0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ce4:	2900      	cmp	r1, #0
 8007ce6:	d0f5      	beq.n	8007cd4 <__any_on+0x2a>
 8007ce8:	2001      	movs	r0, #1
 8007cea:	e7f6      	b.n	8007cda <__any_on+0x30>

08007cec <__sread>:
 8007cec:	b510      	push	{r4, lr}
 8007cee:	460c      	mov	r4, r1
 8007cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf4:	f000 f8b4 	bl	8007e60 <_read_r>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	bfab      	itete	ge
 8007cfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8007d00:	181b      	addge	r3, r3, r0
 8007d02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d06:	bfac      	ite	ge
 8007d08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d0a:	81a3      	strhlt	r3, [r4, #12]
 8007d0c:	bd10      	pop	{r4, pc}

08007d0e <__swrite>:
 8007d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d12:	461f      	mov	r7, r3
 8007d14:	898b      	ldrh	r3, [r1, #12]
 8007d16:	4605      	mov	r5, r0
 8007d18:	05db      	lsls	r3, r3, #23
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	4616      	mov	r6, r2
 8007d1e:	d505      	bpl.n	8007d2c <__swrite+0x1e>
 8007d20:	2302      	movs	r3, #2
 8007d22:	2200      	movs	r2, #0
 8007d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d28:	f000 f888 	bl	8007e3c <_lseek_r>
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	4632      	mov	r2, r6
 8007d30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	4628      	mov	r0, r5
 8007d38:	463b      	mov	r3, r7
 8007d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d42:	f000 b8af 	b.w	8007ea4 <_write_r>

08007d46 <__sseek>:
 8007d46:	b510      	push	{r4, lr}
 8007d48:	460c      	mov	r4, r1
 8007d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d4e:	f000 f875 	bl	8007e3c <_lseek_r>
 8007d52:	1c43      	adds	r3, r0, #1
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	bf15      	itete	ne
 8007d58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d62:	81a3      	strheq	r3, [r4, #12]
 8007d64:	bf18      	it	ne
 8007d66:	81a3      	strhne	r3, [r4, #12]
 8007d68:	bd10      	pop	{r4, pc}

08007d6a <__sclose>:
 8007d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d6e:	f000 b855 	b.w	8007e1c <_close_r>

08007d72 <_realloc_r>:
 8007d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d76:	4680      	mov	r8, r0
 8007d78:	4615      	mov	r5, r2
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	b921      	cbnz	r1, 8007d88 <_realloc_r+0x16>
 8007d7e:	4611      	mov	r1, r2
 8007d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d84:	f7ff b9c6 	b.w	8007114 <_malloc_r>
 8007d88:	b92a      	cbnz	r2, 8007d96 <_realloc_r+0x24>
 8007d8a:	f000 f8cf 	bl	8007f2c <_free_r>
 8007d8e:	2400      	movs	r4, #0
 8007d90:	4620      	mov	r0, r4
 8007d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d96:	f000 f911 	bl	8007fbc <_malloc_usable_size_r>
 8007d9a:	4285      	cmp	r5, r0
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	d802      	bhi.n	8007da6 <_realloc_r+0x34>
 8007da0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007da4:	d8f4      	bhi.n	8007d90 <_realloc_r+0x1e>
 8007da6:	4629      	mov	r1, r5
 8007da8:	4640      	mov	r0, r8
 8007daa:	f7ff f9b3 	bl	8007114 <_malloc_r>
 8007dae:	4607      	mov	r7, r0
 8007db0:	2800      	cmp	r0, #0
 8007db2:	d0ec      	beq.n	8007d8e <_realloc_r+0x1c>
 8007db4:	42b5      	cmp	r5, r6
 8007db6:	462a      	mov	r2, r5
 8007db8:	4621      	mov	r1, r4
 8007dba:	bf28      	it	cs
 8007dbc:	4632      	movcs	r2, r6
 8007dbe:	f7fd fe84 	bl	8005aca <memcpy>
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	f000 f8b1 	bl	8007f2c <_free_r>
 8007dca:	463c      	mov	r4, r7
 8007dcc:	e7e0      	b.n	8007d90 <_realloc_r+0x1e>

08007dce <__ascii_wctomb>:
 8007dce:	4603      	mov	r3, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	b141      	cbz	r1, 8007de6 <__ascii_wctomb+0x18>
 8007dd4:	2aff      	cmp	r2, #255	@ 0xff
 8007dd6:	d904      	bls.n	8007de2 <__ascii_wctomb+0x14>
 8007dd8:	228a      	movs	r2, #138	@ 0x8a
 8007dda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	4770      	bx	lr
 8007de2:	2001      	movs	r0, #1
 8007de4:	700a      	strb	r2, [r1, #0]
 8007de6:	4770      	bx	lr

08007de8 <memmove>:
 8007de8:	4288      	cmp	r0, r1
 8007dea:	b510      	push	{r4, lr}
 8007dec:	eb01 0402 	add.w	r4, r1, r2
 8007df0:	d902      	bls.n	8007df8 <memmove+0x10>
 8007df2:	4284      	cmp	r4, r0
 8007df4:	4623      	mov	r3, r4
 8007df6:	d807      	bhi.n	8007e08 <memmove+0x20>
 8007df8:	1e43      	subs	r3, r0, #1
 8007dfa:	42a1      	cmp	r1, r4
 8007dfc:	d008      	beq.n	8007e10 <memmove+0x28>
 8007dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e06:	e7f8      	b.n	8007dfa <memmove+0x12>
 8007e08:	4601      	mov	r1, r0
 8007e0a:	4402      	add	r2, r0
 8007e0c:	428a      	cmp	r2, r1
 8007e0e:	d100      	bne.n	8007e12 <memmove+0x2a>
 8007e10:	bd10      	pop	{r4, pc}
 8007e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e1a:	e7f7      	b.n	8007e0c <memmove+0x24>

08007e1c <_close_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	2300      	movs	r3, #0
 8007e20:	4d05      	ldr	r5, [pc, #20]	@ (8007e38 <_close_r+0x1c>)
 8007e22:	4604      	mov	r4, r0
 8007e24:	4608      	mov	r0, r1
 8007e26:	602b      	str	r3, [r5, #0]
 8007e28:	f7f9 fc47 	bl	80016ba <_close>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d102      	bne.n	8007e36 <_close_r+0x1a>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	b103      	cbz	r3, 8007e36 <_close_r+0x1a>
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	20000414 	.word	0x20000414

08007e3c <_lseek_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	4611      	mov	r1, r2
 8007e44:	2200      	movs	r2, #0
 8007e46:	4d05      	ldr	r5, [pc, #20]	@ (8007e5c <_lseek_r+0x20>)
 8007e48:	602a      	str	r2, [r5, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f7f9 fc59 	bl	8001702 <_lseek>
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d102      	bne.n	8007e5a <_lseek_r+0x1e>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	b103      	cbz	r3, 8007e5a <_lseek_r+0x1e>
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	20000414 	.word	0x20000414

08007e60 <_read_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	4611      	mov	r1, r2
 8007e68:	2200      	movs	r2, #0
 8007e6a:	4d05      	ldr	r5, [pc, #20]	@ (8007e80 <_read_r+0x20>)
 8007e6c:	602a      	str	r2, [r5, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f7f9 fbea 	bl	8001648 <_read>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	d102      	bne.n	8007e7e <_read_r+0x1e>
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	b103      	cbz	r3, 8007e7e <_read_r+0x1e>
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	20000414 	.word	0x20000414

08007e84 <_sbrk_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	2300      	movs	r3, #0
 8007e88:	4d05      	ldr	r5, [pc, #20]	@ (8007ea0 <_sbrk_r+0x1c>)
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	602b      	str	r3, [r5, #0]
 8007e90:	f7f9 fc44 	bl	800171c <_sbrk>
 8007e94:	1c43      	adds	r3, r0, #1
 8007e96:	d102      	bne.n	8007e9e <_sbrk_r+0x1a>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	b103      	cbz	r3, 8007e9e <_sbrk_r+0x1a>
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ea0:	20000414 	.word	0x20000414

08007ea4 <_write_r>:
 8007ea4:	b538      	push	{r3, r4, r5, lr}
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	4608      	mov	r0, r1
 8007eaa:	4611      	mov	r1, r2
 8007eac:	2200      	movs	r2, #0
 8007eae:	4d05      	ldr	r5, [pc, #20]	@ (8007ec4 <_write_r+0x20>)
 8007eb0:	602a      	str	r2, [r5, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	f7f9 fbe5 	bl	8001682 <_write>
 8007eb8:	1c43      	adds	r3, r0, #1
 8007eba:	d102      	bne.n	8007ec2 <_write_r+0x1e>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	b103      	cbz	r3, 8007ec2 <_write_r+0x1e>
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	bd38      	pop	{r3, r4, r5, pc}
 8007ec4:	20000414 	.word	0x20000414

08007ec8 <__assert_func>:
 8007ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eca:	4614      	mov	r4, r2
 8007ecc:	461a      	mov	r2, r3
 8007ece:	4b09      	ldr	r3, [pc, #36]	@ (8007ef4 <__assert_func+0x2c>)
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68d8      	ldr	r0, [r3, #12]
 8007ed6:	b954      	cbnz	r4, 8007eee <__assert_func+0x26>
 8007ed8:	4b07      	ldr	r3, [pc, #28]	@ (8007ef8 <__assert_func+0x30>)
 8007eda:	461c      	mov	r4, r3
 8007edc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ee0:	9100      	str	r1, [sp, #0]
 8007ee2:	462b      	mov	r3, r5
 8007ee4:	4905      	ldr	r1, [pc, #20]	@ (8007efc <__assert_func+0x34>)
 8007ee6:	f000 f871 	bl	8007fcc <fiprintf>
 8007eea:	f000 f881 	bl	8007ff0 <abort>
 8007eee:	4b04      	ldr	r3, [pc, #16]	@ (8007f00 <__assert_func+0x38>)
 8007ef0:	e7f4      	b.n	8007edc <__assert_func+0x14>
 8007ef2:	bf00      	nop
 8007ef4:	20000188 	.word	0x20000188
 8007ef8:	080089e3 	.word	0x080089e3
 8007efc:	080089b5 	.word	0x080089b5
 8007f00:	080089a8 	.word	0x080089a8

08007f04 <_calloc_r>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	fba1 5402 	umull	r5, r4, r1, r2
 8007f0a:	b93c      	cbnz	r4, 8007f1c <_calloc_r+0x18>
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	f7ff f901 	bl	8007114 <_malloc_r>
 8007f12:	4606      	mov	r6, r0
 8007f14:	b928      	cbnz	r0, 8007f22 <_calloc_r+0x1e>
 8007f16:	2600      	movs	r6, #0
 8007f18:	4630      	mov	r0, r6
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	220c      	movs	r2, #12
 8007f1e:	6002      	str	r2, [r0, #0]
 8007f20:	e7f9      	b.n	8007f16 <_calloc_r+0x12>
 8007f22:	462a      	mov	r2, r5
 8007f24:	4621      	mov	r1, r4
 8007f26:	f7fd fd89 	bl	8005a3c <memset>
 8007f2a:	e7f5      	b.n	8007f18 <_calloc_r+0x14>

08007f2c <_free_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4605      	mov	r5, r0
 8007f30:	2900      	cmp	r1, #0
 8007f32:	d040      	beq.n	8007fb6 <_free_r+0x8a>
 8007f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f38:	1f0c      	subs	r4, r1, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bfb8      	it	lt
 8007f3e:	18e4      	addlt	r4, r4, r3
 8007f40:	f7ff fa22 	bl	8007388 <__malloc_lock>
 8007f44:	4a1c      	ldr	r2, [pc, #112]	@ (8007fb8 <_free_r+0x8c>)
 8007f46:	6813      	ldr	r3, [r2, #0]
 8007f48:	b933      	cbnz	r3, 8007f58 <_free_r+0x2c>
 8007f4a:	6063      	str	r3, [r4, #4]
 8007f4c:	6014      	str	r4, [r2, #0]
 8007f4e:	4628      	mov	r0, r5
 8007f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f54:	f7ff ba1e 	b.w	8007394 <__malloc_unlock>
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	d908      	bls.n	8007f6e <_free_r+0x42>
 8007f5c:	6820      	ldr	r0, [r4, #0]
 8007f5e:	1821      	adds	r1, r4, r0
 8007f60:	428b      	cmp	r3, r1
 8007f62:	bf01      	itttt	eq
 8007f64:	6819      	ldreq	r1, [r3, #0]
 8007f66:	685b      	ldreq	r3, [r3, #4]
 8007f68:	1809      	addeq	r1, r1, r0
 8007f6a:	6021      	streq	r1, [r4, #0]
 8007f6c:	e7ed      	b.n	8007f4a <_free_r+0x1e>
 8007f6e:	461a      	mov	r2, r3
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	b10b      	cbz	r3, 8007f78 <_free_r+0x4c>
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	d9fa      	bls.n	8007f6e <_free_r+0x42>
 8007f78:	6811      	ldr	r1, [r2, #0]
 8007f7a:	1850      	adds	r0, r2, r1
 8007f7c:	42a0      	cmp	r0, r4
 8007f7e:	d10b      	bne.n	8007f98 <_free_r+0x6c>
 8007f80:	6820      	ldr	r0, [r4, #0]
 8007f82:	4401      	add	r1, r0
 8007f84:	1850      	adds	r0, r2, r1
 8007f86:	4283      	cmp	r3, r0
 8007f88:	6011      	str	r1, [r2, #0]
 8007f8a:	d1e0      	bne.n	8007f4e <_free_r+0x22>
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	4408      	add	r0, r1
 8007f92:	6010      	str	r0, [r2, #0]
 8007f94:	6053      	str	r3, [r2, #4]
 8007f96:	e7da      	b.n	8007f4e <_free_r+0x22>
 8007f98:	d902      	bls.n	8007fa0 <_free_r+0x74>
 8007f9a:	230c      	movs	r3, #12
 8007f9c:	602b      	str	r3, [r5, #0]
 8007f9e:	e7d6      	b.n	8007f4e <_free_r+0x22>
 8007fa0:	6820      	ldr	r0, [r4, #0]
 8007fa2:	1821      	adds	r1, r4, r0
 8007fa4:	428b      	cmp	r3, r1
 8007fa6:	bf01      	itttt	eq
 8007fa8:	6819      	ldreq	r1, [r3, #0]
 8007faa:	685b      	ldreq	r3, [r3, #4]
 8007fac:	1809      	addeq	r1, r1, r0
 8007fae:	6021      	streq	r1, [r4, #0]
 8007fb0:	6063      	str	r3, [r4, #4]
 8007fb2:	6054      	str	r4, [r2, #4]
 8007fb4:	e7cb      	b.n	8007f4e <_free_r+0x22>
 8007fb6:	bd38      	pop	{r3, r4, r5, pc}
 8007fb8:	20000410 	.word	0x20000410

08007fbc <_malloc_usable_size_r>:
 8007fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fc0:	1f18      	subs	r0, r3, #4
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	bfbc      	itt	lt
 8007fc6:	580b      	ldrlt	r3, [r1, r0]
 8007fc8:	18c0      	addlt	r0, r0, r3
 8007fca:	4770      	bx	lr

08007fcc <fiprintf>:
 8007fcc:	b40e      	push	{r1, r2, r3}
 8007fce:	b503      	push	{r0, r1, lr}
 8007fd0:	4601      	mov	r1, r0
 8007fd2:	ab03      	add	r3, sp, #12
 8007fd4:	4805      	ldr	r0, [pc, #20]	@ (8007fec <fiprintf+0x20>)
 8007fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fda:	6800      	ldr	r0, [r0, #0]
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	f000 f835 	bl	800804c <_vfiprintf_r>
 8007fe2:	b002      	add	sp, #8
 8007fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fe8:	b003      	add	sp, #12
 8007fea:	4770      	bx	lr
 8007fec:	20000188 	.word	0x20000188

08007ff0 <abort>:
 8007ff0:	2006      	movs	r0, #6
 8007ff2:	b508      	push	{r3, lr}
 8007ff4:	f000 fa82 	bl	80084fc <raise>
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	f7f9 fb1a 	bl	8001632 <_exit>

08007ffe <__sfputc_r>:
 8007ffe:	6893      	ldr	r3, [r2, #8]
 8008000:	b410      	push	{r4}
 8008002:	3b01      	subs	r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	6093      	str	r3, [r2, #8]
 8008008:	da07      	bge.n	800801a <__sfputc_r+0x1c>
 800800a:	6994      	ldr	r4, [r2, #24]
 800800c:	42a3      	cmp	r3, r4
 800800e:	db01      	blt.n	8008014 <__sfputc_r+0x16>
 8008010:	290a      	cmp	r1, #10
 8008012:	d102      	bne.n	800801a <__sfputc_r+0x1c>
 8008014:	bc10      	pop	{r4}
 8008016:	f000 b931 	b.w	800827c <__swbuf_r>
 800801a:	6813      	ldr	r3, [r2, #0]
 800801c:	1c58      	adds	r0, r3, #1
 800801e:	6010      	str	r0, [r2, #0]
 8008020:	7019      	strb	r1, [r3, #0]
 8008022:	4608      	mov	r0, r1
 8008024:	bc10      	pop	{r4}
 8008026:	4770      	bx	lr

08008028 <__sfputs_r>:
 8008028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802a:	4606      	mov	r6, r0
 800802c:	460f      	mov	r7, r1
 800802e:	4614      	mov	r4, r2
 8008030:	18d5      	adds	r5, r2, r3
 8008032:	42ac      	cmp	r4, r5
 8008034:	d101      	bne.n	800803a <__sfputs_r+0x12>
 8008036:	2000      	movs	r0, #0
 8008038:	e007      	b.n	800804a <__sfputs_r+0x22>
 800803a:	463a      	mov	r2, r7
 800803c:	4630      	mov	r0, r6
 800803e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008042:	f7ff ffdc 	bl	8007ffe <__sfputc_r>
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	d1f3      	bne.n	8008032 <__sfputs_r+0xa>
 800804a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800804c <_vfiprintf_r>:
 800804c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008050:	460d      	mov	r5, r1
 8008052:	4614      	mov	r4, r2
 8008054:	4698      	mov	r8, r3
 8008056:	4606      	mov	r6, r0
 8008058:	b09d      	sub	sp, #116	@ 0x74
 800805a:	b118      	cbz	r0, 8008064 <_vfiprintf_r+0x18>
 800805c:	6a03      	ldr	r3, [r0, #32]
 800805e:	b90b      	cbnz	r3, 8008064 <_vfiprintf_r+0x18>
 8008060:	f7fc fe26 	bl	8004cb0 <__sinit>
 8008064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008066:	07d9      	lsls	r1, r3, #31
 8008068:	d405      	bmi.n	8008076 <_vfiprintf_r+0x2a>
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	059a      	lsls	r2, r3, #22
 800806e:	d402      	bmi.n	8008076 <_vfiprintf_r+0x2a>
 8008070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008072:	f7fd fd1a 	bl	8005aaa <__retarget_lock_acquire_recursive>
 8008076:	89ab      	ldrh	r3, [r5, #12]
 8008078:	071b      	lsls	r3, r3, #28
 800807a:	d501      	bpl.n	8008080 <_vfiprintf_r+0x34>
 800807c:	692b      	ldr	r3, [r5, #16]
 800807e:	b99b      	cbnz	r3, 80080a8 <_vfiprintf_r+0x5c>
 8008080:	4629      	mov	r1, r5
 8008082:	4630      	mov	r0, r6
 8008084:	f000 f938 	bl	80082f8 <__swsetup_r>
 8008088:	b170      	cbz	r0, 80080a8 <_vfiprintf_r+0x5c>
 800808a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800808c:	07dc      	lsls	r4, r3, #31
 800808e:	d504      	bpl.n	800809a <_vfiprintf_r+0x4e>
 8008090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008094:	b01d      	add	sp, #116	@ 0x74
 8008096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809a:	89ab      	ldrh	r3, [r5, #12]
 800809c:	0598      	lsls	r0, r3, #22
 800809e:	d4f7      	bmi.n	8008090 <_vfiprintf_r+0x44>
 80080a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080a2:	f7fd fd03 	bl	8005aac <__retarget_lock_release_recursive>
 80080a6:	e7f3      	b.n	8008090 <_vfiprintf_r+0x44>
 80080a8:	2300      	movs	r3, #0
 80080aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ac:	2320      	movs	r3, #32
 80080ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080b2:	2330      	movs	r3, #48	@ 0x30
 80080b4:	f04f 0901 	mov.w	r9, #1
 80080b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008268 <_vfiprintf_r+0x21c>
 80080c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080c4:	4623      	mov	r3, r4
 80080c6:	469a      	mov	sl, r3
 80080c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080cc:	b10a      	cbz	r2, 80080d2 <_vfiprintf_r+0x86>
 80080ce:	2a25      	cmp	r2, #37	@ 0x25
 80080d0:	d1f9      	bne.n	80080c6 <_vfiprintf_r+0x7a>
 80080d2:	ebba 0b04 	subs.w	fp, sl, r4
 80080d6:	d00b      	beq.n	80080f0 <_vfiprintf_r+0xa4>
 80080d8:	465b      	mov	r3, fp
 80080da:	4622      	mov	r2, r4
 80080dc:	4629      	mov	r1, r5
 80080de:	4630      	mov	r0, r6
 80080e0:	f7ff ffa2 	bl	8008028 <__sfputs_r>
 80080e4:	3001      	adds	r0, #1
 80080e6:	f000 80a7 	beq.w	8008238 <_vfiprintf_r+0x1ec>
 80080ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080ec:	445a      	add	r2, fp
 80080ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80080f0:	f89a 3000 	ldrb.w	r3, [sl]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 809f 	beq.w	8008238 <_vfiprintf_r+0x1ec>
 80080fa:	2300      	movs	r3, #0
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008104:	f10a 0a01 	add.w	sl, sl, #1
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	9307      	str	r3, [sp, #28]
 800810c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008110:	931a      	str	r3, [sp, #104]	@ 0x68
 8008112:	4654      	mov	r4, sl
 8008114:	2205      	movs	r2, #5
 8008116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800811a:	4853      	ldr	r0, [pc, #332]	@ (8008268 <_vfiprintf_r+0x21c>)
 800811c:	f7fd fcc7 	bl	8005aae <memchr>
 8008120:	9a04      	ldr	r2, [sp, #16]
 8008122:	b9d8      	cbnz	r0, 800815c <_vfiprintf_r+0x110>
 8008124:	06d1      	lsls	r1, r2, #27
 8008126:	bf44      	itt	mi
 8008128:	2320      	movmi	r3, #32
 800812a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800812e:	0713      	lsls	r3, r2, #28
 8008130:	bf44      	itt	mi
 8008132:	232b      	movmi	r3, #43	@ 0x2b
 8008134:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008138:	f89a 3000 	ldrb.w	r3, [sl]
 800813c:	2b2a      	cmp	r3, #42	@ 0x2a
 800813e:	d015      	beq.n	800816c <_vfiprintf_r+0x120>
 8008140:	4654      	mov	r4, sl
 8008142:	2000      	movs	r0, #0
 8008144:	f04f 0c0a 	mov.w	ip, #10
 8008148:	9a07      	ldr	r2, [sp, #28]
 800814a:	4621      	mov	r1, r4
 800814c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008150:	3b30      	subs	r3, #48	@ 0x30
 8008152:	2b09      	cmp	r3, #9
 8008154:	d94b      	bls.n	80081ee <_vfiprintf_r+0x1a2>
 8008156:	b1b0      	cbz	r0, 8008186 <_vfiprintf_r+0x13a>
 8008158:	9207      	str	r2, [sp, #28]
 800815a:	e014      	b.n	8008186 <_vfiprintf_r+0x13a>
 800815c:	eba0 0308 	sub.w	r3, r0, r8
 8008160:	fa09 f303 	lsl.w	r3, r9, r3
 8008164:	4313      	orrs	r3, r2
 8008166:	46a2      	mov	sl, r4
 8008168:	9304      	str	r3, [sp, #16]
 800816a:	e7d2      	b.n	8008112 <_vfiprintf_r+0xc6>
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	1d19      	adds	r1, r3, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	9103      	str	r1, [sp, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	bfbb      	ittet	lt
 8008178:	425b      	neglt	r3, r3
 800817a:	f042 0202 	orrlt.w	r2, r2, #2
 800817e:	9307      	strge	r3, [sp, #28]
 8008180:	9307      	strlt	r3, [sp, #28]
 8008182:	bfb8      	it	lt
 8008184:	9204      	strlt	r2, [sp, #16]
 8008186:	7823      	ldrb	r3, [r4, #0]
 8008188:	2b2e      	cmp	r3, #46	@ 0x2e
 800818a:	d10a      	bne.n	80081a2 <_vfiprintf_r+0x156>
 800818c:	7863      	ldrb	r3, [r4, #1]
 800818e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008190:	d132      	bne.n	80081f8 <_vfiprintf_r+0x1ac>
 8008192:	9b03      	ldr	r3, [sp, #12]
 8008194:	3402      	adds	r4, #2
 8008196:	1d1a      	adds	r2, r3, #4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	9203      	str	r2, [sp, #12]
 800819c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081a0:	9305      	str	r3, [sp, #20]
 80081a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800826c <_vfiprintf_r+0x220>
 80081a6:	2203      	movs	r2, #3
 80081a8:	4650      	mov	r0, sl
 80081aa:	7821      	ldrb	r1, [r4, #0]
 80081ac:	f7fd fc7f 	bl	8005aae <memchr>
 80081b0:	b138      	cbz	r0, 80081c2 <_vfiprintf_r+0x176>
 80081b2:	2240      	movs	r2, #64	@ 0x40
 80081b4:	9b04      	ldr	r3, [sp, #16]
 80081b6:	eba0 000a 	sub.w	r0, r0, sl
 80081ba:	4082      	lsls	r2, r0
 80081bc:	4313      	orrs	r3, r2
 80081be:	3401      	adds	r4, #1
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c6:	2206      	movs	r2, #6
 80081c8:	4829      	ldr	r0, [pc, #164]	@ (8008270 <_vfiprintf_r+0x224>)
 80081ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081ce:	f7fd fc6e 	bl	8005aae <memchr>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d03f      	beq.n	8008256 <_vfiprintf_r+0x20a>
 80081d6:	4b27      	ldr	r3, [pc, #156]	@ (8008274 <_vfiprintf_r+0x228>)
 80081d8:	bb1b      	cbnz	r3, 8008222 <_vfiprintf_r+0x1d6>
 80081da:	9b03      	ldr	r3, [sp, #12]
 80081dc:	3307      	adds	r3, #7
 80081de:	f023 0307 	bic.w	r3, r3, #7
 80081e2:	3308      	adds	r3, #8
 80081e4:	9303      	str	r3, [sp, #12]
 80081e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e8:	443b      	add	r3, r7
 80081ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ec:	e76a      	b.n	80080c4 <_vfiprintf_r+0x78>
 80081ee:	460c      	mov	r4, r1
 80081f0:	2001      	movs	r0, #1
 80081f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081f6:	e7a8      	b.n	800814a <_vfiprintf_r+0xfe>
 80081f8:	2300      	movs	r3, #0
 80081fa:	f04f 0c0a 	mov.w	ip, #10
 80081fe:	4619      	mov	r1, r3
 8008200:	3401      	adds	r4, #1
 8008202:	9305      	str	r3, [sp, #20]
 8008204:	4620      	mov	r0, r4
 8008206:	f810 2b01 	ldrb.w	r2, [r0], #1
 800820a:	3a30      	subs	r2, #48	@ 0x30
 800820c:	2a09      	cmp	r2, #9
 800820e:	d903      	bls.n	8008218 <_vfiprintf_r+0x1cc>
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0c6      	beq.n	80081a2 <_vfiprintf_r+0x156>
 8008214:	9105      	str	r1, [sp, #20]
 8008216:	e7c4      	b.n	80081a2 <_vfiprintf_r+0x156>
 8008218:	4604      	mov	r4, r0
 800821a:	2301      	movs	r3, #1
 800821c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008220:	e7f0      	b.n	8008204 <_vfiprintf_r+0x1b8>
 8008222:	ab03      	add	r3, sp, #12
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	462a      	mov	r2, r5
 8008228:	4630      	mov	r0, r6
 800822a:	4b13      	ldr	r3, [pc, #76]	@ (8008278 <_vfiprintf_r+0x22c>)
 800822c:	a904      	add	r1, sp, #16
 800822e:	f7fb fec5 	bl	8003fbc <_printf_float>
 8008232:	4607      	mov	r7, r0
 8008234:	1c78      	adds	r0, r7, #1
 8008236:	d1d6      	bne.n	80081e6 <_vfiprintf_r+0x19a>
 8008238:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800823a:	07d9      	lsls	r1, r3, #31
 800823c:	d405      	bmi.n	800824a <_vfiprintf_r+0x1fe>
 800823e:	89ab      	ldrh	r3, [r5, #12]
 8008240:	059a      	lsls	r2, r3, #22
 8008242:	d402      	bmi.n	800824a <_vfiprintf_r+0x1fe>
 8008244:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008246:	f7fd fc31 	bl	8005aac <__retarget_lock_release_recursive>
 800824a:	89ab      	ldrh	r3, [r5, #12]
 800824c:	065b      	lsls	r3, r3, #25
 800824e:	f53f af1f 	bmi.w	8008090 <_vfiprintf_r+0x44>
 8008252:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008254:	e71e      	b.n	8008094 <_vfiprintf_r+0x48>
 8008256:	ab03      	add	r3, sp, #12
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	462a      	mov	r2, r5
 800825c:	4630      	mov	r0, r6
 800825e:	4b06      	ldr	r3, [pc, #24]	@ (8008278 <_vfiprintf_r+0x22c>)
 8008260:	a904      	add	r1, sp, #16
 8008262:	f7fc f949 	bl	80044f8 <_printf_i>
 8008266:	e7e4      	b.n	8008232 <_vfiprintf_r+0x1e6>
 8008268:	0800883e 	.word	0x0800883e
 800826c:	08008844 	.word	0x08008844
 8008270:	08008848 	.word	0x08008848
 8008274:	08003fbd 	.word	0x08003fbd
 8008278:	08008029 	.word	0x08008029

0800827c <__swbuf_r>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	460e      	mov	r6, r1
 8008280:	4614      	mov	r4, r2
 8008282:	4605      	mov	r5, r0
 8008284:	b118      	cbz	r0, 800828e <__swbuf_r+0x12>
 8008286:	6a03      	ldr	r3, [r0, #32]
 8008288:	b90b      	cbnz	r3, 800828e <__swbuf_r+0x12>
 800828a:	f7fc fd11 	bl	8004cb0 <__sinit>
 800828e:	69a3      	ldr	r3, [r4, #24]
 8008290:	60a3      	str	r3, [r4, #8]
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	071a      	lsls	r2, r3, #28
 8008296:	d501      	bpl.n	800829c <__swbuf_r+0x20>
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	b943      	cbnz	r3, 80082ae <__swbuf_r+0x32>
 800829c:	4621      	mov	r1, r4
 800829e:	4628      	mov	r0, r5
 80082a0:	f000 f82a 	bl	80082f8 <__swsetup_r>
 80082a4:	b118      	cbz	r0, 80082ae <__swbuf_r+0x32>
 80082a6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80082aa:	4638      	mov	r0, r7
 80082ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	6922      	ldr	r2, [r4, #16]
 80082b2:	b2f6      	uxtb	r6, r6
 80082b4:	1a98      	subs	r0, r3, r2
 80082b6:	6963      	ldr	r3, [r4, #20]
 80082b8:	4637      	mov	r7, r6
 80082ba:	4283      	cmp	r3, r0
 80082bc:	dc05      	bgt.n	80082ca <__swbuf_r+0x4e>
 80082be:	4621      	mov	r1, r4
 80082c0:	4628      	mov	r0, r5
 80082c2:	f7ff f839 	bl	8007338 <_fflush_r>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d1ed      	bne.n	80082a6 <__swbuf_r+0x2a>
 80082ca:	68a3      	ldr	r3, [r4, #8]
 80082cc:	3b01      	subs	r3, #1
 80082ce:	60a3      	str	r3, [r4, #8]
 80082d0:	6823      	ldr	r3, [r4, #0]
 80082d2:	1c5a      	adds	r2, r3, #1
 80082d4:	6022      	str	r2, [r4, #0]
 80082d6:	701e      	strb	r6, [r3, #0]
 80082d8:	6962      	ldr	r2, [r4, #20]
 80082da:	1c43      	adds	r3, r0, #1
 80082dc:	429a      	cmp	r2, r3
 80082de:	d004      	beq.n	80082ea <__swbuf_r+0x6e>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	07db      	lsls	r3, r3, #31
 80082e4:	d5e1      	bpl.n	80082aa <__swbuf_r+0x2e>
 80082e6:	2e0a      	cmp	r6, #10
 80082e8:	d1df      	bne.n	80082aa <__swbuf_r+0x2e>
 80082ea:	4621      	mov	r1, r4
 80082ec:	4628      	mov	r0, r5
 80082ee:	f7ff f823 	bl	8007338 <_fflush_r>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d0d9      	beq.n	80082aa <__swbuf_r+0x2e>
 80082f6:	e7d6      	b.n	80082a6 <__swbuf_r+0x2a>

080082f8 <__swsetup_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4b29      	ldr	r3, [pc, #164]	@ (80083a0 <__swsetup_r+0xa8>)
 80082fc:	4605      	mov	r5, r0
 80082fe:	6818      	ldr	r0, [r3, #0]
 8008300:	460c      	mov	r4, r1
 8008302:	b118      	cbz	r0, 800830c <__swsetup_r+0x14>
 8008304:	6a03      	ldr	r3, [r0, #32]
 8008306:	b90b      	cbnz	r3, 800830c <__swsetup_r+0x14>
 8008308:	f7fc fcd2 	bl	8004cb0 <__sinit>
 800830c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008310:	0719      	lsls	r1, r3, #28
 8008312:	d422      	bmi.n	800835a <__swsetup_r+0x62>
 8008314:	06da      	lsls	r2, r3, #27
 8008316:	d407      	bmi.n	8008328 <__swsetup_r+0x30>
 8008318:	2209      	movs	r2, #9
 800831a:	602a      	str	r2, [r5, #0]
 800831c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	e033      	b.n	8008390 <__swsetup_r+0x98>
 8008328:	0758      	lsls	r0, r3, #29
 800832a:	d512      	bpl.n	8008352 <__swsetup_r+0x5a>
 800832c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800832e:	b141      	cbz	r1, 8008342 <__swsetup_r+0x4a>
 8008330:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008334:	4299      	cmp	r1, r3
 8008336:	d002      	beq.n	800833e <__swsetup_r+0x46>
 8008338:	4628      	mov	r0, r5
 800833a:	f7ff fdf7 	bl	8007f2c <_free_r>
 800833e:	2300      	movs	r3, #0
 8008340:	6363      	str	r3, [r4, #52]	@ 0x34
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	2300      	movs	r3, #0
 800834c:	6063      	str	r3, [r4, #4]
 800834e:	6923      	ldr	r3, [r4, #16]
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	f043 0308 	orr.w	r3, r3, #8
 8008358:	81a3      	strh	r3, [r4, #12]
 800835a:	6923      	ldr	r3, [r4, #16]
 800835c:	b94b      	cbnz	r3, 8008372 <__swsetup_r+0x7a>
 800835e:	89a3      	ldrh	r3, [r4, #12]
 8008360:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008368:	d003      	beq.n	8008372 <__swsetup_r+0x7a>
 800836a:	4621      	mov	r1, r4
 800836c:	4628      	mov	r0, r5
 800836e:	f000 f83e 	bl	80083ee <__smakebuf_r>
 8008372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008376:	f013 0201 	ands.w	r2, r3, #1
 800837a:	d00a      	beq.n	8008392 <__swsetup_r+0x9a>
 800837c:	2200      	movs	r2, #0
 800837e:	60a2      	str	r2, [r4, #8]
 8008380:	6962      	ldr	r2, [r4, #20]
 8008382:	4252      	negs	r2, r2
 8008384:	61a2      	str	r2, [r4, #24]
 8008386:	6922      	ldr	r2, [r4, #16]
 8008388:	b942      	cbnz	r2, 800839c <__swsetup_r+0xa4>
 800838a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800838e:	d1c5      	bne.n	800831c <__swsetup_r+0x24>
 8008390:	bd38      	pop	{r3, r4, r5, pc}
 8008392:	0799      	lsls	r1, r3, #30
 8008394:	bf58      	it	pl
 8008396:	6962      	ldrpl	r2, [r4, #20]
 8008398:	60a2      	str	r2, [r4, #8]
 800839a:	e7f4      	b.n	8008386 <__swsetup_r+0x8e>
 800839c:	2000      	movs	r0, #0
 800839e:	e7f7      	b.n	8008390 <__swsetup_r+0x98>
 80083a0:	20000188 	.word	0x20000188

080083a4 <__swhatbuf_r>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	460c      	mov	r4, r1
 80083a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ac:	4615      	mov	r5, r2
 80083ae:	2900      	cmp	r1, #0
 80083b0:	461e      	mov	r6, r3
 80083b2:	b096      	sub	sp, #88	@ 0x58
 80083b4:	da0c      	bge.n	80083d0 <__swhatbuf_r+0x2c>
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	2100      	movs	r1, #0
 80083ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083be:	bf14      	ite	ne
 80083c0:	2340      	movne	r3, #64	@ 0x40
 80083c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083c6:	2000      	movs	r0, #0
 80083c8:	6031      	str	r1, [r6, #0]
 80083ca:	602b      	str	r3, [r5, #0]
 80083cc:	b016      	add	sp, #88	@ 0x58
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	466a      	mov	r2, sp
 80083d2:	f000 f849 	bl	8008468 <_fstat_r>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	dbed      	blt.n	80083b6 <__swhatbuf_r+0x12>
 80083da:	9901      	ldr	r1, [sp, #4]
 80083dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083e4:	4259      	negs	r1, r3
 80083e6:	4159      	adcs	r1, r3
 80083e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083ec:	e7eb      	b.n	80083c6 <__swhatbuf_r+0x22>

080083ee <__smakebuf_r>:
 80083ee:	898b      	ldrh	r3, [r1, #12]
 80083f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083f2:	079d      	lsls	r5, r3, #30
 80083f4:	4606      	mov	r6, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	d507      	bpl.n	800840a <__smakebuf_r+0x1c>
 80083fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80083fe:	6023      	str	r3, [r4, #0]
 8008400:	6123      	str	r3, [r4, #16]
 8008402:	2301      	movs	r3, #1
 8008404:	6163      	str	r3, [r4, #20]
 8008406:	b003      	add	sp, #12
 8008408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800840a:	466a      	mov	r2, sp
 800840c:	ab01      	add	r3, sp, #4
 800840e:	f7ff ffc9 	bl	80083a4 <__swhatbuf_r>
 8008412:	9f00      	ldr	r7, [sp, #0]
 8008414:	4605      	mov	r5, r0
 8008416:	4639      	mov	r1, r7
 8008418:	4630      	mov	r0, r6
 800841a:	f7fe fe7b 	bl	8007114 <_malloc_r>
 800841e:	b948      	cbnz	r0, 8008434 <__smakebuf_r+0x46>
 8008420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008424:	059a      	lsls	r2, r3, #22
 8008426:	d4ee      	bmi.n	8008406 <__smakebuf_r+0x18>
 8008428:	f023 0303 	bic.w	r3, r3, #3
 800842c:	f043 0302 	orr.w	r3, r3, #2
 8008430:	81a3      	strh	r3, [r4, #12]
 8008432:	e7e2      	b.n	80083fa <__smakebuf_r+0xc>
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800843a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800843e:	81a3      	strh	r3, [r4, #12]
 8008440:	9b01      	ldr	r3, [sp, #4]
 8008442:	6020      	str	r0, [r4, #0]
 8008444:	b15b      	cbz	r3, 800845e <__smakebuf_r+0x70>
 8008446:	4630      	mov	r0, r6
 8008448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800844c:	f000 f81e 	bl	800848c <_isatty_r>
 8008450:	b128      	cbz	r0, 800845e <__smakebuf_r+0x70>
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	f023 0303 	bic.w	r3, r3, #3
 8008458:	f043 0301 	orr.w	r3, r3, #1
 800845c:	81a3      	strh	r3, [r4, #12]
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	431d      	orrs	r5, r3
 8008462:	81a5      	strh	r5, [r4, #12]
 8008464:	e7cf      	b.n	8008406 <__smakebuf_r+0x18>
	...

08008468 <_fstat_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	2300      	movs	r3, #0
 800846c:	4d06      	ldr	r5, [pc, #24]	@ (8008488 <_fstat_r+0x20>)
 800846e:	4604      	mov	r4, r0
 8008470:	4608      	mov	r0, r1
 8008472:	4611      	mov	r1, r2
 8008474:	602b      	str	r3, [r5, #0]
 8008476:	f7f9 f92b 	bl	80016d0 <_fstat>
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	d102      	bne.n	8008484 <_fstat_r+0x1c>
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	b103      	cbz	r3, 8008484 <_fstat_r+0x1c>
 8008482:	6023      	str	r3, [r4, #0]
 8008484:	bd38      	pop	{r3, r4, r5, pc}
 8008486:	bf00      	nop
 8008488:	20000414 	.word	0x20000414

0800848c <_isatty_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	2300      	movs	r3, #0
 8008490:	4d05      	ldr	r5, [pc, #20]	@ (80084a8 <_isatty_r+0x1c>)
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	602b      	str	r3, [r5, #0]
 8008498:	f7f9 f929 	bl	80016ee <_isatty>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_isatty_r+0x1a>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_isatty_r+0x1a>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	20000414 	.word	0x20000414

080084ac <_raise_r>:
 80084ac:	291f      	cmp	r1, #31
 80084ae:	b538      	push	{r3, r4, r5, lr}
 80084b0:	4605      	mov	r5, r0
 80084b2:	460c      	mov	r4, r1
 80084b4:	d904      	bls.n	80084c0 <_raise_r+0x14>
 80084b6:	2316      	movs	r3, #22
 80084b8:	6003      	str	r3, [r0, #0]
 80084ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80084c2:	b112      	cbz	r2, 80084ca <_raise_r+0x1e>
 80084c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084c8:	b94b      	cbnz	r3, 80084de <_raise_r+0x32>
 80084ca:	4628      	mov	r0, r5
 80084cc:	f000 f830 	bl	8008530 <_getpid_r>
 80084d0:	4622      	mov	r2, r4
 80084d2:	4601      	mov	r1, r0
 80084d4:	4628      	mov	r0, r5
 80084d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084da:	f000 b817 	b.w	800850c <_kill_r>
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d00a      	beq.n	80084f8 <_raise_r+0x4c>
 80084e2:	1c59      	adds	r1, r3, #1
 80084e4:	d103      	bne.n	80084ee <_raise_r+0x42>
 80084e6:	2316      	movs	r3, #22
 80084e8:	6003      	str	r3, [r0, #0]
 80084ea:	2001      	movs	r0, #1
 80084ec:	e7e7      	b.n	80084be <_raise_r+0x12>
 80084ee:	2100      	movs	r1, #0
 80084f0:	4620      	mov	r0, r4
 80084f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80084f6:	4798      	blx	r3
 80084f8:	2000      	movs	r0, #0
 80084fa:	e7e0      	b.n	80084be <_raise_r+0x12>

080084fc <raise>:
 80084fc:	4b02      	ldr	r3, [pc, #8]	@ (8008508 <raise+0xc>)
 80084fe:	4601      	mov	r1, r0
 8008500:	6818      	ldr	r0, [r3, #0]
 8008502:	f7ff bfd3 	b.w	80084ac <_raise_r>
 8008506:	bf00      	nop
 8008508:	20000188 	.word	0x20000188

0800850c <_kill_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	2300      	movs	r3, #0
 8008510:	4d06      	ldr	r5, [pc, #24]	@ (800852c <_kill_r+0x20>)
 8008512:	4604      	mov	r4, r0
 8008514:	4608      	mov	r0, r1
 8008516:	4611      	mov	r1, r2
 8008518:	602b      	str	r3, [r5, #0]
 800851a:	f7f9 f87a 	bl	8001612 <_kill>
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	d102      	bne.n	8008528 <_kill_r+0x1c>
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	b103      	cbz	r3, 8008528 <_kill_r+0x1c>
 8008526:	6023      	str	r3, [r4, #0]
 8008528:	bd38      	pop	{r3, r4, r5, pc}
 800852a:	bf00      	nop
 800852c:	20000414 	.word	0x20000414

08008530 <_getpid_r>:
 8008530:	f7f9 b868 	b.w	8001604 <_getpid>

08008534 <_init>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	bf00      	nop
 8008538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853a:	bc08      	pop	{r3}
 800853c:	469e      	mov	lr, r3
 800853e:	4770      	bx	lr

08008540 <_fini>:
 8008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008542:	bf00      	nop
 8008544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008546:	bc08      	pop	{r3}
 8008548:	469e      	mov	lr, r3
 800854a:	4770      	bx	lr
