
BLUEPILL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085a4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  080086b8  080086b8  000096b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b4c  08008b4c  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008b4c  08008b4c  00009b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b54  08008b54  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b54  08008b54  00009b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b58  08008b58  00009b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008b5c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001d8  08008d34  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08008d34  0000a460  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d641  00000000  00000000  0000a201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002407  00000000  00000000  00017842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00019c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa4  00000000  00000000  0001aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019767  00000000  00000000  0001b4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105ae  00000000  00000000  00034c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910d4  00000000  00000000  000451c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d629d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004df8  00000000  00000000  000d62e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000db0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800869c 	.word	0x0800869c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800869c 	.word	0x0800869c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__gesf2>:
 8000cd0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000cd4:	e006      	b.n	8000ce4 <__cmpsf2+0x4>
 8000cd6:	bf00      	nop

08000cd8 <__lesf2>:
 8000cd8:	f04f 0c01 	mov.w	ip, #1
 8000cdc:	e002      	b.n	8000ce4 <__cmpsf2+0x4>
 8000cde:	bf00      	nop

08000ce0 <__cmpsf2>:
 8000ce0:	f04f 0c01 	mov.w	ip, #1
 8000ce4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ce8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf4:	bf18      	it	ne
 8000cf6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfa:	d011      	beq.n	8000d20 <__cmpsf2+0x40>
 8000cfc:	b001      	add	sp, #4
 8000cfe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d02:	bf18      	it	ne
 8000d04:	ea90 0f01 	teqne	r0, r1
 8000d08:	bf58      	it	pl
 8000d0a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d0e:	bf88      	it	hi
 8000d10:	17c8      	asrhi	r0, r1, #31
 8000d12:	bf38      	it	cc
 8000d14:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d18:	bf18      	it	ne
 8000d1a:	f040 0001 	orrne.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d24:	d102      	bne.n	8000d2c <__cmpsf2+0x4c>
 8000d26:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d2a:	d105      	bne.n	8000d38 <__cmpsf2+0x58>
 8000d2c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d30:	d1e4      	bne.n	8000cfc <__cmpsf2+0x1c>
 8000d32:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d36:	d0e1      	beq.n	8000cfc <__cmpsf2+0x1c>
 8000d38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <__aeabi_cfrcmple>:
 8000d40:	4684      	mov	ip, r0
 8000d42:	4608      	mov	r0, r1
 8000d44:	4661      	mov	r1, ip
 8000d46:	e7ff      	b.n	8000d48 <__aeabi_cfcmpeq>

08000d48 <__aeabi_cfcmpeq>:
 8000d48:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d4a:	f7ff ffc9 	bl	8000ce0 <__cmpsf2>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	bf48      	it	mi
 8000d52:	f110 0f00 	cmnmi.w	r0, #0
 8000d56:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d58 <__aeabi_fcmpeq>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff fff4 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d60:	bf0c      	ite	eq
 8000d62:	2001      	moveq	r0, #1
 8000d64:	2000      	movne	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_fcmplt>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff ffea 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d74:	bf34      	ite	cc
 8000d76:	2001      	movcc	r0, #1
 8000d78:	2000      	movcs	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_fcmple>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffe0 	bl	8000d48 <__aeabi_cfcmpeq>
 8000d88:	bf94      	ite	ls
 8000d8a:	2001      	movls	r0, #1
 8000d8c:	2000      	movhi	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_fcmpge>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffd2 	bl	8000d40 <__aeabi_cfrcmple>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_fcmpgt>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffc8 	bl	8000d40 <__aeabi_cfrcmple>
 8000db0:	bf34      	ite	cc
 8000db2:	2001      	movcc	r0, #1
 8000db4:	2000      	movcs	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_d2lz>:
 8000dbc:	b538      	push	{r3, r4, r5, lr}
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	460d      	mov	r5, r1
 8000dc6:	f7ff fead 	bl	8000b24 <__aeabi_dcmplt>
 8000dca:	b928      	cbnz	r0, 8000dd8 <__aeabi_d2lz+0x1c>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	4629      	mov	r1, r5
 8000dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd4:	f000 b80a 	b.w	8000dec <__aeabi_d2ulz>
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000dde:	f000 f805 	bl	8000dec <__aeabi_d2ulz>
 8000de2:	4240      	negs	r0, r0
 8000de4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de8:	bd38      	pop	{r3, r4, r5, pc}
 8000dea:	bf00      	nop

08000dec <__aeabi_d2ulz>:
 8000dec:	b5d0      	push	{r4, r6, r7, lr}
 8000dee:	2200      	movs	r2, #0
 8000df0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <__aeabi_d2ulz+0x34>)
 8000df2:	4606      	mov	r6, r0
 8000df4:	460f      	mov	r7, r1
 8000df6:	f7ff fc23 	bl	8000640 <__aeabi_dmul>
 8000dfa:	f7ff fef9 	bl	8000bf0 <__aeabi_d2uiz>
 8000dfe:	4604      	mov	r4, r0
 8000e00:	f7ff fba4 	bl	800054c <__aeabi_ui2d>
 8000e04:	2200      	movs	r2, #0
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <__aeabi_d2ulz+0x38>)
 8000e08:	f7ff fc1a 	bl	8000640 <__aeabi_dmul>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4630      	mov	r0, r6
 8000e12:	4639      	mov	r1, r7
 8000e14:	f7ff fa5c 	bl	80002d0 <__aeabi_dsub>
 8000e18:	f7ff feea 	bl	8000bf0 <__aeabi_d2uiz>
 8000e1c:	4621      	mov	r1, r4
 8000e1e:	bdd0      	pop	{r4, r6, r7, pc}
 8000e20:	3df00000 	.word	0x3df00000
 8000e24:	41f00000 	.word	0x41f00000

08000e28 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e38:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <MX_ADC1_Init+0x74>)
 8000e3a:	4a19      	ldr	r2, [pc, #100]	@ (8000ea0 <MX_ADC1_Init+0x78>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <MX_ADC1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e44:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <MX_ADC1_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <MX_ADC1_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e50:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <MX_ADC1_Init+0x74>)
 8000e52:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000e56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e58:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <MX_ADC1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <MX_ADC1_Init+0x74>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e64:	480d      	ldr	r0, [pc, #52]	@ (8000e9c <MX_ADC1_Init+0x74>)
 8000e66:	f000 fdf7 	bl	8001a58 <HAL_ADC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e70:	f000 fa41 	bl	80012f6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <MX_ADC1_Init+0x74>)
 8000e86:	f001 f87f 	bl	8001f88 <HAL_ADC_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e90:	f000 fa31 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200001f4 	.word	0x200001f4
 8000ea0:	40012400 	.word	0x40012400

08000ea4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a14      	ldr	r2, [pc, #80]	@ (8000f10 <HAL_ADC_MspInit+0x6c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d121      	bne.n	8000f08 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <HAL_ADC_MspInit+0x70>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a12      	ldr	r2, [pc, #72]	@ (8000f14 <HAL_ADC_MspInit+0x70>)
 8000eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <HAL_ADC_MspInit+0x70>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <HAL_ADC_MspInit+0x70>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8000f14 <HAL_ADC_MspInit+0x70>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <HAL_ADC_MspInit+0x70>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Vpanel_Pin|Ipanel_Pin;
 8000ef4:	2342      	movs	r3, #66	@ 0x42
 8000ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <HAL_ADC_MspInit+0x74>)
 8000f04:	f001 fab8 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40012400 	.word	0x40012400
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010800 	.word	0x40010800

08000f1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f30:	4b24      	ldr	r3, [pc, #144]	@ (8000fc4 <MX_GPIO_Init+0xa8>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a23      	ldr	r2, [pc, #140]	@ (8000fc4 <MX_GPIO_Init+0xa8>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <MX_GPIO_Init+0xa8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f48:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc4 <MX_GPIO_Init+0xa8>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc4 <MX_GPIO_Init+0xa8>)
 8000f4e:	f043 0320 	orr.w	r3, r3, #32
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc4 <MX_GPIO_Init+0xa8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0320 	and.w	r3, r3, #32
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b18      	ldr	r3, [pc, #96]	@ (8000fc4 <MX_GPIO_Init+0xa8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a17      	ldr	r2, [pc, #92]	@ (8000fc4 <MX_GPIO_Init+0xa8>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <MX_GPIO_Init+0xa8>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_GPIO_Init+0xa8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a11      	ldr	r2, [pc, #68]	@ (8000fc4 <MX_GPIO_Init+0xa8>)
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_GPIO_Init+0xa8>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0308 	and.w	r3, r3, #8
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activador_GPIO_Port, activador_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f96:	480c      	ldr	r0, [pc, #48]	@ (8000fc8 <MX_GPIO_Init+0xac>)
 8000f98:	f001 fbf2 	bl	8002780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activador_Pin;
 8000f9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(activador_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4804      	ldr	r0, [pc, #16]	@ (8000fc8 <MX_GPIO_Init+0xac>)
 8000fb6:	f001 fa5f 	bl	8002478 <HAL_GPIO_Init>

}
 8000fba:	bf00      	nop
 8000fbc:	3720      	adds	r7, #32
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40011000 	.word	0x40011000

08000fcc <readADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t readADC(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

	// Configurar el canal que se desea leer
	sConfig.Channel = channel;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 ffc7 	bl	8001f88 <HAL_ADC_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <readADC+0x38>
		Error_Handler(); // Maneja errores de configuración
 8001000:	f000 f979 	bl	80012f6 <Error_Handler>
	}

	// Inicia la conversión del ADC
	HAL_ADC_Start(hadc);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 fdff 	bl	8001c08 <HAL_ADC_Start>

	// Espera hasta que la conversión termine
	if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 800100a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fea8 	bl	8001d64 <HAL_ADC_PollForConversion>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d104      	bne.n	8001024 <readADC+0x58>
		// Retorna el valor convertido
		return HAL_ADC_GetValue(hadc);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 ffa8 	bl	8001f70 <HAL_ADC_GetValue>
 8001020:	4603      	mov	r3, r0
 8001022:	e000      	b.n	8001026 <readADC+0x5a>
	}

	return 0; // Retorna 0 en caso de error
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <mppt>:

void mppt(int *dutyCycle, float *power, float *previousPower) {
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
	const int deltaDuty = 15;    // Incremento o decremento del Duty Cycle
 800103a:	230f      	movs	r3, #15
 800103c:	617b      	str	r3, [r7, #20]
	if (*power > *previousPower) {
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	4610      	mov	r0, r2
 800104a:	f7ff fead 	bl	8000da8 <__aeabi_fcmpgt>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d00a      	beq.n	800106a <mppt+0x3c>
		if (*dutyCycle < 255)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2bfe      	cmp	r3, #254	@ 0xfe
 800105a:	dc10      	bgt.n	800107e <mppt+0x50>
			*dutyCycle += deltaDuty; // Si la potencia ha aumentado, continuar ajustando en la misma dirección
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	441a      	add	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	e009      	b.n	800107e <mppt+0x50>
	} else {
		if (*dutyCycle > 0)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	dd05      	ble.n	800107e <mppt+0x50>
			*dutyCycle -= deltaDuty; // Si la potencia ha disminuido, invertir la dirección del ajuste
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	601a      	str	r2, [r3, #0]
	}

	if (*dutyCycle < 0)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	da02      	bge.n	800108c <mppt+0x5e>
		*dutyCycle = 0; // Asegurar que el Duty Cycle esté dentro de los límites permitidos (0-255)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
	if (*dutyCycle > 255)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2bff      	cmp	r3, #255	@ 0xff
 8001092:	dd02      	ble.n	800109a <mppt+0x6c>
		*dutyCycle = 255;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	22ff      	movs	r2, #255	@ 0xff
 8001098:	601a      	str	r2, [r3, #0]

	*previousPower = *power; // Actualizar `previousPower` con el valor actual de `power`
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	0000      	movs	r0, r0
 80010ac:	0000      	movs	r0, r0
	...

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b4:	b09e      	sub	sp, #120	@ 0x78
 80010b6:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	SystemClock_Config();
 80010b8:	f000 f8c2 	bl	8001240 <SystemClock_Config>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010bc:	f000 fc46 	bl	800194c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c0:	f000 f8be 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c4:	f7ff ff2a 	bl	8000f1c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010c8:	f000 fba4 	bl	8001814 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80010cc:	f7ff feac 	bl	8000e28 <MX_ADC1_Init>
  MX_TIM1_Init();
 80010d0:	f000 fa3e 	bl	8001550 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010d4:	f000 fabe 	bl	8001654 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	// Iniciar PWM
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010d8:	2100      	movs	r1, #0
 80010da:	484f      	ldr	r0, [pc, #316]	@ (8001218 <main+0x168>)
 80010dc:	f002 f934 	bl	8003348 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80010e0:	210c      	movs	r1, #12
 80010e2:	484e      	ldr	r0, [pc, #312]	@ (800121c <main+0x16c>)
 80010e4:	f002 f930 	bl	8003348 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		// Leer voltaje y corriente usando ADC
		V_in = readADC(&hadc1, VPANEL_CHANNEL) * (3.3 / 4095.0);
 80010e8:	2101      	movs	r1, #1
 80010ea:	484d      	ldr	r0, [pc, #308]	@ (8001220 <main+0x170>)
 80010ec:	f7ff ff6e 	bl	8000fcc <readADC>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa2a 	bl	800054c <__aeabi_ui2d>
 80010f8:	a345      	add	r3, pc, #276	@ (adr r3, 8001210 <main+0x160>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff fa9f 	bl	8000640 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd91 	bl	8000c30 <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	4a44      	ldr	r2, [pc, #272]	@ (8001224 <main+0x174>)
 8001112:	6013      	str	r3, [r2, #0]
		I_in = readADC(&hadc1, IPANEL_CHANNEL) * (3.3 / 4095.0);
 8001114:	2106      	movs	r1, #6
 8001116:	4842      	ldr	r0, [pc, #264]	@ (8001220 <main+0x170>)
 8001118:	f7ff ff58 	bl	8000fcc <readADC>
 800111c:	4603      	mov	r3, r0
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fa14 	bl	800054c <__aeabi_ui2d>
 8001124:	a33a      	add	r3, pc, #232	@ (adr r3, 8001210 <main+0x160>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff fa89 	bl	8000640 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fd7b 	bl	8000c30 <__aeabi_d2f>
 800113a:	4603      	mov	r3, r0
 800113c:	4a3a      	ldr	r2, [pc, #232]	@ (8001228 <main+0x178>)
 800113e:	6013      	str	r3, [r2, #0]

		// Calcular potencia
		power = V_in * I_in;
 8001140:	4b38      	ldr	r3, [pc, #224]	@ (8001224 <main+0x174>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a38      	ldr	r2, [pc, #224]	@ (8001228 <main+0x178>)
 8001146:	6812      	ldr	r2, [r2, #0]
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f808 	bl	8000160 <__aeabi_fmul>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b35      	ldr	r3, [pc, #212]	@ (800122c <main+0x17c>)
 8001156:	601a      	str	r2, [r3, #0]

		// Algoritmo MPPT
		int i =0;
 8001158:	2300      	movs	r3, #0
 800115a:	667b      	str	r3, [r7, #100]	@ 0x64
		if(i==0) power = 0.5;
 800115c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800115e:	2b00      	cmp	r3, #0
 8001160:	d103      	bne.n	800116a <main+0xba>
 8001162:	4b32      	ldr	r3, [pc, #200]	@ (800122c <main+0x17c>)
 8001164:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001168:	601a      	str	r2, [r3, #0]
		if(i==10) power = 1.5;
 800116a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800116c:	2b0a      	cmp	r3, #10
 800116e:	d103      	bne.n	8001178 <main+0xc8>
 8001170:	4b2e      	ldr	r3, [pc, #184]	@ (800122c <main+0x17c>)
 8001172:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8001176:	601a      	str	r2, [r3, #0]
		if(i>10) i = 0;
 8001178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800117a:	2b0a      	cmp	r3, #10
 800117c:	dd01      	ble.n	8001182 <main+0xd2>
 800117e:	2300      	movs	r3, #0
 8001180:	667b      	str	r3, [r7, #100]	@ 0x64
		i++;
 8001182:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001184:	3301      	adds	r3, #1
 8001186:	667b      	str	r3, [r7, #100]	@ 0x64

		mppt(&dutyCycle, &power, &previousPower);
 8001188:	4a29      	ldr	r2, [pc, #164]	@ (8001230 <main+0x180>)
 800118a:	4928      	ldr	r1, [pc, #160]	@ (800122c <main+0x17c>)
 800118c:	4829      	ldr	r0, [pc, #164]	@ (8001234 <main+0x184>)
 800118e:	f7ff ff4e 	bl	800102e <mppt>


		// Ajustar ciclo de trabajo del PWM
		//dutyCycle = 150;
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8001192:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <main+0x184>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <main+0x168>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, dutyCycle);
 800119c:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <main+0x184>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <main+0x16c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	641a      	str	r2, [r3, #64]	@ 0x40
		// Imprimir datos al puerto serie
		char buffer[100];
		sprintf(buffer, "V_in: %.2f V, I_in: %.2f A, Power: %.2f W\n", V_in,
 80011a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <main+0x174>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9f0 	bl	8000590 <__aeabi_f2d>
 80011b0:	4680      	mov	r8, r0
 80011b2:	4689      	mov	r9, r1
 80011b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <main+0x178>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9e9 	bl	8000590 <__aeabi_f2d>
 80011be:	4604      	mov	r4, r0
 80011c0:	460d      	mov	r5, r1
 80011c2:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <main+0x17c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f9e2 	bl	8000590 <__aeabi_f2d>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4638      	mov	r0, r7
 80011d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011d6:	e9cd 4500 	strd	r4, r5, [sp]
 80011da:	4642      	mov	r2, r8
 80011dc:	464b      	mov	r3, r9
 80011de:	4916      	ldr	r1, [pc, #88]	@ (8001238 <main+0x188>)
 80011e0:	f003 fd70 	bl	8004cc4 <siprintf>
				I_in, power); // @suppress("Float formatting support")
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 80011e4:	463b      	mov	r3, r7
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7fe ffb2 	bl	8000150 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4639      	mov	r1, r7
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011f6:	4811      	ldr	r0, [pc, #68]	@ (800123c <main+0x18c>)
 80011f8:	f002 fd23 	bl	8003c42 <HAL_UART_Transmit>
				HAL_MAX_DELAY);

		// Guardar la potencia anterior
		previousPower = power;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <main+0x17c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0b      	ldr	r2, [pc, #44]	@ (8001230 <main+0x180>)
 8001202:	6013      	str	r3, [r2, #0]
//
////		Para prender y apagar el led que viene en la bluepil
//      HAL_GPIO_WritePin(GPIOC, ACTIVADOR_PIN, GPIO_PIN_SET);
//      HAL_Delay(1000); // 1 segundo de delay
//      HAL_GPIO_WritePin(GPIOC, ACTIVADOR_PIN, GPIO_PIN_RESET);
      HAL_Delay(500); // 1 segundo de delay
 8001204:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001208:	f000 fc02 	bl	8001a10 <HAL_Delay>
	while (1) {
 800120c:	e76c      	b.n	80010e8 <main+0x38>
 800120e:	bf00      	nop
 8001210:	e734d9b4 	.word	0xe734d9b4
 8001214:	3f4a680c 	.word	0x3f4a680c
 8001218:	20000238 	.word	0x20000238
 800121c:	20000280 	.word	0x20000280
 8001220:	200001f4 	.word	0x200001f4
 8001224:	20000224 	.word	0x20000224
 8001228:	20000228 	.word	0x20000228
 800122c:	2000022c 	.word	0x2000022c
 8001230:	20000230 	.word	0x20000230
 8001234:	20000000 	.word	0x20000000
 8001238:	080086b8 	.word	0x080086b8
 800123c:	200002c8 	.word	0x200002c8

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b094      	sub	sp, #80	@ 0x50
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124a:	2228      	movs	r2, #40	@ 0x28
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fca8 	bl	8005ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001270:	2301      	movs	r3, #1
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001274:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001278:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127e:	2301      	movs	r3, #1
 8001280:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001282:	2302      	movs	r3, #2
 8001284:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001286:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800128a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800128c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001290:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fa8a 	bl	80027b0 <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012a2:	f000 f828 	bl	80012f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2102      	movs	r1, #2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f001 fcf6 	bl	8002cb4 <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012ce:	f000 f812 	bl	80012f6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012d2:	2302      	movs	r3, #2
 80012d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80012d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012da:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fe76 	bl	8002fd0 <HAL_RCCEx_PeriphCLKConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012ea:	f000 f804 	bl	80012f6 <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	@ 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fa:	b672      	cpsid	i
}
 80012fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012fe:	bf00      	nop
 8001300:	e7fd      	b.n	80012fe <Error_Handler+0x8>
	...

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <HAL_MspInit+0x5c>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a14      	ldr	r2, [pc, #80]	@ (8001360 <HAL_MspInit+0x5c>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_MspInit+0x5c>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <HAL_MspInit+0x5c>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <HAL_MspInit+0x5c>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <HAL_MspInit+0x5c>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_MspInit+0x60>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <HAL_MspInit+0x60>)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	40021000 	.word	0x40021000
 8001364:	40010000 	.word	0x40010000

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <NMI_Handler+0x4>

08001370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <MemManage_Handler+0x4>

08001380 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <UsageFault_Handler+0x4>

08001390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b8:	f000 fb0e 	bl	80019d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return 1;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <_kill>:

int _kill(int pid, int sig)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013d8:	f004 fbf0 	bl	8005bbc <__errno>
 80013dc:	4603      	mov	r3, r0
 80013de:	2216      	movs	r2, #22
 80013e0:	601a      	str	r2, [r3, #0]
  return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_exit>:

void _exit (int status)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013f6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffe7 	bl	80013ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <_exit+0x12>

08001404 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e00a      	b.n	800142c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001416:	f3af 8000 	nop.w
 800141a:	4601      	mov	r1, r0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf0      	blt.n	8001416 <_read+0x12>
  }

  return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e009      	b.n	8001464 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	60ba      	str	r2, [r7, #8]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf1      	blt.n	8001450 <_write+0x12>
  }
  return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_close>:

int _close(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800149c:	605a      	str	r2, [r3, #4]
  return 0;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <_isatty>:

int _isatty(int file)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014be:	b480      	push	{r7}
 80014c0:	b085      	sub	sp, #20
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
	...

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f004 fb58 	bl	8005bbc <__errno>
 800150c:	4603      	mov	r3, r0
 800150e:	220c      	movs	r2, #12
 8001510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	@ (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	@ (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20005000 	.word	0x20005000
 8001538:	00000400 	.word	0x00000400
 800153c:	20000234 	.word	0x20000234
 8001540:	20000460 	.word	0x20000460

08001544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b092      	sub	sp, #72	@ 0x48
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001556:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
 8001570:	615a      	str	r2, [r3, #20]
 8001572:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2220      	movs	r2, #32
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f004 fb12 	bl	8005ba4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001580:	4b32      	ldr	r3, [pc, #200]	@ (800164c <MX_TIM1_Init+0xfc>)
 8001582:	4a33      	ldr	r2, [pc, #204]	@ (8001650 <MX_TIM1_Init+0x100>)
 8001584:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8001586:	4b31      	ldr	r3, [pc, #196]	@ (800164c <MX_TIM1_Init+0xfc>)
 8001588:	2204      	movs	r2, #4
 800158a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <MX_TIM1_Init+0xfc>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001592:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <MX_TIM1_Init+0xfc>)
 8001594:	22ff      	movs	r2, #255	@ 0xff
 8001596:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <MX_TIM1_Init+0xfc>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800159e:	4b2b      	ldr	r3, [pc, #172]	@ (800164c <MX_TIM1_Init+0xfc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a4:	4b29      	ldr	r3, [pc, #164]	@ (800164c <MX_TIM1_Init+0xfc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015aa:	4828      	ldr	r0, [pc, #160]	@ (800164c <MX_TIM1_Init+0xfc>)
 80015ac:	f001 fe7c 	bl	80032a8 <HAL_TIM_PWM_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80015b6:	f7ff fe9e 	bl	80012f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015c6:	4619      	mov	r1, r3
 80015c8:	4820      	ldr	r0, [pc, #128]	@ (800164c <MX_TIM1_Init+0xfc>)
 80015ca:	f002 fa3b 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 80015d4:	f7ff fe8f 	bl	80012f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d8:	2360      	movs	r3, #96	@ 0x60
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015e4:	2300      	movs	r3, #0
 80015e6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f8:	2200      	movs	r2, #0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4813      	ldr	r0, [pc, #76]	@ (800164c <MX_TIM1_Init+0xfc>)
 80015fe:	f001 ff45 	bl	800348c <HAL_TIM_PWM_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001608:	f7ff fe75 	bl	80012f6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001620:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001624:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4807      	ldr	r0, [pc, #28]	@ (800164c <MX_TIM1_Init+0xfc>)
 8001630:	f002 fa66 	bl	8003b00 <HAL_TIMEx_ConfigBreakDeadTime>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800163a:	f7ff fe5c 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800163e:	4803      	ldr	r0, [pc, #12]	@ (800164c <MX_TIM1_Init+0xfc>)
 8001640:	f000 f892 	bl	8001768 <HAL_TIM_MspPostInit>

}
 8001644:	bf00      	nop
 8001646:	3748      	adds	r7, #72	@ 0x48
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000238 	.word	0x20000238
 8001650:	40012c00 	.word	0x40012c00

08001654 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	@ 0x28
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165a:	f107 0320 	add.w	r3, r7, #32
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001676:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <MX_TIM3_Init+0xa8>)
 8001678:	4a21      	ldr	r2, [pc, #132]	@ (8001700 <MX_TIM3_Init+0xac>)
 800167a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <MX_TIM3_Init+0xa8>)
 800167e:	2204      	movs	r2, #4
 8001680:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001682:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <MX_TIM3_Init+0xa8>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <MX_TIM3_Init+0xa8>)
 800168a:	22ff      	movs	r2, #255	@ 0xff
 800168c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168e:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <MX_TIM3_Init+0xa8>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <MX_TIM3_Init+0xa8>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800169a:	4818      	ldr	r0, [pc, #96]	@ (80016fc <MX_TIM3_Init+0xa8>)
 800169c:	f001 fe04 	bl	80032a8 <HAL_TIM_PWM_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80016a6:	f7ff fe26 	bl	80012f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	4619      	mov	r1, r3
 80016b8:	4810      	ldr	r0, [pc, #64]	@ (80016fc <MX_TIM3_Init+0xa8>)
 80016ba:	f002 f9c3 	bl	8003a44 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80016c4:	f7ff fe17 	bl	80012f6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c8:	2360      	movs	r3, #96	@ 0x60
 80016ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	220c      	movs	r2, #12
 80016dc:	4619      	mov	r1, r3
 80016de:	4807      	ldr	r0, [pc, #28]	@ (80016fc <MX_TIM3_Init+0xa8>)
 80016e0:	f001 fed4 	bl	800348c <HAL_TIM_PWM_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80016ea:	f7ff fe04 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016ee:	4803      	ldr	r0, [pc, #12]	@ (80016fc <MX_TIM3_Init+0xa8>)
 80016f0:	f000 f83a 	bl	8001768 <HAL_TIM_MspPostInit>

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	@ 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000280 	.word	0x20000280
 8001700:	40000400 	.word	0x40000400

08001704 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a12      	ldr	r2, [pc, #72]	@ (800175c <HAL_TIM_PWM_MspInit+0x58>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d10c      	bne.n	8001730 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001716:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <HAL_TIM_PWM_MspInit+0x5c>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	4a11      	ldr	r2, [pc, #68]	@ (8001760 <HAL_TIM_PWM_MspInit+0x5c>)
 800171c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001720:	6193      	str	r3, [r2, #24]
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <HAL_TIM_PWM_MspInit+0x5c>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800172e:	e010      	b.n	8001752 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <HAL_TIM_PWM_MspInit+0x60>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d10b      	bne.n	8001752 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <HAL_TIM_PWM_MspInit+0x5c>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a08      	ldr	r2, [pc, #32]	@ (8001760 <HAL_TIM_PWM_MspInit+0x5c>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_TIM_PWM_MspInit+0x5c>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	40012c00 	.word	0x40012c00
 8001760:	40021000 	.word	0x40021000
 8001764:	40000400 	.word	0x40000400

08001768 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1f      	ldr	r2, [pc, #124]	@ (8001800 <HAL_TIM_MspPostInit+0x98>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d119      	bne.n	80017bc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <HAL_TIM_MspPostInit+0x9c>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a1d      	ldr	r2, [pc, #116]	@ (8001804 <HAL_TIM_MspPostInit+0x9c>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_TIM_MspPostInit+0x9c>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PwmMppt_Pin;
 80017a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PwmMppt_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4619      	mov	r1, r3
 80017b4:	4814      	ldr	r0, [pc, #80]	@ (8001808 <HAL_TIM_MspPostInit+0xa0>)
 80017b6:	f000 fe5f 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017ba:	e01c      	b.n	80017f6 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM3)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a12      	ldr	r2, [pc, #72]	@ (800180c <HAL_TIM_MspPostInit+0xa4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d117      	bne.n	80017f6 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <HAL_TIM_MspPostInit+0x9c>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001804 <HAL_TIM_MspPostInit+0x9c>)
 80017cc:	f043 0308 	orr.w	r3, r3, #8
 80017d0:	6193      	str	r3, [r2, #24]
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <HAL_TIM_MspPostInit+0x9c>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017de:	2302      	movs	r3, #2
 80017e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	4619      	mov	r1, r3
 80017f0:	4807      	ldr	r0, [pc, #28]	@ (8001810 <HAL_TIM_MspPostInit+0xa8>)
 80017f2:	f000 fe41 	bl	8002478 <HAL_GPIO_Init>
}
 80017f6:	bf00      	nop
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40012c00 	.word	0x40012c00
 8001804:	40021000 	.word	0x40021000
 8001808:	40010800 	.word	0x40010800
 800180c:	40000400 	.word	0x40000400
 8001810:	40010c00 	.word	0x40010c00

08001814 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <MX_USART1_UART_Init+0x4c>)
 800181a:	4a12      	ldr	r2, [pc, #72]	@ (8001864 <MX_USART1_UART_Init+0x50>)
 800181c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <MX_USART1_UART_Init+0x4c>)
 8001820:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001824:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <MX_USART1_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_USART1_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <MX_USART1_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_USART1_UART_Init+0x4c>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <MX_USART1_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_USART1_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	@ (8001860 <MX_USART1_UART_Init+0x4c>)
 800184c:	f002 f9a9 	bl	8003ba2 <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001856:	f7ff fd4e 	bl	80012f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200002c8 	.word	0x200002c8
 8001864:	40013800 	.word	0x40013800

08001868 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1c      	ldr	r2, [pc, #112]	@ (80018f4 <HAL_UART_MspInit+0x8c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d131      	bne.n	80018ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_UART_MspInit+0x90>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a1a      	ldr	r2, [pc, #104]	@ (80018f8 <HAL_UART_MspInit+0x90>)
 800188e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <HAL_UART_MspInit+0x90>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <HAL_UART_MspInit+0x90>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a14      	ldr	r2, [pc, #80]	@ (80018f8 <HAL_UART_MspInit+0x90>)
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_UART_MspInit+0x90>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	4619      	mov	r1, r3
 80018cc:	480b      	ldr	r0, [pc, #44]	@ (80018fc <HAL_UART_MspInit+0x94>)
 80018ce:	f000 fdd3 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	4805      	ldr	r0, [pc, #20]	@ (80018fc <HAL_UART_MspInit+0x94>)
 80018e8:	f000 fdc6 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010800 	.word	0x40010800

08001900 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001900:	f7ff fe20 	bl	8001544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001904:	480b      	ldr	r0, [pc, #44]	@ (8001934 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001906:	490c      	ldr	r1, [pc, #48]	@ (8001938 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001908:	4a0c      	ldr	r2, [pc, #48]	@ (800193c <LoopFillZerobss+0x16>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800191c:	4c09      	ldr	r4, [pc, #36]	@ (8001944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192a:	f004 f94d 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800192e:	f7ff fbbf 	bl	80010b0 <main>
  bx lr
 8001932:	4770      	bx	lr
  ldr r0, =_sdata
 8001934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001938:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800193c:	08008b5c 	.word	0x08008b5c
  ldr r2, =_sbss
 8001940:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001944:	20000460 	.word	0x20000460

08001948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC1_2_IRQHandler>
	...

0800194c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <HAL_Init+0x28>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a07      	ldr	r2, [pc, #28]	@ (8001974 <HAL_Init+0x28>)
 8001956:	f043 0310 	orr.w	r3, r3, #16
 800195a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195c:	2003      	movs	r0, #3
 800195e:	f000 fd57 	bl	8002410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001962:	200f      	movs	r0, #15
 8001964:	f000 f808 	bl	8001978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001968:	f7ff fccc 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40022000 	.word	0x40022000

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001980:	4b12      	ldr	r3, [pc, #72]	@ (80019cc <HAL_InitTick+0x54>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b12      	ldr	r3, [pc, #72]	@ (80019d0 <HAL_InitTick+0x58>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fd61 	bl	800245e <HAL_SYSTICK_Config>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00e      	b.n	80019c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d80a      	bhi.n	80019c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ac:	2200      	movs	r2, #0
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019b4:	f000 fd37 	bl	8002426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b8:	4a06      	ldr	r2, [pc, #24]	@ (80019d4 <HAL_InitTick+0x5c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000004 	.word	0x20000004
 80019d0:	2000000c 	.word	0x2000000c
 80019d4:	20000008 	.word	0x20000008

080019d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_IncTick+0x1c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_IncTick+0x20>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a03      	ldr	r2, [pc, #12]	@ (80019f8 <HAL_IncTick+0x20>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	2000000c 	.word	0x2000000c
 80019f8:	20000310 	.word	0x20000310

080019fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001a00:	4b02      	ldr	r3, [pc, #8]	@ (8001a0c <HAL_GetTick+0x10>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	20000310 	.word	0x20000310

08001a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a18:	f7ff fff0 	bl	80019fc <HAL_GetTick>
 8001a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a28:	d005      	beq.n	8001a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <HAL_Delay+0x44>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a36:	bf00      	nop
 8001a38:	f7ff ffe0 	bl	80019fc <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f7      	bhi.n	8001a38 <HAL_Delay+0x28>
  {
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000000c 	.word	0x2000000c

08001a58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0be      	b.n	8001bf8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fa04 	bl	8000ea4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 fbc5 	bl	800222c <ADC_ConversionStop_Disable>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 8099 	bne.w	8001be6 <HAL_ADC_Init+0x18e>
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f040 8095 	bne.w	8001be6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ac4:	f023 0302 	bic.w	r3, r3, #2
 8001ac8:	f043 0202 	orr.w	r2, r3, #2
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ad8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	7b1b      	ldrb	r3, [r3, #12]
 8001ade:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ae0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001af0:	d003      	beq.n	8001afa <HAL_ADC_Init+0xa2>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d102      	bne.n	8001b00 <HAL_ADC_Init+0xa8>
 8001afa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001afe:	e000      	b.n	8001b02 <HAL_ADC_Init+0xaa>
 8001b00:	2300      	movs	r3, #0
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7d1b      	ldrb	r3, [r3, #20]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d119      	bne.n	8001b44 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7b1b      	ldrb	r3, [r3, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d109      	bne.n	8001b2c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	035a      	lsls	r2, r3, #13
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	e00b      	b.n	8001b44 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b30:	f043 0220 	orr.w	r2, r3, #32
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	4b28      	ldr	r3, [pc, #160]	@ (8001c00 <HAL_ADC_Init+0x1a8>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	68b9      	ldr	r1, [r7, #8]
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b74:	d003      	beq.n	8001b7e <HAL_ADC_Init+0x126>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d104      	bne.n	8001b88 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	051b      	lsls	r3, r3, #20
 8001b86:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_ADC_Init+0x1ac>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d10b      	bne.n	8001bc4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	f023 0303 	bic.w	r3, r3, #3
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bc2:	e018      	b.n	8001bf6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	f023 0312 	bic.w	r3, r3, #18
 8001bcc:	f043 0210 	orr.w	r2, r3, #16
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001be4:	e007      	b.n	8001bf6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bea:	f043 0210 	orr.w	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	ffe1f7fd 	.word	0xffe1f7fd
 8001c04:	ff1f0efe 	.word	0xff1f0efe

08001c08 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_ADC_Start+0x1a>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e098      	b.n	8001d54 <HAL_ADC_Start+0x14c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 faa4 	bl	8002178 <ADC_Enable>
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 8087 	bne.w	8001d4a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c44:	f023 0301 	bic.w	r3, r3, #1
 8001c48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a41      	ldr	r2, [pc, #260]	@ (8001d5c <HAL_ADC_Start+0x154>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d105      	bne.n	8001c66 <HAL_ADC_Start+0x5e>
 8001c5a:	4b41      	ldr	r3, [pc, #260]	@ (8001d60 <HAL_ADC_Start+0x158>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d115      	bne.n	8001c92 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d026      	beq.n	8001cce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c90:	e01d      	b.n	8001cce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8001d60 <HAL_ADC_Start+0x158>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d004      	beq.n	8001cb2 <HAL_ADC_Start+0xaa>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a2b      	ldr	r2, [pc, #172]	@ (8001d5c <HAL_ADC_Start+0x154>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d10d      	bne.n	8001cce <HAL_ADC_Start+0xc6>
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d60 <HAL_ADC_Start+0x158>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001cc6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d006      	beq.n	8001ce8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cde:	f023 0206 	bic.w	r2, r3, #6
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ce6:	e002      	b.n	8001cee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f06f 0202 	mvn.w	r2, #2
 8001cfe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001d0a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001d0e:	d113      	bne.n	8001d38 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d14:	4a11      	ldr	r2, [pc, #68]	@ (8001d5c <HAL_ADC_Start+0x154>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d105      	bne.n	8001d26 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d1a:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <HAL_ADC_Start+0x158>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d108      	bne.n	8001d38 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	e00c      	b.n	8001d52 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	e003      	b.n	8001d52 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40012800 	.word	0x40012800
 8001d60:	40012400 	.word	0x40012400

08001d64 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d7a:	f7ff fe3f 	bl	80019fc <HAL_GetTick>
 8001d7e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d92:	f043 0220 	orr.w	r2, r3, #32
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e0d3      	b.n	8001f4e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d131      	bne.n	8001e18 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d12a      	bne.n	8001e18 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001dc2:	e021      	b.n	8001e08 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dca:	d01d      	beq.n	8001e08 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_ADC_PollForConversion+0x7e>
 8001dd2:	f7ff fe13 	bl	80019fc <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d212      	bcs.n	8001e08 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10b      	bne.n	8001e08 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	f043 0204 	orr.w	r2, r3, #4
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e0a2      	b.n	8001f4e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0d6      	beq.n	8001dc4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e16:	e070      	b.n	8001efa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e18:	4b4f      	ldr	r3, [pc, #316]	@ (8001f58 <HAL_ADC_PollForConversion+0x1f4>)
 8001e1a:	681c      	ldr	r4, [r3, #0]
 8001e1c:	2002      	movs	r0, #2
 8001e1e:	f001 f98d 	bl	800313c <HAL_RCCEx_GetPeriphCLKFreq>
 8001e22:	4603      	mov	r3, r0
 8001e24:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6919      	ldr	r1, [r3, #16]
 8001e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f5c <HAL_ADC_PollForConversion+0x1f8>)
 8001e30:	400b      	ands	r3, r1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d118      	bne.n	8001e68 <HAL_ADC_PollForConversion+0x104>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68d9      	ldr	r1, [r3, #12]
 8001e3c:	4b48      	ldr	r3, [pc, #288]	@ (8001f60 <HAL_ADC_PollForConversion+0x1fc>)
 8001e3e:	400b      	ands	r3, r1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d111      	bne.n	8001e68 <HAL_ADC_PollForConversion+0x104>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6919      	ldr	r1, [r3, #16]
 8001e4a:	4b46      	ldr	r3, [pc, #280]	@ (8001f64 <HAL_ADC_PollForConversion+0x200>)
 8001e4c:	400b      	ands	r3, r1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d108      	bne.n	8001e64 <HAL_ADC_PollForConversion+0x100>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68d9      	ldr	r1, [r3, #12]
 8001e58:	4b43      	ldr	r3, [pc, #268]	@ (8001f68 <HAL_ADC_PollForConversion+0x204>)
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_PollForConversion+0x100>
 8001e60:	2314      	movs	r3, #20
 8001e62:	e020      	b.n	8001ea6 <HAL_ADC_PollForConversion+0x142>
 8001e64:	2329      	movs	r3, #41	@ 0x29
 8001e66:	e01e      	b.n	8001ea6 <HAL_ADC_PollForConversion+0x142>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6919      	ldr	r1, [r3, #16]
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f64 <HAL_ADC_PollForConversion+0x200>)
 8001e70:	400b      	ands	r3, r1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_ADC_PollForConversion+0x120>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68d9      	ldr	r1, [r3, #12]
 8001e7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f68 <HAL_ADC_PollForConversion+0x204>)
 8001e7e:	400b      	ands	r3, r1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00d      	beq.n	8001ea0 <HAL_ADC_PollForConversion+0x13c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6919      	ldr	r1, [r3, #16]
 8001e8a:	4b38      	ldr	r3, [pc, #224]	@ (8001f6c <HAL_ADC_PollForConversion+0x208>)
 8001e8c:	400b      	ands	r3, r1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d108      	bne.n	8001ea4 <HAL_ADC_PollForConversion+0x140>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68d9      	ldr	r1, [r3, #12]
 8001e98:	4b34      	ldr	r3, [pc, #208]	@ (8001f6c <HAL_ADC_PollForConversion+0x208>)
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_ADC_PollForConversion+0x140>
 8001ea0:	2354      	movs	r3, #84	@ 0x54
 8001ea2:	e000      	b.n	8001ea6 <HAL_ADC_PollForConversion+0x142>
 8001ea4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ea6:	fb02 f303 	mul.w	r3, r2, r3
 8001eaa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001eac:	e021      	b.n	8001ef2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001eb4:	d01a      	beq.n	8001eec <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <HAL_ADC_PollForConversion+0x168>
 8001ebc:	f7ff fd9e 	bl	80019fc <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d20f      	bcs.n	8001eec <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d90b      	bls.n	8001eec <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	f043 0204 	orr.w	r2, r3, #4
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e030      	b.n	8001f4e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d8d9      	bhi.n	8001eae <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f06f 0212 	mvn.w	r2, #18
 8001f02:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f08:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001f1a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001f1e:	d115      	bne.n	8001f4c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d111      	bne.n	8001f4c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	f043 0201 	orr.w	r2, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000004 	.word	0x20000004
 8001f5c:	24924924 	.word	0x24924924
 8001f60:	00924924 	.word	0x00924924
 8001f64:	12492492 	.word	0x12492492
 8001f68:	00492492 	.word	0x00492492
 8001f6c:	00249249 	.word	0x00249249

08001f70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x20>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e0dc      	b.n	8002162 <HAL_ADC_ConfigChannel+0x1da>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b06      	cmp	r3, #6
 8001fb6:	d81c      	bhi.n	8001ff2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b05      	subs	r3, #5
 8001fca:	221f      	movs	r2, #31
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4019      	ands	r1, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3b05      	subs	r3, #5
 8001fe4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ff0:	e03c      	b.n	800206c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	d81c      	bhi.n	8002034 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	3b23      	subs	r3, #35	@ 0x23
 800200c:	221f      	movs	r2, #31
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	4019      	ands	r1, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	3b23      	subs	r3, #35	@ 0x23
 8002026:	fa00 f203 	lsl.w	r2, r0, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	631a      	str	r2, [r3, #48]	@ 0x30
 8002032:	e01b      	b.n	800206c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b41      	subs	r3, #65	@ 0x41
 8002046:	221f      	movs	r2, #31
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	4019      	ands	r1, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	3b41      	subs	r3, #65	@ 0x41
 8002060:	fa00 f203 	lsl.w	r2, r0, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b09      	cmp	r3, #9
 8002072:	d91c      	bls.n	80020ae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68d9      	ldr	r1, [r3, #12]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	3b1e      	subs	r3, #30
 8002086:	2207      	movs	r2, #7
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	4019      	ands	r1, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6898      	ldr	r0, [r3, #8]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	3b1e      	subs	r3, #30
 80020a0:	fa00 f203 	lsl.w	r2, r0, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	e019      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6919      	ldr	r1, [r3, #16]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	2207      	movs	r2, #7
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	4019      	ands	r1, r3
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6898      	ldr	r0, [r3, #8]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	fa00 f203 	lsl.w	r2, r0, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b10      	cmp	r3, #16
 80020e8:	d003      	beq.n	80020f2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ee:	2b11      	cmp	r3, #17
 80020f0:	d132      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1d      	ldr	r2, [pc, #116]	@ (800216c <HAL_ADC_ConfigChannel+0x1e4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d125      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d126      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002118:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b10      	cmp	r3, #16
 8002120:	d11a      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002122:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <HAL_ADC_ConfigChannel+0x1e8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a13      	ldr	r2, [pc, #76]	@ (8002174 <HAL_ADC_ConfigChannel+0x1ec>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	0c9a      	lsrs	r2, r3, #18
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002138:	e002      	b.n	8002140 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	3b01      	subs	r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f9      	bne.n	800213a <HAL_ADC_ConfigChannel+0x1b2>
 8002146:	e007      	b.n	8002158 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	f043 0220 	orr.w	r2, r3, #32
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	40012400 	.word	0x40012400
 8002170:	20000004 	.word	0x20000004
 8002174:	431bde83 	.word	0x431bde83

08002178 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d040      	beq.n	8002218 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <ADC_Enable+0xac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002228 <ADC_Enable+0xb0>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	0c9b      	lsrs	r3, r3, #18
 80021b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021b4:	e002      	b.n	80021bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f9      	bne.n	80021b6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021c2:	f7ff fc1b 	bl	80019fc <HAL_GetTick>
 80021c6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021c8:	e01f      	b.n	800220a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021ca:	f7ff fc17 	bl	80019fc <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d918      	bls.n	800220a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d011      	beq.n	800220a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	f043 0201 	orr.w	r2, r3, #1
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e007      	b.n	800221a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d1d8      	bne.n	80021ca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000004 	.word	0x20000004
 8002228:	431bde83 	.word	0x431bde83

0800222c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d12e      	bne.n	80022a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0201 	bic.w	r2, r2, #1
 8002254:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002256:	f7ff fbd1 	bl	80019fc <HAL_GetTick>
 800225a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800225c:	e01b      	b.n	8002296 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800225e:	f7ff fbcd 	bl	80019fc <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d914      	bls.n	8002296 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b01      	cmp	r3, #1
 8002278:	d10d      	bne.n	8002296 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227e:	f043 0210 	orr.w	r2, r3, #16
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e007      	b.n	80022a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d0dc      	beq.n	800225e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	@ (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	@ (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	@ 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	@ 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023dc:	d301      	bcc.n	80023e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023de:	2301      	movs	r3, #1
 80023e0:	e00f      	b.n	8002402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e2:	4a0a      	ldr	r2, [pc, #40]	@ (800240c <SysTick_Config+0x40>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ea:	210f      	movs	r1, #15
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023f0:	f7ff ff90 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f4:	4b05      	ldr	r3, [pc, #20]	@ (800240c <SysTick_Config+0x40>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fa:	4b04      	ldr	r3, [pc, #16]	@ (800240c <SysTick_Config+0x40>)
 80023fc:	2207      	movs	r2, #7
 80023fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	e000e010 	.word	0xe000e010

08002410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff49 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002438:	f7ff ff5e 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 800243c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	6978      	ldr	r0, [r7, #20]
 8002444:	f7ff ff90 	bl	8002368 <NVIC_EncodePriority>
 8002448:	4602      	mov	r2, r0
 800244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff5f 	bl	8002314 <__NVIC_SetPriority>
}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffb0 	bl	80023cc <SysTick_Config>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b08b      	sub	sp, #44	@ 0x2c
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248a:	e169      	b.n	8002760 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800248c:	2201      	movs	r2, #1
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	f040 8158 	bne.w	800275a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a9a      	ldr	r2, [pc, #616]	@ (8002718 <HAL_GPIO_Init+0x2a0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d05e      	beq.n	8002572 <HAL_GPIO_Init+0xfa>
 80024b4:	4a98      	ldr	r2, [pc, #608]	@ (8002718 <HAL_GPIO_Init+0x2a0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d875      	bhi.n	80025a6 <HAL_GPIO_Init+0x12e>
 80024ba:	4a98      	ldr	r2, [pc, #608]	@ (800271c <HAL_GPIO_Init+0x2a4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d058      	beq.n	8002572 <HAL_GPIO_Init+0xfa>
 80024c0:	4a96      	ldr	r2, [pc, #600]	@ (800271c <HAL_GPIO_Init+0x2a4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d86f      	bhi.n	80025a6 <HAL_GPIO_Init+0x12e>
 80024c6:	4a96      	ldr	r2, [pc, #600]	@ (8002720 <HAL_GPIO_Init+0x2a8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d052      	beq.n	8002572 <HAL_GPIO_Init+0xfa>
 80024cc:	4a94      	ldr	r2, [pc, #592]	@ (8002720 <HAL_GPIO_Init+0x2a8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d869      	bhi.n	80025a6 <HAL_GPIO_Init+0x12e>
 80024d2:	4a94      	ldr	r2, [pc, #592]	@ (8002724 <HAL_GPIO_Init+0x2ac>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d04c      	beq.n	8002572 <HAL_GPIO_Init+0xfa>
 80024d8:	4a92      	ldr	r2, [pc, #584]	@ (8002724 <HAL_GPIO_Init+0x2ac>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d863      	bhi.n	80025a6 <HAL_GPIO_Init+0x12e>
 80024de:	4a92      	ldr	r2, [pc, #584]	@ (8002728 <HAL_GPIO_Init+0x2b0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d046      	beq.n	8002572 <HAL_GPIO_Init+0xfa>
 80024e4:	4a90      	ldr	r2, [pc, #576]	@ (8002728 <HAL_GPIO_Init+0x2b0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d85d      	bhi.n	80025a6 <HAL_GPIO_Init+0x12e>
 80024ea:	2b12      	cmp	r3, #18
 80024ec:	d82a      	bhi.n	8002544 <HAL_GPIO_Init+0xcc>
 80024ee:	2b12      	cmp	r3, #18
 80024f0:	d859      	bhi.n	80025a6 <HAL_GPIO_Init+0x12e>
 80024f2:	a201      	add	r2, pc, #4	@ (adr r2, 80024f8 <HAL_GPIO_Init+0x80>)
 80024f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f8:	08002573 	.word	0x08002573
 80024fc:	0800254d 	.word	0x0800254d
 8002500:	0800255f 	.word	0x0800255f
 8002504:	080025a1 	.word	0x080025a1
 8002508:	080025a7 	.word	0x080025a7
 800250c:	080025a7 	.word	0x080025a7
 8002510:	080025a7 	.word	0x080025a7
 8002514:	080025a7 	.word	0x080025a7
 8002518:	080025a7 	.word	0x080025a7
 800251c:	080025a7 	.word	0x080025a7
 8002520:	080025a7 	.word	0x080025a7
 8002524:	080025a7 	.word	0x080025a7
 8002528:	080025a7 	.word	0x080025a7
 800252c:	080025a7 	.word	0x080025a7
 8002530:	080025a7 	.word	0x080025a7
 8002534:	080025a7 	.word	0x080025a7
 8002538:	080025a7 	.word	0x080025a7
 800253c:	08002555 	.word	0x08002555
 8002540:	08002569 	.word	0x08002569
 8002544:	4a79      	ldr	r2, [pc, #484]	@ (800272c <HAL_GPIO_Init+0x2b4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800254a:	e02c      	b.n	80025a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	623b      	str	r3, [r7, #32]
          break;
 8002552:	e029      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	3304      	adds	r3, #4
 800255a:	623b      	str	r3, [r7, #32]
          break;
 800255c:	e024      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	3308      	adds	r3, #8
 8002564:	623b      	str	r3, [r7, #32]
          break;
 8002566:	e01f      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	330c      	adds	r3, #12
 800256e:	623b      	str	r3, [r7, #32]
          break;
 8002570:	e01a      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d102      	bne.n	8002580 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800257a:	2304      	movs	r3, #4
 800257c:	623b      	str	r3, [r7, #32]
          break;
 800257e:	e013      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002588:	2308      	movs	r3, #8
 800258a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	611a      	str	r2, [r3, #16]
          break;
 8002592:	e009      	b.n	80025a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002594:	2308      	movs	r3, #8
 8002596:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	615a      	str	r2, [r3, #20]
          break;
 800259e:	e003      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
          break;
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          break;
 80025a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2bff      	cmp	r3, #255	@ 0xff
 80025ac:	d801      	bhi.n	80025b2 <HAL_GPIO_Init+0x13a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	e001      	b.n	80025b6 <HAL_GPIO_Init+0x13e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2bff      	cmp	r3, #255	@ 0xff
 80025bc:	d802      	bhi.n	80025c4 <HAL_GPIO_Init+0x14c>
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	e002      	b.n	80025ca <HAL_GPIO_Init+0x152>
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	3b08      	subs	r3, #8
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	210f      	movs	r1, #15
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	401a      	ands	r2, r3
 80025dc:	6a39      	ldr	r1, [r7, #32]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	fa01 f303 	lsl.w	r3, r1, r3
 80025e4:	431a      	orrs	r2, r3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80b1 	beq.w	800275a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002730 <HAL_GPIO_Init+0x2b8>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002730 <HAL_GPIO_Init+0x2b8>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6193      	str	r3, [r2, #24]
 8002604:	4b4a      	ldr	r3, [pc, #296]	@ (8002730 <HAL_GPIO_Init+0x2b8>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002610:	4a48      	ldr	r2, [pc, #288]	@ (8002734 <HAL_GPIO_Init+0x2bc>)
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	3302      	adds	r3, #2
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	220f      	movs	r2, #15
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a40      	ldr	r2, [pc, #256]	@ (8002738 <HAL_GPIO_Init+0x2c0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d013      	beq.n	8002664 <HAL_GPIO_Init+0x1ec>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a3f      	ldr	r2, [pc, #252]	@ (800273c <HAL_GPIO_Init+0x2c4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00d      	beq.n	8002660 <HAL_GPIO_Init+0x1e8>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a3e      	ldr	r2, [pc, #248]	@ (8002740 <HAL_GPIO_Init+0x2c8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d007      	beq.n	800265c <HAL_GPIO_Init+0x1e4>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a3d      	ldr	r2, [pc, #244]	@ (8002744 <HAL_GPIO_Init+0x2cc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_GPIO_Init+0x1e0>
 8002654:	2303      	movs	r3, #3
 8002656:	e006      	b.n	8002666 <HAL_GPIO_Init+0x1ee>
 8002658:	2304      	movs	r3, #4
 800265a:	e004      	b.n	8002666 <HAL_GPIO_Init+0x1ee>
 800265c:	2302      	movs	r3, #2
 800265e:	e002      	b.n	8002666 <HAL_GPIO_Init+0x1ee>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_GPIO_Init+0x1ee>
 8002664:	2300      	movs	r3, #0
 8002666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002668:	f002 0203 	and.w	r2, r2, #3
 800266c:	0092      	lsls	r2, r2, #2
 800266e:	4093      	lsls	r3, r2
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002676:	492f      	ldr	r1, [pc, #188]	@ (8002734 <HAL_GPIO_Init+0x2bc>)
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	3302      	adds	r3, #2
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d006      	beq.n	800269e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002690:	4b2d      	ldr	r3, [pc, #180]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	492c      	ldr	r1, [pc, #176]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	608b      	str	r3, [r1, #8]
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800269e:	4b2a      	ldr	r3, [pc, #168]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	4928      	ldr	r1, [pc, #160]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d006      	beq.n	80026c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026b8:	4b23      	ldr	r3, [pc, #140]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	4922      	ldr	r1, [pc, #136]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60cb      	str	r3, [r1, #12]
 80026c4:	e006      	b.n	80026d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026c6:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	491e      	ldr	r1, [pc, #120]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026e0:	4b19      	ldr	r3, [pc, #100]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	4918      	ldr	r1, [pc, #96]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026ee:	4b16      	ldr	r3, [pc, #88]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	4914      	ldr	r1, [pc, #80]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d021      	beq.n	800274c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002708:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	490e      	ldr	r1, [pc, #56]	@ (8002748 <HAL_GPIO_Init+0x2d0>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
 8002714:	e021      	b.n	800275a <HAL_GPIO_Init+0x2e2>
 8002716:	bf00      	nop
 8002718:	10320000 	.word	0x10320000
 800271c:	10310000 	.word	0x10310000
 8002720:	10220000 	.word	0x10220000
 8002724:	10210000 	.word	0x10210000
 8002728:	10120000 	.word	0x10120000
 800272c:	10110000 	.word	0x10110000
 8002730:	40021000 	.word	0x40021000
 8002734:	40010000 	.word	0x40010000
 8002738:	40010800 	.word	0x40010800
 800273c:	40010c00 	.word	0x40010c00
 8002740:	40011000 	.word	0x40011000
 8002744:	40011400 	.word	0x40011400
 8002748:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <HAL_GPIO_Init+0x304>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	43db      	mvns	r3, r3
 8002754:	4909      	ldr	r1, [pc, #36]	@ (800277c <HAL_GPIO_Init+0x304>)
 8002756:	4013      	ands	r3, r2
 8002758:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800275a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275c:	3301      	adds	r3, #1
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	fa22 f303 	lsr.w	r3, r2, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	f47f ae8e 	bne.w	800248c <HAL_GPIO_Init+0x14>
  }
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	372c      	adds	r7, #44	@ 0x2c
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	40010400 	.word	0x40010400

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800279c:	e003      	b.n	80027a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	041a      	lsls	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e272      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 8087 	beq.w	80028de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d0:	4b92      	ldr	r3, [pc, #584]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d00c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027dc:	4b8f      	ldr	r3, [pc, #572]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d112      	bne.n	800280e <HAL_RCC_OscConfig+0x5e>
 80027e8:	4b8c      	ldr	r3, [pc, #560]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f4:	d10b      	bne.n	800280e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f6:	4b89      	ldr	r3, [pc, #548]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d06c      	beq.n	80028dc <HAL_RCC_OscConfig+0x12c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d168      	bne.n	80028dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e24c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x76>
 8002818:	4b80      	ldr	r3, [pc, #512]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a7f      	ldr	r2, [pc, #508]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	e02e      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x98>
 800282e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7a      	ldr	r2, [pc, #488]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002834:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b78      	ldr	r3, [pc, #480]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a77      	ldr	r2, [pc, #476]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002840:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0xbc>
 8002852:	4b72      	ldr	r3, [pc, #456]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a71      	ldr	r2, [pc, #452]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b6f      	ldr	r3, [pc, #444]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6e      	ldr	r2, [pc, #440]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 800286c:	4b6b      	ldr	r3, [pc, #428]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a6a      	ldr	r2, [pc, #424]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b68      	ldr	r3, [pc, #416]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a67      	ldr	r2, [pc, #412]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7ff f8b6 	bl	80019fc <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7ff f8b2 	bl	80019fc <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	@ 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e200      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b5d      	ldr	r3, [pc, #372]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0xe4>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7ff f8a2 	bl	80019fc <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff f89e 	bl	80019fc <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	@ 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1ec      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	4b53      	ldr	r3, [pc, #332]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x10c>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d063      	beq.n	80029b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ea:	4b4c      	ldr	r3, [pc, #304]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028f6:	4b49      	ldr	r3, [pc, #292]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d11c      	bne.n	800293c <HAL_RCC_OscConfig+0x18c>
 8002902:	4b46      	ldr	r3, [pc, #280]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d116      	bne.n	800293c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4b43      	ldr	r3, [pc, #268]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_RCC_OscConfig+0x176>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1c0      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4b3d      	ldr	r3, [pc, #244]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4939      	ldr	r1, [pc, #228]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	e03a      	b.n	80029b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002944:	4b36      	ldr	r3, [pc, #216]	@ (8002a20 <HAL_RCC_OscConfig+0x270>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7ff f857 	bl	80019fc <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002952:	f7ff f853 	bl	80019fc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1a1      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	4b2d      	ldr	r3, [pc, #180]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b2a      	ldr	r3, [pc, #168]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4927      	ldr	r1, [pc, #156]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b26      	ldr	r3, [pc, #152]	@ (8002a20 <HAL_RCC_OscConfig+0x270>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7ff f836 	bl	80019fc <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002994:	f7ff f832 	bl	80019fc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e180      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d03a      	beq.n	8002a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d019      	beq.n	80029fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4b17      	ldr	r3, [pc, #92]	@ (8002a24 <HAL_RCC_OscConfig+0x274>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7ff f816 	bl	80019fc <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d4:	f7ff f812 	bl	80019fc <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e160      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029f2:	2001      	movs	r0, #1
 80029f4:	f000 face 	bl	8002f94 <RCC_Delay>
 80029f8:	e01c      	b.n	8002a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002a24 <HAL_RCC_OscConfig+0x274>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fffc 	bl	80019fc <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a06:	e00f      	b.n	8002a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fff8 	bl	80019fc <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d908      	bls.n	8002a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e146      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	42420000 	.word	0x42420000
 8002a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	4b92      	ldr	r3, [pc, #584]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e9      	bne.n	8002a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80a6 	beq.w	8002b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4b8b      	ldr	r3, [pc, #556]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10d      	bne.n	8002a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	4b88      	ldr	r3, [pc, #544]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	4a87      	ldr	r2, [pc, #540]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a5c:	61d3      	str	r3, [r2, #28]
 8002a5e:	4b85      	ldr	r3, [pc, #532]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b82      	ldr	r3, [pc, #520]	@ (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d118      	bne.n	8002aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7fe ffb9 	bl	80019fc <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8e:	f7fe ffb5 	bl	80019fc <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b64      	cmp	r3, #100	@ 0x64
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e103      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	4b75      	ldr	r3, [pc, #468]	@ (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x312>
 8002ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4a6e      	ldr	r2, [pc, #440]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	e02d      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x334>
 8002aca:	4b6a      	ldr	r3, [pc, #424]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4a69      	ldr	r2, [pc, #420]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6213      	str	r3, [r2, #32]
 8002ad6:	4b67      	ldr	r3, [pc, #412]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4a66      	ldr	r2, [pc, #408]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	6213      	str	r3, [r2, #32]
 8002ae2:	e01c      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x356>
 8002aec:	4b61      	ldr	r3, [pc, #388]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4a60      	ldr	r2, [pc, #384]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	f043 0304 	orr.w	r3, r3, #4
 8002af6:	6213      	str	r3, [r2, #32]
 8002af8:	4b5e      	ldr	r3, [pc, #376]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a5d      	ldr	r2, [pc, #372]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	e00b      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002b06:	4b5b      	ldr	r3, [pc, #364]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	4b58      	ldr	r3, [pc, #352]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a57      	ldr	r2, [pc, #348]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d015      	beq.n	8002b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe ff69 	bl	80019fc <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe ff65 	bl	80019fc <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0b1      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	4b4b      	ldr	r3, [pc, #300]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RCC_OscConfig+0x37e>
 8002b50:	e014      	b.n	8002b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b52:	f7fe ff53 	bl	80019fc <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe ff4f 	bl	80019fc <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e09b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b70:	4b40      	ldr	r3, [pc, #256]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ee      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b82:	4b3c      	ldr	r3, [pc, #240]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	4a3b      	ldr	r2, [pc, #236]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8087 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b98:	4b36      	ldr	r3, [pc, #216]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d061      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d146      	bne.n	8002c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4b33      	ldr	r3, [pc, #204]	@ (8002c7c <HAL_RCC_OscConfig+0x4cc>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe ff23 	bl	80019fc <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe ff1f 	bl	80019fc <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e06d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bcc:	4b29      	ldr	r3, [pc, #164]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be0:	d108      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002be2:	4b24      	ldr	r3, [pc, #144]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4921      	ldr	r1, [pc, #132]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a19      	ldr	r1, [r3, #32]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	430b      	orrs	r3, r1
 8002c06:	491b      	ldr	r1, [pc, #108]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c7c <HAL_RCC_OscConfig+0x4cc>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe fef3 	bl	80019fc <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe feef 	bl	80019fc <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e03d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c2c:	4b11      	ldr	r3, [pc, #68]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x46a>
 8002c38:	e035      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <HAL_RCC_OscConfig+0x4cc>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fedc 	bl	80019fc <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fed8 	bl	80019fc <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e026      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5a:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x498>
 8002c66:	e01e      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e019      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c80:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <HAL_RCC_OscConfig+0x500>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0d0      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d910      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b67      	ldr	r3, [pc, #412]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 0207 	bic.w	r2, r3, #7
 8002cde:	4965      	ldr	r1, [pc, #404]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b63      	ldr	r3, [pc, #396]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0b8      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d020      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d10:	4b59      	ldr	r3, [pc, #356]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a58      	ldr	r2, [pc, #352]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d28:	4b53      	ldr	r3, [pc, #332]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4a52      	ldr	r2, [pc, #328]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4b50      	ldr	r3, [pc, #320]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	494d      	ldr	r1, [pc, #308]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d040      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b47      	ldr	r3, [pc, #284]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d115      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e07f      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d72:	4b41      	ldr	r3, [pc, #260]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e073      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	4b3d      	ldr	r3, [pc, #244]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06b      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d92:	4b39      	ldr	r3, [pc, #228]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4936      	ldr	r1, [pc, #216]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da4:	f7fe fe2a 	bl	80019fc <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7fe fe26 	bl	80019fc <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e053      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 020c 	and.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1eb      	bne.n	8002dac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b27      	ldr	r3, [pc, #156]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d210      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 0207 	bic.w	r2, r3, #7
 8002dea:	4922      	ldr	r1, [pc, #136]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b20      	ldr	r3, [pc, #128]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e032      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e10:	4b19      	ldr	r3, [pc, #100]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4916      	ldr	r1, [pc, #88]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e2e:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	490e      	ldr	r1, [pc, #56]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e42:	f000 f821 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8002e46:	4602      	mov	r2, r0
 8002e48:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	490a      	ldr	r1, [pc, #40]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	5ccb      	ldrb	r3, [r1, r3]
 8002e56:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5a:	4a09      	ldr	r2, [pc, #36]	@ (8002e80 <HAL_RCC_ClockConfig+0x1cc>)
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e5e:	4b09      	ldr	r3, [pc, #36]	@ (8002e84 <HAL_RCC_ClockConfig+0x1d0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fd88 	bl	8001978 <HAL_InitTick>

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40022000 	.word	0x40022000
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	080086e4 	.word	0x080086e4
 8002e80:	20000004 	.word	0x20000004
 8002e84:	20000008 	.word	0x20000008

08002e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	2300      	movs	r3, #0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d002      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x30>
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d003      	beq.n	8002ebe <HAL_RCC_GetSysClockFreq+0x36>
 8002eb6:	e027      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eb8:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eba:	613b      	str	r3, [r7, #16]
      break;
 8002ebc:	e027      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	0c9b      	lsrs	r3, r3, #18
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	4a17      	ldr	r2, [pc, #92]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ec8:	5cd3      	ldrb	r3, [r2, r3]
 8002eca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ed6:	4b11      	ldr	r3, [pc, #68]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	0c5b      	lsrs	r3, r3, #17
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	4a11      	ldr	r2, [pc, #68]	@ (8002f28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ee2:	5cd3      	ldrb	r3, [r2, r3]
 8002ee4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eea:	fb03 f202 	mul.w	r2, r3, r2
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e004      	b.n	8002f02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a0c      	ldr	r2, [pc, #48]	@ (8002f2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002efc:	fb02 f303 	mul.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	613b      	str	r3, [r7, #16]
      break;
 8002f06:	e002      	b.n	8002f0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f0a:	613b      	str	r3, [r7, #16]
      break;
 8002f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0e:	693b      	ldr	r3, [r7, #16]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	371c      	adds	r7, #28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	007a1200 	.word	0x007a1200
 8002f24:	080086fc 	.word	0x080086fc
 8002f28:	0800870c 	.word	0x0800870c
 8002f2c:	003d0900 	.word	0x003d0900

08002f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f34:	4b02      	ldr	r3, [pc, #8]	@ (8002f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	20000004 	.word	0x20000004

08002f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f48:	f7ff fff2 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b05      	ldr	r3, [pc, #20]	@ (8002f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4903      	ldr	r1, [pc, #12]	@ (8002f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	080086f4 	.word	0x080086f4

08002f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f70:	f7ff ffde 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	0adb      	lsrs	r3, r3, #11
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4903      	ldr	r1, [pc, #12]	@ (8002f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	080086f4 	.word	0x080086f4

08002f94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <RCC_Delay+0x34>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fcc <RCC_Delay+0x38>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	0a5b      	lsrs	r3, r3, #9
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fb0:	bf00      	nop
  }
  while (Delay --);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1e5a      	subs	r2, r3, #1
 8002fb6:	60fa      	str	r2, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f9      	bne.n	8002fb0 <RCC_Delay+0x1c>
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	20000004 	.word	0x20000004
 8002fcc:	10624dd3 	.word	0x10624dd3

08002fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d07d      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff0:	4b4f      	ldr	r3, [pc, #316]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10d      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	4a4b      	ldr	r2, [pc, #300]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003006:	61d3      	str	r3, [r2, #28]
 8003008:	4b49      	ldr	r3, [pc, #292]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003018:	4b46      	ldr	r3, [pc, #280]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003020:	2b00      	cmp	r3, #0
 8003022:	d118      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003024:	4b43      	ldr	r3, [pc, #268]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a42      	ldr	r2, [pc, #264]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800302a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800302e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003030:	f7fe fce4 	bl	80019fc <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003036:	e008      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003038:	f7fe fce0 	bl	80019fc <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	@ 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e06d      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	4b3a      	ldr	r3, [pc, #232]	@ (8003134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003056:	4b36      	ldr	r3, [pc, #216]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800305e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d02e      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	429a      	cmp	r2, r3
 8003072:	d027      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003074:	4b2e      	ldr	r3, [pc, #184]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800307c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800307e:	4b2e      	ldr	r3, [pc, #184]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003084:	4b2c      	ldr	r3, [pc, #176]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800308a:	4a29      	ldr	r2, [pc, #164]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d014      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fe fcaf 	bl	80019fc <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a2:	f7fe fcab 	bl	80019fc <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e036      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ee      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4917      	ldr	r1, [pc, #92]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d105      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030dc:	4b14      	ldr	r3, [pc, #80]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	4a13      	ldr	r2, [pc, #76]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	490b      	ldr	r1, [pc, #44]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003112:	4b07      	ldr	r3, [pc, #28]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	4904      	ldr	r1, [pc, #16]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	40007000 	.word	0x40007000
 8003138:	42420440 	.word	0x42420440

0800313c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	2300      	movs	r3, #0
 800314e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	2300      	movs	r3, #0
 8003156:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b10      	cmp	r3, #16
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b10      	cmp	r3, #16
 8003162:	f200 808a 	bhi.w	800327a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d045      	beq.n	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d075      	beq.n	800325e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003172:	e082      	b.n	800327a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003174:	4b46      	ldr	r3, [pc, #280]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800317a:	4b45      	ldr	r3, [pc, #276]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d07b      	beq.n	800327e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	0c9b      	lsrs	r3, r3, #18
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	4a41      	ldr	r2, [pc, #260]	@ (8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003190:	5cd3      	ldrb	r3, [r2, r3]
 8003192:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d015      	beq.n	80031ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800319e:	4b3c      	ldr	r3, [pc, #240]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	0c5b      	lsrs	r3, r3, #17
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003298 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00d      	beq.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80031b8:	4a38      	ldr	r2, [pc, #224]	@ (800329c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	e004      	b.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4a34      	ldr	r2, [pc, #208]	@ (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80031d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031e0:	d102      	bne.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	61bb      	str	r3, [r7, #24]
      break;
 80031e6:	e04a      	b.n	800327e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4a2d      	ldr	r2, [pc, #180]	@ (80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	61bb      	str	r3, [r7, #24]
      break;
 80031f6:	e042      	b.n	800327e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80031f8:	4b25      	ldr	r3, [pc, #148]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003208:	d108      	bne.n	800321c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003214:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003218:	61bb      	str	r3, [r7, #24]
 800321a:	e01f      	b.n	800325c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003226:	d109      	bne.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003228:	4b19      	ldr	r3, [pc, #100]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003234:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	e00f      	b.n	800325c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003242:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003246:	d11c      	bne.n	8003282 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003248:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d016      	beq.n	8003282 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003254:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003258:	61bb      	str	r3, [r7, #24]
      break;
 800325a:	e012      	b.n	8003282 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800325c:	e011      	b.n	8003282 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800325e:	f7ff fe85 	bl	8002f6c <HAL_RCC_GetPCLK2Freq>
 8003262:	4602      	mov	r2, r0
 8003264:	4b0a      	ldr	r3, [pc, #40]	@ (8003290 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	0b9b      	lsrs	r3, r3, #14
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	3301      	adds	r3, #1
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	61bb      	str	r3, [r7, #24]
      break;
 8003278:	e004      	b.n	8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003282:	bf00      	nop
    }
  }
  return (frequency);
 8003284:	69bb      	ldr	r3, [r7, #24]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
 8003294:	08008710 	.word	0x08008710
 8003298:	08008720 	.word	0x08008720
 800329c:	007a1200 	.word	0x007a1200
 80032a0:	003d0900 	.word	0x003d0900
 80032a4:	aaaaaaab 	.word	0xaaaaaaab

080032a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e041      	b.n	800333e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe fa18 	bl	8001704 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f000 f992 	bl	8003610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d109      	bne.n	800336c <HAL_TIM_PWM_Start+0x24>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e022      	b.n	80033b2 <HAL_TIM_PWM_Start+0x6a>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b04      	cmp	r3, #4
 8003370:	d109      	bne.n	8003386 <HAL_TIM_PWM_Start+0x3e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	bf14      	ite	ne
 800337e:	2301      	movne	r3, #1
 8003380:	2300      	moveq	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	e015      	b.n	80033b2 <HAL_TIM_PWM_Start+0x6a>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d109      	bne.n	80033a0 <HAL_TIM_PWM_Start+0x58>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e008      	b.n	80033b2 <HAL_TIM_PWM_Start+0x6a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	bf14      	ite	ne
 80033ac:	2301      	movne	r3, #1
 80033ae:	2300      	moveq	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e05e      	b.n	8003478 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d104      	bne.n	80033ca <HAL_TIM_PWM_Start+0x82>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033c8:	e013      	b.n	80033f2 <HAL_TIM_PWM_Start+0xaa>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d104      	bne.n	80033da <HAL_TIM_PWM_Start+0x92>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033d8:	e00b      	b.n	80033f2 <HAL_TIM_PWM_Start+0xaa>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d104      	bne.n	80033ea <HAL_TIM_PWM_Start+0xa2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033e8:	e003      	b.n	80033f2 <HAL_TIM_PWM_Start+0xaa>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2202      	movs	r2, #2
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2201      	movs	r2, #1
 80033f8:	6839      	ldr	r1, [r7, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fafe 	bl	80039fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1e      	ldr	r2, [pc, #120]	@ (8003480 <HAL_TIM_PWM_Start+0x138>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d107      	bne.n	800341a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003418:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a18      	ldr	r2, [pc, #96]	@ (8003480 <HAL_TIM_PWM_Start+0x138>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_TIM_PWM_Start+0xfa>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342c:	d009      	beq.n	8003442 <HAL_TIM_PWM_Start+0xfa>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a14      	ldr	r2, [pc, #80]	@ (8003484 <HAL_TIM_PWM_Start+0x13c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_TIM_PWM_Start+0xfa>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a12      	ldr	r2, [pc, #72]	@ (8003488 <HAL_TIM_PWM_Start+0x140>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d111      	bne.n	8003466 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b06      	cmp	r3, #6
 8003452:	d010      	beq.n	8003476 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003464:	e007      	b.n	8003476 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40012c00 	.word	0x40012c00
 8003484:	40000400 	.word	0x40000400
 8003488:	40000800 	.word	0x40000800

0800348c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e0ae      	b.n	8003608 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	f200 809f 	bhi.w	80035f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034ba:	a201      	add	r2, pc, #4	@ (adr r2, 80034c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	080034f5 	.word	0x080034f5
 80034c4:	080035f9 	.word	0x080035f9
 80034c8:	080035f9 	.word	0x080035f9
 80034cc:	080035f9 	.word	0x080035f9
 80034d0:	08003535 	.word	0x08003535
 80034d4:	080035f9 	.word	0x080035f9
 80034d8:	080035f9 	.word	0x080035f9
 80034dc:	080035f9 	.word	0x080035f9
 80034e0:	08003577 	.word	0x08003577
 80034e4:	080035f9 	.word	0x080035f9
 80034e8:	080035f9 	.word	0x080035f9
 80034ec:	080035f9 	.word	0x080035f9
 80034f0:	080035b7 	.word	0x080035b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f8f6 	bl	80036ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0208 	orr.w	r2, r2, #8
 800350e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0204 	bic.w	r2, r2, #4
 800351e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6999      	ldr	r1, [r3, #24]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	619a      	str	r2, [r3, #24]
      break;
 8003532:	e064      	b.n	80035fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f93c 	bl	80037b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800354e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800355e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6999      	ldr	r1, [r3, #24]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	021a      	lsls	r2, r3, #8
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	619a      	str	r2, [r3, #24]
      break;
 8003574:	e043      	b.n	80035fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	4618      	mov	r0, r3
 800357e:	f000 f985 	bl	800388c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0208 	orr.w	r2, r2, #8
 8003590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0204 	bic.w	r2, r2, #4
 80035a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69d9      	ldr	r1, [r3, #28]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	61da      	str	r2, [r3, #28]
      break;
 80035b4:	e023      	b.n	80035fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68b9      	ldr	r1, [r7, #8]
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f9cf 	bl	8003960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69da      	ldr	r2, [r3, #28]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69d9      	ldr	r1, [r3, #28]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	021a      	lsls	r2, r3, #8
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	61da      	str	r2, [r3, #28]
      break;
 80035f6:	e002      	b.n	80035fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	75fb      	strb	r3, [r7, #23]
      break;
 80035fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003606:	7dfb      	ldrb	r3, [r7, #23]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a2f      	ldr	r2, [pc, #188]	@ (80036e0 <TIM_Base_SetConfig+0xd0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00b      	beq.n	8003640 <TIM_Base_SetConfig+0x30>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362e:	d007      	beq.n	8003640 <TIM_Base_SetConfig+0x30>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a2c      	ldr	r2, [pc, #176]	@ (80036e4 <TIM_Base_SetConfig+0xd4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d003      	beq.n	8003640 <TIM_Base_SetConfig+0x30>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a2b      	ldr	r2, [pc, #172]	@ (80036e8 <TIM_Base_SetConfig+0xd8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d108      	bne.n	8003652 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a22      	ldr	r2, [pc, #136]	@ (80036e0 <TIM_Base_SetConfig+0xd0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00b      	beq.n	8003672 <TIM_Base_SetConfig+0x62>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003660:	d007      	beq.n	8003672 <TIM_Base_SetConfig+0x62>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a1f      	ldr	r2, [pc, #124]	@ (80036e4 <TIM_Base_SetConfig+0xd4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <TIM_Base_SetConfig+0x62>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a1e      	ldr	r2, [pc, #120]	@ (80036e8 <TIM_Base_SetConfig+0xd8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d108      	bne.n	8003684 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a0d      	ldr	r2, [pc, #52]	@ (80036e0 <TIM_Base_SetConfig+0xd0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d103      	bne.n	80036b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f023 0201 	bic.w	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	611a      	str	r2, [r3, #16]
  }
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40000400 	.word	0x40000400
 80036e8:	40000800 	.word	0x40000800

080036ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f023 0201 	bic.w	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f023 0302 	bic.w	r3, r3, #2
 8003734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a1c      	ldr	r2, [pc, #112]	@ (80037b4 <TIM_OC1_SetConfig+0xc8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d10c      	bne.n	8003762 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0308 	bic.w	r3, r3, #8
 800374e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f023 0304 	bic.w	r3, r3, #4
 8003760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a13      	ldr	r2, [pc, #76]	@ (80037b4 <TIM_OC1_SetConfig+0xc8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d111      	bne.n	800378e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	621a      	str	r2, [r3, #32]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00

080037b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f023 0210 	bic.w	r2, r3, #16
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0320 	bic.w	r3, r3, #32
 8003802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a1d      	ldr	r2, [pc, #116]	@ (8003888 <TIM_OC2_SetConfig+0xd0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d10d      	bne.n	8003834 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800381e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003832:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a14      	ldr	r2, [pc, #80]	@ (8003888 <TIM_OC2_SetConfig+0xd0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00

0800388c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0303 	bic.w	r3, r3, #3
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1d      	ldr	r2, [pc, #116]	@ (800395c <TIM_OC3_SetConfig+0xd0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10d      	bne.n	8003906 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a14      	ldr	r2, [pc, #80]	@ (800395c <TIM_OC3_SetConfig+0xd0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d113      	bne.n	8003936 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800391c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	621a      	str	r2, [r3, #32]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00

08003960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800398e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	031b      	lsls	r3, r3, #12
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a0f      	ldr	r2, [pc, #60]	@ (80039f8 <TIM_OC4_SetConfig+0x98>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d109      	bne.n	80039d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	40012c00 	.word	0x40012c00

080039fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2201      	movs	r2, #1
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1a      	ldr	r2, [r3, #32]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e046      	b.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	@ (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa8:	d009      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a12      	ldr	r2, [pc, #72]	@ (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a10      	ldr	r2, [pc, #64]	@ (8003afc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10c      	bne.n	8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ac4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40000400 	.word	0x40000400
 8003afc:	40000800 	.word	0x40000800

08003b00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e03d      	b.n	8003b98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e042      	b.n	8003c3a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7fd fe4d 	bl	8001868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2224      	movs	r2, #36	@ 0x24
 8003bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003be4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f972 	bl	8003ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bfa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b08a      	sub	sp, #40	@ 0x28
 8003c46:	af02      	add	r7, sp, #8
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d175      	bne.n	8003d4e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <HAL_UART_Transmit+0x2c>
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e06e      	b.n	8003d50 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2221      	movs	r2, #33	@ 0x21
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c80:	f7fd febc 	bl	80019fc <HAL_GetTick>
 8003c84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	88fa      	ldrh	r2, [r7, #6]
 8003c8a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c9a:	d108      	bne.n	8003cae <HAL_UART_Transmit+0x6c>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	e003      	b.n	8003cb6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cb6:	e02e      	b.n	8003d16 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2180      	movs	r1, #128	@ 0x80
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f848 	bl	8003d58 <UART_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e03a      	b.n	8003d50 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cee:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	61bb      	str	r3, [r7, #24]
 8003cf6:	e007      	b.n	8003d08 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	781a      	ldrb	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3301      	adds	r3, #1
 8003d06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1cb      	bne.n	8003cb8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2200      	movs	r2, #0
 8003d28:	2140      	movs	r1, #64	@ 0x40
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f814 	bl	8003d58 <UART_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e006      	b.n	8003d50 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e000      	b.n	8003d50 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3720      	adds	r7, #32
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d68:	e03b      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d70:	d037      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d72:	f7fd fe43 	bl	80019fc <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	6a3a      	ldr	r2, [r7, #32]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d302      	bcc.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e03a      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d023      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b80      	cmp	r3, #128	@ 0x80
 8003d9e:	d020      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b40      	cmp	r3, #64	@ 0x40
 8003da4:	d01d      	beq.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d116      	bne.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f81d 	bl	8003e0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e00f      	b.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4013      	ands	r3, r2
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	bf0c      	ite	eq
 8003df2:	2301      	moveq	r3, #1
 8003df4:	2300      	movne	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d0b4      	beq.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b095      	sub	sp, #84	@ 0x54
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	330c      	adds	r3, #12
 8003e18:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1c:	e853 3f00 	ldrex	r3, [r3]
 8003e20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	330c      	adds	r3, #12
 8003e30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e32:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e3a:	e841 2300 	strex	r3, r2, [r1]
 8003e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e5      	bne.n	8003e12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3314      	adds	r3, #20
 8003e4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3314      	adds	r3, #20
 8003e64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e5      	bne.n	8003e46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d119      	bne.n	8003eb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	e853 3f00 	ldrex	r3, [r3]
 8003e90:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f023 0310 	bic.w	r3, r3, #16
 8003e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ea2:	61ba      	str	r2, [r7, #24]
 8003ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6979      	ldr	r1, [r7, #20]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e5      	bne.n	8003e82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ec4:	bf00      	nop
 8003ec6:	3754      	adds	r7, #84	@ 0x54
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr
	...

08003ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003f0a:	f023 030c 	bic.w	r3, r3, #12
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe4 <UART_SetConfig+0x114>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d103      	bne.n	8003f40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7ff f818 	bl	8002f6c <HAL_RCC_GetPCLK2Freq>
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	e002      	b.n	8003f46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f40:	f7ff f800 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 8003f44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009a      	lsls	r2, r3, #2
 8003f50:	441a      	add	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	4a22      	ldr	r2, [pc, #136]	@ (8003fe8 <UART_SetConfig+0x118>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	0119      	lsls	r1, r3, #4
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009a      	lsls	r2, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe8 <UART_SetConfig+0x118>)
 8003f7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	2064      	movs	r0, #100	@ 0x64
 8003f86:	fb00 f303 	mul.w	r3, r0, r3
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	3332      	adds	r3, #50	@ 0x32
 8003f90:	4a15      	ldr	r2, [pc, #84]	@ (8003fe8 <UART_SetConfig+0x118>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f9c:	4419      	add	r1, r3
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009a      	lsls	r2, r3, #2
 8003fa8:	441a      	add	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <UART_SetConfig+0x118>)
 8003fb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2064      	movs	r0, #100	@ 0x64
 8003fbe:	fb00 f303 	mul.w	r3, r0, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	3332      	adds	r3, #50	@ 0x32
 8003fc8:	4a07      	ldr	r2, [pc, #28]	@ (8003fe8 <UART_SetConfig+0x118>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	440a      	add	r2, r1
 8003fda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40013800 	.word	0x40013800
 8003fe8:	51eb851f 	.word	0x51eb851f

08003fec <__cvt>:
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff2:	461d      	mov	r5, r3
 8003ff4:	bfbb      	ittet	lt
 8003ff6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003ffa:	461d      	movlt	r5, r3
 8003ffc:	2300      	movge	r3, #0
 8003ffe:	232d      	movlt	r3, #45	@ 0x2d
 8004000:	b088      	sub	sp, #32
 8004002:	4614      	mov	r4, r2
 8004004:	bfb8      	it	lt
 8004006:	4614      	movlt	r4, r2
 8004008:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800400a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800400c:	7013      	strb	r3, [r2, #0]
 800400e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004010:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004014:	f023 0820 	bic.w	r8, r3, #32
 8004018:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800401c:	d005      	beq.n	800402a <__cvt+0x3e>
 800401e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004022:	d100      	bne.n	8004026 <__cvt+0x3a>
 8004024:	3601      	adds	r6, #1
 8004026:	2302      	movs	r3, #2
 8004028:	e000      	b.n	800402c <__cvt+0x40>
 800402a:	2303      	movs	r3, #3
 800402c:	aa07      	add	r2, sp, #28
 800402e:	9204      	str	r2, [sp, #16]
 8004030:	aa06      	add	r2, sp, #24
 8004032:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004036:	e9cd 3600 	strd	r3, r6, [sp]
 800403a:	4622      	mov	r2, r4
 800403c:	462b      	mov	r3, r5
 800403e:	f001 fe9b 	bl	8005d78 <_dtoa_r>
 8004042:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004046:	4607      	mov	r7, r0
 8004048:	d119      	bne.n	800407e <__cvt+0x92>
 800404a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800404c:	07db      	lsls	r3, r3, #31
 800404e:	d50e      	bpl.n	800406e <__cvt+0x82>
 8004050:	eb00 0906 	add.w	r9, r0, r6
 8004054:	2200      	movs	r2, #0
 8004056:	2300      	movs	r3, #0
 8004058:	4620      	mov	r0, r4
 800405a:	4629      	mov	r1, r5
 800405c:	f7fc fd58 	bl	8000b10 <__aeabi_dcmpeq>
 8004060:	b108      	cbz	r0, 8004066 <__cvt+0x7a>
 8004062:	f8cd 901c 	str.w	r9, [sp, #28]
 8004066:	2230      	movs	r2, #48	@ 0x30
 8004068:	9b07      	ldr	r3, [sp, #28]
 800406a:	454b      	cmp	r3, r9
 800406c:	d31e      	bcc.n	80040ac <__cvt+0xc0>
 800406e:	4638      	mov	r0, r7
 8004070:	9b07      	ldr	r3, [sp, #28]
 8004072:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004074:	1bdb      	subs	r3, r3, r7
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	b008      	add	sp, #32
 800407a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800407e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004082:	eb00 0906 	add.w	r9, r0, r6
 8004086:	d1e5      	bne.n	8004054 <__cvt+0x68>
 8004088:	7803      	ldrb	r3, [r0, #0]
 800408a:	2b30      	cmp	r3, #48	@ 0x30
 800408c:	d10a      	bne.n	80040a4 <__cvt+0xb8>
 800408e:	2200      	movs	r2, #0
 8004090:	2300      	movs	r3, #0
 8004092:	4620      	mov	r0, r4
 8004094:	4629      	mov	r1, r5
 8004096:	f7fc fd3b 	bl	8000b10 <__aeabi_dcmpeq>
 800409a:	b918      	cbnz	r0, 80040a4 <__cvt+0xb8>
 800409c:	f1c6 0601 	rsb	r6, r6, #1
 80040a0:	f8ca 6000 	str.w	r6, [sl]
 80040a4:	f8da 3000 	ldr.w	r3, [sl]
 80040a8:	4499      	add	r9, r3
 80040aa:	e7d3      	b.n	8004054 <__cvt+0x68>
 80040ac:	1c59      	adds	r1, r3, #1
 80040ae:	9107      	str	r1, [sp, #28]
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e7d9      	b.n	8004068 <__cvt+0x7c>

080040b4 <__exponent>:
 80040b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040b6:	2900      	cmp	r1, #0
 80040b8:	bfb6      	itet	lt
 80040ba:	232d      	movlt	r3, #45	@ 0x2d
 80040bc:	232b      	movge	r3, #43	@ 0x2b
 80040be:	4249      	neglt	r1, r1
 80040c0:	2909      	cmp	r1, #9
 80040c2:	7002      	strb	r2, [r0, #0]
 80040c4:	7043      	strb	r3, [r0, #1]
 80040c6:	dd29      	ble.n	800411c <__exponent+0x68>
 80040c8:	f10d 0307 	add.w	r3, sp, #7
 80040cc:	461d      	mov	r5, r3
 80040ce:	270a      	movs	r7, #10
 80040d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80040d4:	461a      	mov	r2, r3
 80040d6:	fb07 1416 	mls	r4, r7, r6, r1
 80040da:	3430      	adds	r4, #48	@ 0x30
 80040dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80040e0:	460c      	mov	r4, r1
 80040e2:	2c63      	cmp	r4, #99	@ 0x63
 80040e4:	4631      	mov	r1, r6
 80040e6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80040ea:	dcf1      	bgt.n	80040d0 <__exponent+0x1c>
 80040ec:	3130      	adds	r1, #48	@ 0x30
 80040ee:	1e94      	subs	r4, r2, #2
 80040f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80040f4:	4623      	mov	r3, r4
 80040f6:	1c41      	adds	r1, r0, #1
 80040f8:	42ab      	cmp	r3, r5
 80040fa:	d30a      	bcc.n	8004112 <__exponent+0x5e>
 80040fc:	f10d 0309 	add.w	r3, sp, #9
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	42ac      	cmp	r4, r5
 8004104:	bf88      	it	hi
 8004106:	2300      	movhi	r3, #0
 8004108:	3302      	adds	r3, #2
 800410a:	4403      	add	r3, r0
 800410c:	1a18      	subs	r0, r3, r0
 800410e:	b003      	add	sp, #12
 8004110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004112:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004116:	f801 6f01 	strb.w	r6, [r1, #1]!
 800411a:	e7ed      	b.n	80040f8 <__exponent+0x44>
 800411c:	2330      	movs	r3, #48	@ 0x30
 800411e:	3130      	adds	r1, #48	@ 0x30
 8004120:	7083      	strb	r3, [r0, #2]
 8004122:	70c1      	strb	r1, [r0, #3]
 8004124:	1d03      	adds	r3, r0, #4
 8004126:	e7f1      	b.n	800410c <__exponent+0x58>

08004128 <_printf_float>:
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	b091      	sub	sp, #68	@ 0x44
 800412e:	460c      	mov	r4, r1
 8004130:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004134:	4616      	mov	r6, r2
 8004136:	461f      	mov	r7, r3
 8004138:	4605      	mov	r5, r0
 800413a:	f001 fd3b 	bl	8005bb4 <_localeconv_r>
 800413e:	6803      	ldr	r3, [r0, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	9308      	str	r3, [sp, #32]
 8004144:	f7fc f804 	bl	8000150 <strlen>
 8004148:	2300      	movs	r3, #0
 800414a:	930e      	str	r3, [sp, #56]	@ 0x38
 800414c:	f8d8 3000 	ldr.w	r3, [r8]
 8004150:	9009      	str	r0, [sp, #36]	@ 0x24
 8004152:	3307      	adds	r3, #7
 8004154:	f023 0307 	bic.w	r3, r3, #7
 8004158:	f103 0208 	add.w	r2, r3, #8
 800415c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004160:	f8d4 b000 	ldr.w	fp, [r4]
 8004164:	f8c8 2000 	str.w	r2, [r8]
 8004168:	e9d3 8900 	ldrd	r8, r9, [r3]
 800416c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004170:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004172:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004176:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800417a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800417e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004182:	4b9c      	ldr	r3, [pc, #624]	@ (80043f4 <_printf_float+0x2cc>)
 8004184:	f7fc fcf6 	bl	8000b74 <__aeabi_dcmpun>
 8004188:	bb70      	cbnz	r0, 80041e8 <_printf_float+0xc0>
 800418a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800418e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004192:	4b98      	ldr	r3, [pc, #608]	@ (80043f4 <_printf_float+0x2cc>)
 8004194:	f7fc fcd0 	bl	8000b38 <__aeabi_dcmple>
 8004198:	bb30      	cbnz	r0, 80041e8 <_printf_float+0xc0>
 800419a:	2200      	movs	r2, #0
 800419c:	2300      	movs	r3, #0
 800419e:	4640      	mov	r0, r8
 80041a0:	4649      	mov	r1, r9
 80041a2:	f7fc fcbf 	bl	8000b24 <__aeabi_dcmplt>
 80041a6:	b110      	cbz	r0, 80041ae <_printf_float+0x86>
 80041a8:	232d      	movs	r3, #45	@ 0x2d
 80041aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041ae:	4a92      	ldr	r2, [pc, #584]	@ (80043f8 <_printf_float+0x2d0>)
 80041b0:	4b92      	ldr	r3, [pc, #584]	@ (80043fc <_printf_float+0x2d4>)
 80041b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041b6:	bf94      	ite	ls
 80041b8:	4690      	movls	r8, r2
 80041ba:	4698      	movhi	r8, r3
 80041bc:	2303      	movs	r3, #3
 80041be:	f04f 0900 	mov.w	r9, #0
 80041c2:	6123      	str	r3, [r4, #16]
 80041c4:	f02b 0304 	bic.w	r3, fp, #4
 80041c8:	6023      	str	r3, [r4, #0]
 80041ca:	4633      	mov	r3, r6
 80041cc:	4621      	mov	r1, r4
 80041ce:	4628      	mov	r0, r5
 80041d0:	9700      	str	r7, [sp, #0]
 80041d2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80041d4:	f000 f9d4 	bl	8004580 <_printf_common>
 80041d8:	3001      	adds	r0, #1
 80041da:	f040 8090 	bne.w	80042fe <_printf_float+0x1d6>
 80041de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041e2:	b011      	add	sp, #68	@ 0x44
 80041e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e8:	4642      	mov	r2, r8
 80041ea:	464b      	mov	r3, r9
 80041ec:	4640      	mov	r0, r8
 80041ee:	4649      	mov	r1, r9
 80041f0:	f7fc fcc0 	bl	8000b74 <__aeabi_dcmpun>
 80041f4:	b148      	cbz	r0, 800420a <_printf_float+0xe2>
 80041f6:	464b      	mov	r3, r9
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bfb8      	it	lt
 80041fc:	232d      	movlt	r3, #45	@ 0x2d
 80041fe:	4a80      	ldr	r2, [pc, #512]	@ (8004400 <_printf_float+0x2d8>)
 8004200:	bfb8      	it	lt
 8004202:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004206:	4b7f      	ldr	r3, [pc, #508]	@ (8004404 <_printf_float+0x2dc>)
 8004208:	e7d3      	b.n	80041b2 <_printf_float+0x8a>
 800420a:	6863      	ldr	r3, [r4, #4]
 800420c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	d13f      	bne.n	8004294 <_printf_float+0x16c>
 8004214:	2306      	movs	r3, #6
 8004216:	6063      	str	r3, [r4, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	9206      	str	r2, [sp, #24]
 8004222:	aa0e      	add	r2, sp, #56	@ 0x38
 8004224:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004228:	aa0d      	add	r2, sp, #52	@ 0x34
 800422a:	9203      	str	r2, [sp, #12]
 800422c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004230:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004234:	6863      	ldr	r3, [r4, #4]
 8004236:	4642      	mov	r2, r8
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	4628      	mov	r0, r5
 800423c:	464b      	mov	r3, r9
 800423e:	910a      	str	r1, [sp, #40]	@ 0x28
 8004240:	f7ff fed4 	bl	8003fec <__cvt>
 8004244:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004246:	4680      	mov	r8, r0
 8004248:	2947      	cmp	r1, #71	@ 0x47
 800424a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800424c:	d128      	bne.n	80042a0 <_printf_float+0x178>
 800424e:	1cc8      	adds	r0, r1, #3
 8004250:	db02      	blt.n	8004258 <_printf_float+0x130>
 8004252:	6863      	ldr	r3, [r4, #4]
 8004254:	4299      	cmp	r1, r3
 8004256:	dd40      	ble.n	80042da <_printf_float+0x1b2>
 8004258:	f1aa 0a02 	sub.w	sl, sl, #2
 800425c:	fa5f fa8a 	uxtb.w	sl, sl
 8004260:	4652      	mov	r2, sl
 8004262:	3901      	subs	r1, #1
 8004264:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004268:	910d      	str	r1, [sp, #52]	@ 0x34
 800426a:	f7ff ff23 	bl	80040b4 <__exponent>
 800426e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004270:	4681      	mov	r9, r0
 8004272:	1813      	adds	r3, r2, r0
 8004274:	2a01      	cmp	r2, #1
 8004276:	6123      	str	r3, [r4, #16]
 8004278:	dc02      	bgt.n	8004280 <_printf_float+0x158>
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	07d2      	lsls	r2, r2, #31
 800427e:	d501      	bpl.n	8004284 <_printf_float+0x15c>
 8004280:	3301      	adds	r3, #1
 8004282:	6123      	str	r3, [r4, #16]
 8004284:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004288:	2b00      	cmp	r3, #0
 800428a:	d09e      	beq.n	80041ca <_printf_float+0xa2>
 800428c:	232d      	movs	r3, #45	@ 0x2d
 800428e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004292:	e79a      	b.n	80041ca <_printf_float+0xa2>
 8004294:	2947      	cmp	r1, #71	@ 0x47
 8004296:	d1bf      	bne.n	8004218 <_printf_float+0xf0>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1bd      	bne.n	8004218 <_printf_float+0xf0>
 800429c:	2301      	movs	r3, #1
 800429e:	e7ba      	b.n	8004216 <_printf_float+0xee>
 80042a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80042a4:	d9dc      	bls.n	8004260 <_printf_float+0x138>
 80042a6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80042aa:	d118      	bne.n	80042de <_printf_float+0x1b6>
 80042ac:	2900      	cmp	r1, #0
 80042ae:	6863      	ldr	r3, [r4, #4]
 80042b0:	dd0b      	ble.n	80042ca <_printf_float+0x1a2>
 80042b2:	6121      	str	r1, [r4, #16]
 80042b4:	b913      	cbnz	r3, 80042bc <_printf_float+0x194>
 80042b6:	6822      	ldr	r2, [r4, #0]
 80042b8:	07d0      	lsls	r0, r2, #31
 80042ba:	d502      	bpl.n	80042c2 <_printf_float+0x19a>
 80042bc:	3301      	adds	r3, #1
 80042be:	440b      	add	r3, r1
 80042c0:	6123      	str	r3, [r4, #16]
 80042c2:	f04f 0900 	mov.w	r9, #0
 80042c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80042c8:	e7dc      	b.n	8004284 <_printf_float+0x15c>
 80042ca:	b913      	cbnz	r3, 80042d2 <_printf_float+0x1aa>
 80042cc:	6822      	ldr	r2, [r4, #0]
 80042ce:	07d2      	lsls	r2, r2, #31
 80042d0:	d501      	bpl.n	80042d6 <_printf_float+0x1ae>
 80042d2:	3302      	adds	r3, #2
 80042d4:	e7f4      	b.n	80042c0 <_printf_float+0x198>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e7f2      	b.n	80042c0 <_printf_float+0x198>
 80042da:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80042de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80042e0:	4299      	cmp	r1, r3
 80042e2:	db05      	blt.n	80042f0 <_printf_float+0x1c8>
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	6121      	str	r1, [r4, #16]
 80042e8:	07d8      	lsls	r0, r3, #31
 80042ea:	d5ea      	bpl.n	80042c2 <_printf_float+0x19a>
 80042ec:	1c4b      	adds	r3, r1, #1
 80042ee:	e7e7      	b.n	80042c0 <_printf_float+0x198>
 80042f0:	2900      	cmp	r1, #0
 80042f2:	bfcc      	ite	gt
 80042f4:	2201      	movgt	r2, #1
 80042f6:	f1c1 0202 	rsble	r2, r1, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	e7e0      	b.n	80042c0 <_printf_float+0x198>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	055a      	lsls	r2, r3, #21
 8004302:	d407      	bmi.n	8004314 <_printf_float+0x1ec>
 8004304:	6923      	ldr	r3, [r4, #16]
 8004306:	4642      	mov	r2, r8
 8004308:	4631      	mov	r1, r6
 800430a:	4628      	mov	r0, r5
 800430c:	47b8      	blx	r7
 800430e:	3001      	adds	r0, #1
 8004310:	d12b      	bne.n	800436a <_printf_float+0x242>
 8004312:	e764      	b.n	80041de <_printf_float+0xb6>
 8004314:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004318:	f240 80dc 	bls.w	80044d4 <_printf_float+0x3ac>
 800431c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004320:	2200      	movs	r2, #0
 8004322:	2300      	movs	r3, #0
 8004324:	f7fc fbf4 	bl	8000b10 <__aeabi_dcmpeq>
 8004328:	2800      	cmp	r0, #0
 800432a:	d033      	beq.n	8004394 <_printf_float+0x26c>
 800432c:	2301      	movs	r3, #1
 800432e:	4631      	mov	r1, r6
 8004330:	4628      	mov	r0, r5
 8004332:	4a35      	ldr	r2, [pc, #212]	@ (8004408 <_printf_float+0x2e0>)
 8004334:	47b8      	blx	r7
 8004336:	3001      	adds	r0, #1
 8004338:	f43f af51 	beq.w	80041de <_printf_float+0xb6>
 800433c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004340:	4543      	cmp	r3, r8
 8004342:	db02      	blt.n	800434a <_printf_float+0x222>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	07d8      	lsls	r0, r3, #31
 8004348:	d50f      	bpl.n	800436a <_printf_float+0x242>
 800434a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800434e:	4631      	mov	r1, r6
 8004350:	4628      	mov	r0, r5
 8004352:	47b8      	blx	r7
 8004354:	3001      	adds	r0, #1
 8004356:	f43f af42 	beq.w	80041de <_printf_float+0xb6>
 800435a:	f04f 0900 	mov.w	r9, #0
 800435e:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004362:	f104 0a1a 	add.w	sl, r4, #26
 8004366:	45c8      	cmp	r8, r9
 8004368:	dc09      	bgt.n	800437e <_printf_float+0x256>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	079b      	lsls	r3, r3, #30
 800436e:	f100 8102 	bmi.w	8004576 <_printf_float+0x44e>
 8004372:	68e0      	ldr	r0, [r4, #12]
 8004374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004376:	4298      	cmp	r0, r3
 8004378:	bfb8      	it	lt
 800437a:	4618      	movlt	r0, r3
 800437c:	e731      	b.n	80041e2 <_printf_float+0xba>
 800437e:	2301      	movs	r3, #1
 8004380:	4652      	mov	r2, sl
 8004382:	4631      	mov	r1, r6
 8004384:	4628      	mov	r0, r5
 8004386:	47b8      	blx	r7
 8004388:	3001      	adds	r0, #1
 800438a:	f43f af28 	beq.w	80041de <_printf_float+0xb6>
 800438e:	f109 0901 	add.w	r9, r9, #1
 8004392:	e7e8      	b.n	8004366 <_printf_float+0x23e>
 8004394:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004396:	2b00      	cmp	r3, #0
 8004398:	dc38      	bgt.n	800440c <_printf_float+0x2e4>
 800439a:	2301      	movs	r3, #1
 800439c:	4631      	mov	r1, r6
 800439e:	4628      	mov	r0, r5
 80043a0:	4a19      	ldr	r2, [pc, #100]	@ (8004408 <_printf_float+0x2e0>)
 80043a2:	47b8      	blx	r7
 80043a4:	3001      	adds	r0, #1
 80043a6:	f43f af1a 	beq.w	80041de <_printf_float+0xb6>
 80043aa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80043ae:	ea59 0303 	orrs.w	r3, r9, r3
 80043b2:	d102      	bne.n	80043ba <_printf_float+0x292>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	07d9      	lsls	r1, r3, #31
 80043b8:	d5d7      	bpl.n	800436a <_printf_float+0x242>
 80043ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b8      	blx	r7
 80043c4:	3001      	adds	r0, #1
 80043c6:	f43f af0a 	beq.w	80041de <_printf_float+0xb6>
 80043ca:	f04f 0a00 	mov.w	sl, #0
 80043ce:	f104 0b1a 	add.w	fp, r4, #26
 80043d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80043d4:	425b      	negs	r3, r3
 80043d6:	4553      	cmp	r3, sl
 80043d8:	dc01      	bgt.n	80043de <_printf_float+0x2b6>
 80043da:	464b      	mov	r3, r9
 80043dc:	e793      	b.n	8004306 <_printf_float+0x1de>
 80043de:	2301      	movs	r3, #1
 80043e0:	465a      	mov	r2, fp
 80043e2:	4631      	mov	r1, r6
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b8      	blx	r7
 80043e8:	3001      	adds	r0, #1
 80043ea:	f43f aef8 	beq.w	80041de <_printf_float+0xb6>
 80043ee:	f10a 0a01 	add.w	sl, sl, #1
 80043f2:	e7ee      	b.n	80043d2 <_printf_float+0x2aa>
 80043f4:	7fefffff 	.word	0x7fefffff
 80043f8:	08008722 	.word	0x08008722
 80043fc:	08008726 	.word	0x08008726
 8004400:	0800872a 	.word	0x0800872a
 8004404:	0800872e 	.word	0x0800872e
 8004408:	08008732 	.word	0x08008732
 800440c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800440e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004412:	4553      	cmp	r3, sl
 8004414:	bfa8      	it	ge
 8004416:	4653      	movge	r3, sl
 8004418:	2b00      	cmp	r3, #0
 800441a:	4699      	mov	r9, r3
 800441c:	dc36      	bgt.n	800448c <_printf_float+0x364>
 800441e:	f04f 0b00 	mov.w	fp, #0
 8004422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004426:	f104 021a 	add.w	r2, r4, #26
 800442a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800442c:	930a      	str	r3, [sp, #40]	@ 0x28
 800442e:	eba3 0309 	sub.w	r3, r3, r9
 8004432:	455b      	cmp	r3, fp
 8004434:	dc31      	bgt.n	800449a <_printf_float+0x372>
 8004436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004438:	459a      	cmp	sl, r3
 800443a:	dc3a      	bgt.n	80044b2 <_printf_float+0x38a>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	07da      	lsls	r2, r3, #31
 8004440:	d437      	bmi.n	80044b2 <_printf_float+0x38a>
 8004442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004444:	ebaa 0903 	sub.w	r9, sl, r3
 8004448:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800444a:	ebaa 0303 	sub.w	r3, sl, r3
 800444e:	4599      	cmp	r9, r3
 8004450:	bfa8      	it	ge
 8004452:	4699      	movge	r9, r3
 8004454:	f1b9 0f00 	cmp.w	r9, #0
 8004458:	dc33      	bgt.n	80044c2 <_printf_float+0x39a>
 800445a:	f04f 0800 	mov.w	r8, #0
 800445e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004462:	f104 0b1a 	add.w	fp, r4, #26
 8004466:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004468:	ebaa 0303 	sub.w	r3, sl, r3
 800446c:	eba3 0309 	sub.w	r3, r3, r9
 8004470:	4543      	cmp	r3, r8
 8004472:	f77f af7a 	ble.w	800436a <_printf_float+0x242>
 8004476:	2301      	movs	r3, #1
 8004478:	465a      	mov	r2, fp
 800447a:	4631      	mov	r1, r6
 800447c:	4628      	mov	r0, r5
 800447e:	47b8      	blx	r7
 8004480:	3001      	adds	r0, #1
 8004482:	f43f aeac 	beq.w	80041de <_printf_float+0xb6>
 8004486:	f108 0801 	add.w	r8, r8, #1
 800448a:	e7ec      	b.n	8004466 <_printf_float+0x33e>
 800448c:	4642      	mov	r2, r8
 800448e:	4631      	mov	r1, r6
 8004490:	4628      	mov	r0, r5
 8004492:	47b8      	blx	r7
 8004494:	3001      	adds	r0, #1
 8004496:	d1c2      	bne.n	800441e <_printf_float+0x2f6>
 8004498:	e6a1      	b.n	80041de <_printf_float+0xb6>
 800449a:	2301      	movs	r3, #1
 800449c:	4631      	mov	r1, r6
 800449e:	4628      	mov	r0, r5
 80044a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80044a2:	47b8      	blx	r7
 80044a4:	3001      	adds	r0, #1
 80044a6:	f43f ae9a 	beq.w	80041de <_printf_float+0xb6>
 80044aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044ac:	f10b 0b01 	add.w	fp, fp, #1
 80044b0:	e7bb      	b.n	800442a <_printf_float+0x302>
 80044b2:	4631      	mov	r1, r6
 80044b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044b8:	4628      	mov	r0, r5
 80044ba:	47b8      	blx	r7
 80044bc:	3001      	adds	r0, #1
 80044be:	d1c0      	bne.n	8004442 <_printf_float+0x31a>
 80044c0:	e68d      	b.n	80041de <_printf_float+0xb6>
 80044c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044c4:	464b      	mov	r3, r9
 80044c6:	4631      	mov	r1, r6
 80044c8:	4628      	mov	r0, r5
 80044ca:	4442      	add	r2, r8
 80044cc:	47b8      	blx	r7
 80044ce:	3001      	adds	r0, #1
 80044d0:	d1c3      	bne.n	800445a <_printf_float+0x332>
 80044d2:	e684      	b.n	80041de <_printf_float+0xb6>
 80044d4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80044d8:	f1ba 0f01 	cmp.w	sl, #1
 80044dc:	dc01      	bgt.n	80044e2 <_printf_float+0x3ba>
 80044de:	07db      	lsls	r3, r3, #31
 80044e0:	d536      	bpl.n	8004550 <_printf_float+0x428>
 80044e2:	2301      	movs	r3, #1
 80044e4:	4642      	mov	r2, r8
 80044e6:	4631      	mov	r1, r6
 80044e8:	4628      	mov	r0, r5
 80044ea:	47b8      	blx	r7
 80044ec:	3001      	adds	r0, #1
 80044ee:	f43f ae76 	beq.w	80041de <_printf_float+0xb6>
 80044f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	f43f ae6e 	beq.w	80041de <_printf_float+0xb6>
 8004502:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004506:	2200      	movs	r2, #0
 8004508:	2300      	movs	r3, #0
 800450a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800450e:	f7fc faff 	bl	8000b10 <__aeabi_dcmpeq>
 8004512:	b9c0      	cbnz	r0, 8004546 <_printf_float+0x41e>
 8004514:	4653      	mov	r3, sl
 8004516:	f108 0201 	add.w	r2, r8, #1
 800451a:	4631      	mov	r1, r6
 800451c:	4628      	mov	r0, r5
 800451e:	47b8      	blx	r7
 8004520:	3001      	adds	r0, #1
 8004522:	d10c      	bne.n	800453e <_printf_float+0x416>
 8004524:	e65b      	b.n	80041de <_printf_float+0xb6>
 8004526:	2301      	movs	r3, #1
 8004528:	465a      	mov	r2, fp
 800452a:	4631      	mov	r1, r6
 800452c:	4628      	mov	r0, r5
 800452e:	47b8      	blx	r7
 8004530:	3001      	adds	r0, #1
 8004532:	f43f ae54 	beq.w	80041de <_printf_float+0xb6>
 8004536:	f108 0801 	add.w	r8, r8, #1
 800453a:	45d0      	cmp	r8, sl
 800453c:	dbf3      	blt.n	8004526 <_printf_float+0x3fe>
 800453e:	464b      	mov	r3, r9
 8004540:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004544:	e6e0      	b.n	8004308 <_printf_float+0x1e0>
 8004546:	f04f 0800 	mov.w	r8, #0
 800454a:	f104 0b1a 	add.w	fp, r4, #26
 800454e:	e7f4      	b.n	800453a <_printf_float+0x412>
 8004550:	2301      	movs	r3, #1
 8004552:	4642      	mov	r2, r8
 8004554:	e7e1      	b.n	800451a <_printf_float+0x3f2>
 8004556:	2301      	movs	r3, #1
 8004558:	464a      	mov	r2, r9
 800455a:	4631      	mov	r1, r6
 800455c:	4628      	mov	r0, r5
 800455e:	47b8      	blx	r7
 8004560:	3001      	adds	r0, #1
 8004562:	f43f ae3c 	beq.w	80041de <_printf_float+0xb6>
 8004566:	f108 0801 	add.w	r8, r8, #1
 800456a:	68e3      	ldr	r3, [r4, #12]
 800456c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800456e:	1a5b      	subs	r3, r3, r1
 8004570:	4543      	cmp	r3, r8
 8004572:	dcf0      	bgt.n	8004556 <_printf_float+0x42e>
 8004574:	e6fd      	b.n	8004372 <_printf_float+0x24a>
 8004576:	f04f 0800 	mov.w	r8, #0
 800457a:	f104 0919 	add.w	r9, r4, #25
 800457e:	e7f4      	b.n	800456a <_printf_float+0x442>

08004580 <_printf_common>:
 8004580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004584:	4616      	mov	r6, r2
 8004586:	4698      	mov	r8, r3
 8004588:	688a      	ldr	r2, [r1, #8]
 800458a:	690b      	ldr	r3, [r1, #16]
 800458c:	4607      	mov	r7, r0
 800458e:	4293      	cmp	r3, r2
 8004590:	bfb8      	it	lt
 8004592:	4613      	movlt	r3, r2
 8004594:	6033      	str	r3, [r6, #0]
 8004596:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800459a:	460c      	mov	r4, r1
 800459c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045a0:	b10a      	cbz	r2, 80045a6 <_printf_common+0x26>
 80045a2:	3301      	adds	r3, #1
 80045a4:	6033      	str	r3, [r6, #0]
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	0699      	lsls	r1, r3, #26
 80045aa:	bf42      	ittt	mi
 80045ac:	6833      	ldrmi	r3, [r6, #0]
 80045ae:	3302      	addmi	r3, #2
 80045b0:	6033      	strmi	r3, [r6, #0]
 80045b2:	6825      	ldr	r5, [r4, #0]
 80045b4:	f015 0506 	ands.w	r5, r5, #6
 80045b8:	d106      	bne.n	80045c8 <_printf_common+0x48>
 80045ba:	f104 0a19 	add.w	sl, r4, #25
 80045be:	68e3      	ldr	r3, [r4, #12]
 80045c0:	6832      	ldr	r2, [r6, #0]
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	42ab      	cmp	r3, r5
 80045c6:	dc2b      	bgt.n	8004620 <_printf_common+0xa0>
 80045c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	3b00      	subs	r3, #0
 80045d0:	bf18      	it	ne
 80045d2:	2301      	movne	r3, #1
 80045d4:	0692      	lsls	r2, r2, #26
 80045d6:	d430      	bmi.n	800463a <_printf_common+0xba>
 80045d8:	4641      	mov	r1, r8
 80045da:	4638      	mov	r0, r7
 80045dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045e0:	47c8      	blx	r9
 80045e2:	3001      	adds	r0, #1
 80045e4:	d023      	beq.n	800462e <_printf_common+0xae>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	6922      	ldr	r2, [r4, #16]
 80045ea:	f003 0306 	and.w	r3, r3, #6
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	bf14      	ite	ne
 80045f2:	2500      	movne	r5, #0
 80045f4:	6833      	ldreq	r3, [r6, #0]
 80045f6:	f04f 0600 	mov.w	r6, #0
 80045fa:	bf08      	it	eq
 80045fc:	68e5      	ldreq	r5, [r4, #12]
 80045fe:	f104 041a 	add.w	r4, r4, #26
 8004602:	bf08      	it	eq
 8004604:	1aed      	subeq	r5, r5, r3
 8004606:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800460a:	bf08      	it	eq
 800460c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004610:	4293      	cmp	r3, r2
 8004612:	bfc4      	itt	gt
 8004614:	1a9b      	subgt	r3, r3, r2
 8004616:	18ed      	addgt	r5, r5, r3
 8004618:	42b5      	cmp	r5, r6
 800461a:	d11a      	bne.n	8004652 <_printf_common+0xd2>
 800461c:	2000      	movs	r0, #0
 800461e:	e008      	b.n	8004632 <_printf_common+0xb2>
 8004620:	2301      	movs	r3, #1
 8004622:	4652      	mov	r2, sl
 8004624:	4641      	mov	r1, r8
 8004626:	4638      	mov	r0, r7
 8004628:	47c8      	blx	r9
 800462a:	3001      	adds	r0, #1
 800462c:	d103      	bne.n	8004636 <_printf_common+0xb6>
 800462e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004636:	3501      	adds	r5, #1
 8004638:	e7c1      	b.n	80045be <_printf_common+0x3e>
 800463a:	2030      	movs	r0, #48	@ 0x30
 800463c:	18e1      	adds	r1, r4, r3
 800463e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004648:	4422      	add	r2, r4
 800464a:	3302      	adds	r3, #2
 800464c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004650:	e7c2      	b.n	80045d8 <_printf_common+0x58>
 8004652:	2301      	movs	r3, #1
 8004654:	4622      	mov	r2, r4
 8004656:	4641      	mov	r1, r8
 8004658:	4638      	mov	r0, r7
 800465a:	47c8      	blx	r9
 800465c:	3001      	adds	r0, #1
 800465e:	d0e6      	beq.n	800462e <_printf_common+0xae>
 8004660:	3601      	adds	r6, #1
 8004662:	e7d9      	b.n	8004618 <_printf_common+0x98>

08004664 <_printf_i>:
 8004664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004668:	7e0f      	ldrb	r7, [r1, #24]
 800466a:	4691      	mov	r9, r2
 800466c:	2f78      	cmp	r7, #120	@ 0x78
 800466e:	4680      	mov	r8, r0
 8004670:	460c      	mov	r4, r1
 8004672:	469a      	mov	sl, r3
 8004674:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004676:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800467a:	d807      	bhi.n	800468c <_printf_i+0x28>
 800467c:	2f62      	cmp	r7, #98	@ 0x62
 800467e:	d80a      	bhi.n	8004696 <_printf_i+0x32>
 8004680:	2f00      	cmp	r7, #0
 8004682:	f000 80d3 	beq.w	800482c <_printf_i+0x1c8>
 8004686:	2f58      	cmp	r7, #88	@ 0x58
 8004688:	f000 80ba 	beq.w	8004800 <_printf_i+0x19c>
 800468c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004690:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004694:	e03a      	b.n	800470c <_printf_i+0xa8>
 8004696:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800469a:	2b15      	cmp	r3, #21
 800469c:	d8f6      	bhi.n	800468c <_printf_i+0x28>
 800469e:	a101      	add	r1, pc, #4	@ (adr r1, 80046a4 <_printf_i+0x40>)
 80046a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046a4:	080046fd 	.word	0x080046fd
 80046a8:	08004711 	.word	0x08004711
 80046ac:	0800468d 	.word	0x0800468d
 80046b0:	0800468d 	.word	0x0800468d
 80046b4:	0800468d 	.word	0x0800468d
 80046b8:	0800468d 	.word	0x0800468d
 80046bc:	08004711 	.word	0x08004711
 80046c0:	0800468d 	.word	0x0800468d
 80046c4:	0800468d 	.word	0x0800468d
 80046c8:	0800468d 	.word	0x0800468d
 80046cc:	0800468d 	.word	0x0800468d
 80046d0:	08004813 	.word	0x08004813
 80046d4:	0800473b 	.word	0x0800473b
 80046d8:	080047cd 	.word	0x080047cd
 80046dc:	0800468d 	.word	0x0800468d
 80046e0:	0800468d 	.word	0x0800468d
 80046e4:	08004835 	.word	0x08004835
 80046e8:	0800468d 	.word	0x0800468d
 80046ec:	0800473b 	.word	0x0800473b
 80046f0:	0800468d 	.word	0x0800468d
 80046f4:	0800468d 	.word	0x0800468d
 80046f8:	080047d5 	.word	0x080047d5
 80046fc:	6833      	ldr	r3, [r6, #0]
 80046fe:	1d1a      	adds	r2, r3, #4
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6032      	str	r2, [r6, #0]
 8004704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004708:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800470c:	2301      	movs	r3, #1
 800470e:	e09e      	b.n	800484e <_printf_i+0x1ea>
 8004710:	6833      	ldr	r3, [r6, #0]
 8004712:	6820      	ldr	r0, [r4, #0]
 8004714:	1d19      	adds	r1, r3, #4
 8004716:	6031      	str	r1, [r6, #0]
 8004718:	0606      	lsls	r6, r0, #24
 800471a:	d501      	bpl.n	8004720 <_printf_i+0xbc>
 800471c:	681d      	ldr	r5, [r3, #0]
 800471e:	e003      	b.n	8004728 <_printf_i+0xc4>
 8004720:	0645      	lsls	r5, r0, #25
 8004722:	d5fb      	bpl.n	800471c <_printf_i+0xb8>
 8004724:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004728:	2d00      	cmp	r5, #0
 800472a:	da03      	bge.n	8004734 <_printf_i+0xd0>
 800472c:	232d      	movs	r3, #45	@ 0x2d
 800472e:	426d      	negs	r5, r5
 8004730:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004734:	230a      	movs	r3, #10
 8004736:	4859      	ldr	r0, [pc, #356]	@ (800489c <_printf_i+0x238>)
 8004738:	e011      	b.n	800475e <_printf_i+0xfa>
 800473a:	6821      	ldr	r1, [r4, #0]
 800473c:	6833      	ldr	r3, [r6, #0]
 800473e:	0608      	lsls	r0, r1, #24
 8004740:	f853 5b04 	ldr.w	r5, [r3], #4
 8004744:	d402      	bmi.n	800474c <_printf_i+0xe8>
 8004746:	0649      	lsls	r1, r1, #25
 8004748:	bf48      	it	mi
 800474a:	b2ad      	uxthmi	r5, r5
 800474c:	2f6f      	cmp	r7, #111	@ 0x6f
 800474e:	6033      	str	r3, [r6, #0]
 8004750:	bf14      	ite	ne
 8004752:	230a      	movne	r3, #10
 8004754:	2308      	moveq	r3, #8
 8004756:	4851      	ldr	r0, [pc, #324]	@ (800489c <_printf_i+0x238>)
 8004758:	2100      	movs	r1, #0
 800475a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800475e:	6866      	ldr	r6, [r4, #4]
 8004760:	2e00      	cmp	r6, #0
 8004762:	bfa8      	it	ge
 8004764:	6821      	ldrge	r1, [r4, #0]
 8004766:	60a6      	str	r6, [r4, #8]
 8004768:	bfa4      	itt	ge
 800476a:	f021 0104 	bicge.w	r1, r1, #4
 800476e:	6021      	strge	r1, [r4, #0]
 8004770:	b90d      	cbnz	r5, 8004776 <_printf_i+0x112>
 8004772:	2e00      	cmp	r6, #0
 8004774:	d04b      	beq.n	800480e <_printf_i+0x1aa>
 8004776:	4616      	mov	r6, r2
 8004778:	fbb5 f1f3 	udiv	r1, r5, r3
 800477c:	fb03 5711 	mls	r7, r3, r1, r5
 8004780:	5dc7      	ldrb	r7, [r0, r7]
 8004782:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004786:	462f      	mov	r7, r5
 8004788:	42bb      	cmp	r3, r7
 800478a:	460d      	mov	r5, r1
 800478c:	d9f4      	bls.n	8004778 <_printf_i+0x114>
 800478e:	2b08      	cmp	r3, #8
 8004790:	d10b      	bne.n	80047aa <_printf_i+0x146>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	07df      	lsls	r7, r3, #31
 8004796:	d508      	bpl.n	80047aa <_printf_i+0x146>
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	6861      	ldr	r1, [r4, #4]
 800479c:	4299      	cmp	r1, r3
 800479e:	bfde      	ittt	le
 80047a0:	2330      	movle	r3, #48	@ 0x30
 80047a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047a6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80047aa:	1b92      	subs	r2, r2, r6
 80047ac:	6122      	str	r2, [r4, #16]
 80047ae:	464b      	mov	r3, r9
 80047b0:	4621      	mov	r1, r4
 80047b2:	4640      	mov	r0, r8
 80047b4:	f8cd a000 	str.w	sl, [sp]
 80047b8:	aa03      	add	r2, sp, #12
 80047ba:	f7ff fee1 	bl	8004580 <_printf_common>
 80047be:	3001      	adds	r0, #1
 80047c0:	d14a      	bne.n	8004858 <_printf_i+0x1f4>
 80047c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047c6:	b004      	add	sp, #16
 80047c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	f043 0320 	orr.w	r3, r3, #32
 80047d2:	6023      	str	r3, [r4, #0]
 80047d4:	2778      	movs	r7, #120	@ 0x78
 80047d6:	4832      	ldr	r0, [pc, #200]	@ (80048a0 <_printf_i+0x23c>)
 80047d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	6831      	ldr	r1, [r6, #0]
 80047e0:	061f      	lsls	r7, r3, #24
 80047e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80047e6:	d402      	bmi.n	80047ee <_printf_i+0x18a>
 80047e8:	065f      	lsls	r7, r3, #25
 80047ea:	bf48      	it	mi
 80047ec:	b2ad      	uxthmi	r5, r5
 80047ee:	6031      	str	r1, [r6, #0]
 80047f0:	07d9      	lsls	r1, r3, #31
 80047f2:	bf44      	itt	mi
 80047f4:	f043 0320 	orrmi.w	r3, r3, #32
 80047f8:	6023      	strmi	r3, [r4, #0]
 80047fa:	b11d      	cbz	r5, 8004804 <_printf_i+0x1a0>
 80047fc:	2310      	movs	r3, #16
 80047fe:	e7ab      	b.n	8004758 <_printf_i+0xf4>
 8004800:	4826      	ldr	r0, [pc, #152]	@ (800489c <_printf_i+0x238>)
 8004802:	e7e9      	b.n	80047d8 <_printf_i+0x174>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	f023 0320 	bic.w	r3, r3, #32
 800480a:	6023      	str	r3, [r4, #0]
 800480c:	e7f6      	b.n	80047fc <_printf_i+0x198>
 800480e:	4616      	mov	r6, r2
 8004810:	e7bd      	b.n	800478e <_printf_i+0x12a>
 8004812:	6833      	ldr	r3, [r6, #0]
 8004814:	6825      	ldr	r5, [r4, #0]
 8004816:	1d18      	adds	r0, r3, #4
 8004818:	6961      	ldr	r1, [r4, #20]
 800481a:	6030      	str	r0, [r6, #0]
 800481c:	062e      	lsls	r6, r5, #24
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	d501      	bpl.n	8004826 <_printf_i+0x1c2>
 8004822:	6019      	str	r1, [r3, #0]
 8004824:	e002      	b.n	800482c <_printf_i+0x1c8>
 8004826:	0668      	lsls	r0, r5, #25
 8004828:	d5fb      	bpl.n	8004822 <_printf_i+0x1be>
 800482a:	8019      	strh	r1, [r3, #0]
 800482c:	2300      	movs	r3, #0
 800482e:	4616      	mov	r6, r2
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	e7bc      	b.n	80047ae <_printf_i+0x14a>
 8004834:	6833      	ldr	r3, [r6, #0]
 8004836:	2100      	movs	r1, #0
 8004838:	1d1a      	adds	r2, r3, #4
 800483a:	6032      	str	r2, [r6, #0]
 800483c:	681e      	ldr	r6, [r3, #0]
 800483e:	6862      	ldr	r2, [r4, #4]
 8004840:	4630      	mov	r0, r6
 8004842:	f001 f9e8 	bl	8005c16 <memchr>
 8004846:	b108      	cbz	r0, 800484c <_printf_i+0x1e8>
 8004848:	1b80      	subs	r0, r0, r6
 800484a:	6060      	str	r0, [r4, #4]
 800484c:	6863      	ldr	r3, [r4, #4]
 800484e:	6123      	str	r3, [r4, #16]
 8004850:	2300      	movs	r3, #0
 8004852:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004856:	e7aa      	b.n	80047ae <_printf_i+0x14a>
 8004858:	4632      	mov	r2, r6
 800485a:	4649      	mov	r1, r9
 800485c:	4640      	mov	r0, r8
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	47d0      	blx	sl
 8004862:	3001      	adds	r0, #1
 8004864:	d0ad      	beq.n	80047c2 <_printf_i+0x15e>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	079b      	lsls	r3, r3, #30
 800486a:	d413      	bmi.n	8004894 <_printf_i+0x230>
 800486c:	68e0      	ldr	r0, [r4, #12]
 800486e:	9b03      	ldr	r3, [sp, #12]
 8004870:	4298      	cmp	r0, r3
 8004872:	bfb8      	it	lt
 8004874:	4618      	movlt	r0, r3
 8004876:	e7a6      	b.n	80047c6 <_printf_i+0x162>
 8004878:	2301      	movs	r3, #1
 800487a:	4632      	mov	r2, r6
 800487c:	4649      	mov	r1, r9
 800487e:	4640      	mov	r0, r8
 8004880:	47d0      	blx	sl
 8004882:	3001      	adds	r0, #1
 8004884:	d09d      	beq.n	80047c2 <_printf_i+0x15e>
 8004886:	3501      	adds	r5, #1
 8004888:	68e3      	ldr	r3, [r4, #12]
 800488a:	9903      	ldr	r1, [sp, #12]
 800488c:	1a5b      	subs	r3, r3, r1
 800488e:	42ab      	cmp	r3, r5
 8004890:	dcf2      	bgt.n	8004878 <_printf_i+0x214>
 8004892:	e7eb      	b.n	800486c <_printf_i+0x208>
 8004894:	2500      	movs	r5, #0
 8004896:	f104 0619 	add.w	r6, r4, #25
 800489a:	e7f5      	b.n	8004888 <_printf_i+0x224>
 800489c:	08008734 	.word	0x08008734
 80048a0:	08008745 	.word	0x08008745

080048a4 <_scanf_float>:
 80048a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a8:	b087      	sub	sp, #28
 80048aa:	9303      	str	r3, [sp, #12]
 80048ac:	688b      	ldr	r3, [r1, #8]
 80048ae:	4617      	mov	r7, r2
 80048b0:	1e5a      	subs	r2, r3, #1
 80048b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80048b6:	bf82      	ittt	hi
 80048b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80048bc:	eb03 0b05 	addhi.w	fp, r3, r5
 80048c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80048c4:	460a      	mov	r2, r1
 80048c6:	f04f 0500 	mov.w	r5, #0
 80048ca:	bf88      	it	hi
 80048cc:	608b      	strhi	r3, [r1, #8]
 80048ce:	680b      	ldr	r3, [r1, #0]
 80048d0:	4680      	mov	r8, r0
 80048d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80048d6:	f842 3b1c 	str.w	r3, [r2], #28
 80048da:	460c      	mov	r4, r1
 80048dc:	bf98      	it	ls
 80048de:	f04f 0b00 	movls.w	fp, #0
 80048e2:	4616      	mov	r6, r2
 80048e4:	46aa      	mov	sl, r5
 80048e6:	46a9      	mov	r9, r5
 80048e8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80048ec:	9201      	str	r2, [sp, #4]
 80048ee:	9502      	str	r5, [sp, #8]
 80048f0:	68a2      	ldr	r2, [r4, #8]
 80048f2:	b152      	cbz	r2, 800490a <_scanf_float+0x66>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b4e      	cmp	r3, #78	@ 0x4e
 80048fa:	d865      	bhi.n	80049c8 <_scanf_float+0x124>
 80048fc:	2b40      	cmp	r3, #64	@ 0x40
 80048fe:	d83d      	bhi.n	800497c <_scanf_float+0xd8>
 8004900:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004904:	b2c8      	uxtb	r0, r1
 8004906:	280e      	cmp	r0, #14
 8004908:	d93b      	bls.n	8004982 <_scanf_float+0xde>
 800490a:	f1b9 0f00 	cmp.w	r9, #0
 800490e:	d003      	beq.n	8004918 <_scanf_float+0x74>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800491c:	f1ba 0f01 	cmp.w	sl, #1
 8004920:	f200 8118 	bhi.w	8004b54 <_scanf_float+0x2b0>
 8004924:	9b01      	ldr	r3, [sp, #4]
 8004926:	429e      	cmp	r6, r3
 8004928:	f200 8109 	bhi.w	8004b3e <_scanf_float+0x29a>
 800492c:	2001      	movs	r0, #1
 800492e:	b007      	add	sp, #28
 8004930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004934:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004938:	2a0d      	cmp	r2, #13
 800493a:	d8e6      	bhi.n	800490a <_scanf_float+0x66>
 800493c:	a101      	add	r1, pc, #4	@ (adr r1, 8004944 <_scanf_float+0xa0>)
 800493e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004942:	bf00      	nop
 8004944:	08004a8b 	.word	0x08004a8b
 8004948:	0800490b 	.word	0x0800490b
 800494c:	0800490b 	.word	0x0800490b
 8004950:	0800490b 	.word	0x0800490b
 8004954:	08004aeb 	.word	0x08004aeb
 8004958:	08004ac3 	.word	0x08004ac3
 800495c:	0800490b 	.word	0x0800490b
 8004960:	0800490b 	.word	0x0800490b
 8004964:	08004a99 	.word	0x08004a99
 8004968:	0800490b 	.word	0x0800490b
 800496c:	0800490b 	.word	0x0800490b
 8004970:	0800490b 	.word	0x0800490b
 8004974:	0800490b 	.word	0x0800490b
 8004978:	08004a51 	.word	0x08004a51
 800497c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004980:	e7da      	b.n	8004938 <_scanf_float+0x94>
 8004982:	290e      	cmp	r1, #14
 8004984:	d8c1      	bhi.n	800490a <_scanf_float+0x66>
 8004986:	a001      	add	r0, pc, #4	@ (adr r0, 800498c <_scanf_float+0xe8>)
 8004988:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800498c:	08004a41 	.word	0x08004a41
 8004990:	0800490b 	.word	0x0800490b
 8004994:	08004a41 	.word	0x08004a41
 8004998:	08004ad7 	.word	0x08004ad7
 800499c:	0800490b 	.word	0x0800490b
 80049a0:	080049e9 	.word	0x080049e9
 80049a4:	08004a27 	.word	0x08004a27
 80049a8:	08004a27 	.word	0x08004a27
 80049ac:	08004a27 	.word	0x08004a27
 80049b0:	08004a27 	.word	0x08004a27
 80049b4:	08004a27 	.word	0x08004a27
 80049b8:	08004a27 	.word	0x08004a27
 80049bc:	08004a27 	.word	0x08004a27
 80049c0:	08004a27 	.word	0x08004a27
 80049c4:	08004a27 	.word	0x08004a27
 80049c8:	2b6e      	cmp	r3, #110	@ 0x6e
 80049ca:	d809      	bhi.n	80049e0 <_scanf_float+0x13c>
 80049cc:	2b60      	cmp	r3, #96	@ 0x60
 80049ce:	d8b1      	bhi.n	8004934 <_scanf_float+0x90>
 80049d0:	2b54      	cmp	r3, #84	@ 0x54
 80049d2:	d07b      	beq.n	8004acc <_scanf_float+0x228>
 80049d4:	2b59      	cmp	r3, #89	@ 0x59
 80049d6:	d198      	bne.n	800490a <_scanf_float+0x66>
 80049d8:	2d07      	cmp	r5, #7
 80049da:	d196      	bne.n	800490a <_scanf_float+0x66>
 80049dc:	2508      	movs	r5, #8
 80049de:	e02c      	b.n	8004a3a <_scanf_float+0x196>
 80049e0:	2b74      	cmp	r3, #116	@ 0x74
 80049e2:	d073      	beq.n	8004acc <_scanf_float+0x228>
 80049e4:	2b79      	cmp	r3, #121	@ 0x79
 80049e6:	e7f6      	b.n	80049d6 <_scanf_float+0x132>
 80049e8:	6821      	ldr	r1, [r4, #0]
 80049ea:	05c8      	lsls	r0, r1, #23
 80049ec:	d51b      	bpl.n	8004a26 <_scanf_float+0x182>
 80049ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80049f2:	6021      	str	r1, [r4, #0]
 80049f4:	f109 0901 	add.w	r9, r9, #1
 80049f8:	f1bb 0f00 	cmp.w	fp, #0
 80049fc:	d003      	beq.n	8004a06 <_scanf_float+0x162>
 80049fe:	3201      	adds	r2, #1
 8004a00:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004a04:	60a2      	str	r2, [r4, #8]
 8004a06:	68a3      	ldr	r3, [r4, #8]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	60a3      	str	r3, [r4, #8]
 8004a0c:	6923      	ldr	r3, [r4, #16]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	6123      	str	r3, [r4, #16]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	f340 8087 	ble.w	8004b2c <_scanf_float+0x288>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	e764      	b.n	80048f0 <_scanf_float+0x4c>
 8004a26:	eb1a 0105 	adds.w	r1, sl, r5
 8004a2a:	f47f af6e 	bne.w	800490a <_scanf_float+0x66>
 8004a2e:	460d      	mov	r5, r1
 8004a30:	468a      	mov	sl, r1
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004a38:	6022      	str	r2, [r4, #0]
 8004a3a:	f806 3b01 	strb.w	r3, [r6], #1
 8004a3e:	e7e2      	b.n	8004a06 <_scanf_float+0x162>
 8004a40:	6822      	ldr	r2, [r4, #0]
 8004a42:	0610      	lsls	r0, r2, #24
 8004a44:	f57f af61 	bpl.w	800490a <_scanf_float+0x66>
 8004a48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a4c:	6022      	str	r2, [r4, #0]
 8004a4e:	e7f4      	b.n	8004a3a <_scanf_float+0x196>
 8004a50:	f1ba 0f00 	cmp.w	sl, #0
 8004a54:	d10e      	bne.n	8004a74 <_scanf_float+0x1d0>
 8004a56:	f1b9 0f00 	cmp.w	r9, #0
 8004a5a:	d10e      	bne.n	8004a7a <_scanf_float+0x1d6>
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004a62:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004a66:	d108      	bne.n	8004a7a <_scanf_float+0x1d6>
 8004a68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004a6c:	f04f 0a01 	mov.w	sl, #1
 8004a70:	6022      	str	r2, [r4, #0]
 8004a72:	e7e2      	b.n	8004a3a <_scanf_float+0x196>
 8004a74:	f1ba 0f02 	cmp.w	sl, #2
 8004a78:	d055      	beq.n	8004b26 <_scanf_float+0x282>
 8004a7a:	2d01      	cmp	r5, #1
 8004a7c:	d002      	beq.n	8004a84 <_scanf_float+0x1e0>
 8004a7e:	2d04      	cmp	r5, #4
 8004a80:	f47f af43 	bne.w	800490a <_scanf_float+0x66>
 8004a84:	3501      	adds	r5, #1
 8004a86:	b2ed      	uxtb	r5, r5
 8004a88:	e7d7      	b.n	8004a3a <_scanf_float+0x196>
 8004a8a:	f1ba 0f01 	cmp.w	sl, #1
 8004a8e:	f47f af3c 	bne.w	800490a <_scanf_float+0x66>
 8004a92:	f04f 0a02 	mov.w	sl, #2
 8004a96:	e7d0      	b.n	8004a3a <_scanf_float+0x196>
 8004a98:	b97d      	cbnz	r5, 8004aba <_scanf_float+0x216>
 8004a9a:	f1b9 0f00 	cmp.w	r9, #0
 8004a9e:	f47f af37 	bne.w	8004910 <_scanf_float+0x6c>
 8004aa2:	6822      	ldr	r2, [r4, #0]
 8004aa4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004aa8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004aac:	f040 8103 	bne.w	8004cb6 <_scanf_float+0x412>
 8004ab0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004ab4:	2501      	movs	r5, #1
 8004ab6:	6022      	str	r2, [r4, #0]
 8004ab8:	e7bf      	b.n	8004a3a <_scanf_float+0x196>
 8004aba:	2d03      	cmp	r5, #3
 8004abc:	d0e2      	beq.n	8004a84 <_scanf_float+0x1e0>
 8004abe:	2d05      	cmp	r5, #5
 8004ac0:	e7de      	b.n	8004a80 <_scanf_float+0x1dc>
 8004ac2:	2d02      	cmp	r5, #2
 8004ac4:	f47f af21 	bne.w	800490a <_scanf_float+0x66>
 8004ac8:	2503      	movs	r5, #3
 8004aca:	e7b6      	b.n	8004a3a <_scanf_float+0x196>
 8004acc:	2d06      	cmp	r5, #6
 8004ace:	f47f af1c 	bne.w	800490a <_scanf_float+0x66>
 8004ad2:	2507      	movs	r5, #7
 8004ad4:	e7b1      	b.n	8004a3a <_scanf_float+0x196>
 8004ad6:	6822      	ldr	r2, [r4, #0]
 8004ad8:	0591      	lsls	r1, r2, #22
 8004ada:	f57f af16 	bpl.w	800490a <_scanf_float+0x66>
 8004ade:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004ae2:	6022      	str	r2, [r4, #0]
 8004ae4:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ae8:	e7a7      	b.n	8004a3a <_scanf_float+0x196>
 8004aea:	6822      	ldr	r2, [r4, #0]
 8004aec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004af0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004af4:	d006      	beq.n	8004b04 <_scanf_float+0x260>
 8004af6:	0550      	lsls	r0, r2, #21
 8004af8:	f57f af07 	bpl.w	800490a <_scanf_float+0x66>
 8004afc:	f1b9 0f00 	cmp.w	r9, #0
 8004b00:	f000 80d9 	beq.w	8004cb6 <_scanf_float+0x412>
 8004b04:	0591      	lsls	r1, r2, #22
 8004b06:	bf58      	it	pl
 8004b08:	9902      	ldrpl	r1, [sp, #8]
 8004b0a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b0e:	bf58      	it	pl
 8004b10:	eba9 0101 	subpl.w	r1, r9, r1
 8004b14:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004b18:	f04f 0900 	mov.w	r9, #0
 8004b1c:	bf58      	it	pl
 8004b1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004b22:	6022      	str	r2, [r4, #0]
 8004b24:	e789      	b.n	8004a3a <_scanf_float+0x196>
 8004b26:	f04f 0a03 	mov.w	sl, #3
 8004b2a:	e786      	b.n	8004a3a <_scanf_float+0x196>
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	4640      	mov	r0, r8
 8004b30:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004b34:	4798      	blx	r3
 8004b36:	2800      	cmp	r0, #0
 8004b38:	f43f aeda 	beq.w	80048f0 <_scanf_float+0x4c>
 8004b3c:	e6e5      	b.n	800490a <_scanf_float+0x66>
 8004b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b42:	463a      	mov	r2, r7
 8004b44:	4640      	mov	r0, r8
 8004b46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b4a:	4798      	blx	r3
 8004b4c:	6923      	ldr	r3, [r4, #16]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	6123      	str	r3, [r4, #16]
 8004b52:	e6e7      	b.n	8004924 <_scanf_float+0x80>
 8004b54:	1e6b      	subs	r3, r5, #1
 8004b56:	2b06      	cmp	r3, #6
 8004b58:	d824      	bhi.n	8004ba4 <_scanf_float+0x300>
 8004b5a:	2d02      	cmp	r5, #2
 8004b5c:	d836      	bhi.n	8004bcc <_scanf_float+0x328>
 8004b5e:	9b01      	ldr	r3, [sp, #4]
 8004b60:	429e      	cmp	r6, r3
 8004b62:	f67f aee3 	bls.w	800492c <_scanf_float+0x88>
 8004b66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b6a:	463a      	mov	r2, r7
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b72:	4798      	blx	r3
 8004b74:	6923      	ldr	r3, [r4, #16]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	6123      	str	r3, [r4, #16]
 8004b7a:	e7f0      	b.n	8004b5e <_scanf_float+0x2ba>
 8004b7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b80:	463a      	mov	r2, r7
 8004b82:	4640      	mov	r0, r8
 8004b84:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004b88:	4798      	blx	r3
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	6123      	str	r3, [r4, #16]
 8004b90:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004b94:	fa5f fa8a 	uxtb.w	sl, sl
 8004b98:	f1ba 0f02 	cmp.w	sl, #2
 8004b9c:	d1ee      	bne.n	8004b7c <_scanf_float+0x2d8>
 8004b9e:	3d03      	subs	r5, #3
 8004ba0:	b2ed      	uxtb	r5, r5
 8004ba2:	1b76      	subs	r6, r6, r5
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	05da      	lsls	r2, r3, #23
 8004ba8:	d530      	bpl.n	8004c0c <_scanf_float+0x368>
 8004baa:	055b      	lsls	r3, r3, #21
 8004bac:	d511      	bpl.n	8004bd2 <_scanf_float+0x32e>
 8004bae:	9b01      	ldr	r3, [sp, #4]
 8004bb0:	429e      	cmp	r6, r3
 8004bb2:	f67f aebb 	bls.w	800492c <_scanf_float+0x88>
 8004bb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004bba:	463a      	mov	r2, r7
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004bc2:	4798      	blx	r3
 8004bc4:	6923      	ldr	r3, [r4, #16]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	6123      	str	r3, [r4, #16]
 8004bca:	e7f0      	b.n	8004bae <_scanf_float+0x30a>
 8004bcc:	46aa      	mov	sl, r5
 8004bce:	46b3      	mov	fp, r6
 8004bd0:	e7de      	b.n	8004b90 <_scanf_float+0x2ec>
 8004bd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	2965      	cmp	r1, #101	@ 0x65
 8004bda:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004bde:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8004be2:	6123      	str	r3, [r4, #16]
 8004be4:	d00c      	beq.n	8004c00 <_scanf_float+0x35c>
 8004be6:	2945      	cmp	r1, #69	@ 0x45
 8004be8:	d00a      	beq.n	8004c00 <_scanf_float+0x35c>
 8004bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004bee:	463a      	mov	r2, r7
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	4798      	blx	r3
 8004bf4:	6923      	ldr	r3, [r4, #16]
 8004bf6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	1eb5      	subs	r5, r6, #2
 8004bfe:	6123      	str	r3, [r4, #16]
 8004c00:	463a      	mov	r2, r7
 8004c02:	4640      	mov	r0, r8
 8004c04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c08:	4798      	blx	r3
 8004c0a:	462e      	mov	r6, r5
 8004c0c:	6822      	ldr	r2, [r4, #0]
 8004c0e:	f012 0210 	ands.w	r2, r2, #16
 8004c12:	d001      	beq.n	8004c18 <_scanf_float+0x374>
 8004c14:	2000      	movs	r0, #0
 8004c16:	e68a      	b.n	800492e <_scanf_float+0x8a>
 8004c18:	7032      	strb	r2, [r6, #0]
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c24:	d11c      	bne.n	8004c60 <_scanf_float+0x3bc>
 8004c26:	9b02      	ldr	r3, [sp, #8]
 8004c28:	454b      	cmp	r3, r9
 8004c2a:	eba3 0209 	sub.w	r2, r3, r9
 8004c2e:	d123      	bne.n	8004c78 <_scanf_float+0x3d4>
 8004c30:	2200      	movs	r2, #0
 8004c32:	4640      	mov	r0, r8
 8004c34:	9901      	ldr	r1, [sp, #4]
 8004c36:	f000 ff03 	bl	8005a40 <_strtod_r>
 8004c3a:	9b03      	ldr	r3, [sp, #12]
 8004c3c:	6825      	ldr	r5, [r4, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f015 0f02 	tst.w	r5, #2
 8004c44:	4606      	mov	r6, r0
 8004c46:	460f      	mov	r7, r1
 8004c48:	f103 0204 	add.w	r2, r3, #4
 8004c4c:	d01f      	beq.n	8004c8e <_scanf_float+0x3ea>
 8004c4e:	9903      	ldr	r1, [sp, #12]
 8004c50:	600a      	str	r2, [r1, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	e9c3 6700 	strd	r6, r7, [r3]
 8004c58:	68e3      	ldr	r3, [r4, #12]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60e3      	str	r3, [r4, #12]
 8004c5e:	e7d9      	b.n	8004c14 <_scanf_float+0x370>
 8004c60:	9b04      	ldr	r3, [sp, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0e4      	beq.n	8004c30 <_scanf_float+0x38c>
 8004c66:	9905      	ldr	r1, [sp, #20]
 8004c68:	230a      	movs	r3, #10
 8004c6a:	4640      	mov	r0, r8
 8004c6c:	3101      	adds	r1, #1
 8004c6e:	f000 ff67 	bl	8005b40 <_strtol_r>
 8004c72:	9b04      	ldr	r3, [sp, #16]
 8004c74:	9e05      	ldr	r6, [sp, #20]
 8004c76:	1ac2      	subs	r2, r0, r3
 8004c78:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004c7c:	429e      	cmp	r6, r3
 8004c7e:	bf28      	it	cs
 8004c80:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004c84:	4630      	mov	r0, r6
 8004c86:	490d      	ldr	r1, [pc, #52]	@ (8004cbc <_scanf_float+0x418>)
 8004c88:	f000 f81c 	bl	8004cc4 <siprintf>
 8004c8c:	e7d0      	b.n	8004c30 <_scanf_float+0x38c>
 8004c8e:	076d      	lsls	r5, r5, #29
 8004c90:	d4dd      	bmi.n	8004c4e <_scanf_float+0x3aa>
 8004c92:	9d03      	ldr	r5, [sp, #12]
 8004c94:	602a      	str	r2, [r5, #0]
 8004c96:	681d      	ldr	r5, [r3, #0]
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	f7fb ff6a 	bl	8000b74 <__aeabi_dcmpun>
 8004ca0:	b120      	cbz	r0, 8004cac <_scanf_float+0x408>
 8004ca2:	4807      	ldr	r0, [pc, #28]	@ (8004cc0 <_scanf_float+0x41c>)
 8004ca4:	f000 ffda 	bl	8005c5c <nanf>
 8004ca8:	6028      	str	r0, [r5, #0]
 8004caa:	e7d5      	b.n	8004c58 <_scanf_float+0x3b4>
 8004cac:	4630      	mov	r0, r6
 8004cae:	4639      	mov	r1, r7
 8004cb0:	f7fb ffbe 	bl	8000c30 <__aeabi_d2f>
 8004cb4:	e7f8      	b.n	8004ca8 <_scanf_float+0x404>
 8004cb6:	f04f 0900 	mov.w	r9, #0
 8004cba:	e62d      	b.n	8004918 <_scanf_float+0x74>
 8004cbc:	08008756 	.word	0x08008756
 8004cc0:	08008b4b 	.word	0x08008b4b

08004cc4 <siprintf>:
 8004cc4:	b40e      	push	{r1, r2, r3}
 8004cc6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004cca:	b500      	push	{lr}
 8004ccc:	b09c      	sub	sp, #112	@ 0x70
 8004cce:	ab1d      	add	r3, sp, #116	@ 0x74
 8004cd0:	9002      	str	r0, [sp, #8]
 8004cd2:	9006      	str	r0, [sp, #24]
 8004cd4:	9107      	str	r1, [sp, #28]
 8004cd6:	9104      	str	r1, [sp, #16]
 8004cd8:	4808      	ldr	r0, [pc, #32]	@ (8004cfc <siprintf+0x38>)
 8004cda:	4909      	ldr	r1, [pc, #36]	@ (8004d00 <siprintf+0x3c>)
 8004cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce0:	9105      	str	r1, [sp, #20]
 8004ce2:	6800      	ldr	r0, [r0, #0]
 8004ce4:	a902      	add	r1, sp, #8
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	f002 f9a2 	bl	8007030 <_svfiprintf_r>
 8004cec:	2200      	movs	r2, #0
 8004cee:	9b02      	ldr	r3, [sp, #8]
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	b01c      	add	sp, #112	@ 0x70
 8004cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cf8:	b003      	add	sp, #12
 8004cfa:	4770      	bx	lr
 8004cfc:	20000188 	.word	0x20000188
 8004d00:	ffff0208 	.word	0xffff0208

08004d04 <std>:
 8004d04:	2300      	movs	r3, #0
 8004d06:	b510      	push	{r4, lr}
 8004d08:	4604      	mov	r4, r0
 8004d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d12:	6083      	str	r3, [r0, #8]
 8004d14:	8181      	strh	r1, [r0, #12]
 8004d16:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d18:	81c2      	strh	r2, [r0, #14]
 8004d1a:	6183      	str	r3, [r0, #24]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	2208      	movs	r2, #8
 8004d20:	305c      	adds	r0, #92	@ 0x5c
 8004d22:	f000 ff3f 	bl	8005ba4 <memset>
 8004d26:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <std+0x58>)
 8004d28:	6224      	str	r4, [r4, #32]
 8004d2a:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d60 <std+0x5c>)
 8004d2e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d30:	4b0c      	ldr	r3, [pc, #48]	@ (8004d64 <std+0x60>)
 8004d32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d34:	4b0c      	ldr	r3, [pc, #48]	@ (8004d68 <std+0x64>)
 8004d36:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d38:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <std+0x68>)
 8004d3a:	429c      	cmp	r4, r3
 8004d3c:	d006      	beq.n	8004d4c <std+0x48>
 8004d3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d42:	4294      	cmp	r4, r2
 8004d44:	d002      	beq.n	8004d4c <std+0x48>
 8004d46:	33d0      	adds	r3, #208	@ 0xd0
 8004d48:	429c      	cmp	r4, r3
 8004d4a:	d105      	bne.n	8004d58 <std+0x54>
 8004d4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d54:	f000 bf5c 	b.w	8005c10 <__retarget_lock_init_recursive>
 8004d58:	bd10      	pop	{r4, pc}
 8004d5a:	bf00      	nop
 8004d5c:	08007e55 	.word	0x08007e55
 8004d60:	08007e77 	.word	0x08007e77
 8004d64:	08007eaf 	.word	0x08007eaf
 8004d68:	08007ed3 	.word	0x08007ed3
 8004d6c:	20000314 	.word	0x20000314

08004d70 <stdio_exit_handler>:
 8004d70:	4a02      	ldr	r2, [pc, #8]	@ (8004d7c <stdio_exit_handler+0xc>)
 8004d72:	4903      	ldr	r1, [pc, #12]	@ (8004d80 <stdio_exit_handler+0x10>)
 8004d74:	4803      	ldr	r0, [pc, #12]	@ (8004d84 <stdio_exit_handler+0x14>)
 8004d76:	f000 bee5 	b.w	8005b44 <_fwalk_sglue>
 8004d7a:	bf00      	nop
 8004d7c:	20000010 	.word	0x20000010
 8004d80:	080074a1 	.word	0x080074a1
 8004d84:	2000018c 	.word	0x2000018c

08004d88 <cleanup_stdio>:
 8004d88:	6841      	ldr	r1, [r0, #4]
 8004d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004dbc <cleanup_stdio+0x34>)
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	4299      	cmp	r1, r3
 8004d90:	4604      	mov	r4, r0
 8004d92:	d001      	beq.n	8004d98 <cleanup_stdio+0x10>
 8004d94:	f002 fb84 	bl	80074a0 <_fflush_r>
 8004d98:	68a1      	ldr	r1, [r4, #8]
 8004d9a:	4b09      	ldr	r3, [pc, #36]	@ (8004dc0 <cleanup_stdio+0x38>)
 8004d9c:	4299      	cmp	r1, r3
 8004d9e:	d002      	beq.n	8004da6 <cleanup_stdio+0x1e>
 8004da0:	4620      	mov	r0, r4
 8004da2:	f002 fb7d 	bl	80074a0 <_fflush_r>
 8004da6:	68e1      	ldr	r1, [r4, #12]
 8004da8:	4b06      	ldr	r3, [pc, #24]	@ (8004dc4 <cleanup_stdio+0x3c>)
 8004daa:	4299      	cmp	r1, r3
 8004dac:	d004      	beq.n	8004db8 <cleanup_stdio+0x30>
 8004dae:	4620      	mov	r0, r4
 8004db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db4:	f002 bb74 	b.w	80074a0 <_fflush_r>
 8004db8:	bd10      	pop	{r4, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000314 	.word	0x20000314
 8004dc0:	2000037c 	.word	0x2000037c
 8004dc4:	200003e4 	.word	0x200003e4

08004dc8 <global_stdio_init.part.0>:
 8004dc8:	b510      	push	{r4, lr}
 8004dca:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <global_stdio_init.part.0+0x30>)
 8004dcc:	4c0b      	ldr	r4, [pc, #44]	@ (8004dfc <global_stdio_init.part.0+0x34>)
 8004dce:	4a0c      	ldr	r2, [pc, #48]	@ (8004e00 <global_stdio_init.part.0+0x38>)
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f7ff ff94 	bl	8004d04 <std>
 8004ddc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004de0:	2201      	movs	r2, #1
 8004de2:	2109      	movs	r1, #9
 8004de4:	f7ff ff8e 	bl	8004d04 <std>
 8004de8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004dec:	2202      	movs	r2, #2
 8004dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004df2:	2112      	movs	r1, #18
 8004df4:	f7ff bf86 	b.w	8004d04 <std>
 8004df8:	2000044c 	.word	0x2000044c
 8004dfc:	20000314 	.word	0x20000314
 8004e00:	08004d71 	.word	0x08004d71

08004e04 <__sfp_lock_acquire>:
 8004e04:	4801      	ldr	r0, [pc, #4]	@ (8004e0c <__sfp_lock_acquire+0x8>)
 8004e06:	f000 bf04 	b.w	8005c12 <__retarget_lock_acquire_recursive>
 8004e0a:	bf00      	nop
 8004e0c:	20000451 	.word	0x20000451

08004e10 <__sfp_lock_release>:
 8004e10:	4801      	ldr	r0, [pc, #4]	@ (8004e18 <__sfp_lock_release+0x8>)
 8004e12:	f000 beff 	b.w	8005c14 <__retarget_lock_release_recursive>
 8004e16:	bf00      	nop
 8004e18:	20000451 	.word	0x20000451

08004e1c <__sinit>:
 8004e1c:	b510      	push	{r4, lr}
 8004e1e:	4604      	mov	r4, r0
 8004e20:	f7ff fff0 	bl	8004e04 <__sfp_lock_acquire>
 8004e24:	6a23      	ldr	r3, [r4, #32]
 8004e26:	b11b      	cbz	r3, 8004e30 <__sinit+0x14>
 8004e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e2c:	f7ff bff0 	b.w	8004e10 <__sfp_lock_release>
 8004e30:	4b04      	ldr	r3, [pc, #16]	@ (8004e44 <__sinit+0x28>)
 8004e32:	6223      	str	r3, [r4, #32]
 8004e34:	4b04      	ldr	r3, [pc, #16]	@ (8004e48 <__sinit+0x2c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f5      	bne.n	8004e28 <__sinit+0xc>
 8004e3c:	f7ff ffc4 	bl	8004dc8 <global_stdio_init.part.0>
 8004e40:	e7f2      	b.n	8004e28 <__sinit+0xc>
 8004e42:	bf00      	nop
 8004e44:	08004d89 	.word	0x08004d89
 8004e48:	2000044c 	.word	0x2000044c

08004e4c <sulp>:
 8004e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e50:	460f      	mov	r7, r1
 8004e52:	4690      	mov	r8, r2
 8004e54:	f002 feca 	bl	8007bec <__ulp>
 8004e58:	4604      	mov	r4, r0
 8004e5a:	460d      	mov	r5, r1
 8004e5c:	f1b8 0f00 	cmp.w	r8, #0
 8004e60:	d011      	beq.n	8004e86 <sulp+0x3a>
 8004e62:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004e66:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dd0b      	ble.n	8004e86 <sulp+0x3a>
 8004e6e:	2400      	movs	r4, #0
 8004e70:	051b      	lsls	r3, r3, #20
 8004e72:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004e76:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	f7fb fbdf 	bl	8000640 <__aeabi_dmul>
 8004e82:	4604      	mov	r4, r0
 8004e84:	460d      	mov	r5, r1
 8004e86:	4620      	mov	r0, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004e90 <_strtod_l>:
 8004e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e94:	b09f      	sub	sp, #124	@ 0x7c
 8004e96:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004e98:	2200      	movs	r2, #0
 8004e9a:	460c      	mov	r4, r1
 8004e9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8004e9e:	f04f 0a00 	mov.w	sl, #0
 8004ea2:	f04f 0b00 	mov.w	fp, #0
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	9005      	str	r0, [sp, #20]
 8004eaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8004eac:	7811      	ldrb	r1, [r2, #0]
 8004eae:	292b      	cmp	r1, #43	@ 0x2b
 8004eb0:	d048      	beq.n	8004f44 <_strtod_l+0xb4>
 8004eb2:	d836      	bhi.n	8004f22 <_strtod_l+0x92>
 8004eb4:	290d      	cmp	r1, #13
 8004eb6:	d830      	bhi.n	8004f1a <_strtod_l+0x8a>
 8004eb8:	2908      	cmp	r1, #8
 8004eba:	d830      	bhi.n	8004f1e <_strtod_l+0x8e>
 8004ebc:	2900      	cmp	r1, #0
 8004ebe:	d039      	beq.n	8004f34 <_strtod_l+0xa4>
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004ec4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004ec6:	782a      	ldrb	r2, [r5, #0]
 8004ec8:	2a30      	cmp	r2, #48	@ 0x30
 8004eca:	f040 80b1 	bne.w	8005030 <_strtod_l+0x1a0>
 8004ece:	786a      	ldrb	r2, [r5, #1]
 8004ed0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004ed4:	2a58      	cmp	r2, #88	@ 0x58
 8004ed6:	d16c      	bne.n	8004fb2 <_strtod_l+0x122>
 8004ed8:	9302      	str	r3, [sp, #8]
 8004eda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004edc:	4a8e      	ldr	r2, [pc, #568]	@ (8005118 <_strtod_l+0x288>)
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	ab1a      	add	r3, sp, #104	@ 0x68
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	9805      	ldr	r0, [sp, #20]
 8004ee6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004ee8:	a919      	add	r1, sp, #100	@ 0x64
 8004eea:	f001 fd75 	bl	80069d8 <__gethex>
 8004eee:	f010 060f 	ands.w	r6, r0, #15
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	d005      	beq.n	8004f02 <_strtod_l+0x72>
 8004ef6:	2e06      	cmp	r6, #6
 8004ef8:	d126      	bne.n	8004f48 <_strtod_l+0xb8>
 8004efa:	2300      	movs	r3, #0
 8004efc:	3501      	adds	r5, #1
 8004efe:	9519      	str	r5, [sp, #100]	@ 0x64
 8004f00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f040 8584 	bne.w	8005a12 <_strtod_l+0xb82>
 8004f0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f0c:	b1bb      	cbz	r3, 8004f3e <_strtod_l+0xae>
 8004f0e:	4650      	mov	r0, sl
 8004f10:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8004f14:	b01f      	add	sp, #124	@ 0x7c
 8004f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1a:	2920      	cmp	r1, #32
 8004f1c:	d1d0      	bne.n	8004ec0 <_strtod_l+0x30>
 8004f1e:	3201      	adds	r2, #1
 8004f20:	e7c3      	b.n	8004eaa <_strtod_l+0x1a>
 8004f22:	292d      	cmp	r1, #45	@ 0x2d
 8004f24:	d1cc      	bne.n	8004ec0 <_strtod_l+0x30>
 8004f26:	2101      	movs	r1, #1
 8004f28:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004f2a:	1c51      	adds	r1, r2, #1
 8004f2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8004f2e:	7852      	ldrb	r2, [r2, #1]
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	d1c7      	bne.n	8004ec4 <_strtod_l+0x34>
 8004f34:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004f36:	9419      	str	r4, [sp, #100]	@ 0x64
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f040 8568 	bne.w	8005a0e <_strtod_l+0xb7e>
 8004f3e:	4650      	mov	r0, sl
 8004f40:	4659      	mov	r1, fp
 8004f42:	e7e7      	b.n	8004f14 <_strtod_l+0x84>
 8004f44:	2100      	movs	r1, #0
 8004f46:	e7ef      	b.n	8004f28 <_strtod_l+0x98>
 8004f48:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004f4a:	b13a      	cbz	r2, 8004f5c <_strtod_l+0xcc>
 8004f4c:	2135      	movs	r1, #53	@ 0x35
 8004f4e:	a81c      	add	r0, sp, #112	@ 0x70
 8004f50:	f002 ff3c 	bl	8007dcc <__copybits>
 8004f54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004f56:	9805      	ldr	r0, [sp, #20]
 8004f58:	f002 fb16 	bl	8007588 <_Bfree>
 8004f5c:	3e01      	subs	r6, #1
 8004f5e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004f60:	2e04      	cmp	r6, #4
 8004f62:	d806      	bhi.n	8004f72 <_strtod_l+0xe2>
 8004f64:	e8df f006 	tbb	[pc, r6]
 8004f68:	201d0314 	.word	0x201d0314
 8004f6c:	14          	.byte	0x14
 8004f6d:	00          	.byte	0x00
 8004f6e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004f72:	05e1      	lsls	r1, r4, #23
 8004f74:	bf48      	it	mi
 8004f76:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004f7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004f7e:	0d1b      	lsrs	r3, r3, #20
 8004f80:	051b      	lsls	r3, r3, #20
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1bd      	bne.n	8004f02 <_strtod_l+0x72>
 8004f86:	f000 fe19 	bl	8005bbc <__errno>
 8004f8a:	2322      	movs	r3, #34	@ 0x22
 8004f8c:	6003      	str	r3, [r0, #0]
 8004f8e:	e7b8      	b.n	8004f02 <_strtod_l+0x72>
 8004f90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004f94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004f98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004f9c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004fa0:	e7e7      	b.n	8004f72 <_strtod_l+0xe2>
 8004fa2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800511c <_strtod_l+0x28c>
 8004fa6:	e7e4      	b.n	8004f72 <_strtod_l+0xe2>
 8004fa8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004fac:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004fb0:	e7df      	b.n	8004f72 <_strtod_l+0xe2>
 8004fb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	9219      	str	r2, [sp, #100]	@ 0x64
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	2b30      	cmp	r3, #48	@ 0x30
 8004fbc:	d0f9      	beq.n	8004fb2 <_strtod_l+0x122>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d09f      	beq.n	8004f02 <_strtod_l+0x72>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004fc8:	220a      	movs	r2, #10
 8004fca:	930c      	str	r3, [sp, #48]	@ 0x30
 8004fcc:	2300      	movs	r3, #0
 8004fce:	461f      	mov	r7, r3
 8004fd0:	9308      	str	r3, [sp, #32]
 8004fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fd4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004fd6:	7805      	ldrb	r5, [r0, #0]
 8004fd8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004fdc:	b2d9      	uxtb	r1, r3
 8004fde:	2909      	cmp	r1, #9
 8004fe0:	d928      	bls.n	8005034 <_strtod_l+0x1a4>
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	494e      	ldr	r1, [pc, #312]	@ (8005120 <_strtod_l+0x290>)
 8004fe6:	f000 fdcb 	bl	8005b80 <strncmp>
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d032      	beq.n	8005054 <_strtod_l+0x1c4>
 8004fee:	2000      	movs	r0, #0
 8004ff0:	462a      	mov	r2, r5
 8004ff2:	4681      	mov	r9, r0
 8004ff4:	463d      	mov	r5, r7
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2a65      	cmp	r2, #101	@ 0x65
 8004ffa:	d001      	beq.n	8005000 <_strtod_l+0x170>
 8004ffc:	2a45      	cmp	r2, #69	@ 0x45
 8004ffe:	d114      	bne.n	800502a <_strtod_l+0x19a>
 8005000:	b91d      	cbnz	r5, 800500a <_strtod_l+0x17a>
 8005002:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005004:	4302      	orrs	r2, r0
 8005006:	d095      	beq.n	8004f34 <_strtod_l+0xa4>
 8005008:	2500      	movs	r5, #0
 800500a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800500c:	1c62      	adds	r2, r4, #1
 800500e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005010:	7862      	ldrb	r2, [r4, #1]
 8005012:	2a2b      	cmp	r2, #43	@ 0x2b
 8005014:	d077      	beq.n	8005106 <_strtod_l+0x276>
 8005016:	2a2d      	cmp	r2, #45	@ 0x2d
 8005018:	d07b      	beq.n	8005112 <_strtod_l+0x282>
 800501a:	f04f 0c00 	mov.w	ip, #0
 800501e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005022:	2909      	cmp	r1, #9
 8005024:	f240 8082 	bls.w	800512c <_strtod_l+0x29c>
 8005028:	9419      	str	r4, [sp, #100]	@ 0x64
 800502a:	f04f 0800 	mov.w	r8, #0
 800502e:	e0a2      	b.n	8005176 <_strtod_l+0x2e6>
 8005030:	2300      	movs	r3, #0
 8005032:	e7c7      	b.n	8004fc4 <_strtod_l+0x134>
 8005034:	2f08      	cmp	r7, #8
 8005036:	bfd5      	itete	le
 8005038:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800503a:	9908      	ldrgt	r1, [sp, #32]
 800503c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005040:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005044:	f100 0001 	add.w	r0, r0, #1
 8005048:	bfd4      	ite	le
 800504a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800504c:	9308      	strgt	r3, [sp, #32]
 800504e:	3701      	adds	r7, #1
 8005050:	9019      	str	r0, [sp, #100]	@ 0x64
 8005052:	e7bf      	b.n	8004fd4 <_strtod_l+0x144>
 8005054:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	9219      	str	r2, [sp, #100]	@ 0x64
 800505a:	785a      	ldrb	r2, [r3, #1]
 800505c:	b37f      	cbz	r7, 80050be <_strtod_l+0x22e>
 800505e:	4681      	mov	r9, r0
 8005060:	463d      	mov	r5, r7
 8005062:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005066:	2b09      	cmp	r3, #9
 8005068:	d912      	bls.n	8005090 <_strtod_l+0x200>
 800506a:	2301      	movs	r3, #1
 800506c:	e7c4      	b.n	8004ff8 <_strtod_l+0x168>
 800506e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005070:	3001      	adds	r0, #1
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	9219      	str	r2, [sp, #100]	@ 0x64
 8005076:	785a      	ldrb	r2, [r3, #1]
 8005078:	2a30      	cmp	r2, #48	@ 0x30
 800507a:	d0f8      	beq.n	800506e <_strtod_l+0x1de>
 800507c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005080:	2b08      	cmp	r3, #8
 8005082:	f200 84cb 	bhi.w	8005a1c <_strtod_l+0xb8c>
 8005086:	4681      	mov	r9, r0
 8005088:	2000      	movs	r0, #0
 800508a:	4605      	mov	r5, r0
 800508c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800508e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005090:	3a30      	subs	r2, #48	@ 0x30
 8005092:	f100 0301 	add.w	r3, r0, #1
 8005096:	d02a      	beq.n	80050ee <_strtod_l+0x25e>
 8005098:	4499      	add	r9, r3
 800509a:	210a      	movs	r1, #10
 800509c:	462b      	mov	r3, r5
 800509e:	eb00 0c05 	add.w	ip, r0, r5
 80050a2:	4563      	cmp	r3, ip
 80050a4:	d10d      	bne.n	80050c2 <_strtod_l+0x232>
 80050a6:	1c69      	adds	r1, r5, #1
 80050a8:	4401      	add	r1, r0
 80050aa:	4428      	add	r0, r5
 80050ac:	2808      	cmp	r0, #8
 80050ae:	dc16      	bgt.n	80050de <_strtod_l+0x24e>
 80050b0:	230a      	movs	r3, #10
 80050b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80050b4:	fb03 2300 	mla	r3, r3, r0, r2
 80050b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80050ba:	2300      	movs	r3, #0
 80050bc:	e018      	b.n	80050f0 <_strtod_l+0x260>
 80050be:	4638      	mov	r0, r7
 80050c0:	e7da      	b.n	8005078 <_strtod_l+0x1e8>
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	f103 0301 	add.w	r3, r3, #1
 80050c8:	dc03      	bgt.n	80050d2 <_strtod_l+0x242>
 80050ca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80050cc:	434e      	muls	r6, r1
 80050ce:	960a      	str	r6, [sp, #40]	@ 0x28
 80050d0:	e7e7      	b.n	80050a2 <_strtod_l+0x212>
 80050d2:	2b10      	cmp	r3, #16
 80050d4:	bfde      	ittt	le
 80050d6:	9e08      	ldrle	r6, [sp, #32]
 80050d8:	434e      	mulle	r6, r1
 80050da:	9608      	strle	r6, [sp, #32]
 80050dc:	e7e1      	b.n	80050a2 <_strtod_l+0x212>
 80050de:	280f      	cmp	r0, #15
 80050e0:	dceb      	bgt.n	80050ba <_strtod_l+0x22a>
 80050e2:	230a      	movs	r3, #10
 80050e4:	9808      	ldr	r0, [sp, #32]
 80050e6:	fb03 2300 	mla	r3, r3, r0, r2
 80050ea:	9308      	str	r3, [sp, #32]
 80050ec:	e7e5      	b.n	80050ba <_strtod_l+0x22a>
 80050ee:	4629      	mov	r1, r5
 80050f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80050f2:	460d      	mov	r5, r1
 80050f4:	1c50      	adds	r0, r2, #1
 80050f6:	9019      	str	r0, [sp, #100]	@ 0x64
 80050f8:	7852      	ldrb	r2, [r2, #1]
 80050fa:	4618      	mov	r0, r3
 80050fc:	e7b1      	b.n	8005062 <_strtod_l+0x1d2>
 80050fe:	f04f 0900 	mov.w	r9, #0
 8005102:	2301      	movs	r3, #1
 8005104:	e77d      	b.n	8005002 <_strtod_l+0x172>
 8005106:	f04f 0c00 	mov.w	ip, #0
 800510a:	1ca2      	adds	r2, r4, #2
 800510c:	9219      	str	r2, [sp, #100]	@ 0x64
 800510e:	78a2      	ldrb	r2, [r4, #2]
 8005110:	e785      	b.n	800501e <_strtod_l+0x18e>
 8005112:	f04f 0c01 	mov.w	ip, #1
 8005116:	e7f8      	b.n	800510a <_strtod_l+0x27a>
 8005118:	08008774 	.word	0x08008774
 800511c:	7ff00000 	.word	0x7ff00000
 8005120:	0800875b 	.word	0x0800875b
 8005124:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005126:	1c51      	adds	r1, r2, #1
 8005128:	9119      	str	r1, [sp, #100]	@ 0x64
 800512a:	7852      	ldrb	r2, [r2, #1]
 800512c:	2a30      	cmp	r2, #48	@ 0x30
 800512e:	d0f9      	beq.n	8005124 <_strtod_l+0x294>
 8005130:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005134:	2908      	cmp	r1, #8
 8005136:	f63f af78 	bhi.w	800502a <_strtod_l+0x19a>
 800513a:	f04f 080a 	mov.w	r8, #10
 800513e:	3a30      	subs	r2, #48	@ 0x30
 8005140:	920e      	str	r2, [sp, #56]	@ 0x38
 8005142:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005144:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005146:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005148:	1c56      	adds	r6, r2, #1
 800514a:	9619      	str	r6, [sp, #100]	@ 0x64
 800514c:	7852      	ldrb	r2, [r2, #1]
 800514e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005152:	f1be 0f09 	cmp.w	lr, #9
 8005156:	d939      	bls.n	80051cc <_strtod_l+0x33c>
 8005158:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800515a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800515e:	1a76      	subs	r6, r6, r1
 8005160:	2e08      	cmp	r6, #8
 8005162:	dc03      	bgt.n	800516c <_strtod_l+0x2dc>
 8005164:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005166:	4588      	cmp	r8, r1
 8005168:	bfa8      	it	ge
 800516a:	4688      	movge	r8, r1
 800516c:	f1bc 0f00 	cmp.w	ip, #0
 8005170:	d001      	beq.n	8005176 <_strtod_l+0x2e6>
 8005172:	f1c8 0800 	rsb	r8, r8, #0
 8005176:	2d00      	cmp	r5, #0
 8005178:	d14e      	bne.n	8005218 <_strtod_l+0x388>
 800517a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800517c:	4308      	orrs	r0, r1
 800517e:	f47f aec0 	bne.w	8004f02 <_strtod_l+0x72>
 8005182:	2b00      	cmp	r3, #0
 8005184:	f47f aed6 	bne.w	8004f34 <_strtod_l+0xa4>
 8005188:	2a69      	cmp	r2, #105	@ 0x69
 800518a:	d028      	beq.n	80051de <_strtod_l+0x34e>
 800518c:	dc25      	bgt.n	80051da <_strtod_l+0x34a>
 800518e:	2a49      	cmp	r2, #73	@ 0x49
 8005190:	d025      	beq.n	80051de <_strtod_l+0x34e>
 8005192:	2a4e      	cmp	r2, #78	@ 0x4e
 8005194:	f47f aece 	bne.w	8004f34 <_strtod_l+0xa4>
 8005198:	499a      	ldr	r1, [pc, #616]	@ (8005404 <_strtod_l+0x574>)
 800519a:	a819      	add	r0, sp, #100	@ 0x64
 800519c:	f001 fe3e 	bl	8006e1c <__match>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	f43f aec7 	beq.w	8004f34 <_strtod_l+0xa4>
 80051a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b28      	cmp	r3, #40	@ 0x28
 80051ac:	d12e      	bne.n	800520c <_strtod_l+0x37c>
 80051ae:	4996      	ldr	r1, [pc, #600]	@ (8005408 <_strtod_l+0x578>)
 80051b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80051b2:	a819      	add	r0, sp, #100	@ 0x64
 80051b4:	f001 fe46 	bl	8006e44 <__hexnan>
 80051b8:	2805      	cmp	r0, #5
 80051ba:	d127      	bne.n	800520c <_strtod_l+0x37c>
 80051bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80051be:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80051c2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80051c6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80051ca:	e69a      	b.n	8004f02 <_strtod_l+0x72>
 80051cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80051ce:	fb08 2101 	mla	r1, r8, r1, r2
 80051d2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80051d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80051d8:	e7b5      	b.n	8005146 <_strtod_l+0x2b6>
 80051da:	2a6e      	cmp	r2, #110	@ 0x6e
 80051dc:	e7da      	b.n	8005194 <_strtod_l+0x304>
 80051de:	498b      	ldr	r1, [pc, #556]	@ (800540c <_strtod_l+0x57c>)
 80051e0:	a819      	add	r0, sp, #100	@ 0x64
 80051e2:	f001 fe1b 	bl	8006e1c <__match>
 80051e6:	2800      	cmp	r0, #0
 80051e8:	f43f aea4 	beq.w	8004f34 <_strtod_l+0xa4>
 80051ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051ee:	4988      	ldr	r1, [pc, #544]	@ (8005410 <_strtod_l+0x580>)
 80051f0:	3b01      	subs	r3, #1
 80051f2:	a819      	add	r0, sp, #100	@ 0x64
 80051f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80051f6:	f001 fe11 	bl	8006e1c <__match>
 80051fa:	b910      	cbnz	r0, 8005202 <_strtod_l+0x372>
 80051fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051fe:	3301      	adds	r3, #1
 8005200:	9319      	str	r3, [sp, #100]	@ 0x64
 8005202:	f04f 0a00 	mov.w	sl, #0
 8005206:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005414 <_strtod_l+0x584>
 800520a:	e67a      	b.n	8004f02 <_strtod_l+0x72>
 800520c:	4882      	ldr	r0, [pc, #520]	@ (8005418 <_strtod_l+0x588>)
 800520e:	f000 fd1f 	bl	8005c50 <nan>
 8005212:	4682      	mov	sl, r0
 8005214:	468b      	mov	fp, r1
 8005216:	e674      	b.n	8004f02 <_strtod_l+0x72>
 8005218:	eba8 0309 	sub.w	r3, r8, r9
 800521c:	2f00      	cmp	r7, #0
 800521e:	bf08      	it	eq
 8005220:	462f      	moveq	r7, r5
 8005222:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005224:	2d10      	cmp	r5, #16
 8005226:	462c      	mov	r4, r5
 8005228:	9309      	str	r3, [sp, #36]	@ 0x24
 800522a:	bfa8      	it	ge
 800522c:	2410      	movge	r4, #16
 800522e:	f7fb f98d 	bl	800054c <__aeabi_ui2d>
 8005232:	2d09      	cmp	r5, #9
 8005234:	4682      	mov	sl, r0
 8005236:	468b      	mov	fp, r1
 8005238:	dc11      	bgt.n	800525e <_strtod_l+0x3ce>
 800523a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800523c:	2b00      	cmp	r3, #0
 800523e:	f43f ae60 	beq.w	8004f02 <_strtod_l+0x72>
 8005242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005244:	dd76      	ble.n	8005334 <_strtod_l+0x4a4>
 8005246:	2b16      	cmp	r3, #22
 8005248:	dc5d      	bgt.n	8005306 <_strtod_l+0x476>
 800524a:	4974      	ldr	r1, [pc, #464]	@ (800541c <_strtod_l+0x58c>)
 800524c:	4652      	mov	r2, sl
 800524e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005252:	465b      	mov	r3, fp
 8005254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005258:	f7fb f9f2 	bl	8000640 <__aeabi_dmul>
 800525c:	e7d9      	b.n	8005212 <_strtod_l+0x382>
 800525e:	4b6f      	ldr	r3, [pc, #444]	@ (800541c <_strtod_l+0x58c>)
 8005260:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005264:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005268:	f7fb f9ea 	bl	8000640 <__aeabi_dmul>
 800526c:	4682      	mov	sl, r0
 800526e:	9808      	ldr	r0, [sp, #32]
 8005270:	468b      	mov	fp, r1
 8005272:	f7fb f96b 	bl	800054c <__aeabi_ui2d>
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4650      	mov	r0, sl
 800527c:	4659      	mov	r1, fp
 800527e:	f7fb f829 	bl	80002d4 <__adddf3>
 8005282:	2d0f      	cmp	r5, #15
 8005284:	4682      	mov	sl, r0
 8005286:	468b      	mov	fp, r1
 8005288:	ddd7      	ble.n	800523a <_strtod_l+0x3aa>
 800528a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800528c:	1b2c      	subs	r4, r5, r4
 800528e:	441c      	add	r4, r3
 8005290:	2c00      	cmp	r4, #0
 8005292:	f340 8096 	ble.w	80053c2 <_strtod_l+0x532>
 8005296:	f014 030f 	ands.w	r3, r4, #15
 800529a:	d00a      	beq.n	80052b2 <_strtod_l+0x422>
 800529c:	495f      	ldr	r1, [pc, #380]	@ (800541c <_strtod_l+0x58c>)
 800529e:	4652      	mov	r2, sl
 80052a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80052a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052a8:	465b      	mov	r3, fp
 80052aa:	f7fb f9c9 	bl	8000640 <__aeabi_dmul>
 80052ae:	4682      	mov	sl, r0
 80052b0:	468b      	mov	fp, r1
 80052b2:	f034 040f 	bics.w	r4, r4, #15
 80052b6:	d073      	beq.n	80053a0 <_strtod_l+0x510>
 80052b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80052bc:	dd48      	ble.n	8005350 <_strtod_l+0x4c0>
 80052be:	2400      	movs	r4, #0
 80052c0:	46a0      	mov	r8, r4
 80052c2:	46a1      	mov	r9, r4
 80052c4:	940a      	str	r4, [sp, #40]	@ 0x28
 80052c6:	2322      	movs	r3, #34	@ 0x22
 80052c8:	f04f 0a00 	mov.w	sl, #0
 80052cc:	9a05      	ldr	r2, [sp, #20]
 80052ce:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005414 <_strtod_l+0x584>
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f43f ae13 	beq.w	8004f02 <_strtod_l+0x72>
 80052dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80052de:	9805      	ldr	r0, [sp, #20]
 80052e0:	f002 f952 	bl	8007588 <_Bfree>
 80052e4:	4649      	mov	r1, r9
 80052e6:	9805      	ldr	r0, [sp, #20]
 80052e8:	f002 f94e 	bl	8007588 <_Bfree>
 80052ec:	4641      	mov	r1, r8
 80052ee:	9805      	ldr	r0, [sp, #20]
 80052f0:	f002 f94a 	bl	8007588 <_Bfree>
 80052f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052f6:	9805      	ldr	r0, [sp, #20]
 80052f8:	f002 f946 	bl	8007588 <_Bfree>
 80052fc:	4621      	mov	r1, r4
 80052fe:	9805      	ldr	r0, [sp, #20]
 8005300:	f002 f942 	bl	8007588 <_Bfree>
 8005304:	e5fd      	b.n	8004f02 <_strtod_l+0x72>
 8005306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005308:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800530c:	4293      	cmp	r3, r2
 800530e:	dbbc      	blt.n	800528a <_strtod_l+0x3fa>
 8005310:	4c42      	ldr	r4, [pc, #264]	@ (800541c <_strtod_l+0x58c>)
 8005312:	f1c5 050f 	rsb	r5, r5, #15
 8005316:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800531a:	4652      	mov	r2, sl
 800531c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005320:	465b      	mov	r3, fp
 8005322:	f7fb f98d 	bl	8000640 <__aeabi_dmul>
 8005326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005328:	1b5d      	subs	r5, r3, r5
 800532a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800532e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005332:	e791      	b.n	8005258 <_strtod_l+0x3c8>
 8005334:	3316      	adds	r3, #22
 8005336:	dba8      	blt.n	800528a <_strtod_l+0x3fa>
 8005338:	4b38      	ldr	r3, [pc, #224]	@ (800541c <_strtod_l+0x58c>)
 800533a:	eba9 0808 	sub.w	r8, r9, r8
 800533e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005342:	4650      	mov	r0, sl
 8005344:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005348:	4659      	mov	r1, fp
 800534a:	f7fb faa3 	bl	8000894 <__aeabi_ddiv>
 800534e:	e760      	b.n	8005212 <_strtod_l+0x382>
 8005350:	4b33      	ldr	r3, [pc, #204]	@ (8005420 <_strtod_l+0x590>)
 8005352:	4650      	mov	r0, sl
 8005354:	9308      	str	r3, [sp, #32]
 8005356:	2300      	movs	r3, #0
 8005358:	4659      	mov	r1, fp
 800535a:	461e      	mov	r6, r3
 800535c:	1124      	asrs	r4, r4, #4
 800535e:	2c01      	cmp	r4, #1
 8005360:	dc21      	bgt.n	80053a6 <_strtod_l+0x516>
 8005362:	b10b      	cbz	r3, 8005368 <_strtod_l+0x4d8>
 8005364:	4682      	mov	sl, r0
 8005366:	468b      	mov	fp, r1
 8005368:	492d      	ldr	r1, [pc, #180]	@ (8005420 <_strtod_l+0x590>)
 800536a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800536e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005372:	4652      	mov	r2, sl
 8005374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005378:	465b      	mov	r3, fp
 800537a:	f7fb f961 	bl	8000640 <__aeabi_dmul>
 800537e:	4b25      	ldr	r3, [pc, #148]	@ (8005414 <_strtod_l+0x584>)
 8005380:	460a      	mov	r2, r1
 8005382:	400b      	ands	r3, r1
 8005384:	4927      	ldr	r1, [pc, #156]	@ (8005424 <_strtod_l+0x594>)
 8005386:	4682      	mov	sl, r0
 8005388:	428b      	cmp	r3, r1
 800538a:	d898      	bhi.n	80052be <_strtod_l+0x42e>
 800538c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005390:	428b      	cmp	r3, r1
 8005392:	bf86      	itte	hi
 8005394:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8005398:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005428 <_strtod_l+0x598>
 800539c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80053a0:	2300      	movs	r3, #0
 80053a2:	9308      	str	r3, [sp, #32]
 80053a4:	e07a      	b.n	800549c <_strtod_l+0x60c>
 80053a6:	07e2      	lsls	r2, r4, #31
 80053a8:	d505      	bpl.n	80053b6 <_strtod_l+0x526>
 80053aa:	9b08      	ldr	r3, [sp, #32]
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f7fb f946 	bl	8000640 <__aeabi_dmul>
 80053b4:	2301      	movs	r3, #1
 80053b6:	9a08      	ldr	r2, [sp, #32]
 80053b8:	3601      	adds	r6, #1
 80053ba:	3208      	adds	r2, #8
 80053bc:	1064      	asrs	r4, r4, #1
 80053be:	9208      	str	r2, [sp, #32]
 80053c0:	e7cd      	b.n	800535e <_strtod_l+0x4ce>
 80053c2:	d0ed      	beq.n	80053a0 <_strtod_l+0x510>
 80053c4:	4264      	negs	r4, r4
 80053c6:	f014 020f 	ands.w	r2, r4, #15
 80053ca:	d00a      	beq.n	80053e2 <_strtod_l+0x552>
 80053cc:	4b13      	ldr	r3, [pc, #76]	@ (800541c <_strtod_l+0x58c>)
 80053ce:	4650      	mov	r0, sl
 80053d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053d4:	4659      	mov	r1, fp
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	f7fb fa5b 	bl	8000894 <__aeabi_ddiv>
 80053de:	4682      	mov	sl, r0
 80053e0:	468b      	mov	fp, r1
 80053e2:	1124      	asrs	r4, r4, #4
 80053e4:	d0dc      	beq.n	80053a0 <_strtod_l+0x510>
 80053e6:	2c1f      	cmp	r4, #31
 80053e8:	dd20      	ble.n	800542c <_strtod_l+0x59c>
 80053ea:	2400      	movs	r4, #0
 80053ec:	46a0      	mov	r8, r4
 80053ee:	46a1      	mov	r9, r4
 80053f0:	940a      	str	r4, [sp, #40]	@ 0x28
 80053f2:	2322      	movs	r3, #34	@ 0x22
 80053f4:	9a05      	ldr	r2, [sp, #20]
 80053f6:	f04f 0a00 	mov.w	sl, #0
 80053fa:	f04f 0b00 	mov.w	fp, #0
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	e768      	b.n	80052d4 <_strtod_l+0x444>
 8005402:	bf00      	nop
 8005404:	0800872f 	.word	0x0800872f
 8005408:	08008760 	.word	0x08008760
 800540c:	08008727 	.word	0x08008727
 8005410:	080088bc 	.word	0x080088bc
 8005414:	7ff00000 	.word	0x7ff00000
 8005418:	08008b4b 	.word	0x08008b4b
 800541c:	08008a48 	.word	0x08008a48
 8005420:	08008a20 	.word	0x08008a20
 8005424:	7ca00000 	.word	0x7ca00000
 8005428:	7fefffff 	.word	0x7fefffff
 800542c:	f014 0310 	ands.w	r3, r4, #16
 8005430:	bf18      	it	ne
 8005432:	236a      	movne	r3, #106	@ 0x6a
 8005434:	4650      	mov	r0, sl
 8005436:	9308      	str	r3, [sp, #32]
 8005438:	4659      	mov	r1, fp
 800543a:	2300      	movs	r3, #0
 800543c:	4ea9      	ldr	r6, [pc, #676]	@ (80056e4 <_strtod_l+0x854>)
 800543e:	07e2      	lsls	r2, r4, #31
 8005440:	d504      	bpl.n	800544c <_strtod_l+0x5bc>
 8005442:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005446:	f7fb f8fb 	bl	8000640 <__aeabi_dmul>
 800544a:	2301      	movs	r3, #1
 800544c:	1064      	asrs	r4, r4, #1
 800544e:	f106 0608 	add.w	r6, r6, #8
 8005452:	d1f4      	bne.n	800543e <_strtod_l+0x5ae>
 8005454:	b10b      	cbz	r3, 800545a <_strtod_l+0x5ca>
 8005456:	4682      	mov	sl, r0
 8005458:	468b      	mov	fp, r1
 800545a:	9b08      	ldr	r3, [sp, #32]
 800545c:	b1b3      	cbz	r3, 800548c <_strtod_l+0x5fc>
 800545e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005462:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005466:	2b00      	cmp	r3, #0
 8005468:	4659      	mov	r1, fp
 800546a:	dd0f      	ble.n	800548c <_strtod_l+0x5fc>
 800546c:	2b1f      	cmp	r3, #31
 800546e:	dd57      	ble.n	8005520 <_strtod_l+0x690>
 8005470:	2b34      	cmp	r3, #52	@ 0x34
 8005472:	bfd8      	it	le
 8005474:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8005478:	f04f 0a00 	mov.w	sl, #0
 800547c:	bfcf      	iteee	gt
 800547e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005482:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005486:	4093      	lslle	r3, r2
 8005488:	ea03 0b01 	andle.w	fp, r3, r1
 800548c:	2200      	movs	r2, #0
 800548e:	2300      	movs	r3, #0
 8005490:	4650      	mov	r0, sl
 8005492:	4659      	mov	r1, fp
 8005494:	f7fb fb3c 	bl	8000b10 <__aeabi_dcmpeq>
 8005498:	2800      	cmp	r0, #0
 800549a:	d1a6      	bne.n	80053ea <_strtod_l+0x55a>
 800549c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800549e:	463a      	mov	r2, r7
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80054a4:	462b      	mov	r3, r5
 80054a6:	9805      	ldr	r0, [sp, #20]
 80054a8:	f002 f8d6 	bl	8007658 <__s2b>
 80054ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80054ae:	2800      	cmp	r0, #0
 80054b0:	f43f af05 	beq.w	80052be <_strtod_l+0x42e>
 80054b4:	2400      	movs	r4, #0
 80054b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054b8:	eba9 0308 	sub.w	r3, r9, r8
 80054bc:	2a00      	cmp	r2, #0
 80054be:	bfa8      	it	ge
 80054c0:	2300      	movge	r3, #0
 80054c2:	46a0      	mov	r8, r4
 80054c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80054c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80054ca:	9316      	str	r3, [sp, #88]	@ 0x58
 80054cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054ce:	9805      	ldr	r0, [sp, #20]
 80054d0:	6859      	ldr	r1, [r3, #4]
 80054d2:	f002 f819 	bl	8007508 <_Balloc>
 80054d6:	4681      	mov	r9, r0
 80054d8:	2800      	cmp	r0, #0
 80054da:	f43f aef4 	beq.w	80052c6 <_strtod_l+0x436>
 80054de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054e0:	300c      	adds	r0, #12
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	f103 010c 	add.w	r1, r3, #12
 80054e8:	3202      	adds	r2, #2
 80054ea:	0092      	lsls	r2, r2, #2
 80054ec:	f000 fba1 	bl	8005c32 <memcpy>
 80054f0:	ab1c      	add	r3, sp, #112	@ 0x70
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	4652      	mov	r2, sl
 80054fa:	465b      	mov	r3, fp
 80054fc:	9805      	ldr	r0, [sp, #20]
 80054fe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005502:	f002 fbdb 	bl	8007cbc <__d2b>
 8005506:	901a      	str	r0, [sp, #104]	@ 0x68
 8005508:	2800      	cmp	r0, #0
 800550a:	f43f aedc 	beq.w	80052c6 <_strtod_l+0x436>
 800550e:	2101      	movs	r1, #1
 8005510:	9805      	ldr	r0, [sp, #20]
 8005512:	f002 f937 	bl	8007784 <__i2b>
 8005516:	4680      	mov	r8, r0
 8005518:	b948      	cbnz	r0, 800552e <_strtod_l+0x69e>
 800551a:	f04f 0800 	mov.w	r8, #0
 800551e:	e6d2      	b.n	80052c6 <_strtod_l+0x436>
 8005520:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	ea03 0a0a 	and.w	sl, r3, sl
 800552c:	e7ae      	b.n	800548c <_strtod_l+0x5fc>
 800552e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005530:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005532:	2d00      	cmp	r5, #0
 8005534:	bfab      	itete	ge
 8005536:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005538:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800553a:	18ef      	addge	r7, r5, r3
 800553c:	1b5e      	sublt	r6, r3, r5
 800553e:	9b08      	ldr	r3, [sp, #32]
 8005540:	bfa8      	it	ge
 8005542:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005544:	eba5 0503 	sub.w	r5, r5, r3
 8005548:	4415      	add	r5, r2
 800554a:	4b67      	ldr	r3, [pc, #412]	@ (80056e8 <_strtod_l+0x858>)
 800554c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8005550:	bfb8      	it	lt
 8005552:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005554:	429d      	cmp	r5, r3
 8005556:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800555a:	da50      	bge.n	80055fe <_strtod_l+0x76e>
 800555c:	1b5b      	subs	r3, r3, r5
 800555e:	2b1f      	cmp	r3, #31
 8005560:	f04f 0101 	mov.w	r1, #1
 8005564:	eba2 0203 	sub.w	r2, r2, r3
 8005568:	dc3d      	bgt.n	80055e6 <_strtod_l+0x756>
 800556a:	fa01 f303 	lsl.w	r3, r1, r3
 800556e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005570:	2300      	movs	r3, #0
 8005572:	9310      	str	r3, [sp, #64]	@ 0x40
 8005574:	18bd      	adds	r5, r7, r2
 8005576:	9b08      	ldr	r3, [sp, #32]
 8005578:	42af      	cmp	r7, r5
 800557a:	4416      	add	r6, r2
 800557c:	441e      	add	r6, r3
 800557e:	463b      	mov	r3, r7
 8005580:	bfa8      	it	ge
 8005582:	462b      	movge	r3, r5
 8005584:	42b3      	cmp	r3, r6
 8005586:	bfa8      	it	ge
 8005588:	4633      	movge	r3, r6
 800558a:	2b00      	cmp	r3, #0
 800558c:	bfc2      	ittt	gt
 800558e:	1aed      	subgt	r5, r5, r3
 8005590:	1af6      	subgt	r6, r6, r3
 8005592:	1aff      	subgt	r7, r7, r3
 8005594:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005596:	2b00      	cmp	r3, #0
 8005598:	dd16      	ble.n	80055c8 <_strtod_l+0x738>
 800559a:	4641      	mov	r1, r8
 800559c:	461a      	mov	r2, r3
 800559e:	9805      	ldr	r0, [sp, #20]
 80055a0:	f002 f9ae 	bl	8007900 <__pow5mult>
 80055a4:	4680      	mov	r8, r0
 80055a6:	2800      	cmp	r0, #0
 80055a8:	d0b7      	beq.n	800551a <_strtod_l+0x68a>
 80055aa:	4601      	mov	r1, r0
 80055ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80055ae:	9805      	ldr	r0, [sp, #20]
 80055b0:	f002 f8fe 	bl	80077b0 <__multiply>
 80055b4:	900e      	str	r0, [sp, #56]	@ 0x38
 80055b6:	2800      	cmp	r0, #0
 80055b8:	f43f ae85 	beq.w	80052c6 <_strtod_l+0x436>
 80055bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80055be:	9805      	ldr	r0, [sp, #20]
 80055c0:	f001 ffe2 	bl	8007588 <_Bfree>
 80055c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	dc1d      	bgt.n	8005608 <_strtod_l+0x778>
 80055cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd23      	ble.n	800561a <_strtod_l+0x78a>
 80055d2:	4649      	mov	r1, r9
 80055d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80055d6:	9805      	ldr	r0, [sp, #20]
 80055d8:	f002 f992 	bl	8007900 <__pow5mult>
 80055dc:	4681      	mov	r9, r0
 80055de:	b9e0      	cbnz	r0, 800561a <_strtod_l+0x78a>
 80055e0:	f04f 0900 	mov.w	r9, #0
 80055e4:	e66f      	b.n	80052c6 <_strtod_l+0x436>
 80055e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80055ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80055ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80055f2:	35e2      	adds	r5, #226	@ 0xe2
 80055f4:	fa01 f305 	lsl.w	r3, r1, r5
 80055f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80055fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80055fc:	e7ba      	b.n	8005574 <_strtod_l+0x6e4>
 80055fe:	2300      	movs	r3, #0
 8005600:	9310      	str	r3, [sp, #64]	@ 0x40
 8005602:	2301      	movs	r3, #1
 8005604:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005606:	e7b5      	b.n	8005574 <_strtod_l+0x6e4>
 8005608:	462a      	mov	r2, r5
 800560a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800560c:	9805      	ldr	r0, [sp, #20]
 800560e:	f002 f9d1 	bl	80079b4 <__lshift>
 8005612:	901a      	str	r0, [sp, #104]	@ 0x68
 8005614:	2800      	cmp	r0, #0
 8005616:	d1d9      	bne.n	80055cc <_strtod_l+0x73c>
 8005618:	e655      	b.n	80052c6 <_strtod_l+0x436>
 800561a:	2e00      	cmp	r6, #0
 800561c:	dd07      	ble.n	800562e <_strtod_l+0x79e>
 800561e:	4649      	mov	r1, r9
 8005620:	4632      	mov	r2, r6
 8005622:	9805      	ldr	r0, [sp, #20]
 8005624:	f002 f9c6 	bl	80079b4 <__lshift>
 8005628:	4681      	mov	r9, r0
 800562a:	2800      	cmp	r0, #0
 800562c:	d0d8      	beq.n	80055e0 <_strtod_l+0x750>
 800562e:	2f00      	cmp	r7, #0
 8005630:	dd08      	ble.n	8005644 <_strtod_l+0x7b4>
 8005632:	4641      	mov	r1, r8
 8005634:	463a      	mov	r2, r7
 8005636:	9805      	ldr	r0, [sp, #20]
 8005638:	f002 f9bc 	bl	80079b4 <__lshift>
 800563c:	4680      	mov	r8, r0
 800563e:	2800      	cmp	r0, #0
 8005640:	f43f ae41 	beq.w	80052c6 <_strtod_l+0x436>
 8005644:	464a      	mov	r2, r9
 8005646:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005648:	9805      	ldr	r0, [sp, #20]
 800564a:	f002 fa3b 	bl	8007ac4 <__mdiff>
 800564e:	4604      	mov	r4, r0
 8005650:	2800      	cmp	r0, #0
 8005652:	f43f ae38 	beq.w	80052c6 <_strtod_l+0x436>
 8005656:	68c3      	ldr	r3, [r0, #12]
 8005658:	4641      	mov	r1, r8
 800565a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800565c:	2300      	movs	r3, #0
 800565e:	60c3      	str	r3, [r0, #12]
 8005660:	f002 fa14 	bl	8007a8c <__mcmp>
 8005664:	2800      	cmp	r0, #0
 8005666:	da45      	bge.n	80056f4 <_strtod_l+0x864>
 8005668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800566a:	ea53 030a 	orrs.w	r3, r3, sl
 800566e:	d16b      	bne.n	8005748 <_strtod_l+0x8b8>
 8005670:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005674:	2b00      	cmp	r3, #0
 8005676:	d167      	bne.n	8005748 <_strtod_l+0x8b8>
 8005678:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800567c:	0d1b      	lsrs	r3, r3, #20
 800567e:	051b      	lsls	r3, r3, #20
 8005680:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005684:	d960      	bls.n	8005748 <_strtod_l+0x8b8>
 8005686:	6963      	ldr	r3, [r4, #20]
 8005688:	b913      	cbnz	r3, 8005690 <_strtod_l+0x800>
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	2b01      	cmp	r3, #1
 800568e:	dd5b      	ble.n	8005748 <_strtod_l+0x8b8>
 8005690:	4621      	mov	r1, r4
 8005692:	2201      	movs	r2, #1
 8005694:	9805      	ldr	r0, [sp, #20]
 8005696:	f002 f98d 	bl	80079b4 <__lshift>
 800569a:	4641      	mov	r1, r8
 800569c:	4604      	mov	r4, r0
 800569e:	f002 f9f5 	bl	8007a8c <__mcmp>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	dd50      	ble.n	8005748 <_strtod_l+0x8b8>
 80056a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80056aa:	9a08      	ldr	r2, [sp, #32]
 80056ac:	0d1b      	lsrs	r3, r3, #20
 80056ae:	051b      	lsls	r3, r3, #20
 80056b0:	2a00      	cmp	r2, #0
 80056b2:	d06a      	beq.n	800578a <_strtod_l+0x8fa>
 80056b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80056b8:	d867      	bhi.n	800578a <_strtod_l+0x8fa>
 80056ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80056be:	f67f ae98 	bls.w	80053f2 <_strtod_l+0x562>
 80056c2:	4650      	mov	r0, sl
 80056c4:	4659      	mov	r1, fp
 80056c6:	4b09      	ldr	r3, [pc, #36]	@ (80056ec <_strtod_l+0x85c>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	f7fa ffb9 	bl	8000640 <__aeabi_dmul>
 80056ce:	4b08      	ldr	r3, [pc, #32]	@ (80056f0 <_strtod_l+0x860>)
 80056d0:	4682      	mov	sl, r0
 80056d2:	400b      	ands	r3, r1
 80056d4:	468b      	mov	fp, r1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f47f ae00 	bne.w	80052dc <_strtod_l+0x44c>
 80056dc:	2322      	movs	r3, #34	@ 0x22
 80056de:	9a05      	ldr	r2, [sp, #20]
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	e5fb      	b.n	80052dc <_strtod_l+0x44c>
 80056e4:	08008788 	.word	0x08008788
 80056e8:	fffffc02 	.word	0xfffffc02
 80056ec:	39500000 	.word	0x39500000
 80056f0:	7ff00000 	.word	0x7ff00000
 80056f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80056f8:	d165      	bne.n	80057c6 <_strtod_l+0x936>
 80056fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80056fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005700:	b35a      	cbz	r2, 800575a <_strtod_l+0x8ca>
 8005702:	4a99      	ldr	r2, [pc, #612]	@ (8005968 <_strtod_l+0xad8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d12b      	bne.n	8005760 <_strtod_l+0x8d0>
 8005708:	9b08      	ldr	r3, [sp, #32]
 800570a:	4651      	mov	r1, sl
 800570c:	b303      	cbz	r3, 8005750 <_strtod_l+0x8c0>
 800570e:	465a      	mov	r2, fp
 8005710:	4b96      	ldr	r3, [pc, #600]	@ (800596c <_strtod_l+0xadc>)
 8005712:	4013      	ands	r3, r2
 8005714:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005718:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800571c:	d81b      	bhi.n	8005756 <_strtod_l+0x8c6>
 800571e:	0d1b      	lsrs	r3, r3, #20
 8005720:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	4299      	cmp	r1, r3
 800572a:	d119      	bne.n	8005760 <_strtod_l+0x8d0>
 800572c:	4b90      	ldr	r3, [pc, #576]	@ (8005970 <_strtod_l+0xae0>)
 800572e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005730:	429a      	cmp	r2, r3
 8005732:	d102      	bne.n	800573a <_strtod_l+0x8aa>
 8005734:	3101      	adds	r1, #1
 8005736:	f43f adc6 	beq.w	80052c6 <_strtod_l+0x436>
 800573a:	f04f 0a00 	mov.w	sl, #0
 800573e:	4b8b      	ldr	r3, [pc, #556]	@ (800596c <_strtod_l+0xadc>)
 8005740:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005742:	401a      	ands	r2, r3
 8005744:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005748:	9b08      	ldr	r3, [sp, #32]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1b9      	bne.n	80056c2 <_strtod_l+0x832>
 800574e:	e5c5      	b.n	80052dc <_strtod_l+0x44c>
 8005750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005754:	e7e8      	b.n	8005728 <_strtod_l+0x898>
 8005756:	4613      	mov	r3, r2
 8005758:	e7e6      	b.n	8005728 <_strtod_l+0x898>
 800575a:	ea53 030a 	orrs.w	r3, r3, sl
 800575e:	d0a2      	beq.n	80056a6 <_strtod_l+0x816>
 8005760:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005762:	b1db      	cbz	r3, 800579c <_strtod_l+0x90c>
 8005764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005766:	4213      	tst	r3, r2
 8005768:	d0ee      	beq.n	8005748 <_strtod_l+0x8b8>
 800576a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800576c:	4650      	mov	r0, sl
 800576e:	4659      	mov	r1, fp
 8005770:	9a08      	ldr	r2, [sp, #32]
 8005772:	b1bb      	cbz	r3, 80057a4 <_strtod_l+0x914>
 8005774:	f7ff fb6a 	bl	8004e4c <sulp>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005780:	f7fa fda8 	bl	80002d4 <__adddf3>
 8005784:	4682      	mov	sl, r0
 8005786:	468b      	mov	fp, r1
 8005788:	e7de      	b.n	8005748 <_strtod_l+0x8b8>
 800578a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800578e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005792:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005796:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800579a:	e7d5      	b.n	8005748 <_strtod_l+0x8b8>
 800579c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800579e:	ea13 0f0a 	tst.w	r3, sl
 80057a2:	e7e1      	b.n	8005768 <_strtod_l+0x8d8>
 80057a4:	f7ff fb52 	bl	8004e4c <sulp>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057b0:	f7fa fd8e 	bl	80002d0 <__aeabi_dsub>
 80057b4:	2200      	movs	r2, #0
 80057b6:	2300      	movs	r3, #0
 80057b8:	4682      	mov	sl, r0
 80057ba:	468b      	mov	fp, r1
 80057bc:	f7fb f9a8 	bl	8000b10 <__aeabi_dcmpeq>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d0c1      	beq.n	8005748 <_strtod_l+0x8b8>
 80057c4:	e615      	b.n	80053f2 <_strtod_l+0x562>
 80057c6:	4641      	mov	r1, r8
 80057c8:	4620      	mov	r0, r4
 80057ca:	f002 facf 	bl	8007d6c <__ratio>
 80057ce:	2200      	movs	r2, #0
 80057d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
 80057d8:	f7fb f9ae 	bl	8000b38 <__aeabi_dcmple>
 80057dc:	2800      	cmp	r0, #0
 80057de:	d06d      	beq.n	80058bc <_strtod_l+0xa2c>
 80057e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d178      	bne.n	80058d8 <_strtod_l+0xa48>
 80057e6:	f1ba 0f00 	cmp.w	sl, #0
 80057ea:	d156      	bne.n	800589a <_strtod_l+0xa0a>
 80057ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d158      	bne.n	80058a8 <_strtod_l+0xa18>
 80057f6:	2200      	movs	r2, #0
 80057f8:	4630      	mov	r0, r6
 80057fa:	4639      	mov	r1, r7
 80057fc:	4b5d      	ldr	r3, [pc, #372]	@ (8005974 <_strtod_l+0xae4>)
 80057fe:	f7fb f991 	bl	8000b24 <__aeabi_dcmplt>
 8005802:	2800      	cmp	r0, #0
 8005804:	d157      	bne.n	80058b6 <_strtod_l+0xa26>
 8005806:	4630      	mov	r0, r6
 8005808:	4639      	mov	r1, r7
 800580a:	2200      	movs	r2, #0
 800580c:	4b5a      	ldr	r3, [pc, #360]	@ (8005978 <_strtod_l+0xae8>)
 800580e:	f7fa ff17 	bl	8000640 <__aeabi_dmul>
 8005812:	4606      	mov	r6, r0
 8005814:	460f      	mov	r7, r1
 8005816:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800581a:	9606      	str	r6, [sp, #24]
 800581c:	9307      	str	r3, [sp, #28]
 800581e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005822:	4d52      	ldr	r5, [pc, #328]	@ (800596c <_strtod_l+0xadc>)
 8005824:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800582a:	401d      	ands	r5, r3
 800582c:	4b53      	ldr	r3, [pc, #332]	@ (800597c <_strtod_l+0xaec>)
 800582e:	429d      	cmp	r5, r3
 8005830:	f040 80aa 	bne.w	8005988 <_strtod_l+0xaf8>
 8005834:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005836:	4650      	mov	r0, sl
 8005838:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800583c:	4659      	mov	r1, fp
 800583e:	f002 f9d5 	bl	8007bec <__ulp>
 8005842:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005846:	f7fa fefb 	bl	8000640 <__aeabi_dmul>
 800584a:	4652      	mov	r2, sl
 800584c:	465b      	mov	r3, fp
 800584e:	f7fa fd41 	bl	80002d4 <__adddf3>
 8005852:	460b      	mov	r3, r1
 8005854:	4945      	ldr	r1, [pc, #276]	@ (800596c <_strtod_l+0xadc>)
 8005856:	4a4a      	ldr	r2, [pc, #296]	@ (8005980 <_strtod_l+0xaf0>)
 8005858:	4019      	ands	r1, r3
 800585a:	4291      	cmp	r1, r2
 800585c:	4682      	mov	sl, r0
 800585e:	d942      	bls.n	80058e6 <_strtod_l+0xa56>
 8005860:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005862:	4b43      	ldr	r3, [pc, #268]	@ (8005970 <_strtod_l+0xae0>)
 8005864:	429a      	cmp	r2, r3
 8005866:	d103      	bne.n	8005870 <_strtod_l+0x9e0>
 8005868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800586a:	3301      	adds	r3, #1
 800586c:	f43f ad2b 	beq.w	80052c6 <_strtod_l+0x436>
 8005870:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005874:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005970 <_strtod_l+0xae0>
 8005878:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800587a:	9805      	ldr	r0, [sp, #20]
 800587c:	f001 fe84 	bl	8007588 <_Bfree>
 8005880:	4649      	mov	r1, r9
 8005882:	9805      	ldr	r0, [sp, #20]
 8005884:	f001 fe80 	bl	8007588 <_Bfree>
 8005888:	4641      	mov	r1, r8
 800588a:	9805      	ldr	r0, [sp, #20]
 800588c:	f001 fe7c 	bl	8007588 <_Bfree>
 8005890:	4621      	mov	r1, r4
 8005892:	9805      	ldr	r0, [sp, #20]
 8005894:	f001 fe78 	bl	8007588 <_Bfree>
 8005898:	e618      	b.n	80054cc <_strtod_l+0x63c>
 800589a:	f1ba 0f01 	cmp.w	sl, #1
 800589e:	d103      	bne.n	80058a8 <_strtod_l+0xa18>
 80058a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f43f ada5 	beq.w	80053f2 <_strtod_l+0x562>
 80058a8:	2200      	movs	r2, #0
 80058aa:	4b36      	ldr	r3, [pc, #216]	@ (8005984 <_strtod_l+0xaf4>)
 80058ac:	2600      	movs	r6, #0
 80058ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80058b2:	4f30      	ldr	r7, [pc, #192]	@ (8005974 <_strtod_l+0xae4>)
 80058b4:	e7b3      	b.n	800581e <_strtod_l+0x98e>
 80058b6:	2600      	movs	r6, #0
 80058b8:	4f2f      	ldr	r7, [pc, #188]	@ (8005978 <_strtod_l+0xae8>)
 80058ba:	e7ac      	b.n	8005816 <_strtod_l+0x986>
 80058bc:	4630      	mov	r0, r6
 80058be:	4639      	mov	r1, r7
 80058c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005978 <_strtod_l+0xae8>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	f7fa febc 	bl	8000640 <__aeabi_dmul>
 80058c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058ca:	4606      	mov	r6, r0
 80058cc:	460f      	mov	r7, r1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0a1      	beq.n	8005816 <_strtod_l+0x986>
 80058d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80058d6:	e7a2      	b.n	800581e <_strtod_l+0x98e>
 80058d8:	2200      	movs	r2, #0
 80058da:	4b26      	ldr	r3, [pc, #152]	@ (8005974 <_strtod_l+0xae4>)
 80058dc:	4616      	mov	r6, r2
 80058de:	461f      	mov	r7, r3
 80058e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80058e4:	e79b      	b.n	800581e <_strtod_l+0x98e>
 80058e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80058ea:	9b08      	ldr	r3, [sp, #32]
 80058ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1c1      	bne.n	8005878 <_strtod_l+0x9e8>
 80058f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80058f8:	0d1b      	lsrs	r3, r3, #20
 80058fa:	051b      	lsls	r3, r3, #20
 80058fc:	429d      	cmp	r5, r3
 80058fe:	d1bb      	bne.n	8005878 <_strtod_l+0x9e8>
 8005900:	4630      	mov	r0, r6
 8005902:	4639      	mov	r1, r7
 8005904:	f7fb fa5a 	bl	8000dbc <__aeabi_d2lz>
 8005908:	f7fa fe6c 	bl	80005e4 <__aeabi_l2d>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4630      	mov	r0, r6
 8005912:	4639      	mov	r1, r7
 8005914:	f7fa fcdc 	bl	80002d0 <__aeabi_dsub>
 8005918:	460b      	mov	r3, r1
 800591a:	4602      	mov	r2, r0
 800591c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005920:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005926:	ea46 060a 	orr.w	r6, r6, sl
 800592a:	431e      	orrs	r6, r3
 800592c:	d069      	beq.n	8005a02 <_strtod_l+0xb72>
 800592e:	a30a      	add	r3, pc, #40	@ (adr r3, 8005958 <_strtod_l+0xac8>)
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	f7fb f8f6 	bl	8000b24 <__aeabi_dcmplt>
 8005938:	2800      	cmp	r0, #0
 800593a:	f47f accf 	bne.w	80052dc <_strtod_l+0x44c>
 800593e:	a308      	add	r3, pc, #32	@ (adr r3, 8005960 <_strtod_l+0xad0>)
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005948:	f7fb f90a 	bl	8000b60 <__aeabi_dcmpgt>
 800594c:	2800      	cmp	r0, #0
 800594e:	d093      	beq.n	8005878 <_strtod_l+0x9e8>
 8005950:	e4c4      	b.n	80052dc <_strtod_l+0x44c>
 8005952:	bf00      	nop
 8005954:	f3af 8000 	nop.w
 8005958:	94a03595 	.word	0x94a03595
 800595c:	3fdfffff 	.word	0x3fdfffff
 8005960:	35afe535 	.word	0x35afe535
 8005964:	3fe00000 	.word	0x3fe00000
 8005968:	000fffff 	.word	0x000fffff
 800596c:	7ff00000 	.word	0x7ff00000
 8005970:	7fefffff 	.word	0x7fefffff
 8005974:	3ff00000 	.word	0x3ff00000
 8005978:	3fe00000 	.word	0x3fe00000
 800597c:	7fe00000 	.word	0x7fe00000
 8005980:	7c9fffff 	.word	0x7c9fffff
 8005984:	bff00000 	.word	0xbff00000
 8005988:	9b08      	ldr	r3, [sp, #32]
 800598a:	b323      	cbz	r3, 80059d6 <_strtod_l+0xb46>
 800598c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005990:	d821      	bhi.n	80059d6 <_strtod_l+0xb46>
 8005992:	a327      	add	r3, pc, #156	@ (adr r3, 8005a30 <_strtod_l+0xba0>)
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	4630      	mov	r0, r6
 800599a:	4639      	mov	r1, r7
 800599c:	f7fb f8cc 	bl	8000b38 <__aeabi_dcmple>
 80059a0:	b1a0      	cbz	r0, 80059cc <_strtod_l+0xb3c>
 80059a2:	4639      	mov	r1, r7
 80059a4:	4630      	mov	r0, r6
 80059a6:	f7fb f923 	bl	8000bf0 <__aeabi_d2uiz>
 80059aa:	2801      	cmp	r0, #1
 80059ac:	bf38      	it	cc
 80059ae:	2001      	movcc	r0, #1
 80059b0:	f7fa fdcc 	bl	800054c <__aeabi_ui2d>
 80059b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059b6:	4606      	mov	r6, r0
 80059b8:	460f      	mov	r7, r1
 80059ba:	b9fb      	cbnz	r3, 80059fc <_strtod_l+0xb6c>
 80059bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80059c0:	9014      	str	r0, [sp, #80]	@ 0x50
 80059c2:	9315      	str	r3, [sp, #84]	@ 0x54
 80059c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80059c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80059cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80059ce:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80059d2:	1b5b      	subs	r3, r3, r5
 80059d4:	9311      	str	r3, [sp, #68]	@ 0x44
 80059d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059da:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80059de:	f002 f905 	bl	8007bec <__ulp>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4650      	mov	r0, sl
 80059e8:	4659      	mov	r1, fp
 80059ea:	f7fa fe29 	bl	8000640 <__aeabi_dmul>
 80059ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80059f2:	f7fa fc6f 	bl	80002d4 <__adddf3>
 80059f6:	4682      	mov	sl, r0
 80059f8:	468b      	mov	fp, r1
 80059fa:	e776      	b.n	80058ea <_strtod_l+0xa5a>
 80059fc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005a00:	e7e0      	b.n	80059c4 <_strtod_l+0xb34>
 8005a02:	a30d      	add	r3, pc, #52	@ (adr r3, 8005a38 <_strtod_l+0xba8>)
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f7fb f88c 	bl	8000b24 <__aeabi_dcmplt>
 8005a0c:	e79e      	b.n	800594c <_strtod_l+0xabc>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a14:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	f7ff ba77 	b.w	8004f0a <_strtod_l+0x7a>
 8005a1c:	2a65      	cmp	r2, #101	@ 0x65
 8005a1e:	f43f ab6e 	beq.w	80050fe <_strtod_l+0x26e>
 8005a22:	2a45      	cmp	r2, #69	@ 0x45
 8005a24:	f43f ab6b 	beq.w	80050fe <_strtod_l+0x26e>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f7ff bba6 	b.w	800517a <_strtod_l+0x2ea>
 8005a2e:	bf00      	nop
 8005a30:	ffc00000 	.word	0xffc00000
 8005a34:	41dfffff 	.word	0x41dfffff
 8005a38:	94a03595 	.word	0x94a03595
 8005a3c:	3fcfffff 	.word	0x3fcfffff

08005a40 <_strtod_r>:
 8005a40:	4b01      	ldr	r3, [pc, #4]	@ (8005a48 <_strtod_r+0x8>)
 8005a42:	f7ff ba25 	b.w	8004e90 <_strtod_l>
 8005a46:	bf00      	nop
 8005a48:	2000001c 	.word	0x2000001c

08005a4c <_strtol_l.constprop.0>:
 8005a4c:	2b24      	cmp	r3, #36	@ 0x24
 8005a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a52:	4686      	mov	lr, r0
 8005a54:	4690      	mov	r8, r2
 8005a56:	d801      	bhi.n	8005a5c <_strtol_l.constprop.0+0x10>
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d106      	bne.n	8005a6a <_strtol_l.constprop.0+0x1e>
 8005a5c:	f000 f8ae 	bl	8005bbc <__errno>
 8005a60:	2316      	movs	r3, #22
 8005a62:	6003      	str	r3, [r0, #0]
 8005a64:	2000      	movs	r0, #0
 8005a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6a:	460d      	mov	r5, r1
 8005a6c:	4833      	ldr	r0, [pc, #204]	@ (8005b3c <_strtol_l.constprop.0+0xf0>)
 8005a6e:	462a      	mov	r2, r5
 8005a70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a74:	5d06      	ldrb	r6, [r0, r4]
 8005a76:	f016 0608 	ands.w	r6, r6, #8
 8005a7a:	d1f8      	bne.n	8005a6e <_strtol_l.constprop.0+0x22>
 8005a7c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005a7e:	d12d      	bne.n	8005adc <_strtol_l.constprop.0+0x90>
 8005a80:	2601      	movs	r6, #1
 8005a82:	782c      	ldrb	r4, [r5, #0]
 8005a84:	1c95      	adds	r5, r2, #2
 8005a86:	f033 0210 	bics.w	r2, r3, #16
 8005a8a:	d109      	bne.n	8005aa0 <_strtol_l.constprop.0+0x54>
 8005a8c:	2c30      	cmp	r4, #48	@ 0x30
 8005a8e:	d12a      	bne.n	8005ae6 <_strtol_l.constprop.0+0x9a>
 8005a90:	782a      	ldrb	r2, [r5, #0]
 8005a92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a96:	2a58      	cmp	r2, #88	@ 0x58
 8005a98:	d125      	bne.n	8005ae6 <_strtol_l.constprop.0+0x9a>
 8005a9a:	2310      	movs	r3, #16
 8005a9c:	786c      	ldrb	r4, [r5, #1]
 8005a9e:	3502      	adds	r5, #2
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005aa6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005aaa:	fbbc f9f3 	udiv	r9, ip, r3
 8005aae:	4610      	mov	r0, r2
 8005ab0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005ab4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005ab8:	2f09      	cmp	r7, #9
 8005aba:	d81b      	bhi.n	8005af4 <_strtol_l.constprop.0+0xa8>
 8005abc:	463c      	mov	r4, r7
 8005abe:	42a3      	cmp	r3, r4
 8005ac0:	dd27      	ble.n	8005b12 <_strtol_l.constprop.0+0xc6>
 8005ac2:	1c57      	adds	r7, r2, #1
 8005ac4:	d007      	beq.n	8005ad6 <_strtol_l.constprop.0+0x8a>
 8005ac6:	4581      	cmp	r9, r0
 8005ac8:	d320      	bcc.n	8005b0c <_strtol_l.constprop.0+0xc0>
 8005aca:	d101      	bne.n	8005ad0 <_strtol_l.constprop.0+0x84>
 8005acc:	45a2      	cmp	sl, r4
 8005ace:	db1d      	blt.n	8005b0c <_strtol_l.constprop.0+0xc0>
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	fb00 4003 	mla	r0, r0, r3, r4
 8005ad6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ada:	e7eb      	b.n	8005ab4 <_strtol_l.constprop.0+0x68>
 8005adc:	2c2b      	cmp	r4, #43	@ 0x2b
 8005ade:	bf04      	itt	eq
 8005ae0:	782c      	ldrbeq	r4, [r5, #0]
 8005ae2:	1c95      	addeq	r5, r2, #2
 8005ae4:	e7cf      	b.n	8005a86 <_strtol_l.constprop.0+0x3a>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1da      	bne.n	8005aa0 <_strtol_l.constprop.0+0x54>
 8005aea:	2c30      	cmp	r4, #48	@ 0x30
 8005aec:	bf0c      	ite	eq
 8005aee:	2308      	moveq	r3, #8
 8005af0:	230a      	movne	r3, #10
 8005af2:	e7d5      	b.n	8005aa0 <_strtol_l.constprop.0+0x54>
 8005af4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005af8:	2f19      	cmp	r7, #25
 8005afa:	d801      	bhi.n	8005b00 <_strtol_l.constprop.0+0xb4>
 8005afc:	3c37      	subs	r4, #55	@ 0x37
 8005afe:	e7de      	b.n	8005abe <_strtol_l.constprop.0+0x72>
 8005b00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005b04:	2f19      	cmp	r7, #25
 8005b06:	d804      	bhi.n	8005b12 <_strtol_l.constprop.0+0xc6>
 8005b08:	3c57      	subs	r4, #87	@ 0x57
 8005b0a:	e7d8      	b.n	8005abe <_strtol_l.constprop.0+0x72>
 8005b0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b10:	e7e1      	b.n	8005ad6 <_strtol_l.constprop.0+0x8a>
 8005b12:	1c53      	adds	r3, r2, #1
 8005b14:	d108      	bne.n	8005b28 <_strtol_l.constprop.0+0xdc>
 8005b16:	2322      	movs	r3, #34	@ 0x22
 8005b18:	4660      	mov	r0, ip
 8005b1a:	f8ce 3000 	str.w	r3, [lr]
 8005b1e:	f1b8 0f00 	cmp.w	r8, #0
 8005b22:	d0a0      	beq.n	8005a66 <_strtol_l.constprop.0+0x1a>
 8005b24:	1e69      	subs	r1, r5, #1
 8005b26:	e006      	b.n	8005b36 <_strtol_l.constprop.0+0xea>
 8005b28:	b106      	cbz	r6, 8005b2c <_strtol_l.constprop.0+0xe0>
 8005b2a:	4240      	negs	r0, r0
 8005b2c:	f1b8 0f00 	cmp.w	r8, #0
 8005b30:	d099      	beq.n	8005a66 <_strtol_l.constprop.0+0x1a>
 8005b32:	2a00      	cmp	r2, #0
 8005b34:	d1f6      	bne.n	8005b24 <_strtol_l.constprop.0+0xd8>
 8005b36:	f8c8 1000 	str.w	r1, [r8]
 8005b3a:	e794      	b.n	8005a66 <_strtol_l.constprop.0+0x1a>
 8005b3c:	080087b9 	.word	0x080087b9

08005b40 <_strtol_r>:
 8005b40:	f7ff bf84 	b.w	8005a4c <_strtol_l.constprop.0>

08005b44 <_fwalk_sglue>:
 8005b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b48:	4607      	mov	r7, r0
 8005b4a:	4688      	mov	r8, r1
 8005b4c:	4614      	mov	r4, r2
 8005b4e:	2600      	movs	r6, #0
 8005b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b54:	f1b9 0901 	subs.w	r9, r9, #1
 8005b58:	d505      	bpl.n	8005b66 <_fwalk_sglue+0x22>
 8005b5a:	6824      	ldr	r4, [r4, #0]
 8005b5c:	2c00      	cmp	r4, #0
 8005b5e:	d1f7      	bne.n	8005b50 <_fwalk_sglue+0xc>
 8005b60:	4630      	mov	r0, r6
 8005b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b66:	89ab      	ldrh	r3, [r5, #12]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d907      	bls.n	8005b7c <_fwalk_sglue+0x38>
 8005b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b70:	3301      	adds	r3, #1
 8005b72:	d003      	beq.n	8005b7c <_fwalk_sglue+0x38>
 8005b74:	4629      	mov	r1, r5
 8005b76:	4638      	mov	r0, r7
 8005b78:	47c0      	blx	r8
 8005b7a:	4306      	orrs	r6, r0
 8005b7c:	3568      	adds	r5, #104	@ 0x68
 8005b7e:	e7e9      	b.n	8005b54 <_fwalk_sglue+0x10>

08005b80 <strncmp>:
 8005b80:	b510      	push	{r4, lr}
 8005b82:	b16a      	cbz	r2, 8005ba0 <strncmp+0x20>
 8005b84:	3901      	subs	r1, #1
 8005b86:	1884      	adds	r4, r0, r2
 8005b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d103      	bne.n	8005b9c <strncmp+0x1c>
 8005b94:	42a0      	cmp	r0, r4
 8005b96:	d001      	beq.n	8005b9c <strncmp+0x1c>
 8005b98:	2a00      	cmp	r2, #0
 8005b9a:	d1f5      	bne.n	8005b88 <strncmp+0x8>
 8005b9c:	1ad0      	subs	r0, r2, r3
 8005b9e:	bd10      	pop	{r4, pc}
 8005ba0:	4610      	mov	r0, r2
 8005ba2:	e7fc      	b.n	8005b9e <strncmp+0x1e>

08005ba4 <memset>:
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	4402      	add	r2, r0
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d100      	bne.n	8005bae <memset+0xa>
 8005bac:	4770      	bx	lr
 8005bae:	f803 1b01 	strb.w	r1, [r3], #1
 8005bb2:	e7f9      	b.n	8005ba8 <memset+0x4>

08005bb4 <_localeconv_r>:
 8005bb4:	4800      	ldr	r0, [pc, #0]	@ (8005bb8 <_localeconv_r+0x4>)
 8005bb6:	4770      	bx	lr
 8005bb8:	2000010c 	.word	0x2000010c

08005bbc <__errno>:
 8005bbc:	4b01      	ldr	r3, [pc, #4]	@ (8005bc4 <__errno+0x8>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000188 	.word	0x20000188

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	2600      	movs	r6, #0
 8005bcc:	4d0c      	ldr	r5, [pc, #48]	@ (8005c00 <__libc_init_array+0x38>)
 8005bce:	4c0d      	ldr	r4, [pc, #52]	@ (8005c04 <__libc_init_array+0x3c>)
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	f002 fd60 	bl	800869c <_init>
 8005bdc:	2600      	movs	r6, #0
 8005bde:	4d0a      	ldr	r5, [pc, #40]	@ (8005c08 <__libc_init_array+0x40>)
 8005be0:	4c0a      	ldr	r4, [pc, #40]	@ (8005c0c <__libc_init_array+0x44>)
 8005be2:	1b64      	subs	r4, r4, r5
 8005be4:	10a4      	asrs	r4, r4, #2
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	08008b54 	.word	0x08008b54
 8005c04:	08008b54 	.word	0x08008b54
 8005c08:	08008b54 	.word	0x08008b54
 8005c0c:	08008b58 	.word	0x08008b58

08005c10 <__retarget_lock_init_recursive>:
 8005c10:	4770      	bx	lr

08005c12 <__retarget_lock_acquire_recursive>:
 8005c12:	4770      	bx	lr

08005c14 <__retarget_lock_release_recursive>:
 8005c14:	4770      	bx	lr

08005c16 <memchr>:
 8005c16:	4603      	mov	r3, r0
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	b2c9      	uxtb	r1, r1
 8005c1c:	4402      	add	r2, r0
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	4618      	mov	r0, r3
 8005c22:	d101      	bne.n	8005c28 <memchr+0x12>
 8005c24:	2000      	movs	r0, #0
 8005c26:	e003      	b.n	8005c30 <memchr+0x1a>
 8005c28:	7804      	ldrb	r4, [r0, #0]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	428c      	cmp	r4, r1
 8005c2e:	d1f6      	bne.n	8005c1e <memchr+0x8>
 8005c30:	bd10      	pop	{r4, pc}

08005c32 <memcpy>:
 8005c32:	440a      	add	r2, r1
 8005c34:	4291      	cmp	r1, r2
 8005c36:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005c3a:	d100      	bne.n	8005c3e <memcpy+0xc>
 8005c3c:	4770      	bx	lr
 8005c3e:	b510      	push	{r4, lr}
 8005c40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c44:	4291      	cmp	r1, r2
 8005c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c4a:	d1f9      	bne.n	8005c40 <memcpy+0xe>
 8005c4c:	bd10      	pop	{r4, pc}
	...

08005c50 <nan>:
 8005c50:	2000      	movs	r0, #0
 8005c52:	4901      	ldr	r1, [pc, #4]	@ (8005c58 <nan+0x8>)
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	7ff80000 	.word	0x7ff80000

08005c5c <nanf>:
 8005c5c:	4800      	ldr	r0, [pc, #0]	@ (8005c60 <nanf+0x4>)
 8005c5e:	4770      	bx	lr
 8005c60:	7fc00000 	.word	0x7fc00000

08005c64 <quorem>:
 8005c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c68:	6903      	ldr	r3, [r0, #16]
 8005c6a:	690c      	ldr	r4, [r1, #16]
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	42a3      	cmp	r3, r4
 8005c70:	db7e      	blt.n	8005d70 <quorem+0x10c>
 8005c72:	3c01      	subs	r4, #1
 8005c74:	00a3      	lsls	r3, r4, #2
 8005c76:	f100 0514 	add.w	r5, r0, #20
 8005c7a:	f101 0814 	add.w	r8, r1, #20
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c84:	9301      	str	r3, [sp, #4]
 8005c86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	429a      	cmp	r2, r3
 8005c92:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c9a:	d32e      	bcc.n	8005cfa <quorem+0x96>
 8005c9c:	f04f 0a00 	mov.w	sl, #0
 8005ca0:	46c4      	mov	ip, r8
 8005ca2:	46ae      	mov	lr, r5
 8005ca4:	46d3      	mov	fp, sl
 8005ca6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005caa:	b298      	uxth	r0, r3
 8005cac:	fb06 a000 	mla	r0, r6, r0, sl
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	0c02      	lsrs	r2, r0, #16
 8005cb4:	fb06 2303 	mla	r3, r6, r3, r2
 8005cb8:	f8de 2000 	ldr.w	r2, [lr]
 8005cbc:	b280      	uxth	r0, r0
 8005cbe:	b292      	uxth	r2, r2
 8005cc0:	1a12      	subs	r2, r2, r0
 8005cc2:	445a      	add	r2, fp
 8005cc4:	f8de 0000 	ldr.w	r0, [lr]
 8005cc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005cd2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005cd6:	b292      	uxth	r2, r2
 8005cd8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005cdc:	45e1      	cmp	r9, ip
 8005cde:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005ce2:	f84e 2b04 	str.w	r2, [lr], #4
 8005ce6:	d2de      	bcs.n	8005ca6 <quorem+0x42>
 8005ce8:	9b00      	ldr	r3, [sp, #0]
 8005cea:	58eb      	ldr	r3, [r5, r3]
 8005cec:	b92b      	cbnz	r3, 8005cfa <quorem+0x96>
 8005cee:	9b01      	ldr	r3, [sp, #4]
 8005cf0:	3b04      	subs	r3, #4
 8005cf2:	429d      	cmp	r5, r3
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	d32f      	bcc.n	8005d58 <quorem+0xf4>
 8005cf8:	613c      	str	r4, [r7, #16]
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	f001 fec6 	bl	8007a8c <__mcmp>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	db25      	blt.n	8005d50 <quorem+0xec>
 8005d04:	4629      	mov	r1, r5
 8005d06:	2000      	movs	r0, #0
 8005d08:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d0c:	f8d1 c000 	ldr.w	ip, [r1]
 8005d10:	fa1f fe82 	uxth.w	lr, r2
 8005d14:	fa1f f38c 	uxth.w	r3, ip
 8005d18:	eba3 030e 	sub.w	r3, r3, lr
 8005d1c:	4403      	add	r3, r0
 8005d1e:	0c12      	lsrs	r2, r2, #16
 8005d20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d2e:	45c1      	cmp	r9, r8
 8005d30:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d34:	f841 3b04 	str.w	r3, [r1], #4
 8005d38:	d2e6      	bcs.n	8005d08 <quorem+0xa4>
 8005d3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d42:	b922      	cbnz	r2, 8005d4e <quorem+0xea>
 8005d44:	3b04      	subs	r3, #4
 8005d46:	429d      	cmp	r5, r3
 8005d48:	461a      	mov	r2, r3
 8005d4a:	d30b      	bcc.n	8005d64 <quorem+0x100>
 8005d4c:	613c      	str	r4, [r7, #16]
 8005d4e:	3601      	adds	r6, #1
 8005d50:	4630      	mov	r0, r6
 8005d52:	b003      	add	sp, #12
 8005d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	3b04      	subs	r3, #4
 8005d5c:	2a00      	cmp	r2, #0
 8005d5e:	d1cb      	bne.n	8005cf8 <quorem+0x94>
 8005d60:	3c01      	subs	r4, #1
 8005d62:	e7c6      	b.n	8005cf2 <quorem+0x8e>
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	3b04      	subs	r3, #4
 8005d68:	2a00      	cmp	r2, #0
 8005d6a:	d1ef      	bne.n	8005d4c <quorem+0xe8>
 8005d6c:	3c01      	subs	r4, #1
 8005d6e:	e7ea      	b.n	8005d46 <quorem+0xe2>
 8005d70:	2000      	movs	r0, #0
 8005d72:	e7ee      	b.n	8005d52 <quorem+0xee>
 8005d74:	0000      	movs	r0, r0
	...

08005d78 <_dtoa_r>:
 8005d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	461d      	mov	r5, r3
 8005d80:	69c7      	ldr	r7, [r0, #28]
 8005d82:	b097      	sub	sp, #92	@ 0x5c
 8005d84:	4683      	mov	fp, r0
 8005d86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005d8a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005d8c:	b97f      	cbnz	r7, 8005dae <_dtoa_r+0x36>
 8005d8e:	2010      	movs	r0, #16
 8005d90:	f001 fa4a 	bl	8007228 <malloc>
 8005d94:	4602      	mov	r2, r0
 8005d96:	f8cb 001c 	str.w	r0, [fp, #28]
 8005d9a:	b920      	cbnz	r0, 8005da6 <_dtoa_r+0x2e>
 8005d9c:	21ef      	movs	r1, #239	@ 0xef
 8005d9e:	4ba8      	ldr	r3, [pc, #672]	@ (8006040 <_dtoa_r+0x2c8>)
 8005da0:	48a8      	ldr	r0, [pc, #672]	@ (8006044 <_dtoa_r+0x2cc>)
 8005da2:	f002 f945 	bl	8008030 <__assert_func>
 8005da6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005daa:	6007      	str	r7, [r0, #0]
 8005dac:	60c7      	str	r7, [r0, #12]
 8005dae:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005db2:	6819      	ldr	r1, [r3, #0]
 8005db4:	b159      	cbz	r1, 8005dce <_dtoa_r+0x56>
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	2301      	movs	r3, #1
 8005dba:	4093      	lsls	r3, r2
 8005dbc:	604a      	str	r2, [r1, #4]
 8005dbe:	608b      	str	r3, [r1, #8]
 8005dc0:	4658      	mov	r0, fp
 8005dc2:	f001 fbe1 	bl	8007588 <_Bfree>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	1e2b      	subs	r3, r5, #0
 8005dd0:	bfaf      	iteee	ge
 8005dd2:	2300      	movge	r3, #0
 8005dd4:	2201      	movlt	r2, #1
 8005dd6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005dda:	9303      	strlt	r3, [sp, #12]
 8005ddc:	bfa8      	it	ge
 8005dde:	6033      	strge	r3, [r6, #0]
 8005de0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005de4:	4b98      	ldr	r3, [pc, #608]	@ (8006048 <_dtoa_r+0x2d0>)
 8005de6:	bfb8      	it	lt
 8005de8:	6032      	strlt	r2, [r6, #0]
 8005dea:	ea33 0308 	bics.w	r3, r3, r8
 8005dee:	d112      	bne.n	8005e16 <_dtoa_r+0x9e>
 8005df0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005df4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005dfc:	4323      	orrs	r3, r4
 8005dfe:	f000 8550 	beq.w	80068a2 <_dtoa_r+0xb2a>
 8005e02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e04:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800604c <_dtoa_r+0x2d4>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 8552 	beq.w	80068b2 <_dtoa_r+0xb3a>
 8005e0e:	f10a 0303 	add.w	r3, sl, #3
 8005e12:	f000 bd4c 	b.w	80068ae <_dtoa_r+0xb36>
 8005e16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e1a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005e1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e22:	2200      	movs	r2, #0
 8005e24:	2300      	movs	r3, #0
 8005e26:	f7fa fe73 	bl	8000b10 <__aeabi_dcmpeq>
 8005e2a:	4607      	mov	r7, r0
 8005e2c:	b158      	cbz	r0, 8005e46 <_dtoa_r+0xce>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e36:	b113      	cbz	r3, 8005e3e <_dtoa_r+0xc6>
 8005e38:	4b85      	ldr	r3, [pc, #532]	@ (8006050 <_dtoa_r+0x2d8>)
 8005e3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006054 <_dtoa_r+0x2dc>
 8005e42:	f000 bd36 	b.w	80068b2 <_dtoa_r+0xb3a>
 8005e46:	ab14      	add	r3, sp, #80	@ 0x50
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	ab15      	add	r3, sp, #84	@ 0x54
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	4658      	mov	r0, fp
 8005e50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005e54:	f001 ff32 	bl	8007cbc <__d2b>
 8005e58:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005e5c:	4681      	mov	r9, r0
 8005e5e:	2e00      	cmp	r6, #0
 8005e60:	d077      	beq.n	8005f52 <_dtoa_r+0x1da>
 8005e62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e68:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e70:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e74:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e78:	9712      	str	r7, [sp, #72]	@ 0x48
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	4b76      	ldr	r3, [pc, #472]	@ (8006058 <_dtoa_r+0x2e0>)
 8005e80:	f7fa fa26 	bl	80002d0 <__aeabi_dsub>
 8005e84:	a368      	add	r3, pc, #416	@ (adr r3, 8006028 <_dtoa_r+0x2b0>)
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	f7fa fbd9 	bl	8000640 <__aeabi_dmul>
 8005e8e:	a368      	add	r3, pc, #416	@ (adr r3, 8006030 <_dtoa_r+0x2b8>)
 8005e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e94:	f7fa fa1e 	bl	80002d4 <__adddf3>
 8005e98:	4604      	mov	r4, r0
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	460d      	mov	r5, r1
 8005e9e:	f7fa fb65 	bl	800056c <__aeabi_i2d>
 8005ea2:	a365      	add	r3, pc, #404	@ (adr r3, 8006038 <_dtoa_r+0x2c0>)
 8005ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea8:	f7fa fbca 	bl	8000640 <__aeabi_dmul>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	f7fa fa0e 	bl	80002d4 <__adddf3>
 8005eb8:	4604      	mov	r4, r0
 8005eba:	460d      	mov	r5, r1
 8005ebc:	f7fa fe70 	bl	8000ba0 <__aeabi_d2iz>
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	4607      	mov	r7, r0
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	4629      	mov	r1, r5
 8005eca:	f7fa fe2b 	bl	8000b24 <__aeabi_dcmplt>
 8005ece:	b140      	cbz	r0, 8005ee2 <_dtoa_r+0x16a>
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	f7fa fb4b 	bl	800056c <__aeabi_i2d>
 8005ed6:	4622      	mov	r2, r4
 8005ed8:	462b      	mov	r3, r5
 8005eda:	f7fa fe19 	bl	8000b10 <__aeabi_dcmpeq>
 8005ede:	b900      	cbnz	r0, 8005ee2 <_dtoa_r+0x16a>
 8005ee0:	3f01      	subs	r7, #1
 8005ee2:	2f16      	cmp	r7, #22
 8005ee4:	d853      	bhi.n	8005f8e <_dtoa_r+0x216>
 8005ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005eea:	4b5c      	ldr	r3, [pc, #368]	@ (800605c <_dtoa_r+0x2e4>)
 8005eec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f7fa fe16 	bl	8000b24 <__aeabi_dcmplt>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	d04a      	beq.n	8005f92 <_dtoa_r+0x21a>
 8005efc:	2300      	movs	r3, #0
 8005efe:	3f01      	subs	r7, #1
 8005f00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f04:	1b9b      	subs	r3, r3, r6
 8005f06:	1e5a      	subs	r2, r3, #1
 8005f08:	bf46      	itte	mi
 8005f0a:	f1c3 0801 	rsbmi	r8, r3, #1
 8005f0e:	2300      	movmi	r3, #0
 8005f10:	f04f 0800 	movpl.w	r8, #0
 8005f14:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f16:	bf48      	it	mi
 8005f18:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005f1a:	2f00      	cmp	r7, #0
 8005f1c:	db3b      	blt.n	8005f96 <_dtoa_r+0x21e>
 8005f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f20:	970e      	str	r7, [sp, #56]	@ 0x38
 8005f22:	443b      	add	r3, r7
 8005f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f26:	2300      	movs	r3, #0
 8005f28:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f2c:	2b09      	cmp	r3, #9
 8005f2e:	d866      	bhi.n	8005ffe <_dtoa_r+0x286>
 8005f30:	2b05      	cmp	r3, #5
 8005f32:	bfc4      	itt	gt
 8005f34:	3b04      	subgt	r3, #4
 8005f36:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005f38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f3a:	bfc8      	it	gt
 8005f3c:	2400      	movgt	r4, #0
 8005f3e:	f1a3 0302 	sub.w	r3, r3, #2
 8005f42:	bfd8      	it	le
 8005f44:	2401      	movle	r4, #1
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d864      	bhi.n	8006014 <_dtoa_r+0x29c>
 8005f4a:	e8df f003 	tbb	[pc, r3]
 8005f4e:	382b      	.short	0x382b
 8005f50:	5636      	.short	0x5636
 8005f52:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005f56:	441e      	add	r6, r3
 8005f58:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	bfc1      	itttt	gt
 8005f60:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f64:	fa08 f803 	lslgt.w	r8, r8, r3
 8005f68:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f6c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f70:	bfd6      	itet	le
 8005f72:	f1c3 0320 	rsble	r3, r3, #32
 8005f76:	ea48 0003 	orrgt.w	r0, r8, r3
 8005f7a:	fa04 f003 	lslle.w	r0, r4, r3
 8005f7e:	f7fa fae5 	bl	800054c <__aeabi_ui2d>
 8005f82:	2201      	movs	r2, #1
 8005f84:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f88:	3e01      	subs	r6, #1
 8005f8a:	9212      	str	r2, [sp, #72]	@ 0x48
 8005f8c:	e775      	b.n	8005e7a <_dtoa_r+0x102>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e7b6      	b.n	8005f00 <_dtoa_r+0x188>
 8005f92:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005f94:	e7b5      	b.n	8005f02 <_dtoa_r+0x18a>
 8005f96:	427b      	negs	r3, r7
 8005f98:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	eba8 0807 	sub.w	r8, r8, r7
 8005fa0:	930e      	str	r3, [sp, #56]	@ 0x38
 8005fa2:	e7c2      	b.n	8005f2a <_dtoa_r+0x1b2>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dc35      	bgt.n	800601a <_dtoa_r+0x2a2>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005fb6:	9221      	str	r2, [sp, #132]	@ 0x84
 8005fb8:	e00b      	b.n	8005fd2 <_dtoa_r+0x25a>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e7f3      	b.n	8005fa6 <_dtoa_r+0x22e>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	9308      	str	r3, [sp, #32]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	9307      	str	r3, [sp, #28]
 8005fce:	bfb8      	it	lt
 8005fd0:	2301      	movlt	r3, #1
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005fda:	f102 0514 	add.w	r5, r2, #20
 8005fde:	429d      	cmp	r5, r3
 8005fe0:	d91f      	bls.n	8006022 <_dtoa_r+0x2aa>
 8005fe2:	6041      	str	r1, [r0, #4]
 8005fe4:	4658      	mov	r0, fp
 8005fe6:	f001 fa8f 	bl	8007508 <_Balloc>
 8005fea:	4682      	mov	sl, r0
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d139      	bne.n	8006064 <_dtoa_r+0x2ec>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8006060 <_dtoa_r+0x2e8>)
 8005ff8:	e6d2      	b.n	8005da0 <_dtoa_r+0x28>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e7e0      	b.n	8005fc0 <_dtoa_r+0x248>
 8005ffe:	2401      	movs	r4, #1
 8006000:	2300      	movs	r3, #0
 8006002:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006004:	9320      	str	r3, [sp, #128]	@ 0x80
 8006006:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800600a:	2200      	movs	r2, #0
 800600c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006010:	2312      	movs	r3, #18
 8006012:	e7d0      	b.n	8005fb6 <_dtoa_r+0x23e>
 8006014:	2301      	movs	r3, #1
 8006016:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006018:	e7f5      	b.n	8006006 <_dtoa_r+0x28e>
 800601a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800601c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006020:	e7d7      	b.n	8005fd2 <_dtoa_r+0x25a>
 8006022:	3101      	adds	r1, #1
 8006024:	0052      	lsls	r2, r2, #1
 8006026:	e7d8      	b.n	8005fda <_dtoa_r+0x262>
 8006028:	636f4361 	.word	0x636f4361
 800602c:	3fd287a7 	.word	0x3fd287a7
 8006030:	8b60c8b3 	.word	0x8b60c8b3
 8006034:	3fc68a28 	.word	0x3fc68a28
 8006038:	509f79fb 	.word	0x509f79fb
 800603c:	3fd34413 	.word	0x3fd34413
 8006040:	080088c6 	.word	0x080088c6
 8006044:	080088dd 	.word	0x080088dd
 8006048:	7ff00000 	.word	0x7ff00000
 800604c:	080088c2 	.word	0x080088c2
 8006050:	08008733 	.word	0x08008733
 8006054:	08008732 	.word	0x08008732
 8006058:	3ff80000 	.word	0x3ff80000
 800605c:	08008a48 	.word	0x08008a48
 8006060:	08008935 	.word	0x08008935
 8006064:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006068:	6018      	str	r0, [r3, #0]
 800606a:	9b07      	ldr	r3, [sp, #28]
 800606c:	2b0e      	cmp	r3, #14
 800606e:	f200 80a4 	bhi.w	80061ba <_dtoa_r+0x442>
 8006072:	2c00      	cmp	r4, #0
 8006074:	f000 80a1 	beq.w	80061ba <_dtoa_r+0x442>
 8006078:	2f00      	cmp	r7, #0
 800607a:	dd33      	ble.n	80060e4 <_dtoa_r+0x36c>
 800607c:	4b86      	ldr	r3, [pc, #536]	@ (8006298 <_dtoa_r+0x520>)
 800607e:	f007 020f 	and.w	r2, r7, #15
 8006082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006086:	05f8      	lsls	r0, r7, #23
 8006088:	e9d3 3400 	ldrd	r3, r4, [r3]
 800608c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006090:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006094:	d516      	bpl.n	80060c4 <_dtoa_r+0x34c>
 8006096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800609a:	4b80      	ldr	r3, [pc, #512]	@ (800629c <_dtoa_r+0x524>)
 800609c:	2603      	movs	r6, #3
 800609e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060a2:	f7fa fbf7 	bl	8000894 <__aeabi_ddiv>
 80060a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060aa:	f004 040f 	and.w	r4, r4, #15
 80060ae:	4d7b      	ldr	r5, [pc, #492]	@ (800629c <_dtoa_r+0x524>)
 80060b0:	b954      	cbnz	r4, 80060c8 <_dtoa_r+0x350>
 80060b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ba:	f7fa fbeb 	bl	8000894 <__aeabi_ddiv>
 80060be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060c2:	e028      	b.n	8006116 <_dtoa_r+0x39e>
 80060c4:	2602      	movs	r6, #2
 80060c6:	e7f2      	b.n	80060ae <_dtoa_r+0x336>
 80060c8:	07e1      	lsls	r1, r4, #31
 80060ca:	d508      	bpl.n	80060de <_dtoa_r+0x366>
 80060cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060d4:	f7fa fab4 	bl	8000640 <__aeabi_dmul>
 80060d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060dc:	3601      	adds	r6, #1
 80060de:	1064      	asrs	r4, r4, #1
 80060e0:	3508      	adds	r5, #8
 80060e2:	e7e5      	b.n	80060b0 <_dtoa_r+0x338>
 80060e4:	f000 80d2 	beq.w	800628c <_dtoa_r+0x514>
 80060e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060ec:	427c      	negs	r4, r7
 80060ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006298 <_dtoa_r+0x520>)
 80060f0:	f004 020f 	and.w	r2, r4, #15
 80060f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	f7fa faa0 	bl	8000640 <__aeabi_dmul>
 8006100:	2602      	movs	r6, #2
 8006102:	2300      	movs	r3, #0
 8006104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006108:	4d64      	ldr	r5, [pc, #400]	@ (800629c <_dtoa_r+0x524>)
 800610a:	1124      	asrs	r4, r4, #4
 800610c:	2c00      	cmp	r4, #0
 800610e:	f040 80b2 	bne.w	8006276 <_dtoa_r+0x4fe>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1d3      	bne.n	80060be <_dtoa_r+0x346>
 8006116:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800611a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 80b7 	beq.w	8006290 <_dtoa_r+0x518>
 8006122:	2200      	movs	r2, #0
 8006124:	4620      	mov	r0, r4
 8006126:	4629      	mov	r1, r5
 8006128:	4b5d      	ldr	r3, [pc, #372]	@ (80062a0 <_dtoa_r+0x528>)
 800612a:	f7fa fcfb 	bl	8000b24 <__aeabi_dcmplt>
 800612e:	2800      	cmp	r0, #0
 8006130:	f000 80ae 	beq.w	8006290 <_dtoa_r+0x518>
 8006134:	9b07      	ldr	r3, [sp, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 80aa 	beq.w	8006290 <_dtoa_r+0x518>
 800613c:	9b08      	ldr	r3, [sp, #32]
 800613e:	2b00      	cmp	r3, #0
 8006140:	dd37      	ble.n	80061b2 <_dtoa_r+0x43a>
 8006142:	1e7b      	subs	r3, r7, #1
 8006144:	4620      	mov	r0, r4
 8006146:	9304      	str	r3, [sp, #16]
 8006148:	2200      	movs	r2, #0
 800614a:	4629      	mov	r1, r5
 800614c:	4b55      	ldr	r3, [pc, #340]	@ (80062a4 <_dtoa_r+0x52c>)
 800614e:	f7fa fa77 	bl	8000640 <__aeabi_dmul>
 8006152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006156:	9c08      	ldr	r4, [sp, #32]
 8006158:	3601      	adds	r6, #1
 800615a:	4630      	mov	r0, r6
 800615c:	f7fa fa06 	bl	800056c <__aeabi_i2d>
 8006160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006164:	f7fa fa6c 	bl	8000640 <__aeabi_dmul>
 8006168:	2200      	movs	r2, #0
 800616a:	4b4f      	ldr	r3, [pc, #316]	@ (80062a8 <_dtoa_r+0x530>)
 800616c:	f7fa f8b2 	bl	80002d4 <__adddf3>
 8006170:	4605      	mov	r5, r0
 8006172:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006176:	2c00      	cmp	r4, #0
 8006178:	f040 809a 	bne.w	80062b0 <_dtoa_r+0x538>
 800617c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006180:	2200      	movs	r2, #0
 8006182:	4b4a      	ldr	r3, [pc, #296]	@ (80062ac <_dtoa_r+0x534>)
 8006184:	f7fa f8a4 	bl	80002d0 <__aeabi_dsub>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006190:	462a      	mov	r2, r5
 8006192:	4633      	mov	r3, r6
 8006194:	f7fa fce4 	bl	8000b60 <__aeabi_dcmpgt>
 8006198:	2800      	cmp	r0, #0
 800619a:	f040 828e 	bne.w	80066ba <_dtoa_r+0x942>
 800619e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a2:	462a      	mov	r2, r5
 80061a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80061a8:	f7fa fcbc 	bl	8000b24 <__aeabi_dcmplt>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f040 8127 	bne.w	8006400 <_dtoa_r+0x688>
 80061b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80061b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80061ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f2c0 8163 	blt.w	8006488 <_dtoa_r+0x710>
 80061c2:	2f0e      	cmp	r7, #14
 80061c4:	f300 8160 	bgt.w	8006488 <_dtoa_r+0x710>
 80061c8:	4b33      	ldr	r3, [pc, #204]	@ (8006298 <_dtoa_r+0x520>)
 80061ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80061ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80061d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061d8:	2b00      	cmp	r3, #0
 80061da:	da03      	bge.n	80061e4 <_dtoa_r+0x46c>
 80061dc:	9b07      	ldr	r3, [sp, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f340 8100 	ble.w	80063e4 <_dtoa_r+0x66c>
 80061e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061e8:	4656      	mov	r6, sl
 80061ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061ee:	4620      	mov	r0, r4
 80061f0:	4629      	mov	r1, r5
 80061f2:	f7fa fb4f 	bl	8000894 <__aeabi_ddiv>
 80061f6:	f7fa fcd3 	bl	8000ba0 <__aeabi_d2iz>
 80061fa:	4680      	mov	r8, r0
 80061fc:	f7fa f9b6 	bl	800056c <__aeabi_i2d>
 8006200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006204:	f7fa fa1c 	bl	8000640 <__aeabi_dmul>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4620      	mov	r0, r4
 800620e:	4629      	mov	r1, r5
 8006210:	f7fa f85e 	bl	80002d0 <__aeabi_dsub>
 8006214:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006218:	9d07      	ldr	r5, [sp, #28]
 800621a:	f806 4b01 	strb.w	r4, [r6], #1
 800621e:	eba6 040a 	sub.w	r4, r6, sl
 8006222:	42a5      	cmp	r5, r4
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	f040 8116 	bne.w	8006458 <_dtoa_r+0x6e0>
 800622c:	f7fa f852 	bl	80002d4 <__adddf3>
 8006230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006234:	4604      	mov	r4, r0
 8006236:	460d      	mov	r5, r1
 8006238:	f7fa fc92 	bl	8000b60 <__aeabi_dcmpgt>
 800623c:	2800      	cmp	r0, #0
 800623e:	f040 80f8 	bne.w	8006432 <_dtoa_r+0x6ba>
 8006242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006246:	4620      	mov	r0, r4
 8006248:	4629      	mov	r1, r5
 800624a:	f7fa fc61 	bl	8000b10 <__aeabi_dcmpeq>
 800624e:	b118      	cbz	r0, 8006258 <_dtoa_r+0x4e0>
 8006250:	f018 0f01 	tst.w	r8, #1
 8006254:	f040 80ed 	bne.w	8006432 <_dtoa_r+0x6ba>
 8006258:	4649      	mov	r1, r9
 800625a:	4658      	mov	r0, fp
 800625c:	f001 f994 	bl	8007588 <_Bfree>
 8006260:	2300      	movs	r3, #0
 8006262:	7033      	strb	r3, [r6, #0]
 8006264:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006266:	3701      	adds	r7, #1
 8006268:	601f      	str	r7, [r3, #0]
 800626a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8320 	beq.w	80068b2 <_dtoa_r+0xb3a>
 8006272:	601e      	str	r6, [r3, #0]
 8006274:	e31d      	b.n	80068b2 <_dtoa_r+0xb3a>
 8006276:	07e2      	lsls	r2, r4, #31
 8006278:	d505      	bpl.n	8006286 <_dtoa_r+0x50e>
 800627a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800627e:	f7fa f9df 	bl	8000640 <__aeabi_dmul>
 8006282:	2301      	movs	r3, #1
 8006284:	3601      	adds	r6, #1
 8006286:	1064      	asrs	r4, r4, #1
 8006288:	3508      	adds	r5, #8
 800628a:	e73f      	b.n	800610c <_dtoa_r+0x394>
 800628c:	2602      	movs	r6, #2
 800628e:	e742      	b.n	8006116 <_dtoa_r+0x39e>
 8006290:	9c07      	ldr	r4, [sp, #28]
 8006292:	9704      	str	r7, [sp, #16]
 8006294:	e761      	b.n	800615a <_dtoa_r+0x3e2>
 8006296:	bf00      	nop
 8006298:	08008a48 	.word	0x08008a48
 800629c:	08008a20 	.word	0x08008a20
 80062a0:	3ff00000 	.word	0x3ff00000
 80062a4:	40240000 	.word	0x40240000
 80062a8:	401c0000 	.word	0x401c0000
 80062ac:	40140000 	.word	0x40140000
 80062b0:	4b70      	ldr	r3, [pc, #448]	@ (8006474 <_dtoa_r+0x6fc>)
 80062b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062bc:	4454      	add	r4, sl
 80062be:	2900      	cmp	r1, #0
 80062c0:	d045      	beq.n	800634e <_dtoa_r+0x5d6>
 80062c2:	2000      	movs	r0, #0
 80062c4:	496c      	ldr	r1, [pc, #432]	@ (8006478 <_dtoa_r+0x700>)
 80062c6:	f7fa fae5 	bl	8000894 <__aeabi_ddiv>
 80062ca:	4633      	mov	r3, r6
 80062cc:	462a      	mov	r2, r5
 80062ce:	f7f9 ffff 	bl	80002d0 <__aeabi_dsub>
 80062d2:	4656      	mov	r6, sl
 80062d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062dc:	f7fa fc60 	bl	8000ba0 <__aeabi_d2iz>
 80062e0:	4605      	mov	r5, r0
 80062e2:	f7fa f943 	bl	800056c <__aeabi_i2d>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ee:	f7f9 ffef 	bl	80002d0 <__aeabi_dsub>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	3530      	adds	r5, #48	@ 0x30
 80062f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006300:	f806 5b01 	strb.w	r5, [r6], #1
 8006304:	f7fa fc0e 	bl	8000b24 <__aeabi_dcmplt>
 8006308:	2800      	cmp	r0, #0
 800630a:	d163      	bne.n	80063d4 <_dtoa_r+0x65c>
 800630c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006310:	2000      	movs	r0, #0
 8006312:	495a      	ldr	r1, [pc, #360]	@ (800647c <_dtoa_r+0x704>)
 8006314:	f7f9 ffdc 	bl	80002d0 <__aeabi_dsub>
 8006318:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800631c:	f7fa fc02 	bl	8000b24 <__aeabi_dcmplt>
 8006320:	2800      	cmp	r0, #0
 8006322:	f040 8087 	bne.w	8006434 <_dtoa_r+0x6bc>
 8006326:	42a6      	cmp	r6, r4
 8006328:	f43f af43 	beq.w	80061b2 <_dtoa_r+0x43a>
 800632c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006330:	2200      	movs	r2, #0
 8006332:	4b53      	ldr	r3, [pc, #332]	@ (8006480 <_dtoa_r+0x708>)
 8006334:	f7fa f984 	bl	8000640 <__aeabi_dmul>
 8006338:	2200      	movs	r2, #0
 800633a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800633e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006342:	4b4f      	ldr	r3, [pc, #316]	@ (8006480 <_dtoa_r+0x708>)
 8006344:	f7fa f97c 	bl	8000640 <__aeabi_dmul>
 8006348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800634c:	e7c4      	b.n	80062d8 <_dtoa_r+0x560>
 800634e:	4631      	mov	r1, r6
 8006350:	4628      	mov	r0, r5
 8006352:	f7fa f975 	bl	8000640 <__aeabi_dmul>
 8006356:	4656      	mov	r6, sl
 8006358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800635c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800635e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006362:	f7fa fc1d 	bl	8000ba0 <__aeabi_d2iz>
 8006366:	4605      	mov	r5, r0
 8006368:	f7fa f900 	bl	800056c <__aeabi_i2d>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006374:	f7f9 ffac 	bl	80002d0 <__aeabi_dsub>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	3530      	adds	r5, #48	@ 0x30
 800637e:	f806 5b01 	strb.w	r5, [r6], #1
 8006382:	42a6      	cmp	r6, r4
 8006384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006388:	f04f 0200 	mov.w	r2, #0
 800638c:	d124      	bne.n	80063d8 <_dtoa_r+0x660>
 800638e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006392:	4b39      	ldr	r3, [pc, #228]	@ (8006478 <_dtoa_r+0x700>)
 8006394:	f7f9 ff9e 	bl	80002d4 <__adddf3>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063a0:	f7fa fbde 	bl	8000b60 <__aeabi_dcmpgt>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d145      	bne.n	8006434 <_dtoa_r+0x6bc>
 80063a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063ac:	2000      	movs	r0, #0
 80063ae:	4932      	ldr	r1, [pc, #200]	@ (8006478 <_dtoa_r+0x700>)
 80063b0:	f7f9 ff8e 	bl	80002d0 <__aeabi_dsub>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063bc:	f7fa fbb2 	bl	8000b24 <__aeabi_dcmplt>
 80063c0:	2800      	cmp	r0, #0
 80063c2:	f43f aef6 	beq.w	80061b2 <_dtoa_r+0x43a>
 80063c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80063c8:	1e73      	subs	r3, r6, #1
 80063ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063d0:	2b30      	cmp	r3, #48	@ 0x30
 80063d2:	d0f8      	beq.n	80063c6 <_dtoa_r+0x64e>
 80063d4:	9f04      	ldr	r7, [sp, #16]
 80063d6:	e73f      	b.n	8006258 <_dtoa_r+0x4e0>
 80063d8:	4b29      	ldr	r3, [pc, #164]	@ (8006480 <_dtoa_r+0x708>)
 80063da:	f7fa f931 	bl	8000640 <__aeabi_dmul>
 80063de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063e2:	e7bc      	b.n	800635e <_dtoa_r+0x5e6>
 80063e4:	d10c      	bne.n	8006400 <_dtoa_r+0x688>
 80063e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063ea:	2200      	movs	r2, #0
 80063ec:	4b25      	ldr	r3, [pc, #148]	@ (8006484 <_dtoa_r+0x70c>)
 80063ee:	f7fa f927 	bl	8000640 <__aeabi_dmul>
 80063f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063f6:	f7fa fba9 	bl	8000b4c <__aeabi_dcmpge>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	f000 815b 	beq.w	80066b6 <_dtoa_r+0x93e>
 8006400:	2400      	movs	r4, #0
 8006402:	4625      	mov	r5, r4
 8006404:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006406:	4656      	mov	r6, sl
 8006408:	43db      	mvns	r3, r3
 800640a:	9304      	str	r3, [sp, #16]
 800640c:	2700      	movs	r7, #0
 800640e:	4621      	mov	r1, r4
 8006410:	4658      	mov	r0, fp
 8006412:	f001 f8b9 	bl	8007588 <_Bfree>
 8006416:	2d00      	cmp	r5, #0
 8006418:	d0dc      	beq.n	80063d4 <_dtoa_r+0x65c>
 800641a:	b12f      	cbz	r7, 8006428 <_dtoa_r+0x6b0>
 800641c:	42af      	cmp	r7, r5
 800641e:	d003      	beq.n	8006428 <_dtoa_r+0x6b0>
 8006420:	4639      	mov	r1, r7
 8006422:	4658      	mov	r0, fp
 8006424:	f001 f8b0 	bl	8007588 <_Bfree>
 8006428:	4629      	mov	r1, r5
 800642a:	4658      	mov	r0, fp
 800642c:	f001 f8ac 	bl	8007588 <_Bfree>
 8006430:	e7d0      	b.n	80063d4 <_dtoa_r+0x65c>
 8006432:	9704      	str	r7, [sp, #16]
 8006434:	4633      	mov	r3, r6
 8006436:	461e      	mov	r6, r3
 8006438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800643c:	2a39      	cmp	r2, #57	@ 0x39
 800643e:	d107      	bne.n	8006450 <_dtoa_r+0x6d8>
 8006440:	459a      	cmp	sl, r3
 8006442:	d1f8      	bne.n	8006436 <_dtoa_r+0x6be>
 8006444:	9a04      	ldr	r2, [sp, #16]
 8006446:	3201      	adds	r2, #1
 8006448:	9204      	str	r2, [sp, #16]
 800644a:	2230      	movs	r2, #48	@ 0x30
 800644c:	f88a 2000 	strb.w	r2, [sl]
 8006450:	781a      	ldrb	r2, [r3, #0]
 8006452:	3201      	adds	r2, #1
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	e7bd      	b.n	80063d4 <_dtoa_r+0x65c>
 8006458:	2200      	movs	r2, #0
 800645a:	4b09      	ldr	r3, [pc, #36]	@ (8006480 <_dtoa_r+0x708>)
 800645c:	f7fa f8f0 	bl	8000640 <__aeabi_dmul>
 8006460:	2200      	movs	r2, #0
 8006462:	2300      	movs	r3, #0
 8006464:	4604      	mov	r4, r0
 8006466:	460d      	mov	r5, r1
 8006468:	f7fa fb52 	bl	8000b10 <__aeabi_dcmpeq>
 800646c:	2800      	cmp	r0, #0
 800646e:	f43f aebc 	beq.w	80061ea <_dtoa_r+0x472>
 8006472:	e6f1      	b.n	8006258 <_dtoa_r+0x4e0>
 8006474:	08008a48 	.word	0x08008a48
 8006478:	3fe00000 	.word	0x3fe00000
 800647c:	3ff00000 	.word	0x3ff00000
 8006480:	40240000 	.word	0x40240000
 8006484:	40140000 	.word	0x40140000
 8006488:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800648a:	2a00      	cmp	r2, #0
 800648c:	f000 80db 	beq.w	8006646 <_dtoa_r+0x8ce>
 8006490:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006492:	2a01      	cmp	r2, #1
 8006494:	f300 80bf 	bgt.w	8006616 <_dtoa_r+0x89e>
 8006498:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800649a:	2a00      	cmp	r2, #0
 800649c:	f000 80b7 	beq.w	800660e <_dtoa_r+0x896>
 80064a0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80064a4:	4646      	mov	r6, r8
 80064a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064aa:	2101      	movs	r1, #1
 80064ac:	441a      	add	r2, r3
 80064ae:	4658      	mov	r0, fp
 80064b0:	4498      	add	r8, r3
 80064b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80064b4:	f001 f966 	bl	8007784 <__i2b>
 80064b8:	4605      	mov	r5, r0
 80064ba:	b15e      	cbz	r6, 80064d4 <_dtoa_r+0x75c>
 80064bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dd08      	ble.n	80064d4 <_dtoa_r+0x75c>
 80064c2:	42b3      	cmp	r3, r6
 80064c4:	bfa8      	it	ge
 80064c6:	4633      	movge	r3, r6
 80064c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ca:	eba8 0803 	sub.w	r8, r8, r3
 80064ce:	1af6      	subs	r6, r6, r3
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80064d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064d6:	b1f3      	cbz	r3, 8006516 <_dtoa_r+0x79e>
 80064d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 80b7 	beq.w	800664e <_dtoa_r+0x8d6>
 80064e0:	b18c      	cbz	r4, 8006506 <_dtoa_r+0x78e>
 80064e2:	4629      	mov	r1, r5
 80064e4:	4622      	mov	r2, r4
 80064e6:	4658      	mov	r0, fp
 80064e8:	f001 fa0a 	bl	8007900 <__pow5mult>
 80064ec:	464a      	mov	r2, r9
 80064ee:	4601      	mov	r1, r0
 80064f0:	4605      	mov	r5, r0
 80064f2:	4658      	mov	r0, fp
 80064f4:	f001 f95c 	bl	80077b0 <__multiply>
 80064f8:	4649      	mov	r1, r9
 80064fa:	9004      	str	r0, [sp, #16]
 80064fc:	4658      	mov	r0, fp
 80064fe:	f001 f843 	bl	8007588 <_Bfree>
 8006502:	9b04      	ldr	r3, [sp, #16]
 8006504:	4699      	mov	r9, r3
 8006506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006508:	1b1a      	subs	r2, r3, r4
 800650a:	d004      	beq.n	8006516 <_dtoa_r+0x79e>
 800650c:	4649      	mov	r1, r9
 800650e:	4658      	mov	r0, fp
 8006510:	f001 f9f6 	bl	8007900 <__pow5mult>
 8006514:	4681      	mov	r9, r0
 8006516:	2101      	movs	r1, #1
 8006518:	4658      	mov	r0, fp
 800651a:	f001 f933 	bl	8007784 <__i2b>
 800651e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006520:	4604      	mov	r4, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 81c9 	beq.w	80068ba <_dtoa_r+0xb42>
 8006528:	461a      	mov	r2, r3
 800652a:	4601      	mov	r1, r0
 800652c:	4658      	mov	r0, fp
 800652e:	f001 f9e7 	bl	8007900 <__pow5mult>
 8006532:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006534:	4604      	mov	r4, r0
 8006536:	2b01      	cmp	r3, #1
 8006538:	f300 808f 	bgt.w	800665a <_dtoa_r+0x8e2>
 800653c:	9b02      	ldr	r3, [sp, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	f040 8087 	bne.w	8006652 <_dtoa_r+0x8da>
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800654a:	2b00      	cmp	r3, #0
 800654c:	f040 8083 	bne.w	8006656 <_dtoa_r+0x8de>
 8006550:	9b03      	ldr	r3, [sp, #12]
 8006552:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006556:	0d1b      	lsrs	r3, r3, #20
 8006558:	051b      	lsls	r3, r3, #20
 800655a:	b12b      	cbz	r3, 8006568 <_dtoa_r+0x7f0>
 800655c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800655e:	f108 0801 	add.w	r8, r8, #1
 8006562:	3301      	adds	r3, #1
 8006564:	9309      	str	r3, [sp, #36]	@ 0x24
 8006566:	2301      	movs	r3, #1
 8006568:	930a      	str	r3, [sp, #40]	@ 0x28
 800656a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 81aa 	beq.w	80068c6 <_dtoa_r+0xb4e>
 8006572:	6923      	ldr	r3, [r4, #16]
 8006574:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006578:	6918      	ldr	r0, [r3, #16]
 800657a:	f001 f8b7 	bl	80076ec <__hi0bits>
 800657e:	f1c0 0020 	rsb	r0, r0, #32
 8006582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006584:	4418      	add	r0, r3
 8006586:	f010 001f 	ands.w	r0, r0, #31
 800658a:	d071      	beq.n	8006670 <_dtoa_r+0x8f8>
 800658c:	f1c0 0320 	rsb	r3, r0, #32
 8006590:	2b04      	cmp	r3, #4
 8006592:	dd65      	ble.n	8006660 <_dtoa_r+0x8e8>
 8006594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006596:	f1c0 001c 	rsb	r0, r0, #28
 800659a:	4403      	add	r3, r0
 800659c:	4480      	add	r8, r0
 800659e:	4406      	add	r6, r0
 80065a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a2:	f1b8 0f00 	cmp.w	r8, #0
 80065a6:	dd05      	ble.n	80065b4 <_dtoa_r+0x83c>
 80065a8:	4649      	mov	r1, r9
 80065aa:	4642      	mov	r2, r8
 80065ac:	4658      	mov	r0, fp
 80065ae:	f001 fa01 	bl	80079b4 <__lshift>
 80065b2:	4681      	mov	r9, r0
 80065b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	dd05      	ble.n	80065c6 <_dtoa_r+0x84e>
 80065ba:	4621      	mov	r1, r4
 80065bc:	461a      	mov	r2, r3
 80065be:	4658      	mov	r0, fp
 80065c0:	f001 f9f8 	bl	80079b4 <__lshift>
 80065c4:	4604      	mov	r4, r0
 80065c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d053      	beq.n	8006674 <_dtoa_r+0x8fc>
 80065cc:	4621      	mov	r1, r4
 80065ce:	4648      	mov	r0, r9
 80065d0:	f001 fa5c 	bl	8007a8c <__mcmp>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	da4d      	bge.n	8006674 <_dtoa_r+0x8fc>
 80065d8:	1e7b      	subs	r3, r7, #1
 80065da:	4649      	mov	r1, r9
 80065dc:	9304      	str	r3, [sp, #16]
 80065de:	220a      	movs	r2, #10
 80065e0:	2300      	movs	r3, #0
 80065e2:	4658      	mov	r0, fp
 80065e4:	f000 fff2 	bl	80075cc <__multadd>
 80065e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065ea:	4681      	mov	r9, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 816c 	beq.w	80068ca <_dtoa_r+0xb52>
 80065f2:	2300      	movs	r3, #0
 80065f4:	4629      	mov	r1, r5
 80065f6:	220a      	movs	r2, #10
 80065f8:	4658      	mov	r0, fp
 80065fa:	f000 ffe7 	bl	80075cc <__multadd>
 80065fe:	9b08      	ldr	r3, [sp, #32]
 8006600:	4605      	mov	r5, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	dc61      	bgt.n	80066ca <_dtoa_r+0x952>
 8006606:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006608:	2b02      	cmp	r3, #2
 800660a:	dc3b      	bgt.n	8006684 <_dtoa_r+0x90c>
 800660c:	e05d      	b.n	80066ca <_dtoa_r+0x952>
 800660e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006610:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006614:	e746      	b.n	80064a4 <_dtoa_r+0x72c>
 8006616:	9b07      	ldr	r3, [sp, #28]
 8006618:	1e5c      	subs	r4, r3, #1
 800661a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800661c:	42a3      	cmp	r3, r4
 800661e:	bfbf      	itttt	lt
 8006620:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006622:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006624:	1ae3      	sublt	r3, r4, r3
 8006626:	18d2      	addlt	r2, r2, r3
 8006628:	bfa8      	it	ge
 800662a:	1b1c      	subge	r4, r3, r4
 800662c:	9b07      	ldr	r3, [sp, #28]
 800662e:	bfbe      	ittt	lt
 8006630:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006632:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006634:	2400      	movlt	r4, #0
 8006636:	2b00      	cmp	r3, #0
 8006638:	bfb5      	itete	lt
 800663a:	eba8 0603 	sublt.w	r6, r8, r3
 800663e:	4646      	movge	r6, r8
 8006640:	2300      	movlt	r3, #0
 8006642:	9b07      	ldrge	r3, [sp, #28]
 8006644:	e730      	b.n	80064a8 <_dtoa_r+0x730>
 8006646:	4646      	mov	r6, r8
 8006648:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800664a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800664c:	e735      	b.n	80064ba <_dtoa_r+0x742>
 800664e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006650:	e75c      	b.n	800650c <_dtoa_r+0x794>
 8006652:	2300      	movs	r3, #0
 8006654:	e788      	b.n	8006568 <_dtoa_r+0x7f0>
 8006656:	9b02      	ldr	r3, [sp, #8]
 8006658:	e786      	b.n	8006568 <_dtoa_r+0x7f0>
 800665a:	2300      	movs	r3, #0
 800665c:	930a      	str	r3, [sp, #40]	@ 0x28
 800665e:	e788      	b.n	8006572 <_dtoa_r+0x7fa>
 8006660:	d09f      	beq.n	80065a2 <_dtoa_r+0x82a>
 8006662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006664:	331c      	adds	r3, #28
 8006666:	441a      	add	r2, r3
 8006668:	4498      	add	r8, r3
 800666a:	441e      	add	r6, r3
 800666c:	9209      	str	r2, [sp, #36]	@ 0x24
 800666e:	e798      	b.n	80065a2 <_dtoa_r+0x82a>
 8006670:	4603      	mov	r3, r0
 8006672:	e7f6      	b.n	8006662 <_dtoa_r+0x8ea>
 8006674:	9b07      	ldr	r3, [sp, #28]
 8006676:	9704      	str	r7, [sp, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	dc20      	bgt.n	80066be <_dtoa_r+0x946>
 800667c:	9308      	str	r3, [sp, #32]
 800667e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006680:	2b02      	cmp	r3, #2
 8006682:	dd1e      	ble.n	80066c2 <_dtoa_r+0x94a>
 8006684:	9b08      	ldr	r3, [sp, #32]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f47f aebc 	bne.w	8006404 <_dtoa_r+0x68c>
 800668c:	4621      	mov	r1, r4
 800668e:	2205      	movs	r2, #5
 8006690:	4658      	mov	r0, fp
 8006692:	f000 ff9b 	bl	80075cc <__multadd>
 8006696:	4601      	mov	r1, r0
 8006698:	4604      	mov	r4, r0
 800669a:	4648      	mov	r0, r9
 800669c:	f001 f9f6 	bl	8007a8c <__mcmp>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	f77f aeaf 	ble.w	8006404 <_dtoa_r+0x68c>
 80066a6:	2331      	movs	r3, #49	@ 0x31
 80066a8:	4656      	mov	r6, sl
 80066aa:	f806 3b01 	strb.w	r3, [r6], #1
 80066ae:	9b04      	ldr	r3, [sp, #16]
 80066b0:	3301      	adds	r3, #1
 80066b2:	9304      	str	r3, [sp, #16]
 80066b4:	e6aa      	b.n	800640c <_dtoa_r+0x694>
 80066b6:	9c07      	ldr	r4, [sp, #28]
 80066b8:	9704      	str	r7, [sp, #16]
 80066ba:	4625      	mov	r5, r4
 80066bc:	e7f3      	b.n	80066a6 <_dtoa_r+0x92e>
 80066be:	9b07      	ldr	r3, [sp, #28]
 80066c0:	9308      	str	r3, [sp, #32]
 80066c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8104 	beq.w	80068d2 <_dtoa_r+0xb5a>
 80066ca:	2e00      	cmp	r6, #0
 80066cc:	dd05      	ble.n	80066da <_dtoa_r+0x962>
 80066ce:	4629      	mov	r1, r5
 80066d0:	4632      	mov	r2, r6
 80066d2:	4658      	mov	r0, fp
 80066d4:	f001 f96e 	bl	80079b4 <__lshift>
 80066d8:	4605      	mov	r5, r0
 80066da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d05a      	beq.n	8006796 <_dtoa_r+0xa1e>
 80066e0:	4658      	mov	r0, fp
 80066e2:	6869      	ldr	r1, [r5, #4]
 80066e4:	f000 ff10 	bl	8007508 <_Balloc>
 80066e8:	4606      	mov	r6, r0
 80066ea:	b928      	cbnz	r0, 80066f8 <_dtoa_r+0x980>
 80066ec:	4602      	mov	r2, r0
 80066ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80066f2:	4b83      	ldr	r3, [pc, #524]	@ (8006900 <_dtoa_r+0xb88>)
 80066f4:	f7ff bb54 	b.w	8005da0 <_dtoa_r+0x28>
 80066f8:	692a      	ldr	r2, [r5, #16]
 80066fa:	f105 010c 	add.w	r1, r5, #12
 80066fe:	3202      	adds	r2, #2
 8006700:	0092      	lsls	r2, r2, #2
 8006702:	300c      	adds	r0, #12
 8006704:	f7ff fa95 	bl	8005c32 <memcpy>
 8006708:	2201      	movs	r2, #1
 800670a:	4631      	mov	r1, r6
 800670c:	4658      	mov	r0, fp
 800670e:	f001 f951 	bl	80079b4 <__lshift>
 8006712:	462f      	mov	r7, r5
 8006714:	4605      	mov	r5, r0
 8006716:	f10a 0301 	add.w	r3, sl, #1
 800671a:	9307      	str	r3, [sp, #28]
 800671c:	9b08      	ldr	r3, [sp, #32]
 800671e:	4453      	add	r3, sl
 8006720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006722:	9b02      	ldr	r3, [sp, #8]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	930a      	str	r3, [sp, #40]	@ 0x28
 800672a:	9b07      	ldr	r3, [sp, #28]
 800672c:	4621      	mov	r1, r4
 800672e:	3b01      	subs	r3, #1
 8006730:	4648      	mov	r0, r9
 8006732:	9302      	str	r3, [sp, #8]
 8006734:	f7ff fa96 	bl	8005c64 <quorem>
 8006738:	4639      	mov	r1, r7
 800673a:	9008      	str	r0, [sp, #32]
 800673c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006740:	4648      	mov	r0, r9
 8006742:	f001 f9a3 	bl	8007a8c <__mcmp>
 8006746:	462a      	mov	r2, r5
 8006748:	9009      	str	r0, [sp, #36]	@ 0x24
 800674a:	4621      	mov	r1, r4
 800674c:	4658      	mov	r0, fp
 800674e:	f001 f9b9 	bl	8007ac4 <__mdiff>
 8006752:	68c2      	ldr	r2, [r0, #12]
 8006754:	4606      	mov	r6, r0
 8006756:	bb02      	cbnz	r2, 800679a <_dtoa_r+0xa22>
 8006758:	4601      	mov	r1, r0
 800675a:	4648      	mov	r0, r9
 800675c:	f001 f996 	bl	8007a8c <__mcmp>
 8006760:	4602      	mov	r2, r0
 8006762:	4631      	mov	r1, r6
 8006764:	4658      	mov	r0, fp
 8006766:	920c      	str	r2, [sp, #48]	@ 0x30
 8006768:	f000 ff0e 	bl	8007588 <_Bfree>
 800676c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800676e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006770:	9e07      	ldr	r6, [sp, #28]
 8006772:	ea43 0102 	orr.w	r1, r3, r2
 8006776:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006778:	4319      	orrs	r1, r3
 800677a:	d110      	bne.n	800679e <_dtoa_r+0xa26>
 800677c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006780:	d029      	beq.n	80067d6 <_dtoa_r+0xa5e>
 8006782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006784:	2b00      	cmp	r3, #0
 8006786:	dd02      	ble.n	800678e <_dtoa_r+0xa16>
 8006788:	9b08      	ldr	r3, [sp, #32]
 800678a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800678e:	9b02      	ldr	r3, [sp, #8]
 8006790:	f883 8000 	strb.w	r8, [r3]
 8006794:	e63b      	b.n	800640e <_dtoa_r+0x696>
 8006796:	4628      	mov	r0, r5
 8006798:	e7bb      	b.n	8006712 <_dtoa_r+0x99a>
 800679a:	2201      	movs	r2, #1
 800679c:	e7e1      	b.n	8006762 <_dtoa_r+0x9ea>
 800679e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	db04      	blt.n	80067ae <_dtoa_r+0xa36>
 80067a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80067a6:	430b      	orrs	r3, r1
 80067a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067aa:	430b      	orrs	r3, r1
 80067ac:	d120      	bne.n	80067f0 <_dtoa_r+0xa78>
 80067ae:	2a00      	cmp	r2, #0
 80067b0:	dded      	ble.n	800678e <_dtoa_r+0xa16>
 80067b2:	4649      	mov	r1, r9
 80067b4:	2201      	movs	r2, #1
 80067b6:	4658      	mov	r0, fp
 80067b8:	f001 f8fc 	bl	80079b4 <__lshift>
 80067bc:	4621      	mov	r1, r4
 80067be:	4681      	mov	r9, r0
 80067c0:	f001 f964 	bl	8007a8c <__mcmp>
 80067c4:	2800      	cmp	r0, #0
 80067c6:	dc03      	bgt.n	80067d0 <_dtoa_r+0xa58>
 80067c8:	d1e1      	bne.n	800678e <_dtoa_r+0xa16>
 80067ca:	f018 0f01 	tst.w	r8, #1
 80067ce:	d0de      	beq.n	800678e <_dtoa_r+0xa16>
 80067d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067d4:	d1d8      	bne.n	8006788 <_dtoa_r+0xa10>
 80067d6:	2339      	movs	r3, #57	@ 0x39
 80067d8:	9a02      	ldr	r2, [sp, #8]
 80067da:	7013      	strb	r3, [r2, #0]
 80067dc:	4633      	mov	r3, r6
 80067de:	461e      	mov	r6, r3
 80067e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	2a39      	cmp	r2, #57	@ 0x39
 80067e8:	d052      	beq.n	8006890 <_dtoa_r+0xb18>
 80067ea:	3201      	adds	r2, #1
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e60e      	b.n	800640e <_dtoa_r+0x696>
 80067f0:	2a00      	cmp	r2, #0
 80067f2:	dd07      	ble.n	8006804 <_dtoa_r+0xa8c>
 80067f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067f8:	d0ed      	beq.n	80067d6 <_dtoa_r+0xa5e>
 80067fa:	9a02      	ldr	r2, [sp, #8]
 80067fc:	f108 0301 	add.w	r3, r8, #1
 8006800:	7013      	strb	r3, [r2, #0]
 8006802:	e604      	b.n	800640e <_dtoa_r+0x696>
 8006804:	9b07      	ldr	r3, [sp, #28]
 8006806:	9a07      	ldr	r2, [sp, #28]
 8006808:	f803 8c01 	strb.w	r8, [r3, #-1]
 800680c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800680e:	4293      	cmp	r3, r2
 8006810:	d028      	beq.n	8006864 <_dtoa_r+0xaec>
 8006812:	4649      	mov	r1, r9
 8006814:	2300      	movs	r3, #0
 8006816:	220a      	movs	r2, #10
 8006818:	4658      	mov	r0, fp
 800681a:	f000 fed7 	bl	80075cc <__multadd>
 800681e:	42af      	cmp	r7, r5
 8006820:	4681      	mov	r9, r0
 8006822:	f04f 0300 	mov.w	r3, #0
 8006826:	f04f 020a 	mov.w	r2, #10
 800682a:	4639      	mov	r1, r7
 800682c:	4658      	mov	r0, fp
 800682e:	d107      	bne.n	8006840 <_dtoa_r+0xac8>
 8006830:	f000 fecc 	bl	80075cc <__multadd>
 8006834:	4607      	mov	r7, r0
 8006836:	4605      	mov	r5, r0
 8006838:	9b07      	ldr	r3, [sp, #28]
 800683a:	3301      	adds	r3, #1
 800683c:	9307      	str	r3, [sp, #28]
 800683e:	e774      	b.n	800672a <_dtoa_r+0x9b2>
 8006840:	f000 fec4 	bl	80075cc <__multadd>
 8006844:	4629      	mov	r1, r5
 8006846:	4607      	mov	r7, r0
 8006848:	2300      	movs	r3, #0
 800684a:	220a      	movs	r2, #10
 800684c:	4658      	mov	r0, fp
 800684e:	f000 febd 	bl	80075cc <__multadd>
 8006852:	4605      	mov	r5, r0
 8006854:	e7f0      	b.n	8006838 <_dtoa_r+0xac0>
 8006856:	9b08      	ldr	r3, [sp, #32]
 8006858:	2700      	movs	r7, #0
 800685a:	2b00      	cmp	r3, #0
 800685c:	bfcc      	ite	gt
 800685e:	461e      	movgt	r6, r3
 8006860:	2601      	movle	r6, #1
 8006862:	4456      	add	r6, sl
 8006864:	4649      	mov	r1, r9
 8006866:	2201      	movs	r2, #1
 8006868:	4658      	mov	r0, fp
 800686a:	f001 f8a3 	bl	80079b4 <__lshift>
 800686e:	4621      	mov	r1, r4
 8006870:	4681      	mov	r9, r0
 8006872:	f001 f90b 	bl	8007a8c <__mcmp>
 8006876:	2800      	cmp	r0, #0
 8006878:	dcb0      	bgt.n	80067dc <_dtoa_r+0xa64>
 800687a:	d102      	bne.n	8006882 <_dtoa_r+0xb0a>
 800687c:	f018 0f01 	tst.w	r8, #1
 8006880:	d1ac      	bne.n	80067dc <_dtoa_r+0xa64>
 8006882:	4633      	mov	r3, r6
 8006884:	461e      	mov	r6, r3
 8006886:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800688a:	2a30      	cmp	r2, #48	@ 0x30
 800688c:	d0fa      	beq.n	8006884 <_dtoa_r+0xb0c>
 800688e:	e5be      	b.n	800640e <_dtoa_r+0x696>
 8006890:	459a      	cmp	sl, r3
 8006892:	d1a4      	bne.n	80067de <_dtoa_r+0xa66>
 8006894:	9b04      	ldr	r3, [sp, #16]
 8006896:	3301      	adds	r3, #1
 8006898:	9304      	str	r3, [sp, #16]
 800689a:	2331      	movs	r3, #49	@ 0x31
 800689c:	f88a 3000 	strb.w	r3, [sl]
 80068a0:	e5b5      	b.n	800640e <_dtoa_r+0x696>
 80068a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80068a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006904 <_dtoa_r+0xb8c>
 80068a8:	b11b      	cbz	r3, 80068b2 <_dtoa_r+0xb3a>
 80068aa:	f10a 0308 	add.w	r3, sl, #8
 80068ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	4650      	mov	r0, sl
 80068b4:	b017      	add	sp, #92	@ 0x5c
 80068b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068bc:	2b01      	cmp	r3, #1
 80068be:	f77f ae3d 	ble.w	800653c <_dtoa_r+0x7c4>
 80068c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80068c6:	2001      	movs	r0, #1
 80068c8:	e65b      	b.n	8006582 <_dtoa_r+0x80a>
 80068ca:	9b08      	ldr	r3, [sp, #32]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f77f aed6 	ble.w	800667e <_dtoa_r+0x906>
 80068d2:	4656      	mov	r6, sl
 80068d4:	4621      	mov	r1, r4
 80068d6:	4648      	mov	r0, r9
 80068d8:	f7ff f9c4 	bl	8005c64 <quorem>
 80068dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80068e0:	9b08      	ldr	r3, [sp, #32]
 80068e2:	f806 8b01 	strb.w	r8, [r6], #1
 80068e6:	eba6 020a 	sub.w	r2, r6, sl
 80068ea:	4293      	cmp	r3, r2
 80068ec:	ddb3      	ble.n	8006856 <_dtoa_r+0xade>
 80068ee:	4649      	mov	r1, r9
 80068f0:	2300      	movs	r3, #0
 80068f2:	220a      	movs	r2, #10
 80068f4:	4658      	mov	r0, fp
 80068f6:	f000 fe69 	bl	80075cc <__multadd>
 80068fa:	4681      	mov	r9, r0
 80068fc:	e7ea      	b.n	80068d4 <_dtoa_r+0xb5c>
 80068fe:	bf00      	nop
 8006900:	08008935 	.word	0x08008935
 8006904:	080088b9 	.word	0x080088b9

08006908 <rshift>:
 8006908:	6903      	ldr	r3, [r0, #16]
 800690a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800690e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006912:	f100 0414 	add.w	r4, r0, #20
 8006916:	ea4f 1261 	mov.w	r2, r1, asr #5
 800691a:	dd46      	ble.n	80069aa <rshift+0xa2>
 800691c:	f011 011f 	ands.w	r1, r1, #31
 8006920:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006924:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006928:	d10c      	bne.n	8006944 <rshift+0x3c>
 800692a:	4629      	mov	r1, r5
 800692c:	f100 0710 	add.w	r7, r0, #16
 8006930:	42b1      	cmp	r1, r6
 8006932:	d335      	bcc.n	80069a0 <rshift+0x98>
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	1eea      	subs	r2, r5, #3
 800693a:	4296      	cmp	r6, r2
 800693c:	bf38      	it	cc
 800693e:	2300      	movcc	r3, #0
 8006940:	4423      	add	r3, r4
 8006942:	e015      	b.n	8006970 <rshift+0x68>
 8006944:	46a1      	mov	r9, r4
 8006946:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800694a:	f1c1 0820 	rsb	r8, r1, #32
 800694e:	40cf      	lsrs	r7, r1
 8006950:	f105 0e04 	add.w	lr, r5, #4
 8006954:	4576      	cmp	r6, lr
 8006956:	46f4      	mov	ip, lr
 8006958:	d816      	bhi.n	8006988 <rshift+0x80>
 800695a:	1a9a      	subs	r2, r3, r2
 800695c:	0092      	lsls	r2, r2, #2
 800695e:	3a04      	subs	r2, #4
 8006960:	3501      	adds	r5, #1
 8006962:	42ae      	cmp	r6, r5
 8006964:	bf38      	it	cc
 8006966:	2200      	movcc	r2, #0
 8006968:	18a3      	adds	r3, r4, r2
 800696a:	50a7      	str	r7, [r4, r2]
 800696c:	b107      	cbz	r7, 8006970 <rshift+0x68>
 800696e:	3304      	adds	r3, #4
 8006970:	42a3      	cmp	r3, r4
 8006972:	eba3 0204 	sub.w	r2, r3, r4
 8006976:	bf08      	it	eq
 8006978:	2300      	moveq	r3, #0
 800697a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800697e:	6102      	str	r2, [r0, #16]
 8006980:	bf08      	it	eq
 8006982:	6143      	streq	r3, [r0, #20]
 8006984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006988:	f8dc c000 	ldr.w	ip, [ip]
 800698c:	fa0c fc08 	lsl.w	ip, ip, r8
 8006990:	ea4c 0707 	orr.w	r7, ip, r7
 8006994:	f849 7b04 	str.w	r7, [r9], #4
 8006998:	f85e 7b04 	ldr.w	r7, [lr], #4
 800699c:	40cf      	lsrs	r7, r1
 800699e:	e7d9      	b.n	8006954 <rshift+0x4c>
 80069a0:	f851 cb04 	ldr.w	ip, [r1], #4
 80069a4:	f847 cf04 	str.w	ip, [r7, #4]!
 80069a8:	e7c2      	b.n	8006930 <rshift+0x28>
 80069aa:	4623      	mov	r3, r4
 80069ac:	e7e0      	b.n	8006970 <rshift+0x68>

080069ae <__hexdig_fun>:
 80069ae:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80069b2:	2b09      	cmp	r3, #9
 80069b4:	d802      	bhi.n	80069bc <__hexdig_fun+0xe>
 80069b6:	3820      	subs	r0, #32
 80069b8:	b2c0      	uxtb	r0, r0
 80069ba:	4770      	bx	lr
 80069bc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80069c0:	2b05      	cmp	r3, #5
 80069c2:	d801      	bhi.n	80069c8 <__hexdig_fun+0x1a>
 80069c4:	3847      	subs	r0, #71	@ 0x47
 80069c6:	e7f7      	b.n	80069b8 <__hexdig_fun+0xa>
 80069c8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80069cc:	2b05      	cmp	r3, #5
 80069ce:	d801      	bhi.n	80069d4 <__hexdig_fun+0x26>
 80069d0:	3827      	subs	r0, #39	@ 0x27
 80069d2:	e7f1      	b.n	80069b8 <__hexdig_fun+0xa>
 80069d4:	2000      	movs	r0, #0
 80069d6:	4770      	bx	lr

080069d8 <__gethex>:
 80069d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	468a      	mov	sl, r1
 80069de:	4690      	mov	r8, r2
 80069e0:	b085      	sub	sp, #20
 80069e2:	9302      	str	r3, [sp, #8]
 80069e4:	680b      	ldr	r3, [r1, #0]
 80069e6:	9001      	str	r0, [sp, #4]
 80069e8:	1c9c      	adds	r4, r3, #2
 80069ea:	46a1      	mov	r9, r4
 80069ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 80069f0:	2830      	cmp	r0, #48	@ 0x30
 80069f2:	d0fa      	beq.n	80069ea <__gethex+0x12>
 80069f4:	eba9 0303 	sub.w	r3, r9, r3
 80069f8:	f1a3 0b02 	sub.w	fp, r3, #2
 80069fc:	f7ff ffd7 	bl	80069ae <__hexdig_fun>
 8006a00:	4605      	mov	r5, r0
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d168      	bne.n	8006ad8 <__gethex+0x100>
 8006a06:	2201      	movs	r2, #1
 8006a08:	4648      	mov	r0, r9
 8006a0a:	499f      	ldr	r1, [pc, #636]	@ (8006c88 <__gethex+0x2b0>)
 8006a0c:	f7ff f8b8 	bl	8005b80 <strncmp>
 8006a10:	4607      	mov	r7, r0
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d167      	bne.n	8006ae6 <__gethex+0x10e>
 8006a16:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006a1a:	4626      	mov	r6, r4
 8006a1c:	f7ff ffc7 	bl	80069ae <__hexdig_fun>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d062      	beq.n	8006aea <__gethex+0x112>
 8006a24:	4623      	mov	r3, r4
 8006a26:	7818      	ldrb	r0, [r3, #0]
 8006a28:	4699      	mov	r9, r3
 8006a2a:	2830      	cmp	r0, #48	@ 0x30
 8006a2c:	f103 0301 	add.w	r3, r3, #1
 8006a30:	d0f9      	beq.n	8006a26 <__gethex+0x4e>
 8006a32:	f7ff ffbc 	bl	80069ae <__hexdig_fun>
 8006a36:	fab0 f580 	clz	r5, r0
 8006a3a:	f04f 0b01 	mov.w	fp, #1
 8006a3e:	096d      	lsrs	r5, r5, #5
 8006a40:	464a      	mov	r2, r9
 8006a42:	4616      	mov	r6, r2
 8006a44:	7830      	ldrb	r0, [r6, #0]
 8006a46:	3201      	adds	r2, #1
 8006a48:	f7ff ffb1 	bl	80069ae <__hexdig_fun>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d1f8      	bne.n	8006a42 <__gethex+0x6a>
 8006a50:	2201      	movs	r2, #1
 8006a52:	4630      	mov	r0, r6
 8006a54:	498c      	ldr	r1, [pc, #560]	@ (8006c88 <__gethex+0x2b0>)
 8006a56:	f7ff f893 	bl	8005b80 <strncmp>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d13f      	bne.n	8006ade <__gethex+0x106>
 8006a5e:	b944      	cbnz	r4, 8006a72 <__gethex+0x9a>
 8006a60:	1c74      	adds	r4, r6, #1
 8006a62:	4622      	mov	r2, r4
 8006a64:	4616      	mov	r6, r2
 8006a66:	7830      	ldrb	r0, [r6, #0]
 8006a68:	3201      	adds	r2, #1
 8006a6a:	f7ff ffa0 	bl	80069ae <__hexdig_fun>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d1f8      	bne.n	8006a64 <__gethex+0x8c>
 8006a72:	1ba4      	subs	r4, r4, r6
 8006a74:	00a7      	lsls	r7, r4, #2
 8006a76:	7833      	ldrb	r3, [r6, #0]
 8006a78:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006a7c:	2b50      	cmp	r3, #80	@ 0x50
 8006a7e:	d13e      	bne.n	8006afe <__gethex+0x126>
 8006a80:	7873      	ldrb	r3, [r6, #1]
 8006a82:	2b2b      	cmp	r3, #43	@ 0x2b
 8006a84:	d033      	beq.n	8006aee <__gethex+0x116>
 8006a86:	2b2d      	cmp	r3, #45	@ 0x2d
 8006a88:	d034      	beq.n	8006af4 <__gethex+0x11c>
 8006a8a:	2400      	movs	r4, #0
 8006a8c:	1c71      	adds	r1, r6, #1
 8006a8e:	7808      	ldrb	r0, [r1, #0]
 8006a90:	f7ff ff8d 	bl	80069ae <__hexdig_fun>
 8006a94:	1e43      	subs	r3, r0, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b18      	cmp	r3, #24
 8006a9a:	d830      	bhi.n	8006afe <__gethex+0x126>
 8006a9c:	f1a0 0210 	sub.w	r2, r0, #16
 8006aa0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006aa4:	f7ff ff83 	bl	80069ae <__hexdig_fun>
 8006aa8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8006aac:	fa5f fc8c 	uxtb.w	ip, ip
 8006ab0:	f1bc 0f18 	cmp.w	ip, #24
 8006ab4:	f04f 030a 	mov.w	r3, #10
 8006ab8:	d91e      	bls.n	8006af8 <__gethex+0x120>
 8006aba:	b104      	cbz	r4, 8006abe <__gethex+0xe6>
 8006abc:	4252      	negs	r2, r2
 8006abe:	4417      	add	r7, r2
 8006ac0:	f8ca 1000 	str.w	r1, [sl]
 8006ac4:	b1ed      	cbz	r5, 8006b02 <__gethex+0x12a>
 8006ac6:	f1bb 0f00 	cmp.w	fp, #0
 8006aca:	bf0c      	ite	eq
 8006acc:	2506      	moveq	r5, #6
 8006ace:	2500      	movne	r5, #0
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	b005      	add	sp, #20
 8006ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad8:	2500      	movs	r5, #0
 8006ada:	462c      	mov	r4, r5
 8006adc:	e7b0      	b.n	8006a40 <__gethex+0x68>
 8006ade:	2c00      	cmp	r4, #0
 8006ae0:	d1c7      	bne.n	8006a72 <__gethex+0x9a>
 8006ae2:	4627      	mov	r7, r4
 8006ae4:	e7c7      	b.n	8006a76 <__gethex+0x9e>
 8006ae6:	464e      	mov	r6, r9
 8006ae8:	462f      	mov	r7, r5
 8006aea:	2501      	movs	r5, #1
 8006aec:	e7c3      	b.n	8006a76 <__gethex+0x9e>
 8006aee:	2400      	movs	r4, #0
 8006af0:	1cb1      	adds	r1, r6, #2
 8006af2:	e7cc      	b.n	8006a8e <__gethex+0xb6>
 8006af4:	2401      	movs	r4, #1
 8006af6:	e7fb      	b.n	8006af0 <__gethex+0x118>
 8006af8:	fb03 0002 	mla	r0, r3, r2, r0
 8006afc:	e7ce      	b.n	8006a9c <__gethex+0xc4>
 8006afe:	4631      	mov	r1, r6
 8006b00:	e7de      	b.n	8006ac0 <__gethex+0xe8>
 8006b02:	4629      	mov	r1, r5
 8006b04:	eba6 0309 	sub.w	r3, r6, r9
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	2b07      	cmp	r3, #7
 8006b0c:	dc0a      	bgt.n	8006b24 <__gethex+0x14c>
 8006b0e:	9801      	ldr	r0, [sp, #4]
 8006b10:	f000 fcfa 	bl	8007508 <_Balloc>
 8006b14:	4604      	mov	r4, r0
 8006b16:	b940      	cbnz	r0, 8006b2a <__gethex+0x152>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	21e4      	movs	r1, #228	@ 0xe4
 8006b1c:	4b5b      	ldr	r3, [pc, #364]	@ (8006c8c <__gethex+0x2b4>)
 8006b1e:	485c      	ldr	r0, [pc, #368]	@ (8006c90 <__gethex+0x2b8>)
 8006b20:	f001 fa86 	bl	8008030 <__assert_func>
 8006b24:	3101      	adds	r1, #1
 8006b26:	105b      	asrs	r3, r3, #1
 8006b28:	e7ef      	b.n	8006b0a <__gethex+0x132>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	f100 0a14 	add.w	sl, r0, #20
 8006b30:	4655      	mov	r5, sl
 8006b32:	469b      	mov	fp, r3
 8006b34:	45b1      	cmp	r9, r6
 8006b36:	d337      	bcc.n	8006ba8 <__gethex+0x1d0>
 8006b38:	f845 bb04 	str.w	fp, [r5], #4
 8006b3c:	eba5 050a 	sub.w	r5, r5, sl
 8006b40:	10ad      	asrs	r5, r5, #2
 8006b42:	6125      	str	r5, [r4, #16]
 8006b44:	4658      	mov	r0, fp
 8006b46:	f000 fdd1 	bl	80076ec <__hi0bits>
 8006b4a:	016d      	lsls	r5, r5, #5
 8006b4c:	f8d8 6000 	ldr.w	r6, [r8]
 8006b50:	1a2d      	subs	r5, r5, r0
 8006b52:	42b5      	cmp	r5, r6
 8006b54:	dd54      	ble.n	8006c00 <__gethex+0x228>
 8006b56:	1bad      	subs	r5, r5, r6
 8006b58:	4629      	mov	r1, r5
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f001 f959 	bl	8007e12 <__any_on>
 8006b60:	4681      	mov	r9, r0
 8006b62:	b178      	cbz	r0, 8006b84 <__gethex+0x1ac>
 8006b64:	f04f 0901 	mov.w	r9, #1
 8006b68:	1e6b      	subs	r3, r5, #1
 8006b6a:	1159      	asrs	r1, r3, #5
 8006b6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006b70:	f003 021f 	and.w	r2, r3, #31
 8006b74:	fa09 f202 	lsl.w	r2, r9, r2
 8006b78:	420a      	tst	r2, r1
 8006b7a:	d003      	beq.n	8006b84 <__gethex+0x1ac>
 8006b7c:	454b      	cmp	r3, r9
 8006b7e:	dc36      	bgt.n	8006bee <__gethex+0x216>
 8006b80:	f04f 0902 	mov.w	r9, #2
 8006b84:	4629      	mov	r1, r5
 8006b86:	4620      	mov	r0, r4
 8006b88:	f7ff febe 	bl	8006908 <rshift>
 8006b8c:	442f      	add	r7, r5
 8006b8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b92:	42bb      	cmp	r3, r7
 8006b94:	da42      	bge.n	8006c1c <__gethex+0x244>
 8006b96:	4621      	mov	r1, r4
 8006b98:	9801      	ldr	r0, [sp, #4]
 8006b9a:	f000 fcf5 	bl	8007588 <_Bfree>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ba2:	25a3      	movs	r5, #163	@ 0xa3
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	e793      	b.n	8006ad0 <__gethex+0xf8>
 8006ba8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006bac:	2a2e      	cmp	r2, #46	@ 0x2e
 8006bae:	d012      	beq.n	8006bd6 <__gethex+0x1fe>
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	d104      	bne.n	8006bbe <__gethex+0x1e6>
 8006bb4:	f845 bb04 	str.w	fp, [r5], #4
 8006bb8:	f04f 0b00 	mov.w	fp, #0
 8006bbc:	465b      	mov	r3, fp
 8006bbe:	7830      	ldrb	r0, [r6, #0]
 8006bc0:	9303      	str	r3, [sp, #12]
 8006bc2:	f7ff fef4 	bl	80069ae <__hexdig_fun>
 8006bc6:	9b03      	ldr	r3, [sp, #12]
 8006bc8:	f000 000f 	and.w	r0, r0, #15
 8006bcc:	4098      	lsls	r0, r3
 8006bce:	ea4b 0b00 	orr.w	fp, fp, r0
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	e7ae      	b.n	8006b34 <__gethex+0x15c>
 8006bd6:	45b1      	cmp	r9, r6
 8006bd8:	d8ea      	bhi.n	8006bb0 <__gethex+0x1d8>
 8006bda:	2201      	movs	r2, #1
 8006bdc:	4630      	mov	r0, r6
 8006bde:	492a      	ldr	r1, [pc, #168]	@ (8006c88 <__gethex+0x2b0>)
 8006be0:	9303      	str	r3, [sp, #12]
 8006be2:	f7fe ffcd 	bl	8005b80 <strncmp>
 8006be6:	9b03      	ldr	r3, [sp, #12]
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d1e1      	bne.n	8006bb0 <__gethex+0x1d8>
 8006bec:	e7a2      	b.n	8006b34 <__gethex+0x15c>
 8006bee:	4620      	mov	r0, r4
 8006bf0:	1ea9      	subs	r1, r5, #2
 8006bf2:	f001 f90e 	bl	8007e12 <__any_on>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d0c2      	beq.n	8006b80 <__gethex+0x1a8>
 8006bfa:	f04f 0903 	mov.w	r9, #3
 8006bfe:	e7c1      	b.n	8006b84 <__gethex+0x1ac>
 8006c00:	da09      	bge.n	8006c16 <__gethex+0x23e>
 8006c02:	1b75      	subs	r5, r6, r5
 8006c04:	4621      	mov	r1, r4
 8006c06:	462a      	mov	r2, r5
 8006c08:	9801      	ldr	r0, [sp, #4]
 8006c0a:	f000 fed3 	bl	80079b4 <__lshift>
 8006c0e:	4604      	mov	r4, r0
 8006c10:	1b7f      	subs	r7, r7, r5
 8006c12:	f100 0a14 	add.w	sl, r0, #20
 8006c16:	f04f 0900 	mov.w	r9, #0
 8006c1a:	e7b8      	b.n	8006b8e <__gethex+0x1b6>
 8006c1c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006c20:	42bd      	cmp	r5, r7
 8006c22:	dd6f      	ble.n	8006d04 <__gethex+0x32c>
 8006c24:	1bed      	subs	r5, r5, r7
 8006c26:	42ae      	cmp	r6, r5
 8006c28:	dc34      	bgt.n	8006c94 <__gethex+0x2bc>
 8006c2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d022      	beq.n	8006c78 <__gethex+0x2a0>
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d024      	beq.n	8006c80 <__gethex+0x2a8>
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d115      	bne.n	8006c66 <__gethex+0x28e>
 8006c3a:	42ae      	cmp	r6, r5
 8006c3c:	d113      	bne.n	8006c66 <__gethex+0x28e>
 8006c3e:	2e01      	cmp	r6, #1
 8006c40:	d10b      	bne.n	8006c5a <__gethex+0x282>
 8006c42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c46:	9a02      	ldr	r2, [sp, #8]
 8006c48:	2562      	movs	r5, #98	@ 0x62
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	6123      	str	r3, [r4, #16]
 8006c50:	f8ca 3000 	str.w	r3, [sl]
 8006c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c56:	601c      	str	r4, [r3, #0]
 8006c58:	e73a      	b.n	8006ad0 <__gethex+0xf8>
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	1e71      	subs	r1, r6, #1
 8006c5e:	f001 f8d8 	bl	8007e12 <__any_on>
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d1ed      	bne.n	8006c42 <__gethex+0x26a>
 8006c66:	4621      	mov	r1, r4
 8006c68:	9801      	ldr	r0, [sp, #4]
 8006c6a:	f000 fc8d 	bl	8007588 <_Bfree>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c72:	2550      	movs	r5, #80	@ 0x50
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	e72b      	b.n	8006ad0 <__gethex+0xf8>
 8006c78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f3      	bne.n	8006c66 <__gethex+0x28e>
 8006c7e:	e7e0      	b.n	8006c42 <__gethex+0x26a>
 8006c80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1dd      	bne.n	8006c42 <__gethex+0x26a>
 8006c86:	e7ee      	b.n	8006c66 <__gethex+0x28e>
 8006c88:	0800875b 	.word	0x0800875b
 8006c8c:	08008935 	.word	0x08008935
 8006c90:	08008946 	.word	0x08008946
 8006c94:	1e6f      	subs	r7, r5, #1
 8006c96:	f1b9 0f00 	cmp.w	r9, #0
 8006c9a:	d130      	bne.n	8006cfe <__gethex+0x326>
 8006c9c:	b127      	cbz	r7, 8006ca8 <__gethex+0x2d0>
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f001 f8b6 	bl	8007e12 <__any_on>
 8006ca6:	4681      	mov	r9, r0
 8006ca8:	2301      	movs	r3, #1
 8006caa:	4629      	mov	r1, r5
 8006cac:	1b76      	subs	r6, r6, r5
 8006cae:	2502      	movs	r5, #2
 8006cb0:	117a      	asrs	r2, r7, #5
 8006cb2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006cb6:	f007 071f 	and.w	r7, r7, #31
 8006cba:	40bb      	lsls	r3, r7
 8006cbc:	4213      	tst	r3, r2
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	bf18      	it	ne
 8006cc2:	f049 0902 	orrne.w	r9, r9, #2
 8006cc6:	f7ff fe1f 	bl	8006908 <rshift>
 8006cca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006cce:	f1b9 0f00 	cmp.w	r9, #0
 8006cd2:	d047      	beq.n	8006d64 <__gethex+0x38c>
 8006cd4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d015      	beq.n	8006d08 <__gethex+0x330>
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d017      	beq.n	8006d10 <__gethex+0x338>
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d109      	bne.n	8006cf8 <__gethex+0x320>
 8006ce4:	f019 0f02 	tst.w	r9, #2
 8006ce8:	d006      	beq.n	8006cf8 <__gethex+0x320>
 8006cea:	f8da 3000 	ldr.w	r3, [sl]
 8006cee:	ea49 0903 	orr.w	r9, r9, r3
 8006cf2:	f019 0f01 	tst.w	r9, #1
 8006cf6:	d10e      	bne.n	8006d16 <__gethex+0x33e>
 8006cf8:	f045 0510 	orr.w	r5, r5, #16
 8006cfc:	e032      	b.n	8006d64 <__gethex+0x38c>
 8006cfe:	f04f 0901 	mov.w	r9, #1
 8006d02:	e7d1      	b.n	8006ca8 <__gethex+0x2d0>
 8006d04:	2501      	movs	r5, #1
 8006d06:	e7e2      	b.n	8006cce <__gethex+0x2f6>
 8006d08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d0a:	f1c3 0301 	rsb	r3, r3, #1
 8006d0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <__gethex+0x320>
 8006d16:	f04f 0c00 	mov.w	ip, #0
 8006d1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006d1e:	f104 0314 	add.w	r3, r4, #20
 8006d22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006d26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d30:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8006d34:	d01b      	beq.n	8006d6e <__gethex+0x396>
 8006d36:	3201      	adds	r2, #1
 8006d38:	6002      	str	r2, [r0, #0]
 8006d3a:	2d02      	cmp	r5, #2
 8006d3c:	f104 0314 	add.w	r3, r4, #20
 8006d40:	d13c      	bne.n	8006dbc <__gethex+0x3e4>
 8006d42:	f8d8 2000 	ldr.w	r2, [r8]
 8006d46:	3a01      	subs	r2, #1
 8006d48:	42b2      	cmp	r2, r6
 8006d4a:	d109      	bne.n	8006d60 <__gethex+0x388>
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	1171      	asrs	r1, r6, #5
 8006d50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d54:	f006 061f 	and.w	r6, r6, #31
 8006d58:	fa02 f606 	lsl.w	r6, r2, r6
 8006d5c:	421e      	tst	r6, r3
 8006d5e:	d13a      	bne.n	8006dd6 <__gethex+0x3fe>
 8006d60:	f045 0520 	orr.w	r5, r5, #32
 8006d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d66:	601c      	str	r4, [r3, #0]
 8006d68:	9b02      	ldr	r3, [sp, #8]
 8006d6a:	601f      	str	r7, [r3, #0]
 8006d6c:	e6b0      	b.n	8006ad0 <__gethex+0xf8>
 8006d6e:	4299      	cmp	r1, r3
 8006d70:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d74:	d8d9      	bhi.n	8006d2a <__gethex+0x352>
 8006d76:	68a3      	ldr	r3, [r4, #8]
 8006d78:	459b      	cmp	fp, r3
 8006d7a:	db17      	blt.n	8006dac <__gethex+0x3d4>
 8006d7c:	6861      	ldr	r1, [r4, #4]
 8006d7e:	9801      	ldr	r0, [sp, #4]
 8006d80:	3101      	adds	r1, #1
 8006d82:	f000 fbc1 	bl	8007508 <_Balloc>
 8006d86:	4681      	mov	r9, r0
 8006d88:	b918      	cbnz	r0, 8006d92 <__gethex+0x3ba>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	2184      	movs	r1, #132	@ 0x84
 8006d8e:	4b19      	ldr	r3, [pc, #100]	@ (8006df4 <__gethex+0x41c>)
 8006d90:	e6c5      	b.n	8006b1e <__gethex+0x146>
 8006d92:	6922      	ldr	r2, [r4, #16]
 8006d94:	f104 010c 	add.w	r1, r4, #12
 8006d98:	3202      	adds	r2, #2
 8006d9a:	0092      	lsls	r2, r2, #2
 8006d9c:	300c      	adds	r0, #12
 8006d9e:	f7fe ff48 	bl	8005c32 <memcpy>
 8006da2:	4621      	mov	r1, r4
 8006da4:	9801      	ldr	r0, [sp, #4]
 8006da6:	f000 fbef 	bl	8007588 <_Bfree>
 8006daa:	464c      	mov	r4, r9
 8006dac:	6923      	ldr	r3, [r4, #16]
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	6122      	str	r2, [r4, #16]
 8006db2:	2201      	movs	r2, #1
 8006db4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006db8:	615a      	str	r2, [r3, #20]
 8006dba:	e7be      	b.n	8006d3a <__gethex+0x362>
 8006dbc:	6922      	ldr	r2, [r4, #16]
 8006dbe:	455a      	cmp	r2, fp
 8006dc0:	dd0b      	ble.n	8006dda <__gethex+0x402>
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	4620      	mov	r0, r4
 8006dc6:	f7ff fd9f 	bl	8006908 <rshift>
 8006dca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dce:	3701      	adds	r7, #1
 8006dd0:	42bb      	cmp	r3, r7
 8006dd2:	f6ff aee0 	blt.w	8006b96 <__gethex+0x1be>
 8006dd6:	2501      	movs	r5, #1
 8006dd8:	e7c2      	b.n	8006d60 <__gethex+0x388>
 8006dda:	f016 061f 	ands.w	r6, r6, #31
 8006dde:	d0fa      	beq.n	8006dd6 <__gethex+0x3fe>
 8006de0:	4453      	add	r3, sl
 8006de2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006de6:	f000 fc81 	bl	80076ec <__hi0bits>
 8006dea:	f1c6 0620 	rsb	r6, r6, #32
 8006dee:	42b0      	cmp	r0, r6
 8006df0:	dbe7      	blt.n	8006dc2 <__gethex+0x3ea>
 8006df2:	e7f0      	b.n	8006dd6 <__gethex+0x3fe>
 8006df4:	08008935 	.word	0x08008935

08006df8 <L_shift>:
 8006df8:	f1c2 0208 	rsb	r2, r2, #8
 8006dfc:	0092      	lsls	r2, r2, #2
 8006dfe:	b570      	push	{r4, r5, r6, lr}
 8006e00:	f1c2 0620 	rsb	r6, r2, #32
 8006e04:	6843      	ldr	r3, [r0, #4]
 8006e06:	6804      	ldr	r4, [r0, #0]
 8006e08:	fa03 f506 	lsl.w	r5, r3, r6
 8006e0c:	432c      	orrs	r4, r5
 8006e0e:	40d3      	lsrs	r3, r2
 8006e10:	6004      	str	r4, [r0, #0]
 8006e12:	f840 3f04 	str.w	r3, [r0, #4]!
 8006e16:	4288      	cmp	r0, r1
 8006e18:	d3f4      	bcc.n	8006e04 <L_shift+0xc>
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}

08006e1c <__match>:
 8006e1c:	b530      	push	{r4, r5, lr}
 8006e1e:	6803      	ldr	r3, [r0, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e26:	b914      	cbnz	r4, 8006e2e <__match+0x12>
 8006e28:	6003      	str	r3, [r0, #0]
 8006e2a:	2001      	movs	r0, #1
 8006e2c:	bd30      	pop	{r4, r5, pc}
 8006e2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e32:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006e36:	2d19      	cmp	r5, #25
 8006e38:	bf98      	it	ls
 8006e3a:	3220      	addls	r2, #32
 8006e3c:	42a2      	cmp	r2, r4
 8006e3e:	d0f0      	beq.n	8006e22 <__match+0x6>
 8006e40:	2000      	movs	r0, #0
 8006e42:	e7f3      	b.n	8006e2c <__match+0x10>

08006e44 <__hexnan>:
 8006e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e48:	2500      	movs	r5, #0
 8006e4a:	680b      	ldr	r3, [r1, #0]
 8006e4c:	4682      	mov	sl, r0
 8006e4e:	115e      	asrs	r6, r3, #5
 8006e50:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e54:	f013 031f 	ands.w	r3, r3, #31
 8006e58:	bf18      	it	ne
 8006e5a:	3604      	addne	r6, #4
 8006e5c:	1f37      	subs	r7, r6, #4
 8006e5e:	4690      	mov	r8, r2
 8006e60:	46b9      	mov	r9, r7
 8006e62:	463c      	mov	r4, r7
 8006e64:	46ab      	mov	fp, r5
 8006e66:	b087      	sub	sp, #28
 8006e68:	6801      	ldr	r1, [r0, #0]
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	f846 5c04 	str.w	r5, [r6, #-4]
 8006e70:	9502      	str	r5, [sp, #8]
 8006e72:	784a      	ldrb	r2, [r1, #1]
 8006e74:	1c4b      	adds	r3, r1, #1
 8006e76:	9303      	str	r3, [sp, #12]
 8006e78:	b342      	cbz	r2, 8006ecc <__hexnan+0x88>
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	9105      	str	r1, [sp, #20]
 8006e7e:	9204      	str	r2, [sp, #16]
 8006e80:	f7ff fd95 	bl	80069ae <__hexdig_fun>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d151      	bne.n	8006f2c <__hexnan+0xe8>
 8006e88:	9a04      	ldr	r2, [sp, #16]
 8006e8a:	9905      	ldr	r1, [sp, #20]
 8006e8c:	2a20      	cmp	r2, #32
 8006e8e:	d818      	bhi.n	8006ec2 <__hexnan+0x7e>
 8006e90:	9b02      	ldr	r3, [sp, #8]
 8006e92:	459b      	cmp	fp, r3
 8006e94:	dd13      	ble.n	8006ebe <__hexnan+0x7a>
 8006e96:	454c      	cmp	r4, r9
 8006e98:	d206      	bcs.n	8006ea8 <__hexnan+0x64>
 8006e9a:	2d07      	cmp	r5, #7
 8006e9c:	dc04      	bgt.n	8006ea8 <__hexnan+0x64>
 8006e9e:	462a      	mov	r2, r5
 8006ea0:	4649      	mov	r1, r9
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f7ff ffa8 	bl	8006df8 <L_shift>
 8006ea8:	4544      	cmp	r4, r8
 8006eaa:	d952      	bls.n	8006f52 <__hexnan+0x10e>
 8006eac:	2300      	movs	r3, #0
 8006eae:	f1a4 0904 	sub.w	r9, r4, #4
 8006eb2:	f844 3c04 	str.w	r3, [r4, #-4]
 8006eb6:	461d      	mov	r5, r3
 8006eb8:	464c      	mov	r4, r9
 8006eba:	f8cd b008 	str.w	fp, [sp, #8]
 8006ebe:	9903      	ldr	r1, [sp, #12]
 8006ec0:	e7d7      	b.n	8006e72 <__hexnan+0x2e>
 8006ec2:	2a29      	cmp	r2, #41	@ 0x29
 8006ec4:	d157      	bne.n	8006f76 <__hexnan+0x132>
 8006ec6:	3102      	adds	r1, #2
 8006ec8:	f8ca 1000 	str.w	r1, [sl]
 8006ecc:	f1bb 0f00 	cmp.w	fp, #0
 8006ed0:	d051      	beq.n	8006f76 <__hexnan+0x132>
 8006ed2:	454c      	cmp	r4, r9
 8006ed4:	d206      	bcs.n	8006ee4 <__hexnan+0xa0>
 8006ed6:	2d07      	cmp	r5, #7
 8006ed8:	dc04      	bgt.n	8006ee4 <__hexnan+0xa0>
 8006eda:	462a      	mov	r2, r5
 8006edc:	4649      	mov	r1, r9
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f7ff ff8a 	bl	8006df8 <L_shift>
 8006ee4:	4544      	cmp	r4, r8
 8006ee6:	d936      	bls.n	8006f56 <__hexnan+0x112>
 8006ee8:	4623      	mov	r3, r4
 8006eea:	f1a8 0204 	sub.w	r2, r8, #4
 8006eee:	f853 1b04 	ldr.w	r1, [r3], #4
 8006ef2:	429f      	cmp	r7, r3
 8006ef4:	f842 1f04 	str.w	r1, [r2, #4]!
 8006ef8:	d2f9      	bcs.n	8006eee <__hexnan+0xaa>
 8006efa:	1b3b      	subs	r3, r7, r4
 8006efc:	f023 0303 	bic.w	r3, r3, #3
 8006f00:	3304      	adds	r3, #4
 8006f02:	3401      	adds	r4, #1
 8006f04:	3e03      	subs	r6, #3
 8006f06:	42b4      	cmp	r4, r6
 8006f08:	bf88      	it	hi
 8006f0a:	2304      	movhi	r3, #4
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4443      	add	r3, r8
 8006f10:	f843 2b04 	str.w	r2, [r3], #4
 8006f14:	429f      	cmp	r7, r3
 8006f16:	d2fb      	bcs.n	8006f10 <__hexnan+0xcc>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	b91b      	cbnz	r3, 8006f24 <__hexnan+0xe0>
 8006f1c:	4547      	cmp	r7, r8
 8006f1e:	d128      	bne.n	8006f72 <__hexnan+0x12e>
 8006f20:	2301      	movs	r3, #1
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	2005      	movs	r0, #5
 8006f26:	b007      	add	sp, #28
 8006f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2c:	3501      	adds	r5, #1
 8006f2e:	2d08      	cmp	r5, #8
 8006f30:	f10b 0b01 	add.w	fp, fp, #1
 8006f34:	dd06      	ble.n	8006f44 <__hexnan+0x100>
 8006f36:	4544      	cmp	r4, r8
 8006f38:	d9c1      	bls.n	8006ebe <__hexnan+0x7a>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2501      	movs	r5, #1
 8006f3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f42:	3c04      	subs	r4, #4
 8006f44:	6822      	ldr	r2, [r4, #0]
 8006f46:	f000 000f 	and.w	r0, r0, #15
 8006f4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006f4e:	6020      	str	r0, [r4, #0]
 8006f50:	e7b5      	b.n	8006ebe <__hexnan+0x7a>
 8006f52:	2508      	movs	r5, #8
 8006f54:	e7b3      	b.n	8006ebe <__hexnan+0x7a>
 8006f56:	9b01      	ldr	r3, [sp, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0dd      	beq.n	8006f18 <__hexnan+0xd4>
 8006f5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f60:	f1c3 0320 	rsb	r3, r3, #32
 8006f64:	40da      	lsrs	r2, r3
 8006f66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	f846 3c04 	str.w	r3, [r6, #-4]
 8006f70:	e7d2      	b.n	8006f18 <__hexnan+0xd4>
 8006f72:	3f04      	subs	r7, #4
 8006f74:	e7d0      	b.n	8006f18 <__hexnan+0xd4>
 8006f76:	2004      	movs	r0, #4
 8006f78:	e7d5      	b.n	8006f26 <__hexnan+0xe2>

08006f7a <__ssputs_r>:
 8006f7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f7e:	461f      	mov	r7, r3
 8006f80:	688e      	ldr	r6, [r1, #8]
 8006f82:	4682      	mov	sl, r0
 8006f84:	42be      	cmp	r6, r7
 8006f86:	460c      	mov	r4, r1
 8006f88:	4690      	mov	r8, r2
 8006f8a:	680b      	ldr	r3, [r1, #0]
 8006f8c:	d82d      	bhi.n	8006fea <__ssputs_r+0x70>
 8006f8e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f92:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f96:	d026      	beq.n	8006fe6 <__ssputs_r+0x6c>
 8006f98:	6965      	ldr	r5, [r4, #20]
 8006f9a:	6909      	ldr	r1, [r1, #16]
 8006f9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fa0:	eba3 0901 	sub.w	r9, r3, r1
 8006fa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fa8:	1c7b      	adds	r3, r7, #1
 8006faa:	444b      	add	r3, r9
 8006fac:	106d      	asrs	r5, r5, #1
 8006fae:	429d      	cmp	r5, r3
 8006fb0:	bf38      	it	cc
 8006fb2:	461d      	movcc	r5, r3
 8006fb4:	0553      	lsls	r3, r2, #21
 8006fb6:	d527      	bpl.n	8007008 <__ssputs_r+0x8e>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f000 f95f 	bl	800727c <_malloc_r>
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	b360      	cbz	r0, 800701c <__ssputs_r+0xa2>
 8006fc2:	464a      	mov	r2, r9
 8006fc4:	6921      	ldr	r1, [r4, #16]
 8006fc6:	f7fe fe34 	bl	8005c32 <memcpy>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	6126      	str	r6, [r4, #16]
 8006fd8:	444e      	add	r6, r9
 8006fda:	6026      	str	r6, [r4, #0]
 8006fdc:	463e      	mov	r6, r7
 8006fde:	6165      	str	r5, [r4, #20]
 8006fe0:	eba5 0509 	sub.w	r5, r5, r9
 8006fe4:	60a5      	str	r5, [r4, #8]
 8006fe6:	42be      	cmp	r6, r7
 8006fe8:	d900      	bls.n	8006fec <__ssputs_r+0x72>
 8006fea:	463e      	mov	r6, r7
 8006fec:	4632      	mov	r2, r6
 8006fee:	4641      	mov	r1, r8
 8006ff0:	6820      	ldr	r0, [r4, #0]
 8006ff2:	f000 ffad 	bl	8007f50 <memmove>
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	68a3      	ldr	r3, [r4, #8]
 8006ffa:	1b9b      	subs	r3, r3, r6
 8006ffc:	60a3      	str	r3, [r4, #8]
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	4433      	add	r3, r6
 8007002:	6023      	str	r3, [r4, #0]
 8007004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007008:	462a      	mov	r2, r5
 800700a:	f000 ff66 	bl	8007eda <_realloc_r>
 800700e:	4606      	mov	r6, r0
 8007010:	2800      	cmp	r0, #0
 8007012:	d1e0      	bne.n	8006fd6 <__ssputs_r+0x5c>
 8007014:	4650      	mov	r0, sl
 8007016:	6921      	ldr	r1, [r4, #16]
 8007018:	f001 f83c 	bl	8008094 <_free_r>
 800701c:	230c      	movs	r3, #12
 800701e:	f8ca 3000 	str.w	r3, [sl]
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	e7e9      	b.n	8007004 <__ssputs_r+0x8a>

08007030 <_svfiprintf_r>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	4698      	mov	r8, r3
 8007036:	898b      	ldrh	r3, [r1, #12]
 8007038:	4607      	mov	r7, r0
 800703a:	061b      	lsls	r3, r3, #24
 800703c:	460d      	mov	r5, r1
 800703e:	4614      	mov	r4, r2
 8007040:	b09d      	sub	sp, #116	@ 0x74
 8007042:	d510      	bpl.n	8007066 <_svfiprintf_r+0x36>
 8007044:	690b      	ldr	r3, [r1, #16]
 8007046:	b973      	cbnz	r3, 8007066 <_svfiprintf_r+0x36>
 8007048:	2140      	movs	r1, #64	@ 0x40
 800704a:	f000 f917 	bl	800727c <_malloc_r>
 800704e:	6028      	str	r0, [r5, #0]
 8007050:	6128      	str	r0, [r5, #16]
 8007052:	b930      	cbnz	r0, 8007062 <_svfiprintf_r+0x32>
 8007054:	230c      	movs	r3, #12
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800705c:	b01d      	add	sp, #116	@ 0x74
 800705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007062:	2340      	movs	r3, #64	@ 0x40
 8007064:	616b      	str	r3, [r5, #20]
 8007066:	2300      	movs	r3, #0
 8007068:	9309      	str	r3, [sp, #36]	@ 0x24
 800706a:	2320      	movs	r3, #32
 800706c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007070:	2330      	movs	r3, #48	@ 0x30
 8007072:	f04f 0901 	mov.w	r9, #1
 8007076:	f8cd 800c 	str.w	r8, [sp, #12]
 800707a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007214 <_svfiprintf_r+0x1e4>
 800707e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007082:	4623      	mov	r3, r4
 8007084:	469a      	mov	sl, r3
 8007086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800708a:	b10a      	cbz	r2, 8007090 <_svfiprintf_r+0x60>
 800708c:	2a25      	cmp	r2, #37	@ 0x25
 800708e:	d1f9      	bne.n	8007084 <_svfiprintf_r+0x54>
 8007090:	ebba 0b04 	subs.w	fp, sl, r4
 8007094:	d00b      	beq.n	80070ae <_svfiprintf_r+0x7e>
 8007096:	465b      	mov	r3, fp
 8007098:	4622      	mov	r2, r4
 800709a:	4629      	mov	r1, r5
 800709c:	4638      	mov	r0, r7
 800709e:	f7ff ff6c 	bl	8006f7a <__ssputs_r>
 80070a2:	3001      	adds	r0, #1
 80070a4:	f000 80a7 	beq.w	80071f6 <_svfiprintf_r+0x1c6>
 80070a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070aa:	445a      	add	r2, fp
 80070ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80070ae:	f89a 3000 	ldrb.w	r3, [sl]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 809f 	beq.w	80071f6 <_svfiprintf_r+0x1c6>
 80070b8:	2300      	movs	r3, #0
 80070ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80070be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c2:	f10a 0a01 	add.w	sl, sl, #1
 80070c6:	9304      	str	r3, [sp, #16]
 80070c8:	9307      	str	r3, [sp, #28]
 80070ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80070d0:	4654      	mov	r4, sl
 80070d2:	2205      	movs	r2, #5
 80070d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d8:	484e      	ldr	r0, [pc, #312]	@ (8007214 <_svfiprintf_r+0x1e4>)
 80070da:	f7fe fd9c 	bl	8005c16 <memchr>
 80070de:	9a04      	ldr	r2, [sp, #16]
 80070e0:	b9d8      	cbnz	r0, 800711a <_svfiprintf_r+0xea>
 80070e2:	06d0      	lsls	r0, r2, #27
 80070e4:	bf44      	itt	mi
 80070e6:	2320      	movmi	r3, #32
 80070e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ec:	0711      	lsls	r1, r2, #28
 80070ee:	bf44      	itt	mi
 80070f0:	232b      	movmi	r3, #43	@ 0x2b
 80070f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070f6:	f89a 3000 	ldrb.w	r3, [sl]
 80070fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80070fc:	d015      	beq.n	800712a <_svfiprintf_r+0xfa>
 80070fe:	4654      	mov	r4, sl
 8007100:	2000      	movs	r0, #0
 8007102:	f04f 0c0a 	mov.w	ip, #10
 8007106:	9a07      	ldr	r2, [sp, #28]
 8007108:	4621      	mov	r1, r4
 800710a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800710e:	3b30      	subs	r3, #48	@ 0x30
 8007110:	2b09      	cmp	r3, #9
 8007112:	d94b      	bls.n	80071ac <_svfiprintf_r+0x17c>
 8007114:	b1b0      	cbz	r0, 8007144 <_svfiprintf_r+0x114>
 8007116:	9207      	str	r2, [sp, #28]
 8007118:	e014      	b.n	8007144 <_svfiprintf_r+0x114>
 800711a:	eba0 0308 	sub.w	r3, r0, r8
 800711e:	fa09 f303 	lsl.w	r3, r9, r3
 8007122:	4313      	orrs	r3, r2
 8007124:	46a2      	mov	sl, r4
 8007126:	9304      	str	r3, [sp, #16]
 8007128:	e7d2      	b.n	80070d0 <_svfiprintf_r+0xa0>
 800712a:	9b03      	ldr	r3, [sp, #12]
 800712c:	1d19      	adds	r1, r3, #4
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	9103      	str	r1, [sp, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	bfbb      	ittet	lt
 8007136:	425b      	neglt	r3, r3
 8007138:	f042 0202 	orrlt.w	r2, r2, #2
 800713c:	9307      	strge	r3, [sp, #28]
 800713e:	9307      	strlt	r3, [sp, #28]
 8007140:	bfb8      	it	lt
 8007142:	9204      	strlt	r2, [sp, #16]
 8007144:	7823      	ldrb	r3, [r4, #0]
 8007146:	2b2e      	cmp	r3, #46	@ 0x2e
 8007148:	d10a      	bne.n	8007160 <_svfiprintf_r+0x130>
 800714a:	7863      	ldrb	r3, [r4, #1]
 800714c:	2b2a      	cmp	r3, #42	@ 0x2a
 800714e:	d132      	bne.n	80071b6 <_svfiprintf_r+0x186>
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	3402      	adds	r4, #2
 8007154:	1d1a      	adds	r2, r3, #4
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	9203      	str	r2, [sp, #12]
 800715a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800715e:	9305      	str	r3, [sp, #20]
 8007160:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007218 <_svfiprintf_r+0x1e8>
 8007164:	2203      	movs	r2, #3
 8007166:	4650      	mov	r0, sl
 8007168:	7821      	ldrb	r1, [r4, #0]
 800716a:	f7fe fd54 	bl	8005c16 <memchr>
 800716e:	b138      	cbz	r0, 8007180 <_svfiprintf_r+0x150>
 8007170:	2240      	movs	r2, #64	@ 0x40
 8007172:	9b04      	ldr	r3, [sp, #16]
 8007174:	eba0 000a 	sub.w	r0, r0, sl
 8007178:	4082      	lsls	r2, r0
 800717a:	4313      	orrs	r3, r2
 800717c:	3401      	adds	r4, #1
 800717e:	9304      	str	r3, [sp, #16]
 8007180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007184:	2206      	movs	r2, #6
 8007186:	4825      	ldr	r0, [pc, #148]	@ (800721c <_svfiprintf_r+0x1ec>)
 8007188:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800718c:	f7fe fd43 	bl	8005c16 <memchr>
 8007190:	2800      	cmp	r0, #0
 8007192:	d036      	beq.n	8007202 <_svfiprintf_r+0x1d2>
 8007194:	4b22      	ldr	r3, [pc, #136]	@ (8007220 <_svfiprintf_r+0x1f0>)
 8007196:	bb1b      	cbnz	r3, 80071e0 <_svfiprintf_r+0x1b0>
 8007198:	9b03      	ldr	r3, [sp, #12]
 800719a:	3307      	adds	r3, #7
 800719c:	f023 0307 	bic.w	r3, r3, #7
 80071a0:	3308      	adds	r3, #8
 80071a2:	9303      	str	r3, [sp, #12]
 80071a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a6:	4433      	add	r3, r6
 80071a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80071aa:	e76a      	b.n	8007082 <_svfiprintf_r+0x52>
 80071ac:	460c      	mov	r4, r1
 80071ae:	2001      	movs	r0, #1
 80071b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071b4:	e7a8      	b.n	8007108 <_svfiprintf_r+0xd8>
 80071b6:	2300      	movs	r3, #0
 80071b8:	f04f 0c0a 	mov.w	ip, #10
 80071bc:	4619      	mov	r1, r3
 80071be:	3401      	adds	r4, #1
 80071c0:	9305      	str	r3, [sp, #20]
 80071c2:	4620      	mov	r0, r4
 80071c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c8:	3a30      	subs	r2, #48	@ 0x30
 80071ca:	2a09      	cmp	r2, #9
 80071cc:	d903      	bls.n	80071d6 <_svfiprintf_r+0x1a6>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0c6      	beq.n	8007160 <_svfiprintf_r+0x130>
 80071d2:	9105      	str	r1, [sp, #20]
 80071d4:	e7c4      	b.n	8007160 <_svfiprintf_r+0x130>
 80071d6:	4604      	mov	r4, r0
 80071d8:	2301      	movs	r3, #1
 80071da:	fb0c 2101 	mla	r1, ip, r1, r2
 80071de:	e7f0      	b.n	80071c2 <_svfiprintf_r+0x192>
 80071e0:	ab03      	add	r3, sp, #12
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	462a      	mov	r2, r5
 80071e6:	4638      	mov	r0, r7
 80071e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007224 <_svfiprintf_r+0x1f4>)
 80071ea:	a904      	add	r1, sp, #16
 80071ec:	f7fc ff9c 	bl	8004128 <_printf_float>
 80071f0:	1c42      	adds	r2, r0, #1
 80071f2:	4606      	mov	r6, r0
 80071f4:	d1d6      	bne.n	80071a4 <_svfiprintf_r+0x174>
 80071f6:	89ab      	ldrh	r3, [r5, #12]
 80071f8:	065b      	lsls	r3, r3, #25
 80071fa:	f53f af2d 	bmi.w	8007058 <_svfiprintf_r+0x28>
 80071fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007200:	e72c      	b.n	800705c <_svfiprintf_r+0x2c>
 8007202:	ab03      	add	r3, sp, #12
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	462a      	mov	r2, r5
 8007208:	4638      	mov	r0, r7
 800720a:	4b06      	ldr	r3, [pc, #24]	@ (8007224 <_svfiprintf_r+0x1f4>)
 800720c:	a904      	add	r1, sp, #16
 800720e:	f7fd fa29 	bl	8004664 <_printf_i>
 8007212:	e7ed      	b.n	80071f0 <_svfiprintf_r+0x1c0>
 8007214:	080089a6 	.word	0x080089a6
 8007218:	080089ac 	.word	0x080089ac
 800721c:	080089b0 	.word	0x080089b0
 8007220:	08004129 	.word	0x08004129
 8007224:	08006f7b 	.word	0x08006f7b

08007228 <malloc>:
 8007228:	4b02      	ldr	r3, [pc, #8]	@ (8007234 <malloc+0xc>)
 800722a:	4601      	mov	r1, r0
 800722c:	6818      	ldr	r0, [r3, #0]
 800722e:	f000 b825 	b.w	800727c <_malloc_r>
 8007232:	bf00      	nop
 8007234:	20000188 	.word	0x20000188

08007238 <sbrk_aligned>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	4e0f      	ldr	r6, [pc, #60]	@ (8007278 <sbrk_aligned+0x40>)
 800723c:	460c      	mov	r4, r1
 800723e:	6831      	ldr	r1, [r6, #0]
 8007240:	4605      	mov	r5, r0
 8007242:	b911      	cbnz	r1, 800724a <sbrk_aligned+0x12>
 8007244:	f000 fed2 	bl	8007fec <_sbrk_r>
 8007248:	6030      	str	r0, [r6, #0]
 800724a:	4621      	mov	r1, r4
 800724c:	4628      	mov	r0, r5
 800724e:	f000 fecd 	bl	8007fec <_sbrk_r>
 8007252:	1c43      	adds	r3, r0, #1
 8007254:	d103      	bne.n	800725e <sbrk_aligned+0x26>
 8007256:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800725a:	4620      	mov	r0, r4
 800725c:	bd70      	pop	{r4, r5, r6, pc}
 800725e:	1cc4      	adds	r4, r0, #3
 8007260:	f024 0403 	bic.w	r4, r4, #3
 8007264:	42a0      	cmp	r0, r4
 8007266:	d0f8      	beq.n	800725a <sbrk_aligned+0x22>
 8007268:	1a21      	subs	r1, r4, r0
 800726a:	4628      	mov	r0, r5
 800726c:	f000 febe 	bl	8007fec <_sbrk_r>
 8007270:	3001      	adds	r0, #1
 8007272:	d1f2      	bne.n	800725a <sbrk_aligned+0x22>
 8007274:	e7ef      	b.n	8007256 <sbrk_aligned+0x1e>
 8007276:	bf00      	nop
 8007278:	20000454 	.word	0x20000454

0800727c <_malloc_r>:
 800727c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007280:	1ccd      	adds	r5, r1, #3
 8007282:	f025 0503 	bic.w	r5, r5, #3
 8007286:	3508      	adds	r5, #8
 8007288:	2d0c      	cmp	r5, #12
 800728a:	bf38      	it	cc
 800728c:	250c      	movcc	r5, #12
 800728e:	2d00      	cmp	r5, #0
 8007290:	4606      	mov	r6, r0
 8007292:	db01      	blt.n	8007298 <_malloc_r+0x1c>
 8007294:	42a9      	cmp	r1, r5
 8007296:	d904      	bls.n	80072a2 <_malloc_r+0x26>
 8007298:	230c      	movs	r3, #12
 800729a:	6033      	str	r3, [r6, #0]
 800729c:	2000      	movs	r0, #0
 800729e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007378 <_malloc_r+0xfc>
 80072a6:	f000 f923 	bl	80074f0 <__malloc_lock>
 80072aa:	f8d8 3000 	ldr.w	r3, [r8]
 80072ae:	461c      	mov	r4, r3
 80072b0:	bb44      	cbnz	r4, 8007304 <_malloc_r+0x88>
 80072b2:	4629      	mov	r1, r5
 80072b4:	4630      	mov	r0, r6
 80072b6:	f7ff ffbf 	bl	8007238 <sbrk_aligned>
 80072ba:	1c43      	adds	r3, r0, #1
 80072bc:	4604      	mov	r4, r0
 80072be:	d158      	bne.n	8007372 <_malloc_r+0xf6>
 80072c0:	f8d8 4000 	ldr.w	r4, [r8]
 80072c4:	4627      	mov	r7, r4
 80072c6:	2f00      	cmp	r7, #0
 80072c8:	d143      	bne.n	8007352 <_malloc_r+0xd6>
 80072ca:	2c00      	cmp	r4, #0
 80072cc:	d04b      	beq.n	8007366 <_malloc_r+0xea>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	4639      	mov	r1, r7
 80072d2:	4630      	mov	r0, r6
 80072d4:	eb04 0903 	add.w	r9, r4, r3
 80072d8:	f000 fe88 	bl	8007fec <_sbrk_r>
 80072dc:	4581      	cmp	r9, r0
 80072de:	d142      	bne.n	8007366 <_malloc_r+0xea>
 80072e0:	6821      	ldr	r1, [r4, #0]
 80072e2:	4630      	mov	r0, r6
 80072e4:	1a6d      	subs	r5, r5, r1
 80072e6:	4629      	mov	r1, r5
 80072e8:	f7ff ffa6 	bl	8007238 <sbrk_aligned>
 80072ec:	3001      	adds	r0, #1
 80072ee:	d03a      	beq.n	8007366 <_malloc_r+0xea>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	442b      	add	r3, r5
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	f8d8 3000 	ldr.w	r3, [r8]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	bb62      	cbnz	r2, 8007358 <_malloc_r+0xdc>
 80072fe:	f8c8 7000 	str.w	r7, [r8]
 8007302:	e00f      	b.n	8007324 <_malloc_r+0xa8>
 8007304:	6822      	ldr	r2, [r4, #0]
 8007306:	1b52      	subs	r2, r2, r5
 8007308:	d420      	bmi.n	800734c <_malloc_r+0xd0>
 800730a:	2a0b      	cmp	r2, #11
 800730c:	d917      	bls.n	800733e <_malloc_r+0xc2>
 800730e:	1961      	adds	r1, r4, r5
 8007310:	42a3      	cmp	r3, r4
 8007312:	6025      	str	r5, [r4, #0]
 8007314:	bf18      	it	ne
 8007316:	6059      	strne	r1, [r3, #4]
 8007318:	6863      	ldr	r3, [r4, #4]
 800731a:	bf08      	it	eq
 800731c:	f8c8 1000 	streq.w	r1, [r8]
 8007320:	5162      	str	r2, [r4, r5]
 8007322:	604b      	str	r3, [r1, #4]
 8007324:	4630      	mov	r0, r6
 8007326:	f000 f8e9 	bl	80074fc <__malloc_unlock>
 800732a:	f104 000b 	add.w	r0, r4, #11
 800732e:	1d23      	adds	r3, r4, #4
 8007330:	f020 0007 	bic.w	r0, r0, #7
 8007334:	1ac2      	subs	r2, r0, r3
 8007336:	bf1c      	itt	ne
 8007338:	1a1b      	subne	r3, r3, r0
 800733a:	50a3      	strne	r3, [r4, r2]
 800733c:	e7af      	b.n	800729e <_malloc_r+0x22>
 800733e:	6862      	ldr	r2, [r4, #4]
 8007340:	42a3      	cmp	r3, r4
 8007342:	bf0c      	ite	eq
 8007344:	f8c8 2000 	streq.w	r2, [r8]
 8007348:	605a      	strne	r2, [r3, #4]
 800734a:	e7eb      	b.n	8007324 <_malloc_r+0xa8>
 800734c:	4623      	mov	r3, r4
 800734e:	6864      	ldr	r4, [r4, #4]
 8007350:	e7ae      	b.n	80072b0 <_malloc_r+0x34>
 8007352:	463c      	mov	r4, r7
 8007354:	687f      	ldr	r7, [r7, #4]
 8007356:	e7b6      	b.n	80072c6 <_malloc_r+0x4a>
 8007358:	461a      	mov	r2, r3
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	42a3      	cmp	r3, r4
 800735e:	d1fb      	bne.n	8007358 <_malloc_r+0xdc>
 8007360:	2300      	movs	r3, #0
 8007362:	6053      	str	r3, [r2, #4]
 8007364:	e7de      	b.n	8007324 <_malloc_r+0xa8>
 8007366:	230c      	movs	r3, #12
 8007368:	4630      	mov	r0, r6
 800736a:	6033      	str	r3, [r6, #0]
 800736c:	f000 f8c6 	bl	80074fc <__malloc_unlock>
 8007370:	e794      	b.n	800729c <_malloc_r+0x20>
 8007372:	6005      	str	r5, [r0, #0]
 8007374:	e7d6      	b.n	8007324 <_malloc_r+0xa8>
 8007376:	bf00      	nop
 8007378:	20000458 	.word	0x20000458

0800737c <__ascii_mbtowc>:
 800737c:	b082      	sub	sp, #8
 800737e:	b901      	cbnz	r1, 8007382 <__ascii_mbtowc+0x6>
 8007380:	a901      	add	r1, sp, #4
 8007382:	b142      	cbz	r2, 8007396 <__ascii_mbtowc+0x1a>
 8007384:	b14b      	cbz	r3, 800739a <__ascii_mbtowc+0x1e>
 8007386:	7813      	ldrb	r3, [r2, #0]
 8007388:	600b      	str	r3, [r1, #0]
 800738a:	7812      	ldrb	r2, [r2, #0]
 800738c:	1e10      	subs	r0, r2, #0
 800738e:	bf18      	it	ne
 8007390:	2001      	movne	r0, #1
 8007392:	b002      	add	sp, #8
 8007394:	4770      	bx	lr
 8007396:	4610      	mov	r0, r2
 8007398:	e7fb      	b.n	8007392 <__ascii_mbtowc+0x16>
 800739a:	f06f 0001 	mvn.w	r0, #1
 800739e:	e7f8      	b.n	8007392 <__ascii_mbtowc+0x16>

080073a0 <__sflush_r>:
 80073a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	0716      	lsls	r6, r2, #28
 80073a8:	4605      	mov	r5, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	d454      	bmi.n	8007458 <__sflush_r+0xb8>
 80073ae:	684b      	ldr	r3, [r1, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	dc02      	bgt.n	80073ba <__sflush_r+0x1a>
 80073b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	dd48      	ble.n	800744c <__sflush_r+0xac>
 80073ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073bc:	2e00      	cmp	r6, #0
 80073be:	d045      	beq.n	800744c <__sflush_r+0xac>
 80073c0:	2300      	movs	r3, #0
 80073c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073c6:	682f      	ldr	r7, [r5, #0]
 80073c8:	6a21      	ldr	r1, [r4, #32]
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	d030      	beq.n	8007430 <__sflush_r+0x90>
 80073ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	0759      	lsls	r1, r3, #29
 80073d4:	d505      	bpl.n	80073e2 <__sflush_r+0x42>
 80073d6:	6863      	ldr	r3, [r4, #4]
 80073d8:	1ad2      	subs	r2, r2, r3
 80073da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073dc:	b10b      	cbz	r3, 80073e2 <__sflush_r+0x42>
 80073de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073e0:	1ad2      	subs	r2, r2, r3
 80073e2:	2300      	movs	r3, #0
 80073e4:	4628      	mov	r0, r5
 80073e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073e8:	6a21      	ldr	r1, [r4, #32]
 80073ea:	47b0      	blx	r6
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	d106      	bne.n	8007400 <__sflush_r+0x60>
 80073f2:	6829      	ldr	r1, [r5, #0]
 80073f4:	291d      	cmp	r1, #29
 80073f6:	d82b      	bhi.n	8007450 <__sflush_r+0xb0>
 80073f8:	4a28      	ldr	r2, [pc, #160]	@ (800749c <__sflush_r+0xfc>)
 80073fa:	410a      	asrs	r2, r1
 80073fc:	07d6      	lsls	r6, r2, #31
 80073fe:	d427      	bmi.n	8007450 <__sflush_r+0xb0>
 8007400:	2200      	movs	r2, #0
 8007402:	6062      	str	r2, [r4, #4]
 8007404:	6922      	ldr	r2, [r4, #16]
 8007406:	04d9      	lsls	r1, r3, #19
 8007408:	6022      	str	r2, [r4, #0]
 800740a:	d504      	bpl.n	8007416 <__sflush_r+0x76>
 800740c:	1c42      	adds	r2, r0, #1
 800740e:	d101      	bne.n	8007414 <__sflush_r+0x74>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	b903      	cbnz	r3, 8007416 <__sflush_r+0x76>
 8007414:	6560      	str	r0, [r4, #84]	@ 0x54
 8007416:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007418:	602f      	str	r7, [r5, #0]
 800741a:	b1b9      	cbz	r1, 800744c <__sflush_r+0xac>
 800741c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007420:	4299      	cmp	r1, r3
 8007422:	d002      	beq.n	800742a <__sflush_r+0x8a>
 8007424:	4628      	mov	r0, r5
 8007426:	f000 fe35 	bl	8008094 <_free_r>
 800742a:	2300      	movs	r3, #0
 800742c:	6363      	str	r3, [r4, #52]	@ 0x34
 800742e:	e00d      	b.n	800744c <__sflush_r+0xac>
 8007430:	2301      	movs	r3, #1
 8007432:	4628      	mov	r0, r5
 8007434:	47b0      	blx	r6
 8007436:	4602      	mov	r2, r0
 8007438:	1c50      	adds	r0, r2, #1
 800743a:	d1c9      	bne.n	80073d0 <__sflush_r+0x30>
 800743c:	682b      	ldr	r3, [r5, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d0c6      	beq.n	80073d0 <__sflush_r+0x30>
 8007442:	2b1d      	cmp	r3, #29
 8007444:	d001      	beq.n	800744a <__sflush_r+0xaa>
 8007446:	2b16      	cmp	r3, #22
 8007448:	d11d      	bne.n	8007486 <__sflush_r+0xe6>
 800744a:	602f      	str	r7, [r5, #0]
 800744c:	2000      	movs	r0, #0
 800744e:	e021      	b.n	8007494 <__sflush_r+0xf4>
 8007450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007454:	b21b      	sxth	r3, r3
 8007456:	e01a      	b.n	800748e <__sflush_r+0xee>
 8007458:	690f      	ldr	r7, [r1, #16]
 800745a:	2f00      	cmp	r7, #0
 800745c:	d0f6      	beq.n	800744c <__sflush_r+0xac>
 800745e:	0793      	lsls	r3, r2, #30
 8007460:	bf18      	it	ne
 8007462:	2300      	movne	r3, #0
 8007464:	680e      	ldr	r6, [r1, #0]
 8007466:	bf08      	it	eq
 8007468:	694b      	ldreq	r3, [r1, #20]
 800746a:	1bf6      	subs	r6, r6, r7
 800746c:	600f      	str	r7, [r1, #0]
 800746e:	608b      	str	r3, [r1, #8]
 8007470:	2e00      	cmp	r6, #0
 8007472:	ddeb      	ble.n	800744c <__sflush_r+0xac>
 8007474:	4633      	mov	r3, r6
 8007476:	463a      	mov	r2, r7
 8007478:	4628      	mov	r0, r5
 800747a:	6a21      	ldr	r1, [r4, #32]
 800747c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007480:	47e0      	blx	ip
 8007482:	2800      	cmp	r0, #0
 8007484:	dc07      	bgt.n	8007496 <__sflush_r+0xf6>
 8007486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800748a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800748e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007492:	81a3      	strh	r3, [r4, #12]
 8007494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007496:	4407      	add	r7, r0
 8007498:	1a36      	subs	r6, r6, r0
 800749a:	e7e9      	b.n	8007470 <__sflush_r+0xd0>
 800749c:	dfbffffe 	.word	0xdfbffffe

080074a0 <_fflush_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	690b      	ldr	r3, [r1, #16]
 80074a4:	4605      	mov	r5, r0
 80074a6:	460c      	mov	r4, r1
 80074a8:	b913      	cbnz	r3, 80074b0 <_fflush_r+0x10>
 80074aa:	2500      	movs	r5, #0
 80074ac:	4628      	mov	r0, r5
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	b118      	cbz	r0, 80074ba <_fflush_r+0x1a>
 80074b2:	6a03      	ldr	r3, [r0, #32]
 80074b4:	b90b      	cbnz	r3, 80074ba <_fflush_r+0x1a>
 80074b6:	f7fd fcb1 	bl	8004e1c <__sinit>
 80074ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0f3      	beq.n	80074aa <_fflush_r+0xa>
 80074c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074c4:	07d0      	lsls	r0, r2, #31
 80074c6:	d404      	bmi.n	80074d2 <_fflush_r+0x32>
 80074c8:	0599      	lsls	r1, r3, #22
 80074ca:	d402      	bmi.n	80074d2 <_fflush_r+0x32>
 80074cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074ce:	f7fe fba0 	bl	8005c12 <__retarget_lock_acquire_recursive>
 80074d2:	4628      	mov	r0, r5
 80074d4:	4621      	mov	r1, r4
 80074d6:	f7ff ff63 	bl	80073a0 <__sflush_r>
 80074da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074dc:	4605      	mov	r5, r0
 80074de:	07da      	lsls	r2, r3, #31
 80074e0:	d4e4      	bmi.n	80074ac <_fflush_r+0xc>
 80074e2:	89a3      	ldrh	r3, [r4, #12]
 80074e4:	059b      	lsls	r3, r3, #22
 80074e6:	d4e1      	bmi.n	80074ac <_fflush_r+0xc>
 80074e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074ea:	f7fe fb93 	bl	8005c14 <__retarget_lock_release_recursive>
 80074ee:	e7dd      	b.n	80074ac <_fflush_r+0xc>

080074f0 <__malloc_lock>:
 80074f0:	4801      	ldr	r0, [pc, #4]	@ (80074f8 <__malloc_lock+0x8>)
 80074f2:	f7fe bb8e 	b.w	8005c12 <__retarget_lock_acquire_recursive>
 80074f6:	bf00      	nop
 80074f8:	20000450 	.word	0x20000450

080074fc <__malloc_unlock>:
 80074fc:	4801      	ldr	r0, [pc, #4]	@ (8007504 <__malloc_unlock+0x8>)
 80074fe:	f7fe bb89 	b.w	8005c14 <__retarget_lock_release_recursive>
 8007502:	bf00      	nop
 8007504:	20000450 	.word	0x20000450

08007508 <_Balloc>:
 8007508:	b570      	push	{r4, r5, r6, lr}
 800750a:	69c6      	ldr	r6, [r0, #28]
 800750c:	4604      	mov	r4, r0
 800750e:	460d      	mov	r5, r1
 8007510:	b976      	cbnz	r6, 8007530 <_Balloc+0x28>
 8007512:	2010      	movs	r0, #16
 8007514:	f7ff fe88 	bl	8007228 <malloc>
 8007518:	4602      	mov	r2, r0
 800751a:	61e0      	str	r0, [r4, #28]
 800751c:	b920      	cbnz	r0, 8007528 <_Balloc+0x20>
 800751e:	216b      	movs	r1, #107	@ 0x6b
 8007520:	4b17      	ldr	r3, [pc, #92]	@ (8007580 <_Balloc+0x78>)
 8007522:	4818      	ldr	r0, [pc, #96]	@ (8007584 <_Balloc+0x7c>)
 8007524:	f000 fd84 	bl	8008030 <__assert_func>
 8007528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800752c:	6006      	str	r6, [r0, #0]
 800752e:	60c6      	str	r6, [r0, #12]
 8007530:	69e6      	ldr	r6, [r4, #28]
 8007532:	68f3      	ldr	r3, [r6, #12]
 8007534:	b183      	cbz	r3, 8007558 <_Balloc+0x50>
 8007536:	69e3      	ldr	r3, [r4, #28]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800753e:	b9b8      	cbnz	r0, 8007570 <_Balloc+0x68>
 8007540:	2101      	movs	r1, #1
 8007542:	fa01 f605 	lsl.w	r6, r1, r5
 8007546:	1d72      	adds	r2, r6, #5
 8007548:	4620      	mov	r0, r4
 800754a:	0092      	lsls	r2, r2, #2
 800754c:	f000 fd8e 	bl	800806c <_calloc_r>
 8007550:	b160      	cbz	r0, 800756c <_Balloc+0x64>
 8007552:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007556:	e00e      	b.n	8007576 <_Balloc+0x6e>
 8007558:	2221      	movs	r2, #33	@ 0x21
 800755a:	2104      	movs	r1, #4
 800755c:	4620      	mov	r0, r4
 800755e:	f000 fd85 	bl	800806c <_calloc_r>
 8007562:	69e3      	ldr	r3, [r4, #28]
 8007564:	60f0      	str	r0, [r6, #12]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e4      	bne.n	8007536 <_Balloc+0x2e>
 800756c:	2000      	movs	r0, #0
 800756e:	bd70      	pop	{r4, r5, r6, pc}
 8007570:	6802      	ldr	r2, [r0, #0]
 8007572:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007576:	2300      	movs	r3, #0
 8007578:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800757c:	e7f7      	b.n	800756e <_Balloc+0x66>
 800757e:	bf00      	nop
 8007580:	080088c6 	.word	0x080088c6
 8007584:	080089b7 	.word	0x080089b7

08007588 <_Bfree>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	69c6      	ldr	r6, [r0, #28]
 800758c:	4605      	mov	r5, r0
 800758e:	460c      	mov	r4, r1
 8007590:	b976      	cbnz	r6, 80075b0 <_Bfree+0x28>
 8007592:	2010      	movs	r0, #16
 8007594:	f7ff fe48 	bl	8007228 <malloc>
 8007598:	4602      	mov	r2, r0
 800759a:	61e8      	str	r0, [r5, #28]
 800759c:	b920      	cbnz	r0, 80075a8 <_Bfree+0x20>
 800759e:	218f      	movs	r1, #143	@ 0x8f
 80075a0:	4b08      	ldr	r3, [pc, #32]	@ (80075c4 <_Bfree+0x3c>)
 80075a2:	4809      	ldr	r0, [pc, #36]	@ (80075c8 <_Bfree+0x40>)
 80075a4:	f000 fd44 	bl	8008030 <__assert_func>
 80075a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075ac:	6006      	str	r6, [r0, #0]
 80075ae:	60c6      	str	r6, [r0, #12]
 80075b0:	b13c      	cbz	r4, 80075c2 <_Bfree+0x3a>
 80075b2:	69eb      	ldr	r3, [r5, #28]
 80075b4:	6862      	ldr	r2, [r4, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075bc:	6021      	str	r1, [r4, #0]
 80075be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075c2:	bd70      	pop	{r4, r5, r6, pc}
 80075c4:	080088c6 	.word	0x080088c6
 80075c8:	080089b7 	.word	0x080089b7

080075cc <__multadd>:
 80075cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d0:	4607      	mov	r7, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	461e      	mov	r6, r3
 80075d6:	2000      	movs	r0, #0
 80075d8:	690d      	ldr	r5, [r1, #16]
 80075da:	f101 0c14 	add.w	ip, r1, #20
 80075de:	f8dc 3000 	ldr.w	r3, [ip]
 80075e2:	3001      	adds	r0, #1
 80075e4:	b299      	uxth	r1, r3
 80075e6:	fb02 6101 	mla	r1, r2, r1, r6
 80075ea:	0c1e      	lsrs	r6, r3, #16
 80075ec:	0c0b      	lsrs	r3, r1, #16
 80075ee:	fb02 3306 	mla	r3, r2, r6, r3
 80075f2:	b289      	uxth	r1, r1
 80075f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075f8:	4285      	cmp	r5, r0
 80075fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075fe:	f84c 1b04 	str.w	r1, [ip], #4
 8007602:	dcec      	bgt.n	80075de <__multadd+0x12>
 8007604:	b30e      	cbz	r6, 800764a <__multadd+0x7e>
 8007606:	68a3      	ldr	r3, [r4, #8]
 8007608:	42ab      	cmp	r3, r5
 800760a:	dc19      	bgt.n	8007640 <__multadd+0x74>
 800760c:	6861      	ldr	r1, [r4, #4]
 800760e:	4638      	mov	r0, r7
 8007610:	3101      	adds	r1, #1
 8007612:	f7ff ff79 	bl	8007508 <_Balloc>
 8007616:	4680      	mov	r8, r0
 8007618:	b928      	cbnz	r0, 8007626 <__multadd+0x5a>
 800761a:	4602      	mov	r2, r0
 800761c:	21ba      	movs	r1, #186	@ 0xba
 800761e:	4b0c      	ldr	r3, [pc, #48]	@ (8007650 <__multadd+0x84>)
 8007620:	480c      	ldr	r0, [pc, #48]	@ (8007654 <__multadd+0x88>)
 8007622:	f000 fd05 	bl	8008030 <__assert_func>
 8007626:	6922      	ldr	r2, [r4, #16]
 8007628:	f104 010c 	add.w	r1, r4, #12
 800762c:	3202      	adds	r2, #2
 800762e:	0092      	lsls	r2, r2, #2
 8007630:	300c      	adds	r0, #12
 8007632:	f7fe fafe 	bl	8005c32 <memcpy>
 8007636:	4621      	mov	r1, r4
 8007638:	4638      	mov	r0, r7
 800763a:	f7ff ffa5 	bl	8007588 <_Bfree>
 800763e:	4644      	mov	r4, r8
 8007640:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007644:	3501      	adds	r5, #1
 8007646:	615e      	str	r6, [r3, #20]
 8007648:	6125      	str	r5, [r4, #16]
 800764a:	4620      	mov	r0, r4
 800764c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007650:	08008935 	.word	0x08008935
 8007654:	080089b7 	.word	0x080089b7

08007658 <__s2b>:
 8007658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800765c:	4615      	mov	r5, r2
 800765e:	2209      	movs	r2, #9
 8007660:	461f      	mov	r7, r3
 8007662:	3308      	adds	r3, #8
 8007664:	460c      	mov	r4, r1
 8007666:	fb93 f3f2 	sdiv	r3, r3, r2
 800766a:	4606      	mov	r6, r0
 800766c:	2201      	movs	r2, #1
 800766e:	2100      	movs	r1, #0
 8007670:	429a      	cmp	r2, r3
 8007672:	db09      	blt.n	8007688 <__s2b+0x30>
 8007674:	4630      	mov	r0, r6
 8007676:	f7ff ff47 	bl	8007508 <_Balloc>
 800767a:	b940      	cbnz	r0, 800768e <__s2b+0x36>
 800767c:	4602      	mov	r2, r0
 800767e:	21d3      	movs	r1, #211	@ 0xd3
 8007680:	4b18      	ldr	r3, [pc, #96]	@ (80076e4 <__s2b+0x8c>)
 8007682:	4819      	ldr	r0, [pc, #100]	@ (80076e8 <__s2b+0x90>)
 8007684:	f000 fcd4 	bl	8008030 <__assert_func>
 8007688:	0052      	lsls	r2, r2, #1
 800768a:	3101      	adds	r1, #1
 800768c:	e7f0      	b.n	8007670 <__s2b+0x18>
 800768e:	9b08      	ldr	r3, [sp, #32]
 8007690:	2d09      	cmp	r5, #9
 8007692:	6143      	str	r3, [r0, #20]
 8007694:	f04f 0301 	mov.w	r3, #1
 8007698:	6103      	str	r3, [r0, #16]
 800769a:	dd16      	ble.n	80076ca <__s2b+0x72>
 800769c:	f104 0909 	add.w	r9, r4, #9
 80076a0:	46c8      	mov	r8, r9
 80076a2:	442c      	add	r4, r5
 80076a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80076a8:	4601      	mov	r1, r0
 80076aa:	220a      	movs	r2, #10
 80076ac:	4630      	mov	r0, r6
 80076ae:	3b30      	subs	r3, #48	@ 0x30
 80076b0:	f7ff ff8c 	bl	80075cc <__multadd>
 80076b4:	45a0      	cmp	r8, r4
 80076b6:	d1f5      	bne.n	80076a4 <__s2b+0x4c>
 80076b8:	f1a5 0408 	sub.w	r4, r5, #8
 80076bc:	444c      	add	r4, r9
 80076be:	1b2d      	subs	r5, r5, r4
 80076c0:	1963      	adds	r3, r4, r5
 80076c2:	42bb      	cmp	r3, r7
 80076c4:	db04      	blt.n	80076d0 <__s2b+0x78>
 80076c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ca:	2509      	movs	r5, #9
 80076cc:	340a      	adds	r4, #10
 80076ce:	e7f6      	b.n	80076be <__s2b+0x66>
 80076d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076d4:	4601      	mov	r1, r0
 80076d6:	220a      	movs	r2, #10
 80076d8:	4630      	mov	r0, r6
 80076da:	3b30      	subs	r3, #48	@ 0x30
 80076dc:	f7ff ff76 	bl	80075cc <__multadd>
 80076e0:	e7ee      	b.n	80076c0 <__s2b+0x68>
 80076e2:	bf00      	nop
 80076e4:	08008935 	.word	0x08008935
 80076e8:	080089b7 	.word	0x080089b7

080076ec <__hi0bits>:
 80076ec:	4603      	mov	r3, r0
 80076ee:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80076f2:	bf3a      	itte	cc
 80076f4:	0403      	lslcc	r3, r0, #16
 80076f6:	2010      	movcc	r0, #16
 80076f8:	2000      	movcs	r0, #0
 80076fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076fe:	bf3c      	itt	cc
 8007700:	021b      	lslcc	r3, r3, #8
 8007702:	3008      	addcc	r0, #8
 8007704:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007708:	bf3c      	itt	cc
 800770a:	011b      	lslcc	r3, r3, #4
 800770c:	3004      	addcc	r0, #4
 800770e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007712:	bf3c      	itt	cc
 8007714:	009b      	lslcc	r3, r3, #2
 8007716:	3002      	addcc	r0, #2
 8007718:	2b00      	cmp	r3, #0
 800771a:	db05      	blt.n	8007728 <__hi0bits+0x3c>
 800771c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007720:	f100 0001 	add.w	r0, r0, #1
 8007724:	bf08      	it	eq
 8007726:	2020      	moveq	r0, #32
 8007728:	4770      	bx	lr

0800772a <__lo0bits>:
 800772a:	6803      	ldr	r3, [r0, #0]
 800772c:	4602      	mov	r2, r0
 800772e:	f013 0007 	ands.w	r0, r3, #7
 8007732:	d00b      	beq.n	800774c <__lo0bits+0x22>
 8007734:	07d9      	lsls	r1, r3, #31
 8007736:	d421      	bmi.n	800777c <__lo0bits+0x52>
 8007738:	0798      	lsls	r0, r3, #30
 800773a:	bf49      	itett	mi
 800773c:	085b      	lsrmi	r3, r3, #1
 800773e:	089b      	lsrpl	r3, r3, #2
 8007740:	2001      	movmi	r0, #1
 8007742:	6013      	strmi	r3, [r2, #0]
 8007744:	bf5c      	itt	pl
 8007746:	2002      	movpl	r0, #2
 8007748:	6013      	strpl	r3, [r2, #0]
 800774a:	4770      	bx	lr
 800774c:	b299      	uxth	r1, r3
 800774e:	b909      	cbnz	r1, 8007754 <__lo0bits+0x2a>
 8007750:	2010      	movs	r0, #16
 8007752:	0c1b      	lsrs	r3, r3, #16
 8007754:	b2d9      	uxtb	r1, r3
 8007756:	b909      	cbnz	r1, 800775c <__lo0bits+0x32>
 8007758:	3008      	adds	r0, #8
 800775a:	0a1b      	lsrs	r3, r3, #8
 800775c:	0719      	lsls	r1, r3, #28
 800775e:	bf04      	itt	eq
 8007760:	091b      	lsreq	r3, r3, #4
 8007762:	3004      	addeq	r0, #4
 8007764:	0799      	lsls	r1, r3, #30
 8007766:	bf04      	itt	eq
 8007768:	089b      	lsreq	r3, r3, #2
 800776a:	3002      	addeq	r0, #2
 800776c:	07d9      	lsls	r1, r3, #31
 800776e:	d403      	bmi.n	8007778 <__lo0bits+0x4e>
 8007770:	085b      	lsrs	r3, r3, #1
 8007772:	f100 0001 	add.w	r0, r0, #1
 8007776:	d003      	beq.n	8007780 <__lo0bits+0x56>
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	4770      	bx	lr
 800777c:	2000      	movs	r0, #0
 800777e:	4770      	bx	lr
 8007780:	2020      	movs	r0, #32
 8007782:	4770      	bx	lr

08007784 <__i2b>:
 8007784:	b510      	push	{r4, lr}
 8007786:	460c      	mov	r4, r1
 8007788:	2101      	movs	r1, #1
 800778a:	f7ff febd 	bl	8007508 <_Balloc>
 800778e:	4602      	mov	r2, r0
 8007790:	b928      	cbnz	r0, 800779e <__i2b+0x1a>
 8007792:	f240 1145 	movw	r1, #325	@ 0x145
 8007796:	4b04      	ldr	r3, [pc, #16]	@ (80077a8 <__i2b+0x24>)
 8007798:	4804      	ldr	r0, [pc, #16]	@ (80077ac <__i2b+0x28>)
 800779a:	f000 fc49 	bl	8008030 <__assert_func>
 800779e:	2301      	movs	r3, #1
 80077a0:	6144      	str	r4, [r0, #20]
 80077a2:	6103      	str	r3, [r0, #16]
 80077a4:	bd10      	pop	{r4, pc}
 80077a6:	bf00      	nop
 80077a8:	08008935 	.word	0x08008935
 80077ac:	080089b7 	.word	0x080089b7

080077b0 <__multiply>:
 80077b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	4614      	mov	r4, r2
 80077b6:	690a      	ldr	r2, [r1, #16]
 80077b8:	6923      	ldr	r3, [r4, #16]
 80077ba:	460f      	mov	r7, r1
 80077bc:	429a      	cmp	r2, r3
 80077be:	bfa2      	ittt	ge
 80077c0:	4623      	movge	r3, r4
 80077c2:	460c      	movge	r4, r1
 80077c4:	461f      	movge	r7, r3
 80077c6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80077ca:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80077ce:	68a3      	ldr	r3, [r4, #8]
 80077d0:	6861      	ldr	r1, [r4, #4]
 80077d2:	eb0a 0609 	add.w	r6, sl, r9
 80077d6:	42b3      	cmp	r3, r6
 80077d8:	b085      	sub	sp, #20
 80077da:	bfb8      	it	lt
 80077dc:	3101      	addlt	r1, #1
 80077de:	f7ff fe93 	bl	8007508 <_Balloc>
 80077e2:	b930      	cbnz	r0, 80077f2 <__multiply+0x42>
 80077e4:	4602      	mov	r2, r0
 80077e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80077ea:	4b43      	ldr	r3, [pc, #268]	@ (80078f8 <__multiply+0x148>)
 80077ec:	4843      	ldr	r0, [pc, #268]	@ (80078fc <__multiply+0x14c>)
 80077ee:	f000 fc1f 	bl	8008030 <__assert_func>
 80077f2:	f100 0514 	add.w	r5, r0, #20
 80077f6:	462b      	mov	r3, r5
 80077f8:	2200      	movs	r2, #0
 80077fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077fe:	4543      	cmp	r3, r8
 8007800:	d321      	bcc.n	8007846 <__multiply+0x96>
 8007802:	f107 0114 	add.w	r1, r7, #20
 8007806:	f104 0214 	add.w	r2, r4, #20
 800780a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800780e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007812:	9302      	str	r3, [sp, #8]
 8007814:	1b13      	subs	r3, r2, r4
 8007816:	3b15      	subs	r3, #21
 8007818:	f023 0303 	bic.w	r3, r3, #3
 800781c:	3304      	adds	r3, #4
 800781e:	f104 0715 	add.w	r7, r4, #21
 8007822:	42ba      	cmp	r2, r7
 8007824:	bf38      	it	cc
 8007826:	2304      	movcc	r3, #4
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	9103      	str	r1, [sp, #12]
 800782e:	428b      	cmp	r3, r1
 8007830:	d80c      	bhi.n	800784c <__multiply+0x9c>
 8007832:	2e00      	cmp	r6, #0
 8007834:	dd03      	ble.n	800783e <__multiply+0x8e>
 8007836:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800783a:	2b00      	cmp	r3, #0
 800783c:	d05a      	beq.n	80078f4 <__multiply+0x144>
 800783e:	6106      	str	r6, [r0, #16]
 8007840:	b005      	add	sp, #20
 8007842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007846:	f843 2b04 	str.w	r2, [r3], #4
 800784a:	e7d8      	b.n	80077fe <__multiply+0x4e>
 800784c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007850:	f1ba 0f00 	cmp.w	sl, #0
 8007854:	d023      	beq.n	800789e <__multiply+0xee>
 8007856:	46a9      	mov	r9, r5
 8007858:	f04f 0c00 	mov.w	ip, #0
 800785c:	f104 0e14 	add.w	lr, r4, #20
 8007860:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007864:	f8d9 3000 	ldr.w	r3, [r9]
 8007868:	fa1f fb87 	uxth.w	fp, r7
 800786c:	b29b      	uxth	r3, r3
 800786e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007872:	4463      	add	r3, ip
 8007874:	f8d9 c000 	ldr.w	ip, [r9]
 8007878:	0c3f      	lsrs	r7, r7, #16
 800787a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800787e:	fb0a c707 	mla	r7, sl, r7, ip
 8007882:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007886:	b29b      	uxth	r3, r3
 8007888:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800788c:	4572      	cmp	r2, lr
 800788e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007892:	f849 3b04 	str.w	r3, [r9], #4
 8007896:	d8e3      	bhi.n	8007860 <__multiply+0xb0>
 8007898:	9b01      	ldr	r3, [sp, #4]
 800789a:	f845 c003 	str.w	ip, [r5, r3]
 800789e:	9b03      	ldr	r3, [sp, #12]
 80078a0:	3104      	adds	r1, #4
 80078a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80078a6:	f1b9 0f00 	cmp.w	r9, #0
 80078aa:	d021      	beq.n	80078f0 <__multiply+0x140>
 80078ac:	46ae      	mov	lr, r5
 80078ae:	f04f 0a00 	mov.w	sl, #0
 80078b2:	682b      	ldr	r3, [r5, #0]
 80078b4:	f104 0c14 	add.w	ip, r4, #20
 80078b8:	f8bc b000 	ldrh.w	fp, [ip]
 80078bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	fb09 770b 	mla	r7, r9, fp, r7
 80078c6:	4457      	add	r7, sl
 80078c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80078cc:	f84e 3b04 	str.w	r3, [lr], #4
 80078d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80078d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078d8:	f8be 3000 	ldrh.w	r3, [lr]
 80078dc:	4562      	cmp	r2, ip
 80078de:	fb09 330a 	mla	r3, r9, sl, r3
 80078e2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80078e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078ea:	d8e5      	bhi.n	80078b8 <__multiply+0x108>
 80078ec:	9f01      	ldr	r7, [sp, #4]
 80078ee:	51eb      	str	r3, [r5, r7]
 80078f0:	3504      	adds	r5, #4
 80078f2:	e79a      	b.n	800782a <__multiply+0x7a>
 80078f4:	3e01      	subs	r6, #1
 80078f6:	e79c      	b.n	8007832 <__multiply+0x82>
 80078f8:	08008935 	.word	0x08008935
 80078fc:	080089b7 	.word	0x080089b7

08007900 <__pow5mult>:
 8007900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007904:	4615      	mov	r5, r2
 8007906:	f012 0203 	ands.w	r2, r2, #3
 800790a:	4607      	mov	r7, r0
 800790c:	460e      	mov	r6, r1
 800790e:	d007      	beq.n	8007920 <__pow5mult+0x20>
 8007910:	4c25      	ldr	r4, [pc, #148]	@ (80079a8 <__pow5mult+0xa8>)
 8007912:	3a01      	subs	r2, #1
 8007914:	2300      	movs	r3, #0
 8007916:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800791a:	f7ff fe57 	bl	80075cc <__multadd>
 800791e:	4606      	mov	r6, r0
 8007920:	10ad      	asrs	r5, r5, #2
 8007922:	d03d      	beq.n	80079a0 <__pow5mult+0xa0>
 8007924:	69fc      	ldr	r4, [r7, #28]
 8007926:	b97c      	cbnz	r4, 8007948 <__pow5mult+0x48>
 8007928:	2010      	movs	r0, #16
 800792a:	f7ff fc7d 	bl	8007228 <malloc>
 800792e:	4602      	mov	r2, r0
 8007930:	61f8      	str	r0, [r7, #28]
 8007932:	b928      	cbnz	r0, 8007940 <__pow5mult+0x40>
 8007934:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007938:	4b1c      	ldr	r3, [pc, #112]	@ (80079ac <__pow5mult+0xac>)
 800793a:	481d      	ldr	r0, [pc, #116]	@ (80079b0 <__pow5mult+0xb0>)
 800793c:	f000 fb78 	bl	8008030 <__assert_func>
 8007940:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007944:	6004      	str	r4, [r0, #0]
 8007946:	60c4      	str	r4, [r0, #12]
 8007948:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800794c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007950:	b94c      	cbnz	r4, 8007966 <__pow5mult+0x66>
 8007952:	f240 2171 	movw	r1, #625	@ 0x271
 8007956:	4638      	mov	r0, r7
 8007958:	f7ff ff14 	bl	8007784 <__i2b>
 800795c:	2300      	movs	r3, #0
 800795e:	4604      	mov	r4, r0
 8007960:	f8c8 0008 	str.w	r0, [r8, #8]
 8007964:	6003      	str	r3, [r0, #0]
 8007966:	f04f 0900 	mov.w	r9, #0
 800796a:	07eb      	lsls	r3, r5, #31
 800796c:	d50a      	bpl.n	8007984 <__pow5mult+0x84>
 800796e:	4631      	mov	r1, r6
 8007970:	4622      	mov	r2, r4
 8007972:	4638      	mov	r0, r7
 8007974:	f7ff ff1c 	bl	80077b0 <__multiply>
 8007978:	4680      	mov	r8, r0
 800797a:	4631      	mov	r1, r6
 800797c:	4638      	mov	r0, r7
 800797e:	f7ff fe03 	bl	8007588 <_Bfree>
 8007982:	4646      	mov	r6, r8
 8007984:	106d      	asrs	r5, r5, #1
 8007986:	d00b      	beq.n	80079a0 <__pow5mult+0xa0>
 8007988:	6820      	ldr	r0, [r4, #0]
 800798a:	b938      	cbnz	r0, 800799c <__pow5mult+0x9c>
 800798c:	4622      	mov	r2, r4
 800798e:	4621      	mov	r1, r4
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff ff0d 	bl	80077b0 <__multiply>
 8007996:	6020      	str	r0, [r4, #0]
 8007998:	f8c0 9000 	str.w	r9, [r0]
 800799c:	4604      	mov	r4, r0
 800799e:	e7e4      	b.n	800796a <__pow5mult+0x6a>
 80079a0:	4630      	mov	r0, r6
 80079a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079a6:	bf00      	nop
 80079a8:	08008a10 	.word	0x08008a10
 80079ac:	080088c6 	.word	0x080088c6
 80079b0:	080089b7 	.word	0x080089b7

080079b4 <__lshift>:
 80079b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b8:	460c      	mov	r4, r1
 80079ba:	4607      	mov	r7, r0
 80079bc:	4691      	mov	r9, r2
 80079be:	6923      	ldr	r3, [r4, #16]
 80079c0:	6849      	ldr	r1, [r1, #4]
 80079c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079c6:	68a3      	ldr	r3, [r4, #8]
 80079c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079cc:	f108 0601 	add.w	r6, r8, #1
 80079d0:	42b3      	cmp	r3, r6
 80079d2:	db0b      	blt.n	80079ec <__lshift+0x38>
 80079d4:	4638      	mov	r0, r7
 80079d6:	f7ff fd97 	bl	8007508 <_Balloc>
 80079da:	4605      	mov	r5, r0
 80079dc:	b948      	cbnz	r0, 80079f2 <__lshift+0x3e>
 80079de:	4602      	mov	r2, r0
 80079e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80079e4:	4b27      	ldr	r3, [pc, #156]	@ (8007a84 <__lshift+0xd0>)
 80079e6:	4828      	ldr	r0, [pc, #160]	@ (8007a88 <__lshift+0xd4>)
 80079e8:	f000 fb22 	bl	8008030 <__assert_func>
 80079ec:	3101      	adds	r1, #1
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	e7ee      	b.n	80079d0 <__lshift+0x1c>
 80079f2:	2300      	movs	r3, #0
 80079f4:	f100 0114 	add.w	r1, r0, #20
 80079f8:	f100 0210 	add.w	r2, r0, #16
 80079fc:	4618      	mov	r0, r3
 80079fe:	4553      	cmp	r3, sl
 8007a00:	db33      	blt.n	8007a6a <__lshift+0xb6>
 8007a02:	6920      	ldr	r0, [r4, #16]
 8007a04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a08:	f104 0314 	add.w	r3, r4, #20
 8007a0c:	f019 091f 	ands.w	r9, r9, #31
 8007a10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a18:	d02b      	beq.n	8007a72 <__lshift+0xbe>
 8007a1a:	468a      	mov	sl, r1
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f1c9 0e20 	rsb	lr, r9, #32
 8007a22:	6818      	ldr	r0, [r3, #0]
 8007a24:	fa00 f009 	lsl.w	r0, r0, r9
 8007a28:	4310      	orrs	r0, r2
 8007a2a:	f84a 0b04 	str.w	r0, [sl], #4
 8007a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a32:	459c      	cmp	ip, r3
 8007a34:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a38:	d8f3      	bhi.n	8007a22 <__lshift+0x6e>
 8007a3a:	ebac 0304 	sub.w	r3, ip, r4
 8007a3e:	3b15      	subs	r3, #21
 8007a40:	f023 0303 	bic.w	r3, r3, #3
 8007a44:	3304      	adds	r3, #4
 8007a46:	f104 0015 	add.w	r0, r4, #21
 8007a4a:	4584      	cmp	ip, r0
 8007a4c:	bf38      	it	cc
 8007a4e:	2304      	movcc	r3, #4
 8007a50:	50ca      	str	r2, [r1, r3]
 8007a52:	b10a      	cbz	r2, 8007a58 <__lshift+0xa4>
 8007a54:	f108 0602 	add.w	r6, r8, #2
 8007a58:	3e01      	subs	r6, #1
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	612e      	str	r6, [r5, #16]
 8007a60:	f7ff fd92 	bl	8007588 <_Bfree>
 8007a64:	4628      	mov	r0, r5
 8007a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a6e:	3301      	adds	r3, #1
 8007a70:	e7c5      	b.n	80079fe <__lshift+0x4a>
 8007a72:	3904      	subs	r1, #4
 8007a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a78:	459c      	cmp	ip, r3
 8007a7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a7e:	d8f9      	bhi.n	8007a74 <__lshift+0xc0>
 8007a80:	e7ea      	b.n	8007a58 <__lshift+0xa4>
 8007a82:	bf00      	nop
 8007a84:	08008935 	.word	0x08008935
 8007a88:	080089b7 	.word	0x080089b7

08007a8c <__mcmp>:
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	690a      	ldr	r2, [r1, #16]
 8007a90:	6900      	ldr	r0, [r0, #16]
 8007a92:	b530      	push	{r4, r5, lr}
 8007a94:	1a80      	subs	r0, r0, r2
 8007a96:	d10e      	bne.n	8007ab6 <__mcmp+0x2a>
 8007a98:	3314      	adds	r3, #20
 8007a9a:	3114      	adds	r1, #20
 8007a9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007aa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007aa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007aa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007aac:	4295      	cmp	r5, r2
 8007aae:	d003      	beq.n	8007ab8 <__mcmp+0x2c>
 8007ab0:	d205      	bcs.n	8007abe <__mcmp+0x32>
 8007ab2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ab6:	bd30      	pop	{r4, r5, pc}
 8007ab8:	42a3      	cmp	r3, r4
 8007aba:	d3f3      	bcc.n	8007aa4 <__mcmp+0x18>
 8007abc:	e7fb      	b.n	8007ab6 <__mcmp+0x2a>
 8007abe:	2001      	movs	r0, #1
 8007ac0:	e7f9      	b.n	8007ab6 <__mcmp+0x2a>
	...

08007ac4 <__mdiff>:
 8007ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac8:	4689      	mov	r9, r1
 8007aca:	4606      	mov	r6, r0
 8007acc:	4611      	mov	r1, r2
 8007ace:	4648      	mov	r0, r9
 8007ad0:	4614      	mov	r4, r2
 8007ad2:	f7ff ffdb 	bl	8007a8c <__mcmp>
 8007ad6:	1e05      	subs	r5, r0, #0
 8007ad8:	d112      	bne.n	8007b00 <__mdiff+0x3c>
 8007ada:	4629      	mov	r1, r5
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7ff fd13 	bl	8007508 <_Balloc>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	b928      	cbnz	r0, 8007af2 <__mdiff+0x2e>
 8007ae6:	f240 2137 	movw	r1, #567	@ 0x237
 8007aea:	4b3e      	ldr	r3, [pc, #248]	@ (8007be4 <__mdiff+0x120>)
 8007aec:	483e      	ldr	r0, [pc, #248]	@ (8007be8 <__mdiff+0x124>)
 8007aee:	f000 fa9f 	bl	8008030 <__assert_func>
 8007af2:	2301      	movs	r3, #1
 8007af4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007af8:	4610      	mov	r0, r2
 8007afa:	b003      	add	sp, #12
 8007afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b00:	bfbc      	itt	lt
 8007b02:	464b      	movlt	r3, r9
 8007b04:	46a1      	movlt	r9, r4
 8007b06:	4630      	mov	r0, r6
 8007b08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b0c:	bfba      	itte	lt
 8007b0e:	461c      	movlt	r4, r3
 8007b10:	2501      	movlt	r5, #1
 8007b12:	2500      	movge	r5, #0
 8007b14:	f7ff fcf8 	bl	8007508 <_Balloc>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	b918      	cbnz	r0, 8007b24 <__mdiff+0x60>
 8007b1c:	f240 2145 	movw	r1, #581	@ 0x245
 8007b20:	4b30      	ldr	r3, [pc, #192]	@ (8007be4 <__mdiff+0x120>)
 8007b22:	e7e3      	b.n	8007aec <__mdiff+0x28>
 8007b24:	f100 0b14 	add.w	fp, r0, #20
 8007b28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007b2c:	f109 0310 	add.w	r3, r9, #16
 8007b30:	60c5      	str	r5, [r0, #12]
 8007b32:	f04f 0c00 	mov.w	ip, #0
 8007b36:	f109 0514 	add.w	r5, r9, #20
 8007b3a:	46d9      	mov	r9, fp
 8007b3c:	6926      	ldr	r6, [r4, #16]
 8007b3e:	f104 0e14 	add.w	lr, r4, #20
 8007b42:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b46:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	9b01      	ldr	r3, [sp, #4]
 8007b4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b52:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b56:	b281      	uxth	r1, r0
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	fa1f f38a 	uxth.w	r3, sl
 8007b5e:	1a5b      	subs	r3, r3, r1
 8007b60:	0c00      	lsrs	r0, r0, #16
 8007b62:	4463      	add	r3, ip
 8007b64:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b68:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b72:	4576      	cmp	r6, lr
 8007b74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b78:	f849 3b04 	str.w	r3, [r9], #4
 8007b7c:	d8e6      	bhi.n	8007b4c <__mdiff+0x88>
 8007b7e:	1b33      	subs	r3, r6, r4
 8007b80:	3b15      	subs	r3, #21
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	3415      	adds	r4, #21
 8007b88:	3304      	adds	r3, #4
 8007b8a:	42a6      	cmp	r6, r4
 8007b8c:	bf38      	it	cc
 8007b8e:	2304      	movcc	r3, #4
 8007b90:	441d      	add	r5, r3
 8007b92:	445b      	add	r3, fp
 8007b94:	461e      	mov	r6, r3
 8007b96:	462c      	mov	r4, r5
 8007b98:	4544      	cmp	r4, r8
 8007b9a:	d30e      	bcc.n	8007bba <__mdiff+0xf6>
 8007b9c:	f108 0103 	add.w	r1, r8, #3
 8007ba0:	1b49      	subs	r1, r1, r5
 8007ba2:	f021 0103 	bic.w	r1, r1, #3
 8007ba6:	3d03      	subs	r5, #3
 8007ba8:	45a8      	cmp	r8, r5
 8007baa:	bf38      	it	cc
 8007bac:	2100      	movcc	r1, #0
 8007bae:	440b      	add	r3, r1
 8007bb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007bb4:	b199      	cbz	r1, 8007bde <__mdiff+0x11a>
 8007bb6:	6117      	str	r7, [r2, #16]
 8007bb8:	e79e      	b.n	8007af8 <__mdiff+0x34>
 8007bba:	46e6      	mov	lr, ip
 8007bbc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007bc0:	fa1f fc81 	uxth.w	ip, r1
 8007bc4:	44f4      	add	ip, lr
 8007bc6:	0c08      	lsrs	r0, r1, #16
 8007bc8:	4471      	add	r1, lr
 8007bca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007bce:	b289      	uxth	r1, r1
 8007bd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007bd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bd8:	f846 1b04 	str.w	r1, [r6], #4
 8007bdc:	e7dc      	b.n	8007b98 <__mdiff+0xd4>
 8007bde:	3f01      	subs	r7, #1
 8007be0:	e7e6      	b.n	8007bb0 <__mdiff+0xec>
 8007be2:	bf00      	nop
 8007be4:	08008935 	.word	0x08008935
 8007be8:	080089b7 	.word	0x080089b7

08007bec <__ulp>:
 8007bec:	4b0e      	ldr	r3, [pc, #56]	@ (8007c28 <__ulp+0x3c>)
 8007bee:	400b      	ands	r3, r1
 8007bf0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dc08      	bgt.n	8007c0a <__ulp+0x1e>
 8007bf8:	425b      	negs	r3, r3
 8007bfa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007bfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007c02:	da04      	bge.n	8007c0e <__ulp+0x22>
 8007c04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007c08:	4113      	asrs	r3, r2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	e008      	b.n	8007c20 <__ulp+0x34>
 8007c0e:	f1a2 0314 	sub.w	r3, r2, #20
 8007c12:	2b1e      	cmp	r3, #30
 8007c14:	bfd6      	itet	le
 8007c16:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007c1a:	2201      	movgt	r2, #1
 8007c1c:	40da      	lsrle	r2, r3
 8007c1e:	2300      	movs	r3, #0
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	7ff00000 	.word	0x7ff00000

08007c2c <__b2d>:
 8007c2c:	6902      	ldr	r2, [r0, #16]
 8007c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c30:	f100 0614 	add.w	r6, r0, #20
 8007c34:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007c38:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007c3c:	4f1e      	ldr	r7, [pc, #120]	@ (8007cb8 <__b2d+0x8c>)
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f7ff fd54 	bl	80076ec <__hi0bits>
 8007c44:	4603      	mov	r3, r0
 8007c46:	f1c0 0020 	rsb	r0, r0, #32
 8007c4a:	2b0a      	cmp	r3, #10
 8007c4c:	f1a2 0504 	sub.w	r5, r2, #4
 8007c50:	6008      	str	r0, [r1, #0]
 8007c52:	dc12      	bgt.n	8007c7a <__b2d+0x4e>
 8007c54:	42ae      	cmp	r6, r5
 8007c56:	bf2c      	ite	cs
 8007c58:	2200      	movcs	r2, #0
 8007c5a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007c5e:	f1c3 0c0b 	rsb	ip, r3, #11
 8007c62:	3315      	adds	r3, #21
 8007c64:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007c68:	fa04 f303 	lsl.w	r3, r4, r3
 8007c6c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007c70:	ea4e 0107 	orr.w	r1, lr, r7
 8007c74:	431a      	orrs	r2, r3
 8007c76:	4610      	mov	r0, r2
 8007c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c7a:	42ae      	cmp	r6, r5
 8007c7c:	bf36      	itet	cc
 8007c7e:	f1a2 0508 	subcc.w	r5, r2, #8
 8007c82:	2200      	movcs	r2, #0
 8007c84:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007c88:	3b0b      	subs	r3, #11
 8007c8a:	d012      	beq.n	8007cb2 <__b2d+0x86>
 8007c8c:	f1c3 0720 	rsb	r7, r3, #32
 8007c90:	fa22 f107 	lsr.w	r1, r2, r7
 8007c94:	409c      	lsls	r4, r3
 8007c96:	430c      	orrs	r4, r1
 8007c98:	42b5      	cmp	r5, r6
 8007c9a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007c9e:	bf94      	ite	ls
 8007ca0:	2400      	movls	r4, #0
 8007ca2:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8007ca6:	409a      	lsls	r2, r3
 8007ca8:	40fc      	lsrs	r4, r7
 8007caa:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007cae:	4322      	orrs	r2, r4
 8007cb0:	e7e1      	b.n	8007c76 <__b2d+0x4a>
 8007cb2:	ea44 0107 	orr.w	r1, r4, r7
 8007cb6:	e7de      	b.n	8007c76 <__b2d+0x4a>
 8007cb8:	3ff00000 	.word	0x3ff00000

08007cbc <__d2b>:
 8007cbc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	4690      	mov	r8, r2
 8007cc4:	4699      	mov	r9, r3
 8007cc6:	9e08      	ldr	r6, [sp, #32]
 8007cc8:	f7ff fc1e 	bl	8007508 <_Balloc>
 8007ccc:	4604      	mov	r4, r0
 8007cce:	b930      	cbnz	r0, 8007cde <__d2b+0x22>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	f240 310f 	movw	r1, #783	@ 0x30f
 8007cd6:	4b23      	ldr	r3, [pc, #140]	@ (8007d64 <__d2b+0xa8>)
 8007cd8:	4823      	ldr	r0, [pc, #140]	@ (8007d68 <__d2b+0xac>)
 8007cda:	f000 f9a9 	bl	8008030 <__assert_func>
 8007cde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007ce2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ce6:	b10d      	cbz	r5, 8007cec <__d2b+0x30>
 8007ce8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	f1b8 0300 	subs.w	r3, r8, #0
 8007cf2:	d024      	beq.n	8007d3e <__d2b+0x82>
 8007cf4:	4668      	mov	r0, sp
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	f7ff fd17 	bl	800772a <__lo0bits>
 8007cfc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d00:	b1d8      	cbz	r0, 8007d3a <__d2b+0x7e>
 8007d02:	f1c0 0320 	rsb	r3, r0, #32
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	430b      	orrs	r3, r1
 8007d0c:	40c2      	lsrs	r2, r0
 8007d0e:	6163      	str	r3, [r4, #20]
 8007d10:	9201      	str	r2, [sp, #4]
 8007d12:	9b01      	ldr	r3, [sp, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bf0c      	ite	eq
 8007d18:	2201      	moveq	r2, #1
 8007d1a:	2202      	movne	r2, #2
 8007d1c:	61a3      	str	r3, [r4, #24]
 8007d1e:	6122      	str	r2, [r4, #16]
 8007d20:	b1ad      	cbz	r5, 8007d4e <__d2b+0x92>
 8007d22:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d26:	4405      	add	r5, r0
 8007d28:	6035      	str	r5, [r6, #0]
 8007d2a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d30:	6018      	str	r0, [r3, #0]
 8007d32:	4620      	mov	r0, r4
 8007d34:	b002      	add	sp, #8
 8007d36:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007d3a:	6161      	str	r1, [r4, #20]
 8007d3c:	e7e9      	b.n	8007d12 <__d2b+0x56>
 8007d3e:	a801      	add	r0, sp, #4
 8007d40:	f7ff fcf3 	bl	800772a <__lo0bits>
 8007d44:	9b01      	ldr	r3, [sp, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	6163      	str	r3, [r4, #20]
 8007d4a:	3020      	adds	r0, #32
 8007d4c:	e7e7      	b.n	8007d1e <__d2b+0x62>
 8007d4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d56:	6030      	str	r0, [r6, #0]
 8007d58:	6918      	ldr	r0, [r3, #16]
 8007d5a:	f7ff fcc7 	bl	80076ec <__hi0bits>
 8007d5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d62:	e7e4      	b.n	8007d2e <__d2b+0x72>
 8007d64:	08008935 	.word	0x08008935
 8007d68:	080089b7 	.word	0x080089b7

08007d6c <__ratio>:
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	b085      	sub	sp, #20
 8007d72:	e9cd 1000 	strd	r1, r0, [sp]
 8007d76:	a902      	add	r1, sp, #8
 8007d78:	f7ff ff58 	bl	8007c2c <__b2d>
 8007d7c:	468b      	mov	fp, r1
 8007d7e:	4606      	mov	r6, r0
 8007d80:	460f      	mov	r7, r1
 8007d82:	9800      	ldr	r0, [sp, #0]
 8007d84:	a903      	add	r1, sp, #12
 8007d86:	f7ff ff51 	bl	8007c2c <__b2d>
 8007d8a:	460d      	mov	r5, r1
 8007d8c:	9b01      	ldr	r3, [sp, #4]
 8007d8e:	4689      	mov	r9, r1
 8007d90:	6919      	ldr	r1, [r3, #16]
 8007d92:	9b00      	ldr	r3, [sp, #0]
 8007d94:	4604      	mov	r4, r0
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	4630      	mov	r0, r6
 8007d9a:	1ac9      	subs	r1, r1, r3
 8007d9c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007da0:	1a9b      	subs	r3, r3, r2
 8007da2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	bfcd      	iteet	gt
 8007daa:	463a      	movgt	r2, r7
 8007dac:	462a      	movle	r2, r5
 8007dae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007db2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007db6:	bfd8      	it	le
 8007db8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007dbc:	464b      	mov	r3, r9
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	4659      	mov	r1, fp
 8007dc2:	f7f8 fd67 	bl	8000894 <__aeabi_ddiv>
 8007dc6:	b005      	add	sp, #20
 8007dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dcc <__copybits>:
 8007dcc:	3901      	subs	r1, #1
 8007dce:	b570      	push	{r4, r5, r6, lr}
 8007dd0:	1149      	asrs	r1, r1, #5
 8007dd2:	6914      	ldr	r4, [r2, #16]
 8007dd4:	3101      	adds	r1, #1
 8007dd6:	f102 0314 	add.w	r3, r2, #20
 8007dda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007dde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007de2:	1f05      	subs	r5, r0, #4
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	d30c      	bcc.n	8007e02 <__copybits+0x36>
 8007de8:	1aa3      	subs	r3, r4, r2
 8007dea:	3b11      	subs	r3, #17
 8007dec:	f023 0303 	bic.w	r3, r3, #3
 8007df0:	3211      	adds	r2, #17
 8007df2:	42a2      	cmp	r2, r4
 8007df4:	bf88      	it	hi
 8007df6:	2300      	movhi	r3, #0
 8007df8:	4418      	add	r0, r3
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	4288      	cmp	r0, r1
 8007dfe:	d305      	bcc.n	8007e0c <__copybits+0x40>
 8007e00:	bd70      	pop	{r4, r5, r6, pc}
 8007e02:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e06:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e0a:	e7eb      	b.n	8007de4 <__copybits+0x18>
 8007e0c:	f840 3b04 	str.w	r3, [r0], #4
 8007e10:	e7f4      	b.n	8007dfc <__copybits+0x30>

08007e12 <__any_on>:
 8007e12:	f100 0214 	add.w	r2, r0, #20
 8007e16:	6900      	ldr	r0, [r0, #16]
 8007e18:	114b      	asrs	r3, r1, #5
 8007e1a:	4298      	cmp	r0, r3
 8007e1c:	b510      	push	{r4, lr}
 8007e1e:	db11      	blt.n	8007e44 <__any_on+0x32>
 8007e20:	dd0a      	ble.n	8007e38 <__any_on+0x26>
 8007e22:	f011 011f 	ands.w	r1, r1, #31
 8007e26:	d007      	beq.n	8007e38 <__any_on+0x26>
 8007e28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e2c:	fa24 f001 	lsr.w	r0, r4, r1
 8007e30:	fa00 f101 	lsl.w	r1, r0, r1
 8007e34:	428c      	cmp	r4, r1
 8007e36:	d10b      	bne.n	8007e50 <__any_on+0x3e>
 8007e38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d803      	bhi.n	8007e48 <__any_on+0x36>
 8007e40:	2000      	movs	r0, #0
 8007e42:	bd10      	pop	{r4, pc}
 8007e44:	4603      	mov	r3, r0
 8007e46:	e7f7      	b.n	8007e38 <__any_on+0x26>
 8007e48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	d0f5      	beq.n	8007e3c <__any_on+0x2a>
 8007e50:	2001      	movs	r0, #1
 8007e52:	e7f6      	b.n	8007e42 <__any_on+0x30>

08007e54 <__sread>:
 8007e54:	b510      	push	{r4, lr}
 8007e56:	460c      	mov	r4, r1
 8007e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e5c:	f000 f8b4 	bl	8007fc8 <_read_r>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	bfab      	itete	ge
 8007e64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e66:	89a3      	ldrhlt	r3, [r4, #12]
 8007e68:	181b      	addge	r3, r3, r0
 8007e6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e6e:	bfac      	ite	ge
 8007e70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e72:	81a3      	strhlt	r3, [r4, #12]
 8007e74:	bd10      	pop	{r4, pc}

08007e76 <__swrite>:
 8007e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e7a:	461f      	mov	r7, r3
 8007e7c:	898b      	ldrh	r3, [r1, #12]
 8007e7e:	4605      	mov	r5, r0
 8007e80:	05db      	lsls	r3, r3, #23
 8007e82:	460c      	mov	r4, r1
 8007e84:	4616      	mov	r6, r2
 8007e86:	d505      	bpl.n	8007e94 <__swrite+0x1e>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e90:	f000 f888 	bl	8007fa4 <_lseek_r>
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	4632      	mov	r2, r6
 8007e98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e9c:	81a3      	strh	r3, [r4, #12]
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eaa:	f000 b8af 	b.w	800800c <_write_r>

08007eae <__sseek>:
 8007eae:	b510      	push	{r4, lr}
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb6:	f000 f875 	bl	8007fa4 <_lseek_r>
 8007eba:	1c43      	adds	r3, r0, #1
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	bf15      	itete	ne
 8007ec0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ec2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ec6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007eca:	81a3      	strheq	r3, [r4, #12]
 8007ecc:	bf18      	it	ne
 8007ece:	81a3      	strhne	r3, [r4, #12]
 8007ed0:	bd10      	pop	{r4, pc}

08007ed2 <__sclose>:
 8007ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed6:	f000 b855 	b.w	8007f84 <_close_r>

08007eda <_realloc_r>:
 8007eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ede:	4680      	mov	r8, r0
 8007ee0:	4615      	mov	r5, r2
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	b921      	cbnz	r1, 8007ef0 <_realloc_r+0x16>
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eec:	f7ff b9c6 	b.w	800727c <_malloc_r>
 8007ef0:	b92a      	cbnz	r2, 8007efe <_realloc_r+0x24>
 8007ef2:	f000 f8cf 	bl	8008094 <_free_r>
 8007ef6:	2400      	movs	r4, #0
 8007ef8:	4620      	mov	r0, r4
 8007efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007efe:	f000 f911 	bl	8008124 <_malloc_usable_size_r>
 8007f02:	4285      	cmp	r5, r0
 8007f04:	4606      	mov	r6, r0
 8007f06:	d802      	bhi.n	8007f0e <_realloc_r+0x34>
 8007f08:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f0c:	d8f4      	bhi.n	8007ef8 <_realloc_r+0x1e>
 8007f0e:	4629      	mov	r1, r5
 8007f10:	4640      	mov	r0, r8
 8007f12:	f7ff f9b3 	bl	800727c <_malloc_r>
 8007f16:	4607      	mov	r7, r0
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d0ec      	beq.n	8007ef6 <_realloc_r+0x1c>
 8007f1c:	42b5      	cmp	r5, r6
 8007f1e:	462a      	mov	r2, r5
 8007f20:	4621      	mov	r1, r4
 8007f22:	bf28      	it	cs
 8007f24:	4632      	movcs	r2, r6
 8007f26:	f7fd fe84 	bl	8005c32 <memcpy>
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	f000 f8b1 	bl	8008094 <_free_r>
 8007f32:	463c      	mov	r4, r7
 8007f34:	e7e0      	b.n	8007ef8 <_realloc_r+0x1e>

08007f36 <__ascii_wctomb>:
 8007f36:	4603      	mov	r3, r0
 8007f38:	4608      	mov	r0, r1
 8007f3a:	b141      	cbz	r1, 8007f4e <__ascii_wctomb+0x18>
 8007f3c:	2aff      	cmp	r2, #255	@ 0xff
 8007f3e:	d904      	bls.n	8007f4a <__ascii_wctomb+0x14>
 8007f40:	228a      	movs	r2, #138	@ 0x8a
 8007f42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	4770      	bx	lr
 8007f4a:	2001      	movs	r0, #1
 8007f4c:	700a      	strb	r2, [r1, #0]
 8007f4e:	4770      	bx	lr

08007f50 <memmove>:
 8007f50:	4288      	cmp	r0, r1
 8007f52:	b510      	push	{r4, lr}
 8007f54:	eb01 0402 	add.w	r4, r1, r2
 8007f58:	d902      	bls.n	8007f60 <memmove+0x10>
 8007f5a:	4284      	cmp	r4, r0
 8007f5c:	4623      	mov	r3, r4
 8007f5e:	d807      	bhi.n	8007f70 <memmove+0x20>
 8007f60:	1e43      	subs	r3, r0, #1
 8007f62:	42a1      	cmp	r1, r4
 8007f64:	d008      	beq.n	8007f78 <memmove+0x28>
 8007f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f6e:	e7f8      	b.n	8007f62 <memmove+0x12>
 8007f70:	4601      	mov	r1, r0
 8007f72:	4402      	add	r2, r0
 8007f74:	428a      	cmp	r2, r1
 8007f76:	d100      	bne.n	8007f7a <memmove+0x2a>
 8007f78:	bd10      	pop	{r4, pc}
 8007f7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f82:	e7f7      	b.n	8007f74 <memmove+0x24>

08007f84 <_close_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	2300      	movs	r3, #0
 8007f88:	4d05      	ldr	r5, [pc, #20]	@ (8007fa0 <_close_r+0x1c>)
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	602b      	str	r3, [r5, #0]
 8007f90:	f7f9 fa71 	bl	8001476 <_close>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_close_r+0x1a>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_close_r+0x1a>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	2000045c 	.word	0x2000045c

08007fa4 <_lseek_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	4611      	mov	r1, r2
 8007fac:	2200      	movs	r2, #0
 8007fae:	4d05      	ldr	r5, [pc, #20]	@ (8007fc4 <_lseek_r+0x20>)
 8007fb0:	602a      	str	r2, [r5, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f7f9 fa83 	bl	80014be <_lseek>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	d102      	bne.n	8007fc2 <_lseek_r+0x1e>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	b103      	cbz	r3, 8007fc2 <_lseek_r+0x1e>
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	bd38      	pop	{r3, r4, r5, pc}
 8007fc4:	2000045c 	.word	0x2000045c

08007fc8 <_read_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4604      	mov	r4, r0
 8007fcc:	4608      	mov	r0, r1
 8007fce:	4611      	mov	r1, r2
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4d05      	ldr	r5, [pc, #20]	@ (8007fe8 <_read_r+0x20>)
 8007fd4:	602a      	str	r2, [r5, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f7f9 fa14 	bl	8001404 <_read>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d102      	bne.n	8007fe6 <_read_r+0x1e>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	b103      	cbz	r3, 8007fe6 <_read_r+0x1e>
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	bd38      	pop	{r3, r4, r5, pc}
 8007fe8:	2000045c 	.word	0x2000045c

08007fec <_sbrk_r>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	2300      	movs	r3, #0
 8007ff0:	4d05      	ldr	r5, [pc, #20]	@ (8008008 <_sbrk_r+0x1c>)
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	4608      	mov	r0, r1
 8007ff6:	602b      	str	r3, [r5, #0]
 8007ff8:	f7f9 fa6e 	bl	80014d8 <_sbrk>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_sbrk_r+0x1a>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_sbrk_r+0x1a>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	2000045c 	.word	0x2000045c

0800800c <_write_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4604      	mov	r4, r0
 8008010:	4608      	mov	r0, r1
 8008012:	4611      	mov	r1, r2
 8008014:	2200      	movs	r2, #0
 8008016:	4d05      	ldr	r5, [pc, #20]	@ (800802c <_write_r+0x20>)
 8008018:	602a      	str	r2, [r5, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	f7f9 fa0f 	bl	800143e <_write>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d102      	bne.n	800802a <_write_r+0x1e>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b103      	cbz	r3, 800802a <_write_r+0x1e>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	2000045c 	.word	0x2000045c

08008030 <__assert_func>:
 8008030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008032:	4614      	mov	r4, r2
 8008034:	461a      	mov	r2, r3
 8008036:	4b09      	ldr	r3, [pc, #36]	@ (800805c <__assert_func+0x2c>)
 8008038:	4605      	mov	r5, r0
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68d8      	ldr	r0, [r3, #12]
 800803e:	b954      	cbnz	r4, 8008056 <__assert_func+0x26>
 8008040:	4b07      	ldr	r3, [pc, #28]	@ (8008060 <__assert_func+0x30>)
 8008042:	461c      	mov	r4, r3
 8008044:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008048:	9100      	str	r1, [sp, #0]
 800804a:	462b      	mov	r3, r5
 800804c:	4905      	ldr	r1, [pc, #20]	@ (8008064 <__assert_func+0x34>)
 800804e:	f000 f871 	bl	8008134 <fiprintf>
 8008052:	f000 f881 	bl	8008158 <abort>
 8008056:	4b04      	ldr	r3, [pc, #16]	@ (8008068 <__assert_func+0x38>)
 8008058:	e7f4      	b.n	8008044 <__assert_func+0x14>
 800805a:	bf00      	nop
 800805c:	20000188 	.word	0x20000188
 8008060:	08008b4b 	.word	0x08008b4b
 8008064:	08008b1d 	.word	0x08008b1d
 8008068:	08008b10 	.word	0x08008b10

0800806c <_calloc_r>:
 800806c:	b570      	push	{r4, r5, r6, lr}
 800806e:	fba1 5402 	umull	r5, r4, r1, r2
 8008072:	b93c      	cbnz	r4, 8008084 <_calloc_r+0x18>
 8008074:	4629      	mov	r1, r5
 8008076:	f7ff f901 	bl	800727c <_malloc_r>
 800807a:	4606      	mov	r6, r0
 800807c:	b928      	cbnz	r0, 800808a <_calloc_r+0x1e>
 800807e:	2600      	movs	r6, #0
 8008080:	4630      	mov	r0, r6
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	220c      	movs	r2, #12
 8008086:	6002      	str	r2, [r0, #0]
 8008088:	e7f9      	b.n	800807e <_calloc_r+0x12>
 800808a:	462a      	mov	r2, r5
 800808c:	4621      	mov	r1, r4
 800808e:	f7fd fd89 	bl	8005ba4 <memset>
 8008092:	e7f5      	b.n	8008080 <_calloc_r+0x14>

08008094 <_free_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	4605      	mov	r5, r0
 8008098:	2900      	cmp	r1, #0
 800809a:	d040      	beq.n	800811e <_free_r+0x8a>
 800809c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a0:	1f0c      	subs	r4, r1, #4
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	bfb8      	it	lt
 80080a6:	18e4      	addlt	r4, r4, r3
 80080a8:	f7ff fa22 	bl	80074f0 <__malloc_lock>
 80080ac:	4a1c      	ldr	r2, [pc, #112]	@ (8008120 <_free_r+0x8c>)
 80080ae:	6813      	ldr	r3, [r2, #0]
 80080b0:	b933      	cbnz	r3, 80080c0 <_free_r+0x2c>
 80080b2:	6063      	str	r3, [r4, #4]
 80080b4:	6014      	str	r4, [r2, #0]
 80080b6:	4628      	mov	r0, r5
 80080b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080bc:	f7ff ba1e 	b.w	80074fc <__malloc_unlock>
 80080c0:	42a3      	cmp	r3, r4
 80080c2:	d908      	bls.n	80080d6 <_free_r+0x42>
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	1821      	adds	r1, r4, r0
 80080c8:	428b      	cmp	r3, r1
 80080ca:	bf01      	itttt	eq
 80080cc:	6819      	ldreq	r1, [r3, #0]
 80080ce:	685b      	ldreq	r3, [r3, #4]
 80080d0:	1809      	addeq	r1, r1, r0
 80080d2:	6021      	streq	r1, [r4, #0]
 80080d4:	e7ed      	b.n	80080b2 <_free_r+0x1e>
 80080d6:	461a      	mov	r2, r3
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	b10b      	cbz	r3, 80080e0 <_free_r+0x4c>
 80080dc:	42a3      	cmp	r3, r4
 80080de:	d9fa      	bls.n	80080d6 <_free_r+0x42>
 80080e0:	6811      	ldr	r1, [r2, #0]
 80080e2:	1850      	adds	r0, r2, r1
 80080e4:	42a0      	cmp	r0, r4
 80080e6:	d10b      	bne.n	8008100 <_free_r+0x6c>
 80080e8:	6820      	ldr	r0, [r4, #0]
 80080ea:	4401      	add	r1, r0
 80080ec:	1850      	adds	r0, r2, r1
 80080ee:	4283      	cmp	r3, r0
 80080f0:	6011      	str	r1, [r2, #0]
 80080f2:	d1e0      	bne.n	80080b6 <_free_r+0x22>
 80080f4:	6818      	ldr	r0, [r3, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	4408      	add	r0, r1
 80080fa:	6010      	str	r0, [r2, #0]
 80080fc:	6053      	str	r3, [r2, #4]
 80080fe:	e7da      	b.n	80080b6 <_free_r+0x22>
 8008100:	d902      	bls.n	8008108 <_free_r+0x74>
 8008102:	230c      	movs	r3, #12
 8008104:	602b      	str	r3, [r5, #0]
 8008106:	e7d6      	b.n	80080b6 <_free_r+0x22>
 8008108:	6820      	ldr	r0, [r4, #0]
 800810a:	1821      	adds	r1, r4, r0
 800810c:	428b      	cmp	r3, r1
 800810e:	bf01      	itttt	eq
 8008110:	6819      	ldreq	r1, [r3, #0]
 8008112:	685b      	ldreq	r3, [r3, #4]
 8008114:	1809      	addeq	r1, r1, r0
 8008116:	6021      	streq	r1, [r4, #0]
 8008118:	6063      	str	r3, [r4, #4]
 800811a:	6054      	str	r4, [r2, #4]
 800811c:	e7cb      	b.n	80080b6 <_free_r+0x22>
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	20000458 	.word	0x20000458

08008124 <_malloc_usable_size_r>:
 8008124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008128:	1f18      	subs	r0, r3, #4
 800812a:	2b00      	cmp	r3, #0
 800812c:	bfbc      	itt	lt
 800812e:	580b      	ldrlt	r3, [r1, r0]
 8008130:	18c0      	addlt	r0, r0, r3
 8008132:	4770      	bx	lr

08008134 <fiprintf>:
 8008134:	b40e      	push	{r1, r2, r3}
 8008136:	b503      	push	{r0, r1, lr}
 8008138:	4601      	mov	r1, r0
 800813a:	ab03      	add	r3, sp, #12
 800813c:	4805      	ldr	r0, [pc, #20]	@ (8008154 <fiprintf+0x20>)
 800813e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008142:	6800      	ldr	r0, [r0, #0]
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	f000 f835 	bl	80081b4 <_vfiprintf_r>
 800814a:	b002      	add	sp, #8
 800814c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008150:	b003      	add	sp, #12
 8008152:	4770      	bx	lr
 8008154:	20000188 	.word	0x20000188

08008158 <abort>:
 8008158:	2006      	movs	r0, #6
 800815a:	b508      	push	{r3, lr}
 800815c:	f000 fa82 	bl	8008664 <raise>
 8008160:	2001      	movs	r0, #1
 8008162:	f7f9 f944 	bl	80013ee <_exit>

08008166 <__sfputc_r>:
 8008166:	6893      	ldr	r3, [r2, #8]
 8008168:	b410      	push	{r4}
 800816a:	3b01      	subs	r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	6093      	str	r3, [r2, #8]
 8008170:	da07      	bge.n	8008182 <__sfputc_r+0x1c>
 8008172:	6994      	ldr	r4, [r2, #24]
 8008174:	42a3      	cmp	r3, r4
 8008176:	db01      	blt.n	800817c <__sfputc_r+0x16>
 8008178:	290a      	cmp	r1, #10
 800817a:	d102      	bne.n	8008182 <__sfputc_r+0x1c>
 800817c:	bc10      	pop	{r4}
 800817e:	f000 b931 	b.w	80083e4 <__swbuf_r>
 8008182:	6813      	ldr	r3, [r2, #0]
 8008184:	1c58      	adds	r0, r3, #1
 8008186:	6010      	str	r0, [r2, #0]
 8008188:	7019      	strb	r1, [r3, #0]
 800818a:	4608      	mov	r0, r1
 800818c:	bc10      	pop	{r4}
 800818e:	4770      	bx	lr

08008190 <__sfputs_r>:
 8008190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008192:	4606      	mov	r6, r0
 8008194:	460f      	mov	r7, r1
 8008196:	4614      	mov	r4, r2
 8008198:	18d5      	adds	r5, r2, r3
 800819a:	42ac      	cmp	r4, r5
 800819c:	d101      	bne.n	80081a2 <__sfputs_r+0x12>
 800819e:	2000      	movs	r0, #0
 80081a0:	e007      	b.n	80081b2 <__sfputs_r+0x22>
 80081a2:	463a      	mov	r2, r7
 80081a4:	4630      	mov	r0, r6
 80081a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081aa:	f7ff ffdc 	bl	8008166 <__sfputc_r>
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	d1f3      	bne.n	800819a <__sfputs_r+0xa>
 80081b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081b4 <_vfiprintf_r>:
 80081b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b8:	460d      	mov	r5, r1
 80081ba:	4614      	mov	r4, r2
 80081bc:	4698      	mov	r8, r3
 80081be:	4606      	mov	r6, r0
 80081c0:	b09d      	sub	sp, #116	@ 0x74
 80081c2:	b118      	cbz	r0, 80081cc <_vfiprintf_r+0x18>
 80081c4:	6a03      	ldr	r3, [r0, #32]
 80081c6:	b90b      	cbnz	r3, 80081cc <_vfiprintf_r+0x18>
 80081c8:	f7fc fe28 	bl	8004e1c <__sinit>
 80081cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081ce:	07d9      	lsls	r1, r3, #31
 80081d0:	d405      	bmi.n	80081de <_vfiprintf_r+0x2a>
 80081d2:	89ab      	ldrh	r3, [r5, #12]
 80081d4:	059a      	lsls	r2, r3, #22
 80081d6:	d402      	bmi.n	80081de <_vfiprintf_r+0x2a>
 80081d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081da:	f7fd fd1a 	bl	8005c12 <__retarget_lock_acquire_recursive>
 80081de:	89ab      	ldrh	r3, [r5, #12]
 80081e0:	071b      	lsls	r3, r3, #28
 80081e2:	d501      	bpl.n	80081e8 <_vfiprintf_r+0x34>
 80081e4:	692b      	ldr	r3, [r5, #16]
 80081e6:	b99b      	cbnz	r3, 8008210 <_vfiprintf_r+0x5c>
 80081e8:	4629      	mov	r1, r5
 80081ea:	4630      	mov	r0, r6
 80081ec:	f000 f938 	bl	8008460 <__swsetup_r>
 80081f0:	b170      	cbz	r0, 8008210 <_vfiprintf_r+0x5c>
 80081f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081f4:	07dc      	lsls	r4, r3, #31
 80081f6:	d504      	bpl.n	8008202 <_vfiprintf_r+0x4e>
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081fc:	b01d      	add	sp, #116	@ 0x74
 80081fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008202:	89ab      	ldrh	r3, [r5, #12]
 8008204:	0598      	lsls	r0, r3, #22
 8008206:	d4f7      	bmi.n	80081f8 <_vfiprintf_r+0x44>
 8008208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800820a:	f7fd fd03 	bl	8005c14 <__retarget_lock_release_recursive>
 800820e:	e7f3      	b.n	80081f8 <_vfiprintf_r+0x44>
 8008210:	2300      	movs	r3, #0
 8008212:	9309      	str	r3, [sp, #36]	@ 0x24
 8008214:	2320      	movs	r3, #32
 8008216:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800821a:	2330      	movs	r3, #48	@ 0x30
 800821c:	f04f 0901 	mov.w	r9, #1
 8008220:	f8cd 800c 	str.w	r8, [sp, #12]
 8008224:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80083d0 <_vfiprintf_r+0x21c>
 8008228:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800822c:	4623      	mov	r3, r4
 800822e:	469a      	mov	sl, r3
 8008230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008234:	b10a      	cbz	r2, 800823a <_vfiprintf_r+0x86>
 8008236:	2a25      	cmp	r2, #37	@ 0x25
 8008238:	d1f9      	bne.n	800822e <_vfiprintf_r+0x7a>
 800823a:	ebba 0b04 	subs.w	fp, sl, r4
 800823e:	d00b      	beq.n	8008258 <_vfiprintf_r+0xa4>
 8008240:	465b      	mov	r3, fp
 8008242:	4622      	mov	r2, r4
 8008244:	4629      	mov	r1, r5
 8008246:	4630      	mov	r0, r6
 8008248:	f7ff ffa2 	bl	8008190 <__sfputs_r>
 800824c:	3001      	adds	r0, #1
 800824e:	f000 80a7 	beq.w	80083a0 <_vfiprintf_r+0x1ec>
 8008252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008254:	445a      	add	r2, fp
 8008256:	9209      	str	r2, [sp, #36]	@ 0x24
 8008258:	f89a 3000 	ldrb.w	r3, [sl]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 809f 	beq.w	80083a0 <_vfiprintf_r+0x1ec>
 8008262:	2300      	movs	r3, #0
 8008264:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800826c:	f10a 0a01 	add.w	sl, sl, #1
 8008270:	9304      	str	r3, [sp, #16]
 8008272:	9307      	str	r3, [sp, #28]
 8008274:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008278:	931a      	str	r3, [sp, #104]	@ 0x68
 800827a:	4654      	mov	r4, sl
 800827c:	2205      	movs	r2, #5
 800827e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008282:	4853      	ldr	r0, [pc, #332]	@ (80083d0 <_vfiprintf_r+0x21c>)
 8008284:	f7fd fcc7 	bl	8005c16 <memchr>
 8008288:	9a04      	ldr	r2, [sp, #16]
 800828a:	b9d8      	cbnz	r0, 80082c4 <_vfiprintf_r+0x110>
 800828c:	06d1      	lsls	r1, r2, #27
 800828e:	bf44      	itt	mi
 8008290:	2320      	movmi	r3, #32
 8008292:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008296:	0713      	lsls	r3, r2, #28
 8008298:	bf44      	itt	mi
 800829a:	232b      	movmi	r3, #43	@ 0x2b
 800829c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082a0:	f89a 3000 	ldrb.w	r3, [sl]
 80082a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a6:	d015      	beq.n	80082d4 <_vfiprintf_r+0x120>
 80082a8:	4654      	mov	r4, sl
 80082aa:	2000      	movs	r0, #0
 80082ac:	f04f 0c0a 	mov.w	ip, #10
 80082b0:	9a07      	ldr	r2, [sp, #28]
 80082b2:	4621      	mov	r1, r4
 80082b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082b8:	3b30      	subs	r3, #48	@ 0x30
 80082ba:	2b09      	cmp	r3, #9
 80082bc:	d94b      	bls.n	8008356 <_vfiprintf_r+0x1a2>
 80082be:	b1b0      	cbz	r0, 80082ee <_vfiprintf_r+0x13a>
 80082c0:	9207      	str	r2, [sp, #28]
 80082c2:	e014      	b.n	80082ee <_vfiprintf_r+0x13a>
 80082c4:	eba0 0308 	sub.w	r3, r0, r8
 80082c8:	fa09 f303 	lsl.w	r3, r9, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	46a2      	mov	sl, r4
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	e7d2      	b.n	800827a <_vfiprintf_r+0xc6>
 80082d4:	9b03      	ldr	r3, [sp, #12]
 80082d6:	1d19      	adds	r1, r3, #4
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	9103      	str	r1, [sp, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bfbb      	ittet	lt
 80082e0:	425b      	neglt	r3, r3
 80082e2:	f042 0202 	orrlt.w	r2, r2, #2
 80082e6:	9307      	strge	r3, [sp, #28]
 80082e8:	9307      	strlt	r3, [sp, #28]
 80082ea:	bfb8      	it	lt
 80082ec:	9204      	strlt	r2, [sp, #16]
 80082ee:	7823      	ldrb	r3, [r4, #0]
 80082f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80082f2:	d10a      	bne.n	800830a <_vfiprintf_r+0x156>
 80082f4:	7863      	ldrb	r3, [r4, #1]
 80082f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082f8:	d132      	bne.n	8008360 <_vfiprintf_r+0x1ac>
 80082fa:	9b03      	ldr	r3, [sp, #12]
 80082fc:	3402      	adds	r4, #2
 80082fe:	1d1a      	adds	r2, r3, #4
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	9203      	str	r2, [sp, #12]
 8008304:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008308:	9305      	str	r3, [sp, #20]
 800830a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80083d4 <_vfiprintf_r+0x220>
 800830e:	2203      	movs	r2, #3
 8008310:	4650      	mov	r0, sl
 8008312:	7821      	ldrb	r1, [r4, #0]
 8008314:	f7fd fc7f 	bl	8005c16 <memchr>
 8008318:	b138      	cbz	r0, 800832a <_vfiprintf_r+0x176>
 800831a:	2240      	movs	r2, #64	@ 0x40
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	eba0 000a 	sub.w	r0, r0, sl
 8008322:	4082      	lsls	r2, r0
 8008324:	4313      	orrs	r3, r2
 8008326:	3401      	adds	r4, #1
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800832e:	2206      	movs	r2, #6
 8008330:	4829      	ldr	r0, [pc, #164]	@ (80083d8 <_vfiprintf_r+0x224>)
 8008332:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008336:	f7fd fc6e 	bl	8005c16 <memchr>
 800833a:	2800      	cmp	r0, #0
 800833c:	d03f      	beq.n	80083be <_vfiprintf_r+0x20a>
 800833e:	4b27      	ldr	r3, [pc, #156]	@ (80083dc <_vfiprintf_r+0x228>)
 8008340:	bb1b      	cbnz	r3, 800838a <_vfiprintf_r+0x1d6>
 8008342:	9b03      	ldr	r3, [sp, #12]
 8008344:	3307      	adds	r3, #7
 8008346:	f023 0307 	bic.w	r3, r3, #7
 800834a:	3308      	adds	r3, #8
 800834c:	9303      	str	r3, [sp, #12]
 800834e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008350:	443b      	add	r3, r7
 8008352:	9309      	str	r3, [sp, #36]	@ 0x24
 8008354:	e76a      	b.n	800822c <_vfiprintf_r+0x78>
 8008356:	460c      	mov	r4, r1
 8008358:	2001      	movs	r0, #1
 800835a:	fb0c 3202 	mla	r2, ip, r2, r3
 800835e:	e7a8      	b.n	80082b2 <_vfiprintf_r+0xfe>
 8008360:	2300      	movs	r3, #0
 8008362:	f04f 0c0a 	mov.w	ip, #10
 8008366:	4619      	mov	r1, r3
 8008368:	3401      	adds	r4, #1
 800836a:	9305      	str	r3, [sp, #20]
 800836c:	4620      	mov	r0, r4
 800836e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008372:	3a30      	subs	r2, #48	@ 0x30
 8008374:	2a09      	cmp	r2, #9
 8008376:	d903      	bls.n	8008380 <_vfiprintf_r+0x1cc>
 8008378:	2b00      	cmp	r3, #0
 800837a:	d0c6      	beq.n	800830a <_vfiprintf_r+0x156>
 800837c:	9105      	str	r1, [sp, #20]
 800837e:	e7c4      	b.n	800830a <_vfiprintf_r+0x156>
 8008380:	4604      	mov	r4, r0
 8008382:	2301      	movs	r3, #1
 8008384:	fb0c 2101 	mla	r1, ip, r1, r2
 8008388:	e7f0      	b.n	800836c <_vfiprintf_r+0x1b8>
 800838a:	ab03      	add	r3, sp, #12
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	462a      	mov	r2, r5
 8008390:	4630      	mov	r0, r6
 8008392:	4b13      	ldr	r3, [pc, #76]	@ (80083e0 <_vfiprintf_r+0x22c>)
 8008394:	a904      	add	r1, sp, #16
 8008396:	f7fb fec7 	bl	8004128 <_printf_float>
 800839a:	4607      	mov	r7, r0
 800839c:	1c78      	adds	r0, r7, #1
 800839e:	d1d6      	bne.n	800834e <_vfiprintf_r+0x19a>
 80083a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083a2:	07d9      	lsls	r1, r3, #31
 80083a4:	d405      	bmi.n	80083b2 <_vfiprintf_r+0x1fe>
 80083a6:	89ab      	ldrh	r3, [r5, #12]
 80083a8:	059a      	lsls	r2, r3, #22
 80083aa:	d402      	bmi.n	80083b2 <_vfiprintf_r+0x1fe>
 80083ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ae:	f7fd fc31 	bl	8005c14 <__retarget_lock_release_recursive>
 80083b2:	89ab      	ldrh	r3, [r5, #12]
 80083b4:	065b      	lsls	r3, r3, #25
 80083b6:	f53f af1f 	bmi.w	80081f8 <_vfiprintf_r+0x44>
 80083ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083bc:	e71e      	b.n	80081fc <_vfiprintf_r+0x48>
 80083be:	ab03      	add	r3, sp, #12
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	462a      	mov	r2, r5
 80083c4:	4630      	mov	r0, r6
 80083c6:	4b06      	ldr	r3, [pc, #24]	@ (80083e0 <_vfiprintf_r+0x22c>)
 80083c8:	a904      	add	r1, sp, #16
 80083ca:	f7fc f94b 	bl	8004664 <_printf_i>
 80083ce:	e7e4      	b.n	800839a <_vfiprintf_r+0x1e6>
 80083d0:	080089a6 	.word	0x080089a6
 80083d4:	080089ac 	.word	0x080089ac
 80083d8:	080089b0 	.word	0x080089b0
 80083dc:	08004129 	.word	0x08004129
 80083e0:	08008191 	.word	0x08008191

080083e4 <__swbuf_r>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	460e      	mov	r6, r1
 80083e8:	4614      	mov	r4, r2
 80083ea:	4605      	mov	r5, r0
 80083ec:	b118      	cbz	r0, 80083f6 <__swbuf_r+0x12>
 80083ee:	6a03      	ldr	r3, [r0, #32]
 80083f0:	b90b      	cbnz	r3, 80083f6 <__swbuf_r+0x12>
 80083f2:	f7fc fd13 	bl	8004e1c <__sinit>
 80083f6:	69a3      	ldr	r3, [r4, #24]
 80083f8:	60a3      	str	r3, [r4, #8]
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	071a      	lsls	r2, r3, #28
 80083fe:	d501      	bpl.n	8008404 <__swbuf_r+0x20>
 8008400:	6923      	ldr	r3, [r4, #16]
 8008402:	b943      	cbnz	r3, 8008416 <__swbuf_r+0x32>
 8008404:	4621      	mov	r1, r4
 8008406:	4628      	mov	r0, r5
 8008408:	f000 f82a 	bl	8008460 <__swsetup_r>
 800840c:	b118      	cbz	r0, 8008416 <__swbuf_r+0x32>
 800840e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008412:	4638      	mov	r0, r7
 8008414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	6922      	ldr	r2, [r4, #16]
 800841a:	b2f6      	uxtb	r6, r6
 800841c:	1a98      	subs	r0, r3, r2
 800841e:	6963      	ldr	r3, [r4, #20]
 8008420:	4637      	mov	r7, r6
 8008422:	4283      	cmp	r3, r0
 8008424:	dc05      	bgt.n	8008432 <__swbuf_r+0x4e>
 8008426:	4621      	mov	r1, r4
 8008428:	4628      	mov	r0, r5
 800842a:	f7ff f839 	bl	80074a0 <_fflush_r>
 800842e:	2800      	cmp	r0, #0
 8008430:	d1ed      	bne.n	800840e <__swbuf_r+0x2a>
 8008432:	68a3      	ldr	r3, [r4, #8]
 8008434:	3b01      	subs	r3, #1
 8008436:	60a3      	str	r3, [r4, #8]
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	1c5a      	adds	r2, r3, #1
 800843c:	6022      	str	r2, [r4, #0]
 800843e:	701e      	strb	r6, [r3, #0]
 8008440:	6962      	ldr	r2, [r4, #20]
 8008442:	1c43      	adds	r3, r0, #1
 8008444:	429a      	cmp	r2, r3
 8008446:	d004      	beq.n	8008452 <__swbuf_r+0x6e>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	07db      	lsls	r3, r3, #31
 800844c:	d5e1      	bpl.n	8008412 <__swbuf_r+0x2e>
 800844e:	2e0a      	cmp	r6, #10
 8008450:	d1df      	bne.n	8008412 <__swbuf_r+0x2e>
 8008452:	4621      	mov	r1, r4
 8008454:	4628      	mov	r0, r5
 8008456:	f7ff f823 	bl	80074a0 <_fflush_r>
 800845a:	2800      	cmp	r0, #0
 800845c:	d0d9      	beq.n	8008412 <__swbuf_r+0x2e>
 800845e:	e7d6      	b.n	800840e <__swbuf_r+0x2a>

08008460 <__swsetup_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4b29      	ldr	r3, [pc, #164]	@ (8008508 <__swsetup_r+0xa8>)
 8008464:	4605      	mov	r5, r0
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	460c      	mov	r4, r1
 800846a:	b118      	cbz	r0, 8008474 <__swsetup_r+0x14>
 800846c:	6a03      	ldr	r3, [r0, #32]
 800846e:	b90b      	cbnz	r3, 8008474 <__swsetup_r+0x14>
 8008470:	f7fc fcd4 	bl	8004e1c <__sinit>
 8008474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008478:	0719      	lsls	r1, r3, #28
 800847a:	d422      	bmi.n	80084c2 <__swsetup_r+0x62>
 800847c:	06da      	lsls	r2, r3, #27
 800847e:	d407      	bmi.n	8008490 <__swsetup_r+0x30>
 8008480:	2209      	movs	r2, #9
 8008482:	602a      	str	r2, [r5, #0]
 8008484:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800848c:	81a3      	strh	r3, [r4, #12]
 800848e:	e033      	b.n	80084f8 <__swsetup_r+0x98>
 8008490:	0758      	lsls	r0, r3, #29
 8008492:	d512      	bpl.n	80084ba <__swsetup_r+0x5a>
 8008494:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008496:	b141      	cbz	r1, 80084aa <__swsetup_r+0x4a>
 8008498:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800849c:	4299      	cmp	r1, r3
 800849e:	d002      	beq.n	80084a6 <__swsetup_r+0x46>
 80084a0:	4628      	mov	r0, r5
 80084a2:	f7ff fdf7 	bl	8008094 <_free_r>
 80084a6:	2300      	movs	r3, #0
 80084a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084b0:	81a3      	strh	r3, [r4, #12]
 80084b2:	2300      	movs	r3, #0
 80084b4:	6063      	str	r3, [r4, #4]
 80084b6:	6923      	ldr	r3, [r4, #16]
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	89a3      	ldrh	r3, [r4, #12]
 80084bc:	f043 0308 	orr.w	r3, r3, #8
 80084c0:	81a3      	strh	r3, [r4, #12]
 80084c2:	6923      	ldr	r3, [r4, #16]
 80084c4:	b94b      	cbnz	r3, 80084da <__swsetup_r+0x7a>
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084d0:	d003      	beq.n	80084da <__swsetup_r+0x7a>
 80084d2:	4621      	mov	r1, r4
 80084d4:	4628      	mov	r0, r5
 80084d6:	f000 f83e 	bl	8008556 <__smakebuf_r>
 80084da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084de:	f013 0201 	ands.w	r2, r3, #1
 80084e2:	d00a      	beq.n	80084fa <__swsetup_r+0x9a>
 80084e4:	2200      	movs	r2, #0
 80084e6:	60a2      	str	r2, [r4, #8]
 80084e8:	6962      	ldr	r2, [r4, #20]
 80084ea:	4252      	negs	r2, r2
 80084ec:	61a2      	str	r2, [r4, #24]
 80084ee:	6922      	ldr	r2, [r4, #16]
 80084f0:	b942      	cbnz	r2, 8008504 <__swsetup_r+0xa4>
 80084f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80084f6:	d1c5      	bne.n	8008484 <__swsetup_r+0x24>
 80084f8:	bd38      	pop	{r3, r4, r5, pc}
 80084fa:	0799      	lsls	r1, r3, #30
 80084fc:	bf58      	it	pl
 80084fe:	6962      	ldrpl	r2, [r4, #20]
 8008500:	60a2      	str	r2, [r4, #8]
 8008502:	e7f4      	b.n	80084ee <__swsetup_r+0x8e>
 8008504:	2000      	movs	r0, #0
 8008506:	e7f7      	b.n	80084f8 <__swsetup_r+0x98>
 8008508:	20000188 	.word	0x20000188

0800850c <__swhatbuf_r>:
 800850c:	b570      	push	{r4, r5, r6, lr}
 800850e:	460c      	mov	r4, r1
 8008510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008514:	4615      	mov	r5, r2
 8008516:	2900      	cmp	r1, #0
 8008518:	461e      	mov	r6, r3
 800851a:	b096      	sub	sp, #88	@ 0x58
 800851c:	da0c      	bge.n	8008538 <__swhatbuf_r+0x2c>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	2100      	movs	r1, #0
 8008522:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008526:	bf14      	ite	ne
 8008528:	2340      	movne	r3, #64	@ 0x40
 800852a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800852e:	2000      	movs	r0, #0
 8008530:	6031      	str	r1, [r6, #0]
 8008532:	602b      	str	r3, [r5, #0]
 8008534:	b016      	add	sp, #88	@ 0x58
 8008536:	bd70      	pop	{r4, r5, r6, pc}
 8008538:	466a      	mov	r2, sp
 800853a:	f000 f849 	bl	80085d0 <_fstat_r>
 800853e:	2800      	cmp	r0, #0
 8008540:	dbed      	blt.n	800851e <__swhatbuf_r+0x12>
 8008542:	9901      	ldr	r1, [sp, #4]
 8008544:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008548:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800854c:	4259      	negs	r1, r3
 800854e:	4159      	adcs	r1, r3
 8008550:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008554:	e7eb      	b.n	800852e <__swhatbuf_r+0x22>

08008556 <__smakebuf_r>:
 8008556:	898b      	ldrh	r3, [r1, #12]
 8008558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800855a:	079d      	lsls	r5, r3, #30
 800855c:	4606      	mov	r6, r0
 800855e:	460c      	mov	r4, r1
 8008560:	d507      	bpl.n	8008572 <__smakebuf_r+0x1c>
 8008562:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008566:	6023      	str	r3, [r4, #0]
 8008568:	6123      	str	r3, [r4, #16]
 800856a:	2301      	movs	r3, #1
 800856c:	6163      	str	r3, [r4, #20]
 800856e:	b003      	add	sp, #12
 8008570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008572:	466a      	mov	r2, sp
 8008574:	ab01      	add	r3, sp, #4
 8008576:	f7ff ffc9 	bl	800850c <__swhatbuf_r>
 800857a:	9f00      	ldr	r7, [sp, #0]
 800857c:	4605      	mov	r5, r0
 800857e:	4639      	mov	r1, r7
 8008580:	4630      	mov	r0, r6
 8008582:	f7fe fe7b 	bl	800727c <_malloc_r>
 8008586:	b948      	cbnz	r0, 800859c <__smakebuf_r+0x46>
 8008588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800858c:	059a      	lsls	r2, r3, #22
 800858e:	d4ee      	bmi.n	800856e <__smakebuf_r+0x18>
 8008590:	f023 0303 	bic.w	r3, r3, #3
 8008594:	f043 0302 	orr.w	r3, r3, #2
 8008598:	81a3      	strh	r3, [r4, #12]
 800859a:	e7e2      	b.n	8008562 <__smakebuf_r+0xc>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80085a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085a6:	81a3      	strh	r3, [r4, #12]
 80085a8:	9b01      	ldr	r3, [sp, #4]
 80085aa:	6020      	str	r0, [r4, #0]
 80085ac:	b15b      	cbz	r3, 80085c6 <__smakebuf_r+0x70>
 80085ae:	4630      	mov	r0, r6
 80085b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085b4:	f000 f81e 	bl	80085f4 <_isatty_r>
 80085b8:	b128      	cbz	r0, 80085c6 <__smakebuf_r+0x70>
 80085ba:	89a3      	ldrh	r3, [r4, #12]
 80085bc:	f023 0303 	bic.w	r3, r3, #3
 80085c0:	f043 0301 	orr.w	r3, r3, #1
 80085c4:	81a3      	strh	r3, [r4, #12]
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	431d      	orrs	r5, r3
 80085ca:	81a5      	strh	r5, [r4, #12]
 80085cc:	e7cf      	b.n	800856e <__smakebuf_r+0x18>
	...

080085d0 <_fstat_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	2300      	movs	r3, #0
 80085d4:	4d06      	ldr	r5, [pc, #24]	@ (80085f0 <_fstat_r+0x20>)
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	4611      	mov	r1, r2
 80085dc:	602b      	str	r3, [r5, #0]
 80085de:	f7f8 ff55 	bl	800148c <_fstat>
 80085e2:	1c43      	adds	r3, r0, #1
 80085e4:	d102      	bne.n	80085ec <_fstat_r+0x1c>
 80085e6:	682b      	ldr	r3, [r5, #0]
 80085e8:	b103      	cbz	r3, 80085ec <_fstat_r+0x1c>
 80085ea:	6023      	str	r3, [r4, #0]
 80085ec:	bd38      	pop	{r3, r4, r5, pc}
 80085ee:	bf00      	nop
 80085f0:	2000045c 	.word	0x2000045c

080085f4 <_isatty_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	2300      	movs	r3, #0
 80085f8:	4d05      	ldr	r5, [pc, #20]	@ (8008610 <_isatty_r+0x1c>)
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	f7f8 ff53 	bl	80014aa <_isatty>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_isatty_r+0x1a>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	b103      	cbz	r3, 800860e <_isatty_r+0x1a>
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	2000045c 	.word	0x2000045c

08008614 <_raise_r>:
 8008614:	291f      	cmp	r1, #31
 8008616:	b538      	push	{r3, r4, r5, lr}
 8008618:	4605      	mov	r5, r0
 800861a:	460c      	mov	r4, r1
 800861c:	d904      	bls.n	8008628 <_raise_r+0x14>
 800861e:	2316      	movs	r3, #22
 8008620:	6003      	str	r3, [r0, #0]
 8008622:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008626:	bd38      	pop	{r3, r4, r5, pc}
 8008628:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800862a:	b112      	cbz	r2, 8008632 <_raise_r+0x1e>
 800862c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008630:	b94b      	cbnz	r3, 8008646 <_raise_r+0x32>
 8008632:	4628      	mov	r0, r5
 8008634:	f000 f830 	bl	8008698 <_getpid_r>
 8008638:	4622      	mov	r2, r4
 800863a:	4601      	mov	r1, r0
 800863c:	4628      	mov	r0, r5
 800863e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008642:	f000 b817 	b.w	8008674 <_kill_r>
 8008646:	2b01      	cmp	r3, #1
 8008648:	d00a      	beq.n	8008660 <_raise_r+0x4c>
 800864a:	1c59      	adds	r1, r3, #1
 800864c:	d103      	bne.n	8008656 <_raise_r+0x42>
 800864e:	2316      	movs	r3, #22
 8008650:	6003      	str	r3, [r0, #0]
 8008652:	2001      	movs	r0, #1
 8008654:	e7e7      	b.n	8008626 <_raise_r+0x12>
 8008656:	2100      	movs	r1, #0
 8008658:	4620      	mov	r0, r4
 800865a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800865e:	4798      	blx	r3
 8008660:	2000      	movs	r0, #0
 8008662:	e7e0      	b.n	8008626 <_raise_r+0x12>

08008664 <raise>:
 8008664:	4b02      	ldr	r3, [pc, #8]	@ (8008670 <raise+0xc>)
 8008666:	4601      	mov	r1, r0
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	f7ff bfd3 	b.w	8008614 <_raise_r>
 800866e:	bf00      	nop
 8008670:	20000188 	.word	0x20000188

08008674 <_kill_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	2300      	movs	r3, #0
 8008678:	4d06      	ldr	r5, [pc, #24]	@ (8008694 <_kill_r+0x20>)
 800867a:	4604      	mov	r4, r0
 800867c:	4608      	mov	r0, r1
 800867e:	4611      	mov	r1, r2
 8008680:	602b      	str	r3, [r5, #0]
 8008682:	f7f8 fea4 	bl	80013ce <_kill>
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	d102      	bne.n	8008690 <_kill_r+0x1c>
 800868a:	682b      	ldr	r3, [r5, #0]
 800868c:	b103      	cbz	r3, 8008690 <_kill_r+0x1c>
 800868e:	6023      	str	r3, [r4, #0]
 8008690:	bd38      	pop	{r3, r4, r5, pc}
 8008692:	bf00      	nop
 8008694:	2000045c 	.word	0x2000045c

08008698 <_getpid_r>:
 8008698:	f7f8 be92 	b.w	80013c0 <_getpid>

0800869c <_init>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	bf00      	nop
 80086a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a2:	bc08      	pop	{r3}
 80086a4:	469e      	mov	lr, r3
 80086a6:	4770      	bx	lr

080086a8 <_fini>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	bf00      	nop
 80086ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ae:	bc08      	pop	{r3}
 80086b0:	469e      	mov	lr, r3
 80086b2:	4770      	bx	lr
