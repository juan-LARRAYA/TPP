
BLUEPILL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003864  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003970  08003970  00004970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039fc  080039fc  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  080039fc  080039fc  000049fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a04  08003a04  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a04  08003a04  00004a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a08  08003a08  00004a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003a0c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000060  08003a6c  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08003a6c  0000529c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbbd  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002245  00000000  00000000  00011c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  00013e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1e  00000000  00000000  00014b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a4b  00000000  00000000  000155b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc6f  00000000  00000000  0002e001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f414  00000000  00000000  0003dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd084  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf0  00000000  00000000  000cd0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000d0cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003958 	.word	0x08003958

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003958 	.word	0x08003958

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001ae:	2afd      	cmp	r2, #253	@ 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	@ 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_drsub>:
 80002c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c8:	e002      	b.n	80002d0 <__adddf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_dsub>:
 80002cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d0 <__adddf3>:
 80002d0:	b530      	push	{r4, r5, lr}
 80002d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002da:	ea94 0f05 	teq	r4, r5
 80002de:	bf08      	it	eq
 80002e0:	ea90 0f02 	teqeq	r0, r2
 80002e4:	bf1f      	itttt	ne
 80002e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f6:	f000 80e2 	beq.w	80004be <__adddf3+0x1ee>
 80002fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000302:	bfb8      	it	lt
 8000304:	426d      	neglt	r5, r5
 8000306:	dd0c      	ble.n	8000322 <__adddf3+0x52>
 8000308:	442c      	add	r4, r5
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	ea82 0000 	eor.w	r0, r2, r0
 8000316:	ea83 0101 	eor.w	r1, r3, r1
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	2d36      	cmp	r5, #54	@ 0x36
 8000324:	bf88      	it	hi
 8000326:	bd30      	pophi	{r4, r5, pc}
 8000328:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800032c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000330:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x70>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000344:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x84>
 800034e:	4252      	negs	r2, r2
 8000350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000354:	ea94 0f05 	teq	r4, r5
 8000358:	f000 80a7 	beq.w	80004aa <__adddf3+0x1da>
 800035c:	f1a4 0401 	sub.w	r4, r4, #1
 8000360:	f1d5 0e20 	rsbs	lr, r5, #32
 8000364:	db0d      	blt.n	8000382 <__adddf3+0xb2>
 8000366:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036a:	fa22 f205 	lsr.w	r2, r2, r5
 800036e:	1880      	adds	r0, r0, r2
 8000370:	f141 0100 	adc.w	r1, r1, #0
 8000374:	fa03 f20e 	lsl.w	r2, r3, lr
 8000378:	1880      	adds	r0, r0, r2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	4159      	adcs	r1, r3
 8000380:	e00e      	b.n	80003a0 <__adddf3+0xd0>
 8000382:	f1a5 0520 	sub.w	r5, r5, #32
 8000386:	f10e 0e20 	add.w	lr, lr, #32
 800038a:	2a01      	cmp	r2, #1
 800038c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000390:	bf28      	it	cs
 8000392:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	18c0      	adds	r0, r0, r3
 800039c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a4:	d507      	bpl.n	80003b6 <__adddf3+0xe6>
 80003a6:	f04f 0e00 	mov.w	lr, #0
 80003aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ba:	d31b      	bcc.n	80003f4 <__adddf3+0x124>
 80003bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c0:	d30c      	bcc.n	80003dc <__adddf3+0x10c>
 80003c2:	0849      	lsrs	r1, r1, #1
 80003c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003cc:	f104 0401 	add.w	r4, r4, #1
 80003d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d8:	f080 809a 	bcs.w	8000510 <__adddf3+0x240>
 80003dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e0:	bf08      	it	eq
 80003e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e6:	f150 0000 	adcs.w	r0, r0, #0
 80003ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ee:	ea41 0105 	orr.w	r1, r1, r5
 80003f2:	bd30      	pop	{r4, r5, pc}
 80003f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f8:	4140      	adcs	r0, r0
 80003fa:	eb41 0101 	adc.w	r1, r1, r1
 80003fe:	3c01      	subs	r4, #1
 8000400:	bf28      	it	cs
 8000402:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000406:	d2e9      	bcs.n	80003dc <__adddf3+0x10c>
 8000408:	f091 0f00 	teq	r1, #0
 800040c:	bf04      	itt	eq
 800040e:	4601      	moveq	r1, r0
 8000410:	2000      	moveq	r0, #0
 8000412:	fab1 f381 	clz	r3, r1
 8000416:	bf08      	it	eq
 8000418:	3320      	addeq	r3, #32
 800041a:	f1a3 030b 	sub.w	r3, r3, #11
 800041e:	f1b3 0220 	subs.w	r2, r3, #32
 8000422:	da0c      	bge.n	800043e <__adddf3+0x16e>
 8000424:	320c      	adds	r2, #12
 8000426:	dd08      	ble.n	800043a <__adddf3+0x16a>
 8000428:	f102 0c14 	add.w	ip, r2, #20
 800042c:	f1c2 020c 	rsb	r2, r2, #12
 8000430:	fa01 f00c 	lsl.w	r0, r1, ip
 8000434:	fa21 f102 	lsr.w	r1, r1, r2
 8000438:	e00c      	b.n	8000454 <__adddf3+0x184>
 800043a:	f102 0214 	add.w	r2, r2, #20
 800043e:	bfd8      	it	le
 8000440:	f1c2 0c20 	rsble	ip, r2, #32
 8000444:	fa01 f102 	lsl.w	r1, r1, r2
 8000448:	fa20 fc0c 	lsr.w	ip, r0, ip
 800044c:	bfdc      	itt	le
 800044e:	ea41 010c 	orrle.w	r1, r1, ip
 8000452:	4090      	lslle	r0, r2
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	bfa2      	ittt	ge
 8000458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800045c:	4329      	orrge	r1, r5
 800045e:	bd30      	popge	{r4, r5, pc}
 8000460:	ea6f 0404 	mvn.w	r4, r4
 8000464:	3c1f      	subs	r4, #31
 8000466:	da1c      	bge.n	80004a2 <__adddf3+0x1d2>
 8000468:	340c      	adds	r4, #12
 800046a:	dc0e      	bgt.n	800048a <__adddf3+0x1ba>
 800046c:	f104 0414 	add.w	r4, r4, #20
 8000470:	f1c4 0220 	rsb	r2, r4, #32
 8000474:	fa20 f004 	lsr.w	r0, r0, r4
 8000478:	fa01 f302 	lsl.w	r3, r1, r2
 800047c:	ea40 0003 	orr.w	r0, r0, r3
 8000480:	fa21 f304 	lsr.w	r3, r1, r4
 8000484:	ea45 0103 	orr.w	r1, r5, r3
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f1c4 040c 	rsb	r4, r4, #12
 800048e:	f1c4 0220 	rsb	r2, r4, #32
 8000492:	fa20 f002 	lsr.w	r0, r0, r2
 8000496:	fa01 f304 	lsl.w	r3, r1, r4
 800049a:	ea40 0003 	orr.w	r0, r0, r3
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	fa21 f004 	lsr.w	r0, r1, r4
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f094 0f00 	teq	r4, #0
 80004ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b2:	bf06      	itte	eq
 80004b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b8:	3401      	addeq	r4, #1
 80004ba:	3d01      	subne	r5, #1
 80004bc:	e74e      	b.n	800035c <__adddf3+0x8c>
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf18      	it	ne
 80004c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c8:	d029      	beq.n	800051e <__adddf3+0x24e>
 80004ca:	ea94 0f05 	teq	r4, r5
 80004ce:	bf08      	it	eq
 80004d0:	ea90 0f02 	teqeq	r0, r2
 80004d4:	d005      	beq.n	80004e2 <__adddf3+0x212>
 80004d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004da:	bf04      	itt	eq
 80004dc:	4619      	moveq	r1, r3
 80004de:	4610      	moveq	r0, r2
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea91 0f03 	teq	r1, r3
 80004e6:	bf1e      	ittt	ne
 80004e8:	2100      	movne	r1, #0
 80004ea:	2000      	movne	r0, #0
 80004ec:	bd30      	popne	{r4, r5, pc}
 80004ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f2:	d105      	bne.n	8000500 <__adddf3+0x230>
 80004f4:	0040      	lsls	r0, r0, #1
 80004f6:	4149      	adcs	r1, r1
 80004f8:	bf28      	it	cs
 80004fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000504:	bf3c      	itt	cc
 8000506:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050a:	bd30      	popcc	{r4, r5, pc}
 800050c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000510:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000514:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000522:	bf1a      	itte	ne
 8000524:	4619      	movne	r1, r3
 8000526:	4610      	movne	r0, r2
 8000528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800052c:	bf1c      	itt	ne
 800052e:	460b      	movne	r3, r1
 8000530:	4602      	movne	r2, r0
 8000532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000536:	bf06      	itte	eq
 8000538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800053c:	ea91 0f03 	teqeq	r1, r3
 8000540:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	bf00      	nop

08000548 <__aeabi_ui2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800055c:	f04f 0500 	mov.w	r5, #0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e750      	b.n	8000408 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_i2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000580:	bf48      	it	mi
 8000582:	4240      	negmi	r0, r0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e73e      	b.n	8000408 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_f2d>:
 800058c:	0042      	lsls	r2, r0, #1
 800058e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000592:	ea4f 0131 	mov.w	r1, r1, rrx
 8000596:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059a:	bf1f      	itttt	ne
 800059c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a8:	4770      	bxne	lr
 80005aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ae:	bf08      	it	eq
 80005b0:	4770      	bxeq	lr
 80005b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b6:	bf04      	itt	eq
 80005b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005cc:	e71c      	b.n	8000408 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aed8 	beq.w	80003b6 <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6bd      	b.n	80003b6 <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__gesf2>:
 800063c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000640:	e006      	b.n	8000650 <__cmpsf2+0x4>
 8000642:	bf00      	nop

08000644 <__lesf2>:
 8000644:	f04f 0c01 	mov.w	ip, #1
 8000648:	e002      	b.n	8000650 <__cmpsf2+0x4>
 800064a:	bf00      	nop

0800064c <__cmpsf2>:
 800064c:	f04f 0c01 	mov.w	ip, #1
 8000650:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000654:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000658:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	bf18      	it	ne
 8000662:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000666:	d011      	beq.n	800068c <__cmpsf2+0x40>
 8000668:	b001      	add	sp, #4
 800066a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800066e:	bf18      	it	ne
 8000670:	ea90 0f01 	teqne	r0, r1
 8000674:	bf58      	it	pl
 8000676:	ebb2 0003 	subspl.w	r0, r2, r3
 800067a:	bf88      	it	hi
 800067c:	17c8      	asrhi	r0, r1, #31
 800067e:	bf38      	it	cc
 8000680:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000684:	bf18      	it	ne
 8000686:	f040 0001 	orrne.w	r0, r0, #1
 800068a:	4770      	bx	lr
 800068c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000690:	d102      	bne.n	8000698 <__cmpsf2+0x4c>
 8000692:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000696:	d105      	bne.n	80006a4 <__cmpsf2+0x58>
 8000698:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800069c:	d1e4      	bne.n	8000668 <__cmpsf2+0x1c>
 800069e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80006a2:	d0e1      	beq.n	8000668 <__cmpsf2+0x1c>
 80006a4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <__aeabi_cfrcmple>:
 80006ac:	4684      	mov	ip, r0
 80006ae:	4608      	mov	r0, r1
 80006b0:	4661      	mov	r1, ip
 80006b2:	e7ff      	b.n	80006b4 <__aeabi_cfcmpeq>

080006b4 <__aeabi_cfcmpeq>:
 80006b4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006b6:	f7ff ffc9 	bl	800064c <__cmpsf2>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	bf48      	it	mi
 80006be:	f110 0f00 	cmnmi.w	r0, #0
 80006c2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006c4 <__aeabi_fcmpeq>:
 80006c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c8:	f7ff fff4 	bl	80006b4 <__aeabi_cfcmpeq>
 80006cc:	bf0c      	ite	eq
 80006ce:	2001      	moveq	r0, #1
 80006d0:	2000      	movne	r0, #0
 80006d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006d6:	bf00      	nop

080006d8 <__aeabi_fcmplt>:
 80006d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006dc:	f7ff ffea 	bl	80006b4 <__aeabi_cfcmpeq>
 80006e0:	bf34      	ite	cc
 80006e2:	2001      	movcc	r0, #1
 80006e4:	2000      	movcs	r0, #0
 80006e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ea:	bf00      	nop

080006ec <__aeabi_fcmple>:
 80006ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f0:	f7ff ffe0 	bl	80006b4 <__aeabi_cfcmpeq>
 80006f4:	bf94      	ite	ls
 80006f6:	2001      	movls	r0, #1
 80006f8:	2000      	movhi	r0, #0
 80006fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80006fe:	bf00      	nop

08000700 <__aeabi_fcmpge>:
 8000700:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000704:	f7ff ffd2 	bl	80006ac <__aeabi_cfrcmple>
 8000708:	bf94      	ite	ls
 800070a:	2001      	movls	r0, #1
 800070c:	2000      	movhi	r0, #0
 800070e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000712:	bf00      	nop

08000714 <__aeabi_fcmpgt>:
 8000714:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000718:	f7ff ffc8 	bl	80006ac <__aeabi_cfrcmple>
 800071c:	bf34      	ite	cc
 800071e:	2001      	movcc	r0, #1
 8000720:	2000      	movcs	r0, #0
 8000722:	f85d fb08 	ldr.w	pc, [sp], #8
 8000726:	bf00      	nop

08000728 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000738:	4b18      	ldr	r3, [pc, #96]	@ (800079c <MX_ADC1_Init+0x74>)
 800073a:	4a19      	ldr	r2, [pc, #100]	@ (80007a0 <MX_ADC1_Init+0x78>)
 800073c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073e:	4b17      	ldr	r3, [pc, #92]	@ (800079c <MX_ADC1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000744:	4b15      	ldr	r3, [pc, #84]	@ (800079c <MX_ADC1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800074a:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_ADC1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <MX_ADC1_Init+0x74>)
 8000752:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000756:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b10      	ldr	r3, [pc, #64]	@ (800079c <MX_ADC1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_ADC1_Init+0x74>)
 8000760:	2201      	movs	r2, #1
 8000762:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000764:	480d      	ldr	r0, [pc, #52]	@ (800079c <MX_ADC1_Init+0x74>)
 8000766:	f000 fc4d 	bl	8001004 <HAL_ADC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f9af 	bl	8000ad2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000774:	2301      	movs	r3, #1
 8000776:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000778:	2301      	movs	r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_ADC1_Init+0x74>)
 8000786:	f000 fd15 	bl	80011b4 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000790:	f000 f99f 	bl	8000ad2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000007c 	.word	0x2000007c
 80007a0:	40012400 	.word	0x40012400

080007a4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a14      	ldr	r2, [pc, #80]	@ (8000810 <HAL_ADC_MspInit+0x6c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d121      	bne.n	8000808 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <HAL_ADC_MspInit+0x70>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <HAL_ADC_MspInit+0x70>)
 80007ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <HAL_ADC_MspInit+0x70>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <HAL_ADC_MspInit+0x70>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <HAL_ADC_MspInit+0x70>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <HAL_ADC_MspInit+0x70>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Vpanel_Pin|Ipanel_Pin;
 80007f4:	2342      	movs	r3, #66	@ 0x42
 80007f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f8:	2303      	movs	r3, #3
 80007fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4619      	mov	r1, r3
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <HAL_ADC_MspInit+0x74>)
 8000804:	f000 fef4 	bl	80015f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40012400 	.word	0x40012400
 8000814:	40021000 	.word	0x40021000
 8000818:	40010800 	.word	0x40010800

0800081c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000830:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <MX_GPIO_Init+0x90>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a1d      	ldr	r2, [pc, #116]	@ (80008ac <MX_GPIO_Init+0x90>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <MX_GPIO_Init+0x90>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0310 	and.w	r3, r3, #16
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <MX_GPIO_Init+0x90>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a17      	ldr	r2, [pc, #92]	@ (80008ac <MX_GPIO_Init+0x90>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <MX_GPIO_Init+0x90>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_GPIO_Init+0x90>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a11      	ldr	r2, [pc, #68]	@ (80008ac <MX_GPIO_Init+0x90>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_GPIO_Init+0x90>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activador_GPIO_Port, activador_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087e:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <MX_GPIO_Init+0x94>)
 8000880:	f001 f83a 	bl	80018f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activador_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2302      	movs	r3, #2
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(activador_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	4619      	mov	r1, r3
 800089c:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <MX_GPIO_Init+0x94>)
 800089e:	f000 fea7 	bl	80015f0 <HAL_GPIO_Init>

}
 80008a2:	bf00      	nop
 80008a4:	3720      	adds	r7, #32
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40011000 	.word	0x40011000

080008b4 <mppt>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void mppt(int *dutyCycle, float *power, float *previousPower) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
    if (*power > *previousPower) {
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4619      	mov	r1, r3
 80008ca:	4610      	mov	r0, r2
 80008cc:	f7ff ff22 	bl	8000714 <__aeabi_fcmpgt>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00a      	beq.n	80008ec <mppt+0x38>
        if (*dutyCycle < 255) *dutyCycle += deltaDuty;  // Si la potencia ha aumentado, continuar ajustando en la misma dirección
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2bfe      	cmp	r3, #254	@ 0xfe
 80008dc:	dc10      	bgt.n	8000900 <mppt+0x4c>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2201      	movs	r2, #1
 80008e4:	441a      	add	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	e009      	b.n	8000900 <mppt+0x4c>
    } else {
        if (*dutyCycle > 0) *dutyCycle -= deltaDuty;    // Si la potencia ha disminuido, invertir la dirección del ajuste
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	dd05      	ble.n	8000900 <mppt+0x4c>
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2201      	movs	r2, #1
 80008fa:	1a9a      	subs	r2, r3, r2
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	601a      	str	r2, [r3, #0]
    }

    if (*dutyCycle < 0) *dutyCycle = 0;                 // Asegurar que el Duty Cycle esté dentro de los límites permitidos (0-255)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	da02      	bge.n	800090e <mppt+0x5a>
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
    if (*dutyCycle > 255) *dutyCycle = 255;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2bff      	cmp	r3, #255	@ 0xff
 8000914:	dd02      	ble.n	800091c <mppt+0x68>
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	22ff      	movs	r2, #255	@ 0xff
 800091a:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);                  // Actualizar el PWM con el nuevo Duty Cycle
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <mppt+0x80>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	635a      	str	r2, [r3, #52]	@ 0x34

    *previousPower = *power;                            // Actualizar `previousPower` con el valor actual de `power`
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	601a      	str	r2, [r3, #0]
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200000c0 	.word	0x200000c0

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800093c:	b09e      	sub	sp, #120	@ 0x78
 800093e:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
    SystemClock_Config();
 8000940:	f000 f86c 	bl	8000a1c <SystemClock_Config>

    // Iniciar PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000944:	2100      	movs	r1, #0
 8000946:	482d      	ldr	r0, [pc, #180]	@ (80009fc <main+0xc4>)
 8000948:	f001 fd04 	bl	8002354 <HAL_TIM_PWM_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094c:	f000 fad4 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000950:	f000 f864 	bl	8000a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000954:	f7ff ff62 	bl	800081c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000958:	f000 fa32 	bl	8000dc0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800095c:	f7ff fee4 	bl	8000728 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000960:	f000 f958 	bl	8000c14 <MX_TIM1_Init>
      // Leer voltaje y corriente usando ADC
      //V_in = readADC(&hadc1, VPANEL_CHANNEL) * (3.3 / 4095.0);
      //I_in = readADC(&hadc1, IPANEL_CHANNEL) * (3.3 / 4095.0);

      // Calcular potencia
      power = V_in * I_in;
 8000964:	4b26      	ldr	r3, [pc, #152]	@ (8000a00 <main+0xc8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a26      	ldr	r2, [pc, #152]	@ (8000a04 <main+0xcc>)
 800096a:	6812      	ldr	r2, [r2, #0]
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fbf4 	bl	800015c <__aeabi_fmul>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	4b23      	ldr	r3, [pc, #140]	@ (8000a08 <main+0xd0>)
 800097a:	601a      	str	r2, [r3, #0]

      // Algoritmo MPPT
      mppt(&dutyCycle, &power, &previousPower);
 800097c:	4a23      	ldr	r2, [pc, #140]	@ (8000a0c <main+0xd4>)
 800097e:	4922      	ldr	r1, [pc, #136]	@ (8000a08 <main+0xd0>)
 8000980:	4823      	ldr	r0, [pc, #140]	@ (8000a10 <main+0xd8>)
 8000982:	f7ff ff97 	bl	80008b4 <mppt>

      // Ajustar ciclo de trabajo del PWM
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <main+0xd8>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <main+0xc4>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	635a      	str	r2, [r3, #52]	@ 0x34

      // Imprimir datos al puerto serie
      char buffer[100];
      sprintf(buffer, "V_in: %.2f V, I_in: %.2f A, Power: %.2f W\n", V_in, I_in, power); // @suppress("Float formatting support")
 8000990:	4b1b      	ldr	r3, [pc, #108]	@ (8000a00 <main+0xc8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fdf9 	bl	800058c <__aeabi_f2d>
 800099a:	4680      	mov	r8, r0
 800099c:	4689      	mov	r9, r1
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <main+0xcc>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fdf2 	bl	800058c <__aeabi_f2d>
 80009a8:	4604      	mov	r4, r0
 80009aa:	460d      	mov	r5, r1
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <main+0xd0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fdeb 	bl	800058c <__aeabi_f2d>
 80009b6:	4602      	mov	r2, r0
 80009b8:	460b      	mov	r3, r1
 80009ba:	1d38      	adds	r0, r7, #4
 80009bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80009c0:	e9cd 4500 	strd	r4, r5, [sp]
 80009c4:	4642      	mov	r2, r8
 80009c6:	464b      	mov	r3, r9
 80009c8:	4912      	ldr	r1, [pc, #72]	@ (8000a14 <main+0xdc>)
 80009ca:	f002 fb15 	bl	8002ff8 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fbbb 	bl	800014c <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	1d39      	adds	r1, r7, #4
 80009dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009e0:	480d      	ldr	r0, [pc, #52]	@ (8000a18 <main+0xe0>)
 80009e2:	f002 f934 	bl	8002c4e <HAL_UART_Transmit>

      // Guardar la potencia anterior
      previousPower = power;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <main+0xd0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <main+0xd4>)
 80009ec:	6013      	str	r3, [r2, #0]

      HAL_Delay(1000); // 1 segundo de delay
 80009ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f2:	f000 fae3 	bl	8000fbc <HAL_Delay>
  {
 80009f6:	bf00      	nop
 80009f8:	e7b4      	b.n	8000964 <main+0x2c>
 80009fa:	bf00      	nop
 80009fc:	200000c0 	.word	0x200000c0
 8000a00:	200000ac 	.word	0x200000ac
 8000a04:	200000b0 	.word	0x200000b0
 8000a08:	200000b4 	.word	0x200000b4
 8000a0c:	200000b8 	.word	0x200000b8
 8000a10:	20000000 	.word	0x20000000
 8000a14:	08003970 	.word	0x08003970
 8000a18:	20000108 	.word	0x20000108

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b094      	sub	sp, #80	@ 0x50
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a26:	2228      	movs	r2, #40	@ 0x28
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fb04 	bl	8003038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a68:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 ff58 	bl	8001928 <HAL_RCC_OscConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a7e:	f000 f828 	bl	8000ad2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a82:	230f      	movs	r3, #15
 8000a84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 f9c4 	bl	8001e2c <HAL_RCC_ClockConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000aaa:	f000 f812 	bl	8000ad2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ab6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 fb44 	bl	8002148 <HAL_RCCEx_PeriphCLKConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ac6:	f000 f804 	bl	8000ad2 <Error_Handler>
  }
}
 8000aca:	bf00      	nop
 8000acc:	3750      	adds	r7, #80	@ 0x50
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad6:	b672      	cpsid	i
}
 8000ad8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ada:	bf00      	nop
 8000adc:	e7fd      	b.n	8000ada <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <HAL_MspInit+0x5c>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a14      	ldr	r2, [pc, #80]	@ (8000b3c <HAL_MspInit+0x5c>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_MspInit+0x5c>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_MspInit+0x5c>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a0e      	ldr	r2, [pc, #56]	@ (8000b3c <HAL_MspInit+0x5c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <HAL_MspInit+0x5c>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b16:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <HAL_MspInit+0x60>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <HAL_MspInit+0x60>)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <NMI_Handler+0x4>

08000b4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b94:	f000 f9f6 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	@ (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f002 fa3c 	bl	8003048 <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20005000 	.word	0x20005000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	200000bc 	.word	0x200000bc
 8000c04:	200002a0 	.word	0x200002a0

08000c08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b092      	sub	sp, #72	@ 0x48
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	615a      	str	r2, [r3, #20]
 8000c36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 f9fa 	bl	8003038 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c44:	4b33      	ldr	r3, [pc, #204]	@ (8000d14 <MX_TIM1_Init+0x100>)
 8000c46:	4a34      	ldr	r2, [pc, #208]	@ (8000d18 <MX_TIM1_Init+0x104>)
 8000c48:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c4a:	4b32      	ldr	r3, [pc, #200]	@ (8000d14 <MX_TIM1_Init+0x100>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b30      	ldr	r3, [pc, #192]	@ (8000d14 <MX_TIM1_Init+0x100>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c56:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <MX_TIM1_Init+0x100>)
 8000c58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d14 <MX_TIM1_Init+0x100>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c64:	4b2b      	ldr	r3, [pc, #172]	@ (8000d14 <MX_TIM1_Init+0x100>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <MX_TIM1_Init+0x100>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c70:	4828      	ldr	r0, [pc, #160]	@ (8000d14 <MX_TIM1_Init+0x100>)
 8000c72:	f001 fb1f 	bl	80022b4 <HAL_TIM_PWM_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c7c:	f7ff ff29 	bl	8000ad2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c88:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4821      	ldr	r0, [pc, #132]	@ (8000d14 <MX_TIM1_Init+0x100>)
 8000c90:	f001 fede 	bl	8002a50 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000c9a:	f7ff ff1a 	bl	8000ad2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c9e:	2360      	movs	r3, #96	@ 0x60
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4814      	ldr	r0, [pc, #80]	@ (8000d14 <MX_TIM1_Init+0x100>)
 8000cc4:	f001 fbe8 	bl	8002498 <HAL_TIM_PWM_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000cce:	f7ff ff00 	bl	8000ad2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4807      	ldr	r0, [pc, #28]	@ (8000d14 <MX_TIM1_Init+0x100>)
 8000cf6:	f001 ff09 	bl	8002b0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000d00:	f7ff fee7 	bl	8000ad2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d04:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <MX_TIM1_Init+0x100>)
 8000d06:	f000 f827 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 8000d0a:	bf00      	nop
 8000d0c:	3748      	adds	r7, #72	@ 0x48
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000c0 	.word	0x200000c0
 8000d18:	40012c00 	.word	0x40012c00

08000d1c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a09      	ldr	r2, [pc, #36]	@ (8000d50 <HAL_TIM_PWM_MspInit+0x34>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10b      	bne.n	8000d46 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_TIM_PWM_MspInit+0x38>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a08      	ldr	r2, [pc, #32]	@ (8000d54 <HAL_TIM_PWM_MspInit+0x38>)
 8000d34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_TIM_PWM_MspInit+0x38>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d46:	bf00      	nop
 8000d48:	3714      	adds	r7, #20
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	40012c00 	.word	0x40012c00
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a10      	ldr	r2, [pc, #64]	@ (8000db4 <HAL_TIM_MspPostInit+0x5c>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d118      	bne.n	8000daa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_TIM_MspPostInit+0x60>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000db8 <HAL_TIM_MspPostInit+0x60>)
 8000d7e:	f043 0304 	orr.w	r3, r3, #4
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <HAL_TIM_MspPostInit+0x60>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PwmMppt_Pin;
 8000d90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PwmMppt_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <HAL_TIM_MspPostInit+0x64>)
 8000da6:	f000 fc23 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40012c00 	.word	0x40012c00
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010800 	.word	0x40010800

08000dc0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <MX_USART1_UART_Init+0x50>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_USART1_UART_Init+0x4c>)
 8000df8:	f001 fed9 	bl	8002bae <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e02:	f7ff fe66 	bl	8000ad2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000108 	.word	0x20000108
 8000e10:	40013800 	.word	0x40013800

08000e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea0 <HAL_UART_MspInit+0x8c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d131      	bne.n	8000e98 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a1a      	ldr	r2, [pc, #104]	@ (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a14      	ldr	r2, [pc, #80]	@ (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <HAL_UART_MspInit+0x90>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	480b      	ldr	r0, [pc, #44]	@ (8000ea8 <HAL_UART_MspInit+0x94>)
 8000e7a:	f000 fbb9 	bl	80015f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <HAL_UART_MspInit+0x94>)
 8000e94:	f000 fbac 	bl	80015f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40013800 	.word	0x40013800
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800

08000eac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eac:	f7ff feac 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb0:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eb2:	490c      	ldr	r1, [pc, #48]	@ (8000ee4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a09      	ldr	r2, [pc, #36]	@ (8000eec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ec8:	4c09      	ldr	r4, [pc, #36]	@ (8000ef0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f002 f8bd 	bl	8003054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eda:	f7ff fd2d 	bl	8000938 <main>
  bx lr
 8000ede:	4770      	bx	lr
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ee8:	08003a0c 	.word	0x08003a0c
  ldr r2, =_sbss
 8000eec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ef0:	2000029c 	.word	0x2000029c

08000ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_2_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <HAL_Init+0x28>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <HAL_Init+0x28>)
 8000f02:	f043 0310 	orr.w	r3, r3, #16
 8000f06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 fb3d 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	200f      	movs	r0, #15
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fde4 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40022000 	.word	0x40022000

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fb47 	bl	80015d6 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f60:	f000 fb1d 	bl	800159e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	@ (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000004 	.word	0x20000004
 8000f7c:	2000000c 	.word	0x2000000c
 8000f80:	20000008 	.word	0x20000008

08000f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <HAL_IncTick+0x1c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <HAL_IncTick+0x20>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a03      	ldr	r2, [pc, #12]	@ (8000fa4 <HAL_IncTick+0x20>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	2000000c 	.word	0x2000000c
 8000fa4:	20000150 	.word	0x20000150

08000fa8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b02      	ldr	r3, [pc, #8]	@ (8000fb8 <HAL_GetTick+0x10>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	20000150 	.word	0x20000150

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff fff0 	bl	8000fa8 <HAL_GetTick>
 8000fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fd4:	d005      	beq.n	8000fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_Delay+0x44>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fe2:	bf00      	nop
 8000fe4:	f7ff ffe0 	bl	8000fa8 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8f7      	bhi.n	8000fe4 <HAL_Delay+0x28>
  {
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000000c 	.word	0x2000000c

08001004 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e0be      	b.n	80011a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001030:	2b00      	cmp	r3, #0
 8001032:	d109      	bne.n	8001048 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fbae 	bl	80007a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f9ab 	bl	80013a4 <ADC_ConversionStop_Disable>
 800104e:	4603      	mov	r3, r0
 8001050:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	f040 8099 	bne.w	8001192 <HAL_ADC_Init+0x18e>
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 8095 	bne.w	8001192 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001070:	f023 0302 	bic.w	r3, r3, #2
 8001074:	f043 0202 	orr.w	r2, r3, #2
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001084:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7b1b      	ldrb	r3, [r3, #12]
 800108a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800108c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	4313      	orrs	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800109c:	d003      	beq.n	80010a6 <HAL_ADC_Init+0xa2>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d102      	bne.n	80010ac <HAL_ADC_Init+0xa8>
 80010a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010aa:	e000      	b.n	80010ae <HAL_ADC_Init+0xaa>
 80010ac:	2300      	movs	r3, #0
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7d1b      	ldrb	r3, [r3, #20]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d119      	bne.n	80010f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7b1b      	ldrb	r3, [r3, #12]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d109      	bne.n	80010d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	035a      	lsls	r2, r3, #13
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	e00b      	b.n	80010f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010dc:	f043 0220 	orr.w	r2, r3, #32
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e8:	f043 0201 	orr.w	r2, r3, #1
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	430a      	orrs	r2, r1
 8001102:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <HAL_ADC_Init+0x1a8>)
 800110c:	4013      	ands	r3, r2
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	68b9      	ldr	r1, [r7, #8]
 8001114:	430b      	orrs	r3, r1
 8001116:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001120:	d003      	beq.n	800112a <HAL_ADC_Init+0x126>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d104      	bne.n	8001134 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	3b01      	subs	r3, #1
 8001130:	051b      	lsls	r3, r3, #20
 8001132:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800113a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	430a      	orrs	r2, r1
 8001146:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <HAL_ADC_Init+0x1ac>)
 8001150:	4013      	ands	r3, r2
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	429a      	cmp	r2, r3
 8001156:	d10b      	bne.n	8001170 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001162:	f023 0303 	bic.w	r3, r3, #3
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800116e:	e018      	b.n	80011a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001174:	f023 0312 	bic.w	r3, r3, #18
 8001178:	f043 0210 	orr.w	r2, r3, #16
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001190:	e007      	b.n	80011a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001196:	f043 0210 	orr.w	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	ffe1f7fd 	.word	0xffe1f7fd
 80011b0:	ff1f0efe 	.word	0xff1f0efe

080011b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x20>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e0dc      	b.n	800138e <HAL_ADC_ConfigChannel+0x1da>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b06      	cmp	r3, #6
 80011e2:	d81c      	bhi.n	800121e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	3b05      	subs	r3, #5
 80011f6:	221f      	movs	r2, #31
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4019      	ands	r1, r3
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3b05      	subs	r3, #5
 8001210:	fa00 f203 	lsl.w	r2, r0, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	635a      	str	r2, [r3, #52]	@ 0x34
 800121c:	e03c      	b.n	8001298 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b0c      	cmp	r3, #12
 8001224:	d81c      	bhi.n	8001260 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b23      	subs	r3, #35	@ 0x23
 8001238:	221f      	movs	r2, #31
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	4019      	ands	r1, r3
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	3b23      	subs	r3, #35	@ 0x23
 8001252:	fa00 f203 	lsl.w	r2, r0, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	631a      	str	r2, [r3, #48]	@ 0x30
 800125e:	e01b      	b.n	8001298 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	3b41      	subs	r3, #65	@ 0x41
 8001272:	221f      	movs	r2, #31
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	4019      	ands	r1, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	3b41      	subs	r3, #65	@ 0x41
 800128c:	fa00 f203 	lsl.w	r2, r0, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b09      	cmp	r3, #9
 800129e:	d91c      	bls.n	80012da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68d9      	ldr	r1, [r3, #12]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	3b1e      	subs	r3, #30
 80012b2:	2207      	movs	r2, #7
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4019      	ands	r1, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	6898      	ldr	r0, [r3, #8]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	3b1e      	subs	r3, #30
 80012cc:	fa00 f203 	lsl.w	r2, r0, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	e019      	b.n	800130e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6919      	ldr	r1, [r3, #16]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	2207      	movs	r2, #7
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4019      	ands	r1, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	6898      	ldr	r0, [r3, #8]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	fa00 f203 	lsl.w	r2, r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b10      	cmp	r3, #16
 8001314:	d003      	beq.n	800131e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800131a:	2b11      	cmp	r3, #17
 800131c:	d132      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a1d      	ldr	r2, [pc, #116]	@ (8001398 <HAL_ADC_ConfigChannel+0x1e4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d125      	bne.n	8001374 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d126      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001344:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b10      	cmp	r3, #16
 800134c:	d11a      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800134e:	4b13      	ldr	r3, [pc, #76]	@ (800139c <HAL_ADC_ConfigChannel+0x1e8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a13      	ldr	r2, [pc, #76]	@ (80013a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	0c9a      	lsrs	r2, r3, #18
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001364:	e002      	b.n	800136c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	3b01      	subs	r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f9      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x1b2>
 8001372:	e007      	b.n	8001384 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001378:	f043 0220 	orr.w	r2, r3, #32
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40012400 	.word	0x40012400
 800139c:	20000004 	.word	0x20000004
 80013a0:	431bde83 	.word	0x431bde83

080013a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d12e      	bne.n	800141c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013ce:	f7ff fdeb 	bl	8000fa8 <HAL_GetTick>
 80013d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013d4:	e01b      	b.n	800140e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013d6:	f7ff fde7 	bl	8000fa8 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d914      	bls.n	800140e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d10d      	bne.n	800140e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f6:	f043 0210 	orr.w	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001402:	f043 0201 	orr.w	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e007      	b.n	800141e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b01      	cmp	r3, #1
 800141a:	d0dc      	beq.n	80013d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145a:	4a04      	ldr	r2, [pc, #16]	@ (800146c <__NVIC_SetPriorityGrouping+0x44>)
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	60d3      	str	r3, [r2, #12]
}
 8001460:	bf00      	nop
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001474:	4b04      	ldr	r3, [pc, #16]	@ (8001488 <__NVIC_GetPriorityGrouping+0x18>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	f003 0307 	and.w	r3, r3, #7
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db0a      	blt.n	80014b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	490c      	ldr	r1, [pc, #48]	@ (80014d8 <__NVIC_SetPriority+0x4c>)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	b2d2      	uxtb	r2, r2
 80014ae:	440b      	add	r3, r1
 80014b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b4:	e00a      	b.n	80014cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4908      	ldr	r1, [pc, #32]	@ (80014dc <__NVIC_SetPriority+0x50>)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	3b04      	subs	r3, #4
 80014c4:	0112      	lsls	r2, r2, #4
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	761a      	strb	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b089      	sub	sp, #36	@ 0x24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f1c3 0307 	rsb	r3, r3, #7
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	bf28      	it	cs
 80014fe:	2304      	movcs	r3, #4
 8001500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3304      	adds	r3, #4
 8001506:	2b06      	cmp	r3, #6
 8001508:	d902      	bls.n	8001510 <NVIC_EncodePriority+0x30>
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3b03      	subs	r3, #3
 800150e:	e000      	b.n	8001512 <NVIC_EncodePriority+0x32>
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43da      	mvns	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001528:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43d9      	mvns	r1, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001538:	4313      	orrs	r3, r2
         );
}
 800153a:	4618      	mov	r0, r3
 800153c:	3724      	adds	r7, #36	@ 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001568:	f7ff ff90 	bl	800148c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff49 	bl	8001428 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff5e 	bl	8001470 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff90 	bl	80014e0 <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5f 	bl	800148c <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffb0 	bl	8001544 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b08b      	sub	sp, #44	@ 0x2c
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	e169      	b.n	80018d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001604:	2201      	movs	r2, #1
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 8158 	bne.w	80018d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4a9a      	ldr	r2, [pc, #616]	@ (8001890 <HAL_GPIO_Init+0x2a0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d05e      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 800162c:	4a98      	ldr	r2, [pc, #608]	@ (8001890 <HAL_GPIO_Init+0x2a0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d875      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 8001632:	4a98      	ldr	r2, [pc, #608]	@ (8001894 <HAL_GPIO_Init+0x2a4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d058      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 8001638:	4a96      	ldr	r2, [pc, #600]	@ (8001894 <HAL_GPIO_Init+0x2a4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d86f      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 800163e:	4a96      	ldr	r2, [pc, #600]	@ (8001898 <HAL_GPIO_Init+0x2a8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d052      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 8001644:	4a94      	ldr	r2, [pc, #592]	@ (8001898 <HAL_GPIO_Init+0x2a8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d869      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 800164a:	4a94      	ldr	r2, [pc, #592]	@ (800189c <HAL_GPIO_Init+0x2ac>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d04c      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 8001650:	4a92      	ldr	r2, [pc, #584]	@ (800189c <HAL_GPIO_Init+0x2ac>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d863      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 8001656:	4a92      	ldr	r2, [pc, #584]	@ (80018a0 <HAL_GPIO_Init+0x2b0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d046      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
 800165c:	4a90      	ldr	r2, [pc, #576]	@ (80018a0 <HAL_GPIO_Init+0x2b0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d85d      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 8001662:	2b12      	cmp	r3, #18
 8001664:	d82a      	bhi.n	80016bc <HAL_GPIO_Init+0xcc>
 8001666:	2b12      	cmp	r3, #18
 8001668:	d859      	bhi.n	800171e <HAL_GPIO_Init+0x12e>
 800166a:	a201      	add	r2, pc, #4	@ (adr r2, 8001670 <HAL_GPIO_Init+0x80>)
 800166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001670:	080016eb 	.word	0x080016eb
 8001674:	080016c5 	.word	0x080016c5
 8001678:	080016d7 	.word	0x080016d7
 800167c:	08001719 	.word	0x08001719
 8001680:	0800171f 	.word	0x0800171f
 8001684:	0800171f 	.word	0x0800171f
 8001688:	0800171f 	.word	0x0800171f
 800168c:	0800171f 	.word	0x0800171f
 8001690:	0800171f 	.word	0x0800171f
 8001694:	0800171f 	.word	0x0800171f
 8001698:	0800171f 	.word	0x0800171f
 800169c:	0800171f 	.word	0x0800171f
 80016a0:	0800171f 	.word	0x0800171f
 80016a4:	0800171f 	.word	0x0800171f
 80016a8:	0800171f 	.word	0x0800171f
 80016ac:	0800171f 	.word	0x0800171f
 80016b0:	0800171f 	.word	0x0800171f
 80016b4:	080016cd 	.word	0x080016cd
 80016b8:	080016e1 	.word	0x080016e1
 80016bc:	4a79      	ldr	r2, [pc, #484]	@ (80018a4 <HAL_GPIO_Init+0x2b4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016c2:	e02c      	b.n	800171e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e029      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	3304      	adds	r3, #4
 80016d2:	623b      	str	r3, [r7, #32]
          break;
 80016d4:	e024      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	3308      	adds	r3, #8
 80016dc:	623b      	str	r3, [r7, #32]
          break;
 80016de:	e01f      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	330c      	adds	r3, #12
 80016e6:	623b      	str	r3, [r7, #32]
          break;
 80016e8:	e01a      	b.n	8001720 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016f2:	2304      	movs	r3, #4
 80016f4:	623b      	str	r3, [r7, #32]
          break;
 80016f6:	e013      	b.n	8001720 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d105      	bne.n	800170c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001700:	2308      	movs	r3, #8
 8001702:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	611a      	str	r2, [r3, #16]
          break;
 800170a:	e009      	b.n	8001720 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800170c:	2308      	movs	r3, #8
 800170e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	615a      	str	r2, [r3, #20]
          break;
 8001716:	e003      	b.n	8001720 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
          break;
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x130>
          break;
 800171e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2bff      	cmp	r3, #255	@ 0xff
 8001724:	d801      	bhi.n	800172a <HAL_GPIO_Init+0x13a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	e001      	b.n	800172e <HAL_GPIO_Init+0x13e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3304      	adds	r3, #4
 800172e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2bff      	cmp	r3, #255	@ 0xff
 8001734:	d802      	bhi.n	800173c <HAL_GPIO_Init+0x14c>
 8001736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	e002      	b.n	8001742 <HAL_GPIO_Init+0x152>
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	3b08      	subs	r3, #8
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	210f      	movs	r1, #15
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	401a      	ands	r2, r3
 8001754:	6a39      	ldr	r1, [r7, #32]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	431a      	orrs	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80b1 	beq.w	80018d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001770:	4b4d      	ldr	r3, [pc, #308]	@ (80018a8 <HAL_GPIO_Init+0x2b8>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a4c      	ldr	r2, [pc, #304]	@ (80018a8 <HAL_GPIO_Init+0x2b8>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b4a      	ldr	r3, [pc, #296]	@ (80018a8 <HAL_GPIO_Init+0x2b8>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001788:	4a48      	ldr	r2, [pc, #288]	@ (80018ac <HAL_GPIO_Init+0x2bc>)
 800178a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001794:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	220f      	movs	r2, #15
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a40      	ldr	r2, [pc, #256]	@ (80018b0 <HAL_GPIO_Init+0x2c0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d013      	beq.n	80017dc <HAL_GPIO_Init+0x1ec>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a3f      	ldr	r2, [pc, #252]	@ (80018b4 <HAL_GPIO_Init+0x2c4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00d      	beq.n	80017d8 <HAL_GPIO_Init+0x1e8>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a3e      	ldr	r2, [pc, #248]	@ (80018b8 <HAL_GPIO_Init+0x2c8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d007      	beq.n	80017d4 <HAL_GPIO_Init+0x1e4>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a3d      	ldr	r2, [pc, #244]	@ (80018bc <HAL_GPIO_Init+0x2cc>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d101      	bne.n	80017d0 <HAL_GPIO_Init+0x1e0>
 80017cc:	2303      	movs	r3, #3
 80017ce:	e006      	b.n	80017de <HAL_GPIO_Init+0x1ee>
 80017d0:	2304      	movs	r3, #4
 80017d2:	e004      	b.n	80017de <HAL_GPIO_Init+0x1ee>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e002      	b.n	80017de <HAL_GPIO_Init+0x1ee>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <HAL_GPIO_Init+0x1ee>
 80017dc:	2300      	movs	r3, #0
 80017de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e0:	f002 0203 	and.w	r2, r2, #3
 80017e4:	0092      	lsls	r2, r2, #2
 80017e6:	4093      	lsls	r3, r2
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ee:	492f      	ldr	r1, [pc, #188]	@ (80018ac <HAL_GPIO_Init+0x2bc>)
 80017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3302      	adds	r3, #2
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d006      	beq.n	8001816 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001808:	4b2d      	ldr	r3, [pc, #180]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	492c      	ldr	r1, [pc, #176]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]
 8001814:	e006      	b.n	8001824 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001816:	4b2a      	ldr	r3, [pc, #168]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	43db      	mvns	r3, r3
 800181e:	4928      	ldr	r1, [pc, #160]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001820:	4013      	ands	r3, r2
 8001822:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001830:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	4922      	ldr	r1, [pc, #136]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	60cb      	str	r3, [r1, #12]
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800183e:	4b20      	ldr	r3, [pc, #128]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	43db      	mvns	r3, r3
 8001846:	491e      	ldr	r1, [pc, #120]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001848:	4013      	ands	r3, r2
 800184a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001858:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4918      	ldr	r1, [pc, #96]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001866:	4b16      	ldr	r3, [pc, #88]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	43db      	mvns	r3, r3
 800186e:	4914      	ldr	r1, [pc, #80]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001870:	4013      	ands	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d021      	beq.n	80018c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	490e      	ldr	r1, [pc, #56]	@ (80018c0 <HAL_GPIO_Init+0x2d0>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
 800188c:	e021      	b.n	80018d2 <HAL_GPIO_Init+0x2e2>
 800188e:	bf00      	nop
 8001890:	10320000 	.word	0x10320000
 8001894:	10310000 	.word	0x10310000
 8001898:	10220000 	.word	0x10220000
 800189c:	10210000 	.word	0x10210000
 80018a0:	10120000 	.word	0x10120000
 80018a4:	10110000 	.word	0x10110000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000
 80018b0:	40010800 	.word	0x40010800
 80018b4:	40010c00 	.word	0x40010c00
 80018b8:	40011000 	.word	0x40011000
 80018bc:	40011400 	.word	0x40011400
 80018c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_GPIO_Init+0x304>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	4909      	ldr	r1, [pc, #36]	@ (80018f4 <HAL_GPIO_Init+0x304>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	3301      	adds	r3, #1
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f47f ae8e 	bne.w	8001604 <HAL_GPIO_Init+0x14>
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	372c      	adds	r7, #44	@ 0x2c
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40010400 	.word	0x40010400

080018f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
 8001904:	4613      	mov	r3, r2
 8001906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001908:	787b      	ldrb	r3, [r7, #1]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001914:	e003      	b.n	800191e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	041a      	lsls	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	611a      	str	r2, [r3, #16]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e272      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8087 	beq.w	8001a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001948:	4b92      	ldr	r3, [pc, #584]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b04      	cmp	r3, #4
 8001952:	d00c      	beq.n	800196e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001954:	4b8f      	ldr	r3, [pc, #572]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d112      	bne.n	8001986 <HAL_RCC_OscConfig+0x5e>
 8001960:	4b8c      	ldr	r3, [pc, #560]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800196c:	d10b      	bne.n	8001986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196e:	4b89      	ldr	r3, [pc, #548]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d06c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x12c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d168      	bne.n	8001a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e24c      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x76>
 8001990:	4b80      	ldr	r3, [pc, #512]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a7f      	ldr	r2, [pc, #508]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e02e      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x98>
 80019a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7a      	ldr	r2, [pc, #488]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b78      	ldr	r3, [pc, #480]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a77      	ldr	r2, [pc, #476]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0xbc>
 80019ca:	4b72      	ldr	r3, [pc, #456]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a71      	ldr	r2, [pc, #452]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a6e      	ldr	r2, [pc, #440]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 80019e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b68      	ldr	r3, [pc, #416]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a67      	ldr	r2, [pc, #412]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fad0 	bl	8000fa8 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff facc 	bl	8000fa8 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	@ 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e200      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xe4>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fabc 	bl	8000fa8 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fab8 	bl	8000fa8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	@ 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1ec      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	4b53      	ldr	r3, [pc, #332]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x10c>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d063      	beq.n	8001b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a62:	4b4c      	ldr	r3, [pc, #304]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a6e:	4b49      	ldr	r3, [pc, #292]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d11c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x18c>
 8001a7a:	4b46      	ldr	r3, [pc, #280]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	4b43      	ldr	r3, [pc, #268]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x176>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e1c0      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4939      	ldr	r1, [pc, #228]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	e03a      	b.n	8001b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abc:	4b36      	ldr	r3, [pc, #216]	@ (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fa71 	bl	8000fa8 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff fa6d 	bl	8000fa8 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e1a1      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	4b2d      	ldr	r3, [pc, #180]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4927      	ldr	r1, [pc, #156]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]
 8001afc:	e015      	b.n	8001b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b26      	ldr	r3, [pc, #152]	@ (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fa50 	bl	8000fa8 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fa4c 	bl	8000fa8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e180      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d03a      	beq.n	8001bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d019      	beq.n	8001b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b44:	f7ff fa30 	bl	8000fa8 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fa2c 	bl	8000fa8 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e160      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f000 face 	bl	800210c <RCC_Delay>
 8001b70:	e01c      	b.n	8001bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7ff fa16 	bl	8000fa8 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7e:	e00f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff fa12 	bl	8000fa8 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d908      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e146      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	42420000 	.word	0x42420000
 8001b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	4b92      	ldr	r3, [pc, #584]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e9      	bne.n	8001b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80a6 	beq.w	8001d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bbe:	4b8b      	ldr	r3, [pc, #556]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10d      	bne.n	8001be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b88      	ldr	r3, [pc, #544]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a87      	ldr	r2, [pc, #540]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]
 8001bd6:	4b85      	ldr	r3, [pc, #532]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	4b82      	ldr	r3, [pc, #520]	@ (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d118      	bne.n	8001c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff f9d3 	bl	8000fa8 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7ff f9cf 	bl	8000fa8 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b64      	cmp	r3, #100	@ 0x64
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e103      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4b75      	ldr	r3, [pc, #468]	@ (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x312>
 8001c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4a6e      	ldr	r2, [pc, #440]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6213      	str	r3, [r2, #32]
 8001c38:	e02d      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x334>
 8001c42:	4b6a      	ldr	r3, [pc, #424]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a69      	ldr	r2, [pc, #420]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6213      	str	r3, [r2, #32]
 8001c4e:	4b67      	ldr	r3, [pc, #412]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a66      	ldr	r2, [pc, #408]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	e01c      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x356>
 8001c64:	4b61      	ldr	r3, [pc, #388]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4a60      	ldr	r2, [pc, #384]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	4b5e      	ldr	r3, [pc, #376]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4a5d      	ldr	r2, [pc, #372]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6213      	str	r3, [r2, #32]
 8001c7c:	e00b      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a5a      	ldr	r2, [pc, #360]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	4b58      	ldr	r3, [pc, #352]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a57      	ldr	r2, [pc, #348]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d015      	beq.n	8001cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f983 	bl	8000fa8 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7ff f97f 	bl	8000fa8 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0b1      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ee      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x37e>
 8001cc8:	e014      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7ff f96d 	bl	8000fa8 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7ff f969 	bl	8000fa8 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e09b      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	4b40      	ldr	r3, [pc, #256]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a3b      	ldr	r2, [pc, #236]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8087 	beq.w	8001e1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d10:	4b36      	ldr	r3, [pc, #216]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d061      	beq.n	8001de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d146      	bne.n	8001db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b33      	ldr	r3, [pc, #204]	@ (8001df4 <HAL_RCC_OscConfig+0x4cc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff f93d 	bl	8000fa8 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7ff f939 	bl	8000fa8 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e06d      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d44:	4b29      	ldr	r3, [pc, #164]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d58:	d108      	bne.n	8001d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d5a:	4b24      	ldr	r3, [pc, #144]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4921      	ldr	r1, [pc, #132]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a19      	ldr	r1, [r3, #32]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	491b      	ldr	r1, [pc, #108]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7ff f90d 	bl	8000fa8 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7ff f909 	bl	8000fa8 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e03d      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x46a>
 8001db0:	e035      	b.n	8001e1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <HAL_RCC_OscConfig+0x4cc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff f8f6 	bl	8000fa8 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff f8f2 	bl	8000fa8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e026      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd2:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x498>
 8001dde:	e01e      	b.n	8001e1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e019      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
 8001df4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <HAL_RCC_OscConfig+0x500>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0d0      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e40:	4b6a      	ldr	r3, [pc, #424]	@ (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d910      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b67      	ldr	r3, [pc, #412]	@ (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 0207 	bic.w	r2, r3, #7
 8001e56:	4965      	ldr	r1, [pc, #404]	@ (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b63      	ldr	r3, [pc, #396]	@ (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0b8      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e88:	4b59      	ldr	r3, [pc, #356]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a58      	ldr	r2, [pc, #352]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea0:	4b53      	ldr	r3, [pc, #332]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a52      	ldr	r2, [pc, #328]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001eaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b50      	ldr	r3, [pc, #320]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	494d      	ldr	r1, [pc, #308]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d040      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b47      	ldr	r3, [pc, #284]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d115      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	4b41      	ldr	r3, [pc, #260]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e073      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06b      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0a:	4b39      	ldr	r3, [pc, #228]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f023 0203 	bic.w	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4936      	ldr	r1, [pc, #216]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f1c:	f7ff f844 	bl	8000fa8 <HAL_GetTick>
 8001f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f24:	f7ff f840 	bl	8000fa8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e053      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 020c 	and.w	r2, r3, #12
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d1eb      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b27      	ldr	r3, [pc, #156]	@ (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d210      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b24      	ldr	r3, [pc, #144]	@ (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 0207 	bic.w	r2, r3, #7
 8001f62:	4922      	ldr	r1, [pc, #136]	@ (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e032      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4916      	ldr	r1, [pc, #88]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fa6:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	490e      	ldr	r1, [pc, #56]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fba:	f000 f821 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	490a      	ldr	r1, [pc, #40]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	5ccb      	ldrb	r3, [r1, r3]
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	4a09      	ldr	r2, [pc, #36]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <HAL_RCC_ClockConfig+0x1d0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe ffa2 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40022000 	.word	0x40022000
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	0800399c 	.word	0x0800399c
 8001ff8:	20000004 	.word	0x20000004
 8001ffc:	20000008 	.word	0x20000008

08002000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800201a:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x94>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d002      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x30>
 800202a:	2b08      	cmp	r3, #8
 800202c:	d003      	beq.n	8002036 <HAL_RCC_GetSysClockFreq+0x36>
 800202e:	e027      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002030:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x98>)
 8002032:	613b      	str	r3, [r7, #16]
      break;
 8002034:	e027      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	0c9b      	lsrs	r3, r3, #18
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	4a17      	ldr	r2, [pc, #92]	@ (800209c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d010      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x94>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0c5b      	lsrs	r3, r3, #17
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	4a11      	ldr	r2, [pc, #68]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a0d      	ldr	r2, [pc, #52]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x98>)
 8002062:	fb03 f202 	mul.w	r2, r3, r2
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e004      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a0c      	ldr	r2, [pc, #48]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	613b      	str	r3, [r7, #16]
      break;
 800207e:	e002      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x98>)
 8002082:	613b      	str	r3, [r7, #16]
      break;
 8002084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002086:	693b      	ldr	r3, [r7, #16]
}
 8002088:	4618      	mov	r0, r3
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	007a1200 	.word	0x007a1200
 800209c:	080039b4 	.word	0x080039b4
 80020a0:	080039c4 	.word	0x080039c4
 80020a4:	003d0900 	.word	0x003d0900

080020a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ac:	4b02      	ldr	r3, [pc, #8]	@ (80020b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020c0:	f7ff fff2 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b05      	ldr	r3, [pc, #20]	@ (80020dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	4903      	ldr	r1, [pc, #12]	@ (80020e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	080039ac 	.word	0x080039ac

080020e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020e8:	f7ff ffde 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	0adb      	lsrs	r3, r3, #11
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4903      	ldr	r1, [pc, #12]	@ (8002108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	080039ac 	.word	0x080039ac

0800210c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002114:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <RCC_Delay+0x34>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <RCC_Delay+0x38>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0a5b      	lsrs	r3, r3, #9
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002128:	bf00      	nop
  }
  while (Delay --);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e5a      	subs	r2, r3, #1
 800212e:	60fa      	str	r2, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f9      	bne.n	8002128 <RCC_Delay+0x1c>
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000004 	.word	0x20000004
 8002144:	10624dd3 	.word	0x10624dd3

08002148 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d07d      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002168:	4b4f      	ldr	r3, [pc, #316]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10d      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002174:	4b4c      	ldr	r3, [pc, #304]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	4a4b      	ldr	r2, [pc, #300]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217e:	61d3      	str	r3, [r2, #28]
 8002180:	4b49      	ldr	r3, [pc, #292]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218c:	2301      	movs	r3, #1
 800218e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	4b46      	ldr	r3, [pc, #280]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d118      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800219c:	4b43      	ldr	r3, [pc, #268]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a42      	ldr	r2, [pc, #264]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a8:	f7fe fefe 	bl	8000fa8 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ae:	e008      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b0:	f7fe fefa 	bl	8000fa8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	@ 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e06d      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	4b3a      	ldr	r3, [pc, #232]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021ce:	4b36      	ldr	r3, [pc, #216]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d02e      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d027      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021ec:	4b2e      	ldr	r3, [pc, #184]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021f6:	4b2e      	ldr	r3, [pc, #184]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021fc:	4b2c      	ldr	r3, [pc, #176]	@ (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002202:	4a29      	ldr	r2, [pc, #164]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d014      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe fec9 	bl	8000fa8 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7fe fec5 	bl	8000fa8 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e036      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	4b1d      	ldr	r3, [pc, #116]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ee      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4917      	ldr	r1, [pc, #92]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224a:	4313      	orrs	r3, r2
 800224c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800224e:	7dfb      	ldrb	r3, [r7, #23]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d105      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002254:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	4a13      	ldr	r2, [pc, #76]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800225e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800226c:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	490b      	ldr	r1, [pc, #44]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d008      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800228a:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	4904      	ldr	r1, [pc, #16]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40007000 	.word	0x40007000
 80022b0:	42420440 	.word	0x42420440

080022b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e041      	b.n	800234a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fd1e 	bl	8000d1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3304      	adds	r3, #4
 80022f0:	4619      	mov	r1, r3
 80022f2:	4610      	mov	r0, r2
 80022f4:	f000 f992 	bl	800261c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_TIM_PWM_Start+0x24>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b01      	cmp	r3, #1
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	e022      	b.n	80023be <HAL_TIM_PWM_Start+0x6a>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b04      	cmp	r3, #4
 800237c:	d109      	bne.n	8002392 <HAL_TIM_PWM_Start+0x3e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	bf14      	ite	ne
 800238a:	2301      	movne	r3, #1
 800238c:	2300      	moveq	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	e015      	b.n	80023be <HAL_TIM_PWM_Start+0x6a>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d109      	bne.n	80023ac <HAL_TIM_PWM_Start+0x58>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	bf14      	ite	ne
 80023a4:	2301      	movne	r3, #1
 80023a6:	2300      	moveq	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e008      	b.n	80023be <HAL_TIM_PWM_Start+0x6a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e05e      	b.n	8002484 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d104      	bne.n	80023d6 <HAL_TIM_PWM_Start+0x82>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023d4:	e013      	b.n	80023fe <HAL_TIM_PWM_Start+0xaa>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d104      	bne.n	80023e6 <HAL_TIM_PWM_Start+0x92>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023e4:	e00b      	b.n	80023fe <HAL_TIM_PWM_Start+0xaa>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d104      	bne.n	80023f6 <HAL_TIM_PWM_Start+0xa2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023f4:	e003      	b.n	80023fe <HAL_TIM_PWM_Start+0xaa>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2201      	movs	r2, #1
 8002404:	6839      	ldr	r1, [r7, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f000 fafe 	bl	8002a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1e      	ldr	r2, [pc, #120]	@ (800248c <HAL_TIM_PWM_Start+0x138>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d107      	bne.n	8002426 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002424:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a18      	ldr	r2, [pc, #96]	@ (800248c <HAL_TIM_PWM_Start+0x138>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00e      	beq.n	800244e <HAL_TIM_PWM_Start+0xfa>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002438:	d009      	beq.n	800244e <HAL_TIM_PWM_Start+0xfa>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a14      	ldr	r2, [pc, #80]	@ (8002490 <HAL_TIM_PWM_Start+0x13c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d004      	beq.n	800244e <HAL_TIM_PWM_Start+0xfa>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a12      	ldr	r2, [pc, #72]	@ (8002494 <HAL_TIM_PWM_Start+0x140>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d111      	bne.n	8002472 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b06      	cmp	r3, #6
 800245e:	d010      	beq.n	8002482 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0201 	orr.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002470:	e007      	b.n	8002482 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0201 	orr.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40012c00 	.word	0x40012c00
 8002490:	40000400 	.word	0x40000400
 8002494:	40000800 	.word	0x40000800

08002498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e0ae      	b.n	8002614 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	f200 809f 	bhi.w	8002604 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80024c6:	a201      	add	r2, pc, #4	@ (adr r2, 80024cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	08002501 	.word	0x08002501
 80024d0:	08002605 	.word	0x08002605
 80024d4:	08002605 	.word	0x08002605
 80024d8:	08002605 	.word	0x08002605
 80024dc:	08002541 	.word	0x08002541
 80024e0:	08002605 	.word	0x08002605
 80024e4:	08002605 	.word	0x08002605
 80024e8:	08002605 	.word	0x08002605
 80024ec:	08002583 	.word	0x08002583
 80024f0:	08002605 	.word	0x08002605
 80024f4:	08002605 	.word	0x08002605
 80024f8:	08002605 	.word	0x08002605
 80024fc:	080025c3 	.word	0x080025c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f8f6 	bl	80026f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0208 	orr.w	r2, r2, #8
 800251a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0204 	bic.w	r2, r2, #4
 800252a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6999      	ldr	r1, [r3, #24]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	619a      	str	r2, [r3, #24]
      break;
 800253e:	e064      	b.n	800260a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68b9      	ldr	r1, [r7, #8]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f93c 	bl	80027c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800255a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800256a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6999      	ldr	r1, [r3, #24]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	021a      	lsls	r2, r3, #8
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	619a      	str	r2, [r3, #24]
      break;
 8002580:	e043      	b.n	800260a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	4618      	mov	r0, r3
 800258a:	f000 f985 	bl	8002898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0208 	orr.w	r2, r2, #8
 800259c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0204 	bic.w	r2, r2, #4
 80025ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	69d9      	ldr	r1, [r3, #28]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	61da      	str	r2, [r3, #28]
      break;
 80025c0:	e023      	b.n	800260a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 f9cf 	bl	800296c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69d9      	ldr	r1, [r3, #28]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	021a      	lsls	r2, r3, #8
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	61da      	str	r2, [r3, #28]
      break;
 8002602:	e002      	b.n	800260a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	75fb      	strb	r3, [r7, #23]
      break;
 8002608:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002612:	7dfb      	ldrb	r3, [r7, #23]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a2f      	ldr	r2, [pc, #188]	@ (80026ec <TIM_Base_SetConfig+0xd0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00b      	beq.n	800264c <TIM_Base_SetConfig+0x30>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800263a:	d007      	beq.n	800264c <TIM_Base_SetConfig+0x30>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a2c      	ldr	r2, [pc, #176]	@ (80026f0 <TIM_Base_SetConfig+0xd4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d003      	beq.n	800264c <TIM_Base_SetConfig+0x30>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a2b      	ldr	r2, [pc, #172]	@ (80026f4 <TIM_Base_SetConfig+0xd8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d108      	bne.n	800265e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a22      	ldr	r2, [pc, #136]	@ (80026ec <TIM_Base_SetConfig+0xd0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00b      	beq.n	800267e <TIM_Base_SetConfig+0x62>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800266c:	d007      	beq.n	800267e <TIM_Base_SetConfig+0x62>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a1f      	ldr	r2, [pc, #124]	@ (80026f0 <TIM_Base_SetConfig+0xd4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <TIM_Base_SetConfig+0x62>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a1e      	ldr	r2, [pc, #120]	@ (80026f4 <TIM_Base_SetConfig+0xd8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d108      	bne.n	8002690 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a0d      	ldr	r2, [pc, #52]	@ (80026ec <TIM_Base_SetConfig+0xd0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d103      	bne.n	80026c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f023 0201 	bic.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	611a      	str	r2, [r3, #16]
  }
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr
 80026ec:	40012c00 	.word	0x40012c00
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40000800 	.word	0x40000800

080026f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f023 0201 	bic.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 0302 	bic.w	r3, r3, #2
 8002740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <TIM_OC1_SetConfig+0xc8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d10c      	bne.n	800276e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f023 0308 	bic.w	r3, r3, #8
 800275a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a13      	ldr	r2, [pc, #76]	@ (80027c0 <TIM_OC1_SetConfig+0xc8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d111      	bne.n	800279a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800277c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	621a      	str	r2, [r3, #32]
}
 80027b4:	bf00      	nop
 80027b6:	371c      	adds	r7, #28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40012c00 	.word	0x40012c00

080027c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f023 0210 	bic.w	r2, r3, #16
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f023 0320 	bic.w	r3, r3, #32
 800280e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a1d      	ldr	r2, [pc, #116]	@ (8002894 <TIM_OC2_SetConfig+0xd0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10d      	bne.n	8002840 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800282a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800283e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a14      	ldr	r2, [pc, #80]	@ (8002894 <TIM_OC2_SetConfig+0xd0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d113      	bne.n	8002870 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800284e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	621a      	str	r2, [r3, #32]
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	40012c00 	.word	0x40012c00

08002898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0303 	bic.w	r3, r3, #3
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002968 <TIM_OC3_SetConfig+0xd0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10d      	bne.n	8002912 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a14      	ldr	r2, [pc, #80]	@ (8002968 <TIM_OC3_SetConfig+0xd0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d113      	bne.n	8002942 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	621a      	str	r2, [r3, #32]
}
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40012c00 	.word	0x40012c00

0800296c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800299a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	031b      	lsls	r3, r3, #12
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002a04 <TIM_OC4_SetConfig+0x98>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d109      	bne.n	80029e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	019b      	lsls	r3, r3, #6
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	621a      	str	r2, [r3, #32]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	40012c00 	.word	0x40012c00

08002a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a1a      	ldr	r2, [r3, #32]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a1a      	ldr	r2, [r3, #32]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	431a      	orrs	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e046      	b.n	8002af6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a16      	ldr	r2, [pc, #88]	@ (8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00e      	beq.n	8002aca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ab4:	d009      	beq.n	8002aca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a12      	ldr	r2, [pc, #72]	@ (8002b04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a10      	ldr	r2, [pc, #64]	@ (8002b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ad0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40000400 	.word	0x40000400
 8002b08:	40000800 	.word	0x40000800

08002b0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e03d      	b.n	8002ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e042      	b.n	8002c46 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d106      	bne.n	8002bda <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7fe f91d 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2224      	movs	r2, #36	@ 0x24
 8002bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bf0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f972 	bl	8002edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c06:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c16:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c26:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b08a      	sub	sp, #40	@ 0x28
 8002c52:	af02      	add	r7, sp, #8
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d175      	bne.n	8002d5a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <HAL_UART_Transmit+0x2c>
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e06e      	b.n	8002d5c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2221      	movs	r2, #33	@ 0x21
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c8c:	f7fe f98c 	bl	8000fa8 <HAL_GetTick>
 8002c90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	88fa      	ldrh	r2, [r7, #6]
 8002c96:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	88fa      	ldrh	r2, [r7, #6]
 8002c9c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ca6:	d108      	bne.n	8002cba <HAL_UART_Transmit+0x6c>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d104      	bne.n	8002cba <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	e003      	b.n	8002cc2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cc2:	e02e      	b.n	8002d22 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2180      	movs	r1, #128	@ 0x80
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f848 	bl	8002d64 <UART_WaitOnFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d005      	beq.n	8002ce6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e03a      	b.n	8002d5c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cfa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	3302      	adds	r3, #2
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	e007      	b.n	8002d14 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1cb      	bne.n	8002cc4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2140      	movs	r1, #64	@ 0x40
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f814 	bl	8002d64 <UART_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e006      	b.n	8002d5c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e000      	b.n	8002d5c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d5a:	2302      	movs	r3, #2
  }
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d74:	e03b      	b.n	8002dee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d7c:	d037      	beq.n	8002dee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7fe f913 	bl	8000fa8 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	6a3a      	ldr	r2, [r7, #32]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e03a      	b.n	8002e0e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d023      	beq.n	8002dee <UART_WaitOnFlagUntilTimeout+0x8a>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b80      	cmp	r3, #128	@ 0x80
 8002daa:	d020      	beq.n	8002dee <UART_WaitOnFlagUntilTimeout+0x8a>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b40      	cmp	r3, #64	@ 0x40
 8002db0:	d01d      	beq.n	8002dee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d116      	bne.n	8002dee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f81d 	bl	8002e16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2208      	movs	r2, #8
 8002de0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00f      	b.n	8002e0e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4013      	ands	r3, r2
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2301      	moveq	r3, #1
 8002e00:	2300      	movne	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d0b4      	beq.n	8002d76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b095      	sub	sp, #84	@ 0x54
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	330c      	adds	r3, #12
 8002e24:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e28:	e853 3f00 	ldrex	r3, [r3]
 8002e2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e5      	bne.n	8002e1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3314      	adds	r3, #20
 8002e58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3314      	adds	r3, #20
 8002e70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e5      	bne.n	8002e52 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d119      	bne.n	8002ec2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	330c      	adds	r3, #12
 8002e94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	e853 3f00 	ldrex	r3, [r3]
 8002e9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f023 0310 	bic.w	r3, r3, #16
 8002ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	330c      	adds	r3, #12
 8002eac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002eae:	61ba      	str	r2, [r7, #24]
 8002eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb2:	6979      	ldr	r1, [r7, #20]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	e841 2300 	strex	r3, r2, [r1]
 8002eba:	613b      	str	r3, [r7, #16]
   return(result);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1e5      	bne.n	8002e8e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ed0:	bf00      	nop
 8002ed2:	3754      	adds	r7, #84	@ 0x54
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
	...

08002edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002f16:	f023 030c 	bic.w	r3, r3, #12
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699a      	ldr	r2, [r3, #24]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ff0 <UART_SetConfig+0x114>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d103      	bne.n	8002f4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f44:	f7ff f8ce 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	e002      	b.n	8002f52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f4c:	f7ff f8b6 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
 8002f50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	009a      	lsls	r2, r3, #2
 8002f5c:	441a      	add	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	4a22      	ldr	r2, [pc, #136]	@ (8002ff4 <UART_SetConfig+0x118>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	0119      	lsls	r1, r3, #4
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009a      	lsls	r2, r3, #2
 8002f7c:	441a      	add	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f88:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff4 <UART_SetConfig+0x118>)
 8002f8a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2064      	movs	r0, #100	@ 0x64
 8002f92:	fb00 f303 	mul.w	r3, r0, r3
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	3332      	adds	r3, #50	@ 0x32
 8002f9c:	4a15      	ldr	r2, [pc, #84]	@ (8002ff4 <UART_SetConfig+0x118>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fa8:	4419      	add	r1, r3
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009a      	lsls	r2, r3, #2
 8002fb4:	441a      	add	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff4 <UART_SetConfig+0x118>)
 8002fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2064      	movs	r0, #100	@ 0x64
 8002fca:	fb00 f303 	mul.w	r3, r0, r3
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	3332      	adds	r3, #50	@ 0x32
 8002fd4:	4a07      	ldr	r2, [pc, #28]	@ (8002ff4 <UART_SetConfig+0x118>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	440a      	add	r2, r1
 8002fe6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40013800 	.word	0x40013800
 8002ff4:	51eb851f 	.word	0x51eb851f

08002ff8 <siprintf>:
 8002ff8:	b40e      	push	{r1, r2, r3}
 8002ffa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002ffe:	b500      	push	{lr}
 8003000:	b09c      	sub	sp, #112	@ 0x70
 8003002:	ab1d      	add	r3, sp, #116	@ 0x74
 8003004:	9002      	str	r0, [sp, #8]
 8003006:	9006      	str	r0, [sp, #24]
 8003008:	9107      	str	r1, [sp, #28]
 800300a:	9104      	str	r1, [sp, #16]
 800300c:	4808      	ldr	r0, [pc, #32]	@ (8003030 <siprintf+0x38>)
 800300e:	4909      	ldr	r1, [pc, #36]	@ (8003034 <siprintf+0x3c>)
 8003010:	f853 2b04 	ldr.w	r2, [r3], #4
 8003014:	9105      	str	r1, [sp, #20]
 8003016:	6800      	ldr	r0, [r0, #0]
 8003018:	a902      	add	r1, sp, #8
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	f000 f89c 	bl	8003158 <_svfiprintf_r>
 8003020:	2200      	movs	r2, #0
 8003022:	9b02      	ldr	r3, [sp, #8]
 8003024:	701a      	strb	r2, [r3, #0]
 8003026:	b01c      	add	sp, #112	@ 0x70
 8003028:	f85d eb04 	ldr.w	lr, [sp], #4
 800302c:	b003      	add	sp, #12
 800302e:	4770      	bx	lr
 8003030:	20000010 	.word	0x20000010
 8003034:	ffff0208 	.word	0xffff0208

08003038 <memset>:
 8003038:	4603      	mov	r3, r0
 800303a:	4402      	add	r2, r0
 800303c:	4293      	cmp	r3, r2
 800303e:	d100      	bne.n	8003042 <memset+0xa>
 8003040:	4770      	bx	lr
 8003042:	f803 1b01 	strb.w	r1, [r3], #1
 8003046:	e7f9      	b.n	800303c <memset+0x4>

08003048 <__errno>:
 8003048:	4b01      	ldr	r3, [pc, #4]	@ (8003050 <__errno+0x8>)
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000010 	.word	0x20000010

08003054 <__libc_init_array>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	2600      	movs	r6, #0
 8003058:	4d0c      	ldr	r5, [pc, #48]	@ (800308c <__libc_init_array+0x38>)
 800305a:	4c0d      	ldr	r4, [pc, #52]	@ (8003090 <__libc_init_array+0x3c>)
 800305c:	1b64      	subs	r4, r4, r5
 800305e:	10a4      	asrs	r4, r4, #2
 8003060:	42a6      	cmp	r6, r4
 8003062:	d109      	bne.n	8003078 <__libc_init_array+0x24>
 8003064:	f000 fc78 	bl	8003958 <_init>
 8003068:	2600      	movs	r6, #0
 800306a:	4d0a      	ldr	r5, [pc, #40]	@ (8003094 <__libc_init_array+0x40>)
 800306c:	4c0a      	ldr	r4, [pc, #40]	@ (8003098 <__libc_init_array+0x44>)
 800306e:	1b64      	subs	r4, r4, r5
 8003070:	10a4      	asrs	r4, r4, #2
 8003072:	42a6      	cmp	r6, r4
 8003074:	d105      	bne.n	8003082 <__libc_init_array+0x2e>
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	f855 3b04 	ldr.w	r3, [r5], #4
 800307c:	4798      	blx	r3
 800307e:	3601      	adds	r6, #1
 8003080:	e7ee      	b.n	8003060 <__libc_init_array+0xc>
 8003082:	f855 3b04 	ldr.w	r3, [r5], #4
 8003086:	4798      	blx	r3
 8003088:	3601      	adds	r6, #1
 800308a:	e7f2      	b.n	8003072 <__libc_init_array+0x1e>
 800308c:	08003a04 	.word	0x08003a04
 8003090:	08003a04 	.word	0x08003a04
 8003094:	08003a04 	.word	0x08003a04
 8003098:	08003a08 	.word	0x08003a08

0800309c <__retarget_lock_acquire_recursive>:
 800309c:	4770      	bx	lr

0800309e <__retarget_lock_release_recursive>:
 800309e:	4770      	bx	lr

080030a0 <__ssputs_r>:
 80030a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a4:	461f      	mov	r7, r3
 80030a6:	688e      	ldr	r6, [r1, #8]
 80030a8:	4682      	mov	sl, r0
 80030aa:	42be      	cmp	r6, r7
 80030ac:	460c      	mov	r4, r1
 80030ae:	4690      	mov	r8, r2
 80030b0:	680b      	ldr	r3, [r1, #0]
 80030b2:	d82d      	bhi.n	8003110 <__ssputs_r+0x70>
 80030b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80030b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80030bc:	d026      	beq.n	800310c <__ssputs_r+0x6c>
 80030be:	6965      	ldr	r5, [r4, #20]
 80030c0:	6909      	ldr	r1, [r1, #16]
 80030c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030c6:	eba3 0901 	sub.w	r9, r3, r1
 80030ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030ce:	1c7b      	adds	r3, r7, #1
 80030d0:	444b      	add	r3, r9
 80030d2:	106d      	asrs	r5, r5, #1
 80030d4:	429d      	cmp	r5, r3
 80030d6:	bf38      	it	cc
 80030d8:	461d      	movcc	r5, r3
 80030da:	0553      	lsls	r3, r2, #21
 80030dc:	d527      	bpl.n	800312e <__ssputs_r+0x8e>
 80030de:	4629      	mov	r1, r5
 80030e0:	f000 f958 	bl	8003394 <_malloc_r>
 80030e4:	4606      	mov	r6, r0
 80030e6:	b360      	cbz	r0, 8003142 <__ssputs_r+0xa2>
 80030e8:	464a      	mov	r2, r9
 80030ea:	6921      	ldr	r1, [r4, #16]
 80030ec:	f000 fbd6 	bl	800389c <memcpy>
 80030f0:	89a3      	ldrh	r3, [r4, #12]
 80030f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80030f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030fa:	81a3      	strh	r3, [r4, #12]
 80030fc:	6126      	str	r6, [r4, #16]
 80030fe:	444e      	add	r6, r9
 8003100:	6026      	str	r6, [r4, #0]
 8003102:	463e      	mov	r6, r7
 8003104:	6165      	str	r5, [r4, #20]
 8003106:	eba5 0509 	sub.w	r5, r5, r9
 800310a:	60a5      	str	r5, [r4, #8]
 800310c:	42be      	cmp	r6, r7
 800310e:	d900      	bls.n	8003112 <__ssputs_r+0x72>
 8003110:	463e      	mov	r6, r7
 8003112:	4632      	mov	r2, r6
 8003114:	4641      	mov	r1, r8
 8003116:	6820      	ldr	r0, [r4, #0]
 8003118:	f000 fb88 	bl	800382c <memmove>
 800311c:	2000      	movs	r0, #0
 800311e:	68a3      	ldr	r3, [r4, #8]
 8003120:	1b9b      	subs	r3, r3, r6
 8003122:	60a3      	str	r3, [r4, #8]
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	4433      	add	r3, r6
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800312e:	462a      	mov	r2, r5
 8003130:	f000 fb4e 	bl	80037d0 <_realloc_r>
 8003134:	4606      	mov	r6, r0
 8003136:	2800      	cmp	r0, #0
 8003138:	d1e0      	bne.n	80030fc <__ssputs_r+0x5c>
 800313a:	4650      	mov	r0, sl
 800313c:	6921      	ldr	r1, [r4, #16]
 800313e:	f000 fbbb 	bl	80038b8 <_free_r>
 8003142:	230c      	movs	r3, #12
 8003144:	f8ca 3000 	str.w	r3, [sl]
 8003148:	89a3      	ldrh	r3, [r4, #12]
 800314a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800314e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003152:	81a3      	strh	r3, [r4, #12]
 8003154:	e7e9      	b.n	800312a <__ssputs_r+0x8a>
	...

08003158 <_svfiprintf_r>:
 8003158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315c:	4698      	mov	r8, r3
 800315e:	898b      	ldrh	r3, [r1, #12]
 8003160:	4607      	mov	r7, r0
 8003162:	061b      	lsls	r3, r3, #24
 8003164:	460d      	mov	r5, r1
 8003166:	4614      	mov	r4, r2
 8003168:	b09d      	sub	sp, #116	@ 0x74
 800316a:	d510      	bpl.n	800318e <_svfiprintf_r+0x36>
 800316c:	690b      	ldr	r3, [r1, #16]
 800316e:	b973      	cbnz	r3, 800318e <_svfiprintf_r+0x36>
 8003170:	2140      	movs	r1, #64	@ 0x40
 8003172:	f000 f90f 	bl	8003394 <_malloc_r>
 8003176:	6028      	str	r0, [r5, #0]
 8003178:	6128      	str	r0, [r5, #16]
 800317a:	b930      	cbnz	r0, 800318a <_svfiprintf_r+0x32>
 800317c:	230c      	movs	r3, #12
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003184:	b01d      	add	sp, #116	@ 0x74
 8003186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800318a:	2340      	movs	r3, #64	@ 0x40
 800318c:	616b      	str	r3, [r5, #20]
 800318e:	2300      	movs	r3, #0
 8003190:	9309      	str	r3, [sp, #36]	@ 0x24
 8003192:	2320      	movs	r3, #32
 8003194:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003198:	2330      	movs	r3, #48	@ 0x30
 800319a:	f04f 0901 	mov.w	r9, #1
 800319e:	f8cd 800c 	str.w	r8, [sp, #12]
 80031a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800333c <_svfiprintf_r+0x1e4>
 80031a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031aa:	4623      	mov	r3, r4
 80031ac:	469a      	mov	sl, r3
 80031ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031b2:	b10a      	cbz	r2, 80031b8 <_svfiprintf_r+0x60>
 80031b4:	2a25      	cmp	r2, #37	@ 0x25
 80031b6:	d1f9      	bne.n	80031ac <_svfiprintf_r+0x54>
 80031b8:	ebba 0b04 	subs.w	fp, sl, r4
 80031bc:	d00b      	beq.n	80031d6 <_svfiprintf_r+0x7e>
 80031be:	465b      	mov	r3, fp
 80031c0:	4622      	mov	r2, r4
 80031c2:	4629      	mov	r1, r5
 80031c4:	4638      	mov	r0, r7
 80031c6:	f7ff ff6b 	bl	80030a0 <__ssputs_r>
 80031ca:	3001      	adds	r0, #1
 80031cc:	f000 80a7 	beq.w	800331e <_svfiprintf_r+0x1c6>
 80031d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031d2:	445a      	add	r2, fp
 80031d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80031d6:	f89a 3000 	ldrb.w	r3, [sl]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 809f 	beq.w	800331e <_svfiprintf_r+0x1c6>
 80031e0:	2300      	movs	r3, #0
 80031e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031ea:	f10a 0a01 	add.w	sl, sl, #1
 80031ee:	9304      	str	r3, [sp, #16]
 80031f0:	9307      	str	r3, [sp, #28]
 80031f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80031f8:	4654      	mov	r4, sl
 80031fa:	2205      	movs	r2, #5
 80031fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003200:	484e      	ldr	r0, [pc, #312]	@ (800333c <_svfiprintf_r+0x1e4>)
 8003202:	f000 fb3d 	bl	8003880 <memchr>
 8003206:	9a04      	ldr	r2, [sp, #16]
 8003208:	b9d8      	cbnz	r0, 8003242 <_svfiprintf_r+0xea>
 800320a:	06d0      	lsls	r0, r2, #27
 800320c:	bf44      	itt	mi
 800320e:	2320      	movmi	r3, #32
 8003210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003214:	0711      	lsls	r1, r2, #28
 8003216:	bf44      	itt	mi
 8003218:	232b      	movmi	r3, #43	@ 0x2b
 800321a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800321e:	f89a 3000 	ldrb.w	r3, [sl]
 8003222:	2b2a      	cmp	r3, #42	@ 0x2a
 8003224:	d015      	beq.n	8003252 <_svfiprintf_r+0xfa>
 8003226:	4654      	mov	r4, sl
 8003228:	2000      	movs	r0, #0
 800322a:	f04f 0c0a 	mov.w	ip, #10
 800322e:	9a07      	ldr	r2, [sp, #28]
 8003230:	4621      	mov	r1, r4
 8003232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003236:	3b30      	subs	r3, #48	@ 0x30
 8003238:	2b09      	cmp	r3, #9
 800323a:	d94b      	bls.n	80032d4 <_svfiprintf_r+0x17c>
 800323c:	b1b0      	cbz	r0, 800326c <_svfiprintf_r+0x114>
 800323e:	9207      	str	r2, [sp, #28]
 8003240:	e014      	b.n	800326c <_svfiprintf_r+0x114>
 8003242:	eba0 0308 	sub.w	r3, r0, r8
 8003246:	fa09 f303 	lsl.w	r3, r9, r3
 800324a:	4313      	orrs	r3, r2
 800324c:	46a2      	mov	sl, r4
 800324e:	9304      	str	r3, [sp, #16]
 8003250:	e7d2      	b.n	80031f8 <_svfiprintf_r+0xa0>
 8003252:	9b03      	ldr	r3, [sp, #12]
 8003254:	1d19      	adds	r1, r3, #4
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	9103      	str	r1, [sp, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	bfbb      	ittet	lt
 800325e:	425b      	neglt	r3, r3
 8003260:	f042 0202 	orrlt.w	r2, r2, #2
 8003264:	9307      	strge	r3, [sp, #28]
 8003266:	9307      	strlt	r3, [sp, #28]
 8003268:	bfb8      	it	lt
 800326a:	9204      	strlt	r2, [sp, #16]
 800326c:	7823      	ldrb	r3, [r4, #0]
 800326e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003270:	d10a      	bne.n	8003288 <_svfiprintf_r+0x130>
 8003272:	7863      	ldrb	r3, [r4, #1]
 8003274:	2b2a      	cmp	r3, #42	@ 0x2a
 8003276:	d132      	bne.n	80032de <_svfiprintf_r+0x186>
 8003278:	9b03      	ldr	r3, [sp, #12]
 800327a:	3402      	adds	r4, #2
 800327c:	1d1a      	adds	r2, r3, #4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	9203      	str	r2, [sp, #12]
 8003282:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003286:	9305      	str	r3, [sp, #20]
 8003288:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003340 <_svfiprintf_r+0x1e8>
 800328c:	2203      	movs	r2, #3
 800328e:	4650      	mov	r0, sl
 8003290:	7821      	ldrb	r1, [r4, #0]
 8003292:	f000 faf5 	bl	8003880 <memchr>
 8003296:	b138      	cbz	r0, 80032a8 <_svfiprintf_r+0x150>
 8003298:	2240      	movs	r2, #64	@ 0x40
 800329a:	9b04      	ldr	r3, [sp, #16]
 800329c:	eba0 000a 	sub.w	r0, r0, sl
 80032a0:	4082      	lsls	r2, r0
 80032a2:	4313      	orrs	r3, r2
 80032a4:	3401      	adds	r4, #1
 80032a6:	9304      	str	r3, [sp, #16]
 80032a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ac:	2206      	movs	r2, #6
 80032ae:	4825      	ldr	r0, [pc, #148]	@ (8003344 <_svfiprintf_r+0x1ec>)
 80032b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032b4:	f000 fae4 	bl	8003880 <memchr>
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d036      	beq.n	800332a <_svfiprintf_r+0x1d2>
 80032bc:	4b22      	ldr	r3, [pc, #136]	@ (8003348 <_svfiprintf_r+0x1f0>)
 80032be:	bb1b      	cbnz	r3, 8003308 <_svfiprintf_r+0x1b0>
 80032c0:	9b03      	ldr	r3, [sp, #12]
 80032c2:	3307      	adds	r3, #7
 80032c4:	f023 0307 	bic.w	r3, r3, #7
 80032c8:	3308      	adds	r3, #8
 80032ca:	9303      	str	r3, [sp, #12]
 80032cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032ce:	4433      	add	r3, r6
 80032d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80032d2:	e76a      	b.n	80031aa <_svfiprintf_r+0x52>
 80032d4:	460c      	mov	r4, r1
 80032d6:	2001      	movs	r0, #1
 80032d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80032dc:	e7a8      	b.n	8003230 <_svfiprintf_r+0xd8>
 80032de:	2300      	movs	r3, #0
 80032e0:	f04f 0c0a 	mov.w	ip, #10
 80032e4:	4619      	mov	r1, r3
 80032e6:	3401      	adds	r4, #1
 80032e8:	9305      	str	r3, [sp, #20]
 80032ea:	4620      	mov	r0, r4
 80032ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032f0:	3a30      	subs	r2, #48	@ 0x30
 80032f2:	2a09      	cmp	r2, #9
 80032f4:	d903      	bls.n	80032fe <_svfiprintf_r+0x1a6>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0c6      	beq.n	8003288 <_svfiprintf_r+0x130>
 80032fa:	9105      	str	r1, [sp, #20]
 80032fc:	e7c4      	b.n	8003288 <_svfiprintf_r+0x130>
 80032fe:	4604      	mov	r4, r0
 8003300:	2301      	movs	r3, #1
 8003302:	fb0c 2101 	mla	r1, ip, r1, r2
 8003306:	e7f0      	b.n	80032ea <_svfiprintf_r+0x192>
 8003308:	ab03      	add	r3, sp, #12
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	462a      	mov	r2, r5
 800330e:	4638      	mov	r0, r7
 8003310:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <_svfiprintf_r+0x1f4>)
 8003312:	a904      	add	r1, sp, #16
 8003314:	f3af 8000 	nop.w
 8003318:	1c42      	adds	r2, r0, #1
 800331a:	4606      	mov	r6, r0
 800331c:	d1d6      	bne.n	80032cc <_svfiprintf_r+0x174>
 800331e:	89ab      	ldrh	r3, [r5, #12]
 8003320:	065b      	lsls	r3, r3, #25
 8003322:	f53f af2d 	bmi.w	8003180 <_svfiprintf_r+0x28>
 8003326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003328:	e72c      	b.n	8003184 <_svfiprintf_r+0x2c>
 800332a:	ab03      	add	r3, sp, #12
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	462a      	mov	r2, r5
 8003330:	4638      	mov	r0, r7
 8003332:	4b06      	ldr	r3, [pc, #24]	@ (800334c <_svfiprintf_r+0x1f4>)
 8003334:	a904      	add	r1, sp, #16
 8003336:	f000 f91f 	bl	8003578 <_printf_i>
 800333a:	e7ed      	b.n	8003318 <_svfiprintf_r+0x1c0>
 800333c:	080039c6 	.word	0x080039c6
 8003340:	080039cc 	.word	0x080039cc
 8003344:	080039d0 	.word	0x080039d0
 8003348:	00000000 	.word	0x00000000
 800334c:	080030a1 	.word	0x080030a1

08003350 <sbrk_aligned>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	4e0f      	ldr	r6, [pc, #60]	@ (8003390 <sbrk_aligned+0x40>)
 8003354:	460c      	mov	r4, r1
 8003356:	6831      	ldr	r1, [r6, #0]
 8003358:	4605      	mov	r5, r0
 800335a:	b911      	cbnz	r1, 8003362 <sbrk_aligned+0x12>
 800335c:	f000 fa80 	bl	8003860 <_sbrk_r>
 8003360:	6030      	str	r0, [r6, #0]
 8003362:	4621      	mov	r1, r4
 8003364:	4628      	mov	r0, r5
 8003366:	f000 fa7b 	bl	8003860 <_sbrk_r>
 800336a:	1c43      	adds	r3, r0, #1
 800336c:	d103      	bne.n	8003376 <sbrk_aligned+0x26>
 800336e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003372:	4620      	mov	r0, r4
 8003374:	bd70      	pop	{r4, r5, r6, pc}
 8003376:	1cc4      	adds	r4, r0, #3
 8003378:	f024 0403 	bic.w	r4, r4, #3
 800337c:	42a0      	cmp	r0, r4
 800337e:	d0f8      	beq.n	8003372 <sbrk_aligned+0x22>
 8003380:	1a21      	subs	r1, r4, r0
 8003382:	4628      	mov	r0, r5
 8003384:	f000 fa6c 	bl	8003860 <_sbrk_r>
 8003388:	3001      	adds	r0, #1
 800338a:	d1f2      	bne.n	8003372 <sbrk_aligned+0x22>
 800338c:	e7ef      	b.n	800336e <sbrk_aligned+0x1e>
 800338e:	bf00      	nop
 8003390:	20000290 	.word	0x20000290

08003394 <_malloc_r>:
 8003394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003398:	1ccd      	adds	r5, r1, #3
 800339a:	f025 0503 	bic.w	r5, r5, #3
 800339e:	3508      	adds	r5, #8
 80033a0:	2d0c      	cmp	r5, #12
 80033a2:	bf38      	it	cc
 80033a4:	250c      	movcc	r5, #12
 80033a6:	2d00      	cmp	r5, #0
 80033a8:	4606      	mov	r6, r0
 80033aa:	db01      	blt.n	80033b0 <_malloc_r+0x1c>
 80033ac:	42a9      	cmp	r1, r5
 80033ae:	d904      	bls.n	80033ba <_malloc_r+0x26>
 80033b0:	230c      	movs	r3, #12
 80033b2:	6033      	str	r3, [r6, #0]
 80033b4:	2000      	movs	r0, #0
 80033b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003490 <_malloc_r+0xfc>
 80033be:	f000 f9fb 	bl	80037b8 <__malloc_lock>
 80033c2:	f8d8 3000 	ldr.w	r3, [r8]
 80033c6:	461c      	mov	r4, r3
 80033c8:	bb44      	cbnz	r4, 800341c <_malloc_r+0x88>
 80033ca:	4629      	mov	r1, r5
 80033cc:	4630      	mov	r0, r6
 80033ce:	f7ff ffbf 	bl	8003350 <sbrk_aligned>
 80033d2:	1c43      	adds	r3, r0, #1
 80033d4:	4604      	mov	r4, r0
 80033d6:	d158      	bne.n	800348a <_malloc_r+0xf6>
 80033d8:	f8d8 4000 	ldr.w	r4, [r8]
 80033dc:	4627      	mov	r7, r4
 80033de:	2f00      	cmp	r7, #0
 80033e0:	d143      	bne.n	800346a <_malloc_r+0xd6>
 80033e2:	2c00      	cmp	r4, #0
 80033e4:	d04b      	beq.n	800347e <_malloc_r+0xea>
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	4639      	mov	r1, r7
 80033ea:	4630      	mov	r0, r6
 80033ec:	eb04 0903 	add.w	r9, r4, r3
 80033f0:	f000 fa36 	bl	8003860 <_sbrk_r>
 80033f4:	4581      	cmp	r9, r0
 80033f6:	d142      	bne.n	800347e <_malloc_r+0xea>
 80033f8:	6821      	ldr	r1, [r4, #0]
 80033fa:	4630      	mov	r0, r6
 80033fc:	1a6d      	subs	r5, r5, r1
 80033fe:	4629      	mov	r1, r5
 8003400:	f7ff ffa6 	bl	8003350 <sbrk_aligned>
 8003404:	3001      	adds	r0, #1
 8003406:	d03a      	beq.n	800347e <_malloc_r+0xea>
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	442b      	add	r3, r5
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	f8d8 3000 	ldr.w	r3, [r8]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	bb62      	cbnz	r2, 8003470 <_malloc_r+0xdc>
 8003416:	f8c8 7000 	str.w	r7, [r8]
 800341a:	e00f      	b.n	800343c <_malloc_r+0xa8>
 800341c:	6822      	ldr	r2, [r4, #0]
 800341e:	1b52      	subs	r2, r2, r5
 8003420:	d420      	bmi.n	8003464 <_malloc_r+0xd0>
 8003422:	2a0b      	cmp	r2, #11
 8003424:	d917      	bls.n	8003456 <_malloc_r+0xc2>
 8003426:	1961      	adds	r1, r4, r5
 8003428:	42a3      	cmp	r3, r4
 800342a:	6025      	str	r5, [r4, #0]
 800342c:	bf18      	it	ne
 800342e:	6059      	strne	r1, [r3, #4]
 8003430:	6863      	ldr	r3, [r4, #4]
 8003432:	bf08      	it	eq
 8003434:	f8c8 1000 	streq.w	r1, [r8]
 8003438:	5162      	str	r2, [r4, r5]
 800343a:	604b      	str	r3, [r1, #4]
 800343c:	4630      	mov	r0, r6
 800343e:	f000 f9c1 	bl	80037c4 <__malloc_unlock>
 8003442:	f104 000b 	add.w	r0, r4, #11
 8003446:	1d23      	adds	r3, r4, #4
 8003448:	f020 0007 	bic.w	r0, r0, #7
 800344c:	1ac2      	subs	r2, r0, r3
 800344e:	bf1c      	itt	ne
 8003450:	1a1b      	subne	r3, r3, r0
 8003452:	50a3      	strne	r3, [r4, r2]
 8003454:	e7af      	b.n	80033b6 <_malloc_r+0x22>
 8003456:	6862      	ldr	r2, [r4, #4]
 8003458:	42a3      	cmp	r3, r4
 800345a:	bf0c      	ite	eq
 800345c:	f8c8 2000 	streq.w	r2, [r8]
 8003460:	605a      	strne	r2, [r3, #4]
 8003462:	e7eb      	b.n	800343c <_malloc_r+0xa8>
 8003464:	4623      	mov	r3, r4
 8003466:	6864      	ldr	r4, [r4, #4]
 8003468:	e7ae      	b.n	80033c8 <_malloc_r+0x34>
 800346a:	463c      	mov	r4, r7
 800346c:	687f      	ldr	r7, [r7, #4]
 800346e:	e7b6      	b.n	80033de <_malloc_r+0x4a>
 8003470:	461a      	mov	r2, r3
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	42a3      	cmp	r3, r4
 8003476:	d1fb      	bne.n	8003470 <_malloc_r+0xdc>
 8003478:	2300      	movs	r3, #0
 800347a:	6053      	str	r3, [r2, #4]
 800347c:	e7de      	b.n	800343c <_malloc_r+0xa8>
 800347e:	230c      	movs	r3, #12
 8003480:	4630      	mov	r0, r6
 8003482:	6033      	str	r3, [r6, #0]
 8003484:	f000 f99e 	bl	80037c4 <__malloc_unlock>
 8003488:	e794      	b.n	80033b4 <_malloc_r+0x20>
 800348a:	6005      	str	r5, [r0, #0]
 800348c:	e7d6      	b.n	800343c <_malloc_r+0xa8>
 800348e:	bf00      	nop
 8003490:	20000294 	.word	0x20000294

08003494 <_printf_common>:
 8003494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003498:	4616      	mov	r6, r2
 800349a:	4698      	mov	r8, r3
 800349c:	688a      	ldr	r2, [r1, #8]
 800349e:	690b      	ldr	r3, [r1, #16]
 80034a0:	4607      	mov	r7, r0
 80034a2:	4293      	cmp	r3, r2
 80034a4:	bfb8      	it	lt
 80034a6:	4613      	movlt	r3, r2
 80034a8:	6033      	str	r3, [r6, #0]
 80034aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034ae:	460c      	mov	r4, r1
 80034b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034b4:	b10a      	cbz	r2, 80034ba <_printf_common+0x26>
 80034b6:	3301      	adds	r3, #1
 80034b8:	6033      	str	r3, [r6, #0]
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	0699      	lsls	r1, r3, #26
 80034be:	bf42      	ittt	mi
 80034c0:	6833      	ldrmi	r3, [r6, #0]
 80034c2:	3302      	addmi	r3, #2
 80034c4:	6033      	strmi	r3, [r6, #0]
 80034c6:	6825      	ldr	r5, [r4, #0]
 80034c8:	f015 0506 	ands.w	r5, r5, #6
 80034cc:	d106      	bne.n	80034dc <_printf_common+0x48>
 80034ce:	f104 0a19 	add.w	sl, r4, #25
 80034d2:	68e3      	ldr	r3, [r4, #12]
 80034d4:	6832      	ldr	r2, [r6, #0]
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	42ab      	cmp	r3, r5
 80034da:	dc2b      	bgt.n	8003534 <_printf_common+0xa0>
 80034dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034e0:	6822      	ldr	r2, [r4, #0]
 80034e2:	3b00      	subs	r3, #0
 80034e4:	bf18      	it	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	0692      	lsls	r2, r2, #26
 80034ea:	d430      	bmi.n	800354e <_printf_common+0xba>
 80034ec:	4641      	mov	r1, r8
 80034ee:	4638      	mov	r0, r7
 80034f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034f4:	47c8      	blx	r9
 80034f6:	3001      	adds	r0, #1
 80034f8:	d023      	beq.n	8003542 <_printf_common+0xae>
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	6922      	ldr	r2, [r4, #16]
 80034fe:	f003 0306 	and.w	r3, r3, #6
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf14      	ite	ne
 8003506:	2500      	movne	r5, #0
 8003508:	6833      	ldreq	r3, [r6, #0]
 800350a:	f04f 0600 	mov.w	r6, #0
 800350e:	bf08      	it	eq
 8003510:	68e5      	ldreq	r5, [r4, #12]
 8003512:	f104 041a 	add.w	r4, r4, #26
 8003516:	bf08      	it	eq
 8003518:	1aed      	subeq	r5, r5, r3
 800351a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800351e:	bf08      	it	eq
 8003520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003524:	4293      	cmp	r3, r2
 8003526:	bfc4      	itt	gt
 8003528:	1a9b      	subgt	r3, r3, r2
 800352a:	18ed      	addgt	r5, r5, r3
 800352c:	42b5      	cmp	r5, r6
 800352e:	d11a      	bne.n	8003566 <_printf_common+0xd2>
 8003530:	2000      	movs	r0, #0
 8003532:	e008      	b.n	8003546 <_printf_common+0xb2>
 8003534:	2301      	movs	r3, #1
 8003536:	4652      	mov	r2, sl
 8003538:	4641      	mov	r1, r8
 800353a:	4638      	mov	r0, r7
 800353c:	47c8      	blx	r9
 800353e:	3001      	adds	r0, #1
 8003540:	d103      	bne.n	800354a <_printf_common+0xb6>
 8003542:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800354a:	3501      	adds	r5, #1
 800354c:	e7c1      	b.n	80034d2 <_printf_common+0x3e>
 800354e:	2030      	movs	r0, #48	@ 0x30
 8003550:	18e1      	adds	r1, r4, r3
 8003552:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800355c:	4422      	add	r2, r4
 800355e:	3302      	adds	r3, #2
 8003560:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003564:	e7c2      	b.n	80034ec <_printf_common+0x58>
 8003566:	2301      	movs	r3, #1
 8003568:	4622      	mov	r2, r4
 800356a:	4641      	mov	r1, r8
 800356c:	4638      	mov	r0, r7
 800356e:	47c8      	blx	r9
 8003570:	3001      	adds	r0, #1
 8003572:	d0e6      	beq.n	8003542 <_printf_common+0xae>
 8003574:	3601      	adds	r6, #1
 8003576:	e7d9      	b.n	800352c <_printf_common+0x98>

08003578 <_printf_i>:
 8003578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800357c:	7e0f      	ldrb	r7, [r1, #24]
 800357e:	4691      	mov	r9, r2
 8003580:	2f78      	cmp	r7, #120	@ 0x78
 8003582:	4680      	mov	r8, r0
 8003584:	460c      	mov	r4, r1
 8003586:	469a      	mov	sl, r3
 8003588:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800358a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800358e:	d807      	bhi.n	80035a0 <_printf_i+0x28>
 8003590:	2f62      	cmp	r7, #98	@ 0x62
 8003592:	d80a      	bhi.n	80035aa <_printf_i+0x32>
 8003594:	2f00      	cmp	r7, #0
 8003596:	f000 80d3 	beq.w	8003740 <_printf_i+0x1c8>
 800359a:	2f58      	cmp	r7, #88	@ 0x58
 800359c:	f000 80ba 	beq.w	8003714 <_printf_i+0x19c>
 80035a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035a8:	e03a      	b.n	8003620 <_printf_i+0xa8>
 80035aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035ae:	2b15      	cmp	r3, #21
 80035b0:	d8f6      	bhi.n	80035a0 <_printf_i+0x28>
 80035b2:	a101      	add	r1, pc, #4	@ (adr r1, 80035b8 <_printf_i+0x40>)
 80035b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035b8:	08003611 	.word	0x08003611
 80035bc:	08003625 	.word	0x08003625
 80035c0:	080035a1 	.word	0x080035a1
 80035c4:	080035a1 	.word	0x080035a1
 80035c8:	080035a1 	.word	0x080035a1
 80035cc:	080035a1 	.word	0x080035a1
 80035d0:	08003625 	.word	0x08003625
 80035d4:	080035a1 	.word	0x080035a1
 80035d8:	080035a1 	.word	0x080035a1
 80035dc:	080035a1 	.word	0x080035a1
 80035e0:	080035a1 	.word	0x080035a1
 80035e4:	08003727 	.word	0x08003727
 80035e8:	0800364f 	.word	0x0800364f
 80035ec:	080036e1 	.word	0x080036e1
 80035f0:	080035a1 	.word	0x080035a1
 80035f4:	080035a1 	.word	0x080035a1
 80035f8:	08003749 	.word	0x08003749
 80035fc:	080035a1 	.word	0x080035a1
 8003600:	0800364f 	.word	0x0800364f
 8003604:	080035a1 	.word	0x080035a1
 8003608:	080035a1 	.word	0x080035a1
 800360c:	080036e9 	.word	0x080036e9
 8003610:	6833      	ldr	r3, [r6, #0]
 8003612:	1d1a      	adds	r2, r3, #4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6032      	str	r2, [r6, #0]
 8003618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800361c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003620:	2301      	movs	r3, #1
 8003622:	e09e      	b.n	8003762 <_printf_i+0x1ea>
 8003624:	6833      	ldr	r3, [r6, #0]
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	1d19      	adds	r1, r3, #4
 800362a:	6031      	str	r1, [r6, #0]
 800362c:	0606      	lsls	r6, r0, #24
 800362e:	d501      	bpl.n	8003634 <_printf_i+0xbc>
 8003630:	681d      	ldr	r5, [r3, #0]
 8003632:	e003      	b.n	800363c <_printf_i+0xc4>
 8003634:	0645      	lsls	r5, r0, #25
 8003636:	d5fb      	bpl.n	8003630 <_printf_i+0xb8>
 8003638:	f9b3 5000 	ldrsh.w	r5, [r3]
 800363c:	2d00      	cmp	r5, #0
 800363e:	da03      	bge.n	8003648 <_printf_i+0xd0>
 8003640:	232d      	movs	r3, #45	@ 0x2d
 8003642:	426d      	negs	r5, r5
 8003644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003648:	230a      	movs	r3, #10
 800364a:	4859      	ldr	r0, [pc, #356]	@ (80037b0 <_printf_i+0x238>)
 800364c:	e011      	b.n	8003672 <_printf_i+0xfa>
 800364e:	6821      	ldr	r1, [r4, #0]
 8003650:	6833      	ldr	r3, [r6, #0]
 8003652:	0608      	lsls	r0, r1, #24
 8003654:	f853 5b04 	ldr.w	r5, [r3], #4
 8003658:	d402      	bmi.n	8003660 <_printf_i+0xe8>
 800365a:	0649      	lsls	r1, r1, #25
 800365c:	bf48      	it	mi
 800365e:	b2ad      	uxthmi	r5, r5
 8003660:	2f6f      	cmp	r7, #111	@ 0x6f
 8003662:	6033      	str	r3, [r6, #0]
 8003664:	bf14      	ite	ne
 8003666:	230a      	movne	r3, #10
 8003668:	2308      	moveq	r3, #8
 800366a:	4851      	ldr	r0, [pc, #324]	@ (80037b0 <_printf_i+0x238>)
 800366c:	2100      	movs	r1, #0
 800366e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003672:	6866      	ldr	r6, [r4, #4]
 8003674:	2e00      	cmp	r6, #0
 8003676:	bfa8      	it	ge
 8003678:	6821      	ldrge	r1, [r4, #0]
 800367a:	60a6      	str	r6, [r4, #8]
 800367c:	bfa4      	itt	ge
 800367e:	f021 0104 	bicge.w	r1, r1, #4
 8003682:	6021      	strge	r1, [r4, #0]
 8003684:	b90d      	cbnz	r5, 800368a <_printf_i+0x112>
 8003686:	2e00      	cmp	r6, #0
 8003688:	d04b      	beq.n	8003722 <_printf_i+0x1aa>
 800368a:	4616      	mov	r6, r2
 800368c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003690:	fb03 5711 	mls	r7, r3, r1, r5
 8003694:	5dc7      	ldrb	r7, [r0, r7]
 8003696:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800369a:	462f      	mov	r7, r5
 800369c:	42bb      	cmp	r3, r7
 800369e:	460d      	mov	r5, r1
 80036a0:	d9f4      	bls.n	800368c <_printf_i+0x114>
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d10b      	bne.n	80036be <_printf_i+0x146>
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	07df      	lsls	r7, r3, #31
 80036aa:	d508      	bpl.n	80036be <_printf_i+0x146>
 80036ac:	6923      	ldr	r3, [r4, #16]
 80036ae:	6861      	ldr	r1, [r4, #4]
 80036b0:	4299      	cmp	r1, r3
 80036b2:	bfde      	ittt	le
 80036b4:	2330      	movle	r3, #48	@ 0x30
 80036b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036ba:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80036be:	1b92      	subs	r2, r2, r6
 80036c0:	6122      	str	r2, [r4, #16]
 80036c2:	464b      	mov	r3, r9
 80036c4:	4621      	mov	r1, r4
 80036c6:	4640      	mov	r0, r8
 80036c8:	f8cd a000 	str.w	sl, [sp]
 80036cc:	aa03      	add	r2, sp, #12
 80036ce:	f7ff fee1 	bl	8003494 <_printf_common>
 80036d2:	3001      	adds	r0, #1
 80036d4:	d14a      	bne.n	800376c <_printf_i+0x1f4>
 80036d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036da:	b004      	add	sp, #16
 80036dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	f043 0320 	orr.w	r3, r3, #32
 80036e6:	6023      	str	r3, [r4, #0]
 80036e8:	2778      	movs	r7, #120	@ 0x78
 80036ea:	4832      	ldr	r0, [pc, #200]	@ (80037b4 <_printf_i+0x23c>)
 80036ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	6831      	ldr	r1, [r6, #0]
 80036f4:	061f      	lsls	r7, r3, #24
 80036f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80036fa:	d402      	bmi.n	8003702 <_printf_i+0x18a>
 80036fc:	065f      	lsls	r7, r3, #25
 80036fe:	bf48      	it	mi
 8003700:	b2ad      	uxthmi	r5, r5
 8003702:	6031      	str	r1, [r6, #0]
 8003704:	07d9      	lsls	r1, r3, #31
 8003706:	bf44      	itt	mi
 8003708:	f043 0320 	orrmi.w	r3, r3, #32
 800370c:	6023      	strmi	r3, [r4, #0]
 800370e:	b11d      	cbz	r5, 8003718 <_printf_i+0x1a0>
 8003710:	2310      	movs	r3, #16
 8003712:	e7ab      	b.n	800366c <_printf_i+0xf4>
 8003714:	4826      	ldr	r0, [pc, #152]	@ (80037b0 <_printf_i+0x238>)
 8003716:	e7e9      	b.n	80036ec <_printf_i+0x174>
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	f023 0320 	bic.w	r3, r3, #32
 800371e:	6023      	str	r3, [r4, #0]
 8003720:	e7f6      	b.n	8003710 <_printf_i+0x198>
 8003722:	4616      	mov	r6, r2
 8003724:	e7bd      	b.n	80036a2 <_printf_i+0x12a>
 8003726:	6833      	ldr	r3, [r6, #0]
 8003728:	6825      	ldr	r5, [r4, #0]
 800372a:	1d18      	adds	r0, r3, #4
 800372c:	6961      	ldr	r1, [r4, #20]
 800372e:	6030      	str	r0, [r6, #0]
 8003730:	062e      	lsls	r6, r5, #24
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	d501      	bpl.n	800373a <_printf_i+0x1c2>
 8003736:	6019      	str	r1, [r3, #0]
 8003738:	e002      	b.n	8003740 <_printf_i+0x1c8>
 800373a:	0668      	lsls	r0, r5, #25
 800373c:	d5fb      	bpl.n	8003736 <_printf_i+0x1be>
 800373e:	8019      	strh	r1, [r3, #0]
 8003740:	2300      	movs	r3, #0
 8003742:	4616      	mov	r6, r2
 8003744:	6123      	str	r3, [r4, #16]
 8003746:	e7bc      	b.n	80036c2 <_printf_i+0x14a>
 8003748:	6833      	ldr	r3, [r6, #0]
 800374a:	2100      	movs	r1, #0
 800374c:	1d1a      	adds	r2, r3, #4
 800374e:	6032      	str	r2, [r6, #0]
 8003750:	681e      	ldr	r6, [r3, #0]
 8003752:	6862      	ldr	r2, [r4, #4]
 8003754:	4630      	mov	r0, r6
 8003756:	f000 f893 	bl	8003880 <memchr>
 800375a:	b108      	cbz	r0, 8003760 <_printf_i+0x1e8>
 800375c:	1b80      	subs	r0, r0, r6
 800375e:	6060      	str	r0, [r4, #4]
 8003760:	6863      	ldr	r3, [r4, #4]
 8003762:	6123      	str	r3, [r4, #16]
 8003764:	2300      	movs	r3, #0
 8003766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800376a:	e7aa      	b.n	80036c2 <_printf_i+0x14a>
 800376c:	4632      	mov	r2, r6
 800376e:	4649      	mov	r1, r9
 8003770:	4640      	mov	r0, r8
 8003772:	6923      	ldr	r3, [r4, #16]
 8003774:	47d0      	blx	sl
 8003776:	3001      	adds	r0, #1
 8003778:	d0ad      	beq.n	80036d6 <_printf_i+0x15e>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	079b      	lsls	r3, r3, #30
 800377e:	d413      	bmi.n	80037a8 <_printf_i+0x230>
 8003780:	68e0      	ldr	r0, [r4, #12]
 8003782:	9b03      	ldr	r3, [sp, #12]
 8003784:	4298      	cmp	r0, r3
 8003786:	bfb8      	it	lt
 8003788:	4618      	movlt	r0, r3
 800378a:	e7a6      	b.n	80036da <_printf_i+0x162>
 800378c:	2301      	movs	r3, #1
 800378e:	4632      	mov	r2, r6
 8003790:	4649      	mov	r1, r9
 8003792:	4640      	mov	r0, r8
 8003794:	47d0      	blx	sl
 8003796:	3001      	adds	r0, #1
 8003798:	d09d      	beq.n	80036d6 <_printf_i+0x15e>
 800379a:	3501      	adds	r5, #1
 800379c:	68e3      	ldr	r3, [r4, #12]
 800379e:	9903      	ldr	r1, [sp, #12]
 80037a0:	1a5b      	subs	r3, r3, r1
 80037a2:	42ab      	cmp	r3, r5
 80037a4:	dcf2      	bgt.n	800378c <_printf_i+0x214>
 80037a6:	e7eb      	b.n	8003780 <_printf_i+0x208>
 80037a8:	2500      	movs	r5, #0
 80037aa:	f104 0619 	add.w	r6, r4, #25
 80037ae:	e7f5      	b.n	800379c <_printf_i+0x224>
 80037b0:	080039d7 	.word	0x080039d7
 80037b4:	080039e8 	.word	0x080039e8

080037b8 <__malloc_lock>:
 80037b8:	4801      	ldr	r0, [pc, #4]	@ (80037c0 <__malloc_lock+0x8>)
 80037ba:	f7ff bc6f 	b.w	800309c <__retarget_lock_acquire_recursive>
 80037be:	bf00      	nop
 80037c0:	2000028c 	.word	0x2000028c

080037c4 <__malloc_unlock>:
 80037c4:	4801      	ldr	r0, [pc, #4]	@ (80037cc <__malloc_unlock+0x8>)
 80037c6:	f7ff bc6a 	b.w	800309e <__retarget_lock_release_recursive>
 80037ca:	bf00      	nop
 80037cc:	2000028c 	.word	0x2000028c

080037d0 <_realloc_r>:
 80037d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037d4:	4680      	mov	r8, r0
 80037d6:	4615      	mov	r5, r2
 80037d8:	460c      	mov	r4, r1
 80037da:	b921      	cbnz	r1, 80037e6 <_realloc_r+0x16>
 80037dc:	4611      	mov	r1, r2
 80037de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037e2:	f7ff bdd7 	b.w	8003394 <_malloc_r>
 80037e6:	b92a      	cbnz	r2, 80037f4 <_realloc_r+0x24>
 80037e8:	f000 f866 	bl	80038b8 <_free_r>
 80037ec:	2400      	movs	r4, #0
 80037ee:	4620      	mov	r0, r4
 80037f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037f4:	f000 f8a8 	bl	8003948 <_malloc_usable_size_r>
 80037f8:	4285      	cmp	r5, r0
 80037fa:	4606      	mov	r6, r0
 80037fc:	d802      	bhi.n	8003804 <_realloc_r+0x34>
 80037fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003802:	d8f4      	bhi.n	80037ee <_realloc_r+0x1e>
 8003804:	4629      	mov	r1, r5
 8003806:	4640      	mov	r0, r8
 8003808:	f7ff fdc4 	bl	8003394 <_malloc_r>
 800380c:	4607      	mov	r7, r0
 800380e:	2800      	cmp	r0, #0
 8003810:	d0ec      	beq.n	80037ec <_realloc_r+0x1c>
 8003812:	42b5      	cmp	r5, r6
 8003814:	462a      	mov	r2, r5
 8003816:	4621      	mov	r1, r4
 8003818:	bf28      	it	cs
 800381a:	4632      	movcs	r2, r6
 800381c:	f000 f83e 	bl	800389c <memcpy>
 8003820:	4621      	mov	r1, r4
 8003822:	4640      	mov	r0, r8
 8003824:	f000 f848 	bl	80038b8 <_free_r>
 8003828:	463c      	mov	r4, r7
 800382a:	e7e0      	b.n	80037ee <_realloc_r+0x1e>

0800382c <memmove>:
 800382c:	4288      	cmp	r0, r1
 800382e:	b510      	push	{r4, lr}
 8003830:	eb01 0402 	add.w	r4, r1, r2
 8003834:	d902      	bls.n	800383c <memmove+0x10>
 8003836:	4284      	cmp	r4, r0
 8003838:	4623      	mov	r3, r4
 800383a:	d807      	bhi.n	800384c <memmove+0x20>
 800383c:	1e43      	subs	r3, r0, #1
 800383e:	42a1      	cmp	r1, r4
 8003840:	d008      	beq.n	8003854 <memmove+0x28>
 8003842:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003846:	f803 2f01 	strb.w	r2, [r3, #1]!
 800384a:	e7f8      	b.n	800383e <memmove+0x12>
 800384c:	4601      	mov	r1, r0
 800384e:	4402      	add	r2, r0
 8003850:	428a      	cmp	r2, r1
 8003852:	d100      	bne.n	8003856 <memmove+0x2a>
 8003854:	bd10      	pop	{r4, pc}
 8003856:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800385a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800385e:	e7f7      	b.n	8003850 <memmove+0x24>

08003860 <_sbrk_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	2300      	movs	r3, #0
 8003864:	4d05      	ldr	r5, [pc, #20]	@ (800387c <_sbrk_r+0x1c>)
 8003866:	4604      	mov	r4, r0
 8003868:	4608      	mov	r0, r1
 800386a:	602b      	str	r3, [r5, #0]
 800386c:	f7fd f996 	bl	8000b9c <_sbrk>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d102      	bne.n	800387a <_sbrk_r+0x1a>
 8003874:	682b      	ldr	r3, [r5, #0]
 8003876:	b103      	cbz	r3, 800387a <_sbrk_r+0x1a>
 8003878:	6023      	str	r3, [r4, #0]
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	20000298 	.word	0x20000298

08003880 <memchr>:
 8003880:	4603      	mov	r3, r0
 8003882:	b510      	push	{r4, lr}
 8003884:	b2c9      	uxtb	r1, r1
 8003886:	4402      	add	r2, r0
 8003888:	4293      	cmp	r3, r2
 800388a:	4618      	mov	r0, r3
 800388c:	d101      	bne.n	8003892 <memchr+0x12>
 800388e:	2000      	movs	r0, #0
 8003890:	e003      	b.n	800389a <memchr+0x1a>
 8003892:	7804      	ldrb	r4, [r0, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	428c      	cmp	r4, r1
 8003898:	d1f6      	bne.n	8003888 <memchr+0x8>
 800389a:	bd10      	pop	{r4, pc}

0800389c <memcpy>:
 800389c:	440a      	add	r2, r1
 800389e:	4291      	cmp	r1, r2
 80038a0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80038a4:	d100      	bne.n	80038a8 <memcpy+0xc>
 80038a6:	4770      	bx	lr
 80038a8:	b510      	push	{r4, lr}
 80038aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038ae:	4291      	cmp	r1, r2
 80038b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038b4:	d1f9      	bne.n	80038aa <memcpy+0xe>
 80038b6:	bd10      	pop	{r4, pc}

080038b8 <_free_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	4605      	mov	r5, r0
 80038bc:	2900      	cmp	r1, #0
 80038be:	d040      	beq.n	8003942 <_free_r+0x8a>
 80038c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038c4:	1f0c      	subs	r4, r1, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bfb8      	it	lt
 80038ca:	18e4      	addlt	r4, r4, r3
 80038cc:	f7ff ff74 	bl	80037b8 <__malloc_lock>
 80038d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003944 <_free_r+0x8c>)
 80038d2:	6813      	ldr	r3, [r2, #0]
 80038d4:	b933      	cbnz	r3, 80038e4 <_free_r+0x2c>
 80038d6:	6063      	str	r3, [r4, #4]
 80038d8:	6014      	str	r4, [r2, #0]
 80038da:	4628      	mov	r0, r5
 80038dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038e0:	f7ff bf70 	b.w	80037c4 <__malloc_unlock>
 80038e4:	42a3      	cmp	r3, r4
 80038e6:	d908      	bls.n	80038fa <_free_r+0x42>
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	1821      	adds	r1, r4, r0
 80038ec:	428b      	cmp	r3, r1
 80038ee:	bf01      	itttt	eq
 80038f0:	6819      	ldreq	r1, [r3, #0]
 80038f2:	685b      	ldreq	r3, [r3, #4]
 80038f4:	1809      	addeq	r1, r1, r0
 80038f6:	6021      	streq	r1, [r4, #0]
 80038f8:	e7ed      	b.n	80038d6 <_free_r+0x1e>
 80038fa:	461a      	mov	r2, r3
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	b10b      	cbz	r3, 8003904 <_free_r+0x4c>
 8003900:	42a3      	cmp	r3, r4
 8003902:	d9fa      	bls.n	80038fa <_free_r+0x42>
 8003904:	6811      	ldr	r1, [r2, #0]
 8003906:	1850      	adds	r0, r2, r1
 8003908:	42a0      	cmp	r0, r4
 800390a:	d10b      	bne.n	8003924 <_free_r+0x6c>
 800390c:	6820      	ldr	r0, [r4, #0]
 800390e:	4401      	add	r1, r0
 8003910:	1850      	adds	r0, r2, r1
 8003912:	4283      	cmp	r3, r0
 8003914:	6011      	str	r1, [r2, #0]
 8003916:	d1e0      	bne.n	80038da <_free_r+0x22>
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	4408      	add	r0, r1
 800391e:	6010      	str	r0, [r2, #0]
 8003920:	6053      	str	r3, [r2, #4]
 8003922:	e7da      	b.n	80038da <_free_r+0x22>
 8003924:	d902      	bls.n	800392c <_free_r+0x74>
 8003926:	230c      	movs	r3, #12
 8003928:	602b      	str	r3, [r5, #0]
 800392a:	e7d6      	b.n	80038da <_free_r+0x22>
 800392c:	6820      	ldr	r0, [r4, #0]
 800392e:	1821      	adds	r1, r4, r0
 8003930:	428b      	cmp	r3, r1
 8003932:	bf01      	itttt	eq
 8003934:	6819      	ldreq	r1, [r3, #0]
 8003936:	685b      	ldreq	r3, [r3, #4]
 8003938:	1809      	addeq	r1, r1, r0
 800393a:	6021      	streq	r1, [r4, #0]
 800393c:	6063      	str	r3, [r4, #4]
 800393e:	6054      	str	r4, [r2, #4]
 8003940:	e7cb      	b.n	80038da <_free_r+0x22>
 8003942:	bd38      	pop	{r3, r4, r5, pc}
 8003944:	20000294 	.word	0x20000294

08003948 <_malloc_usable_size_r>:
 8003948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800394c:	1f18      	subs	r0, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	bfbc      	itt	lt
 8003952:	580b      	ldrlt	r3, [r1, r0]
 8003954:	18c0      	addlt	r0, r0, r3
 8003956:	4770      	bx	lr

08003958 <_init>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	bf00      	nop
 800395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	469e      	mov	lr, r3
 8003962:	4770      	bx	lr

08003964 <_fini>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	bf00      	nop
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr
